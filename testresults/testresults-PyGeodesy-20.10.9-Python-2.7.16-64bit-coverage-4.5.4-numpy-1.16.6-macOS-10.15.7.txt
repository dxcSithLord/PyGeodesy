test/run.py typical test results (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7)

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testAlbers.py

    testing testAlbers.py 20.08.22 (module pygeodesy.albers 20.10.02)
    test 1 name: Karney_example
    test 2 datum: WGS84
    test 3 ellipsoid: WGS84
    test 4 lat0: 40.451991337063
    test 5 scale0: 0.999959500363
    test 6 equatoradius: 6378137.000000000000
    test 7 flattening: 0.003352810665
    test 8 _sign: 1.000000000000
    test 9 _m02: 0.580681094922
    test 10 _n0: 0.648810669236
    test 11 _txi0: 0.848822476849
    test 12 iteration: 3
    test 13 ispolar: False
    test 14 forward: -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 15 reverse: -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 16 forward: 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 17 reverse: 199089.12574012, -53115.52801838, 39.95, -75.17, 1.51160641, 0.99999745  FAILED, KNOWN, expected 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 18 reverse: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 19 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 20 reverse: 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808
    test 21 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808  FAILED, KNOWN, expected 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808

    testPage292(pygeodesy.albers, 20.10.02)
    test 22 name: Snyder_p292
    test 23 datum: NAD27
    test 24 ellipsoid: Clarke1866
    test 25 lat0: 37.934543880726
    test 26 scale0: 0.990309187872
    test 27 equatoradius: 6378206.400000000373
    test 28 flattening: 0.003390075304
    test 29 _sign: 1.000000000000
    test 30 _m02: 0.623664507732
    test 31 _n0: 0.614760830736
    test 32 _txi0: 0.775925617021
    test 33 iteration: 4
    test 34 ispolar: False
    test 35 forward: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 36 reverse: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 37 forward: 1885472.72581347, -119505.66687765, 35.0, 21.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 38 reverse: 1885472.72581347, -119505.66687765, 35.0, -75.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 39 reverse: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 40 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 41 reverse: 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109
    test 42 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109  FAILED, KNOWN, expected 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109

    testTable15(pygeodesy.albers, 20.10.02)
    test 43 52 k: 1.02863
    test 44 50 k: 1.01727
    test 45 45.5 k: 1.00000
    test 46 45 k: 0.99869
    test 47 40 k: 0.99097
    test 48 35 k: 0.99155
    test 49 30 k: 0.99893
    test 50 29.5 k: 1.00000
    test 51 25 k: 1.01222
    test 52 22 k: 1.02283

    testLats(pygeodesy.albers, 20.10.02)
    test 53 AlbersEqualArea.lat0: 45.0
    test 54 AlbersEqualArea.lat1: 45.0
    test 55 AlbersEqualArea.lat2: 45.0
    test 56 AlbersEqualArea2.lat0: 40.0
    test 57 AlbersEqualArea2.lat1: 40.0
    test 58 AlbersEqualArea2.lat2: 40.0
    test 59 AlbersEqualArea4.lat0: 30.0
    test 60 AlbersEqualArea4.lat1: 30.0
    test 61 AlbersEqualArea4.lat2: 30.0
    test 62 AlbersEqualArea4.lat0: -30.0
    test 63 AlbersEqualArea4.lat1: -30.0
    test 64 AlbersEqualArea4.lat2: -30.0
    test 65 AlbersEqualAreaCylindrical.lat0: 0.0
    test 66 AlbersEqualAreaCylindrical.lat1: 0.0
    test 67 AlbersEqualAreaCylindrical.lat2: 0.0
    test 68 AlbersEqualAreaNorth.lat0: 90.0
    test 69 AlbersEqualAreaNorth.lat1: 90.0
    test 70 AlbersEqualAreaNorth.lat2: 90.0
    test 71 AlbersEqualAreaSouth.lat0: -90.0
    test 72 AlbersEqualAreaSouth.lat1: -90.0
    test 73 AlbersEqualAreaSouth.lat2: -90.0
    test 74 error: lat1 (150.0): above 90 limit
    test 75 error: slat1 (-0.5) or slat2 (0.5): invalid

    7 of 75 testAlbers.py tests (9.3%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 17.271 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testAzimuthal.py

    testing testAzimuthal.py 20.09.11 (module pygeodesy.azimuthal 20.10.05)
    test 1 Equidistant(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 forward: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 3 reverse: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 4 iteration: None
    test 5 copy(Equidistant): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 6 Equidistant.copy(): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 7 reverse: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 8 forward: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 9 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 10 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 11 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 12 Equidistant(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 13 forward: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 14 reverse: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 15 iteration: None
    test 16 hypot: 339535.102  FAILED, KNOWN, expected 338901.865

    test 17 Gnomonic(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 18 forward: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000669
    test 19 reverse: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000223
    test 20 iteration: None
    test 21 copy(Gnomonic): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 22 Gnomonic.copy(): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 23 reverse: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000222
    test 24 forward: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000667
    test 25 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 26 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 27 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 28 Gnomonic(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 29 forward: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.001416
    test 30 reverse: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.000472
    test 31 iteration: None
    test 32 hypot: 339855.719  FAILED, KNOWN, expected 338901.865

    14 tests skipped (14): no geographiclib
    test 33 Equidistant(10, 80): 1.37704, 0.24656
    test 34 Equidistant(10, 80): 10.0, 80.0
    test 35 Gnomonic(10, 80): 5.67128, 1.01543
    test 36 Gnomonic(10, 80): 10.0, 80.0
    test 37 LambertEqualArea(10, 80): 1.26747, 0.22694
    test 38 LambertEqualArea(10, 80): 10.0, 80.0
    test 39 Orthographic(10, 80): 0.96985, 0.17365
    test 40 Orthographic(10, 80): 10.0, 80.0
    test 41 Stereographic(10, 80): 1.65643, 0.29658
    test 42 Stereographic(10, 80): 10.0, 80.0
    test 43 Equidistant(20, 20): 0.33454, 0.35601
    test 44 Equidistant(20, 20): 20.0, 20.0
    test 45 Gnomonic(20, 20): 0.36397, 0.38733
    test 46 Gnomonic(20, 20): 20.0, 20.0
    test 47 LambertEqualArea(20, 20): 0.33123, 0.35248
    test 48 LambertEqualArea(20, 20): 20.0, 20.0
    test 49 Orthographic(20, 20): 0.32139, 0.34202
    test 50 Orthographic(20, 20): 20.0, 20.0
    test 51 Stereographic(20, 20): 0.34136, 0.36327
    test 52 Stereographic(20, 20): 20.0, 20.0
    test 53 Equidistant(40, 40): 0.57386, 0.74912
    test 54 Equidistant(40, 40): 40.0, 40.0
    test 55 Gnomonic(40, 40): 0.8391, 1.09537
    test 56 Gnomonic(40, 40): 40.0, 40.0
    test 57 LambertEqualArea(40, 40): 0.55281, 0.72164
    test 58 LambertEqualArea(40, 40): 40.0, 40.0
    test 59 Orthographic(40, 40): 0.4924, 0.64279
    test 60 Orthographic(40, 40): 40.0, 40.0
    test 61 Stereographic(40, 40): 0.62062, 0.81016
    test 62 Stereographic(40, 40): 40.0, 40.0
    test 63 Equidistant(60, 60): 0.58948, 1.17896
    test 64 Equidistant(60, 60): 60.0, 60.0
    test 65 Gnomonic(60, 60): 1.73205, 3.4641
    test 66 Gnomonic(60, 60): 60.0, 60.0
    test 67 LambertEqualArea(60, 60): 0.54772, 1.09545
    test 68 LambertEqualArea(60, 60): 60.0, 60.0
    test 69 Orthographic(60, 60): 0.43301, 0.86603
    test 70 Orthographic(60, 60): 60.0, 60.0
    test 71 Stereographic(60, 60): 0.69282, 1.38564
    test 72 Stereographic(60, 60): 60.0, 60.0
    test 73 Equidistant(70, 80): 0.50997, 1.42273
    test 74 Equidistant(70, 80): 70.0, 80.0
    test 75 Gnomonic(70, 80): 5.67128, 15.82209
    test 76 Gnomonic(70, 80): 70.0, 80.0
    test 77 LambertEqualArea(70, 80): 0.4628, 1.29114
    test 78 LambertEqualArea(70, 80): 70.0, 80.0
    test 79 Orthographic(70, 80): 0.33682, 0.93969
    test 80 Orthographic(70, 80): 70.0, 80.0
    test 81 Stereographic(70, 80): 0.63588, 1.77402
    test 82 Stereographic(70, 80): 70.0, 80.0
    test 83 Equidistant(80, 80): 0.26358, 1.51792
    test 84 Equidistant(80, 80): 80.0, 80.0
    test 85 Gnomonic(80, 80): 5.67128, 32.65961
    test 86 Gnomonic(80, 80): 80.0, 80.0
    test 87 LambertEqualArea(80, 80): 0.23828, 1.37219
    test 88 LambertEqualArea(80, 80): 80.0, 80.0
    test 89 Orthographic(80, 80): 0.17101, 0.98481
    test 90 Orthographic(80, 80): 80.0, 80.0
    test 91 Stereographic(80, 80): 0.33201, 1.91196
    test 92 Stereographic(80, 80): 80.0, 80.0
    test 93 Equidistant(80, 10): 0.04281, 1.39829
    test 94 Equidistant(80, 10): 80.0, 10.0
    test 95 Gnomonic(80, 10): 0.17633, 5.75877
    test 96 Gnomonic(80, 10): 80.0, 10.0
    test 97 LambertEqualArea(80, 10): 0.03941, 1.28702
    test 98 LambertEqualArea(80, 10): 80.0, 10.0
    test 99 Orthographic(80, 10): 0.03015, 0.98481
    test 100 Orthographic(80, 10): 80.0, 10.0
    test 101 Stereographic(80, 10): 0.0515, 1.68198
    test 102 Stereographic(80, 10): 80.0, 10.0

    test 103 function: equidistant
    test 104 equatoradius: 1.0
    test 105 flattening: 0.0
    test 106 iteration: None
    test 107 latlon0: (0.0, 0.0)
    test 108 latlon0: (1.0, 2.0)
    test 109 name: coverage
    test 110 radius: 1.0

    test 111 function: gnomonic
    test 112 equatoradius: 1.0
    test 113 flattening: 0.0
    test 114 iteration: None
    test 115 latlon0: (0.0, 0.0)
    test 116 latlon0: (1.0, 2.0)
    test 117 name: coverage
    test 118 radius: 1.0

    2 of 118 testAzimuthal.py tests (1.7%) FAILED, ALL KNOWN, 14 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 21.448 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testBasics.py

    testing testBasics.py 20.05.05 (module pygeodesy.basics 20.10.08)
    test 1 clips: test/t....ics.py
    test 2 halfs2: ('test/test', 'Basics.py')
    test 3 isfinite(0): True
    test 4 isint(0): True
    test 5 isint(0+0.5): False
    test 6 isscalar(0): True
    test 7 isfinite(0.0): True
    test 8 isint(0.0): True
    test 9 isint(0.0+0.5): False
    test 10 isscalar(0.0): True
    test 11 isfinite(1): True
    test 12 isint(1): True
    test 13 isint(1+0.5): False
    test 14 isscalar(1): True
    test 15 isfinite(1.0): True
    test 16 isint(1.0): True
    test 17 isint(1.0+0.5): False
    test 18 isscalar(1.0): True
    test 19 isfinite(1e+300): True
    test 20 isint(1e+300): True
    test 21 isint(1e+300+0.5): True
    test 22 isscalar(1e+300): True
    test 23 isfinite(-1e+300): True
    test 24 isint(-1e+300): True
    test 25 isint(-1e+300+0.5): True
    test 26 isscalar(-1e+300): True
    test 27 isfinite(inf): False
    test 28 isint(inf): False
    test 29 isint(inf+0.5): False
    test 30 isscalar(inf): True
    test 31 isfinite(inf): False
    test 32 isint(inf): False
    test 33 isint(inf+0.5): False
    test 34 isscalar(inf): True
    test 35 isfinite(nan): False
    test 36 isint(nan): False
    test 37 isint(nan+0.5): False
    test 38 isscalar(nan): True
    test 39 isfinite(-0.0): True
    test 40 isint(-0.0): True
    test 41 isint(-0.0+0.5): False
    test 42 isscalar(-0.0): True
    test 43 isneg0(NEG0): True
    test 44 isneg0(0.0): False
    test 45 isneg0(INF): False
    test 46 isneg0(NAN): False
    test 47 type(C.r_o): property_RO
    test 48 type(c.r_o): <type 'bool'>
    test 49 c.r_o: True
    test 50 c.r_o = False: immutable property: <__main__.C object at 0x112a8d190>.r_o = False, invalid
    test 51 splice: ([0, 2, 4, 6, 8], [1, 3, 5, 7, 9])
    test 52 splice: ([0, 3, 6, 9], [1, 4, 7], [2, 5, 8])
    test 53 splice: ([0, 3, 6, 9], [1, 4, 7, -1], [2, 5, 8, -1])
    test 54 splice: ([0, 5, 10], [1, 6, 11], [2, 7], [3, 8], [4, 9])

    all 54 testBasics.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 1.512 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testCartesian.py

    testing testCartesian.py 20.09.30

    testCartesian(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 1 Cartesian0: [3980581, 97, 4966825]
    test 2 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 copy(Cartesian): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 6 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 7 Nvector: Nvector(0.62282, 0.00002, 0.78237, +0.24)
    test 8 Nvector3: (0.623, 0.0, 0.782, +0.24)
    test 9 Nvector6: (0.622818, 0.000015, 0.782367, +0.24)
    test 10 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 11 LatLon: 50.0379°N, 008.5622°E
    test 12 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 13 LatLon: 51.47°N, 000.4543°E, +0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 14 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 15 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 16 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 17 LatLon: 33.95°N, 118.4°W
    test 18 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 19 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 20 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 21 LatLon: 40.96°N, 005.5°E, +0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 22 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 23 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 24 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 25 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 26 copy: True
    test 27 __eq__: True
    test 28 __ne__: False
    test 29 Cartesian: <class 'pygeodesy.ellipsoidalNvector.Cartesian'>
    test 30 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 31 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 32 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 33 isequalTo: <type 'bool'>
    test 34 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 35 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 36 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 37 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 38 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 39 toLatLon: <class 'pygeodesy.ellipsoidalNvector.LatLon'>
    test 40 toNvector: <class 'pygeodesy.ellipsoidalNvector.Nvector'>
    test 41 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 42 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 43 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 44 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 45 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 46 isequalTo: <type 'bool'>
    test 47 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 48 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 49 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 50 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 51 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 52 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 53 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 54 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 55 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 56 vector3d.intersections2: 0.0312613
    test 57 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 58 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 59 Cartesian0: [3980581, 97, 4966825]
    test 60 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 61 isEllipsoidal: True
    test 62 isSpherical: False
    test 63 copy(Cartesian): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 64 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 65 Vector4Tuple: Vector4Tuple(x=0.622818, y=0.000015, z=0.782367, h=0.242887)  FAILED, KNOWN, expected (x=0.6228177647454303, y=1.517701139112776e-05, z=0.782366941841975, h=0.24288680875513333)
    test 66 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 67 LatLon: 50.0379°N, 008.5622°E
    test 68 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 69 LatLon: 51.47°N, 000.4543°E, +0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 70 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 71 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 72 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 73 LatLon: 33.95°N, 118.4°W
    test 74 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 75 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 76 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 77 LatLon: 40.96°N, 005.5°E, +0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 78 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 79 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 80 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 81 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 82 copy: True
    test 83 __eq__: True
    test 84 __ne__: False
    test 85 Cartesian: <class 'pygeodesy.ellipsoidalVincenty.Cartesian'>
    test 86 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 87 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 88 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 89 isequalTo: <type 'bool'>
    test 90 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 91 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 92 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 93 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 94 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 95 toLatLon: <class 'pygeodesy.ellipsoidalVincenty.LatLon'>
    test 96 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 97 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 98 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 99 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 100 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 101 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 102 isequalTo: <type 'bool'>
    test 103 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 104 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 105 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 106 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 107 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 108 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 109 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 110 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 111 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 112 vector3d.intersections2: 0.0312613
    test 113 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 114 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.sphericalNvector, 20.10.02)
    test 115 Cartesian0: [3980581, 97, 4966825]
    test 116 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 117 isEllipsoidal: False
    test 118 isSpherical: True
    test 119 copy(Cartesian): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 120 Cartesian.copy(): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 121 Nvector: Nvector(0.62538, 0.00002, 0.78032, -5918.38)
    test 122 Nvector3: (0.625, 0.0, 0.78, -5918.38)
    test 123 Nvector6: (0.625377, 0.000015, 0.780323, -5918.38)
    test 124 LatLon: 50.0379°N, 008.5622°E, -0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 125 LatLon: 51.47°N, 000.4543°E
    test 126 LatLon: 40.633365°N, 073.783328°W
    test 127 LatLon: 33.95°N, 118.4°W
    test 128 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 129 LatLon: 40.96°N, 005.5°E
    test 130 LatLon: 40.1°N, 116.6°E, +0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 131 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 132 copy: True
    test 133 __eq__: True
    test 134 __ne__: False
    test 135 Cartesian: <class 'pygeodesy.sphericalNvector.Cartesian'>
    test 136 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 137 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 138 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 139 isequalTo: <type 'bool'>
    test 140 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 141 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 142 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 143 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 144 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 145 toLatLon: <class 'pygeodesy.sphericalNvector.LatLon'>
    test 146 toNvector: <class 'pygeodesy.sphericalNvector.Nvector'>
    test 147 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 148 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 149 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 150 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 151 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 152 isequalTo: <type 'bool'>
    test 153 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 154 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 155 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 156 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 157 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 158 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 159 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 160 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 161 sphericalNvector.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 162 sphericalNvector.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 163 sphericalNvector.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 164 sphericalNvector.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 165 sphericalNvector.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 166 sphericalNvector.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 167 vector3d.trilaterate3d2: (-0.032761, -0.784757, 0.618937)  FAILED, KNOWN, expected [-0.032779, -0.784769, 0.61892]
    test 168 vector3d.trilaterate3d2: (0.025768, -0.798331, 0.601668)  FAILED, KNOWN, expected [0.025768, -0.798347, 0.601646]
    test 169 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 170 vector3d.intersections2: 0.0312613
    test 171 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 172 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 173 Cartesian0: [3980581, 97, 4966825]
    test 174 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 175 isEllipsoidal: False
    test 176 isSpherical: True
    test 177 copy(Cartesian): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 178 Cartesian.copy(): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 179 Vector4Tuple: Vector4Tuple(x=0.625377, y=0.000015, z=0.780323, h=-5918.380258)  FAILED, KNOWN, expected (x=0.6253769790183048, y=1.5239375097448227e-05, z=0.7803227754472505, h=-5918.3802583276365)
    test 180 LatLon: 50.0379°N, 008.5622°E, -0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 181 LatLon: 51.47°N, 000.4543°E
    test 182 LatLon: 40.633365°N, 073.783328°W
    test 183 LatLon: 33.95°N, 118.4°W
    test 184 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 185 LatLon: 40.96°N, 005.5°E
    test 186 LatLon: 40.1°N, 116.6°E, +0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 187 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 188 copy: True
    test 189 __eq__: True
    test 190 __ne__: False
    test 191 Cartesian: <class 'pygeodesy.sphericalTrigonometry.Cartesian'>
    test 192 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 193 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 194 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 195 isequalTo: <type 'bool'>
    test 196 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 197 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 198 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 199 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 200 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 201 toLatLon: <class 'pygeodesy.sphericalTrigonometry.LatLon'>
    test 202 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 203 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 204 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 205 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 206 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 207 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 208 isequalTo: <type 'bool'>
    test 209 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 210 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 211 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 212 to3llh: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 213 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 214 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 215 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 216 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 217 sphericalTrigonometry.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 218 sphericalTrigonometry.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 219 sphericalTrigonometry.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 220 sphericalTrigonometry.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 221 sphericalTrigonometry.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 222 sphericalTrigonometry.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 223 vector3d.trilaterate3d2: (-0.032761, -0.784757, 0.618937)  FAILED, KNOWN, expected [-0.032779, -0.784769, 0.61892]
    test 224 vector3d.trilaterate3d2: (0.025768, -0.798331, 0.601668)  FAILED, KNOWN, expected [0.025768, -0.798347, 0.601646]
    test 225 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 226 vector3d.intersections2: 0.0312613
    test 227 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 228 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    26 of 228 testCartesian.py tests (11.4%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 30.844 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testClasses.py

    testing testClasses.py 20.03.14

    testCartesianAttrs(20.03.14)
    test 1 Ecef property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 2 angleTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 3 attrs() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 4 classname property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 5 classnaming property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 6 classof() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 7 cmp() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 8 convertDatum() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 9 convertRefFrame() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 10 copy() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 11 cross() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 12 crosserrors property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 13 datum property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 14 dividedBy() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 15 dot() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 16 equals() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 17 euclid property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 18 height property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 19 intersections2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 20 isEllipsoidal property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 21 isSpherical property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 22 iscolinearWith() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 23 isequalTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 24 latlon property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 25 latlonheight property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 26 latlonheightdatum property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 27 length property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 28 length2 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 29 minus() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 30 name property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 31 named property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 32 named2 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 33 named3 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 34 named4 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 35 nearestOn() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 36 negate() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 37 others() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 38 parse() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 39 philam property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 40 philamheight property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 41 philamheightdatum property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 42 plus() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 43 rotate() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 44 rotateAround() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 45 sum() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 46 times() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 47 to2ab() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 48 to2ll() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 49 to3llh() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 50 to3xyz() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 51 toEcef() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 52 toLatLon() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 53 toNvector() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 54 toRepr() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 55 toStr() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 56 toStr2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 57 toVector() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 58 trilaterate3d2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 59 unit() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 60 x property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 61 xyz property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 62 y property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 63 z property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testCartesianMro(20.03.14)
    test 64 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 65 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 66 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 67 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 68 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testLatLonAttrs(20.03.14)
    test 69 Ecef property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 70 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 71 antipode() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 72 attrs() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 73 bearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 74 bearingTo2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 75 bounds() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 76 boundsOf() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 77 classname property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 78 classnaming property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 79 classof() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 80 compassAngle() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 81 compassAngleTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 82 convergence property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 83 convertDatum() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 84 convertRefFrame() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 85 copy() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 86 cosineAndoyerLambertTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 87 cosineForsytheAndoyerLambertTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 88 cosineLawTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 89 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 90 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 91 datum property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 92 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 93 destination() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 94 destination2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 95 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 96 distanceTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 97 distanceTo2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 98 distanceTo3() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 99 elevation2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 100 ellipsoid() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 101 ellipsoids() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 102 epoch property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 103 epsilon property: pygeodesy.ellipsoidalVincenty
    test 104 equals() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 105 equals3() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 106 equirectangularTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 107 euclideanTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 108 finalBearingOn() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 109 finalBearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 110 flatLocalTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 111 flatPolarTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 112 geodesic property_RO: pygeodesy.ellipsoidalKarney
    test 113 geoidHeight2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 114 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 115 greatCircleTo() method: pygeodesy.sphericalNvector
    test 116 haversineTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 117 height property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 118 heightStr() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 119 hubenyTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 120 initialBearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 121 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 122 intermediateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 123 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 124 intersections2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 125 isEllipsoidal property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 126 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 127 isSpherical property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 128 isWithin() method: pygeodesy.sphericalNvector
    test 129 isantipode() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 130 isantipodeTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 131 isenclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 132 isequalTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 133 isequalTo3() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 134 iswithin() method: pygeodesy.sphericalNvector
    test 135 iteration property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 136 iterations property: pygeodesy.ellipsoidalVincenty
    test 137 lam property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 138 lat property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 139 latlon property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 140 latlon2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 141 latlon2round() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 142 latlon_() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 143 latlonheight property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 144 lon property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 145 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 146 midpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 147 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 148 name property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 149 named property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 150 named2 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 151 named3 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 152 named4 property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 153 nearestOn() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 154 nearestOn2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 155 nearestOn3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 156 others() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 157 parse() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 158 phi property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 159 philam property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 160 philam2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 161 philamheight property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 162 points() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 163 points2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 164 reframe property: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 165 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 166 rhumbDestination() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 167 rhumbDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 168 rhumbMidpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 169 scale property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 170 thomasTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 171 to2ab() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 172 to3llh() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 173 to3xyz() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 174 toCartesian() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 175 toEcef() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 176 toEtm() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 177 toLcc() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 178 toNvector() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 179 toOsgr() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 180 toRepr() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 181 toStr() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 182 toStr2() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 183 toUps() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 184 toUtm() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 185 toUtmUps() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 186 toVector() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 187 toVector3d() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 188 toWm() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 189 triangulate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 190 trilaterate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 191 trilaterate5() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 192 vincentysTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 193 xyz property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 194 xyzh property_RO: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testLatLonMro(20.03.14)
    test 195 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.LatLon, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 196 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 197 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 198 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 199 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testNvectorAttrs(20.03.14)
    test 200 Ecef property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 201 H property: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 202 angleTo() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 203 attrs() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 204 classname property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 205 classnaming property: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 206 classof() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 207 cmp() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 208 copy() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 209 cross() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 210 crosserrors property: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 211 datum property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 212 dividedBy() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 213 dot() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 214 equals() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 215 euclid property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 216 greatCircle() method: pygeodesy.sphericalNvector
    test 217 h property: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 218 hStr() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 219 isEllipsoidal property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 220 isSpherical property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 221 iscolinearWith() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 222 isequalTo() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 223 lam property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 224 lat property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 225 latlon property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 226 latlonheight property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 227 length property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 228 length2 property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 229 lon property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 230 minus() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 231 name property: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 232 named property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 233 named2 property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 234 named3 property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 235 named4 property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 236 nearestOn() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 237 negate() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 238 others() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 239 parse() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 240 phi property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 241 philam property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 242 philamheight property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 243 plus() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 244 rotate() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 245 rotateAround() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 246 sum() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 247 times() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 248 to2ab() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 249 to2ll() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 250 to3abh() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 251 to3llh() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 252 to3xyz() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 253 to4xyzh() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 254 toCartesian() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 255 toLatLon() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 256 toRepr() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 257 toStr() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 258 toStr2() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 259 toVector3d() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 260 trilaterate3d2() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 261 unit() method: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 262 x property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 263 xyz property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 264 xyzh property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 265 y property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 266 z property_RO: pygeodesy.deprecated.nvector, pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector

    testNvectorMro(20.03.14)
    test 267 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 268 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 269 pygeodesy.deprecated.nvector: pygeodesy.deprecated.nvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testVector3dAttrs(20.03.14)
    test 270 angleTo() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 271 attrs() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 272 classname property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 273 classnaming property: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 274 classof() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 275 cmp() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 276 copy() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 277 cross() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 278 crosserrors property: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 279 dividedBy() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 280 dot() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 281 equals() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 282 euclid property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 283 iscolinearWith() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 284 isequalTo() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 285 length property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 286 length2 property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 287 minus() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 288 name property: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 289 named property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 290 named2 property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 291 named3 property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 292 named4 property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 293 nearestOn() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 294 negate() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 295 others() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 296 parse() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 297 plus() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 298 rotate() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 299 rotateAround() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 300 sum() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 301 times() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 302 to2ab() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 303 to2ll() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 304 to3xyz() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 305 toRepr() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 306 toStr() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 307 toStr2() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 308 trilaterate3d2() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 309 unit() method: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 310 x property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 311 xyz property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 312 y property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 313 z property_RO: pygeodesy.sphericalTrigonometry, pygeodesy.vector3d

    testVector3dMro(20.03.14)
    test 314 pygeodesy.sphericalTrigonometry: pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 315 pygeodesy.vector3d: pygeodesy.vector3d.Vector3d, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testCopyAttr(20.03.14)
    test 316 AlbersEqualArea: copy
    test 317 AlbersEqualArea2: copy
    test 318 AlbersEqualArea4: copy
    test 319 AlbersEqualAreaCylindrical: copy
    test 320 AlbersEqualAreaNorth: copy
    test 321 AlbersEqualAreaSouth: copy
    test 322 Band: copy
    test 323 Bearing: copy
    test 324 Bearing_: copy
    test 325 Bool: copy
    test 326 CassiniSoldner: copy
    test 327 Conic: copy
    test 328 Css: copy
    test 329 Datum: copy
    test 330 Degrees: copy
    test 331 Degrees2: copy
    test 332 Degrees_: copy
    test 333 Distance: copy
    test 334 Distance_: copy
    test 335 Easting: copy
    test 336 EcefCartesian: copy
    test 337 EcefKarney: copy
    test 338 EcefMatrix: copy
    test 339 EcefSudano: copy
    test 340 EcefVeness: copy
    test 341 EcefYou: copy
    test 342 Ellipsoid: copy
    test 343 Ellipsoid2: copy
    test 344 Elliptic: copy
    test 345 Epoch: copy
    test 346 Epsg: copy
    test 347 Equidistant: copy
    test 348 EquidistantKarney: copy
    test 349 Etm: copy
    test 350 ExactTransverseMercator: copy
    test 351 Fdot: copy
    test 352 Feet: copy
    test 353 Fhorner: copy
    test 354 Float: copy
    test 355 Float_: copy
    test 356 Fpolynomial: copy
    test 357 Frechet: copy
    test 358 FrechetCosineAndoyerLambert: copy
    test 359 FrechetCosineForsytheAndoyerLambert: copy
    test 360 FrechetCosineLaw: copy
    test 361 FrechetDegrees: copy
    test 362 FrechetDistanceTo: copy
    test 363 FrechetEquirectangular: copy
    test 364 FrechetEuclidean: copy
    test 365 FrechetFlatLocal: copy
    test 366 FrechetFlatPolar: copy
    test 367 FrechetHaversine: copy
    test 368 FrechetHubeny: copy
    test 369 FrechetKarney: copy
    test 370 FrechetRadians: copy
    test 371 FrechetThomas: copy
    test 372 FrechetVincentys: copy
    test 373 Fsum: copy
    test 374 Garef: copy
    test 375 Geohash: copy
    test 376 GeoidG2012B: copy
    test 377 GeoidKarney: copy
    test 378 GeoidPGM: copy
    test 379 Georef: copy
    test 380 Gnomonic: copy
    test 381 GnomonicKarney: copy
    test 382 Hausdorff: copy
    test 383 HausdorffCosineAndoyerLambert: copy
    test 384 HausdorffCosineForsytheAndoyerLambert: copy
    test 385 HausdorffCosineLaw: copy
    test 386 HausdorffDegrees: copy
    test 387 HausdorffDistanceTo: copy
    test 388 HausdorffEquirectangular: copy
    test 389 HausdorffEuclidean: copy
    test 390 HausdorffFlatLocal: copy
    test 391 HausdorffFlatPolar: copy
    test 392 HausdorffHaversine: copy
    test 393 HausdorffHubeny: copy
    test 394 HausdorffKarney: copy
    test 395 HausdorffRadians: copy
    test 396 HausdorffThomas: copy
    test 397 HausdorffVincentys: copy
    test 398 Height: copy
    test 399 HeightCubic: copy
    test 400 HeightIDW: copy
    test 401 HeightIDW2: copy
    test 402 HeightIDW3: copy
    test 403 HeightIDWcosineAndoyerLambert: copy
    test 404 HeightIDWcosineForsytheAndoyerLambert: copy
    test 405 HeightIDWcosineLaw: copy
    test 406 HeightIDWdistanceTo: copy
    test 407 HeightIDWequirectangular: copy
    test 408 HeightIDWeuclidean: copy
    test 409 HeightIDWflatLocal: copy
    test 410 HeightIDWflatPolar: copy
    test 411 HeightIDWhaversine: copy
    test 412 HeightIDWhubeny: copy
    test 413 HeightIDWkarney: copy
    test 414 HeightIDWthomas: copy
    test 415 HeightIDWvincentys: copy
    test 416 HeightLSQBiSpline: copy
    test 417 HeightLinear: copy
    test 418 HeightSmoothBiSpline: copy
    test 419 Int: copy
    test 420 Int_: copy
    test 421 Lam: copy
    test 422 Lam_: copy
    test 423 LambertEqualArea: copy
    test 424 Lat: copy
    test 425 LatLon2psxy: copy
    test 426 LatLon_: copy
    test 427 Lat_: copy
    test 428 Lcc: copy
    test 429 Lon: copy
    test 430 Lon_: copy
    test 431 Meter: copy
    test 432 Mgrs: copy
    test 433 Northing: copy
    test 434 Number_: copy
    test 435 Numpy2LatLon: copy
    test 436 Orthographic: copy
    test 437 Osgr: copy
    test 438 Phi: copy
    test 439 Phi_: copy
    test 440 Precision_: copy
    test 441 Radians: copy
    test 442 Radians2: copy
    test 443 Radius: copy
    test 444 Radius_: copy
    test 445 RefFrame: copy
    test 446 Scalar: copy
    test 447 Scalar_: copy
    test 448 Stereographic: copy
    test 449 Str: copy
    test 450 Transform: copy
    test 451 Tuple2LatLon: copy
    test 452 Ups: copy
    test 453 Utm: copy
    test 454 Vector3d: copy
    test 455 Wm: copy
    test 456 Zone: copy
    test 457 a_f2Tuple: copy

    all 457 testClasses.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 11.161 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testClipy.py

    testing testClipy.py 20.05.06
    test 1 clipCS3.p1: 60.0°N, 123.333333°E
    test 2 clipCS3.p2: 62.857143°N, 130.0°E
    test 3 clipCS3.i: 1
    test 4 clipCS3.p1: 17.5°N, 020.0°E
    test 5 clipCS3.p2: 16.25°N, 015.0°E
    test 6 clipCS3.i: 0
    test 7 clipSH1.len: 4
    test 8 clipSH1.0: 20.0°N, 020.0°E
    test 9 clipSH1.LL: True
    test 10 clipSH1.1: 17.5°N, 020.0°E
    test 11 clipSH1.LL: True
    test 12 clipSH1.2: 16.25°N, 015.0°E
    test 13 clipSH1.LL: True
    test 14 clipSH1.3: 20.0°N, 015.0°E
    test 15 clipSH1.LL: True
    test 16 clipSH2.len: 5
    test 17 clipSH2.0: 18.571°N, 024.286°E
    test 18 clipSH2.LL: True
    test 19 clipSH2.1: 16.667°N, 016.667°E
    test 20 clipSH2.LL: True
    test 21 clipSH2.2: 20.0°N, 015.0°E
    test 22 clipSH2.LL: True
    test 23 clipSH2.3: 25.0°N, 020.0°E
    test 24 clipSH2.LL: True
    test 25 clipSH2.4: 22.0°N, 026.0°E
    test 26 clipSH2.LL: True
    test 27 clipSH3.len: 2
    test 28 clipSH3.0: 18.571°N, 024.286°E
    test 29 clipSH3.LL: True
    test 30 clipSH3.1: 16.667°N, 016.667°E
    test 31 clipSH3.LL: True
    test 32 clipSH3.edge.: True
    test 33 clipSH3.len: 2
    test 34 clipSH3.0: 16.667°N, 016.667°E
    test 35 clipSH3.LL: True
    test 36 clipSH3.1: 20.0°N, 015.0°E
    test 37 clipSH3.LL: True
    test 38 clipSH3.edge.: False
    test 39 clipSH3.len: 2
    test 40 clipSH3.0: 20.0°N, 015.0°E
    test 41 clipSH3.LL: True
    test 42 clipSH3.1: 25.0°N, 020.0°E
    test 43 clipSH3.LL: True
    test 44 clipSH3.edge.: True
    test 45 clipSH3.len: 2
    test 46 clipSH3.0: 25.0°N, 020.0°E
    test 47 clipSH3.LL: True
    test 48 clipSH3.1: 22.0°N, 026.0°E
    test 49 clipSH3.LL: True
    test 50 clipSH3.edge.: True
    test 51 clipSH3.len: 2
    test 52 clipSH3.0: 22.0°N, 026.0°E
    test 53 clipSH3.LL: True
    test 54 clipSH3.1: 18.571°N, 024.286°E
    test 55 clipSH3.LL: True
    test 56 clipSH3.edge.: False
    test 57 clipSH2.reversed.len: 5
    test 58 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 59 clipSH2.reversed.LL: True
    test 60 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 61 clipSH2.reversed.LL: True
    test 62 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 63 clipSH2.reversed.LL: True
    test 64 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 65 clipSH2.reversed.LL: True
    test 66 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 67 clipSH2.reversed.LL: True
    test 68 clipSH3.reversed.len: 2
    test 69 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 70 clipSH3.reversed.LL: True
    test 71 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 72 clipSH3.reversed.LL: True
    test 73 clipSH3.edge.reversed.: True
    test 74 clipSH3.reversed.len: 2
    test 75 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 76 clipSH3.reversed.LL: True
    test 77 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 78 clipSH3.reversed.LL: True
    test 79 clipSH3.edge.reversed.: False
    test 80 clipSH3.reversed.len: 2
    test 81 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 82 clipSH3.reversed.LL: True
    test 83 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 84 clipSH3.reversed.LL: True
    test 85 clipSH3.edge.reversed.: True
    test 86 clipSH3.reversed.len: 2
    test 87 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 88 clipSH3.reversed.LL: True
    test 89 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 90 clipSH3.reversed.LL: True
    test 91 clipSH3.edge.reversed.: True
    test 92 clipSH3.reversed.len: 2
    test 93 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 94 clipSH3.reversed.LL: True
    test 95 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 96 clipSH3.reversed.LL: True
    test 97 clipSH3.edge.reversed.: False
    test 98 clipSH.allout: ()
    test 99 clipSH3.allout: ()
    test 100 clipSH.allout.reversed: ()
    test 101 clipSH3.allout.reversed: ()
    test 102 clipSH.allin.len: 4
    test 103 clipSH.allin.0: 20.0°N, 030.0°E
    test 104 clipSH.allin.LL: True
    test 105 clipSH.allin.1: 15.0°N, 010.0°E
    test 106 clipSH.allin.LL: True
    test 107 clipSH.allin.2: 25.0°N, 020.0°E
    test 108 clipSH.allin.LL: True
    test 109 clipSH.allin.3: 20.0°N, 030.0°E
    test 110 clipSH.allin.LL: True
    test 111 clipSH3.allin.len: 2
    test 112 clipSH3.allin.0: 20.0°N, 030.0°E
    test 113 clipSH3.allin.LL: True
    test 114 clipSH3.allin.1: 15.0°N, 010.0°E
    test 115 clipSH3.allin.LL: True
    test 116 clipSH3.edge.: True
    test 117 clipSH3.allin.len: 2
    test 118 clipSH3.allin.0: 15.0°N, 010.0°E
    test 119 clipSH3.allin.LL: True
    test 120 clipSH3.allin.1: 25.0°N, 020.0°E
    test 121 clipSH3.allin.LL: True
    test 122 clipSH3.edge.: True
    test 123 clipSH.allin.reversed.len: 4
    test 124 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 125 clipSH.allin.reversed.LL: True
    test 126 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 127 clipSH.allin.reversed.LL: True
    test 128 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 129 clipSH.allin.reversed.LL: True
    test 130 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 131 clipSH.allin.reversed.LL: True
    test 132 clipSH3.allin.reversed.len: 2
    test 133 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 134 clipSH3.allin.reversed.LL: True
    test 135 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 136 clipSH3.allin.reversed.LL: True
    test 137 clipSH3.edge.reversed.: True
    test 138 clipSH3.allin.reversed.len: 2
    test 139 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 140 clipSH3.allin.reversed.LL: True
    test 141 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 142 clipSH3.allin.reversed.LL: True
    test 143 clipSH3.edge.reversed.: True
    test 144 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 145 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 146 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 147 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 148 clipCS3.p1: 60.0°N, 123.333333°E
    test 149 clipCS3.p2: 62.857143°N, 130.0°E
    test 150 clipCS3.i: 1
    test 151 clipCS3.p1: 17.5°N, 020.0°E
    test 152 clipCS3.p2: 16.25°N, 015.0°E
    test 153 clipCS3.i: 0
    test 154 clipSH1.len: 4
    test 155 clipSH1.0: 20.0°N, 020.0°E
    test 156 clipSH1.LL: True
    test 157 clipSH1.1: 17.5°N, 020.0°E
    test 158 clipSH1.LL: True
    test 159 clipSH1.2: 16.25°N, 015.0°E
    test 160 clipSH1.LL: True
    test 161 clipSH1.3: 20.0°N, 015.0°E
    test 162 clipSH1.LL: True
    test 163 clipSH2.len: 5
    test 164 clipSH2.0: 18.571°N, 024.286°E
    test 165 clipSH2.LL: True
    test 166 clipSH2.1: 16.667°N, 016.667°E
    test 167 clipSH2.LL: True
    test 168 clipSH2.2: 20.0°N, 015.0°E
    test 169 clipSH2.LL: True
    test 170 clipSH2.3: 25.0°N, 020.0°E
    test 171 clipSH2.LL: True
    test 172 clipSH2.4: 22.0°N, 026.0°E
    test 173 clipSH2.LL: True
    test 174 clipSH3.len: 2
    test 175 clipSH3.0: 18.571°N, 024.286°E
    test 176 clipSH3.LL: True
    test 177 clipSH3.1: 16.667°N, 016.667°E
    test 178 clipSH3.LL: True
    test 179 clipSH3.edge.: True
    test 180 clipSH3.len: 2
    test 181 clipSH3.0: 16.667°N, 016.667°E
    test 182 clipSH3.LL: True
    test 183 clipSH3.1: 20.0°N, 015.0°E
    test 184 clipSH3.LL: True
    test 185 clipSH3.edge.: False
    test 186 clipSH3.len: 2
    test 187 clipSH3.0: 20.0°N, 015.0°E
    test 188 clipSH3.LL: True
    test 189 clipSH3.1: 25.0°N, 020.0°E
    test 190 clipSH3.LL: True
    test 191 clipSH3.edge.: True
    test 192 clipSH3.len: 2
    test 193 clipSH3.0: 25.0°N, 020.0°E
    test 194 clipSH3.LL: True
    test 195 clipSH3.1: 22.0°N, 026.0°E
    test 196 clipSH3.LL: True
    test 197 clipSH3.edge.: True
    test 198 clipSH3.len: 2
    test 199 clipSH3.0: 22.0°N, 026.0°E
    test 200 clipSH3.LL: True
    test 201 clipSH3.1: 18.571°N, 024.286°E
    test 202 clipSH3.LL: True
    test 203 clipSH3.edge.: False
    test 204 clipSH2.reversed.len: 5
    test 205 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 206 clipSH2.reversed.LL: True
    test 207 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 208 clipSH2.reversed.LL: True
    test 209 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 210 clipSH2.reversed.LL: True
    test 211 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 212 clipSH2.reversed.LL: True
    test 213 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 214 clipSH2.reversed.LL: True
    test 215 clipSH3.reversed.len: 2
    test 216 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 217 clipSH3.reversed.LL: True
    test 218 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 219 clipSH3.reversed.LL: True
    test 220 clipSH3.edge.reversed.: True
    test 221 clipSH3.reversed.len: 2
    test 222 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 223 clipSH3.reversed.LL: True
    test 224 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 225 clipSH3.reversed.LL: True
    test 226 clipSH3.edge.reversed.: False
    test 227 clipSH3.reversed.len: 2
    test 228 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 229 clipSH3.reversed.LL: True
    test 230 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 231 clipSH3.reversed.LL: True
    test 232 clipSH3.edge.reversed.: True
    test 233 clipSH3.reversed.len: 2
    test 234 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 235 clipSH3.reversed.LL: True
    test 236 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 237 clipSH3.reversed.LL: True
    test 238 clipSH3.edge.reversed.: True
    test 239 clipSH3.reversed.len: 2
    test 240 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 241 clipSH3.reversed.LL: True
    test 242 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 243 clipSH3.reversed.LL: True
    test 244 clipSH3.edge.reversed.: False
    test 245 clipSH.allout: ()
    test 246 clipSH3.allout: ()
    test 247 clipSH.allout.reversed: ()
    test 248 clipSH3.allout.reversed: ()
    test 249 clipSH.allin.len: 4
    test 250 clipSH.allin.0: 20.0°N, 030.0°E
    test 251 clipSH.allin.LL: True
    test 252 clipSH.allin.1: 15.0°N, 010.0°E
    test 253 clipSH.allin.LL: True
    test 254 clipSH.allin.2: 25.0°N, 020.0°E
    test 255 clipSH.allin.LL: True
    test 256 clipSH.allin.3: 20.0°N, 030.0°E
    test 257 clipSH.allin.LL: True
    test 258 clipSH3.allin.len: 2
    test 259 clipSH3.allin.0: 20.0°N, 030.0°E
    test 260 clipSH3.allin.LL: True
    test 261 clipSH3.allin.1: 15.0°N, 010.0°E
    test 262 clipSH3.allin.LL: True
    test 263 clipSH3.edge.: True
    test 264 clipSH3.allin.len: 2
    test 265 clipSH3.allin.0: 15.0°N, 010.0°E
    test 266 clipSH3.allin.LL: True
    test 267 clipSH3.allin.1: 25.0°N, 020.0°E
    test 268 clipSH3.allin.LL: True
    test 269 clipSH3.edge.: True
    test 270 clipSH.allin.reversed.len: 4
    test 271 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 272 clipSH.allin.reversed.LL: True
    test 273 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 274 clipSH.allin.reversed.LL: True
    test 275 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 276 clipSH.allin.reversed.LL: True
    test 277 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 278 clipSH.allin.reversed.LL: True
    test 279 clipSH3.allin.reversed.len: 2
    test 280 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 281 clipSH3.allin.reversed.LL: True
    test 282 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 283 clipSH3.allin.reversed.LL: True
    test 284 clipSH3.edge.reversed.: True
    test 285 clipSH3.allin.reversed.len: 2
    test 286 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 287 clipSH3.allin.reversed.LL: True
    test 288 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 289 clipSH3.allin.reversed.LL: True
    test 290 clipSH3.edge.reversed.: True
    test 291 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 292 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 293 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 294 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 295 clipCS3.p1: 60.0°N, 123.333333°E
    test 296 clipCS3.p2: 62.857143°N, 130.0°E
    test 297 clipCS3.i: 1
    test 298 clipCS3.p1: 17.5°N, 020.0°E
    test 299 clipCS3.p2: 16.25°N, 015.0°E
    test 300 clipCS3.i: 0
    test 301 clipSH1.len: 4
    test 302 clipSH1.0: 20.0°N, 020.0°E
    test 303 clipSH1.LL: True
    test 304 clipSH1.1: 17.5°N, 020.0°E
    test 305 clipSH1.LL: True
    test 306 clipSH1.2: 16.25°N, 015.0°E
    test 307 clipSH1.LL: True
    test 308 clipSH1.3: 20.0°N, 015.0°E
    test 309 clipSH1.LL: True
    test 310 clipSH2.len: 5
    test 311 clipSH2.0: 18.571°N, 024.286°E
    test 312 clipSH2.LL: True
    test 313 clipSH2.1: 16.667°N, 016.667°E
    test 314 clipSH2.LL: True
    test 315 clipSH2.2: 20.0°N, 015.0°E
    test 316 clipSH2.LL: True
    test 317 clipSH2.3: 25.0°N, 020.0°E
    test 318 clipSH2.LL: True
    test 319 clipSH2.4: 22.0°N, 026.0°E
    test 320 clipSH2.LL: True
    test 321 clipSH3.len: 2
    test 322 clipSH3.0: 18.571°N, 024.286°E
    test 323 clipSH3.LL: True
    test 324 clipSH3.1: 16.667°N, 016.667°E
    test 325 clipSH3.LL: True
    test 326 clipSH3.edge.: True
    test 327 clipSH3.len: 2
    test 328 clipSH3.0: 16.667°N, 016.667°E
    test 329 clipSH3.LL: True
    test 330 clipSH3.1: 20.0°N, 015.0°E
    test 331 clipSH3.LL: True
    test 332 clipSH3.edge.: False
    test 333 clipSH3.len: 2
    test 334 clipSH3.0: 20.0°N, 015.0°E
    test 335 clipSH3.LL: True
    test 336 clipSH3.1: 25.0°N, 020.0°E
    test 337 clipSH3.LL: True
    test 338 clipSH3.edge.: True
    test 339 clipSH3.len: 2
    test 340 clipSH3.0: 25.0°N, 020.0°E
    test 341 clipSH3.LL: True
    test 342 clipSH3.1: 22.0°N, 026.0°E
    test 343 clipSH3.LL: True
    test 344 clipSH3.edge.: True
    test 345 clipSH3.len: 2
    test 346 clipSH3.0: 22.0°N, 026.0°E
    test 347 clipSH3.LL: True
    test 348 clipSH3.1: 18.571°N, 024.286°E
    test 349 clipSH3.LL: True
    test 350 clipSH3.edge.: False
    test 351 clipSH2.reversed.len: 5
    test 352 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 353 clipSH2.reversed.LL: True
    test 354 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 355 clipSH2.reversed.LL: True
    test 356 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 357 clipSH2.reversed.LL: True
    test 358 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 359 clipSH2.reversed.LL: True
    test 360 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 361 clipSH2.reversed.LL: True
    test 362 clipSH3.reversed.len: 2
    test 363 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 364 clipSH3.reversed.LL: True
    test 365 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 366 clipSH3.reversed.LL: True
    test 367 clipSH3.edge.reversed.: True
    test 368 clipSH3.reversed.len: 2
    test 369 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 370 clipSH3.reversed.LL: True
    test 371 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 372 clipSH3.reversed.LL: True
    test 373 clipSH3.edge.reversed.: False
    test 374 clipSH3.reversed.len: 2
    test 375 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 376 clipSH3.reversed.LL: True
    test 377 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 378 clipSH3.reversed.LL: True
    test 379 clipSH3.edge.reversed.: True
    test 380 clipSH3.reversed.len: 2
    test 381 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 382 clipSH3.reversed.LL: True
    test 383 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 384 clipSH3.reversed.LL: True
    test 385 clipSH3.edge.reversed.: True
    test 386 clipSH3.reversed.len: 2
    test 387 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 388 clipSH3.reversed.LL: True
    test 389 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 390 clipSH3.reversed.LL: True
    test 391 clipSH3.edge.reversed.: False
    test 392 clipSH.allout: ()
    test 393 clipSH3.allout: ()
    test 394 clipSH.allout.reversed: ()
    test 395 clipSH3.allout.reversed: ()
    test 396 clipSH.allin.len: 4
    test 397 clipSH.allin.0: 20.0°N, 030.0°E
    test 398 clipSH.allin.LL: True
    test 399 clipSH.allin.1: 15.0°N, 010.0°E
    test 400 clipSH.allin.LL: True
    test 401 clipSH.allin.2: 25.0°N, 020.0°E
    test 402 clipSH.allin.LL: True
    test 403 clipSH.allin.3: 20.0°N, 030.0°E
    test 404 clipSH.allin.LL: True
    test 405 clipSH3.allin.len: 2
    test 406 clipSH3.allin.0: 20.0°N, 030.0°E
    test 407 clipSH3.allin.LL: True
    test 408 clipSH3.allin.1: 15.0°N, 010.0°E
    test 409 clipSH3.allin.LL: True
    test 410 clipSH3.edge.: True
    test 411 clipSH3.allin.len: 2
    test 412 clipSH3.allin.0: 15.0°N, 010.0°E
    test 413 clipSH3.allin.LL: True
    test 414 clipSH3.allin.1: 25.0°N, 020.0°E
    test 415 clipSH3.allin.LL: True
    test 416 clipSH3.edge.: True
    test 417 clipSH.allin.reversed.len: 4
    test 418 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 419 clipSH.allin.reversed.LL: True
    test 420 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 421 clipSH.allin.reversed.LL: True
    test 422 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 423 clipSH.allin.reversed.LL: True
    test 424 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 425 clipSH.allin.reversed.LL: True
    test 426 clipSH3.allin.reversed.len: 2
    test 427 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 428 clipSH3.allin.reversed.LL: True
    test 429 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 430 clipSH3.allin.reversed.LL: True
    test 431 clipSH3.edge.reversed.: True
    test 432 clipSH3.allin.reversed.len: 2
    test 433 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 434 clipSH3.allin.reversed.LL: True
    test 435 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 436 clipSH3.allin.reversed.LL: True
    test 437 clipSH3.edge.reversed.: True
    test 438 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 439 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 440 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 441 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 442 clipCS3.p1: 60.0°N, 123.333333°E
    test 443 clipCS3.p2: 62.857143°N, 130.0°E
    test 444 clipCS3.i: 1
    test 445 clipCS3.p1: 17.5°N, 020.0°E
    test 446 clipCS3.p2: 16.25°N, 015.0°E
    test 447 clipCS3.i: 0
    test 448 clipSH1.len: 4
    test 449 clipSH1.0: 20.0°N, 020.0°E
    test 450 clipSH1.LL: True
    test 451 clipSH1.1: 17.5°N, 020.0°E
    test 452 clipSH1.LL: True
    test 453 clipSH1.2: 16.25°N, 015.0°E
    test 454 clipSH1.LL: True
    test 455 clipSH1.3: 20.0°N, 015.0°E
    test 456 clipSH1.LL: True
    test 457 clipSH2.len: 5
    test 458 clipSH2.0: 18.571°N, 024.286°E
    test 459 clipSH2.LL: True
    test 460 clipSH2.1: 16.667°N, 016.667°E
    test 461 clipSH2.LL: True
    test 462 clipSH2.2: 20.0°N, 015.0°E
    test 463 clipSH2.LL: True
    test 464 clipSH2.3: 25.0°N, 020.0°E
    test 465 clipSH2.LL: True
    test 466 clipSH2.4: 22.0°N, 026.0°E
    test 467 clipSH2.LL: True
    test 468 clipSH3.len: 2
    test 469 clipSH3.0: 18.571°N, 024.286°E
    test 470 clipSH3.LL: True
    test 471 clipSH3.1: 16.667°N, 016.667°E
    test 472 clipSH3.LL: True
    test 473 clipSH3.edge.: True
    test 474 clipSH3.len: 2
    test 475 clipSH3.0: 16.667°N, 016.667°E
    test 476 clipSH3.LL: True
    test 477 clipSH3.1: 20.0°N, 015.0°E
    test 478 clipSH3.LL: True
    test 479 clipSH3.edge.: False
    test 480 clipSH3.len: 2
    test 481 clipSH3.0: 20.0°N, 015.0°E
    test 482 clipSH3.LL: True
    test 483 clipSH3.1: 25.0°N, 020.0°E
    test 484 clipSH3.LL: True
    test 485 clipSH3.edge.: True
    test 486 clipSH3.len: 2
    test 487 clipSH3.0: 25.0°N, 020.0°E
    test 488 clipSH3.LL: True
    test 489 clipSH3.1: 22.0°N, 026.0°E
    test 490 clipSH3.LL: True
    test 491 clipSH3.edge.: True
    test 492 clipSH3.len: 2
    test 493 clipSH3.0: 22.0°N, 026.0°E
    test 494 clipSH3.LL: True
    test 495 clipSH3.1: 18.571°N, 024.286°E
    test 496 clipSH3.LL: True
    test 497 clipSH3.edge.: False
    test 498 clipSH2.reversed.len: 5
    test 499 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 500 clipSH2.reversed.LL: True
    test 501 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 502 clipSH2.reversed.LL: True
    test 503 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 504 clipSH2.reversed.LL: True
    test 505 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 506 clipSH2.reversed.LL: True
    test 507 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 508 clipSH2.reversed.LL: True
    test 509 clipSH3.reversed.len: 2
    test 510 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 511 clipSH3.reversed.LL: True
    test 512 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 513 clipSH3.reversed.LL: True
    test 514 clipSH3.edge.reversed.: True
    test 515 clipSH3.reversed.len: 2
    test 516 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 517 clipSH3.reversed.LL: True
    test 518 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 519 clipSH3.reversed.LL: True
    test 520 clipSH3.edge.reversed.: False
    test 521 clipSH3.reversed.len: 2
    test 522 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 523 clipSH3.reversed.LL: True
    test 524 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 525 clipSH3.reversed.LL: True
    test 526 clipSH3.edge.reversed.: True
    test 527 clipSH3.reversed.len: 2
    test 528 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 529 clipSH3.reversed.LL: True
    test 530 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 531 clipSH3.reversed.LL: True
    test 532 clipSH3.edge.reversed.: True
    test 533 clipSH3.reversed.len: 2
    test 534 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 535 clipSH3.reversed.LL: True
    test 536 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 537 clipSH3.reversed.LL: True
    test 538 clipSH3.edge.reversed.: False
    test 539 clipSH.allout: ()
    test 540 clipSH3.allout: ()
    test 541 clipSH.allout.reversed: ()
    test 542 clipSH3.allout.reversed: ()
    test 543 clipSH.allin.len: 4
    test 544 clipSH.allin.0: 20.0°N, 030.0°E
    test 545 clipSH.allin.LL: True
    test 546 clipSH.allin.1: 15.0°N, 010.0°E
    test 547 clipSH.allin.LL: True
    test 548 clipSH.allin.2: 25.0°N, 020.0°E
    test 549 clipSH.allin.LL: True
    test 550 clipSH.allin.3: 20.0°N, 030.0°E
    test 551 clipSH.allin.LL: True
    test 552 clipSH3.allin.len: 2
    test 553 clipSH3.allin.0: 20.0°N, 030.0°E
    test 554 clipSH3.allin.LL: True
    test 555 clipSH3.allin.1: 15.0°N, 010.0°E
    test 556 clipSH3.allin.LL: True
    test 557 clipSH3.edge.: True
    test 558 clipSH3.allin.len: 2
    test 559 clipSH3.allin.0: 15.0°N, 010.0°E
    test 560 clipSH3.allin.LL: True
    test 561 clipSH3.allin.1: 25.0°N, 020.0°E
    test 562 clipSH3.allin.LL: True
    test 563 clipSH3.edge.: True
    test 564 clipSH.allin.reversed.len: 4
    test 565 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 566 clipSH.allin.reversed.LL: True
    test 567 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 568 clipSH.allin.reversed.LL: True
    test 569 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 570 clipSH.allin.reversed.LL: True
    test 571 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 572 clipSH.allin.reversed.LL: True
    test 573 clipSH3.allin.reversed.len: 2
    test 574 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 575 clipSH3.allin.reversed.LL: True
    test 576 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 577 clipSH3.allin.reversed.LL: True
    test 578 clipSH3.edge.reversed.: True
    test 579 clipSH3.allin.reversed.len: 2
    test 580 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 581 clipSH3.allin.reversed.LL: True
    test 582 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 583 clipSH3.allin.reversed.LL: True
    test 584 clipSH3.edge.reversed.: True
    test 585 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 586 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 587 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 588 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex

    all 588 testClipy.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 56.434 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testCss.py

    testing testCss.py 20.04.30 (module pygeodesy.css 20.10.02)
    14 tests skipped (14): no geographiclib

    all testCss.py tests passed, 14 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 15.020 us

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testDatums.py

    testing testDatums.py 20.08.24 (module pygeodesy.datums 20.09.27)
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 TestEllipsiod: name='TestEllipsiod', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=1570.79632679, R1=1000, R2=1000, R3=1000
    test 5 TestTransform: name='TestTransform', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0
    test 6 TestDatum: name='TestDatum', ellipsoid=Ellipsoids.TestEllipsiod, transform=Transforms.TestTransform
    test 7 ED50.inverse().inverse(): True

    all 7 testDatums.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 1.440 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testDeprecated.py

    testing testDeprecated.py 20.03.10 (module pygeodesy.deprecated 20.10.09)
    test 1 HeightIDW: True
    test 2 HeightIDW2: True
    test 3 HeightIDW3: True
    test 4 areaof: 7.086883e+09
    test 5 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 6 anStr: a-b__
    test 7 clipStr: test/t....ics.py
    test 8 decodeEPSG2: (12, 'S')
    test 9 encodeEPSG: 32712
    test 10 equirectangular3: 3
    test 11 equirectangular3: 12.997
    test 12 fStr: 0.123000
    test 13 fStr: 0.123
    test 14 fStr: 0.123, 456.789
    test 15 fStr: 1.23000e-01
    test 16 fStr: 1.23e-01
    test 17 hypot3: 3006.675905
    test 18 isenclosedby: True
    test 19 nearestOn3: 3
    test 20 nearestOn3: (45.5, 1.5)
    test 21 nearestOn4: 4
    test 22 nearestOn4: (45.5, 1.5)
    test 23 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 24 perimeterof: 2.687460e+05
    test 25 polygon: 3
    test 26 simplify2: 4
    test 27 toUtm: 6
    test 28 utmZoneBand2: (11, 'U')
    test 29 HeightIDW: True
    test 30 HeightIDW2: True
    test 31 HeightIDW3: True
    test 32 areaof: 7.086883e+09
    test 33 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 34 anStr: a-b__
    test 35 clipStr: test/t....ics.py
    test 36 decodeEPSG2: (12, 'S')
    test 37 encodeEPSG: 32712
    test 38 equirectangular3: 3
    test 39 equirectangular3: 12.997
    test 40 fStr: 0.123000
    test 41 fStr: 0.123
    test 42 fStr: 0.123, 456.789
    test 43 fStr: 1.23000e-01
    test 44 fStr: 1.23e-01
    test 45 hypot3: 3006.675905
    test 46 isenclosedby: True
    test 47 nearestOn3: 3
    test 48 nearestOn3: (45.5, 1.5)
    test 49 nearestOn4: 4
    test 50 nearestOn4: (45.5, 1.5)
    test 51 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 52 perimeterof: 2.687460e+05
    test 53 polygon: 3
    test 54 simplify2: 4
    test 55 toUtm: 6
    test 56 utmZoneBand2: (11, 'U')
    test 57 HeightIDW: True
    test 58 HeightIDW2: True
    test 59 HeightIDW3: True
    test 60 areaof: 7.086883e+09
    test 61 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 62 anStr: a-b__
    test 63 clipStr: test/t....ics.py
    test 64 decodeEPSG2: (12, 'S')
    test 65 encodeEPSG: 32712
    test 66 equirectangular3: 3
    test 67 equirectangular3: 12.997
    test 68 fStr: 0.123000
    test 69 fStr: 0.123
    test 70 fStr: 0.123, 456.789
    test 71 fStr: 1.23000e-01
    test 72 fStr: 1.23e-01
    test 73 hypot3: 3006.675905
    test 74 isenclosedby: True
    test 75 nearestOn3: 3
    test 76 nearestOn3: (45.5, 1.5)
    test 77 nearestOn4: 4
    test 78 nearestOn4: (45.5, 1.5)
    test 79 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 80 perimeterof: 2.687460e+05
    test 81 polygon: 3
    test 82 simplify2: 4
    test 83 toUtm: 6
    test 84 utmZoneBand2: (11, 'U')

    all 84 testDeprecated.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 10.774 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testDms.py

    testing testDms.py 20.05.12 (module pygeodesy.dms 20.10.08)
    test 1 parseDMS('0.0°'): 0.0
    test 2 parseDMS('0°'): 0.0
    test 3 parseDMS('000°00'00"'): 0.0
    test 4 parseDMS('000°00'00.0"'): 0.0
    test 5 parseDMS('000° 00'00"'): 0.0
    test 6 parseDMS('000°00 ' 00.0"'): 0.0
    test 7 parseDMS('000° 00' 00.0'): 0.0
    test 8 parseDMS('000°-00′-00.0"'): 0.0
    test 9 parseDDDMMSS(1): 1.0
    test 10 parseDMS(1): 1.0
    test 11 parseDDDMMSS(12): 12.0
    test 12 parseDMS(12): 12.0
    test 13 parseDDDMMSS(123): 123.0
    test 14 parseDMS(123): 123.0
    test 15 parseDDDMMSS(1234): 12.567
    test 16 parseDMS(1234): 1234.0
    test 17 parseDDDMMSS(12345): 123.75
    test 18 parseDMS(12345): 12345.0
    test 19 parseDDDMMSS(123456): 12.582
    test 20 parseDMS(123456): 123456.0
    test 21 parseDDDMMSS(1234567): 123.769
    test 22 parseDMS(1234567): 1234567.0
    test 23 parseDDDMMSS(12345678): 1234.955
    test 24 parseDMS(12345678): 12345678.0
    test 25 parseDDDMMSS(0.1): 0.1
    test 26 parseDMS(0.1): 0.1
    test 27 parseDDDMMSS(1.2): 1.2
    test 28 parseDMS(1.2): 1.2
    test 29 parseDDDMMSS(12.3): 12.3
    test 30 parseDMS(12.3): 12.3
    test 31 parseDDDMMSS(123.4): 123.4
    test 32 parseDMS(123.4): 123.4
    test 33 parseDDDMMSS(1234.5): 12.575
    test 34 parseDMS(1234.5): 1234.5
    test 35 parseDDDMMSS(12345.6): 123.76
    test 36 parseDMS(12345.6): 12345.6
    test 37 parseDDDMMSS(123456.7): 12.582
    test 38 parseDMS(123456.7): 123456.7
    test 39 parseDDDMMSS('1N'): 1.0
    test 40 parseDMS('1N'): 1.0
    test 41 parseDDDMMSS('12S'): -12.0
    test 42 parseDMS('12S'): -12.0
    test 43 parseDDDMMSS('012.3W'): -12.3
    test 44 parseDMS('012.3W'): -12.3
    test 45 parseDDDMMSS('123E'): 123.0
    test 46 parseDMS('123E'): 123.0
    test 47 parseDDDMMSS('1234N'): 12.567
    test 48 parseDMS('1234N'): 1234.0
    test 49 parseDDDMMSS('12345E'): 123.75
    test 50 parseDMS('12345E'): 12345.0
    test 51 parseDDDMMSS('1234.5S'): -12.575
    test 52 parseDMS('1234.5S'): -1234.5
    test 53 parseDDDMMSS('12345.6E'): 123.76
    test 54 parseDMS('12345.6E'): 12345.6
    test 55 parseDDDMMSS('123456.7S'): -12.582
    test 56 parseDMS('123456.7S'): -123456.7
    test 57 parseDDDMMSS('1234567.8W'): -123.769
    test 58 parseDMS('1234567.8W'): -1234567.8
    test 59 parseDDDMMSS('12345678E'): 12345678.0
    test 60 parseDMS('12345678E'): 12345678.0
    test 61 parseDDDMMSS(345.0, NS): 3.75
    test 62 parseDDDMMSS(345.0, EW): 345.0
    test 63 parseDDDMMSS(5430.0, NS): 54.5
    test 64 parseDDDMMSS(5430.0, EW): 54.5
    test 65 parseDDDMMSS('12E'): ParseError("strDDDMMSS ('12E') or suffix ('NSEW'): form DD applies N-S: invalid",)
    test 66 parseDMS('12E'): 12.0
    test 67 parseDDDMMSS('012.3S'): ParseError("strDDDMMSS ('012.3S') or suffix ('NSEW'): form DDD applies E-W: invalid",)
    test 68 parseDMS('012.3S'): -12.3
    test 69 parseDDDMMSS('123N'): ParseError("strDDDMMSS ('123N') or suffix ('NSEW'): form DDD applies E-W: invalid",)
    test 70 parseDMS('123N'): 123.0
    test 71 parseDDDMMSS('1234E'): ParseError("strDDDMMSS ('1234E') or suffix ('NSEW'): form DDMM applies N-S: invalid",)
    test 72 parseDMS('1234E'): 1234.0
    test 73 parseDDDMMSS('12345N'): ParseError("strDDDMMSS ('12345N') or suffix ('NSEW'): form DDDMM applies E-W: invalid",)
    test 74 parseDMS('12345N'): 12345.0
    test 75 parseDDDMMSS('1234.5W'): ParseError("strDDDMMSS ('1234.5W') or suffix ('NSEW'): form DDMM applies N-S: invalid",)
    test 76 parseDMS('1234.5W'): -1234.5
    test 77 parseDDDMMSS('123456E'): ParseError("strDDDMMSS ('123456E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid",)
    test 78 parseDMS('123456E'): 123456.0
    test 79 parseDDDMMSS('1234567S'): ParseError("strDDDMMSS ('1234567S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid",)
    test 80 parseDMS('1234567S'): -1234567.0
    test 81 parseDMS: strDMS (181) or suffix ('NSEW'): 181 beyond 180.0 degrees
    test 82 parseDMS: strDMS (-91) or suffix ('NSEW'): -91 beyond -90.0 degrees
    test 83 parse3llh: 51.477811, -0.001475, 0.0
    test 84 toDMS(): 46°00.0′
    test 85 toDMS(): 46°00.0′
    test 86 toDMS(): 45°59.99′
    test 87 toDMS(): 45°59.999′
    test 88 toDMS(): 46°00′00.0″
    test 89 toDMS(): 45°59′59.96″
    test 90 toDMS(): 45°59′59.964″
    test 91 toDMS(): 45°45′45.36″
    test 92 toDMS(d): 45.7626°
    test 93 toDMS(d): -45.7626°
    test 94 toDMS(dm): 45°45.756′
    test 95 toDMS(dm): -45°45.756′
    test 96 toDMS(dms): 45°45′45.36″
    test 97 toDMS(dms): -45°45′45.36″
    test 98 toDMS(deg): 45.7626
    test 99 toDMS(deg): -45.7626
    test 100 toDMS(min): 4545.756
    test 101 toDMS(min): -4545.756
    test 102 toDMS(sec): 454545.36
    test 103 toDMS(sec): -454545.36
    test 104 toDMS(rad): 0.79871
    test 105 toDMS(rad): -0.79871
    test 106 toDMS(d): 45.7626°
    test 107 toDMS(d): -45.7626°
    test 108 toDMS(dm): 45°45.7560′
    test 109 toDMS(dm): -45°45.7560′
    test 110 toDMS(dms): 45°45′45.36″
    test 111 toDMS(dms): -45°45′45.36″
    test 112 toDMS(deg): 45.762600
    test 113 toDMS(deg): -45.762600
    test 114 toDMS(min): 4545.75600
    test 115 toDMS(min): -4545.75600
    test 116 toDMS(sec): 454545.360
    test 117 toDMS(sec): -454545.360
    test 118 toDMS(rad): 0.798708
    test 119 toDMS(rad): -0.798708
    test 120 toDMS(-d): 45.7626°
    test 121 toDMS(-d): -45.7626°
    test 122 toDMS(-dm): 45°45.7560′
    test 123 toDMS(-dm): -45°45.7560′
    test 124 toDMS(-dms): 45°45′45.36″
    test 125 toDMS(-dms): -45°45′45.36″
    test 126 toDMS(-deg): 45.762600
    test 127 toDMS(-deg): -45.762600
    test 128 toDMS(-min): 4545.75600
    test 129 toDMS(-min): -4545.75600
    test 130 toDMS(-sec): 454545.360
    test 131 toDMS(-sec): -454545.360
    test 132 toDMS(-rad): 0.798708
    test 133 toDMS(-rad): -0.798708
    test 134 toDMS(+d): +45.7626°
    test 135 toDMS(+d): -45.7626°
    test 136 toDMS(+dm): +45°45.7560′
    test 137 toDMS(+dm): -45°45.7560′
    test 138 toDMS(+dms): +45°45′45.36″
    test 139 toDMS(+dms): -45°45′45.36″
    test 140 toDMS(+deg): +45.762600
    test 141 toDMS(+deg): -45.762600
    test 142 toDMS(+min): +4545.75600
    test 143 toDMS(+min): -4545.75600
    test 144 toDMS(+sec): +454545.360
    test 145 toDMS(+sec): -454545.360
    test 146 toDMS(+rad): +0.798708
    test 147 toDMS(+rad): -0.798708
    test 148 compassPoint(1,): N
    test 149 compassPoint(0,): N
    test 150 compassPoint(-1,): N
    test 151 compassPoint(359,): N
    test 152 compassPoint(24,): NNE
    test 153 compassPoint(24, 1): N
    test 154 compassPoint(24, 2): NE
    test 155 compassPoint(24, 3): NNE
    test 156 compassPoint(226,): SW
    test 157 compassPoint(226, 1): W
    test 158 compassPoint(226, 2): SW
    test 159 compassPoint(226, 3): SW
    test 160 compassPoint(237,): WSW
    test 161 compassPoint(237, 1): W
    test 162 compassPoint(237, 2): SW
    test 163 compassPoint(237, 3): WSW
    test 164 compassPoint(11.25,): NNE
    test 165 compassPoint(11.249,): N
    test 166 compassPoint(-11.25,): N
    test 167 compassPoint(348.749,): NNW
    test 168 compassPoint(45, 1): E
    test 169 compassPoint(44.99, 1): N
    test 170 compassPoint(45, 2): NE
    test 171 compassPoint(44.99, 2): NE
    test 172 compassPoint(45, 3): NE
    test 173 compassPoint(44.99, 3): NE
    test 174 compassPoint(45, 4): NE
    test 175 compassPoint(44.99, 4): NE
    test 176 compassPoint(22.5, 1): N
    test 177 compassPoint(22.49, 1): N
    test 178 compassPoint(22.5, 2): NE
    test 179 compassPoint(22.49, 2): N
    test 180 compassPoint(22.5, 3): NNE
    test 181 compassPoint(22.49, 3): NNE
    test 182 compassPoint(22.5, 4): NNE
    test 183 compassPoint(22.49, 4): NNE
    test 184 compassPoint(11.25, 1): N
    test 185 compassPoint(11.249, 1): N
    test 186 compassPoint(11.25, 2): N
    test 187 compassPoint(11.249, 2): N
    test 188 compassPoint(11.25, 3): NNE
    test 189 compassPoint(11.249, 3): N
    test 190 compassPoint(11.25, 4): NbE
    test 191 compassPoint(11.249, 4): NbE
    test 192 compassPoint(24, 1): N
    test 193 compassPoint(24, 2): NE
    test 194 compassPoint(24, 3): NNE
    test 195 compassPoint(24,): NNE
    test 196 compassPoint(18, 3): NNE
    test 197 compassPoint(11, 4): NbE
    test 198 compassPoint(30, 4): NEbN
    test 199 compassPoint(11.25): NbE
    test 200 compassPoint(33.75): NEbN
    test 201 compassPoint(56.25): NEbE
    test 202 compassPoint(78.75): EbN
    test 203 compassPoint(101.25): EbS
    test 204 compassPoint(123.75): SEbE
    test 205 compassPoint(146.25): SEbS
    test 206 compassPoint(168.75): SbE
    test 207 compassPoint(191.25): SbW
    test 208 compassPoint(213.75): SWbS
    test 209 compassPoint(236.25): SWbW
    test 210 compassPoint(258.75): WbS
    test 211 compassPoint(281.25): WbN
    test 212 compassPoint(303.75): NWbW
    test 213 compassPoint(326.25): NWbN
    test 214 compassPoint(348.75): NbW
    test 215 _DEG: +1.0101
    test 216 _MIN: +0.606′
    test 217 _SEC: +36.36″

    all 217 testDms.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 5.526 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEcef.py

    testing testEcef.py 20.10.08

    test 1 EcefKarney: ...
    test 2 name: Test
    test 3 toStr: EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test')  FAILED, KNOWN, expected EcefKarney
    test 4 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test'  FAILED, KNOWN, expected EcefKarney
    test 5 copy(EcefKarney): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 6 EcefKarney.copy(): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 7 forward: 27.99, 86.93, 8820.0
    test 8 forward: 302271.4, 5635928.4, 2979666.1
    test 9 name: Test
    test 10 reverse: 302271.4, 5635928.4, 2979666.1
    test 11 reverse: 27.99, 86.93, 8820.01
    test 12 case: 2
    test 13 iteration: None
    test 14 name: Test
    test 15 reverse: 302000.0, 5636000.0, 2980000.0
    test 16 reverse: 27.99, 86.93, 9027.03
    test 17 case: 2
    test 18 iteration: None
    test 19 forward: 27.99, 86.93, 8820.0
    test 20 forward: 302271.43, 5635928.37, 2979666.13
    test 21 forward: 33.3, 44.4, 6000.0
    test 22 forward: 3816209.6, 3737108.55, 3485109.57
    test 23 reverse: 3816209.6, 3737108.55, 3485109.57
    test 24 reverse: 33.3, 44.4, 5999.996
    test 25 case: 2
    test 26 iteration: None
    test 27 reverse: 30000.0, 30000.0, 0.0
    test 28 reverse: 6.483, 45.0, -6335709.726
    test 29 case: 3
    test 30 iteration: None
    test 31 forward: 6.483, 45.0, -6335709.726
    test 32 forward: 30000.0, 30000.0, -0.0
    test 33 Vermeille: -168.919
    test 34 Vermeille: 190.939
    test 35 reverse-1: 45.0, 120.0, 1000.0
    test 36 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 37 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 38 philam-1: 0.7854, 2.0944
    test 39 reverse-2: 45.0, 120.0, 2000.0
    test 40 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 41 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 42 philam-2: 0.7854, 2.0944
    test 43 reverse-3: 45.0, 120.0, 3000.0
    test 44 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 45 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 46 philam-3: 0.7854, 2.0944
    test 47 reverse-4: 45.0, 120.0, 4000.0
    test 48 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 49 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 50 philam-4: 0.7854, 2.0944
    test 51 reverse-5: 45.0, 120.0, 10000.0
    test 52 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 53 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 54 philam-5: 0.7854, 2.0944
    test 55 reverse-6: 45.0, 120.0, 20000.0
    test 56 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 57 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 58 philam-6: 0.7854, 2.0944
    test 59 reverse-7: 45.0, 120.0, 100000.0
    test 60 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 61 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 62 philam-7: 0.7854, 2.0944
    test 63 reverse-8: 45.0, 120.0, 800000.0
    test 64 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 65 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 66 philam-8: 0.7854, 2.0944
    test 67 reverse-9: 45.0, 120.0, 1000000.0
    test 68 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 69 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 70 philam-9: 0.7854, 2.0944
    test 71 sudano: 45.0, 0.0, 100000.0
    test 72 name: OS-UK
    test 73 forward: 53.61199036, -1.66444222, 299.8
    test 74 forward: 3790644.9, -110149.21, 5111482.97
    test 75 reverse: 3790644.9, -110149.21, 5111482.97
    test 76 reverse: 53.61199036, -1.66444223
    test 77 reverse.lat: 53°36′43.1653″N
    test 78 reverse.lon: 001°39′51.992″W
    test 79 reverse.height: 299.800
    test 80 case: 2
    test 81 iteration: None
    test 82 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 83 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 84 EcefKarney: EcefKarney(a=None, f=None) ellipsoid: type(datum) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefKarney

    test 85 EcefCartesian: ...
    test 86 name: Test
    test 87 toStr: EcefCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=Test(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test'), name='Test')  FAILED, KNOWN, expected EcefCartesian
    test 88 copy(EcefCartesian): (<class 'pygeodesy.ecef.EcefCartesian'>, True)
    test 89 EcefCartesian.copy(): (<class 'pygeodesy.ecef.EcefCartesian'>, True)
    test 90 forward: 33.3, 44.4, 6000.0
    test 91 forward: 37288.97, 33374.29, 5783.65
    test 92 name: Test
    test 93 reverse: 33.3, 44.4, 6000.0
    test 94 name: Test
    test 95 name: Paris
    test 96 Paris: 48.833, 2.333, 0.0
    test 97 forward: 50.9, 1.8, 0.0
    test 98 forward: -37518.64, 229949.65, -4260.43
    test 99 name: Calais
    test 100 reverse: 50.9, 1.8, -0.0
    test 101 name: Paris
    test 102 reverse: 4028834.2, 126130.9, 4926765.2
    test 103 reverse: 50.9, 1.79, 264.92
    test 104 forward: -38223.7, 229964.2, -4000.0  FAILED, KNOWN, expected -38000.0, 230000.0, -4000.0

    test 105 EcefVeness: ...
    test 106 name: Test
    test 107 toStr: EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test')  FAILED, KNOWN, expected EcefVeness
    test 108 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test'  FAILED, KNOWN, expected EcefVeness
    test 109 copy(EcefVeness): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 110 EcefVeness.copy(): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 111 forward: 27.99, 86.93, 8820.0
    test 112 forward: 302271.4, 5635928.4, 2979666.1
    test 113 name: Test
    test 114 reverse: 302271.4, 5635928.4, 2979666.1
    test 115 reverse: 27.99, 86.93, 8820.01
    test 116 case: 1
    test 117 iteration: None
    test 118 name: Test
    test 119 reverse: 302000.0, 5636000.0, 2980000.0
    test 120 reverse: 27.99, 86.93, 9027.03
    test 121 case: 1
    test 122 iteration: None
    test 123 forward: 27.99, 86.93, 8820.0
    test 124 forward: 302271.43, 5635928.37, 2979666.13
    test 125 forward: 33.3, 44.4, 6000.0
    test 126 forward: 3816209.6, 3737108.55, 3485109.57
    test 127 reverse: 3816209.6, 3737108.55, 3485109.57
    test 128 reverse: 33.3, 44.4, 5999.996
    test 129 case: 1
    test 130 iteration: None
    test 131 reverse: 30000.0, 30000.0, 0.0
    test 132 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 133 case: 1
    test 134 iteration: None
    test 135 forward: 6.483, 45.0, -6335709.726
    test 136 forward: 30000.0, 30000.0, -0.0
    test 137 Vermeille: -168.919
    test 138 Vermeille: 190.939
    test 139 reverse-1: 45.0, 120.0, 1000.0
    test 140 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 141 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 142 philam-1: 0.7854, 2.0944
    test 143 reverse-2: 45.0, 120.0, 2000.0
    test 144 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 145 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 146 philam-2: 0.7854, 2.0944
    test 147 reverse-3: 45.0, 120.0, 3000.0
    test 148 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 149 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 150 philam-3: 0.7854, 2.0944
    test 151 reverse-4: 45.0, 120.0, 4000.0
    test 152 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 153 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 154 philam-4: 0.7854, 2.0944
    test 155 reverse-5: 45.0, 120.0, 10000.0
    test 156 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 157 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 158 philam-5: 0.7854, 2.0944
    test 159 reverse-6: 45.0, 120.0, 20000.0
    test 160 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 161 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 162 philam-6: 0.7854, 2.0944
    test 163 reverse-7: 45.0, 120.0, 100000.0
    test 164 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 165 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 166 philam-7: 0.7854, 2.0944
    test 167 reverse-8: 45.0, 120.0, 800000.0
    test 168 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 169 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 170 philam-8: 0.7854, 2.0944
    test 171 reverse-9: 45.0, 120.0, 1000000.0
    test 172 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 173 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 174 philam-9: 0.7854, 2.0944
    test 175 sudano: 45.0, 0.0, 100000.0
    test 176 name: OS-UK
    test 177 forward: 53.61199036, -1.66444222, 299.8
    test 178 forward: 3790644.9, -110149.21, 5111482.97
    test 179 reverse: 3790644.9, -110149.21, 5111482.97
    test 180 reverse: 53.61199036, -1.66444223
    test 181 reverse.lat: 53°36′43.1653″N
    test 182 reverse.lon: 001°39′51.992″W
    test 183 reverse.height: 299.800
    test 184 case: 1
    test 185 iteration: None
    test 186 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 187 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 188 EcefVeness: EcefVeness(a=None, f=None) ellipsoid: type(datum) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefVeness

    test 189 EcefSudano: ...
    test 190 name: Test
    test 191 toStr: EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test')  FAILED, KNOWN, expected EcefSudano
    test 192 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test'  FAILED, KNOWN, expected EcefSudano
    test 193 copy(EcefSudano): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 194 EcefSudano.copy(): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 195 forward: 27.99, 86.93, 8820.0
    test 196 forward: 302271.4, 5635928.4, 2979666.1
    test 197 name: Test
    test 198 reverse: 302271.4, 5635928.4, 2979666.1
    test 199 reverse: 28.01, 86.93, 8819.58  FAILED, KNOWN, expected 27.99, 86.93, 8820.01
    test 200 case: 6
    test 201 iteration: 6
    test 202 name: Test
    test 203 reverse: 302000.0, 5636000.0, 2980000.0
    test 204 reverse: 28.01, 86.93, 9026.6  FAILED, KNOWN, expected 27.99, 86.93, 9027.03
    test 205 case: 6
    test 206 iteration: 6
    test 207 forward: 27.99, 86.93, 8820.0
    test 208 forward: 302271.43, 5635928.37, 2979666.13
    test 209 forward: 33.3, 44.4, 6000.0
    test 210 forward: 3816209.6, 3737108.55, 3485109.57
    test 211 reverse: 3816209.6, 3737108.55, 3485109.57
    test 212 reverse: 33.335, 44.4, 5998.836  FAILED, KNOWN, expected 33.3, 44.4, 5999.996
    test 213 case: 6
    test 214 iteration: 6
    test 215 reverse: 30000.0, 30000.0, 0.0
    test 216 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 217 case: 1
    test 218 iteration: 1
    test 219 forward: 6.483, 45.0, -6335709.726
    test 220 forward: 30000.0, 30000.0, -0.0
    test 221 Vermeille: -168.919
    test 222 Vermeille: 190.939
    test 223 reverse-1: 45.08, 120.0, 993.852  FAILED, KNOWN, expected 45.0, 120.0, 1000.0
    test 224 forward-1: -2256016.0, 3907534.4, 4494304.0  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5
    test 225 xyzh-1: -2256016.0, 3907534.4, 4494304.0, 993.9  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 226 philam-1: 0.7868, 2.0944
    test 227 reverse-2: 45.08, 120.0, 1993.853  FAILED, KNOWN, expected 45.0, 120.0, 2000.0
    test 228 forward-2: -2256369.6, 3908146.8, 4495011.2  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6
    test 229 xyzh-2: -2256369.6, 3908146.8, 4495011.2, 1993.9  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 230 philam-2: 0.7868, 2.0944
    test 231 reverse-3: 45.08, 120.0, 2993.854  FAILED, KNOWN, expected 45.0, 120.0, 3000.0
    test 232 forward-3: -2256723.1, 3908759.1, 4495718.3  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7
    test 233 xyzh-3: -2256723.1, 3908759.1, 4495718.3, 2993.9  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 234 philam-3: 0.7868, 2.0944
    test 235 reverse-4: 45.08, 120.0, 3993.855  FAILED, KNOWN, expected 45.0, 120.0, 4000.0
    test 236 forward-4: -2257076.7, 3909371.5, 4496425.4  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8
    test 237 xyzh-4: -2257076.7, 3909371.5, 4496425.4, 3993.9  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 238 philam-4: 0.7868, 2.0944
    test 239 reverse-5: 45.08, 120.0, 9993.861  FAILED, KNOWN, expected 45.0, 120.0, 10000.0
    test 240 forward-5: -2259198.0, 3913045.8, 4500668.0  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5
    test 241 xyzh-5: -2259198.0, 3913045.8, 4500668.0, 9993.9  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 242 philam-5: 0.7868, 2.0944
    test 243 reverse-6: 45.079, 120.0, 19993.87  FAILED, KNOWN, expected 45.0, 120.0, 20000.0
    test 244 forward-6: -2262733.6, 3919169.6, 4507739.0  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5
    test 245 xyzh-6: -2262733.6, 3919169.6, 4507739.0, 19993.9  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 246 philam-6: 0.7868, 2.0944
    test 247 reverse-7: 45.078, 120.0, 99993.947  FAILED, KNOWN, expected 45.0, 120.0, 100000.0
    test 248 forward-7: -2291018.1, 3968159.8, 4564307.3  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1
    test 249 xyzh-7: -2291018.1, 3968159.8, 4564307.3, 99993.9  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 250 philam-7: 0.7868, 2.0944
    test 251 reverse-8: 45.071, 120.0, 799994.544  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 252 forward-8: -2538507.3, 4396823.7, 5059280.0  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8
    test 253 xyzh-8: -2538507.3, 4396823.7, 5059280.0, 799994.5  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 254 philam-8: 0.7866, 2.0944
    test 255 reverse-9: 45.069, 120.0, 999994.693  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 256 forward-9: -2609218.5, 4519299.0, 5200700.9  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2
    test 257 xyzh-9: -2609218.5, 4519299.0, 5200700.9, 999994.7  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 258 philam-9: 0.7866, 2.0944
    test 259 sudano: 45.078, 0.0, 99993.947  FAILED, KNOWN, expected 45.0, 0.0, 100000.0
    test 260 name: OS-UK
    test 261 forward: 53.61199036, -1.66444222, 299.8
    test 262 forward: 3790644.9, -110149.21, 5111482.97
    test 263 reverse: 3790644.9, -110149.21, 5111482.97
    test 264 reverse: 53.73795244, -1.66444223  FAILED, KNOWN, expected 53.61199036, -1.66444223
    test 265 reverse.lat: 53°44′16.6288″N  FAILED, KNOWN, expected 53°36′43.1653″N
    test 266 reverse.lon: 001°39′51.992″W
    test 267 reverse.height: 284.389  FAILED, KNOWN, expected 299.800
    test 268 case: 7
    test 269 iteration: 7
    test 270 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 271 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 272 EcefSudano: EcefSudano(a=None, f=None) ellipsoid: type(datum) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefSudano

    test 273 EcefYou: ...
    test 274 name: Test
    test 275 toStr: EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test')  FAILED, KNOWN, expected EcefYou
    test 276 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915), name='Test'  FAILED, KNOWN, expected EcefYou
    test 277 copy(EcefYou): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 278 EcefYou.copy(): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 279 forward: 27.99, 86.93, 8820.0
    test 280 forward: 302271.4, 5635928.4, 2979666.1
    test 281 name: Test
    test 282 reverse: 302271.4, 5635928.4, 2979666.1
    test 283 reverse: 27.99, 86.93, 8820.01
    test 284 case: 1
    test 285 iteration: None
    test 286 name: Test
    test 287 reverse: 302000.0, 5636000.0, 2980000.0
    test 288 reverse: 27.99, 86.93, 9027.03
    test 289 case: 1
    test 290 iteration: None
    test 291 forward: 27.99, 86.93, 8820.0
    test 292 forward: 302271.43, 5635928.37, 2979666.13
    test 293 forward: 33.3, 44.4, 6000.0
    test 294 forward: 3816209.6, 3737108.55, 3485109.57
    test 295 reverse: 3816209.6, 3737108.55, 3485109.57
    test 296 reverse: 33.3, 44.4, 5999.996
    test 297 case: 1
    test 298 iteration: None
    test 299 reverse: 30000.0, 30000.0, 0.0
    test 300 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 301 case: 1
    test 302 iteration: None
    test 303 forward: 6.483, 45.0, -6335709.726
    test 304 forward: 30000.0, 30000.0, -0.0
    test 305 Vermeille: -168.919
    test 306 Vermeille: 190.939
    test 307 reverse-1: 45.0, 120.0, 1000.0
    test 308 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 309 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 310 philam-1: 0.7854, 2.0944
    test 311 reverse-2: 45.0, 120.0, 2000.0
    test 312 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 313 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 314 philam-2: 0.7854, 2.0944
    test 315 reverse-3: 45.0, 120.0, 3000.0
    test 316 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 317 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 318 philam-3: 0.7854, 2.0944
    test 319 reverse-4: 45.0, 120.0, 4000.0
    test 320 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 321 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 322 philam-4: 0.7854, 2.0944
    test 323 reverse-5: 45.0, 120.0, 10000.0
    test 324 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 325 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 326 philam-5: 0.7854, 2.0944
    test 327 reverse-6: 45.0, 120.0, 20000.0
    test 328 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 329 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 330 philam-6: 0.7854, 2.0944
    test 331 reverse-7: 45.0, 120.0, 100000.0
    test 332 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 333 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 334 philam-7: 0.7854, 2.0944
    test 335 reverse-8: 45.0, 120.0, 800000.0
    test 336 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 337 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 338 philam-8: 0.7854, 2.0944
    test 339 reverse-9: 45.0, 120.0, 1000000.0
    test 340 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 341 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 342 philam-9: 0.7854, 2.0944
    test 343 sudano: 45.0, 0.0, 100000.0
    test 344 name: OS-UK
    test 345 forward: 53.61199036, -1.66444222, 299.8
    test 346 forward: 3790644.9, -110149.21, 5111482.97
    test 347 reverse: 3790644.9, -110149.21, 5111482.97
    test 348 reverse: 53.61199036, -1.66444223
    test 349 reverse.lat: 53°36′43.1653″N
    test 350 reverse.lon: 001°39′51.992″W
    test 351 reverse.height: 299.800
    test 352 case: 1
    test 353 iteration: None
    test 354 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 355 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 356 EcefYou: EcefYou(a=None, f=None) ellipsoid: type(datum) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefYou

    test 357 EcefMatrix: ...
    test 358 index: (0, 1, 2, 3, 4, 5, 6, 7, 8)
    test 359 matrix: 0, 1, 2, 3, 4, 5, 6, 7, 8
    test 360 multiply: 45, 54, 63, 54, 66, 78, 63, 78, 93
    test 361 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 362 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 363 matrix: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 364 multiply: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 365 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 366 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)

    test 367 pygeodesy.ellipsoidalKarney: LatLon
    test 368 forward: 48.833, 2.333, 0.0
    test 369 forward: 4202946.8, 171232.47, 4778354.17
    test 370 name: Paris
    test 371 reverse: 48.833, 2.333, 0.0
    test 372 name: Paris
    test 373 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 374 name: Paris
    test 375 to4Tuple: LatLon4Tuple
    test 376 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 377 to3Tuple: LatLon3Tuple
    test 378 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 379 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 380 name: Paris
    test 381 forward: [4202946.8, 171232.47, 4778354.17]

    test 382 pygeodesy.ellipsoidalNvector: LatLon
    test 383 forward: 48.833, 2.333, 0.0
    test 384 forward: 4202946.8, 171232.47, 4778354.17
    test 385 name: Paris
    test 386 reverse: 48.833, 2.333, 0.0
    test 387 name: Paris
    test 388 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 389 name: Paris
    test 390 to4Tuple: LatLon4Tuple
    test 391 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 392 to3Tuple: LatLon3Tuple
    test 393 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 394 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 395 name: Paris
    test 396 forward: [4202946.8, 171232.47, 4778354.17]

    test 397 pygeodesy.ellipsoidalVincenty: LatLon
    test 398 forward: 48.833, 2.333, 0.0
    test 399 forward: 4202946.8, 171232.47, 4778354.17
    test 400 name: Paris
    test 401 reverse: 48.833, 2.333, 0.0
    test 402 name: Paris
    test 403 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 404 name: Paris
    test 405 to4Tuple: LatLon4Tuple
    test 406 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 407 to3Tuple: LatLon3Tuple
    test 408 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 409 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 410 name: Paris
    test 411 forward: [4202946.8, 171232.47, 4778354.17]

    test 412 pygeodesy.sphericalNvector: LatLon
    test 413 forward: 48.833, 2.333, 0.0
    test 414 forward: 4190278.55, 170716.35, 4796058.21
    test 415 name: Paris
    test 416 reverse: 48.833, 2.333, 0.0
    test 417 name: Paris
    test 418 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 419 name: Paris
    test 420 to4Tuple: LatLon4Tuple
    test 421 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 422 to3Tuple: LatLon3Tuple
    test 423 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 424 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 425 name: Paris
    test 426 forward: [4190278.55, 170716.35, 4796058.21]

    test 427 pygeodesy.sphericalTrigonometry: LatLon
    test 428 forward: 48.833, 2.333, 0.0
    test 429 forward: 4190278.55, 170716.35, 4796058.21
    test 430 name: Paris
    test 431 reverse: 48.833, 2.333, 0.0
    test 432 name: Paris
    test 433 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 434 name: Paris
    test 435 to4Tuple: LatLon4Tuple
    test 436 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 437 to3Tuple: LatLon3Tuple
    test 438 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 439 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 440 name: Paris
    test 441 forward: [4190278.55, 170716.35, 4796058.21]

    59 of 441 testEcef.py tests (13.4%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 48.439 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testElevations.py

    testing testElevations.py 20.07.03
    test 1 elevation2: 1173.790
    test 2 geoidHeight2: -31.699
    test 3 elevation2: 1173.790
    test 4 geodHeight2: -31.699
    test 5 elevation2: 2.030
    test 6 geodHeight2: -27.773
    test 7 elevation2: 199.180
    test 8 geodHeight2: -34.337
    test 9 elevation2: 8.520
    test 10 geodHeight2: -30.000
    test 11 elevation2: 32.790
    test 12 geodHeight2: -31.666
    test 13 elevation2: (None, 'non-CONUS -1000000.00')
    test 14 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, 'HTTPError()')
    test 15 elevation2: (None, "URLError(timeout('timed out'))")
    test 16 geodHeight2: (None, "URLError(timeout('timed out'))")
    test 17 elevation2: 1173.790
    test 18 geoidHeight2: -31.699
    test 19 elevation2: 1173.790
    test 20 geodHeight2: -31.699
    test 21 elevation2: 2.030
    test 22 geodHeight2: -27.773
    test 23 elevation2: 199.180
    test 24 geodHeight2: -34.337
    test 25 elevation2: 8.520
    test 26 geodHeight2: -30.000
    test 27 elevation2: 32.790
    test 28 geodHeight2: -31.666
    test 29 elevation2: (None, 'non-CONUS -1000000.00')
    test 30 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, 'HTTPError()')
    test 31 elevation2: (None, "URLError(timeout('timed out'))")
    test 32 geodHeight2: (None, "URLError(timeout('timed out'))")

    2 of 32 testElevations.py tests (6.2%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 10.822 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEllipsoidal.py

    testing testEllipsoidal.py 20.08.28

    testEllipsoidal(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 6 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 7 convertDatum: 51.4778°N, 000.0016°W
    test 8 parse: 51.477284°N, 000.00002°E, -45.91m
    test 9 reframe: None
    test 10 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 11 toEcef: 3980581.21, -111.159, 4966824.522
    test 12 toEtm: 30 N 916396 5720041
    test 13 toLcc: 5639901 4612638
    test 14 toOsgr: TQ 38876 77320
    test 15 toUtmUps: 30 N 708207 5707224
    test 16 toUtm: 30 N 708207 5707224
    test 17 toWm: -178.111 6672799.209
    test 18 elevation2: None
    test 19 geoidHeight2: None
    test 20 toUtmUps: 30 N 708207 5707224
    test 21 toUtmUps: 30 N 708207 5707224
    test 22 toUtm: 30 N 708207 5707224
    test 23 toUtm: 30 N 708207 5707224
    test 24 toUtmUps: 00 N 2000000 1333272
    test 25 toUtmUps: 00 N 2000000 1333272
    test 26 toUps: 00 N 2000000 1333272
    test 27 toUps: 00 N 2000000 1333272
    test 28 toUps: 00 N 2000000 1555732
    test 29 toUtm: 31 N 459200 9217519
    test 30 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 31 toNvector: True
    test 32 toCartesian: [3980581, 97, 4966825]
    test 33 toCartesian: True
    test 34 toVector3D: (0.6228, 0.0, 0.7824)
    test 35 Nvector: (0.5, 0.5, 0.7071)
    test 36 toVector3D: (0.5, 0.5, 0.7071)
    test 37 to3abh: 0.7854, 0.7854, 0.0
    test 38 to3llh: 45.0, 45.0, 0.0
    test 39 to4xyzh: 0.5, 0.5, 0.7, 0.0
    test 40 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 41 toCartesian: True
    test 42 toLatLon: 45.0°N, 045.0°E
    test 43 toLatLon: True
    test 44 Nvector: (0.51, 0.512, 0.707, +1.00)
    test 45 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 46 dop: 51.998889°N, 004.373333°E, +134.64m
    test 47 distance: 3806542.94365  FAILED, KNOWN, expected 3806542.943647

    testLatLon(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 48 isEllipsoidal: True
    test 49 isSpherical: False
    test 50 lat/lonDMS: 52.20472°N, 000.14056°E
    test 51 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 52 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 53 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 54 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 55 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 56 isequalTo: True
    test 57 isequalTo: True
    test 58 latlon2: 52.20472, 0.14056
    test 59 latlon2: 52.2047, 0.1406
    test 60 latlon2: 52.205, 0.141
    test 61 latlon2: 52.2, 0.14
    test 62 latlon2: 52.2, 0.1
    test 63 latlon2: 52.0, 0.0
    test 64 isequalTo: False
    test 65 antipode1: 52.205°S, 179.881°W
    test 66 antipode2: True
    test 67 antipode3: 52.205°N, 000.119°E
    test 68 antipode4: True
    test 69 antipode5: 52.205°N, 000.119°E
    test 70 copy: True
    test 71 __eq__: True
    test 72 __ne__: False
    test 73 equirectangularTo: 404329.56
    test 74 distanceTo: 404279.720589
    test 75 distanceTo: 404279.720589
    test 76 distanceTo: 3972863
    test 77 distanceTo: 18013602.92
    test 78 distanceTo: 0.00  FAILED, KNOWN, expected 20003931.46
    test 79 intermediateTo: 51.372294°N, 000.707192°E
    test 80 intermediateTo: True
    test 81 intermediateTo: 404279.721
    test 82 intermediateTo+5: 35.560239°N, 008.833512°E
    test 83 intermediateTo+5: 4.885
    test 84 intermediateTo-4: 64.570387°N, 013.156352°W
    test 85 intermediateTo-4: 3.885
    test 86 intermediateTo-h: 125.000
    test 87 cosineAndoyerLambertTo: 125205.962
    test 88 cosineAndoyerLambertTo: 125205.962
    test 89 cosineForsyheAndoyerLambertTo: 125205.965
    test 90 cosineForsyheAndoyerLambertTo: 125205.965
    test 91 cosineLawTo: 124801.098
    test 92 cosineLawTo: 124801.098
    test 93 equirectangularTo: 124804.754
    test 94 equirectangularTo: 124804.754
    test 95 euclideanTo: 130015.089
    test 96 euclideanTo: 130015.089
    test 97 flatLocalTo: 125209.633
    test 98 flatLocalTo: 125209.633
    test 99 flatPolarTo: 133663.257
    test 100 flatPolarTo: 133663.257
    test 101 haversineTo: 124801.098
    test 102 haversineTo: 124801.098
    test 103 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 104 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 105 thomasTo: 125206.188
    test 106 thomasTo: 125206.188
    test 107 vincentysTo: 124801.098
    test 108 vincentysTo: 124801.098
    test 109 isclockwise: False
    test 110 isclockwise*: False
    test 111 isclockwise: True
    test 112 isclockwise*: True
    test 113 isclockwise: points (2): too few
    test 114 isclockwise*: points (2): too few
    test 115 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 116 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 117 isconvex: False
    test 118 isconvex*: False
    test 119 isconvex: True
    test 120 isconvex*: True
    test 121 isconvex: points (2): too few
    test 122 isconvex*: points (2): too few
    test 123 isenclosedBy1: True
    test 124 isenclosedBy1*: True
    test 125 isenclosedBy2: False
    test 126 isenclosedBy2*: False
    test 127 isenclosedBy3: False
    test 128 isenclosedBy3*: False
    test 129 isenclosedBy4: False
    test 130 isenclosedBy4*: False
    test 131 isenclosedBy5: False
    test 132 isenclosedBy5*: False
    test 133 isenclosedBy6: True
    test 134 isenclosedBy6*: True
    test 135 isenclosedBy7: True
    test 136 isenclosedBy7*: True
    test 137 compassAngleTo: 100.017
    test 138 compassAngleTo: 105.599
    test 139 compassAngleTo: 280.017
    test 140 compassAngleTo: 285.599
    test 141 equirectangularTo: 592.185
    test 142 distanceTo: 591.831
    test 143 compassAngleTo: 0.0
    test 144 compassAngleTo: 45.0
    test 145 compassAngleTo: 90.0
    test 146 compassAngleTo: 180.0
    test 147 compassAngleTo: 225.0
    test 148 compassAngleTo: 315.0
    test 149 compassAngleTo: 270.0
    test 150 compassAngleTo: 359.4
    test 151 latlon2: (53.0, 1.0)
    test 152 philam2: (0.93, 0.02)
    test 153 compassAngleTo: 31
    test 154 compassAngleTo: 45
    test 155 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 156 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 157 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 158 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 159 isequalTo: <type 'bool'>
    test 160 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 161 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 162 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 163 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 164 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 165 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 166 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 167 compassAngleTo: <type 'float'>
    test 168 cosineLawTo: <type 'float'>
    test 169 euclideanTo: <type 'float'>
    test 170 flatLocalTo: <type 'float'>
    test 171 flatPolarTo: <type 'float'>
    test 172 haversineTo: <type 'float'>
    test 173 hubenyTo: <type 'float'>
    test 174 vincentysTo: <type 'float'>
    test 175 toVector: (0.615661, 0.0, 0.788011)
    test 176 toVector3d: (0.61566, 0.0, 0.78801)
    test 177 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 178 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 179 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 180 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 181 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testVectorial(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 182 toLatLon: 44.995674°N, 045.0°E
    test 183 toNvector: (0.50004, 0.50004, 0.70705)
    test 184 isequalTo: False
    test 185 isequalTo: True
    test 186 length: 0.99992449715
    test 187 euclid: 0.99995577
    test 188 length: 1.00
    test 189 euclid: 1.0000
    test 190 meanOf: 44.995674°N, 045.0°E
    test 191 meanOf: LatLon
    test 192 sumOf: (52.70504, 0.61904, 0.70705)
    test 193 sumOf: Nv
    test 194 sumOf: sumOf
    test 195 length: 52.7134151513
    test 196 copy: True
    test 197 length: 52.2051356286
    test 198 length: 52.2051356286
    test 199 nearestOn: 51.0°N, 001.0°E
    test 200 nearestOn: 50.987°N, 000.298°W
    test 201 nearestOn: 51.0°N, 002.0°E
    test 202 nearestOn: 50.995°N, 002.655°E
    test 203 nearestOn: 51.0°N, 001.9°E
    test 204 nearestOn: True
    test 205 distanceTo: 42.712  FAILED, KNOWN, expected 42.826
    test 206 nearestOn: 51.0°N, 002.0°E
    test 207 nearestOn: True
    test 208 nearestOn: 00.0°N, 000.0°E
    test 209 nearestOn: True
    test 210 nearestOn: 00.0°N, 020.0°E
    test 211 nearestOn: True
    test 212 nearestOn: 02.0°N, 002.0°E
    test 213 nearestOn: 02.0°N, 002.0°E
    test 214 BasseC: 47.3038°N, 002.5721°W
    test 215 BasseH: 47.311067°N, 002.528617°W
    test 216 triangulate: 47.323667°N, 002.568501°W
    test 217 triangulate: True
    test 218 trilaterate: 37.419078°N, 121.960579°W
    test 219 trilaterate: True
    test 220 trilaterate: 08.068912°S, 034.888699°W
    test 221 trilaterate: True
    test 222 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 223 trilaterate: True
    test 224 trilaterate: 42.67456065°N, 002.49539502°E
    test 225 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 226 sumOf: Nvector
    test 227 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 228 ecef.lat, .lon: 44.995674, 45.0
    test 229 ecef.height: 0.0  FAILED, KNOWN, expected -0.0
    test 230 .isEllipsoidal: True
    test 231 .isSpherical: False
    test 232 .latlon: (44.995674, 45.0)
    test 233 .philam: (0.785323, 0.785398)
    test 234 .latlonheight: (44.995674, 45.0, 0)
    test 235 .philamheight: (0.785323, 0.785398, 0)
    test 236 parse: (0.5, 0.5, 0.707)
    test 237 cmp: 0
    test 238 eq: True
    test 239 ge: True
    test 240 gt: False
    test 241 le: True
    test 242 lt: False
    test 243 ne: False
    test 244 *: (1.0, 1.0, 1.414)
    test 245 +: (1.0, 1.0, 1.414)
    test 246 /: (0.5, 0.5, 0.707)
    test 247 -: (0.5, 0.5, 0.707)
    test 248 @: (0.0, 0.0, 0.0)
    test 249 @: (0.0, 0.0, 0.0)
    test 250 rotate: (0.26268, 0.26268, 0.37143)
    test 251 crosserrors: True
    test 252 0: factor (0): float division by zero
    test 253 intersections2: (500.0, 0.0, 0.0)
    test 254 nearestOn: (0.0, 0.0, 0.0)
    test 255 nearestOn: True
    test 256 nearestOn: (100.0, 100.0, 100.0)
    test 257 nearestOn: True
    test 258 iscolinearWith: False
    test 259 iscolinearWith: True

    testEllipsoidal(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 260 isEllipsoidal: True
    test 261 isSpherical: False
    test 262 isEllipsoidal: True
    test 263 isSpherical: False
    test 264 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 265 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 266 convertDatum: 51.4778°N, 000.0016°W
    test 267 parse: 51.477284°N, 000.00002°E, -45.91m
    test 268 reframe: None
    test 269 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 270 toEcef: 3980581.21, -111.159, 4966824.522
    test 271 toEtm: 30 N 916396 5720041
    test 272 toLcc: 5639901 4612638
    test 273 toOsgr: TQ 38876 77320
    test 274 toUtmUps: 30 N 708207 5707224
    test 275 toUtm: 30 N 708207 5707224
    test 276 toWm: -178.111 6672799.209
    test 277 elevation2: None
    test 278 geoidHeight2: None
    test 279 toUtmUps: 30 N 708207 5707224
    test 280 toUtmUps: 30 N 708207 5707224
    test 281 toUtm: 30 N 708207 5707224
    test 282 toUtm: 30 N 708207 5707224
    test 283 toUtmUps: 00 N 2000000 1333272
    test 284 toUtmUps: 00 N 2000000 1333272
    test 285 toUps: 00 N 2000000 1333272
    test 286 toUps: 00 N 2000000 1333272
    test 287 toUps: 00 N 2000000 1555732
    test 288 toUtm: 31 N 459200 9217519
    test 289 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 290 dop: 51.998889°N, 004.373333°E, +134.64m
    test 291 distance: 3817991.07401  FAILED, KNOWN, expected 3817991.074015

    testLatLon(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 292 isEllipsoidal: True
    test 293 isSpherical: False
    test 294 lat/lonDMS: 52.20472°N, 000.14056°E
    test 295 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 296 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 297 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 298 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 299 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 300 isequalTo: True
    test 301 isequalTo: True
    test 302 latlon2: 52.20472, 0.14056
    test 303 latlon2: 52.2047, 0.1406
    test 304 latlon2: 52.205, 0.141
    test 305 latlon2: 52.2, 0.14
    test 306 latlon2: 52.2, 0.1
    test 307 latlon2: 52.0, 0.0
    test 308 isequalTo: False
    test 309 antipode1: 52.205°S, 179.881°W
    test 310 antipode2: True
    test 311 antipode3: 52.205°N, 000.119°E
    test 312 antipode4: True
    test 313 antipode5: 52.205°N, 000.119°E
    test 314 initialBearingTo: 156.1106
    test 315 finalBearingTo: 157.8345
    test 316 initialBearingTo: 65.9335
    test 317 finalBearingTo: 93.9034
    test 318 bearingTo2: 156.1106, 157.8345
    test 319 ispolar: True
    test 320 copy: True
    test 321 __eq__: True
    test 322 __ne__: False
    test 323 equirectangularTo: 404329.56
    test 324 distanceTo: 404607.805988
    test 325 distanceTo: 404607.805988
    test 326 distanceTo: 3981601
    test 327 antipodal: False
    test 328 distanceTo dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 329 distanceTo unrolled: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 330 antipodal: False
    test 331 distanceTo dateline: 9513998
    test 332 distanceTo unrolled: 9513998
    test 333 distanceTo: 18012714.66
    test 334 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 335 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 336 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 337 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 338 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 339 destination: 51.513526°N, 000.098038°W
    test 340 destination: 51°30′49″N, 000°05′53″W
    test 341 destination: 33°57′N, 118°24′W
    test 342 destination: 33.950367°N, 118.399012°W
    test 343 destination: 0.592546N, 2.066453W
    test 344 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 345 cosineAndoyerLambertTo: 125205.962
    test 346 cosineAndoyerLambertTo: 125205.962
    test 347 cosineForsyheAndoyerLambertTo: 125205.965
    test 348 cosineForsyheAndoyerLambertTo: 125205.965
    test 349 cosineLawTo: 124801.098
    test 350 cosineLawTo: 124801.098
    test 351 equirectangularTo: 124804.754
    test 352 equirectangularTo: 124804.754
    test 353 euclideanTo: 130015.089
    test 354 euclideanTo: 130015.089
    test 355 flatLocalTo: 125209.633
    test 356 flatLocalTo: 125209.633
    test 357 flatPolarTo: 133663.257
    test 358 flatPolarTo: 133663.257
    test 359 haversineTo: 124801.098
    test 360 haversineTo: 124801.098
    test 361 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 362 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 363 thomasTo: 125206.188
    test 364 thomasTo: 125206.188
    test 365 vincentysTo: 124801.098
    test 366 vincentysTo: 124801.098
    test 367 isclockwise: False
    test 368 isclockwise*: False
    test 369 isclockwise: True
    test 370 isclockwise*: True
    test 371 isclockwise: points (2): too few
    test 372 isclockwise*: points (2): too few
    test 373 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 374 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 375 isconvex: False
    test 376 isconvex*: False
    test 377 isconvex: True
    test 378 isconvex*: True
    test 379 isconvex: points (2): too few
    test 380 isconvex*: points (2): too few
    test 381 isenclosedBy1: True
    test 382 isenclosedBy1*: True
    test 383 isenclosedBy2: False
    test 384 isenclosedBy2*: False
    test 385 isenclosedBy3: False
    test 386 isenclosedBy3*: False
    test 387 isenclosedBy4: False
    test 388 isenclosedBy4*: False
    test 389 isenclosedBy5: False
    test 390 isenclosedBy5*: False
    test 391 isenclosedBy6: True
    test 392 isenclosedBy6*: True
    test 393 isenclosedBy7: True
    test 394 isenclosedBy7*: True
    test 395 initialBearingTo: 102.392291
    test 396 compassAngleTo: 100.017
    test 397 compassAngleTo: 105.599
    test 398 initialBearingTo: 288.676039
    test 399 compassAngleTo: 280.017
    test 400 compassAngleTo: 285.599
    test 401 equirectangularTo: 592.185
    test 402 distanceTo: 593.571
    test 403 bearingTo: 0.0
    test 404 compassAngleTo: 0.0
    test 405 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 406 compassAngleTo: 45.0
    test 407 bearingTo: 90.0
    test 408 compassAngleTo: 90.0
    test 409 bearingTo: 180.0
    test 410 compassAngleTo: 180.0
    test 411 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 412 compassAngleTo: 225.0
    test 413 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 414 compassAngleTo: 315.0
    test 415 bearingTo: 270.0
    test 416 compassAngleTo: 270.0
    test 417 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 418 compassAngleTo: 359.4
    test 419 latlon2: (53.0, 1.0)
    test 420 philam2: (0.93, 0.02)
    test 421 bearingTo: 31
    test 422 compassAngleTo: 31
    test 423 compassAngleTo: 45
    test 424 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 425 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 426 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 427 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 428 isequalTo: <type 'bool'>
    test 429 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 430 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 431 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 432 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 433 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 434 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 435 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 436 compassAngleTo: <type 'float'>
    test 437 cosineLawTo: <type 'float'>
    test 438 euclideanTo: <type 'float'>
    test 439 flatLocalTo: <type 'float'>
    test 440 flatPolarTo: <type 'float'>
    test 441 haversineTo: <type 'float'>
    test 442 hubenyTo: <type 'float'>
    test 443 vincentysTo: <type 'float'>
    test 444 toNvector: (0.615661, 0.0, 0.788011)
    test 445 toVector: (0.615661, 0.0, 0.788011)
    test 446 toVector3d: (0.61566, 0.0, 0.78801)
    test 447 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 311.234
    test 448 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66938776°N, 002.48641176°E
    test 449 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1586.951
    test 450 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65153156°N, 002.46821899°E
    test 451 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 452 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 137.897
    test 453 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 148.175
    test 454 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67811504°N, 002.49959193°E
    test 455 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 456 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2399.908
    test 457 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2399.908
    test 458 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.6613586°N, 002.47981223°E
    test 459 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 460 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 461 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1332.749
    test 462 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69124153°N, 002.50124031°E
    test 463 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1450.709
    test 464 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67811504°N, 002.49959193°E
    test 465 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2

    testNOAA(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 466 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 467 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 468 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 469 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersections2(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 470 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 471 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 472 Equidistant: 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 473 Equidistant: 1.63814 (% of radius)
    test 474 Equidistant: 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 475 Equidistant: 1.30784 (% of radius)
    test 476 Equidistant: 29.2359°N, 040.2625°W, 29.2359°S, 040.2625°E
    test 477 Equidistant: 1.31348 (% of radius)
    test 478 Equidistant: 01.1557°S, 045.0894°E, 01.1557°N, 045.0894°E
    test 479 Equidistant: 1.81093 (% of radius)
    test 480 Equidistant 5: 05.0218°S, 005.0605°W, 05.0218°N, 005.0605°E
    test 481 Equidistant 5: 0.00337268 (% of radius)
    test 482 Equidistant 10: 10.0378°S, 010.3545°W, 10.0378°N, 010.3545°E
    test 483 Equidistant 10: 0.00344677 (% of radius)
    test 484 Equidistant 15: 15.0326°S, 016.1429°W, 15.0326°N, 016.1429°E
    test 485 Equidistant 15: 0.00356146 (% of radius)
    test 486 Equidistant 20: 19.9682°S, 022.7468°W, 19.9682°N, 022.7468°E
    test 487 Equidistant 20: 0.00370135 (% of radius)
    test 488 Equidistant 25: 24.7603°S, 030.5908°W, 24.7603°N, 030.5908°E
    test 489 Equidistant 25: 0.00383987 (% of radius)
    test 490 Equidistant 30: 29.2359°S, 040.2625°W, 29.2359°N, 040.2625°E
    test 491 Equidistant 30: 0.00393258 (% of radius)
    test 492 Equidistant 35: 33.0487°S, 052.585°W, 33.0487°N, 052.585°E
    test 493 Equidistant 35: 0.00390516 (% of radius)
    test 494 Equidistant 40: 35.5123°S, 068.6794°W, 35.5123°N, 068.6794°E
    test 495 Equidistant 40: 0.0036308 (% of radius)
    test 496 Equidistant 45: 35.2644°S, 090.0019°W, 35.2644°N, 090.0019°E
    test 497 Equidistant 45: 0.00288386 (% of radius)
    test 498 Equidistant 50: 29.3392°S, 119.0221°W, 29.3392°N, 119.0221°E
    test 499 Equidistant 50: 0.00271777 (% of radius)
    test 500 Equidistant: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (0.001)  FAILED, KNOWN, expected 2-tuple
    test 501 Equidistant: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (0.001)  FAILED, KNOWN, expected 2-tuple
    test 502 Equidistant: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (0.001)  FAILED, KNOWN, expected 2-tuple
    test 503 Equidistant: 44.930857°N, 005.947585°E Random +/- 45
    test 504 Equidistant: 45.163735°N, 007.765315°E, 43.106859°N, 002.444157°E  d 145521 meter (iteration 4)
    test 505 Equidistant: d (145521): over  FAILED, KNOWN, expected d < 99999 m
    test 506 Equidistant: 44.693104°N, 006.264397°E, 00.714615°N, 041.882223°W  d 36416.1 meter (iteration 5)
    test 507 Equidistant: 44.814421°N, 005.976501°E, 11.44865°S, 009.201559°W  d 13139.7 meter (iteration 4)
    test 508 Equidistant: 44.739887°N, 005.953208°E, 36.965623°S, 011.833492°E  d 21226.9 meter (iteration 5)
    test 509 Equidistant: 44.763516°N, 005.463821°E, 27.29813°N, 027.363697°E  d 42526 meter (iteration 5)
    test 510 Equidistant: 44.662864°N, 006.333086°E, 22.582471°N, 028.997432°W  d 42630.4 meter (iteration 5)
    test 511 Equidistant: 44.712941°N, 006.536185°E, 27.928537°N, 027.140901°W  d 52474.7 meter (iteration 5)
    test 512 Equidistant: 44.639964°N, 005.890261°E, 59.157179°S, 037.069276°E  d 32643.1 meter (iteration 5)
    test 513 Equidistant: 44.368117°N, 006.2522°E, 36.707719°N, 089.603444°W  d 67040.6 meter (iteration 5)
    test 514 Equidistant: 44.84345°N, 005.903736°E, 04.04405°N, 017.624739°E  d 10312.8 meter (iteration 5)
    test 515 Equidistant: 44.700876°N, 005.880299°E, 10.858563°N, 052.491913°E  d 26105.7 meter (iteration 5)
    test 516 Equidistant: 44.705748°N, 006.523233°E, 22.994153°N, 033.962247°W  d 51950.8 meter (iteration 5)

    testVincenty(pygeodesy.ellipsoidalVincenty, 20.10.04, datum='WGS84')
    test 517 distanceTo: 866455.43292
    test 518 convertDatum: OSGB36
    test 519 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 520 isEllipsoidal: True
    test 521 isSpherical: False
    test 522 epsilon: 1e-12
    test 523 iterations: 100
    test 524 copy: True
    test 525 isEllipsoidal: True
    test 526 isSpherical: False
    test 527 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 528 epsilon: 2.220446049250e-16
    test 529 iterations: 200
    test 530 iteration: 0

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 20.10.04, datum='WGS84')
    test 531 coincident: 0.0
    test 532 coincident: 0.0, 0.0, 0.0
    test 533 destination: 37.6528°S, 143.9265°E
    test 534 destination: True
    test 535 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 536 destination2: True
    test 537 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 538 distanceTo: 969954.166
    test 539 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 540 distanceTo2: 972708.16174, 11.22502
    test 541 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 542 destination: 58.64402°N, 003.07009°W
    test 543 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 544 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 545 distanceTo: 404607.806
    test 546 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 547 distanceTo2: 402574.597287, 157.726344
    test 548 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 549 destination: 48.857°N, 002.351°E
    test 550 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 551 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 552 distanceTo: 54973.295
    test 553 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 554 distanceTo2: 54903.41209, 232.9209
    test 555 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 556 destination: 37.6528°N, 143.9265°E
    test 557 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 558 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 559 distanceToMP: 298396.057
    test 560 distanceToSM: 185.414
    test 561 distanceToMP: 111319.491
    test 562 distanceToMP: 110574.389
    test 563 distanceToKW: 222638.982
    test 564 distanceToKW: 111319.491
    test 565 distanceTo3: 54972.271
    test 566 distanceTo3: 306°52′05.37″
    test 567 distanceTo3: 307°10′25.07″
    test 568 distanceTo2: 54902.390
    test 569 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 20.10.04, datum='WGS84')
    test 570 distanceTo/antipodal (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°30′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 571 distanceTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 572 initialBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 573 finalBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 574 distanceTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 575 initialBearingTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 576 distanceTo/coincident (5): 111319.491
    test 577 distanceTo/meridional (1): 10001965.729
    test 578 initialBearingTo/meridional (1): 180.0
    test 579 distanceTo/coincident (1): 0.0
    test 580 initialBearingTo/coincident (1): 0.0
    test 581 finalBearingTo/coincident (1): 0.0
    test 582 destination/coincident (1): 50.06632°N, 005.71475°W
    test 583 distanceTo/anti-meridian (4): 10825924.1
    test 584 distanceTo/quadrants (5): 4015703.02
    test 585 distanceTo/quadrants (5): 4015703.02
    test 586 distanceTo/quadrants (5): 4015703.02
    test 587 distanceTo/quadrants (5): 4015703.02
    test 588 distanceTo/quadrants (5): 4015703.02
    test 589 distanceTo/quadrants (5): 4015703.02
    test 590 distanceTo/quadrants (5): 4015703.02
    test 591 distanceTo/quadrants (5): 4015703.02
    test 592 distanceTo/quadrants (5): 4015703.02
    test 593 distanceTo/quadrants (5): 4015703.02
    test 594 distanceTo/quadrants (5): 4015703.02
    test 595 distanceTo/quadrants (5): 4015703.02
    test 596 distanceTo/quadrants (5): 4015703.02
    test 597 distanceTo/quadrants (5): 4015703.02
    test 598 distanceTo/quadrants (5): 4015703.02
    test 599 distanceTo/quadrants (5): 4015703.02

    testVincenty(pygeodesy.ellipsoidalVincenty, 20.10.04, datum='NAD83')
    test 600 distanceTo: 866455.43292
    test 601 convertDatum: OSGB36
    test 602 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 603 isEllipsoidal: True
    test 604 isSpherical: False
    test 605 epsilon: 1e-12
    test 606 iterations: 100
    test 607 copy: True
    test 608 isEllipsoidal: True
    test 609 isSpherical: False
    test 610 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 611 epsilon: 2.220446049250e-16
    test 612 iterations: 200
    test 613 iteration: 0

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 20.10.04, datum='NAD83')
    test 614 coincident: 0.0
    test 615 coincident: 0.0, 0.0, 0.0
    test 616 destination: 37.6528°S, 143.9265°E
    test 617 destination: True
    test 618 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 619 destination2: True
    test 620 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 621 distanceTo: 969954.166
    test 622 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 623 distanceTo2: 972708.16174, 11.22502
    test 624 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 625 destination: 58.64402°N, 003.07009°W
    test 626 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 627 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 628 distanceTo: 404607.806
    test 629 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 630 distanceTo2: 402574.597287, 157.726344
    test 631 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 632 destination: 48.857°N, 002.351°E
    test 633 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 634 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 635 distanceTo: 54973.295
    test 636 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 637 distanceTo2: 54903.41209, 232.9209
    test 638 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 639 destination: 37.6528°N, 143.9265°E
    test 640 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 641 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 642 distanceToMP: 298396.057
    test 643 distanceToSM: 185.414
    test 644 distanceToMP: 111319.491
    test 645 distanceToMP: 110574.389
    test 646 distanceToKW: 222638.982
    test 647 distanceToKW: 111319.491
    test 648 distanceTo3: 54972.271
    test 649 distanceTo3: 306°52′05.37″
    test 650 distanceTo3: 307°10′25.07″
    test 651 distanceTo2: 54902.390
    test 652 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 20.10.04, datum='NAD83')
    test 653 distanceTo/antipodal (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°30′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 654 distanceTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 655 initialBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 656 finalBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 657 distanceTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 658 initialBearingTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 659 distanceTo/coincident (5): 111319.491
    test 660 distanceTo/meridional (1): 10001965.729
    test 661 initialBearingTo/meridional (1): 180.0
    test 662 distanceTo/coincident (1): 0.0
    test 663 initialBearingTo/coincident (1): 0.0
    test 664 finalBearingTo/coincident (1): 0.0
    test 665 destination/coincident (1): 50.06632°N, 005.71475°W
    test 666 distanceTo/anti-meridian (4): 10825924.1
    test 667 distanceTo/quadrants (5): 4015703.02
    test 668 distanceTo/quadrants (5): 4015703.02
    test 669 distanceTo/quadrants (5): 4015703.02
    test 670 distanceTo/quadrants (5): 4015703.02
    test 671 distanceTo/quadrants (5): 4015703.02
    test 672 distanceTo/quadrants (5): 4015703.02
    test 673 distanceTo/quadrants (5): 4015703.02
    test 674 distanceTo/quadrants (5): 4015703.02
    test 675 distanceTo/quadrants (5): 4015703.02
    test 676 distanceTo/quadrants (5): 4015703.02
    test 677 distanceTo/quadrants (5): 4015703.02
    test 678 distanceTo/quadrants (5): 4015703.02
    test 679 distanceTo/quadrants (5): 4015703.02
    test 680 distanceTo/quadrants (5): 4015703.02
    test 681 distanceTo/quadrants (5): 4015703.02
    test 682 distanceTo/quadrants (5): 4015703.02

    36 of 682 testEllipsoidal.py tests (5.3%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 1.442 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEllipsoidalGeodTest.py

    testing testEllipsoidalGeodTest.py 19.04.08 (module pygeodesy.ellipsoidalVincenty 20.10.04)
    test 1 line 1 lat: -48.164271
    test 2 line 1 lon: 5.762345
    test 3 line 1 fb: 175.334308
    test 4 line 2 lat: -23.186513
    test 5 line 2 lon: 68.567247
    test 6 line 2 fb: 154.287114
    test 7 line 3 lat: 53.997072
    test 8 line 3 lon: 44.520619
    test 9 line 3 fb: 52.159487
    test 10 line 4 lat: -49.416672
    test 11 line 4 lon: 166.828083
    test 12 line 4 fb: 22.033031
    test 13 line 5 lat: -60.405136
    test 14 line 5 lon: 110.581140
    test 15 line 5 fb: 75.518296
    test 16 line 6 lat: -11.212600
    test 17 line 6 lon: 144.177077
    test 18 line 6 fb: 133.027766
    test 19 line 7 lat: -6.529067
    test 20 line 7 lon: 2.895924
    test 21 line 7 fb: 178.740350
    test 22 line 8 lat: -8.855512
    test 23 line 8 lon: 112.749196
    test 24 line 8 fb: 119.512004
    test 25 line 9 lat: 29.866967
    test 26 line 9 lon: 171.726893
    test 27 line 9 fb: 171.662245
    test 28 line 10 lat: -29.238404
    test 29 line 10 lon: 133.459814
    test 30 line 10 fb: 69.814124
    test 31 line 11 lat: 55.600487
    test 32 line 11 lon: 75.128743
    test 33 line 11 fb: 153.896689
    test 34 line 12 lat: -22.858435
    test 35 line 12 lon: 67.207513
    test 36 line 12 fb: 142.939529
    test 37 line 13 lat: -32.634475
    test 38 line 13 lon: 22.238523
    test 39 line 13 fb: 172.112993
    test 40 line 14 lat: 62.224985
    test 41 line 14 lon: 47.119133
    test 42 line 14 fb: 54.318105
    test 43 line 15 lat: 33.069613
    test 44 line 15 lon: 5.796996
    test 45 line 15 fb: 17.403845
    test 46 line 16 lat: 53.760900
    test 47 line 16 lon: 119.204306
    test 48 line 16 fb: 141.069793
    test 49 line 17 lat: -3.225632
    test 50 line 17 lon: 103.742354
    test 51 line 17 fb: 127.880328
    test 52 line 18 lat: 47.108712
    test 53 line 18 lon: 99.934107
    test 54 line 18 fb: 104.103491
    test 55 line 19 lat: 5.399363
    test 56 line 19 lon: 135.250064
    test 57 line 19 fb: 102.177018
    test 58 line 20 lat: -58.669225
    test 59 line 20 lon: 54.875015
    test 60 line 20 fb: 131.345308
    test 61 line 21 lat: 9.184229
    test 62 line 21 lon: 151.302637
    test 63 line 21 fb: 128.175105
    test 64 line 22 lat: 53.467940
    test 65 line 22 lon: 67.724192
    test 66 line 22 fb: 78.863492
    test 67 line 23 lat: 39.699456
    test 68 line 23 lon: 67.156325
    test 69 line 23 fb: 85.276830
    test 70 line 24 lat: 70.942602
    test 71 line 24 lon: 17.379214
    test 72 line 24 fb: 21.869008
    test 73 line 25 lat: 69.633349
    test 74 line 25 lon: 110.601933
    test 75 line 25 fb: 138.575193
    test 76 line 26 lat: 16.190815
    test 77 line 26 lon: 87.606993
    test 78 line 26 fb: 131.929410
    test 79 line 27 lat: 54.774905
    test 80 line 27 lon: 52.952507
    test 81 line 27 fb: 85.904051
    test 82 line 28 lat: -62.008569
    test 83 line 28 lon: 172.274877
    test 84 line 28 fb: 21.992601
    test 85 line 29 lat: 27.303730
    test 86 line 29 lon: 159.184451
    test 87 line 29 fb: 150.697920
    test 88 line 30 lat: 31.979897
    test 89 line 30 lon: 55.946759
    test 90 line 30 fb: 87.398293
    test 91 line 31 lat: 49.991468
    test 92 line 31 lon: 133.962411
    test 93 line 31 fb: 142.016540
    test 94 line 32 lat: 2.818559
    test 95 line 32 lon: 7.234774
    test 96 line 32 fb: 168.804029
    test 97 line 33 lat: -38.118071
    test 98 line 33 lon: 93.395971
    test 99 line 33 fb: 117.017377
    test 100 line 34 lat: 3.377824
    test 101 line 34 lon: 65.294746
    test 102 line 34 fb: 138.982544
    test 103 line 35 lat: 4.631157
    test 104 line 35 lon: 84.335045
    test 105 line 35 fb: 132.120804
    test 106 line 36 lat: 38.952215
    test 107 line 36 lon: 133.416463
    test 108 line 36 fb: 160.690586
    test 109 line 37 lat: -39.013297
    test 110 line 37 lon: 160.302849
    test 111 line 37 fb: 115.363715
    test 112 line 38 lat: -48.456093
    test 113 line 38 lon: 38.613822
    test 114 line 38 fb: 137.651668
    test 115 line 39 lat: -13.861956
    test 116 line 39 lon: 74.250572
    test 117 line 39 fb: 143.968262
    test 118 line 40 lat: 25.289202
    test 119 line 40 lon: 47.063579
    test 120 line 40 fb: 78.672533
    test 121 line 41 lat: 49.498121
    test 122 line 41 lon: 131.993365
    test 123 line 41 fb: 157.425605
    test 124 line 42 lat: -2.104242
    test 125 line 42 lon: 56.532079
    test 126 line 42 fb: 129.406955
    test 127 line 43 lat: -39.997315
    test 128 line 43 lon: 49.004259
    test 129 line 43 fb: 135.432995
    test 130 line 44 lat: 9.333272
    test 131 line 44 lon: 98.670857
    test 132 line 44 fb: 120.694280
    test 133 line 45 lat: 38.653646
    test 134 line 45 lon: 136.060468
    test 135 line 45 fb: 152.489416
    test 136 line 46 lat: -4.564995
    test 137 line 46 lon: 166.894968
    test 138 line 46 fb: 127.520036
    test 139 line 47 lat: -38.522500
    test 140 line 47 lon: 178.679307
    test 141 line 47 fb: 176.468685
    test 142 line 48 lat: 45.529796
    test 143 line 48 lon: 145.048738
    test 144 line 48 fb: 160.706227
    test 145 line 49 lat: -2.968925
    test 146 line 49 lon: 5.044083
    test 147 line 49 fb: 174.913528
    test 148 line 50 lat: 1.618184
    test 149 line 50 lon: 163.262955
    test 150 line 50 fb: 161.097730
    test 151 line 51 lat: 25.179740
    test 152 line 51 lon: 107.504992
    test 153 line 51 fb: 154.055552
    test 154 line 52 lat: 57.391251
    test 155 line 52 lon: 89.082271
    test 156 line 52 fb: 101.276115
    test 157 line 53 lat: -11.470673
    test 158 line 53 lon: 48.285095
    test 159 line 53 fb: 148.389696
    test 160 line 54 lat: 27.356639
    test 161 line 54 lon: 84.391682
    test 162 line 54 fb: 104.661818
    test 163 line 55 lat: -40.533598
    test 164 line 55 lon: 103.488381
    test 165 line 55 fb: 132.398259
    test 166 line 56 lat: 52.337949
    test 167 line 56 lon: 149.908279
    test 168 line 56 fb: 162.333474
    test 169 line 57 lat: -58.474076
    test 170 line 57 lon: 78.718606
    test 171 line 57 fb: 117.457565
    test 172 line 58 lat: -35.840568
    test 173 line 58 lon: 4.157534
    test 174 line 58 fb: 174.451067
    test 175 line 59 lat: 15.629163
    test 176 line 59 lon: 102.677417
    test 177 line 59 fb: 103.482103
    test 178 line 60 lat: -1.256180
    test 179 line 60 lon: 133.625255
    test 180 line 60 fb: 104.470489
    test 181 line 61 lat: -40.558253
    test 182 line 61 lon: 112.897054
    test 183 line 61 fb: 90.226134
    test 184 line 62 lat: 86.193596
    test 185 line 62 lon: 116.956880
    test 186 line 62 fb: 117.618329
    test 187 line 63 lat: 6.874181
    test 188 line 63 lon: 54.891199
    test 189 line 63 fb: 90.820790
    test 190 line 64 lat: -2.554657
    test 191 line 64 lon: 71.539549
    test 192 line 64 fb: 105.722921
    test 193 line 65 lat: 1.329645
    test 194 line 65 lon: 138.134969
    test 195 line 65 fb: 150.465118
    test 196 line 66 lat: -44.026427
    test 197 line 66 lon: 121.367591
    test 198 line 66 fb: 123.975227
    test 199 line 67 lat: -3.399081
    test 200 line 67 lon: 138.655764
    test 201 line 67 fb: 98.994343
    test 202 line 68 lat: -26.776985
    test 203 line 68 lon: 67.020055
    test 204 line 68 fb: 119.394665
    test 205 line 69 lat: 52.057239
    test 206 line 69 lon: 151.887270
    test 207 line 69 fb: 161.537826
    test 208 line 70 lat: 3.784724
    test 209 line 70 lon: 102.727745
    test 210 line 70 fb: 116.453155
    test 211 line 71 lat: -40.409299
    test 212 line 71 lon: 86.033195
    test 213 line 71 fb: 121.080298
    test 214 line 72 lat: 73.013460
    test 215 line 72 lon: 76.188125
    test 216 line 72 fb: 78.877769
    test 217 line 73 lat: 52.870132
    test 218 line 73 lon: 51.020900
    test 219 line 73 fb: 102.113351
    test 220 line 74 lat: 28.909632
    test 221 line 74 lon: 17.071526
    test 222 line 74 fb: 103.660711
    test 223 line 75 lat: -58.257855
    test 224 line 75 lon: 15.812862
    test 225 line 75 fb: 169.606337
    test 226 line 76 lat: -58.869445
    test 227 line 76 lon: 132.036795
    test 228 line 76 fb: 53.946549
    test 229 line 77 lat: -45.547043
    test 230 line 77 lon: 77.540664
    test 231 line 77 fb: 126.917177
    test 232 line 78 lat: 45.046385
    test 233 line 78 lon: 149.382429
    test 234 line 78 fb: 162.117474
    test 235 line 79 lat: -74.853338
    test 236 line 79 lon: 96.072097
    test 237 line 79 fb: 85.425493
    test 238 line 80 lat: -13.205775
    test 239 line 80 lon: 57.532285
    test 240 line 80 fb: 122.358040
    test 241 line 81 lat: -5.135864
    test 242 line 81 lon: 115.048833
    test 243 line 81 fb: 93.168400
    test 244 line 82 lat: 13.355453
    test 245 line 82 lon: 19.253946
    test 246 line 82 fb: 143.568719
    test 247 line 83 lat: 0.766426
    test 248 line 83 lon: 147.485817
    test 249 line 83 fb: 144.982274
    test 250 line 84 lat: 10.228416
    test 251 line 84 lon: 159.204118
    test 252 line 84 fb: 173.111973
    test 253 line 85 lat: 73.178089
    test 254 line 85 lon: 131.762700
    test 255 line 85 fb: 135.271161
    test 256 line 86 lat: -16.908717
    test 257 line 86 lon: 149.240494
    test 258 line 86 fb: 90.725082
    test 259 line 87 lat: -23.440025
    test 260 line 87 lon: 98.819595
    test 261 line 87 fb: 154.388320
    test 262 line 88 lat: -51.344465
    test 263 line 88 lon: 54.299399
    test 264 line 88 fb: 139.903236
    test 265 line 89 lat: 33.922320
    test 266 line 89 lon: 143.463070
    test 267 line 89 fb: 132.788230
    test 268 line 90 lat: -83.333068
    test 269 line 90 lon: 177.611925
    test 270 line 90 fb: 2.633769
    test 271 line 91 lat: 20.587333
    test 272 line 91 lon: 164.201962
    test 273 line 91 fb: 166.991083
    test 274 line 92 lat: 52.612815
    test 275 line 92 lon: 110.766184
    test 276 line 92 fb: 168.281486
    test 277 line 93 lat: -41.681373
    test 278 line 93 lon: 82.150183
    test 279 line 93 fb: 107.012959
    test 280 line 94 lat: 27.082807
    test 281 line 94 lon: 171.332531
    test 282 line 94 fb: 174.934340
    test 283 line 95 lat: 57.992299
    test 284 line 95 lon: 15.128357
    test 285 line 95 fb: 62.342982
    test 286 line 96 lat: -10.526000
    test 287 line 96 lon: 33.778702
    test 288 line 96 fb: 165.687804
    test 289 line 97 lat: 25.802395
    test 290 line 97 lon: 98.502531
    test 291 line 97 fb: 97.837271
    test 292 line 98 lat: 47.163255
    test 293 line 98 lon: 156.720176
    test 294 line 98 fb: 160.291022
    test 295 line 99 lat: 47.932063
    test 296 line 99 lon: 35.094714
    test 297 line 99 fb: 137.545065
    test 298 line 100 lat: -60.204340
    test 299 line 100 lon: 117.726218
    test 300 line 100 fb: 72.585011
    test 301 line 101 lat: 35.247411
    test 302 line 101 lon: 59.471562
    test 303 line 101 fb: 81.179468
    test 304 line 102 lat: 19.218268
    test 305 line 102 lon: 165.507915
    test 306 line 102 fb: 167.452074
    test 307 line 103 lat: 55.428809
    test 308 line 103 lon: 121.956541
    test 309 line 103 fb: 154.501481
    test 310 line 104 lat: 49.294374
    test 311 line 104 lon: 119.661420
    test 312 line 104 fb: 157.209489
    test 313 line 105 lat: -32.534872
    test 314 line 105 lon: 152.280610
    test 315 line 105 fb: 45.281812
    test 316 line 106 lat: -1.097899
    test 317 line 106 lon: 104.697360
    test 318 line 106 fb: 126.298489
    test 319 line 107 lat: -18.034366
    test 320 line 107 lon: 28.460388
    test 321 line 107 fb: 129.520364
    test 322 line 108 lat: 76.310833
    test 323 line 108 lon: 80.110525
    test 324 line 108 fb: 106.655922
    test 325 line 109 lat: 39.838034
    test 326 line 109 lon: 42.989610
    test 327 line 109 fb: 69.695281
    test 328 line 110 lat: -56.710166
    test 329 line 110 lon: 125.242287
    test 330 line 110 fb: 60.118756
    test 331 line 111 lat: 55.796062
    test 332 line 111 lon: 59.736599
    test 333 line 111 fb: 73.536728
    test 334 line 112 lat: -36.553675
    test 335 line 112 lon: 38.656806
    test 336 line 112 fb: 134.414837
    test 337 line 113 lat: -36.798456
    test 338 line 113 lon: 163.588375
    test 339 line 113 fb: 147.324204
    test 340 line 114 lat: -15.952937
    test 341 line 114 lon: 55.126807
    test 342 line 114 fb: 134.743426
    test 343 line 115 lat: -34.573087
    test 344 line 115 lon: 69.304064
    test 345 line 115 fb: 111.515973
    test 346 line 116 lat: 26.643499
    test 347 line 116 lon: 1.500481
    test 348 line 116 fb: 7.958966
    test 349 line 117 lat: 60.891878
    test 350 line 117 lon: 91.543410
    test 351 line 117 fb: 92.273095
    test 352 line 118 lat: 64.148187
    test 353 line 118 lon: 136.552579
    test 354 line 118 fb: 147.193229
    test 355 line 119 lat: 62.311678
    test 356 line 119 lon: 39.238630
    test 357 line 119 fb: 53.785893
    test 358 line 120 lat: 27.239733
    test 359 line 120 lon: 136.649227
    test 360 line 120 fb: 162.935700
    test 361 line 121 lat: 6.562844
    test 362 line 121 lon: 170.159007
    test 363 line 121 fb: 174.851345
    test 364 line 122 lat: -29.537259
    test 365 line 122 lon: 105.350044
    test 366 line 122 fb: 141.393876
    test 367 line 123 lat: -66.447700
    test 368 line 123 lon: 83.741961
    test 369 line 123 fb: 129.422490
    test 370 line 124 lat: 56.926818
    test 371 line 124 lon: 20.197117
    test 372 line 124 fb: 37.960006
    test 373 line 125 lat: 55.018266
    test 374 line 125 lon: 83.735441
    test 375 line 125 fb: 130.766515
    test 376 line 126 lat: -78.131054
    test 377 line 126 lon: 56.098176
    test 378 line 126 fb: 127.132203
    test 379 line 127 lat: -18.223027
    test 380 line 127 lon: 86.221345
    test 381 line 127 fb: 114.875019
    test 382 line 128 lat: -16.100413
    test 383 line 128 lon: 54.195260
    test 384 line 128 fb: 126.748474
    test 385 line 129 lat: -15.192944
    test 386 line 129 lon: 85.057605
    test 387 line 129 fb: 133.468781
    test 388 line 130 lat: -1.279757
    test 389 line 130 lon: 93.430943
    test 390 line 130 fb: 128.545662
    test 391 line 131 lat: -29.465713
    test 392 line 131 lon: 79.050046
    test 393 line 131 fb: 109.482097
    test 394 line 132 lat: 31.819596
    test 395 line 132 lon: 88.251997
    test 396 line 132 fb: 91.173935
    test 397 line 133 lat: -63.260477
    test 398 line 133 lon: 96.535465
    test 399 line 133 fb: 84.208873
    test 400 line 134 lat: 12.908849
    test 401 line 134 lon: 116.734308
    test 402 line 134 fb: 110.313866
    test 403 line 135 lat: -73.345839
    test 404 line 135 lon: 99.753937
    test 405 line 135 fb: 89.074642
    test 406 line 136 lat: -58.777033
    test 407 line 136 lon: 161.963990
    test 408 line 136 fb: 21.998889
    test 409 line 137 lat: 5.093069
    test 410 line 137 lon: 53.687921
    test 411 line 137 fb: 124.015842
    test 412 line 138 lat: 35.659489
    test 413 line 138 lon: 111.729315
    test 414 line 138 fb: 133.697281
    test 415 line 139 lat: -24.330784
    test 416 line 139 lon: 71.666568
    test 417 line 139 fb: 106.278062
    test 418 line 140 lat: -46.218742
    test 419 line 140 lon: 91.580078
    test 420 line 140 fb: 106.279111
    test 421 line 141 lat: 50.143353
    test 422 line 141 lon: 101.322503
    test 423 line 141 fb: 154.314496
    test 424 line 142 lat: -16.604376
    test 425 line 142 lon: 134.279201
    test 426 line 142 fb: 106.895990
    test 427 line 143 lat: 54.031290
    test 428 line 143 lon: 144.862702
    test 429 line 143 fb: 152.937010
    test 430 line 144 lat: 0.616911
    test 431 line 144 lon: 110.974662
    test 432 line 144 fb: 115.206118
    test 433 line 145 lat: -6.243779
    test 434 line 145 lon: 175.658895
    test 435 line 145 fb: 177.520147
    test 436 line 146 lat: -70.416699
    test 437 line 146 lon: 169.642468
    test 438 line 146 fb: 11.978943
    test 439 line 147 lat: 19.558617
    test 440 line 147 lon: 88.645709
    test 441 line 147 fb: 113.578814
    test 442 line 148 lat: -23.555114
    test 443 line 148 lon: 162.457529
    test 444 line 148 fb: 147.104331
    test 445 line 149 lat: -51.275738
    test 446 line 149 lon: 103.747943
    test 447 line 149 fb: 115.235374
    test 448 line 150 lat: 25.374602
    test 449 line 150 lon: 143.135783
    test 450 line 150 fb: 126.548735
    test 451 line 151 lat: 23.967825
    test 452 line 151 lon: 153.611116
    test 453 line 151 fb: 149.714116
    test 454 line 152 lat: -22.787507
    test 455 line 152 lon: 111.258647
    test 456 line 152 fb: 86.335100
    test 457 line 153 lat: -59.789842
    test 458 line 153 lon: 114.054983
    test 459 line 153 fb: 75.612605
    test 460 line 154 lat: -2.802505
    test 461 line 154 lon: 126.245955
    test 462 line 154 fb: 150.100576
    test 463 line 155 lat: 35.735653
    test 464 line 155 lon: 102.768725
    test 465 line 155 fb: 99.024702
    test 466 line 156 lat: 15.906682
    test 467 line 156 lon: 117.446654
    test 468 line 156 fb: 130.449965
    test 469 line 157 lat: -54.375988
    test 470 line 157 lon: 33.243363
    test 471 line 157 fb: 144.361175
    test 472 line 158 lat: 3.588251
    test 473 line 158 lon: 156.659583
    test 474 line 158 fb: 112.153293
    test 475 line 159 lat: -51.719977
    test 476 line 159 lon: 134.141061
    test 477 line 159 fb: 129.170451
    test 478 line 160 lat: 22.935153
    test 479 line 160 lon: 109.461291
    test 480 line 160 fb: 120.676556
    test 481 line 161 lat: -5.314690
    test 482 line 161 lon: 70.995225
    test 483 line 161 fb: 129.681273
    test 484 line 162 lat: 49.147134
    test 485 line 162 lon: 16.182514
    test 486 line 162 fb: 38.926644
    test 487 line 163 lat: -55.079363
    test 488 line 163 lon: 93.170898
    test 489 line 163 fb: 97.017492
    test 490 line 164 lat: 26.410771
    test 491 line 164 lon: 109.934003
    test 492 line 164 fb: 103.660846
    test 493 line 165 lat: -2.539670
    test 494 line 165 lon: 138.682325
    test 495 line 165 fb: 100.016568
    test 496 line 166 lat: 10.563299
    test 497 line 166 lon: 50.532119
    test 498 line 166 fb: 126.356066
    test 499 line 167 lat: 51.443871
    test 500 line 167 lon: 88.799162
    test 501 line 167 fb: 145.239198
    test 502 line 168 lat: -80.240756
    test 503 line 168 lon: 170.591261
    test 504 line 168 fb: 19.402427
    test 505 line 169 lat: 51.976040
    test 506 line 169 lon: 165.045244
    test 507 line 169 fb: 167.962110
    test 508 line 170 lat: 29.365655
    test 509 line 170 lon: 91.354349
    test 510 line 170 fb: 135.101279
    test 511 line 171 lat: 61.745486
    test 512 line 171 lon: 142.333199
    test 513 line 171 fb: 139.666209
    test 514 line 172 lat: 13.414523
    test 515 line 172 lon: 39.322993
    test 516 line 172 fb: 144.276516
    test 517 line 173 lat: -49.831353
    test 518 line 173 lon: 72.426738
    test 519 line 173 fb: 126.251620
    test 520 line 174 lat: 1.822589
    test 521 line 174 lon: 53.589208
    test 522 line 174 fb: 97.925176
    test 523 line 175 lat: -7.987194
    test 524 line 175 lon: 49.318809
    test 525 line 175 fb: 128.386595
    test 526 line 176 lat: -56.807375
    test 527 line 176 lon: 4.521802
    test 528 line 176 fb: 176.806063
    test 529 line 177 lat: -25.969834
    test 530 line 177 lon: 64.903749
    test 531 line 177 fb: 124.103844
    test 532 line 178 lat: 32.807360
    test 533 line 178 lon: 65.107962
    test 534 line 178 fb: 124.577990
    test 535 line 179 lat: -21.552138
    test 536 line 179 lon: 102.466022
    test 537 line 179 fb: 109.640197
    test 538 line 180 lat: -26.271741
    test 539 line 180 lon: 158.321581
    test 540 line 180 fb: 165.993649
    test 541 line 181 lat: 41.023069
    test 542 line 181 lon: 155.562542
    test 543 line 181 fb: 153.407414
    test 544 line 182 lat: 16.445471
    test 545 line 182 lon: 165.261461
    test 546 line 182 fb: 165.424806
    test 547 line 183 lat: -3.222107
    test 548 line 183 lon: 84.129727
    test 549 line 183 fb: 154.083851
    test 550 line 184 lat: 7.811710
    test 551 line 184 lon: 123.143308
    test 552 line 184 fb: 123.998106
    test 553 line 185 lat: -45.235922
    test 554 line 185 lon: 129.419283
    test 555 line 185 fb: 91.493406
    test 556 line 186 lat: -43.047563
    test 557 line 186 lon: 121.565541
    test 558 line 186 fb: 99.850543
    test 559 line 187 lat: -22.881002
    test 560 line 187 lon: 159.765030
    test 561 line 187 fb: 60.474878
    test 562 line 188 lat: -15.011946
    test 563 line 188 lon: 55.594746
    test 564 line 188 fb: 121.838839
    test 565 line 189 lat: -29.011142
    test 566 line 189 lon: 0.856639
    test 567 line 189 fb: 178.744943
    test 568 line 190 lat: -0.353001
    test 569 line 190 lon: 48.401255
    test 570 line 190 fb: 95.612551
    test 571 line 191 lat: 18.843341
    test 572 line 191 lon: 105.405456
    test 573 line 191 fb: 145.215722
    test 574 line 192 lat: 19.672225
    test 575 line 192 lon: 64.132980
    test 576 line 192 fb: 131.894863
    test 577 line 193 lat: -44.315074
    test 578 line 193 lon: 132.711860
    test 579 line 193 fb: 57.236875
    test 580 line 194 lat: 71.956294
    test 581 line 194 lon: 23.707587
    test 582 line 194 fb: 28.235947
    test 583 line 195 lat: -1.372652
    test 584 line 195 lon: 37.704231
    test 585 line 195 fb: 92.737862
    test 586 line 196 lat: 32.377148
    test 587 line 196 lon: 148.638709
    test 588 line 196 fb: 164.415210
    test 589 line 197 lat: 77.876832
    test 590 line 197 lon: 86.074591
    test 591 line 197 fb: 93.017705
    test 592 line 198 lat: -7.405195
    test 593 line 198 lon: 11.962469
    test 594 line 198 fb: 123.788484
    test 595 line 199 lat: -75.001311
    test 596 line 199 lon: 173.334144
    test 597 line 199 fb: 8.916523
    test 598 line 200 lat: -33.145967
    test 599 line 200 lon: 32.349241
    test 600 line 200 fb: 154.035798
    test 601 line 201 lat: 32.938605
    test 602 line 201 lon: 98.042857
    test 603 line 201 fb: 124.954750
    test 604 line 202 lat: 18.924315
    test 605 line 202 lon: 20.712136
    test 606 line 202 fb: 118.058457
    test 607 line 203 lat: 34.281652
    test 608 line 203 lon: 66.815398
    test 609 line 203 fb: 147.693080
    test 610 line 204 lat: -56.830635
    test 611 line 204 lon: 2.137046
    test 612 line 204 fb: 178.041562
    test 613 line 205 lat: -68.481893
    test 614 line 205 lon: 107.036720
    test 615 line 205 fb: 152.384477
    test 616 line 206 lat: -22.502042
    test 617 line 206 lon: 171.827566
    test 618 line 206 fb: 158.834328
    test 619 line 207 lat: -4.504199
    test 620 line 207 lon: 138.544338
    test 621 line 207 fb: 123.633526
    test 622 line 208 lat: -9.226343
    test 623 line 208 lon: 120.310050
    test 624 line 208 fb: 142.789186
    test 625 line 209 lat: -51.684044
    test 626 line 209 lon: 137.764140
    test 627 line 209 fb: 56.844891
    test 628 line 210 lat: 19.467357
    test 629 line 210 lon: 93.870087
    test 630 line 210 fb: 129.125491
    test 631 line 211 lat: 33.594608
    test 632 line 211 lon: 58.324143
    test 633 line 211 fb: 101.975372
    test 634 line 212 lat: -1.184701
    test 635 line 212 lon: 92.834285
    test 636 line 212 fb: 134.201097
    test 637 line 213 lat: 5.878639
    test 638 line 213 lon: 90.756173
    test 639 line 213 fb: 156.936699
    test 640 line 214 lat: 47.611646
    test 641 line 214 lon: 131.482218
    test 642 line 214 fb: 152.077667
    test 643 line 215 lat: 13.906234
    test 644 line 215 lon: 115.526238
    test 645 line 215 fb: 130.769627
    test 646 line 216 lat: 3.675485
    test 647 line 216 lon: 80.781862
    test 648 line 216 fb: 94.188426
    test 649 line 217 lat: 68.665600
    test 650 line 217 lon: 21.503123
    test 651 line 217 fb: 107.667810
    test 652 line 218 lat: -60.791732
    test 653 line 218 lon: 82.476063
    test 654 line 218 fb: 117.665953
    test 655 line 219 lat: -33.122376
    test 656 line 219 lon: 89.871476
    test 657 line 219 fb: 124.068098
    test 658 line 220 lat: -34.085934
    test 659 line 220 lon: 117.886549
    test 660 line 220 fb: 93.366647
    test 661 line 221 lat: -43.746811
    test 662 line 221 lon: 107.199939
    test 663 line 221 fb: 101.218435
    test 664 line 222 lat: -44.514857
    test 665 line 222 lon: 19.560361
    test 666 line 222 fb: 166.449925
    test 667 line 223 lat: -18.049262
    test 668 line 223 lon: 42.099193
    test 669 line 223 fb: 158.127141
    test 670 line 224 lat: 9.832902
    test 671 line 224 lon: 51.448057
    test 672 line 224 fb: 114.348703
    test 673 line 225 lat: -57.516443
    test 674 line 225 lon: 64.700933
    test 675 line 225 fb: 137.459801
    test 676 line 226 lat: -23.072600
    test 677 line 226 lon: 95.392602
    test 678 line 226 fb: 140.119143
    test 679 line 227 lat: -45.117254
    test 680 line 227 lon: 97.361647
    test 681 line 227 fb: 97.339041
    test 682 line 228 lat: -11.277328
    test 683 line 228 lon: 19.602358
    test 684 line 228 fb: 156.779730
    test 685 line 229 lat: -4.823524
    test 686 line 229 lon: 164.626842
    test 687 line 229 fb: 151.314797
    test 688 line 230 lat: 36.317088
    test 689 line 230 lon: 89.326155
    test 690 line 230 fb: 94.589052
    test 691 line 231 lat: 3.975433
    test 692 line 231 lon: 105.460359
    test 693 line 231 fb: 126.257925
    test 694 line 232 lat: 28.815984
    test 695 line 232 lon: 89.807394
    test 696 line 232 fb: 116.984375
    test 697 line 233 lat: 66.161717
    test 698 line 233 lon: 63.218655
    test 699 line 233 fb: 88.869959
    test 700 line 234 lat: 74.859972
    test 701 line 234 lon: 53.523361
    test 702 line 234 fb: 58.125008
    test 703 line 235 lat: -0.265481
    test 704 line 235 lon: 79.537677
    test 705 line 235 fb: 112.945830
    test 706 line 236 lat: -12.099598
    test 707 line 236 lon: 155.371356
    test 708 line 236 fb: 76.454292
    test 709 line 237 lat: -6.746465
    test 710 line 237 lon: 19.102484
    test 711 line 237 fb: 149.342236
    test 712 line 238 lat: 0.663830
    test 713 line 238 lon: 101.295721
    test 714 line 238 fb: 133.862626
    test 715 line 239 lat: -61.764624
    test 716 line 239 lon: 148.537522
    test 717 line 239 fb: 149.298772
    test 718 line 240 lat: 14.505122
    test 719 line 240 lon: 111.665519
    test 720 line 240 fb: 97.740222
    test 721 line 241 lat: -24.713205
    test 722 line 241 lon: 34.159384
    test 723 line 241 fb: 125.866132
    test 724 line 242 lat: 50.480262
    test 725 line 242 lon: 42.263850
    test 726 line 242 fb: 153.395659
    test 727 line 243 lat: 11.787247
    test 728 line 243 lon: 49.506460
    test 729 line 243 fb: 120.836778
    test 730 line 244 lat: -19.956674
    test 731 line 244 lon: 14.599479
    test 732 line 244 fb: 177.883855
    test 733 line 245 lat: 0.738566
    test 734 line 245 lon: 12.600972
    test 735 line 245 fb: 176.085445
    test 736 line 246 lat: 25.799128
    test 737 line 246 lon: 9.800259
    test 738 line 246 fb: 166.282764
    test 739 line 247 lat: -3.897277
    test 740 line 247 lon: 16.693319
    test 741 line 247 fb: 168.780736
    test 742 line 248 lat: 2.479585
    test 743 line 248 lon: 72.317321
    test 744 line 248 fb: 126.935932
    test 745 line 249 lat: -0.836621
    test 746 line 249 lon: 2.490193
    test 747 line 249 fb: 150.640498
    test 748 line 250 lat: -69.098227
    test 749 line 250 lon: 43.929874
    test 750 line 250 fb: 143.378404
    test 751 line 251 lat: 19.156121
    test 752 line 251 lon: 130.658473
    test 753 line 251 fb: 136.204475
    test 754 line 252 lat: 68.881949
    test 755 line 252 lon: 79.375865
    test 756 line 252 fb: 99.052732
    test 757 line 253 lat: -23.509016
    test 758 line 253 lon: 122.232226
    test 759 line 253 fb: 90.354604
    test 760 line 254 lat: -64.950636
    test 761 line 254 lon: 70.184354
    test 762 line 254 fb: 122.478937
    test 763 line 255 lat: 4.931109
    test 764 line 255 lon: 176.100221
    test 765 line 255 fb: 175.754221
    test 766 line 256 lat: -35.503236
    test 767 line 256 lon: 122.767107
    test 768 line 256 fb: 94.201020
    test 769 line 257 lat: 58.728016
    test 770 line 257 lon: 76.607531
    test 771 line 257 fb: 114.353509
    test 772 line 258 lat: 13.725793
    test 773 line 258 lon: 60.384503
    test 774 line 258 fb: 102.783242
    test 775 line 259 lat: 40.298524
    test 776 line 259 lon: 59.957993
    test 777 line 259 fb: 90.056366
    test 778 line 260 lat: 21.526222
    test 779 line 260 lon: 19.836420
    test 780 line 260 fb: 89.081274
    test 781 line 261 lat: -65.269872
    test 782 line 261 lon: 134.049515
    test 783 line 261 fb: 54.613515
    test 784 line 262 lat: -47.687068
    test 785 line 262 lon: 86.855941
    test 786 line 262 fb: 115.133532
    test 787 line 263 lat: -56.637273
    test 788 line 263 lon: 158.001121
    test 789 line 263 fb: 35.013276
    test 790 line 264 lat: 6.880772
    test 791 line 264 lon: 36.289125
    test 792 line 264 fb: 144.499557
    test 793 line 265 lat: 59.205527
    test 794 line 265 lon: 115.787268
    test 795 line 265 fb: 116.793619
    test 796 line 266 lat: 29.463206
    test 797 line 266 lon: 68.742710
    test 798 line 266 fb: 113.906069
    test 799 line 267 lat: 5.507960
    test 800 line 267 lon: 2.913367
    test 801 line 267 fb: 175.225892
    test 802 line 268 lat: 32.568215
    test 803 line 268 lon: 107.814340
    test 804 line 268 fb: 126.321687
    test 805 line 269 lat: 48.941036
    test 806 line 269 lon: 170.309380
    test 807 line 269 fb: 170.816057
    test 808 line 270 lat: 32.657811
    test 809 line 270 lon: 174.401372
    test 810 line 270 fb: 173.967029
    test 811 line 271 lat: -30.959342
    test 812 line 271 lon: 144.596945
    test 813 line 271 fb: 157.635539
    test 814 line 272 lat: 52.180060
    test 815 line 272 lon: 68.363538
    test 816 line 272 fb: 82.619820
    test 817 line 273 lat: -49.230655
    test 818 line 273 lon: 119.085123
    test 819 line 273 fb: 81.553785
    test 820 line 274 lat: 12.315309
    test 821 line 274 lon: 21.800337
    test 822 line 274 fb: 86.572317
    test 823 line 275 lat: 0.074875
    test 824 line 275 lon: 122.092567
    test 825 line 275 fb: 93.940324
    test 826 line 276 lat: -32.420609
    test 827 line 276 lon: 80.147417
    test 828 line 276 fb: 123.183256
    test 829 line 277 lat: 82.600418
    test 830 line 277 lon: 34.418367
    test 831 line 277 fb: 35.057122
    test 832 line 278 lat: 26.274633
    test 833 line 278 lon: 93.043032
    test 834 line 278 fb: 114.480069
    test 835 line 279 lat: 28.433986
    test 836 line 279 lon: 132.962042
    test 837 line 279 fb: 118.817242
    test 838 line 280 lat: 32.426459
    test 839 line 280 lon: 65.171889
    test 840 line 280 fb: 113.230923
    test 841 line 281 lat: 8.427284
    test 842 line 281 lon: 20.342496
    test 843 line 281 fb: 140.993359
    test 844 line 282 lat: -16.412702
    test 845 line 282 lon: 47.392542
    test 846 line 282 fb: 167.389705
    test 847 line 283 lat: -54.082376
    test 848 line 283 lon: 159.985466
    test 849 line 283 fb: 56.023710
    test 850 line 284 lat: 38.704319
    test 851 line 284 lon: 78.307551
    test 852 line 284 fb: 106.582126
    test 853 line 285 lat: 15.206275
    test 854 line 285 lon: 59.878378
    test 855 line 285 fb: 114.460428
    test 856 line 286 lat: -62.789550
    test 857 line 286 lon: 66.649185
    test 858 line 286 fb: 119.232672
    test 859 line 287 lat: 31.235252
    test 860 line 287 lon: 19.933468
    test 861 line 287 fb: 145.488470
    test 862 line 288 lat: 11.983236
    test 863 line 288 lon: 145.307369
    test 864 line 288 fb: 151.192641
    test 865 line 289 lat: 27.629694
    test 866 line 289 lon: 16.148459
    test 867 line 289 fb: 63.008012
    test 868 line 290 lat: 34.077784
    test 869 line 290 lon: 115.693210
    test 870 line 290 fb: 112.252264
    test 871 line 291 lat: 17.100340
    test 872 line 291 lon: 26.538643
    test 873 line 291 fb: 131.391925
    test 874 line 292 lat: -8.128040
    test 875 line 292 lon: 28.609615
    test 876 line 292 fb: 144.189095
    test 877 line 293 lat: 17.307082
    test 878 line 293 lon: 150.748550
    test 879 line 293 fb: 172.334611
    test 880 line 294 lat: 4.135230
    test 881 line 294 lon: 142.094814
    test 882 line 294 fb: 170.513214
    test 883 line 295 lat: -61.544041
    test 884 line 295 lon: 167.154866
    test 885 line 295 fb: 51.415676
    test 886 line 296 lat: 27.782466
    test 887 line 296 lon: 53.844550
    test 888 line 296 fb: 78.357665
    test 889 line 297 lat: -30.157337
    test 890 line 297 lon: 14.759636
    test 891 line 297 fb: 157.487063
    test 892 line 298 lat: -16.819268
    test 893 line 298 lon: 22.734618
    test 894 line 298 fb: 167.761663
    test 895 line 299 lat: 58.190743
    test 896 line 299 lon: 15.576363
    test 897 line 299 fb: 71.213972
    test 898 line 300 lat: 57.214981
    test 899 line 300 lon: 163.530752
    test 900 line 300 fb: 162.056064
    test 901 line 301 lat: 31.811818
    test 902 line 301 lon: 81.663494
    test 903 line 301 fb: 112.546404
    test 904 line 302 lat: -11.315727
    test 905 line 302 lon: 48.409490
    test 906 line 302 fb: 121.434574
    test 907 line 303 lat: 6.119956
    test 908 line 303 lon: 5.687908
    test 909 line 303 fb: 94.977171
    test 910 line 304 lat: -13.455263
    test 911 line 304 lon: 92.797729
    test 912 line 304 fb: 125.067595
    test 913 line 305 lat: -61.258454
    test 914 line 305 lon: 32.464613
    test 915 line 305 fb: 153.578300
    test 916 line 306 lat: 76.656194
    test 917 line 306 lon: 147.658262
    test 918 line 306 fb: 154.870277
    test 919 line 307 lat: 38.020470
    test 920 line 307 lon: 22.502210
    test 921 line 307 fb: 164.603876
    test 922 line 308 lat: -28.475186
    test 923 line 308 lon: 125.031589
    test 924 line 308 fb: 71.946314
    test 925 line 309 lat: 33.123700
    test 926 line 309 lon: 47.796870
    test 927 line 309 fb: 66.233041
    test 928 line 310 lat: 36.967606
    test 929 line 310 lon: 91.462107
    test 930 line 310 fb: 113.555931
    test 931 line 311 lat: -3.784112
    test 932 line 311 lon: 75.465096
    test 933 line 311 fb: 146.940895
    test 934 line 312 lat: 10.772454
    test 935 line 312 lon: 162.137695
    test 936 line 312 fb: 176.774643
    test 937 line 313 lat: 23.928740
    test 938 line 313 lon: 28.953169
    test 939 line 313 fb: 143.614710
    test 940 line 314 lat: 5.199377
    test 941 line 314 lon: 162.802668
    test 942 line 314 fb: 146.857520
    test 943 line 315 lat: 6.285334
    test 944 line 315 lon: 164.204548
    test 945 line 315 fb: 159.451359
    test 946 line 316 lat: -8.151874
    test 947 line 316 lon: 43.923539
    test 948 line 316 fb: 121.501273
    test 949 line 317 lat: 20.145480
    test 950 line 317 lon: 92.310645
    test 951 line 317 fb: 97.369333
    test 952 line 318 lat: 38.715579
    test 953 line 318 lon: 89.141427
    test 954 line 318 fb: 100.831087
    test 955 line 319 lat: -25.760685
    test 956 line 319 lon: 145.864001
    test 957 line 319 fb: 142.714674
    test 958 line 320 lat: 49.387283
    test 959 line 320 lon: 28.917044
    test 960 line 320 fb: 61.545235
    test 961 line 321 lat: 10.120685
    test 962 line 321 lon: 2.869738
    test 963 line 321 fb: 176.526916
    test 964 line 322 lat: 2.463216
    test 965 line 322 lon: 102.917600
    test 966 line 322 fb: 170.609004
    test 967 line 323 lat: 58.201294
    test 968 line 323 lon: 155.022079
    test 969 line 323 fb: 153.181269
    test 970 line 324 lat: 3.089608
    test 971 line 324 lon: 20.686800
    test 972 line 324 fb: 144.857820
    test 973 line 325 lat: 48.232274
    test 974 line 325 lon: 18.567244
    test 975 line 325 fb: 24.556438
    test 976 line 326 lat: 30.265261
    test 977 line 326 lon: 7.440738
    test 978 line 326 fb: 142.022972
    test 979 line 327 lat: -11.166197
    test 980 line 327 lon: 176.728934
    test 981 line 327 fb: 24.287273
    test 982 line 328 lat: 84.645539
    test 983 line 328 lon: 90.023922
    test 984 line 328 fb: 92.786262
    test 985 line 329 lat: 61.618717
    test 986 line 329 lon: 162.510959
    test 987 line 329 fb: 160.923940
    test 988 line 330 lat: 27.643242
    test 989 line 330 lon: 45.376215
    test 990 line 330 fb: 147.964522
    test 991 line 331 lat: 2.218750
    test 992 line 331 lon: 170.358342
    test 993 line 331 fb: 141.658474
    test 994 line 332 lat: 26.019142
    test 995 line 332 lon: 32.534760
    test 996 line 332 fb: 128.159784
    test 997 line 333 lat: 10.049636
    test 998 line 333 lon: 72.205347
    test 999 line 333 fb: 143.602160
    test 1000 line 334 lat: -31.030497
    test 1001 line 334 lon: 91.539195
    test 1002 line 334 fb: 109.891398
    test 1003 line 335 lat: 30.113796
    test 1004 line 335 lon: 109.096982
    test 1005 line 335 fb: 146.779343
    test 1006 line 336 lat: -73.967996
    test 1007 line 336 lon: 65.944243
    test 1008 line 336 fb: 120.592999
    test 1009 line 337 lat: 52.211150
    test 1010 line 337 lon: 168.054185
    test 1011 line 337 fb: 172.425992
    test 1012 line 338 lat: -64.497146
    test 1013 line 338 lon: 72.073419
    test 1014 line 338 fb: 114.249129
    test 1015 line 339 lat: -25.711399
    test 1016 line 339 lon: 6.036423
    test 1017 line 339 fb: 169.464098
    test 1018 line 340 lat: 33.904613
    test 1019 line 340 lon: 30.989094
    test 1020 line 340 fb: 124.896016
    test 1021 line 341 lat: -25.053080
    test 1022 line 341 lon: 137.078639
    test 1023 line 341 fb: 115.960750
    test 1024 line 342 lat: 10.298031
    test 1025 line 342 lon: 27.737374
    test 1026 line 342 fb: 142.265457
    test 1027 line 343 lat: -0.738692
    test 1028 line 343 lon: 150.933627
    test 1029 line 343 fb: 174.004688
    test 1030 line 344 lat: 50.619289
    test 1031 line 344 lon: 67.178203
    test 1032 line 344 fb: 105.177353
    test 1033 line 345 lat: -2.127739
    test 1034 line 345 lon: 38.604245
    test 1035 line 345 fb: 118.657849
    test 1036 line 346 lat: 37.188367
    test 1037 line 346 lon: 90.865255
    test 1038 line 346 fb: 104.826548
    test 1039 line 347 lat: 46.019257
    test 1040 line 347 lon: 20.402591
    test 1041 line 347 fb: 31.068588
    test 1042 line 348 lat: 9.023356
    test 1043 line 348 lon: 106.678645
    test 1044 line 348 fb: 141.375490
    test 1045 line 349 lat: -1.321473
    test 1046 line 349 lon: 67.418879
    test 1047 line 349 fb: 105.590913
    test 1048 line 350 lat: 7.459339
    test 1049 line 350 lon: 30.150648
    test 1050 line 350 fb: 109.667752
    test 1051 line 351 lat: 16.344755
    test 1052 line 351 lon: 146.829160
    test 1053 line 351 fb: 128.666192
    test 1054 line 352 lat: -55.785670
    test 1055 line 352 lon: 158.086173
    test 1056 line 352 fb: 33.903277
    test 1057 line 353 lat: -74.409604
    test 1058 line 353 lon: 111.280935
    test 1059 line 353 fb: 78.510830
    test 1060 line 354 lat: 9.922204
    test 1061 line 354 lon: 138.538334
    test 1062 line 354 fb: 125.268473
    test 1063 line 355 lat: -27.082389
    test 1064 line 355 lon: 91.425844
    test 1065 line 355 fb: 153.267616
    test 1066 line 356 lat: 14.627508
    test 1067 line 356 lon: 74.629605
    test 1068 line 356 fb: 159.825211
    test 1069 line 357 lat: 46.941087
    test 1070 line 357 lon: 18.833436
    test 1071 line 357 fb: 63.924917
    test 1072 line 358 lat: 42.371666
    test 1073 line 358 lon: 126.270074
    test 1074 line 358 fb: 117.352107
    test 1075 line 359 lat: 60.888684
    test 1076 line 359 lon: 106.363657
    test 1077 line 359 fb: 108.973271
    test 1078 line 360 lat: 53.972090
    test 1079 line 360 lon: 136.000658
    test 1080 line 360 fb: 138.361589
    test 1081 line 361 lat: 47.850867
    test 1082 line 361 lon: 25.277934
    test 1083 line 361 fb: 71.284668
    test 1084 line 362 lat: 64.280614
    test 1085 line 362 lon: 16.447697
    test 1086 line 362 fb: 35.692750
    test 1087 line 363 lat: -3.339044
    test 1088 line 363 lon: 91.646260
    test 1089 line 363 fb: 95.928001
    test 1090 line 364 lat: -46.029875
    test 1091 line 364 lon: 30.599197
    test 1092 line 364 fb: 146.810525
    test 1093 line 365 lat: 25.605076
    test 1094 line 365 lon: 14.382003
    test 1095 line 365 fb: 116.566847
    test 1096 line 366 lat: -15.052413
    test 1097 line 366 lon: 150.673460
    test 1098 line 366 fb: 64.906721
    test 1099 line 367 lat: -24.631882
    test 1100 line 367 lon: 170.403348
    test 1101 line 367 fb: 38.497784
    test 1102 line 368 lat: 84.347730
    test 1103 line 368 lon: 37.352130
    test 1104 line 368 fb: 38.599794
    test 1105 line 369 lat: 11.680773
    test 1106 line 369 lon: 170.552617
    test 1107 line 369 fb: 174.460436
    test 1108 line 370 lat: -4.129058
    test 1109 line 370 lon: 136.743627
    test 1110 line 370 fb: 142.147604
    test 1111 line 371 lat: 22.191782
    test 1112 line 371 lon: 164.962392
    test 1113 line 371 fb: 163.266967
    test 1114 line 372 lat: -20.517212
    test 1115 line 372 lon: 128.116444
    test 1116 line 372 fb: 110.769757
    test 1117 line 373 lat: -71.269219
    test 1118 line 373 lon: 117.744329
    test 1119 line 373 fb: 81.341006
    test 1120 line 374 lat: -28.381893
    test 1121 line 374 lon: 4.526029
    test 1122 line 374 fb: 176.348678
    test 1123 line 375 lat: -28.786090
    test 1124 line 375 lon: 25.937634
    test 1125 line 375 fb: 147.973102
    test 1126 line 376 lat: -37.872672
    test 1127 line 376 lon: 116.904193
    test 1128 line 376 fb: 88.568636
    test 1129 line 377 lat: -26.321447
    test 1130 line 377 lon: 85.206987
    test 1131 line 377 fb: 112.408109
    test 1132 line 378 lat: -54.824260
    test 1133 line 378 lon: 156.561574
    test 1134 line 378 fb: 45.534810
    test 1135 line 379 lat: -16.423550
    test 1136 line 379 lon: 36.685134
    test 1137 line 379 fb: 149.426790
    test 1138 line 380 lat: -16.806591
    test 1139 line 380 lon: 149.738610
    test 1140 line 380 fb: 108.898472
    test 1141 line 381 lat: 61.200095
    test 1142 line 381 lon: 179.666196
    test 1143 line 381 fb: 179.746894
    test 1144 line 382 lat: 66.474418
    test 1145 line 382 lon: 1.552183
    test 1146 line 382 fb: 2.088868
    test 1147 line 383 lat: -75.177220
    test 1148 line 383 lon: 158.741597
    test 1149 line 383 fb: 24.127094
    test 1150 line 384 lat: 43.592977
    test 1151 line 384 lon: 90.684526
    test 1152 line 384 fb: 91.539242
    test 1153 line 385 lat: -5.075415
    test 1154 line 385 lon: 101.127103
    test 1155 line 385 fb: 107.948022
    test 1156 line 386 lat: 50.406166
    test 1157 line 386 lon: 135.501939
    test 1158 line 386 fb: 162.003144
    test 1159 line 387 lat: -17.207733
    test 1160 line 387 lon: 43.634692
    test 1161 line 387 fb: 136.506793
    test 1162 line 388 lat: -28.917723
    test 1163 line 388 lon: 163.486470
    test 1164 line 388 fb: 38.990274
    test 1165 line 389 lat: -32.592414
    test 1166 line 389 lon: 76.048812
    test 1167 line 389 fb: 98.024249
    test 1168 line 390 lat: 50.602735
    test 1169 line 390 lon: 49.792893
    test 1170 line 390 fb: 110.500761
    test 1171 line 391 lat: -4.912232
    test 1172 line 391 lon: 142.681744
    test 1173 line 391 fb: 119.428358
    test 1174 line 392 lat: -45.213515
    test 1175 line 392 lon: 131.987859
    test 1176 line 392 fb: 96.014100
    test 1177 line 393 lat: -27.151096
    test 1178 line 393 lon: 127.729463
    test 1179 line 393 fb: 85.960623
    test 1180 line 394 lat: 8.000358
    test 1181 line 394 lon: 144.233747
    test 1182 line 394 fb: 142.364017
    test 1183 line 395 lat: -6.431774
    test 1184 line 395 lon: 170.549196
    test 1185 line 395 fb: 122.180851
    test 1186 line 396 lat: 62.834146
    test 1187 line 396 lon: 171.218298
    test 1188 line 396 fb: 175.117433
    test 1189 line 397 lat: 22.902814
    test 1190 line 397 lon: 70.233438
    test 1191 line 397 fb: 120.935912
    test 1192 line 398 lat: 22.584853
    test 1193 line 398 lon: 31.616865
    test 1194 line 398 fb: 107.124038
    test 1195 line 399 lat: 31.269173
    test 1196 line 399 lon: 65.399306
    test 1197 line 399 fb: 151.892600
    test 1198 line 400 lat: 35.519614
    test 1199 line 400 lon: 143.165122
    test 1200 line 400 fb: 161.479891
    test 1201 line 401 lat: -53.741922
    test 1202 line 401 lon: 67.121402
    test 1203 line 401 fb: 130.871188
    test 1204 line 402 lat: 9.046227
    test 1205 line 402 lon: 35.933737
    test 1206 line 402 fb: 175.770789
    test 1207 line 403 lat: 75.917034
    test 1208 line 403 lon: 125.150808
    test 1209 line 403 fb: 135.354467
    test 1210 line 404 lat: -39.724826
    test 1211 line 404 lon: 77.372087
    test 1212 line 404 fb: 111.852577
    test 1213 line 405 lat: 3.917212
    test 1214 line 405 lon: 142.621752
    test 1215 line 405 fb: 124.176952
    test 1216 line 406 lat: 60.230364
    test 1217 line 406 lon: 26.245689
    test 1218 line 406 fb: 48.509486
    test 1219 line 407 lat: 29.597322
    test 1220 line 407 lon: 29.129808
    test 1221 line 407 fb: 79.288539
    test 1222 line 408 lat: -62.913760
    test 1223 line 408 lon: 14.845859
    test 1224 line 408 fb: 165.794536
    test 1225 line 409 lat: 15.360446
    test 1226 line 409 lon: 161.450680
    test 1227 line 409 fb: 164.457024
    test 1228 line 410 lat: -58.330109
    test 1229 line 410 lon: 17.628134
    test 1230 line 410 fb: 161.349788
    test 1231 line 411 lat: -68.514277
    test 1232 line 411 lon: 19.958792
    test 1233 line 411 fb: 162.262811
    test 1234 line 412 lat: -23.686766
    test 1235 line 412 lon: 77.544158
    test 1236 line 412 fb: 97.517041
    test 1237 line 413 lat: -50.843575
    test 1238 line 413 lon: 118.404202
    test 1239 line 413 fb: 75.928950
    test 1240 line 414 lat: 44.438742
    test 1241 line 414 lon: 152.028260
    test 1242 line 414 fb: 156.092336
    test 1243 line 415 lat: 33.820395
    test 1244 line 415 lon: 178.008342
    test 1245 line 415 fb: 177.679586
    test 1246 line 416 lat: 27.506735
    test 1247 line 416 lon: 153.242452
    test 1248 line 416 fb: 150.262824
    test 1249 line 417 lat: -31.250437
    test 1250 line 417 lon: 179.014499
    test 1251 line 417 fb: 178.103046
    test 1252 line 418 lat: 40.341542
    test 1253 line 418 lon: 109.605984
    test 1254 line 418 fb: 105.401958
    test 1255 line 419 lat: 48.318632
    test 1256 line 419 lon: 92.282799
    test 1257 line 419 fb: 111.987482
    test 1258 line 420 lat: 0.675299
    test 1259 line 420 lon: 6.789301
    test 1260 line 420 fb: 164.921926
    test 1261 line 421 lat: 33.232812
    test 1262 line 421 lon: 170.163205
    test 1263 line 421 fb: 175.445424
    test 1264 line 422 lat: 51.425532
    test 1265 line 422 lon: 167.128188
    test 1266 line 422 fb: 169.431307
    test 1267 line 423 lat: 72.043795
    test 1268 line 423 lon: 23.320161
    test 1269 line 423 fb: 85.002463
    test 1270 line 424 lat: 55.279253
    test 1271 line 424 lon: 148.483684
    test 1272 line 424 fb: 155.614243
    test 1273 line 425 lat: 50.054601
    test 1274 line 425 lon: 43.609545
    test 1275 line 425 fb: 100.758451
    test 1276 line 426 lat: 31.194436
    test 1277 line 426 lon: 31.458476
    test 1278 line 426 fb: 92.204244
    test 1279 line 427 lat: 57.758262
    test 1280 line 427 lon: 164.499274
    test 1281 line 427 fb: 162.877999
    test 1282 line 428 lat: 27.006898
    test 1283 line 428 lon: 173.173812
    test 1284 line 428 fb: 177.878074
    test 1285 line 429 lat: -62.917581
    test 1286 line 429 lon: 18.990464
    test 1287 line 429 fb: 169.629168
    test 1288 line 430 lat: -43.128167
    test 1289 line 430 lon: 61.680974
    test 1290 line 430 fb: 135.269008
    test 1291 line 431 lat: -49.314417
    test 1292 line 431 lon: 55.826072
    test 1293 line 431 fb: 131.974574
    test 1294 line 432 lat: -24.322411
    test 1295 line 432 lon: 103.867391
    test 1296 line 432 fb: 139.458674
    test 1297 line 433 lat: -19.557319
    test 1298 line 433 lon: 81.358495
    test 1299 line 433 fb: 134.029610
    test 1300 line 434 lat: 7.830115
    test 1301 line 434 lon: 5.114172
    test 1302 line 434 fb: 175.025641
    test 1303 line 435 lat: -65.834623
    test 1304 line 435 lon: 41.772796
    test 1305 line 435 fb: 143.178050
    test 1306 line 436 lat: -7.997604
    test 1307 line 436 lon: 31.723397
    test 1308 line 436 fb: 153.896388
    test 1309 line 437 lat: -22.173130
    test 1310 line 437 lon: 164.896770
    test 1311 line 437 fb: 152.675597
    test 1312 line 438 lat: 35.085786
    test 1313 line 438 lon: 173.892271
    test 1314 line 438 fb: 171.931231
    test 1315 line 439 lat: -25.378865
    test 1316 line 439 lon: 2.197740
    test 1317 line 439 fb: 178.756775
    test 1318 line 440 lat: -13.782608
    test 1319 line 440 lon: 143.084799
    test 1320 line 440 fb: 141.818572
    test 1321 line 441 lat: -16.657589
    test 1322 line 441 lon: 100.829440
    test 1323 line 441 fb: 94.804409
    test 1324 line 442 lat: 23.629666
    test 1325 line 442 lon: 148.675531
    test 1326 line 442 fb: 169.091767
    test 1327 line 443 lat: 4.022724
    test 1328 line 443 lon: 161.803702
    test 1329 line 443 fb: 141.272785
    test 1330 line 444 lat: 13.280168
    test 1331 line 444 lon: 20.120413
    test 1332 line 444 fb: 158.170551
    test 1333 line 445 lat: -47.521450
    test 1334 line 445 lon: 150.549196
    test 1335 line 445 fb: 44.718791
    test 1336 line 446 lat: 17.790615
    test 1337 line 446 lon: 141.461006
    test 1338 line 446 fb: 115.746784
    test 1339 line 447 lat: -26.519374
    test 1340 line 447 lon: 98.067906
    test 1341 line 447 fb: 113.253929
    test 1342 line 448 lat: -12.401139
    test 1343 line 448 lon: 73.327970
    test 1344 line 448 fb: 124.879499
    test 1345 line 449 lat: 61.619396
    test 1346 line 449 lon: 99.785406
    test 1347 line 449 fb: 107.998380
    test 1348 line 450 lat: 36.997252
    test 1349 line 450 lon: 56.015643
    test 1350 line 450 fb: 103.921663
    test 1351 line 451 lat: 37.824447
    test 1352 line 451 lon: 83.438440
    test 1353 line 451 fb: 89.229164
    test 1354 line 452 lat: 78.387864
    test 1355 line 452 lon: 118.814812
    test 1356 line 452 fb: 133.706108
    test 1357 line 453 lat: -21.219381
    test 1358 line 453 lon: 53.544400
    test 1359 line 453 fb: 108.462517
    test 1360 line 454 lat: 63.304502
    test 1361 line 454 lon: 132.034926
    test 1362 line 454 fb: 139.912627
    test 1363 line 455 lat: 13.515663
    test 1364 line 455 lon: 8.989766
    test 1365 line 455 fb: 35.949535
    test 1366 line 456 lat: -6.742624
    test 1367 line 456 lon: 4.531931
    test 1368 line 456 fb: 171.306863
    test 1369 line 457 lat: -24.910509
    test 1370 line 457 lon: 128.137682
    test 1371 line 457 fb: 121.711631
    test 1372 line 458 lat: -40.687591
    test 1373 line 458 lon: 76.389897
    test 1374 line 458 fb: 116.394433
    test 1375 line 459 lat: 50.593808
    test 1376 line 459 lon: 155.175630
    test 1377 line 459 fb: 149.533910
    test 1378 line 460 lat: 12.198222
    test 1379 line 460 lon: 165.839456
    test 1380 line 460 fb: 172.783459
    test 1381 line 461 lat: 34.436568
    test 1382 line 461 lon: 7.117338
    test 1383 line 461 fb: 169.786492
    test 1384 line 462 lat: -3.145255
    test 1385 line 462 lon: 30.502293
    test 1386 line 462 fb: 103.563749
    test 1387 line 463 lat: 16.264722
    test 1388 line 463 lon: 85.497207
    test 1389 line 463 fb: 116.933863
    test 1390 line 464 lat: 1.433605
    test 1391 line 464 lon: 4.165940
    test 1392 line 464 fb: 170.272462
    test 1393 line 465 lat: -43.326676
    test 1394 line 465 lon: 153.148367
    test 1395 line 465 fb: 42.921394
    test 1396 line 466 lat: 20.405242
    test 1397 line 466 lon: 178.247549
    test 1398 line 466 fb: 178.801033
    test 1399 line 467 lat: -22.482832
    test 1400 line 467 lon: 140.761211
    test 1401 line 467 fb: 82.371737
    test 1402 line 468 lat: -41.151672
    test 1403 line 468 lon: 38.419124
    test 1404 line 468 fb: 148.221356
    test 1405 line 469 lat: -63.212817
    test 1406 line 469 lon: 15.714998
    test 1407 line 469 fb: 166.777356
    test 1408 line 470 lat: -33.892681
    test 1409 line 470 lon: 120.971496
    test 1410 line 470 fb: 170.404814
    test 1411 line 471 lat: -17.570093
    test 1412 line 471 lon: 137.259693
    test 1413 line 471 fb: 175.973637
    test 1414 line 472 lat: -24.221028
    test 1415 line 472 lon: 33.960052
    test 1416 line 472 fb: 130.753279
    test 1417 line 473 lat: -48.849133
    test 1418 line 473 lon: 176.601435
    test 1419 line 473 fb: 5.037779
    test 1420 line 474 lat: -50.620233
    test 1421 line 474 lon: 22.061011
    test 1422 line 474 fb: 159.730881
    test 1423 line 475 lat: -11.354875
    test 1424 line 475 lon: 76.258812
    test 1425 line 475 fb: 104.014357
    test 1426 line 476 lat: -19.640051
    test 1427 line 476 lon: 105.698979
    test 1428 line 476 fb: 156.650619
    test 1429 line 477 lat: 83.855267
    test 1430 line 477 lon: 112.674858
    test 1431 line 477 fb: 122.383784
    test 1432 line 478 lat: 48.296558
    test 1433 line 478 lon: 34.072463
    test 1434 line 478 fb: 61.415867
    test 1435 line 479 lat: 20.173772
    test 1436 line 479 lon: 12.682422
    test 1437 line 479 fb: 165.220898
    test 1438 line 480 lat: 47.501521
    test 1439 line 480 lon: 54.338775
    test 1440 line 480 fb: 80.572388
    test 1441 line 481 lat: -34.023172
    test 1442 line 481 lon: 174.310259
    test 1443 line 481 fb: 123.138509
    test 1444 line 482 lat: -31.540913
    test 1445 line 482 lon: 52.441924
    test 1446 line 482 fb: 155.194513
    test 1447 line 483 lat: 64.121649
    test 1448 line 483 lon: 21.295234
    test 1449 line 483 fb: 51.966943
    test 1450 line 484 lat: -4.599613
    test 1451 line 484 lon: 107.727091
    test 1452 line 484 fb: 109.270070
    test 1453 line 485 lat: -16.799515
    test 1454 line 485 lon: 43.675397
    test 1455 line 485 fb: 144.940350
    test 1456 line 486 lat: -16.337411
    test 1457 line 486 lon: 13.110283
    test 1458 line 486 fb: 167.467077
    test 1459 line 487 lat: -26.145379
    test 1460 line 487 lon: 9.977868
    test 1461 line 487 fb: 171.929335
    test 1462 line 488 lat: -3.245748
    test 1463 line 488 lon: 71.931981
    test 1464 line 488 fb: 124.120047
    test 1465 line 489 lat: 72.975644
    test 1466 line 489 lon: 36.459313
    test 1467 line 489 fb: 49.411324
    test 1468 line 490 lat: 50.342418
    test 1469 line 490 lon: 35.445910
    test 1470 line 490 fb: 43.087650
    test 1471 line 491 lat: -22.878804
    test 1472 line 491 lon: 69.376306
    test 1473 line 491 fb: 102.211558
    test 1474 line 492 lat: 21.254912
    test 1475 line 492 lon: 21.899215
    test 1476 line 492 fb: 92.966926
    test 1477 line 493 lat: 26.486641
    test 1478 line 493 lon: 19.097603
    test 1479 line 493 fb: 158.053447
    test 1480 line 494 lat: 43.041538
    test 1481 line 494 lon: 114.186950
    test 1482 line 494 fb: 155.795323
    test 1483 line 495 lat: -10.570764
    test 1484 line 495 lon: 107.625834
    test 1485 line 495 fb: 98.142401
    test 1486 line 496 lat: 12.624313
    test 1487 line 496 lon: 139.841077
    test 1488 line 496 fb: 148.385662
    test 1489 line 497 lat: -25.169999
    test 1490 line 497 lon: 33.175749
    test 1491 line 497 fb: 169.905377
    test 1492 line 498 lat: -41.360282
    test 1493 line 498 lon: 147.341948
    test 1494 line 498 fb: 136.551910
    test 1495 line 499 lat: 39.182099
    test 1496 line 499 lon: 150.590705
    test 1497 line 499 fb: 165.522951
    test 1498 line 500 lat: -57.494441
    test 1499 line 500 lon: 113.054057
    test 1500 line 500 fb: 130.988277
    test 1501 WGS84.KsOrder: 8

    all 1501 testEllipsoidalGeodTest.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 154.760 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEllipsoids.py

    testing testEllipsoids.py 20.09.23 (module pygeodesy.ellipsoids 20.10.05)
    test 1 ellipsoid: True
    test 2 TestEllipsiod: name='TestEllipsiod', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=1570.79632679, R1=1000, R2=1000, R3=1000

    testWGS84(pygeodesy.ellipsoids, 20.10.05)
    test 3 R1: 6371008.7714
    test 4 R2: 6371007.2
    test 5 R3: 6371000.8
    test 6 Rr: 6367449.1
    test 7 Rs: 6367435.7
    test 8 L: 10001965.7
    test 9 Rgeocentric: 6378137.000
    test 10 Rgeocentric: 6367489.544
    test 11 Rgeocentric: 6356752.314
    test 12 Rlat: 6378137.000
    test 13 Rlat: 6367444.657
    test 14 Rlat: 6356752.314
    test 15 distance2: 156903.472, 45.192
    test 16 distance2: 1569034.719, 45.192
    test 17 distance2: 1400742.676, 37.563
    test 18 distance2: 1179164.848, 18.896
    test 19 roc2: 6335439.327, 6378137.0
    test 20 roc2: 6367381.816, 6388838.29
    test 21 roc2: 6399593.626, 6399593.626
    test 22 rocBearing: 6335439.327
    test 23 rocBearing: 6378092.008
    test 24 rocBearing: 6399593.626
    test 25 rocGauss: 6356752.314
    test 26 rocGauss: 6378101.030
    test 27 rocGauss: 6399593.626
    test 28 rocMean: 6356716.465
    test 29 rocMean: 6378092.008
    test 30 rocMean: 6399593.626
    test 31 rocMeridional: 6335439.327
    test 32 rocMeridional: 6367381.816
    test 33 rocMeridional: 6399593.626
    test 34 rocPrimeVertical: 6378137.0
    test 35 rocPrimeVertical: 6388838.29
    test 36 rocPrimeVertical: 6399593.626

    testGRS80(pygeodesy.ellipsoids, 20.10.05)
    test 37 R1: 6371008.7714
    test 38 R2: 6371007.2
    test 39 R3: 6371000.8
    test 40 Rr: 6367449.1
    test 41 Rs: 6367435.7
    test 42 L: 10001965.7
    test 43 Rgeocentric: 6378137.000
    test 44 Rgeocentric: 6367489.544
    test 45 Rgeocentric: 6356752.314
    test 46 Rlat: 6378137.000
    test 47 Rlat: 6367444.657
    test 48 Rlat: 6356752.314
    test 49 distance2: 156903.472, 45.192
    test 50 distance2: 1569034.719, 45.192
    test 51 distance2: 1400742.676, 37.563
    test 52 distance2: 1179164.848, 18.896
    test 53 roc2: 6335439.327, 6378137.0
    test 54 roc2: 6367381.816, 6388838.29
    test 55 roc2: 6399593.626, 6399593.626
    test 56 rocBearing: 6335439.327
    test 57 rocBearing: 6378092.008
    test 58 rocBearing: 6399593.626
    test 59 rocGauss: 6356752.314
    test 60 rocGauss: 6378101.030
    test 61 rocGauss: 6399593.626
    test 62 rocMean: 6356716.465
    test 63 rocMean: 6378092.008
    test 64 rocMean: 6399593.626
    test 65 rocMeridional: 6335439.327
    test 66 rocMeridional: 6367381.816
    test 67 rocMeridional: 6399593.626
    test 68 rocPrimeVertical: 6378137.0
    test 69 rocPrimeVertical: 6388838.29
    test 70 rocPrimeVertical: 6399593.626

    test<unbound method Ellipsoid.__init__>(pygeodesy.ellipsoids, 20.10.05)
    test 71 a, b, None: 2.0
    test 72 a, None, f_: 500.0

    testWGS84(pygeodesy.ellipsoids, 20.10.05)
    test 73 WGS84.copy: True
    test 74 WGS84.copy: True
    test 75 WGS84.find: None
    test 76 WGS84.a2_b: 6399593.625758
    test 77 WGS84.b2_a: 6335439.327293
    test 78 WGS84.c: 6371007.180918
    test 79 WGS84.es: 0.081819
    test 80 WGS84.f2: 0.003364
    test 81 WGS84.m2degrees: 90
    test 82 WGS84.area: 5.101e+14
    test 83 WGS84.volume: 1.083e+21
    test 84 WGS84.ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 85 WGS84.ecef: WGS84
    test 86 WGS84: name='WGS84', a=6378137, b=6356752.3142451793, f_=298.257223563, f=0.0033528107, f2=0.0033640898, n=0.0016792204, e=0.0818191908, e2=0.00669438, e22=0.0067394967, e32=0.0033584313, L=10001965.7293127235, R1=6371008.7714150595, R2=6371007.1809184738, R3=6371000.790009154
    test 87 WGS84.: A=6367449.1458234144, e=0.0818191908, f_=298.2572235630, n=0.0016792204(-2.1684043450e-19)

    testKruegers(pygeodesy.ellipsoids, 20.10.05)
    test 88 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773573e-07, 1.197645503243e-09, 2.429170680397e-12, 5.711818370428e-15, 1.47999793138e-17, 4.107624109371e-20, 1.210785038923e-22
    test 89 WGS84.BetaKs : 8.37732164058e-04, 5.90587015222e-08, 1.673482665344e-10, 2.164798110491e-13, 3.787930968626e-16, 7.236769021816e-19, 1.493479824778e-21, 3.259522545838e-24
    test 90 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17
    test 91 WGS84.BetaKs : 8.37732164058e-04, 5.90587015222e-08, 1.673482665284e-10, 2.164798040063e-13, 3.787978046169e-16, 7.248748890695e-19
    test 92 WGS84.AlphaKs: 8.377318206304e-04, 7.608527714249e-07, 1.197638001561e-09, 2.443376194522e-12
    test 93 WGS84.BetaKs : 8.377321640601e-04, 5.905869567934e-08, 1.673488880355e-10, 2.167737763022e-13

    testProlate(pygeodesy.ellipsoids, 20.10.05)
    test 94 a: 6356752.314245
    test 95 b: 6378137.000000
    test 96 n: -0.001679
    test 97 R1: 6371008.771415
    test 98 R2: 6371007.180918
    test 99 R3: 6371000.790009
    test 100 Rbiaxial: 6367453.634516
    test 101 Rgeometric: 6367435.679716
    test 102 area: 510065621724088.437500
    test 103 volume: 1083207319801408126976.000000

    testAuxiliaryLats WGS84(pygeodesy.ellipsoids, 20.10.05)
    test 104 isEllipsoidal: True
    test 105 isOblate: True
    test 106 isProlate: False
    test 107 isSpherical: False
    test 108 auxAuthalic(-90): -90.0
    test 109 name: auxAuthalic
    test 110 inverse: lat (-90.0)
    test 111 auxConformal(-90): -90.0
    test 112 name: auxConformal
    test 113 inverse: lat (-90.0)
    test 114 auxGeocentric(-90): -90.0
    test 115 name: auxGeocentric
    test 116 inverse: lat (-90.0)
    test 117 auxIsometric(-90): -2178.287790219
    test 118 name: auxIsometric
    test 119 inverse: lat (-90.0)
    test 120 auxParametric(-90): -90.0
    test 121 name: auxParametric
    test 122 inverse: lat (-90.0)
    test 123 auxRectifying(-90): -90.0
    test 124 name: auxRectifying
    test 125 inverse: lat (-90.0)
    test 126 auxAuthalic(-60): -59.88878557
    test 127 name: auxAuthalic
    test 128 inverse: lat (-60.0)
    test 129 auxConformal(-60): -59.833216158
    test 130 name: auxConformal
    test 131 inverse: lat (-60.0)
    test 132 auxGeocentric(-60): -59.83307615
    test 133 name: auxGeocentric
    test 134 inverse: lat (-60.0)
    test 135 auxIsometric(-60): -75.123399226
    test 136 name: auxIsometric
    test 137 inverse: lat (-60.0)
    test 138 auxParametric(-60): -59.916607797
    test 139 name: auxParametric
    test 140 inverse: lat (-60.0)
    test 141 auxRectifying(-60): -59.874885594
    test 142 name: auxRectifying
    test 143 inverse: lat (-60.0)
    test 144 auxAuthalic(-30): -29.888997034
    test 145 name: auxAuthalic
    test 146 inverse: lat (-30.0)
    test 147 auxConformal(-30): -29.833682042
    test 148 name: auxConformal
    test 149 inverse: lat (-30.0)
    test 150 auxGeocentric(-30): -29.83363581
    test 151 name: auxGeocentric
    test 152 inverse: lat (-30.0)
    test 153 auxIsometric(-30): -31.281036776
    test 154 name: auxIsometric
    test 155 inverse: lat (-30.0)
    test 156 auxParametric(-30): -29.916747713
    test 157 name: auxParametric
    test 158 inverse: lat (-30.0)
    test 159 auxRectifying(-30): -29.875147936
    test 160 name: auxRectifying
    test 161 inverse: lat (-30.0)
    test 162 auxAuthalic(0): 0.0
    test 163 name: auxAuthalic
    test 164 inverse: lat (0.0)
    test 165 auxConformal(0): 0.0
    test 166 name: auxConformal
    test 167 inverse: lat (0.0)
    test 168 auxGeocentric(0): 0.0
    test 169 name: auxGeocentric
    test 170 inverse: lat (0.0)
    test 171 auxIsometric(0): 0.0
    test 172 name: auxIsometric
    test 173 inverse: lat (0.0)
    test 174 auxParametric(0): 0.0
    test 175 name: auxParametric
    test 176 inverse: lat (0.0)
    test 177 auxRectifying(0): 0.0
    test 178 name: auxRectifying
    test 179 inverse: lat (0.0)
    test 180 auxAuthalic(30): 29.888997034
    test 181 name: auxAuthalic
    test 182 inverse: lat (30.0)
    test 183 auxConformal(30): 29.833682042
    test 184 name: auxConformal
    test 185 inverse: lat (30.0)
    test 186 auxGeocentric(30): 29.83363581
    test 187 name: auxGeocentric
    test 188 inverse: lat (30.0)
    test 189 auxIsometric(30): 31.281036776
    test 190 name: auxIsometric
    test 191 inverse: lat (30.0)
    test 192 auxParametric(30): 29.916747713
    test 193 name: auxParametric
    test 194 inverse: lat (30.0)
    test 195 auxRectifying(30): 29.875147936
    test 196 name: auxRectifying
    test 197 inverse: lat (30.0)
    test 198 auxAuthalic(60): 59.88878557
    test 199 name: auxAuthalic
    test 200 inverse: lat (60.0)
    test 201 auxConformal(60): 59.833216158
    test 202 name: auxConformal
    test 203 inverse: lat (60.0)
    test 204 auxGeocentric(60): 59.83307615
    test 205 name: auxGeocentric
    test 206 inverse: lat (60.0)
    test 207 auxIsometric(60): 75.123399226
    test 208 name: auxIsometric
    test 209 inverse: lat (60.0)
    test 210 auxParametric(60): 59.916607797
    test 211 name: auxParametric
    test 212 inverse: lat (60.0)
    test 213 auxRectifying(60): 59.874885594
    test 214 name: auxRectifying
    test 215 inverse: lat (60.0)
    test 216 auxAuthalic(90): 90.0
    test 217 name: auxAuthalic
    test 218 inverse: lat (90.0)
    test 219 auxConformal(90): 90.0
    test 220 name: auxConformal
    test 221 inverse: lat (90.0)
    test 222 auxGeocentric(90): 90.0
    test 223 name: auxGeocentric
    test 224 inverse: lat (90.0)
    test 225 auxIsometric(90): 2178.287790219
    test 226 name: auxIsometric
    test 227 inverse: lat (90.0)
    test 228 auxParametric(90): 90.0
    test 229 name: auxParametric
    test 230 inverse: lat (90.0)
    test 231 auxRectifying(90): 90.0
    test 232 name: auxRectifying
    test 233 inverse: lat (90.0)

    testAuxiliaryLats Prolate(pygeodesy.ellipsoids, 20.10.05)
    test 234 isEllipsoidal: True
    test 235 isOblate: False
    test 236 isProlate: True
    test 237 isSpherical: False
    test 238 auxAuthalic(-90): -90.0
    test 239 name: auxAuthalic
    test 240 inverse: lat (-90.0)
    test 241 auxConformal(-90): -90.0
    test 242 name: auxConformal
    test 243 inverse: lat (-90.0)
    test 244 auxGeocentric(-90): -90.0
    test 245 name: auxGeocentric
    test 246 inverse: lat (-90.0)
    test 247 auxIsometric(-90): -2179.057490028
    test 248 name: auxIsometric
    test 249 inverse: lat (-90.0)
    test 250 auxParametric(-90): -90.0
    test 251 name: auxParametric
    test 252 inverse: lat (-90.0)
    test 253 auxRectifying(-90): -90.0
    test 254 name: auxRectifying
    test 255 inverse: lat (-90.0)
    test 256 auxAuthalic(-60): -60.110978127
    test 257 name: auxAuthalic
    test 258 inverse: lat (-60.0)
    test 259 auxConformal(-60): -60.16650401
    test 260 name: auxConformal
    test 261 inverse: lat (-60.0)
    test 262 auxGeocentric(-60): -60.16636419
    test 263 name: auxGeocentric
    test 264 inverse: lat (-60.0)
    test 265 auxIsometric(-60): -75.789978689
    test 266 name: auxIsometric
    test 267 inverse: lat (-60.0)
    test 268 auxParametric(-60): -60.083252287
    test 269 name: auxParametric
    test 270 inverse: lat (-60.0)
    test 271 auxRectifying(-60): -60.041947439
    test 272 name: auxRectifying
    test 273 inverse: lat (-60.0)
    test 274 auxAuthalic(-30): -30.11118952
    test 275 name: auxAuthalic
    test 276 inverse: lat (-30.0)
    test 277 auxConformal(-30): -30.166970897
    test 278 name: auxConformal
    test 279 inverse: lat (-30.0)
    test 280 auxGeocentric(-30): -30.16692385
    test 281 name: auxGeocentric
    test 282 inverse: lat (-30.0)
    test 283 auxIsometric(-30): -31.665887766
    test 284 name: auxIsometric
    test 285 inverse: lat (-30.0)
    test 286 auxParametric(-30): -30.083392203
    test 287 name: auxParametric
    test 288 inverse: lat (-30.0)
    test 289 auxRectifying(-30): -30.041931117
    test 290 name: auxRectifying
    test 291 inverse: lat (-30.0)
    test 292 auxAuthalic(0): 0.0
    test 293 name: auxAuthalic
    test 294 inverse: lat (0.0)
    test 295 auxConformal(0): 0.0
    test 296 name: auxConformal
    test 297 inverse: lat (0.0)
    test 298 auxGeocentric(0): 0.0
    test 299 name: auxGeocentric
    test 300 inverse: lat (0.0)
    test 301 auxIsometric(0): 0.0
    test 302 name: auxIsometric
    test 303 inverse: lat (0.0)
    test 304 auxParametric(0): 0.0
    test 305 name: auxParametric
    test 306 inverse: lat (0.0)
    test 307 auxRectifying(0): 0.0
    test 308 name: auxRectifying
    test 309 inverse: lat (0.0)
    test 310 auxAuthalic(30): 30.11118952
    test 311 name: auxAuthalic
    test 312 inverse: lat (30.0)
    test 313 auxConformal(30): 30.166970897
    test 314 name: auxConformal
    test 315 inverse: lat (30.0)
    test 316 auxGeocentric(30): 30.16692385
    test 317 name: auxGeocentric
    test 318 inverse: lat (30.0)
    test 319 auxIsometric(30): 31.665887766
    test 320 name: auxIsometric
    test 321 inverse: lat (30.0)
    test 322 auxParametric(30): 30.083392203
    test 323 name: auxParametric
    test 324 inverse: lat (30.0)
    test 325 auxRectifying(30): 30.041931117
    test 326 name: auxRectifying
    test 327 inverse: lat (30.0)
    test 328 auxAuthalic(60): 60.110978127
    test 329 name: auxAuthalic
    test 330 inverse: lat (60.0)
    test 331 auxConformal(60): 60.16650401
    test 332 name: auxConformal
    test 333 inverse: lat (60.0)
    test 334 auxGeocentric(60): 60.16636419
    test 335 name: auxGeocentric
    test 336 inverse: lat (60.0)
    test 337 auxIsometric(60): 75.789978689
    test 338 name: auxIsometric
    test 339 inverse: lat (60.0)
    test 340 auxParametric(60): 60.083252287
    test 341 name: auxParametric
    test 342 inverse: lat (60.0)
    test 343 auxRectifying(60): 60.041947439
    test 344 name: auxRectifying
    test 345 inverse: lat (60.0)
    test 346 auxAuthalic(90): 90.0
    test 347 name: auxAuthalic
    test 348 inverse: lat (90.0)
    test 349 auxConformal(90): 90.0
    test 350 name: auxConformal
    test 351 inverse: lat (90.0)
    test 352 auxGeocentric(90): 90.0
    test 353 name: auxGeocentric
    test 354 inverse: lat (90.0)
    test 355 auxIsometric(90): 2179.057490028
    test 356 name: auxIsometric
    test 357 inverse: lat (90.0)
    test 358 auxParametric(90): 90.0
    test 359 name: auxParametric
    test 360 inverse: lat (90.0)
    test 361 auxRectifying(90): 90.0
    test 362 name: auxRectifying
    test 363 inverse: lat (90.0)

    testAuxiliaryLats Sphere(pygeodesy.ellipsoids, 20.10.05)
    test 364 isEllipsoidal: False
    test 365 isOblate: False
    test 366 isProlate: False
    test 367 isSpherical: True
    test 368 auxAuthalic(-90): -90.0
    test 369 name: auxAuthalic
    test 370 inverse: lat (-90.0)
    test 371 auxConformal(-90): -90.0
    test 372 name: auxConformal
    test 373 inverse: lat (-90.0)
    test 374 auxGeocentric(-90): -90.0
    test 375 name: auxGeocentric
    test 376 inverse: lat (-90.0)
    test 377 auxIsometric(-90): -90.0
    test 378 name: auxIsometric
    test 379 inverse: lat (-90.0)
    test 380 auxParametric(-90): -90.0
    test 381 name: auxParametric
    test 382 inverse: lat (-90.0)
    test 383 auxRectifying(-90): -90.0
    test 384 name: auxRectifying
    test 385 inverse: lat (-90.0)
    test 386 auxAuthalic(-60): -60.0
    test 387 name: auxAuthalic
    test 388 inverse: lat (-60.0)
    test 389 auxConformal(-60): -60.0
    test 390 name: auxConformal
    test 391 inverse: lat (-60.0)
    test 392 auxGeocentric(-60): -60.0
    test 393 name: auxGeocentric
    test 394 inverse: lat (-60.0)
    test 395 auxIsometric(-60): -60.0
    test 396 name: auxIsometric
    test 397 inverse: lat (-60.0)
    test 398 auxParametric(-60): -60.0
    test 399 name: auxParametric
    test 400 inverse: lat (-60.0)
    test 401 auxRectifying(-60): -60.0
    test 402 name: auxRectifying
    test 403 inverse: lat (-60.0)
    test 404 auxAuthalic(-30): -30.0
    test 405 name: auxAuthalic
    test 406 inverse: lat (-30.0)
    test 407 auxConformal(-30): -30.0
    test 408 name: auxConformal
    test 409 inverse: lat (-30.0)
    test 410 auxGeocentric(-30): -30.0
    test 411 name: auxGeocentric
    test 412 inverse: lat (-30.0)
    test 413 auxIsometric(-30): -30.0
    test 414 name: auxIsometric
    test 415 inverse: lat (-30.0)
    test 416 auxParametric(-30): -30.0
    test 417 name: auxParametric
    test 418 inverse: lat (-30.0)
    test 419 auxRectifying(-30): -30.0
    test 420 name: auxRectifying
    test 421 inverse: lat (-30.0)
    test 422 auxAuthalic(0): 0.0
    test 423 name: auxAuthalic
    test 424 inverse: lat (0.0)
    test 425 auxConformal(0): 0.0
    test 426 name: auxConformal
    test 427 inverse: lat (0.0)
    test 428 auxGeocentric(0): 0.0
    test 429 name: auxGeocentric
    test 430 inverse: lat (0.0)
    test 431 auxIsometric(0): 0.0
    test 432 name: auxIsometric
    test 433 inverse: lat (0.0)
    test 434 auxParametric(0): 0.0
    test 435 name: auxParametric
    test 436 inverse: lat (0.0)
    test 437 auxRectifying(0): 0.0
    test 438 name: auxRectifying
    test 439 inverse: lat (0.0)
    test 440 auxAuthalic(30): 30.0
    test 441 name: auxAuthalic
    test 442 inverse: lat (30.0)
    test 443 auxConformal(30): 30.0
    test 444 name: auxConformal
    test 445 inverse: lat (30.0)
    test 446 auxGeocentric(30): 30.0
    test 447 name: auxGeocentric
    test 448 inverse: lat (30.0)
    test 449 auxIsometric(30): 30.0
    test 450 name: auxIsometric
    test 451 inverse: lat (30.0)
    test 452 auxParametric(30): 30.0
    test 453 name: auxParametric
    test 454 inverse: lat (30.0)
    test 455 auxRectifying(30): 30.0
    test 456 name: auxRectifying
    test 457 inverse: lat (30.0)
    test 458 auxAuthalic(60): 60.0
    test 459 name: auxAuthalic
    test 460 inverse: lat (60.0)
    test 461 auxConformal(60): 60.0
    test 462 name: auxConformal
    test 463 inverse: lat (60.0)
    test 464 auxGeocentric(60): 60.0
    test 465 name: auxGeocentric
    test 466 inverse: lat (60.0)
    test 467 auxIsometric(60): 60.0
    test 468 name: auxIsometric
    test 469 inverse: lat (60.0)
    test 470 auxParametric(60): 60.0
    test 471 name: auxParametric
    test 472 inverse: lat (60.0)
    test 473 auxRectifying(60): 60.0
    test 474 name: auxRectifying
    test 475 inverse: lat (60.0)
    test 476 auxAuthalic(90): 90.0
    test 477 name: auxAuthalic
    test 478 inverse: lat (90.0)
    test 479 auxConformal(90): 90.0
    test 480 name: auxConformal
    test 481 inverse: lat (90.0)
    test 482 auxGeocentric(90): 90.0
    test 483 name: auxGeocentric
    test 484 inverse: lat (90.0)
    test 485 auxIsometric(90): 90.0
    test 486 name: auxIsometric
    test 487 inverse: lat (90.0)
    test 488 auxParametric(90): 90.0
    test 489 name: auxParametric
    test 490 inverse: lat (90.0)
    test 491 auxRectifying(90): 90.0
    test 492 name: auxRectifying
    test 493 inverse: lat (90.0)

    testFlattenings(pygeodesy.ellipsoids, 20.10.05)
    test 494 _TOL: 4.71216091539e-09
    test 495 AiryModified.f_ - 1 / .f: 9.66338120634e-13
    test 496 AiryModified.f - 1 / .f_: 1.08420217249e-17
    test 497 OSU91A.f_ - 1 / .f: -2.27373675443e-12
    test 498 OSU91A.f - 1 / .f_: -2.55871712707e-17
    test 499 Everest1969.f_ - 1 / .f: 2.89662693831e-09
    test 500 Everest1969.f - 1 / .f_: 3.20134543874e-14
    test 501 Maupertuis1738.f_ - 1 / .f: 1.53477230924e-11
    test 502 Maupertuis1738.f - 1 / .f_: 4.20670442924e-16
    test 503 Bessel1841.f_ - 1 / .f: 2.63662514044e-09
    test 504 Bessel1841.f - 1 / .f_: 2.94621098351e-14
    test 505 GRS80.f_ - 1 / .f: 1.25794485939e-10
    test 506 GRS80.f - 1 / .f_: 1.41379963292e-15
    test 507 Struve1860.f_ - 1 / .f: 1.90425453184e-11
    test 508 Struve1860.f - 1 / .f_: 2.19442519711e-16
    test 509 SoAmerican1969.f_ - 1 / .f: -5.68434188608e-11
    test 510 SoAmerican1969.f - 1 / .f_: -6.38811920028e-16
    test 511 Intl1924.f_ - 1 / .f: -5.00222085975e-12
    test 512 Intl1924.f - 1 / .f_: -5.63785129692e-17
    test 513 IERS1989.f_ - 1 / .f: -9.32232069317e-12
    test 514 IERS1989.f - 1 / .f_: -1.04950770297e-16
    test 515 IERS1992TOPEX.f_ - 1 / .f: -4.74642547488e-11
    test 516 IERS1992TOPEX.f - 1 / .f_: -5.33427468863e-16
    test 517 Intl1967.f_ - 1 / .f: -1.35287336889e-11
    test 518 Intl1967.f - 1 / .f_: -1.52221985017e-16
    test 519 Mercury1960.f_ - 1 / .f: -4.80326889374e-11
    test 520 Mercury1960.f - 1 / .f_: -5.39499001029e-16
    test 521 Krassowsky1940.f_ - 1 / .f: -3.87672116631e-11
    test 522 Krassowsky1940.f - 1 / .f_: -4.35849273339e-16
    test 523 Australia1966.f_ - 1 / .f: -4.88853402203e-12
    test 524 Australia1966.f - 1 / .f_: -5.50774703623e-17
    test 525 Clarke1880Mod.f_ - 1 / .f: -7.16227077646e-12
    test 526 Clarke1880Mod.f - 1 / .f_: -8.32667268469e-17
    test 527 WGS72.f_ - 1 / .f: 7.44648787077e-12
    test 528 WGS72.f - 1 / .f_: 8.37004077159e-17
    test 529 GRS67.f_ - 1 / .f: 5.85487214266e-12
    test 530 GRS67.f - 1 / .f_: 6.59194920871e-17
    test 531 IERS2003.f_ - 1 / .f: -3.67776920029e-11
    test 532 IERS2003.f - 1 / .f_: -4.1373154902e-16
    test 533 Plessis1817.f_ - 1 / .f: 4.22346602136e-11
    test 534 Plessis1817.f - 1 / .f_: 4.43221848112e-16
    test 535 Clarke1880IGN.f_ - 1 / .f: 3.73063357983e-10
    test 536 Clarke1880IGN.f - 1 / .f_: 4.33203820038e-15
    test 537 Airy1830.f_ - 1 / .f: -4.32009983342e-12
    test 538 Airy1830.f - 1 / .f_: -4.81385764584e-17
    test 539 Helmert1906.f_ - 1 / .f: 1.94404492504e-11
    test 540 Helmert1906.f - 1 / .f_: 2.18575157973e-16
    test 541 Delambre1810.f_ - 1 / .f: 6.00834937359e-11
    test 542 Delambre1810.f - 1 / .f_: 6.19296280924e-16
    test 543 Fisher1968.f_ - 1 / .f: 6.39488462184e-11
    test 544 Fisher1968.f - 1 / .f_: 7.18609199923e-16
    test 545 Mercury1968Mod.f_ - 1 / .f: 6.39488462184e-11
    test 546 Mercury1968Mod.f - 1 / .f_: 7.18609199923e-16
    test 547 CPM1799.f_ - 1 / .f: -4.77484718431e-11
    test 548 CPM1799.f - 1 / .f_: -4.2674197509e-16
    test 549 Engelis1985.f_ - 1 / .f: 3.17186277243e-11
    test 550 Engelis1985.f - 1 / .f_: 3.56919355182e-16
    test 551 NWL1965.f_ - 1 / .f: 5.32054400537e-11
    test 552 NWL1965.f - 1 / .f_: 5.98045918343e-16
    test 553 GEM10C.f_ - 1 / .f: 3.50155460183e-11
    test 554 GEM10C.f - 1 / .f_: 3.93782229047e-16
    test 555 WGS84.f_ - 1 / .f: 2.84217094304e-12
    test 556 WGS84.f - 1 / .f_: 3.20923843056e-17
    test 557 WGS66.f_ - 1 / .f: 5.32054400537e-11
    test 558 WGS66.f - 1 / .f_: 5.98045918343e-16
    test 559 Prolate.f_ - 1 / .f: 0.0
    test 560 Prolate.f - 1 / .f_: 0.0
    test 561 Krassovski1940.f_ - 1 / .f: -3.87672116631e-11
    test 562 Krassovski1940.f - 1 / .f_: -4.35849273339e-16
    test 563 WGS60.f_ - 1 / .f: -5.07611730427e-11
    test 564 WGS60.f - 1 / .f_: -5.70290342727e-16
    test 565 SGS85.f_ - 1 / .f: 1.65982783074e-11
    test 566 SGS85.f - 1 / .f_: 1.86916454537e-16
    test 567 OSU86F.f_ - 1 / .f: 1.46087586472e-11
    test 568 OSU86F.f - 1 / .f_: 1.64365049349e-16
    test 569 Clarke1880.f_ - 1 / .f: -6.27551344223e-11
    test 570 Clarke1880.f - 1 / .f_: -7.2858385991e-16
    test 571 Clarke1866.f_ - 1 / .f: 1.0180656318e-10
    test 572 Clarke1866.f - 1 / .f_: 1.17007098455e-15

    testEllipsoid2(pygeodesy.ellipsoids, 20.10.05)
    test 573 name='_2_AiryModified': a=6377340.189, b=6356034.44793853, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, L=10000776.05340819, R1=6370238.27531284, R2=6370236.69633043, R3=6370230.35179012
    test 574 name='_2_OSU91A': a=6378136.3, b=6356751.6165948, f_=298.2572236, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.6315999, R1=6371008.07219827, R2=6371006.48170186, R3=6371000.09079324
    test 575 name='_2_Everest1969': a=6377295.664, b=6356094.667915, f_=300.8017, f=0.00332445, f2=0.00333554, n=0.00166499, e=0.08147298, e2=0.00663785, e22=0.0066822, e32=0.00332998, L=10000788.3115495, R1=6370228.665305, R2=6370227.10178537, R3=6370220.81951617
    test 576 name='_2_Maupertuis1738': a=6397300, b=6363806.28272251, f_=191, f=0.0052356, f2=0.00526316, n=0.00262467, e=0.10219488, e2=0.01044379, e22=0.01055402, e32=0.00524931, L=10022566.69846922, R1=6386135.42757417, R2=6386131.54144847, R3=6386115.88628229
    test 577 name='_2_Bessel1841': a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.00334277, f2=0.00335398, n=0.00167418, e=0.08169683, e2=0.00667437, e22=0.00671922, e32=0.00334836, L=10000855.76443237, R1=6370291.09093933, R2=6370289.51012659, R3=6370283.15821522
    test 578 name='_2_GRS80': a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997413
    test 579 name='_2_Struve1860': a=6378298.3, b=6356657.14266956, f_=294.73, f=0.00339294, f2=0.00340449, n=0.00169935, e=0.0823065, e2=0.00677436, e22=0.00682056, e32=0.00339869, L=10002017.83655714, R1=6371084.58088985, R2=6371082.95208988, R3=6371076.40691418
    test 580 name='_2_SoAmerican1969': a=6378160, b=6356774.71919531, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10002001.39064442, R1=6371031.5730651, R2=6371029.98248581, R3=6371023.59124343
    test 581 name='_2_Intl1924': a=6378388, b=6356911.94612795, f_=297, f=0.003367, f2=0.00337838, n=0.00168634, e=0.08199189, e2=0.00672267, e22=0.00676817, e32=0.00337267, L=10002288.29898944, R1=6371229.31537598, R2=6371227.71133444, R3=6371221.26587487
    test 582 name='_2_IERS1989': a=6378136, b=6356751.30156878, f_=298.257, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181922, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.14856985, R1=6371007.76718959, R2=6371006.17669088, R3=6370999.78577296
    test 583 name='_2_IERS1992TOPEX': a=6378136.3, b=6356751.61659215, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.63159783, R1=6371008.07219738, R2=6371006.48170097, R3=6371000.09079235
    test 584 name='_2_Intl1967': a=6378157.5, b=6356772.2, f_=298.24961539, f=0.0033529, f2=0.00336418, n=0.00167926, e=0.08182023, e2=0.00669455, e22=0.00673967, e32=0.00335852, L=10001997.44859308, R1=6371029.06666667, R2=6371027.47608389, R3=6371021.08482752
    test 585 name='_2_Mercury1960': a=6378166, b=6356784.28360711, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002013.61254591, R1=6371038.76120237, R2=6371037.17115427, R3=6371030.78205124
    test 586 name='_2_Krassowsky1940': a=6378245, b=6356863.01877305, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002137.49754285, R1=6371117.67292435, R2=6371116.08285656, R3=6371109.69367439
    test 587 name='_2_Australia1966': a=6378160, b=6356774.71919531, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10002001.39064442, R1=6371031.5730651, R2=6371029.9824858, R3=6371023.59124343
    test 588 name='_2_Clarke1880Mod': a=6378249.145, b=6356514.96582849, f_=293.4663, f=0.00340755, f2=0.0034192, n=0.00170668, e=0.08248322, e2=0.00680348, e22=0.00685009, e32=0.00341335, L=10001867.62720001, R1=6371004.4186095, R2=6371002.77577708, R3=6370996.17408252
    test 589 name='_2_WGS72': a=6378135, b=6356750.52001609, f_=298.26, f=0.00335278, f2=0.00336406, n=0.0016792, e=0.08181881, e2=0.00669432, e22=0.00673943, e32=0.0033584, L=10001962.74919858, R1=6371006.84000536, R2=6371005.24953886, R3=6370998.85875069
    test 590 name='_2_GRS67': a=6378160, b=6356774.51609071, f_=298.24716743, f=0.00335292, f2=0.0033642, n=0.00167928, e=0.08182057, e2=0.00669461, e22=0.00673973, e32=0.00335854, L=10002001.2312605, R1=6371031.50536357, R2=6371029.91475409, R3=6371023.52339014
    test 591 name='_2_SpherePopular': a=6378137, b=6378137, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=10018754.17139462, R1=6378137, R2=6378137, R3=6378137
    test 592 name='_2_IERS2003': a=6378136.6, b=6356751.85797165, f_=298.25642, f=0.00335282, f2=0.0033641, n=0.00167922, e=0.0818193, e2=0.0066944, e22=0.00673951, e32=0.00335844, L=10001965.05683465, R1=6371008.35265722, R2=6371006.76215217, R3=6371000.37120876
    test 593 name='_2_Plessis1817': a=6376523, b=6355862.93325557, f_=308.64, f=0.00324002, f2=0.00325055, n=0.00162264, e=0.08043347, e2=0.00646954, e22=0.00651167, e32=0.00324527, L=9999999.11003639, R1=6369636.31108519, R2=6369634.82608583, R3=6369628.85999667
    test 594 name='_2_Clarke1880IGN': a=6378249.2, b=6356515, f_=293.46602129, f=0.00340755, f2=0.0034192, n=0.00170668, e=0.08248326, e2=0.00680349, e22=0.00685009, e32=0.00341336, L=10001867.69724907, R1=6371004.46666667, R2=6371002.82383112, R3=6370996.22212394
    test 595 name='_2_Airy1830': a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572
    test 596 name='_2_Helmert1906': a=6378200, b=6356818.16962789, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002066.93013953, R1=6371072.7232093, R2=6371071.13315272, R3=6371064.74401563
    test 597 name='_2_Delambre1810': a=6376428, b=6355957.92616372, f_=311.5, f=0.00321027, f2=0.00322061, n=0.00160772, e=0.08006397, e2=0.00641024, e22=0.0064516, e32=0.00321543, L=9999998.98395793, R1=6369604.64205457, R2=6369603.18419749, R3=6369597.32739068
    test 598 name='_2_SphereAuthalic': a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000
    test 599 name='_2_Fisher1968': a=6378150, b=6356768.33724438, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10001988.52191361, R1=6371022.77908146, R2=6371021.18903735, R3=6371014.79995034
    test 600 name='_2_Mercury1968Mod': a=6378150, b=6356768.33724438, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10001988.52191361, R1=6371022.77908146, R2=6371021.18903735, R3=6371014.79995034
    test 601 name='_2_CPM1799': a=6375738.7, b=6356671.92557493, f_=334.39, f=0.00299052, f2=0.00299949, n=0.0014975, e=0.07727934, e2=0.0059721, e22=0.00600798, e32=0.00299499, L=10000017.52721564, R1=6369383.10852498, R2=6369381.8434158, R3=6369376.76247021
    test 602 name='_2_Engelis1985': a=6378136.05, b=6356751.32272154, f_=298.2566, f=0.00335282, f2=0.0033641, n=0.00167922, e=0.08181928, e2=0.00669439, e22=0.00673951, e32=0.00335844, L=10001964.20447208, R1=6371007.80757385, R2=6371006.21707085, R3=6370999.82613572
    test 603 name='_2_NWL1965': a=6378145, b=6356759.76948868, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10001977.86818326, R1=6371016.58982956, R2=6371014.999254, R3=6371008.60802666
    test 604 name='_2_GEM10C': a=6378137, b=6356752.31424783, f_=298.2572236, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.7293148, R1=6371008.77141594, R2=6371007.18091936, R3=6371000.79001004
    test 605 name='_2_WGS84': a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915
    test 606 name='_2_WGS66': a=6378145, b=6356759.76948868, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10001977.86818326, R1=6371016.58982956, R2=6371014.999254, R3=6371008.60802666
    test 607 name='_2_Prolate': a=6356752.31424518, b=6378137, f_=-297.25722356, f=-0.00336409, f2=-0.00335281, n=-0.00167922, e=0.08209444, e2=-0.0067395, e22=-0.00669438, e32=-0.00335843, L=10035500.52045003, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915
    test 608 name='_2_Krassovski1940': a=6378245, b=6356863.01877305, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002137.49754285, R1=6371117.67292435, R2=6371116.08285656, R3=6371109.69367439
    test 609 name='_2_WGS60': a=6378165, b=6356783.28695944, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002012.0443814, R1=6371037.76231981, R2=6371036.17227197, R3=6371029.78316993
    test 610 name='_2_Sphere': a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415
    test 611 name='_2_SGS85': a=6378136, b=6356751.30156878, f_=298.257, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181922, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.14856985, R1=6371007.76718959, R2=6371006.17669087, R3=6370999.78577296
    test 612 name='_2_OSU86F': a=6378136.2, b=6356751.51693008, f_=298.2572236, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.47478349, R1=6371007.97231003, R2=6371006.38181364, R3=6370999.99090512
    test 613 name='_2_Clarke1880': a=6378249.145, b=6356514.86954978, f_=293.465, f=0.00340756, f2=0.00341921, n=0.00170669, e=0.0824834, e2=0.00680351, e22=0.00685012, e32=0.00341337, L=10001867.55164747, R1=6371004.38651659, R2=6371002.74366963, R3=6370996.1419165
    test 614 name='_2_Clarke1866': a=6378206.4, b=6356583.8, f_=294.97869821, f=0.00339008, f2=0.00340161, n=0.00169792, e=0.08227185, e2=0.00676866, e22=0.00681478, e32=0.00339582, L=10001888.04298286, R1=6370998.86666667, R2=6370997.240633, R3=6370990.70659881

    testa_f2Tuple(pygeodesy.ellipsoids, 20.10.05)
    test 615 name='_a_b_AiryModified': a=6377340.189, b=6356034.44793853, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, L=10000776.05340819, R1=6370238.27531284, R2=6370236.69633043, R3=6370230.35179012
    test 616 name='_a_b_OSU91A': a=6378136.3, b=6356751.6165948, f_=298.2572236, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.6315999, R1=6371008.07219827, R2=6371006.48170186, R3=6371000.09079324
    test 617 name='_a_b_Everest1969': a=6377295.664, b=6356094.667915, f_=300.8017, f=0.00332445, f2=0.00333554, n=0.00166499, e=0.08147298, e2=0.00663785, e22=0.0066822, e32=0.00332998, L=10000788.3115495, R1=6370228.665305, R2=6370227.10178537, R3=6370220.81951617
    test 618 name='_a_b_Maupertuis1738': a=6397300, b=6363806.28272251, f_=191, f=0.0052356, f2=0.00526316, n=0.00262467, e=0.10219488, e2=0.01044379, e22=0.01055402, e32=0.00524931, L=10022566.69846922, R1=6386135.42757417, R2=6386131.54144847, R3=6386115.88628229
    test 619 name='_a_b_Bessel1841': a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.00334277, f2=0.00335398, n=0.00167418, e=0.08169683, e2=0.00667437, e22=0.00671922, e32=0.00334836, L=10000855.76443237, R1=6370291.09093933, R2=6370289.51012659, R3=6370283.15821522
    test 620 name='_a_b_GRS80': a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997413
    test 621 name='_a_b_Struve1860': a=6378298.3, b=6356657.14266956, f_=294.73, f=0.00339294, f2=0.00340449, n=0.00169935, e=0.0823065, e2=0.00677436, e22=0.00682056, e32=0.00339869, L=10002017.83655714, R1=6371084.58088985, R2=6371082.95208988, R3=6371076.40691418
    test 622 name='_a_b_SoAmerican1969': a=6378160, b=6356774.71919531, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10002001.39064442, R1=6371031.5730651, R2=6371029.98248581, R3=6371023.59124343
    test 623 name='_a_b_Intl1924': a=6378388, b=6356911.94612795, f_=297, f=0.003367, f2=0.00337838, n=0.00168634, e=0.08199189, e2=0.00672267, e22=0.00676817, e32=0.00337267, L=10002288.29898944, R1=6371229.31537598, R2=6371227.71133444, R3=6371221.26587487
    test 624 name='_a_b_IERS1989': a=6378136, b=6356751.30156878, f_=298.257, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181922, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.14856985, R1=6371007.76718959, R2=6371006.17669088, R3=6370999.78577296
    test 625 name='_a_b_IERS1992TOPEX': a=6378136.3, b=6356751.61659215, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.63159783, R1=6371008.07219738, R2=6371006.48170097, R3=6371000.09079235
    test 626 name='_a_b_Intl1967': a=6378157.5, b=6356772.2, f_=298.24961539, f=0.0033529, f2=0.00336418, n=0.00167926, e=0.08182023, e2=0.00669455, e22=0.00673967, e32=0.00335852, L=10001997.44859308, R1=6371029.06666667, R2=6371027.47608389, R3=6371021.08482752
    test 627 name='_a_b_Mercury1960': a=6378166, b=6356784.28360711, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002013.61254591, R1=6371038.76120237, R2=6371037.17115427, R3=6371030.78205124
    test 628 name='_a_b_Krassowsky1940': a=6378245, b=6356863.01877305, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002137.49754285, R1=6371117.67292435, R2=6371116.08285656, R3=6371109.69367439
    test 629 name='_a_b_Australia1966': a=6378160, b=6356774.71919531, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10002001.39064442, R1=6371031.5730651, R2=6371029.9824858, R3=6371023.59124343
    test 630 name='_a_b_Clarke1880Mod': a=6378249.145, b=6356514.96582849, f_=293.4663, f=0.00340755, f2=0.0034192, n=0.00170668, e=0.08248322, e2=0.00680348, e22=0.00685009, e32=0.00341335, L=10001867.62720001, R1=6371004.4186095, R2=6371002.77577708, R3=6370996.17408252
    test 631 name='_a_b_WGS72': a=6378135, b=6356750.52001609, f_=298.26, f=0.00335278, f2=0.00336406, n=0.0016792, e=0.08181881, e2=0.00669432, e22=0.00673943, e32=0.0033584, L=10001962.74919858, R1=6371006.84000536, R2=6371005.24953886, R3=6370998.85875069
    test 632 name='_a_b_GRS67': a=6378160, b=6356774.51609071, f_=298.24716743, f=0.00335292, f2=0.0033642, n=0.00167928, e=0.08182057, e2=0.00669461, e22=0.00673973, e32=0.00335854, L=10002001.2312605, R1=6371031.50536357, R2=6371029.91475409, R3=6371023.52339014
    test 633 name='_a_b_SpherePopular': a=6378137, b=6378137, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=10018754.17139462, R1=6378137, R2=6378137, R3=6378137
    test 634 name='_a_b_IERS2003': a=6378136.6, b=6356751.85797165, f_=298.25642, f=0.00335282, f2=0.0033641, n=0.00167922, e=0.0818193, e2=0.0066944, e22=0.00673951, e32=0.00335844, L=10001965.05683465, R1=6371008.35265722, R2=6371006.76215217, R3=6371000.37120876
    test 635 name='_a_b_Plessis1817': a=6376523, b=6355862.93325557, f_=308.64, f=0.00324002, f2=0.00325055, n=0.00162264, e=0.08043347, e2=0.00646954, e22=0.00651167, e32=0.00324527, L=9999999.11003639, R1=6369636.31108519, R2=6369634.82608583, R3=6369628.85999667
    test 636 name='_a_b_Clarke1880IGN': a=6378249.2, b=6356515, f_=293.46602129, f=0.00340755, f2=0.0034192, n=0.00170668, e=0.08248326, e2=0.00680349, e22=0.00685009, e32=0.00341336, L=10001867.69724907, R1=6371004.46666667, R2=6371002.82383112, R3=6370996.22212394
    test 637 name='_a_b_Airy1830': a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572
    test 638 name='_a_b_Helmert1906': a=6378200, b=6356818.16962789, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002066.93013953, R1=6371072.7232093, R2=6371071.13315272, R3=6371064.74401563
    test 639 name='_a_b_Delambre1810': a=6376428, b=6355957.92616372, f_=311.5, f=0.00321027, f2=0.00322061, n=0.00160772, e=0.08006397, e2=0.00641024, e22=0.0064516, e32=0.00321543, L=9999998.98395793, R1=6369604.64205457, R2=6369603.18419749, R3=6369597.32739068
    test 640 name='_a_b_SphereAuthalic': a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000
    test 641 name='_a_b_Fisher1968': a=6378150, b=6356768.33724438, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10001988.52191361, R1=6371022.77908146, R2=6371021.18903735, R3=6371014.79995034
    test 642 name='_a_b_Mercury1968Mod': a=6378150, b=6356768.33724438, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10001988.52191361, R1=6371022.77908146, R2=6371021.18903735, R3=6371014.79995034
    test 643 name='_a_b_CPM1799': a=6375738.7, b=6356671.92557493, f_=334.39, f=0.00299052, f2=0.00299949, n=0.0014975, e=0.07727934, e2=0.0059721, e22=0.00600798, e32=0.00299499, L=10000017.52721564, R1=6369383.10852498, R2=6369381.8434158, R3=6369376.76247021
    test 644 name='_a_b_Engelis1985': a=6378136.05, b=6356751.32272154, f_=298.2566, f=0.00335282, f2=0.0033641, n=0.00167922, e=0.08181928, e2=0.00669439, e22=0.00673951, e32=0.00335844, L=10001964.20447208, R1=6371007.80757385, R2=6371006.21707085, R3=6370999.82613572
    test 645 name='_a_b_NWL1965': a=6378145, b=6356759.76948868, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10001977.86818326, R1=6371016.58982956, R2=6371014.999254, R3=6371008.60802666
    test 646 name='_a_b_GEM10C': a=6378137, b=6356752.31424783, f_=298.2572236, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.7293148, R1=6371008.77141594, R2=6371007.18091936, R3=6371000.79001004
    test 647 name='_a_b_WGS84': a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915
    test 648 name='_a_b_WGS66': a=6378145, b=6356759.76948868, f_=298.25, f=0.00335289, f2=0.00336417, n=0.00167926, e=0.08182018, e2=0.00669454, e22=0.00673966, e32=0.00335851, L=10001977.86818326, R1=6371016.58982956, R2=6371014.999254, R3=6371008.60802666
    test 649 name='_a_b_Prolate': a=6356752.31424518, b=6378137, f_=-297.25722356, f=-0.00336409, f2=-0.00335281, n=-0.00167922, e=0.08209444, e2=-0.0067395, e22=-0.00669438, e32=-0.00335843, L=10035500.52045003, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000915
    test 650 name='_a_b_Krassovski1940': a=6378245, b=6356863.01877305, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002137.49754285, R1=6371117.67292435, R2=6371116.08285656, R3=6371109.69367439
    test 651 name='_a_b_WGS60': a=6378165, b=6356783.28695944, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, L=10002012.0443814, R1=6371037.76231981, R2=6371036.17227197, R3=6371029.78316993
    test 652 name='_a_b_Sphere': a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415
    test 653 name='_a_b_SGS85': a=6378136, b=6356751.30156878, f_=298.257, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181922, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.14856985, R1=6371007.76718959, R2=6371006.17669087, R3=6370999.78577296
    test 654 name='_a_b_OSU86F': a=6378136.2, b=6356751.51693008, f_=298.2572236, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, L=10001964.47478349, R1=6371007.97231003, R2=6371006.38181364, R3=6370999.99090512
    test 655 name='_a_b_Clarke1880': a=6378249.145, b=6356514.86954978, f_=293.465, f=0.00340756, f2=0.00341921, n=0.00170669, e=0.0824834, e2=0.00680351, e22=0.00685012, e32=0.00341337, L=10001867.55164747, R1=6371004.38651659, R2=6371002.74366963, R3=6370996.1419165
    test 656 name='_a_b_Clarke1866': a=6378206.4, b=6356583.8, f_=294.97869821, f=0.00339008, f2=0.00340161, n=0.00169792, e=0.08227185, e2=0.00676866, e22=0.00681478, e32=0.00339582, L=10001888.04298286, R1=6370998.86666667, R2=6370997.240633, R3=6370990.70659881

    testFunctions(pygeodesy.ellipsoids, 20.10.05)
    test 657 a_b2f_(AiryModified): 299.32496460
    test 658 a_b2f2(AiryModified): 0.00335205
    test 659 a_b2n(AiryModified): 0.00167322
    test 660 b_f2a(AiryModified): 6377340.189
    test 661 b_f_2a(AiryModified): 6377340.189
    test 662 f_2f(AiryModified): 0.00334085
    test 663 n2e2(AiryModified): 0.00667054
    test 664 n2f(AiryModified): 0.00334085
    test 665 a_b2f_(OSU91A): 298.25722360
    test 666 a_b2f2(OSU91A): 0.00336409
    test 667 a_b2n(OSU91A): 0.00167922
    test 668 b_f2a(OSU91A): 6378136.300
    test 669 b_f_2a(OSU91A): 6378136.300
    test 670 f_2f(OSU91A): 0.00335281
    test 671 n2e2(OSU91A): 0.00669438
    test 672 n2f(OSU91A): 0.00335281
    test 673 a_b2f_(Everest1969): 300.80170000
    test 674 a_b2f2(Everest1969): 0.00333554
    test 675 a_b2n(Everest1969): 0.00166499
    test 676 b_f2a(Everest1969): 6377295.664
    test 677 b_f_2a(Everest1969): 6377295.664
    test 678 f_2f(Everest1969): 0.00332445
    test 679 n2e2(Everest1969): 0.00663785
    test 680 n2f(Everest1969): 0.00332445
    test 681 a_b2f_(Maupertuis1738): 191.00000000
    test 682 a_b2f2(Maupertuis1738): 0.00526316
    test 683 a_b2n(Maupertuis1738): 0.00262467
    test 684 b_f2a(Maupertuis1738): 6397300.000
    test 685 b_f_2a(Maupertuis1738): 6397300.000
    test 686 f_2f(Maupertuis1738): 0.00523560
    test 687 n2e2(Maupertuis1738): 0.01044379
    test 688 n2f(Maupertuis1738): 0.00523560
    test 689 a_b2f_(Bessel1841): 299.15281280
    test 690 a_b2f2(Bessel1841): 0.00335398
    test 691 a_b2n(Bessel1841): 0.00167418
    test 692 b_f2a(Bessel1841): 6377397.155
    test 693 b_f_2a(Bessel1841): 6377397.155
    test 694 f_2f(Bessel1841): 0.00334277
    test 695 n2e2(Bessel1841): 0.00667437
    test 696 n2f(Bessel1841): 0.00334277
    test 697 a_b2f_(GRS80): 298.25722210
    test 698 a_b2f2(GRS80): 0.00336409
    test 699 a_b2n(GRS80): 0.00167922
    test 700 b_f2a(GRS80): 6378137.000
    test 701 b_f_2a(GRS80): 6378137.000
    test 702 f_2f(GRS80): 0.00335281
    test 703 n2e2(GRS80): 0.00669438
    test 704 n2f(GRS80): 0.00335281
    test 705 a_b2f_(Struve1860): 294.73000000
    test 706 a_b2f2(Struve1860): 0.00340449
    test 707 a_b2n(Struve1860): 0.00169935
    test 708 b_f2a(Struve1860): 6378298.300
    test 709 b_f_2a(Struve1860): 6378298.300
    test 710 f_2f(Struve1860): 0.00339294
    test 711 n2e2(Struve1860): 0.00677436
    test 712 n2f(Struve1860): 0.00339294
    test 713 a_b2f_(SoAmerican1969): 298.25000000
    test 714 a_b2f2(SoAmerican1969): 0.00336417
    test 715 a_b2n(SoAmerican1969): 0.00167926
    test 716 b_f2a(SoAmerican1969): 6378160.000
    test 717 b_f_2a(SoAmerican1969): 6378160.000
    test 718 f_2f(SoAmerican1969): 0.00335289
    test 719 n2e2(SoAmerican1969): 0.00669454
    test 720 n2f(SoAmerican1969): 0.00335289
    test 721 a_b2f_(Intl1924): 297.00000000
    test 722 a_b2f2(Intl1924): 0.00337838
    test 723 a_b2n(Intl1924): 0.00168634
    test 724 b_f2a(Intl1924): 6378388.000
    test 725 b_f_2a(Intl1924): 6378388.000
    test 726 f_2f(Intl1924): 0.00336700
    test 727 n2e2(Intl1924): 0.00672267
    test 728 n2f(Intl1924): 0.00336700
    test 729 a_b2f_(IERS1989): 298.25700000
    test 730 a_b2f2(IERS1989): 0.00336409
    test 731 a_b2n(IERS1989): 0.00167922
    test 732 b_f2a(IERS1989): 6378136.000
    test 733 b_f_2a(IERS1989): 6378136.000
    test 734 f_2f(IERS1989): 0.00335281
    test 735 n2e2(IERS1989): 0.00669438
    test 736 n2f(IERS1989): 0.00335281
    test 737 a_b2f_(IERS1992TOPEX): 298.25722356
    test 738 a_b2f2(IERS1992TOPEX): 0.00336409
    test 739 a_b2n(IERS1992TOPEX): 0.00167922
    test 740 b_f2a(IERS1992TOPEX): 6378136.300
    test 741 b_f_2a(IERS1992TOPEX): 6378136.300
    test 742 f_2f(IERS1992TOPEX): 0.00335281
    test 743 n2e2(IERS1992TOPEX): 0.00669438
    test 744 n2f(IERS1992TOPEX): 0.00335281
    test 745 a_b2f_(Intl1967): 298.24961539
    test 746 a_b2f2(Intl1967): 0.00336418
    test 747 a_b2n(Intl1967): 0.00167926
    test 748 b_f2a(Intl1967): 6378157.500
    test 749 b_f_2a(Intl1967): 6378157.500
    test 750 f_2f(Intl1967): 0.00335290
    test 751 n2e2(Intl1967): 0.00669455
    test 752 n2f(Intl1967): 0.00335290
    test 753 a_b2f_(Mercury1960): 298.30000000
    test 754 a_b2f2(Mercury1960): 0.00336361
    test 755 a_b2n(Mercury1960): 0.00167898
    test 756 b_f2a(Mercury1960): 6378166.000
    test 757 b_f_2a(Mercury1960): 6378166.000
    test 758 f_2f(Mercury1960): 0.00335233
    test 759 n2e2(Mercury1960): 0.00669342
    test 760 n2f(Mercury1960): 0.00335233
    test 761 a_b2f_(Krassowsky1940): 298.30000000
    test 762 a_b2f2(Krassowsky1940): 0.00336361
    test 763 a_b2n(Krassowsky1940): 0.00167898
    test 764 b_f2a(Krassowsky1940): 6378245.000
    test 765 b_f_2a(Krassowsky1940): 6378245.000
    test 766 f_2f(Krassowsky1940): 0.00335233
    test 767 n2e2(Krassowsky1940): 0.00669342
    test 768 n2f(Krassowsky1940): 0.00335233
    test 769 a_b2f_(Australia1966): 298.25000000
    test 770 a_b2f2(Australia1966): 0.00336417
    test 771 a_b2n(Australia1966): 0.00167926
    test 772 b_f2a(Australia1966): 6378160.000
    test 773 b_f_2a(Australia1966): 6378160.000
    test 774 f_2f(Australia1966): 0.00335289
    test 775 n2e2(Australia1966): 0.00669454
    test 776 n2f(Australia1966): 0.00335289
    test 777 a_b2f_(Clarke1880Mod): 293.46630000
    test 778 a_b2f2(Clarke1880Mod): 0.00341920
    test 779 a_b2n(Clarke1880Mod): 0.00170668
    test 780 b_f2a(Clarke1880Mod): 6378249.145
    test 781 b_f_2a(Clarke1880Mod): 6378249.145
    test 782 f_2f(Clarke1880Mod): 0.00340755
    test 783 n2e2(Clarke1880Mod): 0.00680348
    test 784 n2f(Clarke1880Mod): 0.00340755
    test 785 a_b2f_(WGS72): 298.26000000
    test 786 a_b2f2(WGS72): 0.00336406
    test 787 a_b2n(WGS72): 0.00167920
    test 788 b_f2a(WGS72): 6378135.000
    test 789 b_f_2a(WGS72): 6378135.000
    test 790 f_2f(WGS72): 0.00335278
    test 791 n2e2(WGS72): 0.00669432
    test 792 n2f(WGS72): 0.00335278
    test 793 a_b2f_(GRS67): 298.24716743
    test 794 a_b2f2(GRS67): 0.00336420
    test 795 a_b2n(GRS67): 0.00167928
    test 796 b_f2a(GRS67): 6378160.000
    test 797 b_f_2a(GRS67): 6378160.000
    test 798 f_2f(GRS67): 0.00335292
    test 799 n2e2(GRS67): 0.00669461
    test 800 n2f(GRS67): 0.00335292
    test 801 a_b2f_(SpherePopular): 0.00000000
    test 802 a_b2f2(SpherePopular): 0.00000000
    test 803 a_b2n(SpherePopular): 0.00000000
    test 804 b_f2a(SpherePopular): 6378137.000
    test 805 b_f_2a(SpherePopular): 6378137.000
    test 806 f_2f(SpherePopular): 0.00000000
    test 807 n2e2(SpherePopular): 0.00000000
    test 808 n2f(SpherePopular): 0.00000000
    test 809 a_b2f_(IERS2003): 298.25642000
    test 810 a_b2f2(IERS2003): 0.00336410
    test 811 a_b2n(IERS2003): 0.00167922
    test 812 b_f2a(IERS2003): 6378136.600
    test 813 b_f_2a(IERS2003): 6378136.600
    test 814 f_2f(IERS2003): 0.00335282
    test 815 n2e2(IERS2003): 0.00669440
    test 816 n2f(IERS2003): 0.00335282
    test 817 a_b2f_(Plessis1817): 308.64000000
    test 818 a_b2f2(Plessis1817): 0.00325055
    test 819 a_b2n(Plessis1817): 0.00162264
    test 820 b_f2a(Plessis1817): 6376523.000
    test 821 b_f_2a(Plessis1817): 6376523.000
    test 822 f_2f(Plessis1817): 0.00324002
    test 823 n2e2(Plessis1817): 0.00646954
    test 824 n2f(Plessis1817): 0.00324002
    test 825 a_b2f_(Clarke1880IGN): 293.46602129
    test 826 a_b2f2(Clarke1880IGN): 0.00341920
    test 827 a_b2n(Clarke1880IGN): 0.00170668
    test 828 b_f2a(Clarke1880IGN): 6378249.200
    test 829 b_f_2a(Clarke1880IGN): 6378249.200
    test 830 f_2f(Clarke1880IGN): 0.00340755
    test 831 n2e2(Clarke1880IGN): 0.00680349
    test 832 n2f(Clarke1880IGN): 0.00340755
    test 833 a_b2f_(Airy1830): 299.32496460
    test 834 a_b2f2(Airy1830): 0.00335205
    test 835 a_b2n(Airy1830): 0.00167322
    test 836 b_f2a(Airy1830): 6377563.396
    test 837 b_f_2a(Airy1830): 6377563.396
    test 838 f_2f(Airy1830): 0.00334085
    test 839 n2e2(Airy1830): 0.00667054
    test 840 n2f(Airy1830): 0.00334085
    test 841 a_b2f_(Helmert1906): 298.30000000
    test 842 a_b2f2(Helmert1906): 0.00336361
    test 843 a_b2n(Helmert1906): 0.00167898
    test 844 b_f2a(Helmert1906): 6378200.000
    test 845 b_f_2a(Helmert1906): 6378200.000
    test 846 f_2f(Helmert1906): 0.00335233
    test 847 n2e2(Helmert1906): 0.00669342
    test 848 n2f(Helmert1906): 0.00335233
    test 849 a_b2f_(Delambre1810): 311.50000000
    test 850 a_b2f2(Delambre1810): 0.00322061
    test 851 a_b2n(Delambre1810): 0.00160772
    test 852 b_f2a(Delambre1810): 6376428.000
    test 853 b_f_2a(Delambre1810): 6376428.000
    test 854 f_2f(Delambre1810): 0.00321027
    test 855 n2e2(Delambre1810): 0.00641024
    test 856 n2f(Delambre1810): 0.00321027
    test 857 a_b2f_(SphereAuthalic): 0.00000000
    test 858 a_b2f2(SphereAuthalic): 0.00000000
    test 859 a_b2n(SphereAuthalic): 0.00000000
    test 860 b_f2a(SphereAuthalic): 6371000.000
    test 861 b_f_2a(SphereAuthalic): 6371000.000
    test 862 f_2f(SphereAuthalic): 0.00000000
    test 863 n2e2(SphereAuthalic): 0.00000000
    test 864 n2f(SphereAuthalic): 0.00000000
    test 865 a_b2f_(Fisher1968): 298.30000000
    test 866 a_b2f2(Fisher1968): 0.00336361
    test 867 a_b2n(Fisher1968): 0.00167898
    test 868 b_f2a(Fisher1968): 6378150.000
    test 869 b_f_2a(Fisher1968): 6378150.000
    test 870 f_2f(Fisher1968): 0.00335233
    test 871 n2e2(Fisher1968): 0.00669342
    test 872 n2f(Fisher1968): 0.00335233
    test 873 a_b2f_(Mercury1968Mod): 298.30000000
    test 874 a_b2f2(Mercury1968Mod): 0.00336361
    test 875 a_b2n(Mercury1968Mod): 0.00167898
    test 876 b_f2a(Mercury1968Mod): 6378150.000
    test 877 b_f_2a(Mercury1968Mod): 6378150.000
    test 878 f_2f(Mercury1968Mod): 0.00335233
    test 879 n2e2(Mercury1968Mod): 0.00669342
    test 880 n2f(Mercury1968Mod): 0.00335233
    test 881 a_b2f_(CPM1799): 334.39000000
    test 882 a_b2f2(CPM1799): 0.00299949
    test 883 a_b2n(CPM1799): 0.00149750
    test 884 b_f2a(CPM1799): 6375738.700
    test 885 b_f_2a(CPM1799): 6375738.700
    test 886 f_2f(CPM1799): 0.00299052
    test 887 n2e2(CPM1799): 0.00597210
    test 888 n2f(CPM1799): 0.00299052
    test 889 a_b2f_(Engelis1985): 298.25660000
    test 890 a_b2f2(Engelis1985): 0.00336410
    test 891 a_b2n(Engelis1985): 0.00167922
    test 892 b_f2a(Engelis1985): 6378136.050
    test 893 b_f_2a(Engelis1985): 6378136.050
    test 894 f_2f(Engelis1985): 0.00335282
    test 895 n2e2(Engelis1985): 0.00669439
    test 896 n2f(Engelis1985): 0.00335282
    test 897 a_b2f_(NWL1965): 298.25000000
    test 898 a_b2f2(NWL1965): 0.00336417
    test 899 a_b2n(NWL1965): 0.00167926
    test 900 b_f2a(NWL1965): 6378145.000
    test 901 b_f_2a(NWL1965): 6378145.000
    test 902 f_2f(NWL1965): 0.00335289
    test 903 n2e2(NWL1965): 0.00669454
    test 904 n2f(NWL1965): 0.00335289
    test 905 a_b2f_(GEM10C): 298.25722360
    test 906 a_b2f2(GEM10C): 0.00336409
    test 907 a_b2n(GEM10C): 0.00167922
    test 908 b_f2a(GEM10C): 6378137.000
    test 909 b_f_2a(GEM10C): 6378137.000
    test 910 f_2f(GEM10C): 0.00335281
    test 911 n2e2(GEM10C): 0.00669438
    test 912 n2f(GEM10C): 0.00335281
    test 913 a_b2f_(WGS84): 298.25722356
    test 914 a_b2f2(WGS84): 0.00336409
    test 915 a_b2n(WGS84): 0.00167922
    test 916 b_f2a(WGS84): 6378137.000
    test 917 b_f_2a(WGS84): 6378137.000
    test 918 f_2f(WGS84): 0.00335281
    test 919 n2e2(WGS84): 0.00669438
    test 920 n2f(WGS84): 0.00335281
    test 921 a_b2f_(WGS66): 298.25000000
    test 922 a_b2f2(WGS66): 0.00336417
    test 923 a_b2n(WGS66): 0.00167926
    test 924 b_f2a(WGS66): 6378145.000
    test 925 b_f_2a(WGS66): 6378145.000
    test 926 f_2f(WGS66): 0.00335289
    test 927 n2e2(WGS66): 0.00669454
    test 928 n2f(WGS66): 0.00335289
    test 929 a_b2f_(Prolate): -297.25722356
    test 930 a_b2f2(Prolate): -0.00335281
    test 931 a_b2n(Prolate): -0.00167922
    test 932 b_f2a(Prolate): 6356752.314
    test 933 b_f_2a(Prolate): 6356752.314
    test 934 f_2f(Prolate): -0.00336409
    test 935 n2e2(Prolate): -0.00673950
    test 936 n2f(Prolate): -0.00336409
    test 937 a_b2f_(Krassovski1940): 298.30000000
    test 938 a_b2f2(Krassovski1940): 0.00336361
    test 939 a_b2n(Krassovski1940): 0.00167898
    test 940 b_f2a(Krassovski1940): 6378245.000
    test 941 b_f_2a(Krassovski1940): 6378245.000
    test 942 f_2f(Krassovski1940): 0.00335233
    test 943 n2e2(Krassovski1940): 0.00669342
    test 944 n2f(Krassovski1940): 0.00335233
    test 945 a_b2f_(WGS60): 298.30000000
    test 946 a_b2f2(WGS60): 0.00336361
    test 947 a_b2n(WGS60): 0.00167898
    test 948 b_f2a(WGS60): 6378165.000
    test 949 b_f_2a(WGS60): 6378165.000
    test 950 f_2f(WGS60): 0.00335233
    test 951 n2e2(WGS60): 0.00669342
    test 952 n2f(WGS60): 0.00335233
    test 953 a_b2f_(Sphere): 0.00000000
    test 954 a_b2f2(Sphere): 0.00000000
    test 955 a_b2n(Sphere): 0.00000000
    test 956 b_f2a(Sphere): 6371008.771
    test 957 b_f_2a(Sphere): 6371008.771
    test 958 f_2f(Sphere): 0.00000000
    test 959 n2e2(Sphere): 0.00000000
    test 960 n2f(Sphere): 0.00000000
    test 961 a_b2f_(SGS85): 298.25700000
    test 962 a_b2f2(SGS85): 0.00336409
    test 963 a_b2n(SGS85): 0.00167922
    test 964 b_f2a(SGS85): 6378136.000
    test 965 b_f_2a(SGS85): 6378136.000
    test 966 f_2f(SGS85): 0.00335281
    test 967 n2e2(SGS85): 0.00669438
    test 968 n2f(SGS85): 0.00335281
    test 969 a_b2f_(OSU86F): 298.25722360
    test 970 a_b2f2(OSU86F): 0.00336409
    test 971 a_b2n(OSU86F): 0.00167922
    test 972 b_f2a(OSU86F): 6378136.200
    test 973 b_f_2a(OSU86F): 6378136.200
    test 974 f_2f(OSU86F): 0.00335281
    test 975 n2e2(OSU86F): 0.00669438
    test 976 n2f(OSU86F): 0.00335281
    test 977 a_b2f_(Clarke1880): 293.46500000
    test 978 a_b2f2(Clarke1880): 0.00341921
    test 979 a_b2n(Clarke1880): 0.00170669
    test 980 b_f2a(Clarke1880): 6378249.145
    test 981 b_f_2a(Clarke1880): 6378249.145
    test 982 f_2f(Clarke1880): 0.00340756
    test 983 n2e2(Clarke1880): 0.00680351
    test 984 n2f(Clarke1880): 0.00340756
    test 985 a_b2f_(Clarke1866): 294.97869821
    test 986 a_b2f2(Clarke1866): 0.00340161
    test 987 a_b2n(Clarke1866): 0.00169792
    test 988 b_f2a(Clarke1866): 6378206.400
    test 989 b_f_2a(Clarke1866): 6378206.400
    test 990 f_2f(Clarke1866): 0.00339008
    test 991 n2e2(Clarke1866): 0.00676866
    test 992 n2f(Clarke1866): 0.00339008

    all 992 testEllipsoids.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 304.121 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testElliptic.py

    testing testElliptic.py 20.08.15
    test 1 eps4: 8.881784197e-16
    test 2 RC, RF(0.020, ...): 3.914361830671
    test 3 RC, RF(0.030, ...): 6.584789484624
    test 4 RC, RF(0.040, ...): 5.493061443341
    test 5 RC, RF(0.050, ...): 4.812118250596
    test 6 RC, RF(0.060, ...): 4.335073632453
    test 7 RC, RF(0.070, ...): 3.976827306120
    test 8 RC, RF(0.080, ...): 3.694989719259
    test 9 RC, RF(0.090, ...): 3.465735902800
    test 10 RC, RF(0.100, ...): 3.274501502373
    test 11 RC, RF(0.110, ...): 3.111812518574
    test 12 RC, RF(0.120, ...): 2.971203516685
    test 13 RC, RF(0.130, ...): 2.848090500183
    test 14 RC, RF(0.140, ...): 2.739120555165
    test 15 RC, RF(0.150, ...): 2.641776814832
    test 16 RC, RF(0.160, ...): 2.554128118830
    test 17 RC, RF(0.170, ...): 2.474664615473
    test 18 RC, RF(0.180, ...): 2.402186472893
    test 19 RC, RF(0.190, ...): 2.335726540516
    test 20 RC, RF(0.200, ...): 2.274495360058
    test 21 RC, RF(0.210, ...): 2.217841271926
    test 22 RC, RF(0.220, ...): 2.165220951174
    test 23 RC, RF(0.230, ...): 2.116177296054
    test 24 RC, RF(0.240, ...): 2.070322594382
    test 25 RC, RF(0.250, ...): 2.027325540541
    test 26 RC, RF(0.260, ...): 1.986901103492
    test 27 RC, RF(0.270, ...): 1.948802534199
    test 28 RC, RF(0.280, ...): 1.912814998209
    test 29 RC, RF(0.290, ...): 1.878750456745
    test 30 RC, RF(0.300, ...): 1.846443516895
    test 31 RC, RF(0.310, ...): 1.815748041271
    test 32 RC, RF(0.320, ...): 1.786534358134
    test 33 RC, RF(0.330, ...): 1.758686950216
    test 34 RC, RF(0.340, ...): 1.732102528083
    test 35 RC, RF(0.350, ...): 1.706688414643
    test 36 RC, RF(0.360, ...): 1.682361183106
    test 37 RC, RF(0.370, ...): 1.659045502693
    test 38 RC, RF(0.380, ...): 1.636673155658
    test 39 RC, RF(0.390, ...): 1.615182196359
    test 40 RC, RF(0.400, ...): 1.594516228743
    test 41 RC, RF(0.410, ...): 1.574623783019
    test 42 RC, RF(0.420, ...): 1.555457775830
    test 43 RC, RF(0.430, ...): 1.536975041007
    test 44 RC, RF(0.440, ...): 1.519135920258
    test 45 RC, RF(0.450, ...): 1.501903904951
    test 46 RC, RF(0.460, ...): 1.485245321610
    test 47 RC, RF(0.470, ...): 1.469129054970
    test 48 RC, RF(0.480, ...): 1.453526303390
    test 49 RC, RF(0.490, ...): 1.438410362259
    test 50 RC, RF(0.500, ...): 1.423756431678
    test 51 RC, RF(0.510, ...): 1.409541445271
    test 52 RC, RF(0.520, ...): 1.395743917431
    test 53 RC, RF(0.530, ...): 1.382343806706
    test 54 RC, RF(0.540, ...): 1.369322393343
    test 55 RC, RF(0.550, ...): 1.356662169284
    test 56 RC, RF(0.560, ...): 1.344346739158
    test 57 RC, RF(0.570, ...): 1.332360730978
    test 58 RC, RF(0.580, ...): 1.320689715446
    test 59 RC, RF(0.590, ...): 1.309320132904
    test 60 RC, RF(0.600, ...): 1.298239227085
    test 61 RC, RF(0.610, ...): 1.287434984930
    test 62 RC, RF(0.620, ...): 1.276896081822
    test 63 RC, RF(0.630, ...): 1.266611831682
    test 64 RC, RF(0.640, ...): 1.256572141405
    test 65 RC, RF(0.650, ...): 1.246767469214
    test 66 RC, RF(0.660, ...): 1.237188786540
    test 67 RC, RF(0.670, ...): 1.227827543058
    test 68 RC, RF(0.680, ...): 1.218675634611
    test 69 RC, RF(0.690, ...): 1.209725373708
    test 70 RC, RF(0.700, ...): 1.200969462383
    test 71 RC, RF(0.710, ...): 1.192400967179
    test 72 RC, RF(0.720, ...): 1.184013296070
    test 73 RC, RF(0.730, ...): 1.175800177139
    test 74 RC, RF(0.740, ...): 1.167755638871
    test 75 RC, RF(0.750, ...): 1.159873991901
    test 76 RC, RF(0.760, ...): 1.152149812097
    test 77 RC, RF(0.770, ...): 1.144577924881
    test 78 RC, RF(0.780, ...): 1.137153390647
    test 79 RC, RF(0.790, ...): 1.129871491226
    test 80 RC, RF(0.800, ...): 1.122727717281
    test 81 RC, RF(0.810, ...): 1.115717756571
    test 82 RC, RF(0.820, ...): 1.108837483013
    test 83 RC, RF(0.830, ...): 1.102082946473
    test 84 RC, RF(0.840, ...): 1.095450363236
    test 85 RC, RF(0.850, ...): 1.088936107101
    test 86 RC, RF(0.860, ...): 1.082536701044
    test 87 RC, RF(0.870, ...): 1.076248809425
    test 88 RC, RF(0.880, ...): 1.070069230678
    test 89 RC, RF(0.890, ...): 1.063994890459
    test 90 RC, RF(0.900, ...): 1.058022835225
    test 91 RC, RF(0.910, ...): 1.052150226192
    test 92 RC, RF(0.920, ...): 1.046374333669
    test 93 RC, RF(0.930, ...): 1.040692531726
    test 94 RC, RF(0.940, ...): 1.035102293176
    test 95 RC, RF(0.950, ...): 1.029601184852
    test 96 RC, RF(0.960, ...): 1.024186863158
    test 97 RC, RF(0.970, ...): 1.018857069872
    test 98 RC, RF(0.980, ...): 1.013609628192
    test 99 RC, RF(0.990, ...): 1.008442438994
    test 100 RD, RJ(0.010, ...): 8.120132781711
    test 101 RD, RJ(0.020, ...): 7.119021204087
    test 102 RD, RJ(0.030, ...): 6.544107485563
    test 103 RD, RJ(0.040, ...): 6.142532079666
    test 104 RD, RJ(0.050, ...): 5.835358486352
    test 105 RD, RJ(0.060, ...): 5.587552234737
    test 106 RD, RJ(0.070, ...): 5.380489023690
    test 107 RD, RJ(0.080, ...): 5.203088814832
    test 108 RD, RJ(0.090, ...): 5.048227960523
    test 109 RD, RJ(0.100, ...): 4.911057935480
    test 110 RD, RJ(0.110, ...): 4.788131254930
    test 111 RD, RJ(0.120, ...): 4.676910208210
    test 112 RD, RJ(0.130, ...): 4.575473423301
    test 113 RD, RJ(0.140, ...): 4.482331804788
    test 114 RD, RJ(0.150, ...): 4.396308333326
    test 115 RD, RJ(0.160, ...): 4.316456874863
    test 116 RD, RJ(0.170, ...): 4.242005741804
    test 117 RD, RJ(0.180, ...): 4.172317477477
    test 118 RD, RJ(0.190, ...): 4.106859576449
    test 119 RD, RJ(0.200, ...): 4.045182759349
    test 120 RD, RJ(0.210, ...): 3.986904580308
    test 121 RD, RJ(0.220, ...): 3.931696871490
    test 122 RD, RJ(0.230, ...): 3.879275996390
    test 123 RD, RJ(0.240, ...): 3.829395191121
    test 124 RD, RJ(0.250, ...): 3.781838479725
    test 125 RD, RJ(0.260, ...): 3.736415791191
    test 126 RD, RJ(0.270, ...): 3.692959004641
    test 127 RD, RJ(0.280, ...): 3.651318719062
    test 128 RD, RJ(0.290, ...): 3.611361594199
    test 129 RD, RJ(0.300, ...): 3.572968145771
    test 130 RD, RJ(0.310, ...): 3.536030905108
    test 131 RD, RJ(0.320, ...): 3.500452873386
    test 132 RD, RJ(0.330, ...): 3.466146215741
    test 133 RD, RJ(0.340, ...): 3.433031152013
    test 134 RD, RJ(0.350, ...): 3.401035009727
    test 135 RD, RJ(0.360, ...): 3.370091411694
    test 136 RD, RJ(0.370, ...): 3.340139575961
    test 137 RD, RJ(0.380, ...): 3.311123710009
    test 138 RD, RJ(0.390, ...): 3.282992484411
    test 139 RD, RJ(0.400, ...): 3.255698573796
    test 140 RD, RJ(0.410, ...): 3.229198255060
    test 141 RD, RJ(0.420, ...): 3.203451054514
    test 142 RD, RJ(0.430, ...): 3.178419436977
    test 143 RD, RJ(0.440, ...): 3.154068531006
    test 144 RD, RJ(0.450, ...): 3.130365885345
    test 145 RD, RJ(0.460, ...): 3.107281252437
    test 146 RD, RJ(0.470, ...): 3.084786395490
    test 147 RD, RJ(0.480, ...): 3.062854916088
    test 148 RD, RJ(0.490, ...): 3.041462099793
    test 149 RD, RJ(0.500, ...): 3.020584777522
    test 150 RD, RJ(0.510, ...): 3.000201200833
    test 151 RD, RJ(0.520, ...): 2.980290929460
    test 152 RD, RJ(0.530, ...): 2.960834729701
    test 153 RD, RJ(0.540, ...): 2.941814482427
    test 154 RD, RJ(0.550, ...): 2.923213099639
    test 155 RD, RJ(0.560, ...): 2.905014448642
    test 156 RD, RJ(0.570, ...): 2.887203283023
    test 157 RD, RJ(0.580, ...): 2.869765179714
    test 158 RD, RJ(0.590, ...): 2.852686481504
    test 159 RD, RJ(0.600, ...): 2.835954244454
    test 160 RD, RJ(0.610, ...): 2.819556189720
    test 161 RD, RJ(0.620, ...): 2.803480659351
    test 162 RD, RJ(0.630, ...): 2.787716575666
    test 163 RD, RJ(0.640, ...): 2.772253403892
    test 164 RD, RJ(0.650, ...): 2.757081117726
    test 165 RD, RJ(0.660, ...): 2.742190167580
    test 166 RD, RJ(0.670, ...): 2.727571451237
    test 167 RD, RJ(0.680, ...): 2.713216286727
    test 168 RD, RJ(0.690, ...): 2.699116387203
    test 169 RD, RJ(0.700, ...): 2.685263837661
    test 170 RD, RJ(0.710, ...): 2.671651073335
    test 171 RD, RJ(0.720, ...): 2.658270859623
    test 172 RD, RJ(0.730, ...): 2.645116273430
    test 173 RD, RJ(0.740, ...): 2.632180685789
    test 174 RD, RJ(0.750, ...): 2.619457745678
    test 175 RD, RJ(0.760, ...): 2.606941364924
    test 176 RD, RJ(0.770, ...): 2.594625704104
    test 177 RD, RJ(0.780, ...): 2.582505159384
    test 178 RD, RJ(0.790, ...): 2.570574350197
    test 179 RD, RJ(0.800, ...): 2.558828107720
    test 180 RD, RJ(0.810, ...): 2.547261464073
    test 181 RD, RJ(0.820, ...): 2.535869642198
    test 182 RD, RJ(0.830, ...): 2.524648046356
    test 183 RD, RJ(0.840, ...): 2.513592253209
    test 184 RD, RJ(0.850, ...): 2.502698003435
    test 185 RD, RJ(0.860, ...): 2.491961193848
    test 186 RD, RJ(0.870, ...): 2.481377869975
    test 187 RD, RJ(0.880, ...): 2.470944219069
    test 188 RD, RJ(0.890, ...): 2.460656563526
    test 189 RD, RJ(0.900, ...): 2.450511354674
    test 190 RD, RJ(0.910, ...): 2.440505166909
    test 191 RD, RJ(0.920, ...): 2.430634692166
    test 192 RD, RJ(0.930, ...): 2.420896734686
    test 193 RD, RJ(0.940, ...): 2.411288206073
    test 194 RD, RJ(0.950, ...): 2.401806120619
    test 195 RD, RJ(0.960, ...): 2.392447590873
    test 196 RD, RJ(0.970, ...): 2.383209823448
    test 197 RD, RJ(0.980, ...): 2.374090115050
    test 198 RD, RJ(0.990, ...): 2.365085848706

    test 199 eps4: 8.881784197e-16
    test 200 cK: 1.612441349
    test 201 cE: 1.530757637
    test 202 eps: 0.0263340
    test 203 fE(phi): 0.348372822
    test 204 fDelta(sn, cn): 0.994133906
    test 205 fD(sn, cn, dn): 0.013885234
    test 206 fE(sn, cn, dn): 0.348372822
    test 207 fEd(PI_2): 0.027415224
    test 208 fEinv(PI_2): 1.612999420
    test 209 fF(sn, cn, dn): 0.349761345
    test 210 fG(sn, cn, dn): 0.348372822
    test 211 fH(sn, cn, dn): 0.363646580
    test 212 fPi(sn, cn, dn): 0.349761345
    test 213 fPi(sn, None, dn): invokation Elliptic.fPi(0, None, 1): invalid
    test 214 fPi(sn, dn, None): invokation Elliptic.fPi(0, 1, None): invalid

    test 215 deltaD(sn, cn, dn): -0.3223642
    test 216 deltaE(sn, cn, dn): 0.0084191
    test 217 deltaEinv(sn, cn): -0.0082518
    test 218 deltaF(sn, cn, dn): -0.0083379
    test 219 deltaG(sn, cn, dn): 0.0084191
    test 220 deltaH(sn, cn, dn): 0.3688975
    test 221 deltaPi(sn, cn, dn): -0.0083379
    test 222 deltaPi(sn, None, dn): invokation Elliptic.deltaPi(0, None, 1): invalid
    test 223 deltaPi(sn, dn, None): invokation Elliptic.deltaPi(0, 1, None): invalid

    test 224 RF(1, 2, 0): 1.3110287771461
    test 225 RF(2, 3, 4): 0.58408284167715
    test 226 RC(0, 1/4): 3.1415926535898
    test 227 RC(9/4, 2): 0.69314718055995
    test 228 RJ(0, 1, 2, 3): 0.77688623778582
    test 229 RJ(2, 3, 4, 5): 0.14297579667157
    test 230 RD(0, 2, 1): 1.7972103521034
    test 231 RD(2, 3, 4): 0.16510527294261
    test 232 RG(0, 16, 16): 3.1415926535898
    test 233 RG(2,  3,  4): 1.7255030280692
    test 234 RG(0,  0.0796, 4): 1.0284758090288

    test 235 sncndn(x): 0.0, 1.0, 1.0
    test 236 sncndn(x): 1.0, -0.0, 1.0
    test 237 sncndn(x): 0.0, 1.0, 1.0
    test 238 sncndn(x): 0.917152336, 0.398536815, 0.398536815
    test 239 sncndn(x): <class 'pygeodesy.elliptic.Elliptic3Tuple'>
    test 240 copy(Elliptic): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 241 Elliptic.copy(): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 242 k2 alpha2 kp2 alphap2: (0.0, 0.0, 0.0, 0.0)
    test 243 k2 alpha2 kp2 alphap2: (0.25, 0.25, 0.25, 0.25)
    test 244 k2 alpha2 kp2 alphap2: (0.5, 0.5, 0.5, 0.5)
    test 245 k2 alpha2 kp2 alphap2: (0.75, 0.75, 0.75, 0.75)

    all 245 testElliptic.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 210.291 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEpsg.py

    testing testEpsg.py 20.01.17
    test 1 Epsg: 32661
    test 2 0 N: (0, 'N')
    test 3 1 N: (1, 'N')
    test 4 2 N: (2, 'N')
    test 5 3 N: (3, 'N')
    test 6 4 N: (4, 'N')
    test 7 5 N: (5, 'N')
    test 8 6 N: (6, 'N')
    test 9 7 N: (7, 'N')
    test 10 8 N: (8, 'N')
    test 11 9 N: (9, 'N')
    test 12 10 N: (10, 'N')
    test 13 11 N: (11, 'N')
    test 14 12 N: (12, 'N')
    test 15 13 N: (13, 'N')
    test 16 14 N: (14, 'N')
    test 17 15 N: (15, 'N')
    test 18 16 N: (16, 'N')
    test 19 17 N: (17, 'N')
    test 20 18 N: (18, 'N')
    test 21 19 N: (19, 'N')
    test 22 20 N: (20, 'N')
    test 23 21 N: (21, 'N')
    test 24 22 N: (22, 'N')
    test 25 23 N: (23, 'N')
    test 26 24 N: (24, 'N')
    test 27 25 N: (25, 'N')
    test 28 26 N: (26, 'N')
    test 29 27 N: (27, 'N')
    test 30 28 N: (28, 'N')
    test 31 29 N: (29, 'N')
    test 32 30 N: (30, 'N')
    test 33 31 N: (31, 'N')
    test 34 32 N: (32, 'N')
    test 35 33 N: (33, 'N')
    test 36 34 N: (34, 'N')
    test 37 35 N: (35, 'N')
    test 38 36 N: (36, 'N')
    test 39 37 N: (37, 'N')
    test 40 38 N: (38, 'N')
    test 41 39 N: (39, 'N')
    test 42 40 N: (40, 'N')
    test 43 41 N: (41, 'N')
    test 44 42 N: (42, 'N')
    test 45 43 N: (43, 'N')
    test 46 44 N: (44, 'N')
    test 47 45 N: (45, 'N')
    test 48 46 N: (46, 'N')
    test 49 47 N: (47, 'N')
    test 50 48 N: (48, 'N')
    test 51 49 N: (49, 'N')
    test 52 50 N: (50, 'N')
    test 53 51 N: (51, 'N')
    test 54 52 N: (52, 'N')
    test 55 53 N: (53, 'N')
    test 56 54 N: (54, 'N')
    test 57 55 N: (55, 'N')
    test 58 56 N: (56, 'N')
    test 59 57 N: (57, 'N')
    test 60 58 N: (58, 'N')
    test 61 59 N: (59, 'N')
    test 62 60 N: (60, 'N')
    test 63 Epsg: 32761
    test 64 0 S: (0, 'S')
    test 65 1 S: (1, 'S')
    test 66 2 S: (2, 'S')
    test 67 3 S: (3, 'S')
    test 68 4 S: (4, 'S')
    test 69 5 S: (5, 'S')
    test 70 6 S: (6, 'S')
    test 71 7 S: (7, 'S')
    test 72 8 S: (8, 'S')
    test 73 9 S: (9, 'S')
    test 74 10 S: (10, 'S')
    test 75 11 S: (11, 'S')
    test 76 12 S: (12, 'S')
    test 77 13 S: (13, 'S')
    test 78 14 S: (14, 'S')
    test 79 15 S: (15, 'S')
    test 80 16 S: (16, 'S')
    test 81 17 S: (17, 'S')
    test 82 18 S: (18, 'S')
    test 83 19 S: (19, 'S')
    test 84 20 S: (20, 'S')
    test 85 21 S: (21, 'S')
    test 86 22 S: (22, 'S')
    test 87 23 S: (23, 'S')
    test 88 24 S: (24, 'S')
    test 89 25 S: (25, 'S')
    test 90 26 S: (26, 'S')
    test 91 27 S: (27, 'S')
    test 92 28 S: (28, 'S')
    test 93 29 S: (29, 'S')
    test 94 30 S: (30, 'S')
    test 95 31 S: (31, 'S')
    test 96 32 S: (32, 'S')
    test 97 33 S: (33, 'S')
    test 98 34 S: (34, 'S')
    test 99 35 S: (35, 'S')
    test 100 36 S: (36, 'S')
    test 101 37 S: (37, 'S')
    test 102 38 S: (38, 'S')
    test 103 39 S: (39, 'S')
    test 104 40 S: (40, 'S')
    test 105 41 S: (41, 'S')
    test 106 42 S: (42, 'S')
    test 107 43 S: (43, 'S')
    test 108 44 S: (44, 'S')
    test 109 45 S: (45, 'S')
    test 110 46 S: (46, 'S')
    test 111 47 S: (47, 'S')
    test 112 48 S: (48, 'S')
    test 113 49 S: (49, 'S')
    test 114 50 S: (50, 'S')
    test 115 51 S: (51, 'S')
    test 116 52 S: (52, 'S')
    test 117 53 S: (53, 'S')
    test 118 54 S: (54, 'S')
    test 119 55 S: (55, 'S')
    test 120 56 S: (56, 'S')
    test 121 57 S: (57, 'S')
    test 122 58 S: (58, 'S')
    test 123 59 S: (59, 'S')
    test 124 60 S: (60, 'S')
    test 125 Ups: 32761
    test 126 Ups: 00A S
    test 127 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 128 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 129 Ups: 32761
    test 130 Ups: 00B S
    test 131 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 132 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 133 Ups: 32661
    test 134 Ups: 00Y N
    test 135 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 136 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 137 Ups: 32661
    test 138 Ups: 00Z N
    test 139 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 140 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 141 Epsg: 32661
    test 142 0 N: (0, 'N')
    test 143 1 N: (1, 'N')
    test 144 2 N: (2, 'N')
    test 145 3 N: (3, 'N')
    test 146 4 N: (4, 'N')
    test 147 5 N: (5, 'N')
    test 148 6 N: (6, 'N')
    test 149 7 N: (7, 'N')
    test 150 8 N: (8, 'N')
    test 151 9 N: (9, 'N')
    test 152 10 N: (10, 'N')
    test 153 11 N: (11, 'N')
    test 154 12 N: (12, 'N')
    test 155 13 N: (13, 'N')
    test 156 14 N: (14, 'N')
    test 157 15 N: (15, 'N')
    test 158 16 N: (16, 'N')
    test 159 17 N: (17, 'N')
    test 160 18 N: (18, 'N')
    test 161 19 N: (19, 'N')
    test 162 20 N: (20, 'N')
    test 163 21 N: (21, 'N')
    test 164 22 N: (22, 'N')
    test 165 23 N: (23, 'N')
    test 166 24 N: (24, 'N')
    test 167 25 N: (25, 'N')
    test 168 26 N: (26, 'N')
    test 169 27 N: (27, 'N')
    test 170 28 N: (28, 'N')
    test 171 29 N: (29, 'N')
    test 172 30 N: (30, 'N')
    test 173 31 N: (31, 'N')
    test 174 32 N: (32, 'N')
    test 175 33 N: (33, 'N')
    test 176 34 N: (34, 'N')
    test 177 35 N: (35, 'N')
    test 178 36 N: (36, 'N')
    test 179 37 N: (37, 'N')
    test 180 38 N: (38, 'N')
    test 181 39 N: (39, 'N')
    test 182 40 N: (40, 'N')
    test 183 41 N: (41, 'N')
    test 184 42 N: (42, 'N')
    test 185 43 N: (43, 'N')
    test 186 44 N: (44, 'N')
    test 187 45 N: (45, 'N')
    test 188 46 N: (46, 'N')
    test 189 47 N: (47, 'N')
    test 190 48 N: (48, 'N')
    test 191 49 N: (49, 'N')
    test 192 50 N: (50, 'N')
    test 193 51 N: (51, 'N')
    test 194 52 N: (52, 'N')
    test 195 53 N: (53, 'N')
    test 196 54 N: (54, 'N')
    test 197 55 N: (55, 'N')
    test 198 56 N: (56, 'N')
    test 199 57 N: (57, 'N')
    test 200 58 N: (58, 'N')
    test 201 59 N: (59, 'N')
    test 202 60 N: (60, 'N')
    test 203 Epsg: 32761
    test 204 0 S: (0, 'S')
    test 205 1 S: (1, 'S')
    test 206 2 S: (2, 'S')
    test 207 3 S: (3, 'S')
    test 208 4 S: (4, 'S')
    test 209 5 S: (5, 'S')
    test 210 6 S: (6, 'S')
    test 211 7 S: (7, 'S')
    test 212 8 S: (8, 'S')
    test 213 9 S: (9, 'S')
    test 214 10 S: (10, 'S')
    test 215 11 S: (11, 'S')
    test 216 12 S: (12, 'S')
    test 217 13 S: (13, 'S')
    test 218 14 S: (14, 'S')
    test 219 15 S: (15, 'S')
    test 220 16 S: (16, 'S')
    test 221 17 S: (17, 'S')
    test 222 18 S: (18, 'S')
    test 223 19 S: (19, 'S')
    test 224 20 S: (20, 'S')
    test 225 21 S: (21, 'S')
    test 226 22 S: (22, 'S')
    test 227 23 S: (23, 'S')
    test 228 24 S: (24, 'S')
    test 229 25 S: (25, 'S')
    test 230 26 S: (26, 'S')
    test 231 27 S: (27, 'S')
    test 232 28 S: (28, 'S')
    test 233 29 S: (29, 'S')
    test 234 30 S: (30, 'S')
    test 235 31 S: (31, 'S')
    test 236 32 S: (32, 'S')
    test 237 33 S: (33, 'S')
    test 238 34 S: (34, 'S')
    test 239 35 S: (35, 'S')
    test 240 36 S: (36, 'S')
    test 241 37 S: (37, 'S')
    test 242 38 S: (38, 'S')
    test 243 39 S: (39, 'S')
    test 244 40 S: (40, 'S')
    test 245 41 S: (41, 'S')
    test 246 42 S: (42, 'S')
    test 247 43 S: (43, 'S')
    test 248 44 S: (44, 'S')
    test 249 45 S: (45, 'S')
    test 250 46 S: (46, 'S')
    test 251 47 S: (47, 'S')
    test 252 48 S: (48, 'S')
    test 253 49 S: (49, 'S')
    test 254 50 S: (50, 'S')
    test 255 51 S: (51, 'S')
    test 256 52 S: (52, 'S')
    test 257 53 S: (53, 'S')
    test 258 54 S: (54, 'S')
    test 259 55 S: (55, 'S')
    test 260 56 S: (56, 'S')
    test 261 57 S: (57, 'S')
    test 262 58 S: (58, 'S')
    test 263 59 S: (59, 'S')
    test 264 60 S: (60, 'S')
    test 265 Ups: 32761
    test 266 Ups: 00A S
    test 267 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 268 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 269 Ups: 32761
    test 270 Ups: 00B S
    test 271 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 272 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 273 Ups: 32661
    test 274 Ups: 00Y N
    test 275 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 276 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 277 Ups: 32661
    test 278 Ups: 00Z N
    test 279 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 280 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 281 TMcoord 1: 38W N
    test 282 TMcoord 2: 34P N
    test 283 TMcoord 3: 43Q N
    test 284 TMcoord 4: 35Q N
    test 285 TMcoord 5: 37N N
    test 286 TMcoord 6: 34W N
    test 287 TMcoord 7: 40V N
    test 288 TMcoord 8: 34P N
    test 289 TMcoord 9: 41S N
    test 290 TMcoord 10: 41X N
    test 291 TMcoord 11: 43X N
    test 292 TMcoord 12: 44Q N
    test 293 TMcoord 13: 44R N
    test 294 TMcoord 14: 39U N
    test 295 TMcoord 15: 44P N
    test 296 TMcoord 16: 39R N
    test 297 TMcoord 17: 41W N
    test 298 TMcoord 18: 45U N
    test 299 TMcoord 19: 32R N
    test 300 TMcoord 20: 44X N
    test 301 TMcoord 21: 35T N
    test 302 TMcoord 22: 32T N
    test 303 TMcoord 23: 31T N
    test 304 TMcoord 24: 35N N
    test 305 TMcoord 25: 45P N
    test 306 TMcoord 26: 33V N
    test 307 TMcoord 27: 41Q N
    test 308 TMcoord 28: 40X N
    test 309 TMcoord 29: 33P N
    test 310 TMcoord 30: 40S N
    test 311 TMcoord 31: 37T N
    test 312 TMcoord 32: 33X N
    test 313 TMcoord 33: 41U N
    test 314 TMcoord 34: 43Q N
    test 315 TMcoord 35: 42S N
    test 316 TMcoord 36: 33S N
    test 317 TMcoord 37: 35X N
    test 318 TMcoord 38: 38N N
    test 319 TMcoord 39: 44P N
    test 320 TMcoord 40: 33U N
    test 321 TMcoord 41: 37W N
    test 322 TMcoord 42: 36T N
    test 323 TMcoord 43: 36Q N
    test 324 TMcoord 44: 34S N
    test 325 TMcoord 45: 37S N
    test 326 TMcoord 46: 34N N
    test 327 TMcoord 47: 34T N
    test 328 TMcoord 48: 43Q N
    test 329 TMcoord 49: 32N N
    test 330 TMcoord 50: 31Q N
    test 331 TMcoord 51: 45R N
    test 332 TMcoord 52: 45R N
    test 333 TMcoord 53: 34W N
    test 334 TMcoord 54: 44V N
    test 335 TMcoord 55: 44S N
    test 336 TMcoord 56: 39R N
    test 337 TMcoord 57: 00Z N
    test 338 TMcoord 58: 36R N
    test 339 TMcoord 59: 41V N
    test 340 TMcoord 60: 42N N
    test 341 TMcoord 61: 43S N
    test 342 TMcoord 62: 34N N
    test 343 TMcoord 63: 34U N
    test 344 TMcoord 64: 38V N
    test 345 TMcoord 65: 34Q N
    test 346 TMcoord 66: 38P N
    test 347 TMcoord 67: 42S N
    test 348 TMcoord 68: 44S N
    test 349 TMcoord 69: 31Q N
    test 350 TMcoord 70: 40W N
    test 351 TMcoord 71: 35X N
    test 352 TMcoord 72: 32T N
    test 353 TMcoord 73: 45U N
    test 354 TMcoord 74: 40Q N
    test 355 TMcoord 75: 31T N
    test 356 TMcoord 76: 44R N
    test 357 TMcoord 77: 34U N
    test 358 TMcoord 78: 38P N
    test 359 TMcoord 79: 38Q N
    test 360 TMcoord 80: 45N N
    test 361 TMcoord 81: 31S N
    test 362 TMcoord 82: 41U N
    test 363 TMcoord 83: 40V N
    test 364 TMcoord 84: 43X N
    test 365 TMcoord 85: 35N N
    test 366 TMcoord 86: 44P N
    test 367 TMcoord 87: 41N N
    test 368 TMcoord 88: 38Q N
    test 369 TMcoord 89: 43X N
    test 370 TMcoord 90: 36V N
    test 371 TMcoord 91: 34Q N
    test 372 TMcoord 92: 35W N
    test 373 TMcoord 93: 45U N
    test 374 TMcoord 94: 40R N
    test 375 TMcoord 95: 36R N
    test 376 TMcoord 96: 35S N
    test 377 TMcoord 97: 41R N
    test 378 TMcoord 98: 39Q N
    test 379 TMcoord 99: 37T N
    test 380 TMcoord 100: 42P N
    test 381 TMcoord 101: 35T N
    test 382 TMcoord 102: 34Q N
    test 383 TMcoord 103: 41T N
    test 384 TMcoord 104: 43R N
    test 385 TMcoord 105: 34Q N
    test 386 TMcoord 106: 45P N
    test 387 TMcoord 107: 31P N
    test 388 TMcoord 108: 44V N
    test 389 TMcoord 109: 42X N
    test 390 TMcoord 110: 33R N
    test 391 TMcoord 111: 37W N
    test 392 TMcoord 112: 31S N
    test 393 TMcoord 113: 42N N
    test 394 TMcoord 114: 39N N
    test 395 TMcoord 115: 39T N
    test 396 TMcoord 116: 39P N
    test 397 TMcoord 117: 34U N
    test 398 TMcoord 118: 41P N
    test 399 TMcoord 119: 37R N
    test 400 TMcoord 120: 44Q N
    test 401 TMcoord 121: 32V N
    test 402 TMcoord 122: 41R N
    test 403 TMcoord 123: 36T N
    test 404 TMcoord 124: 42U N
    test 405 TMcoord 125: 42U N
    test 406 TMcoord 126: 39T N
    test 407 TMcoord 127: 32T N
    test 408 TMcoord 128: 32Q N
    test 409 TMcoord 129: 38P N
    test 410 TMcoord 130: 34Q N
    test 411 TMcoord 131: 36V N
    test 412 TMcoord 132: 36T N
    test 413 TMcoord 133: 43T N
    test 414 TMcoord 134: 41W N
    test 415 TMcoord 135: 32V N
    test 416 TMcoord 136: 39X N
    test 417 TMcoord 137: 32U N
    test 418 TMcoord 138: 37X N
    test 419 TMcoord 139: 35N N
    test 420 TMcoord 140: 36P N
    test 421 TMcoord 141: 31S N
    test 422 TMcoord 142: 36N N
    test 423 TMcoord 143: 42S N
    test 424 TMcoord 144: 44N N
    test 425 TMcoord 145: 44P N
    test 426 TMcoord 146: 39U N
    test 427 TMcoord 147: 45Q N
    test 428 TMcoord 148: 41W N
    test 429 TMcoord 149: 41N N
    test 430 TMcoord 150: 32S N
    test 431 TMcoord 151: 32N N
    test 432 TMcoord 152: 32T N
    test 433 TMcoord 153: 38R N
    test 434 TMcoord 154: 32V N
    test 435 TMcoord 155: 37Q N
    test 436 TMcoord 156: 44N N
    test 437 TMcoord 157: 34W N
    test 438 TMcoord 158: 45N N
    test 439 TMcoord 159: 42S N
    test 440 TMcoord 160: 40T N
    test 441 TMcoord 161: 31U N
    test 442 TMcoord 162: 45Q N
    test 443 TMcoord 163: 40U N
    test 444 TMcoord 164: 45T N
    test 445 TMcoord 165: 40R N
    test 446 TMcoord 166: 31V N
    test 447 TMcoord 167: 45P N
    test 448 TMcoord 168: 43W N
    test 449 TMcoord 169: 43U N
    test 450 TMcoord 170: 44V N
    test 451 TMcoord 171: 40P N
    test 452 TMcoord 172: 36Q N
    test 453 TMcoord 173: 42Q N
    test 454 TMcoord 174: 41Q N
    test 455 TMcoord 175: 32S N
    test 456 TMcoord 176: 39P N
    test 457 TMcoord 177: 39Q N
    test 458 TMcoord 178: 39T N
    test 459 TMcoord 179: 34U N
    test 460 TMcoord 180: 32W N
    test 461 TMcoord 181: 41U N
    test 462 TMcoord 182: 31Q N
    test 463 TMcoord 183: 40N N
    test 464 TMcoord 184: 40T N
    test 465 TMcoord 185: 38P N
    test 466 TMcoord 186: 44P N
    test 467 TMcoord 187: 40N N
    test 468 TMcoord 188: 44V N
    test 469 TMcoord 189: 41V N
    test 470 TMcoord 190: 43Q N
    test 471 TMcoord 191: 43X N
    test 472 TMcoord 192: 39N N
    test 473 TMcoord 193: 38T N
    test 474 TMcoord 194: 32R N
    test 475 TMcoord 195: 37S N
    test 476 TMcoord 196: 44W N
    test 477 TMcoord 197: 43V N
    test 478 TMcoord 198: 35T N
    test 479 TMcoord 199: 44W N
    test 480 TMcoord 200: 44X N
    test 481 TMcoord 201: 33Q N
    test 482 TMcoord 202: 40W N
    test 483 TMcoord 203: 43S N
    test 484 TMcoord 204: 32U N
    test 485 TMcoord 205: 33V N
    test 486 TMcoord 206: 34R N
    test 487 TMcoord 207: 39S N
    test 488 TMcoord 208: 43W N
    test 489 TMcoord 209: 39T N
    test 490 TMcoord 210: 31W N
    test 491 TMcoord 211: 45R N
    test 492 TMcoord 212: 34W N
    test 493 TMcoord 213: 32T N
    test 494 TMcoord 214: 31P N
    test 495 TMcoord 215: 44V N
    test 496 TMcoord 216: 45U N
    test 497 TMcoord 217: 43R N
    test 498 TMcoord 218: 31N N
    test 499 TMcoord 219: 43T N
    test 500 TMcoord 220: 45R N
    test 501 TMcoord 221: 39N N
    test 502 TMcoord 222: 37S N
    test 503 TMcoord 223: 31R N
    test 504 TMcoord 224: 38Q N
    test 505 TMcoord 225: 40V N
    test 506 TMcoord 226: 45N N
    test 507 TMcoord 227: 44R N
    test 508 TMcoord 228: 43P N
    test 509 TMcoord 229: 42P N
    test 510 TMcoord 230: 45S N
    test 511 TMcoord 231: 42N N
    test 512 TMcoord 232: 38S N
    test 513 TMcoord 233: 32T N
    test 514 TMcoord 234: 41T N
    test 515 TMcoord 235: 34S N
    test 516 TMcoord 236: 40R N
    test 517 TMcoord 237: 35V N
    test 518 TMcoord 238: 38N N
    test 519 TMcoord 239: 40V N
    test 520 TMcoord 240: 36R N
    test 521 TMcoord 241: 37W N
    test 522 TMcoord 242: 45R N
    test 523 TMcoord 243: 37V N
    test 524 TMcoord 244: 33P N
    test 525 TMcoord 245: 32U N
    test 526 TMcoord 246: 38T N
    test 527 TMcoord 247: 37N N
    test 528 TMcoord 248: 36R N
    test 529 TMcoord 249: 44R N
    test 530 TMcoord 250: 44Q N
    test 531 TMcoord 251: 45R N
    test 532 TMcoord 252: 34N N
    test 533 TMcoord 253: 43S N
    test 534 TMcoord 254: 40Q N
    test 535 TMcoord 255: 33T N
    test 536 TMcoord 256: 44P N
    test 537 TMcoord 257: 39N N
    test 538 TMcoord 258: 40Q N

    all 538 testEpsg.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 185.385 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testErrors.py

    testing testErrors.py 20.09.27 (module pygeodesy.errors 20.10.09)
    test 1 AssertionError: name ('value'): test1 txt
    test 2 AssertionError: 'name=value' MISSING: test2 txt
    test 3 AttributeError: name ('value'): test1 txt
    test 4 AttributeError: 'name=value' MISSING: test2 txt
    test 5 IndexError: name ('value'): test1 txt
    test 6 IndexError: 'name=value' MISSING: test2 txt
    test 7 LimitError: name ('value'): test1 txt
    test 8 LimitError: 'name=value' MISSING: test2 txt
    test 9 NameError: name ('value'): test1 txt
    test 10 NameError: 'name=value' MISSING: test2 txt
    test 11 ParseError: name ('value'): test1 txt
    test 12 ParseError: 'name=value' MISSING: test2 txt
    test 13 TypeError: type(name) ('value'): test1 txt
    test 14 TypeError: 'name=value' MISSING: test2 txt
    test 15 ClipError: name ('value'): test1 txt
    test 16 ClipError: 'name=value' MISSING: test2 txt
    test 17 CrossError: name ('value'): test1 txt
    test 18 CrossError: 'name=value' MISSING: test2 txt
    test 19 CSSError: name ('value'): test1 txt
    test 20 CSSError: 'name=value' MISSING: test2 txt
    test 21 EcefError: name ('value'): test1 txt
    test 22 EcefError: 'name=value' MISSING: test2 txt
    test 23 EllipticError: name ('value'): test1 txt
    test 24 EllipticError: 'name=value' MISSING: test2 txt
    test 25 EPSGError: name ('value'): test1 txt
    test 26 EPSGError: 'name=value' MISSING: test2 txt
    test 27 ETMError: name ('value'): test1 txt
    test 28 ETMError: 'name=value' MISSING: test2 txt
    test 29 FrechetError: name ('value'): test1 txt
    test 30 FrechetError: 'name=value' MISSING: test2 txt
    test 31 GARSError: name ('value'): test1 txt
    test 32 GARSError: 'name=value' MISSING: test2 txt
    test 33 GeohashError: name ('value'): test1 txt
    test 34 GeohashError: 'name=value' MISSING: test2 txt
    test 35 GeoidError: name ('value'): test1 txt
    test 36 GeoidError: 'name=value' MISSING: test2 txt
    test 37 HausdorffError: name ('value'): test1 txt
    test 38 HausdorffError: 'name=value' MISSING: test2 txt
    test 39 HeightError: name ('value'): test1 txt
    test 40 HeightError: 'name=value' MISSING: test2 txt
    test 41 LazyImportError: name ('value'): test1 txt
    test 42 LazyImportError: 'name=value' MISSING: test2 txt
    test 43 LCCError: name ('value'): test1 txt
    test 44 LCCError: 'name=value' MISSING: test2 txt
    test 45 MGRSError: name ('value'): test1 txt
    test 46 MGRSError: 'name=value' MISSING: test2 txt
    test 47 OSGRError: name ('value'): test1 txt
    test 48 OSGRError: 'name=value' MISSING: test2 txt
    test 49 PGMError: name ('value'): test1 txt
    test 50 PGMError: 'name=value' MISSING: test2 txt
    test 51 PointsError: name ('value'): test1 txt
    test 52 PointsError: 'name=value' MISSING: test2 txt
    test 53 RefFrameError: name ('value'): test1 txt
    test 54 RefFrameError: 'name=value' MISSING: test2 txt
    test 55 SciPyError: name ('value'): test1 txt
    test 56 SciPyError: 'name=value' MISSING: test2 txt
    test 57 SciPyWarning: name ('value'): test1 txt
    test 58 SciPyWarning: 'name=value' MISSING: test2 txt
    test 59 TRFError: name ('value'): test1 txt
    test 60 TRFError: 'name=value' MISSING: test2 txt
    test 61 UnitError: name ('value'): test1 txt
    test 62 UnitError: 'name=value' MISSING: test2 txt
    test 63 UPSError: name ('value'): test1 txt
    test 64 UPSError: 'name=value' MISSING: test2 txt
    test 65 UTMError: name ('value'): test1 txt
    test 66 UTMError: 'name=value' MISSING: test2 txt
    test 67 UTMUPSError: name ('value'): test1 txt
    test 68 UTMUPSError: 'name=value' MISSING: test2 txt
    test 69 VectorError: name ('value'): test1 txt
    test 70 VectorError: 'name=value' MISSING: test2 txt
    test 71 VincentyError: name ('value'): test1 txt
    test 72 VincentyError: 'name=value' MISSING: test2 txt
    test 73 WebMercatorError: name ('value'): test1 txt
    test 74 WebMercatorError: 'name=value' MISSING: test2 txt
    test 75 WGRSError: name ('value'): test1 txt
    test 76 WGRSError: 'name=value' MISSING: test2 txt
    test 77 _InvalidError: zero (1): invalid
    test 78 _InvalidError: ValueError('zero (1): invalid')
    test 79 _InvalidError: one (2) or zero (1): outside
    test 80 _InvalidError: ValueError('one (2) or zero (1): outside')
    test 81 _InvalidError: one (2) or zero (1): outside
    test 82 _InvalidError: RangeError('one (2) or zero (1): outside')
    test 83 _IsnotError: _None (None) not an int or float
    test 84 _IsnotError: TypeError('_None (None) not an int or float')
    test 85 _IsnotError: _None (None) not scalar
    test 86 _IsnotError: TypeError('_None (None) not scalar')
    test 87 _IsnotError: _None (None) not scalar: invalid
    test 88 _IsnotError: LimitError('_None (None) not scalar: invalid')
    test 89 LenError: LenError(a, b, c, d) len 1 vs 2 vs 3 vs 4: invalid
    test 90 crosserrors: True
    test 91 crosserrors: False
    test 92 limiterrors: True
    test 93 limiterrors: False
    test 94 rangerrors: True
    test 95 rangerrors: False
    test 96 exception_chaining: None
    test 97 exception_chaining: None
    test 98 exception_chaining: None
    test 99 _xkwds_get: test1
    test 100 _xkwds_get: test2
    test 101 _xkwds_get: _xkwds_get({}): no name=default kwargs
    test 102 _xkwds_get: _xkwds_get({}, n1='d1', n2='d2'): multiple name=default kwargs
    test 103 _xkwds_pop: test1
    test 104 _xkwds_pop: test2
    test 105 _xkwds_pop: _xkwds_pop({}): no name=default kwargs
    test 106 _xkwds_pop: _xkwds_pop({}, n1='d1', n2='d2'): multiple name=default kwargs

    all 106 testErrors.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 2.215 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEtm.py

    testing testEtm.py 20.09.08 (module pygeodesy.etm 20.09.27)

    testExactTransverseMercator(pygeodesy.etm, 20.09.27)
    test 1 name: test
    test 2 toStr: datum='WGS84', extendp=True, k0=0.9996, lon0=0.0, name='test'
    test 3 easting: -59401.921148
    test 4 northing: 4472390.031129
    test 5 gamma: -0.453697
    test 6 scale: 0.999643
    test 7 lat: 40.400000
    test 8 lon: -3.700000
    test 9 gamma: -0.453697
    test 10 scale: 0.999643
    test 11 easting: -59401.921148
    test 12 northing: 4472390.031129
    test 13 gamma: -0.453697
    test 14 scale: 0.999643
    test 15 easting: 25495.511523
    test 16 northing: 4461098.320889
    test 17 gamma: 0.194038
    test 18 scale: 0.999608
    test 19 lat: 40.300000
    test 20 lon: -74.700000
    test 21 gamma: 0.194038
    test 22 scale: 0.999608
    test 23 easting: 25495.511523
    test 24 northing: 4461098.320889
    test 25 gamma: 0.194038
    test 26 scale: 0.999608
    test 27 lat: -2.00000000
    test 28 lon: 88.00000000
    test 29 gamma: 67.63332900
    test 30 scale: 26.33699547
    test 31 easting: 29735142.37835703
    test 32 northing: 4235043.60793304
    test 33 gamma: 67.63332900
    test 34 scale: 26.33699547
    test 35 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 36 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testExactTransverseMercator(pygeodesy.etm, 20.09.27)
    test 37 name: test
    test 38 toStr: datum='WGS84', extendp=False, k0=0.9996, lon0=0.0, name='test'
    test 39 easting: -59401.921148
    test 40 northing: 4472390.031129
    test 41 gamma: -0.453697
    test 42 scale: 0.999643
    test 43 lat: 40.400000
    test 44 lon: -3.700000
    test 45 gamma: -0.453697
    test 46 scale: 0.999643
    test 47 easting: -59401.921148
    test 48 northing: 4472390.031129
    test 49 gamma: -0.453697
    test 50 scale: 0.999643
    test 51 easting: 25495.511523
    test 52 northing: 4461098.320889
    test 53 gamma: 0.194038
    test 54 scale: 0.999608
    test 55 lat: 40.300000
    test 56 lon: -74.700000
    test 57 gamma: 0.194038
    test 58 scale: 0.999608
    test 59 easting: 25495.511523
    test 60 northing: 4461098.320889
    test 61 gamma: 0.194038
    test 62 scale: 0.999608
    test 63 lat: -2.00000000
    test 64 lon: 88.00000000
    test 65 gamma: 67.63332900
    test 66 scale: 26.33699547
    test 67 easting: -0.000
    test 68 northing: -9997964.943
    test 69 gamma: 120.000
    test 70 scale: 1.000
    test 71 lat: -90.000
    test 72 lon: 0.000
    test 73 gamma: -0.000  FAILED, KNOWN, expected 0.000
    test 74 scale: 1.000
    test 75 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 76 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testLatLon(pygeodesy.etm, 20.09.27)
    test 77 toEtm8: 45 S -20297797 5336899
    test 78 name: test
    test 79 toUtm: 45 S -20297797 5336899
    test 80 name: test
    test 81 toETM5: 45 S -20297797 5336899
    test 82 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 83 .name: test
    test 84 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 85 .name: test
    test 86 parse: 31 N 448251 5411932
    test 87 name: parse
    test 88 parseETM: 31 N 448251 5411932
    test 89 name: parse

    testLatLon(pygeodesy.etm, 20.09.27)
    test 90 toEtm8: 45 S -20297797 5336899
    test 91 name: test
    test 92 toUtm: 45 S -20297797 5336899
    test 93 name: test
    test 94 toETM5: 45 S -20297797 5336899
    test 95 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 96 .name: test
    test 97 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 98 .name: test
    test 99 parse: 31 N 448251 5411932
    test 100 name: parse
    test 101 parseETM: 31 N 448251 5411932
    test 102 name: parse

    1 of 102 testEtm.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 195.029 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testEtmTMcoords.py

    testing testEtmTMcoords.py 19.05.23 (module pygeodesy.etm 20.09.27)
    test 1 line 1 toEtm8.easting: 1548706.791619
    test 2 line 1 toEtm8.northing: 8451449.198772
    test 3 line 1 toEtm8.convergence: 43.922790
    test 4 line 1 toEtm8.scale: 1.029060
    test 5 line 1 toEtm8.lat: 70.579277
    test 6 line 1 toEtm8.lon: 45.599420
    test 7 line 2 toEtm8.easting: 2624150.740929
    test 8 line 2 toEtm8.northing: 1204434.041605
    test 9 line 2 toEtm8.convergence: 4.292619
    test 10 line 2 toEtm8.scale: 1.086051
    test 11 line 2 toEtm8.lat: 10.018894
    test 12 line 2 toEtm8.lon: 23.313324
    test 13 line 3 toEtm8.easting: 9855841.232935
    test 14 line 3 toEtm8.northing: 6145496.115155
    test 15 line 3 toEtm8.convergence: 53.348315
    test 16 line 3 toEtm8.scale: 2.445098
    test 17 line 3 toEtm8.lat: 19.479896
    test 18 line 3 toEtm8.lon: 75.662049
    test 19 line 4 toEtm8.easting: 3206390.691996
    test 20 line 4 toEtm8.northing: 2650745.400406
    test 21 line 4 toEtm8.convergence: 11.666950
    test 22 line 4 toEtm8.scale: 1.129359
    test 23 line 4 toEtm8.lat: 21.072465
    test 24 line 4 toEtm8.lon: 29.828684
    test 25 line 5 toEtm8.easting: 4328154.083501
    test 26 line 5 toEtm8.northing: 749647.623690
    test 27 line 5 toEtm8.convergence: 4.024317
    test 28 line 5 toEtm8.scale: 1.240829
    test 29 line 5 toEtm8.lat: 5.458957
    test 30 line 5 toEtm8.lon: 36.385237
    test 31 line 6 toEtm8.easting: 847598.266514
    test 32 line 6 toEtm8.northing: 7947180.962440
    test 33 line 6 toEtm8.convergence: 21.639091
    test 34 line 6 toEtm8.scale: 1.008399
    test 35 line 6 toEtm8.lat: 70.175454
    test 36 line 6 toEtm8.lon: 22.865350
    test 37 line 7 toEtm8.easting: 2727657.337974
    test 38 line 7 toEtm8.northing: 8283916.696410
    test 39 line 7 toEtm8.convergence: 55.690909
    test 40 line 7 toEtm8.scale: 1.091942
    test 41 line 7 toEtm8.lat: 61.965605
    test 42 line 7 toEtm8.lon: 58.931371
    test 43 line 8 toEtm8.easting: 2331001.751890
    test 44 line 8 toEtm8.northing: 1313608.224751
    test 45 line 8 toEtm8.convergence: 4.214690
    test 46 line 8 toEtm8.scale: 1.067599
    test 47 line 8 toEtm8.lat: 11.116050
    test 48 line 8 toEtm8.lon: 20.901069
    test 49 line 9 toEtm8.easting: 6035557.239480
    test 50 line 9 toEtm8.northing: 5791770.791879
    test 51 line 9 toEtm8.convergence: 43.698170
    test 52 line 9 toEtm8.scale: 1.481260
    test 53 line 9 toEtm8.lat: 32.210543
    test 54 line 9 toEtm8.lon: 60.705849
    test 55 line 10 toEtm8.easting: 1064553.125852
    test 56 line 10 toEtm8.northing: 9417273.737208
    test 57 line 10 toEtm8.convergence: 61.100380
    test 58 line 10 toEtm8.scale: 1.013475
    test 59 line 10 toEtm8.lat: 79.187451
    test 60 line 10 toEtm8.lon: 61.532382
    test 61 line 11 toEtm8.easting: 1400137.116164
    test 62 line 11 toEtm8.northing: 9616907.017686
    test 63 line 11 toEtm8.convergence: 74.527087
    test 64 line 11 toEtm8.scale: 1.023640
    test 65 line 11 toEtm8.lat: 77.103759
    test 66 line 11 toEtm8.lon: 74.899105
    test 67 line 12 toEtm8.easting: 9860691.016626
    test 68 line 12 toEtm8.northing: 7433039.143328
    test 69 line 12 toEtm8.convergence: 65.357693
    test 70 line 12 toEtm8.scale: 2.438973
    test 71 line 12 toEtm8.lat: 21.889514
    test 72 line 12 toEtm8.lon: 80.019886
    test 73 line 13 toEtm8.easting: 8076501.833695
    test 74 line 13 toEtm8.northing: 8561614.174782
    test 75 line 13 toEtm8.convergence: 75.073393
    test 76 line 13 toEtm8.scale: 1.906202
    test 77 line 13 toEtm8.lat: 30.536296
    test 78 line 13 toEtm8.lon: 82.186178
    test 79 line 14 toEtm8.easting: 3335099.866623
    test 80 line 14 toEtm8.northing: 6740519.084015
    test 81 line 14 toEtm8.convergence: 40.611821
    test 82 line 14 toEtm8.scale: 1.139021
    test 83 line 14 toEtm8.lat: 49.990485
    test 84 line 14 toEtm8.lon: 48.203179
    test 85 line 15 toEtm8.easting: 12051574.928500
    test 86 line 15 toEtm8.northing: 6587213.051951
    test 87 line 15 toEtm8.convergence: 59.033237
    test 88 line 15 toEtm8.scale: 3.357469
    test 89 line 15 toEtm8.lat: 14.486312
    test 90 line 15 toEtm8.lon: 80.905137
    test 91 line 16 toEtm8.easting: 5387578.735298
    test 92 line 16 toEtm8.northing: 4111216.907168
    test 93 line 16 toEtm8.convergence: 27.574337
    test 94 line 16 toEtm8.scale: 1.379357
    test 95 line 16 toEtm8.lat: 25.936824
    test 96 line 16 toEtm8.lon: 49.913598
    test 97 line 17 toEtm8.easting: 2622214.380233
    test 98 line 17 toEtm8.northing: 8678923.984567
    test 99 line 17 toEtm8.convergence: 61.697275
    test 100 line 17 toEtm8.scale: 1.084810
    test 101 line 17 toEtm8.lat: 64.402196
    test 102 line 17 toEtm8.lon: 64.091395
    test 103 line 18 toEtm8.easting: 5068474.169633
    test 104 line 18 toEtm8.northing: 9492066.993709
    test 105 line 18 toEtm8.convergence: 83.156740
    test 106 line 18 toEtm8.scale: 1.329990
    test 107 line 18 toEtm8.lat: 48.451354
    test 108 line 18 toEtm8.lon: 84.856198
    test 109 line 19 toEtm8.easting: 738062.047779
    test 110 line 19 toEtm8.northing: 3031007.074116
    test 111 line 19 toEtm8.convergence: 3.416802
    test 112 line 19 toEtm8.scale: 1.006332
    test 113 line 19 toEtm8.lat: 27.203895
    test 114 line 19 toEtm8.lon: 7.440229
    test 115 line 20 toEtm8.easting: 1944413.834565
    test 116 line 20 toEtm8.northing: 9613299.224493
    test 117 line 20 toEtm8.convergence: 78.462831
    test 118 line 20 toEtm8.scale: 1.046134
    test 119 line 20 toEtm8.lat: 72.509000
    test 120 line 20 toEtm8.lon: 78.982283
    test 121 line 21 toEtm8.easting: 2114521.418406
    test 122 line 21 toEtm8.northing: 4954077.440098
    test 123 line 21 toEtm8.convergence: 17.571878
    test 124 line 21 toEtm8.scale: 1.055093
    test 125 line 21 toEtm8.lat: 41.824954
    test 126 line 21 toEtm8.lon: 25.392744
    test 127 line 22 toEtm8.easting: 620365.905090
    test 128 line 22 toEtm8.northing: 4755542.026562
    test 129 line 22 toEtm8.convergence: 5.152022
    test 130 line 22 toEtm8.scale: 1.004338
    test 131 line 22 toEtm8.lat: 42.701376
    test 132 line 22 toEtm8.lon: 7.572738
    test 133 line 23 toEtm8.easting: 263004.770989
    test 134 line 23 toEtm8.northing: 4493669.762451
    test 135 line 23 toEtm8.convergence: 2.020523
    test 136 line 23 toEtm8.scale: 1.000452
    test 137 line 23 toEtm8.lat: 40.552052
    test 138 line 23 toEtm8.lon: 3.106056
    test 139 line 24 toEtm8.easting: 3217221.739462
    test 140 line 24 toEtm8.northing: 437776.119161
    test 141 line 24 toEtm8.convergence: 1.848169
    test 142 line 24 toEtm8.scale: 1.130558
    test 143 line 24 toEtm8.lat: 3.501242
    test 144 line 24 toEtm8.lon: 27.806507
    test 145 line 25 toEtm8.easting: 14661142.444961
    test 146 line 25 toEtm8.northing: 7476100.824185
    test 147 line 25 toEtm8.convergence: 68.376669
    test 148 line 25 toEtm8.scale: 4.896650
    test 149 line 25 toEtm8.lat: 10.148715
    test 150 line 25 toEtm8.lon: 85.373768
    test 151 line 26 toEtm8.easting: 967777.158554
    test 152 line 26 toEtm8.northing: 6615684.266592
    test 153 line 26 toEtm8.convergence: 14.410044
    test 154 line 26 toEtm8.scale: 1.011100
    test 155 line 26 toEtm8.lat: 58.582623
    test 156 line 26 toEtm8.lon: 16.755558
    test 157 line 27 toEtm8.easting: 7558840.728461
    test 158 line 27 toEtm8.northing: 4144728.130764
    test 159 line 27 toEtm8.convergence: 32.557264
    test 160 line 27 toEtm8.scale: 1.791490
    test 161 line 27 toEtm8.lat: 19.793004
    test 162 line 27 toEtm8.lon: 61.746763
    test 163 line 28 toEtm8.easting: 1056008.314161
    test 164 line 28 toEtm8.northing: 9290799.692669
    test 165 line 28 toEtm8.convergence: 55.843278
    test 166 line 28 toEtm8.scale: 1.013253
    test 167 line 28 toEtm8.lat: 78.666776
    test 168 line 28 toEtm8.lon: 56.365355
    test 169 line 29 toEtm8.easting: 1943965.134687
    test 170 line 29 toEtm8.northing: 1389972.228690
    test 171 line 29 toEtm8.convergence: 3.774869
    test 172 line 29 toEtm8.scale: 1.046724
    test 173 line 29 toEtm8.lat: 11.998788
    test 174 line 29 toEtm8.lon: 17.597873
    test 175 line 30 toEtm8.easting: 5803077.072902
    test 176 line 30 toEtm8.northing: 5649957.943659
    test 177 line 30 toEtm8.convergence: 41.717943
    test 178 line 30 toEtm8.scale: 1.442572
    test 179 line 30 toEtm8.lat: 32.540378
    test 180 line 30 toEtm8.lon: 58.764613
    test 181 line 31 toEtm8.easting: 2928716.986009
    test 182 line 31 toEtm8.northing: 5731835.058317
    test 183 line 31 toEtm8.convergence: 28.538550
    test 184 line 31 toEtm8.scale: 1.106780
    test 185 line 31 toEtm8.lat: 45.160356
    test 186 line 31 toEtm8.lon: 37.465285
    test 187 line 32 toEtm8.easting: 326141.975756
    test 188 line 32 toEtm8.northing: 8881325.164543
    test 189 line 32 toEtm8.convergence: 16.111415
    test 190 line 32 toEtm8.scale: 1.000900
    test 191 line 32 toEtm8.lat: 79.584190
    test 192 line 32 toEtm8.lon: 16.367006
    test 193 line 33 toEtm8.easting: 3933015.267450
    test 194 line 33 toEtm8.northing: 7932373.909512
    test 195 line 33 toEtm8.convergence: 58.577424
    test 196 line 33 toEtm8.scale: 1.194811
    test 197 line 33 toEtm8.lat: 52.470664
    test 198 line 33 toEtm8.lon: 64.125580
    test 199 line 34 toEtm8.easting: 8598926.983213
    test 200 line 34 toEtm8.northing: 6214135.167503
    test 201 line 34 toEtm8.convergence: 52.612878
    test 202 line 34 toEtm8.scale: 2.051367
    test 203 line 34 toEtm8.lat: 23.702673
    test 204 line 34 toEtm8.lon: 72.630363
    test 205 line 35 toEtm8.easting: 6620553.333772
    test 206 line 35 toEtm8.northing: 6540527.122948
    test 207 line 35 toEtm8.convergence: 52.350140
    test 208 line 35 toEtm8.scale: 1.586614
    test 209 line 35 toEtm8.lat: 32.603520
    test 210 line 35 toEtm8.lon: 67.280123
    test 211 line 36 toEtm8.easting: 1515136.758292
    test 212 line 36 toEtm8.northing: 3858996.087537
    test 213 line 36 toEtm8.convergence: 9.225127
    test 214 line 36 toEtm8.scale: 1.028029
    test 215 line 36 toEtm8.lat: 33.776224
    test 216 line 36 toEtm8.lon: 16.280993
    test 217 line 37 toEtm8.easting: 479854.373445
    test 218 line 37 toEtm8.northing: 8980501.389896
    test 219 line 37 toEtm8.convergence: 25.021222
    test 220 line 37 toEtm8.scale: 1.002415
    test 221 line 37 toEtm8.lat: 79.932747
    test 222 line 37 toEtm8.lon: 25.363622
    test 223 line 38 toEtm8.easting: 5243446.564940
    test 224 line 38 toEtm8.northing: 140657.213960
    test 225 line 38 toEtm8.convergence: 0.862817
    test 226 line 38 toEtm8.scale: 1.360358
    test 227 line 38 toEtm8.lat: 0.935056
    test 228 line 38 toEtm8.lon: 42.538824
    test 229 line 39 toEtm8.easting: 12806457.923218
    test 230 line 39 toEtm8.northing: 7170118.684675
    test 231 line 39 toEtm8.convergence: 64.708921
    test 232 line 39 toEtm8.scale: 3.740588
    test 233 line 39 toEtm8.lat: 13.490862
    test 234 line 39 toEtm8.lon: 83.178380
    test 235 line 40 toEtm8.easting: 1202993.459158
    test 236 line 40 toEtm8.northing: 5557316.053599
    test 237 line 40 toEtm8.convergence: 12.579061
    test 238 line 40 toEtm8.scale: 1.017426
    test 239 line 40 toEtm8.lat: 48.979057
    test 240 line 40 toEtm8.lon: 16.474542
    test 241 line 41 toEtm8.easting: 1729088.710196
    test 242 line 41 toEtm8.northing: 7770874.289954
    test 243 line 41 toEtm8.convergence: 36.021783
    test 244 line 41 toEtm8.scale: 1.036397
    test 245 line 41 toEtm8.lat: 65.036016
    test 246 line 41 toEtm8.lon: 38.729091
    test 247 line 42 toEtm8.easting: 2437301.517425
    test 248 line 42 toEtm8.northing: 5539327.748318
    test 249 line 42 toEtm8.convergence: 23.461879
    test 250 line 42 toEtm8.scale: 1.073459
    test 251 line 42 toEtm8.lat: 45.510091
    test 252 line 42 toEtm8.lon: 31.303729
    test 253 line 43 toEtm8.easting: 3647186.135066
    test 254 line 43 toEtm8.northing: 2086412.330983
    test 255 line 43 toEtm8.convergence: 10.023991
    test 256 line 43 toEtm8.scale: 1.168707
    test 257 line 43 toEtm8.lat: 16.058010
    test 258 line 43 toEtm8.lon: 32.520026
    test 259 line 44 toEtm8.easting: 1818497.243556
    test 260 line 44 toEtm8.northing: 4275471.745057
    test 261 line 44 toEtm8.convergence: 12.499656
    test 262 line 44 toEtm8.scale: 1.040604
    test 263 line 44 toEtm8.lat: 36.845200
    test 264 line 44 toEtm8.lon: 20.282283
    test 265 line 45 toEtm8.easting: 3751304.113783
    test 266 line 45 toEtm8.northing: 5130454.001592
    test 267 line 45 toEtm8.convergence: 28.959707
    test 268 line 45 toEtm8.scale: 1.177681
    test 269 line 45 toEtm8.lat: 37.865481
    test 270 line 45 toEtm8.lon: 41.990402
    test 271 line 46 toEtm8.easting: 2616733.138544
    test 272 line 46 toEtm8.northing: 394644.463815
    test 273 line 46 toEtm8.convergence: 1.390425
    test 274 line 46 toEtm8.scale: 1.085595
    test 275 line 46 toEtm8.lat: 3.287272
    test 276 line 46 toEtm8.lon: 22.917604
    test 277 line 47 toEtm8.easting: 1756506.573942
    test 278 line 47 toEtm8.northing: 5570393.986394
    test 279 line 47 toEtm8.convergence: 17.897894
    test 280 line 47 toEtm8.scale: 1.037732
    test 281 line 47 toEtm8.lat: 47.813686
    test 282 line 47 toEtm8.lon: 23.545092
    test 283 line 48 toEtm8.easting: 8752461.894711
    test 284 line 48 toEtm8.northing: 6087728.152284
    test 285 line 48 toEtm8.convergence: 51.628465
    test 286 line 48 toEtm8.scale: 2.095465
    test 287 line 48 toEtm8.lat: 22.836853
    test 288 line 48 toEtm8.lon: 72.604385
    test 289 line 49 toEtm8.easting: 1309272.216432
    test 290 line 49 toEtm8.northing: 59520.028899
    test 291 line 49 toEtm8.convergence: 0.109069
    test 292 line 49 toEtm8.scale: 1.020897
    test 293 line 49 toEtm8.lat: 0.527262
    test 294 line 49 toEtm8.lon: 11.684209
    test 295 line 50 toEtm8.easting: 328652.277129
    test 296 line 50 toEtm8.northing: 2233043.958874
    test 297 line 50 toEtm8.convergence: 1.084863
    test 298 line 50 toEtm8.scale: 1.000935
    test 299 line 50 toEtm8.lat: 20.166742
    test 300 line 50 toEtm8.lon: 3.143948
    test 301 line 51 toEtm8.easting: 8637959.716447
    test 302 line 51 toEtm8.northing: 9190635.156031
    test 303 line 51 toEtm8.convergence: 81.802563
    test 304 line 51 toEtm8.scale: 2.054329
    test 305 line 51 toEtm8.lat: 28.604629
    test 306 line 51 toEtm8.lon: 85.988721
    test 307 line 52 toEtm8.easting: 8548521.455147
    test 308 line 52 toEtm8.northing: 9172410.943282
    test 309 line 52 toEtm8.convergence: 81.583928
    test 310 line 52 toEtm8.scale: 2.029641
    test 311 line 52 toEtm8.lat: 28.984048
    test 312 line 52 toEtm8.lon: 85.833448
    test 313 line 53 toEtm8.easting: 796987.281104
    test 314 line 53 toEtm8.northing: 7677446.357675
    test 315 line 53 toEtm8.convergence: 18.084472
    test 316 line 53 toEtm8.scale: 1.007381
    test 317 line 53 toEtm8.lat: 68.071020
    test 318 line 53 toEtm8.lon: 19.392823
    test 319 line 54 toEtm8.easting: 3291036.496762
    test 320 line 54 toEtm8.northing: 9513199.600666
    test 321 line 54 toEtm8.convergence: 80.890254
    test 322 line 54 toEtm8.scale: 1.134826
    test 323 line 54 toEtm8.lat: 61.416576
    test 324 line 54 toEtm8.lon: 81.981611
    test 325 line 55 toEtm8.easting: 7087225.330906
    test 326 line 55 toEtm8.northing: 8382823.855822
    test 327 line 55 toEtm8.convergence: 72.253756
    test 328 line 55 toEtm8.scale: 1.678070
    test 329 line 55 toEtm8.lat: 35.074753
    test 330 line 55 toEtm8.lon: 79.496003
    test 331 line 56 toEtm8.easting: 5090358.125724
    test 332 line 56 toEtm8.northing: 4318294.133489
    test 333 line 56 toEtm8.convergence: 28.266280
    test 334 line 56 toEtm8.scale: 1.336264
    test 335 line 56 toEtm8.lat: 28.078790
    test 336 line 56 toEtm8.lon: 48.684350
    test skipped (1): line 57 toEtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 toEtm8.easting: 3447670.550785
    test 338 line 58 toEtm8.northing: 3680238.888223
    test 339 line 58 toEtm8.convergence: 17.934948
    test 340 line 58 toEtm8.scale: 1.149831
    test 341 line 58 toEtm8.lat: 28.473948
    test 342 line 58 toEtm8.lon: 34.127306
    test 343 line 59 toEtm8.easting: 3396522.906798
    test 344 line 59 toEtm8.northing: 8093659.687593
    test 345 line 59 toEtm8.convergence: 57.747117
    test 346 line 59 toEtm8.scale: 1.144006
    test 347 line 59 toEtm8.lat: 56.629354
    test 348 line 59 toEtm8.lon: 62.196474
    test 349 line 60 toEtm8.easting: 11249894.100784
    test 350 line 60 toEtm8.northing: 1619226.506299
    test 351 line 60 toEtm8.convergence: 14.210358
    test 352 line 60 toEtm8.scale: 3.048347
    test 353 line 60 toEtm8.lat: 4.747762
    test 354 line 60 toEtm8.lon: 70.932555
    test 355 line 61 toEtm8.easting: 6808805.230950
    test 356 line 61 toEtm8.northing: 8044779.777369
    test 357 line 61 toEtm8.convergence: 68.242008
    test 358 line 61 toEtm8.scale: 1.621464
    test 359 line 61 toEtm8.lat: 35.882113
    test 360 line 61 toEtm8.lon: 76.741849
    test 361 line 62 toEtm8.easting: 2306021.556506
    test 362 line 62 toEtm8.northing: 757191.592866
    test 363 line 62 toEtm8.convergence: 2.385686
    test 364 line 62 toEtm8.scale: 1.066159
    test 365 line 62 toEtm8.lat: 6.420705
    test 366 line 62 toEtm8.lon: 20.416028
    test 367 line 63 toEtm8.easting: 1547406.313862
    test 368 line 63 toEtm8.northing: 6048712.751824
    test 369 line 63 toEtm8.convergence: 18.474372
    test 370 line 63 toEtm8.scale: 1.029123
    test 371 line 63 toEtm8.lat: 52.335248
    test 372 line 63 toEtm8.lon: 22.879294
    test 373 line 64 toEtm8.easting: 2430467.650383
    test 374 line 64 toEtm8.northing: 7557167.613972
    test 375 line 64 toEtm8.convergence: 42.110021
    test 376 line 64 toEtm8.scale: 1.072759
    test 377 line 64 toEtm8.lat: 59.846391
    test 378 line 64 toEtm8.lon: 46.262536
    test 379 line 65 toEtm8.easting: 2334053.905830
    test 380 line 65 toEtm8.northing: 1948076.966582
    test 381 line 65 toEtm8.convergence: 6.353185
    test 382 line 65 toEtm8.scale: 1.067733
    test 383 line 65 toEtm8.lat: 16.461790
    test 384 line 65 toEtm8.lon: 21.433269
    test 385 line 66 toEtm8.easting: 5564175.186737
    test 386 line 66 toEtm8.northing: 1836851.660412
    test 387 line 66 toEtm8.convergence: 11.870682
    test 388 line 66 toEtm8.scale: 1.408265
    test 389 line 66 toEtm8.lat: 11.707905
    test 390 line 66 toEtm8.lon: 45.827075
    test 391 line 67 toEtm8.easting: 6118505.590359
    test 392 line 67 toEtm8.northing: 7631684.552421
    test 393 line 67 toEtm8.convergence: 62.477323
    test 394 line 67 toEtm8.scale: 1.493420
    test 395 line 67 toEtm8.lat: 38.519075
    test 396 line 67 toEtm8.lon: 71.935918
    test 397 line 68 toEtm8.easting: 7365359.294665
    test 398 line 68 toEtm8.northing: 8818194.451531
    test 399 line 68 toEtm8.convergence: 77.207042
    test 400 line 68 toEtm8.scale: 1.737639
    test 401 line 68 toEtm8.lat: 34.264007
    test 402 line 68 toEtm8.lon: 82.647878
    test 403 line 69 toEtm8.easting: 36187.342415
    test 404 line 69 toEtm8.northing: 2142565.324802
    test 405 line 69 toEtm8.convergence: 0.114334
    test 406 line 69 toEtm8.scale: 0.999616
    test 407 line 69 toEtm8.lat: 19.376880
    test 408 line 69 toEtm8.lon: 0.344605
    test 409 line 70 toEtm8.easting: 2380328.546851
    test 410 line 70 toEtm8.northing: 8440109.872384
    test 411 line 70 toEtm8.convergence: 55.076067
    test 412 line 70 toEtm8.scale: 1.069658
    test 413 line 70 toEtm8.lat: 65.075805
    test 414 line 70 toEtm8.lon: 57.653438
    test 415 line 71 toEtm8.easting: 582511.608826
    test 416 line 71 toEtm8.northing: 8876047.217071
    test 417 line 71 toEtm8.convergence: 27.133300
    test 418 line 71 toEtm8.scale: 1.003749
    test 419 line 71 toEtm8.lat: 78.691870
    test 420 line 71 toEtm8.lon: 27.591736
    test 421 line 72 toEtm8.easting: 899441.350477
    test 422 line 72 toEtm8.northing: 4582046.430516
    test 423 line 72 toEtm8.convergence: 7.031211
    test 424 line 72 toEtm8.scale: 1.009573
    test 425 line 72 toEtm8.lat: 40.893022
    test 426 line 72 toEtm8.lon: 10.668804
    test 427 line 73 toEtm8.easting: 5022485.124337
    test 428 line 73 toEtm8.northing: 9741774.933721
    test 429 line 73 toEtm8.convergence: 86.505947
    test 430 line 73 toEtm8.scale: 1.323700
    test 431 line 73 toEtm8.lat: 48.914279
    test 432 line 73 toEtm8.lon: 87.359268
    test 433 line 74 toEtm8.easting: 6701004.587204
    test 434 line 74 toEtm8.northing: 2954368.258231
    test 435 line 74 toEtm8.convergence: 21.560153
    test 436 line 74 toEtm8.scale: 1.608554
    test 437 line 74 toEtm8.lat: 16.208377
    test 438 line 74 toEtm8.lon: 54.494282
    test 439 line 75 toEtm8.easting: 454986.218897
    test 440 line 75 toEtm8.northing: 4885087.887884
    test 441 line 75 toEtm8.convergence: 3.945648
    test 442 line 75 toEtm8.scale: 1.002147
    test 443 line 75 toEtm8.lat: 43.977936
    test 444 line 75 toEtm8.lon: 5.672541
    test 445 line 76 toEtm8.easting: 8903956.140311
    test 446 line 76 toEtm8.northing: 8470608.577482
    test 447 line 76 toEtm8.convergence: 74.723116
    test 448 line 76 toEtm8.scale: 2.131311
    test 449 line 76 toEtm8.lat: 26.850861
    test 450 line 76 toEtm8.lon: 82.834480
    test 451 line 77 toEtm8.easting: 1547627.594741
    test 452 line 77 toEtm8.northing: 6036584.538347
    test 453 line 77 toEtm8.convergence: 18.407629
    test 454 line 77 toEtm8.scale: 1.029132
    test 455 line 77 toEtm8.lat: 52.234165
    test 456 line 77 toEtm8.lon: 22.827655
    test 457 line 78 toEtm8.easting: 5221488.778597
    test 458 line 78 toEtm8.northing: 1762592.044392
    test 459 line 78 toEtm8.convergence: 10.927880
    test 460 line 78 toEtm8.scale: 1.356721
    test 461 line 78 toEtm8.lat: 11.674646
    test 462 line 78 toEtm8.lon: 43.500147
    test 463 line 79 toEtm8.easting: 4880570.297161
    test 464 line 79 toEtm8.northing: 3325433.988867
    test 465 line 79 toEtm8.convergence: 20.469862
    test 466 line 79 toEtm8.scale: 1.308476
    test 467 line 79 toEtm8.lat: 22.492753
    test 468 line 79 toEtm8.lon: 44.179153
    test 469 line 80 toEtm8.easting: 23930680.082694
    test 470 line 80 toEtm8.northing: 7491462.099038
    test 471 line 80 toEtm8.convergence: 75.937628
    test 472 line 80 toEtm8.scale: 15.556365
    test 473 line 80 toEtm8.lat: 0.910999
    test 474 line 80 toEtm8.lon: 88.548823
    test 475 line 81 toEtm8.easting: 71519.450458
    test 476 line 81 toEtm8.northing: 3654740.444852
    test 477 line 81 toEtm8.convergence: 0.417448
    test 478 line 81 toEtm8.scale: 0.999663
    test 479 line 81 toEtm8.lat: 33.028802
    test 480 line 81 toEtm8.lon: 0.765843
    test 481 line 82 toEtm8.easting: 4152797.795220
    test 482 line 82 toEtm8.northing: 7823098.502751
    test 483 line 82 toEtm8.convergence: 58.238901
    test 484 line 82 toEtm8.scale: 1.218052
    test 485 line 82 toEtm8.lat: 50.649195
    test 486 line 82 toEtm8.lon: 64.389076
    test 487 line 83 toEtm8.easting: 2926725.707639
    test 488 line 83 toEtm8.northing: 7904918.072844
    test 489 line 83 toEtm8.convergence: 51.592748
    test 490 line 83 toEtm8.scale: 1.106206
    test 491 line 83 toEtm8.lat: 58.820640
    test 492 line 83 toEtm8.lon: 55.841048
    test 493 line 84 toEtm8.easting: 1325509.113869
    test 494 line 84 toEtm8.northing: 9675214.948213
    test 495 line 84 toEtm8.convergence: 76.116213
    test 496 line 84 toEtm8.scale: 1.021136
    test 497 line 84 toEtm8.lat: 77.865762
    test 498 line 84 toEtm8.lon: 76.414618
    test 499 line 85 toEtm8.easting: 3045296.448926
    test 500 line 85 toEtm8.northing: 542153.443280
    test 501 line 85 toEtm8.convergence: 2.185095
    test 502 line 85 toEtm8.scale: 1.116664
    test 503 line 85 toEtm8.lat: 4.389639
    test 504 line 85 toEtm8.lon: 26.458976
    test 505 line 86 toEtm8.easting: 11843870.887518
    test 506 line 86 toEtm8.northing: 5912803.073343
    test 507 line 86 toEtm8.convergence: 52.814259
    test 508 line 86 toEtm8.scale: 3.267256
    test 509 line 86 toEtm8.lat: 13.924448
    test 510 line 86 toEtm8.lon: 79.017873
    test 511 line 87 toEtm8.easting: 8891099.704936
    test 512 line 87 toEtm8.northing: 162160.142227
    test 513 line 87 toEtm8.convergence: 1.312094
    test 514 line 87 toEtm8.scale: 2.157363
    test 515 line 87 toEtm8.lat: 0.679713
    test 516 line 87 toEtm8.lon: 62.036792
    test 517 line 88 toEtm8.easting: 4784814.214449
    test 518 line 88 toEtm8.northing: 2984497.432580
    test 519 line 88 toEtm8.convergence: 17.946545
    test 520 line 88 toEtm8.scale: 1.296116
    test 521 line 88 toEtm8.lat: 20.478281
    test 522 line 88 toEtm8.lon: 42.678234
    test 523 line 89 toEtm8.easting: 1772074.682154
    test 524 line 89 toEtm8.northing: 9491552.560143
    test 525 line 89 toEtm8.convergence: 73.634830
    test 526 line 89 toEtm8.scale: 1.038202
    test 527 line 89 toEtm8.lat: 73.695703
    test 528 line 89 toEtm8.lon: 74.259097
    test 529 line 90 toEtm8.easting: 1907649.782106
    test 530 line 90 toEtm8.northing: 6994232.429379
    test 531 line 90 toEtm8.convergence: 29.718929
    test 532 line 90 toEtm8.scale: 1.044503
    test 533 line 90 toEtm8.lat: 58.569370
    test 534 line 90 toEtm8.lon: 33.777549
    test 535 line 91 toEtm8.easting: 2084423.818962
    test 536 line 91 toEtm8.northing: 2211816.035619
    test 537 line 91 toEtm8.convergence: 6.556448
    test 538 line 91 toEtm8.scale: 1.053793
    test 539 line 91 toEtm8.lat: 18.933881
    test 540 line 91 toEtm8.lon: 19.492695
    test 541 line 92 toEtm8.easting: 1064373.671729
    test 542 line 92 toEtm8.northing: 7812482.547461
    test 543 line 92 toEtm8.convergence: 24.874124
    test 544 line 92 toEtm8.scale: 1.013490
    test 545 line 92 toEtm8.lat: 68.317934
    test 546 line 92 toEtm8.lon: 26.515687
    test 547 line 93 toEtm8.easting: 4770385.479297
    test 548 line 93 toEtm8.northing: 9734318.902980
    test 549 line 93 toEtm8.convergence: 86.273119
    test 550 line 93 toEtm8.scale: 1.290553
    test 551 line 93 toEtm8.lat: 50.641941
    test 552 line 93 toEtm8.lon: 87.111557
    test 553 line 94 toEtm8.easting: 6398096.677297
    test 554 line 94 toEtm8.northing: 4410894.752104
    test 555 line 94 toEtm8.convergence: 32.558023
    test 556 line 94 toEtm8.scale: 1.548004
    test 557 line 94 toEtm8.lat: 24.411298
    test 558 line 94 toEtm8.lon: 56.881823
    test 559 line 95 toEtm8.easting: 3138623.300415
    test 560 line 95 toEtm8.northing: 3082960.600798
    test 561 line 95 toEtm8.convergence: 13.557672
    test 562 line 95 toEtm8.scale: 1.123724
    test 563 line 95 toEtm8.lat: 24.571871
    test 564 line 95 toEtm8.lon: 30.073097
    test 565 line 96 toEtm8.easting: 2748325.794651
    test 566 line 96 toEtm8.northing: 4202811.912668
    test 567 line 96 toEtm8.convergence: 17.578706
    test 568 line 96 toEtm8.scale: 1.094102
    test 569 line 96 toEtm8.lat: 34.202576
    test 570 line 96 toEtm8.lon: 29.383166
    test 571 line 97 toEtm8.easting: 6677830.630367
    test 572 line 97 toEtm8.northing: 5350071.837395
    test 573 line 97 toEtm8.convergence: 41.306641
    test 574 line 97 toEtm8.scale: 1.599774
    test 575 line 97 toEtm8.lat: 27.756285
    test 576 line 97 toEtm8.lon: 61.881905
    test 577 line 98 toEtm8.easting: 5941536.667431
    test 578 line 98 toEtm8.northing: 3293112.175140
    test 579 line 98 toEtm8.convergence: 22.752845
    test 580 line 98 toEtm8.scale: 1.468473
    test 581 line 98 toEtm8.lat: 19.742270
    test 582 line 98 toEtm8.lon: 50.957821
    test 583 line 99 toEtm8.easting: 3152481.792567
    test 584 line 99 toEtm8.northing: 5903048.837978
    test 585 line 99 toEtm8.convergence: 31.494606
    test 586 line 99 toEtm8.scale: 1.124085
    test 587 line 99 toEtm8.lat: 45.453582
    test 588 line 99 toEtm8.lon: 40.659833
    test 589 line 100 toEtm8.easting: 10460475.897730
    test 590 line 100 toEtm8.northing: 2553463.624391
    test 591 line 100 toEtm8.convergence: 21.965869
    test 592 line 100 toEtm8.scale: 2.700296
    test 593 line 100 toEtm8.lat: 8.322144
    test 594 line 100 toEtm8.lon: 69.488157
    test 595 line 101 toEtm8.easting: 1964010.778021
    test 596 line 101 toEtm8.northing: 5634042.923056
    test 597 line 101 toEtm8.convergence: 20.117800
    test 598 line 101 toEtm8.scale: 1.047344
    test 599 line 101 toEtm8.lat: 47.749831
    test 600 line 101 toEtm8.lon: 26.322002
    test 601 line 102 toEtm8.easting: 2065306.424934
    test 602 line 102 toEtm8.northing: 2135008.468651
    test 603 line 102 toEtm8.convergence: 6.258981
    test 604 line 102 toEtm8.scale: 1.052800
    test 605 line 102 toEtm8.lat: 18.297493
    test 606 line 102 toEtm8.lon: 19.244669
    test 607 line 103 toEtm8.easting: 5127738.132976
    test 608 line 103 toEtm8.northing: 6793804.304411
    test 609 line 103 toEtm8.convergence: 50.557915
    test 610 line 103 toEtm8.scale: 1.339412
    test 611 line 103 toEtm8.lat: 40.834541
    test 612 line 103 toEtm8.lon: 61.650750
    test 613 line 104 toEtm8.easting: 8385525.148166
    test 614 line 104 toEtm8.northing: 6924932.344306
    test 615 line 104 toEtm8.convergence: 59.087561
    test 616 line 104 toEtm8.scale: 1.990364
    test 617 line 104 toEtm8.lat: 26.273247
    test 618 line 104 toEtm8.lon: 74.926694
    test 619 line 105 toEtm8.easting: 2297510.791909
    test 620 line 105 toEtm8.northing: 2805666.962834
    test 621 line 105 toEtm8.convergence: 9.301553
    test 622 line 105 toEtm8.scale: 1.065508
    test 623 line 105 toEtm8.lat: 23.698347
    test 624 line 105 toEtm8.lon: 22.155657
    test 625 line 106 toEtm8.easting: 13749544.917635
    test 626 line 106 toEtm8.northing: 8288728.384650
    test 627 line 106 toEtm8.convergence: 75.033970
    test 628 line 106 toEtm8.scale: 4.270588
    test 629 line 106 toEtm8.lat: 12.364113
    test 630 line 106 toEtm8.lon: 86.348578
    test 631 line 107 toEtm8.easting: 317518.455546
    test 632 line 107 toEtm8.northing: 1097517.583745
    test 633 line 107 toEtm8.convergence: 0.499004
    test 634 line 107 toEtm8.scale: 1.000848
    test 635 line 107 toEtm8.lat: 9.916091
    test 636 line 107 toEtm8.lon: 2.895277
    test 637 line 108 toEtm8.easting: 3856035.184888
    test 638 line 108 toEtm8.northing: 9141364.450290
    test 639 line 108 toEtm8.convergence: 75.972763
    test 640 line 108 toEtm8.scale: 1.186786
    test 641 line 108 toEtm8.lat: 56.553876
    test 642 line 108 toEtm8.lon: 78.215077
    test 643 line 109 toEtm8.easting: 1457484.942823
    test 644 line 109 toEtm8.northing: 9385297.101973
    test 645 line 109 toEtm8.convergence: 66.784662
    test 646 line 109 toEtm8.scale: 1.025660
    test 647 line 109 toEtm8.lat: 75.957631
    test 648 line 109 toEtm8.lon: 67.407383
    test 649 line 110 toEtm8.easting: 1304934.901841
    test 650 line 110 toEtm8.northing: 3604655.155715
    test 651 line 110 toEtm8.convergence: 7.343989
    test 652 line 110 toEtm8.scale: 1.020672
    test 653 line 110 toEtm8.lat: 31.826531
    test 654 line 110 toEtm8.lon: 13.731050
    test 655 line 111 toEtm8.easting: 1399093.491792
    test 656 line 111 toEtm8.northing: 8314607.120342
    test 657 line 111 toEtm8.convergence: 38.630161
    test 658 line 111 toEtm8.scale: 1.023625
    test 659 line 111 toEtm8.lat: 70.542985
    test 660 line 111 toEtm8.lon: 40.282055
    test 661 line 112 toEtm8.easting: 356983.618540
    test 662 line 112 toEtm8.northing: 4282309.048994
    test 663 line 112 toEtm8.convergence: 2.561485
    test 664 line 112 toEtm8.scale: 1.001170
    test 665 line 112 toEtm8.lat: 38.617487
    test 666 line 112 toEtm8.lon: 4.099838
    test 667 line 113 toEtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 668 line 113 toEtm8.northing: 1510288.212229
    test 669 line 113 toEtm8.convergence: 12.752154
    test 670 line 113 toEtm8.scale: 2.511357
    test 671 line 113 toEtm8.lat: 5.389447
    test 672 line 113 toEtm8.lon: 66.729612
    test 673 line 114 toEtm8.easting: 6367592.504007
    test 674 line 114 toEtm8.northing: 1200437.077672
    test 675 line 114 toEtm8.convergence: 8.338041
    test 676 line 114 toEtm8.scale: 1.546210
    test 677 line 114 toEtm8.lat: 6.995168
    test 678 line 114 toEtm8.lon: 50.014763
    test 679 line 115 toEtm8.easting: 4391263.676460
    test 680 line 115 toEtm8.northing: 6325455.989408
    test 681 line 115 toEtm8.convergence: 42.653541
    test 682 line 115 toEtm8.scale: 1.245560
    test 683 line 115 toEtm8.lat: 42.321894
    test 684 line 115 toEtm8.lon: 53.784040
    test 685 line 116 toEtm8.easting: 6209880.527527
    test 686 line 116 toEtm8.northing: 2154754.449747
    test 687 line 116 toEtm8.convergence: 14.919512
    test 688 line 116 toEtm8.scale: 1.516560
    test 689 line 116 toEtm8.lat: 12.698515
    test 690 line 116 toEtm8.lon: 50.242047
    test 691 line 117 toEtm8.easting: 1507053.688772
    test 692 line 117 toEtm8.northing: 6261383.513280
    test 693 line 117 toEtm8.convergence: 19.280373
    test 694 line 117 toEtm8.scale: 1.027584
    test 695 line 117 toEtm8.lat: 54.207636
    test 696 line 117 toEtm8.lon: 23.325731
    test 697 line 118 toEtm8.easting: 8332725.003777
    test 698 line 118 toEtm8.northing: 3002712.329753
    test 699 line 118 toEtm8.convergence: 24.059212
    test 700 line 118 toEtm8.scale: 1.990450
    test 701 line 118 toEtm8.lat: 13.224787
    test 702 line 118 toEtm8.lon: 62.426698
    test 703 line 119 toEtm8.easting: 3958910.085235
    test 704 line 119 toEtm8.northing: 3462284.926102
    test 705 line 119 toEtm8.convergence: 18.546398
    test 706 line 119 toEtm8.scale: 1.199351
    test 707 line 119 toEtm8.lat: 25.650282
    test 708 line 119 toEtm8.lon: 37.710391
    test 709 line 120 toEtm8.easting: 10452892.282083
    test 710 line 120 toEtm8.northing: 8000059.605114
    test 711 line 120 toEtm8.convergence: 71.075240
    test 712 line 120 toEtm8.scale: 2.650111
    test 713 line 120 toEtm8.lat: 20.684773
    test 714 line 120 toEtm8.lon: 82.849734
    test 715 line 121 toEtm8.easting: 496148.253731
    test 716 line 121 toEtm8.northing: 6388503.365043
    test 717 line 121 toEtm8.convergence: 6.970955
    test 718 line 121 toEtm8.scale: 1.002620
    test 719 line 121 toEtm8.lat: 57.367533
    test 720 line 121 toEtm8.lon: 8.260866
    test 721 line 122 toEtm8.easting: 7375792.085850
    test 722 line 122 toEtm8.northing: 5544624.072155
    test 723 line 122 toEtm8.convergence: 44.510851
    test 724 line 122 toEtm8.scale: 1.745898
    test 725 line 122 toEtm8.lat: 25.958757
    test 726 line 122 toEtm8.lon: 65.760477
    test 727 line 123 toEtm8.easting: 2826258.041979
    test 728 line 123 toEtm8.northing: 5167759.816959
    test 729 line 123 toEtm8.convergence: 23.783897
    test 730 line 123 toEtm8.scale: 1.099415
    test 731 line 123 toEtm8.lat: 41.395848
    test 732 line 123 toEtm8.lon: 33.661790
    test 733 line 124 toEtm8.easting: 3958563.378851
    test 734 line 124 toEtm8.northing: 8499923.231243
    test 735 line 124 toEtm8.convergence: 66.570945
    test 736 line 124 toEtm8.scale: 1.197296
    test 737 line 124 toEtm8.lat: 54.266617
    test 738 line 124 toEtm8.lon: 70.602199
    test 739 line 125 toEtm8.easting: 4408189.533462
    test 740 line 125 toEtm8.northing: 8046312.003642
    test 741 line 125 toEtm8.convergence: 62.216959
    test 742 line 125 toEtm8.scale: 1.246750
    test 743 line 125 toEtm8.lat: 49.840393
    test 744 line 125 toEtm8.lon: 68.036728
    test 745 line 126 toEtm8.easting: 3629225.627512
    test 746 line 126 toEtm8.northing: 6371258.454645
    test 747 line 126 toEtm8.convergence: 38.881675
    test 748 line 126 toEtm8.scale: 1.165511
    test 749 line 126 toEtm8.lat: 46.306035
    test 750 line 126 toEtm8.lon: 48.085828
    test 751 line 127 toEtm8.easting: 602838.450710
    test 752 line 127 toEtm8.northing: 4851370.637205
    test 753 line 127 toEtm8.convergence: 5.160395
    test 754 line 127 toEtm8.scale: 1.004073
    test 755 line 127 toEtm8.lat: 43.570988
    test 756 line 127 toEtm8.lon: 7.464494
    test 757 line 128 toEtm8.easting: 764616.665051
    test 758 line 128 toEtm8.northing: 2164299.337945
    test 759 line 128 toEtm8.convergence: 2.429300
    test 760 line 128 toEtm8.scale: 1.006835
    test 761 line 128 toEtm8.lat: 19.427290
    test 762 line 128 toEtm8.lon: 7.268247
    test 763 line 129 toEtm8.easting: 5048953.021931
    test 764 line 129 toEtm8.northing: 1885974.057398
    test 765 line 129 toEtm8.convergence: 11.459804
    test 766 line 129 toEtm8.scale: 1.332207
    test 767 line 129 toEtm8.lat: 12.713794
    test 768 line 129 toEtm8.lon: 42.507018
    test 769 line 130 toEtm8.easting: 2293996.601155
    test 770 line 130 toEtm8.northing: 2392408.644221
    test 771 line 130 toEtm8.convergence: 7.791838
    test 772 line 130 toEtm8.scale: 1.065348
    test 773 line 130 toEtm8.lat: 20.238782
    test 774 line 130 toEtm8.lon: 21.566068
    test 775 line 131 toEtm8.easting: 1530603.839418
    test 776 line 131 toEtm8.northing: 7287841.459898
    test 777 line 131 toEtm8.convergence: 27.502921
    test 778 line 131 toEtm8.scale: 1.028416
    test 779 line 131 toEtm8.lat: 62.367847
    test 780 line 131 toEtm8.lon: 30.438849
    test 781 line 132 toEtm8.easting: 2660000.093152
    test 782 line 132 toEtm8.northing: 5161982.213248
    test 783 line 132 toEtm8.convergence: 22.629836
    test 784 line 132 toEtm8.scale: 1.087851
    test 785 line 132 toEtm8.lat: 41.891569
    test 786 line 132 toEtm8.lon: 31.959547
    test 787 line 133 toEtm8.easting: 5037478.329414
    test 788 line 133 toEtm8.northing: 8768172.379908
    test 789 line 133 toEtm8.convergence: 73.511182
    test 790 line 133 toEtm8.scale: 1.325919
    test 791 line 133 toEtm8.lat: 47.664248
    test 792 line 133 toEtm8.lon: 77.630062
    test 793 line 134 toEtm8.easting: 2289650.957799
    test 794 line 134 toEtm8.northing: 8784328.593607
    test 795 line 134 toEtm8.convergence: 60.786067
    test 796 line 134 toEtm8.scale: 1.064346
    test 797 line 134 toEtm8.lat: 67.259559
    test 798 line 134 toEtm8.lon: 62.715293
    test 799 line 135 toEtm8.easting: 647913.889744
    test 800 line 135 toEtm8.northing: 6742382.228217
    test 801 line 135 toEtm8.convergence: 10.252667
    test 802 line 135 toEtm8.scale: 1.004748
    test 803 line 135 toEtm8.lat: 60.295381
    test 804 line 135 toEtm8.lon: 11.763097
    test 805 line 136 toEtm8.easting: 1118372.698566
    test 806 line 136 toEtm8.northing: 9040627.942263
    test 807 line 136 toEtm8.convergence: 48.936803
    test 808 line 136 toEtm8.scale: 1.014920
    test 809 line 136 toEtm8.lat: 76.878914
    test 810 line 136 toEtm8.lon: 49.685773
    test 811 line 137 toEtm8.easting: 440696.510070
    test 812 line 137 toEtm8.northing: 5500355.826297
    test 813 line 137 toEtm8.convergence: 4.636104
    test 814 line 137 toEtm8.scale: 1.001986
    test 815 line 137 toEtm8.lat: 49.495349
    test 816 line 137 toEtm8.lon: 6.087551
    test 817 line 138 toEtm8.easting: 601728.149727
    test 818 line 138 toEtm8.northing: 9095352.048149
    test 819 line 138 toEtm8.convergence: 33.435771
    test 820 line 138 toEtm8.scale: 1.004027
    test 821 line 138 toEtm8.lat: 80.297265
    test 822 line 138 toEtm8.lon: 33.816372
    test 823 line 139 toEtm8.easting: 3481444.777827
    test 824 line 139 toEtm8.northing: 291665.708749
    test 825 line 139 toEtm8.convergence: 1.314726
    test 826 line 139 toEtm8.scale: 1.153534
    test 827 line 139 toEtm8.lat: 2.286437
    test 828 line 139 toEtm8.lon: 29.855149
    test 829 line 140 toEtm8.easting: 3515304.901524
    test 830 line 140 toEtm8.northing: 1443981.882918
    test 831 line 140 toEtm8.convergence: 6.641638
    test 832 line 140 toEtm8.scale: 1.156509
    test 833 line 140 toEtm8.lat: 11.264457
    test 834 line 140 toEtm8.lon: 30.743907
    test 835 line 141 toEtm8.easting: 160012.186959
    test 836 line 141 toEtm8.northing: 3922609.253231
    test 837 line 141 toEtm8.convergence: 1.022225
    test 838 line 141 toEtm8.scale: 0.999916
    test 839 line 141 toEtm8.lat: 35.434073
    test 840 line 141 toEtm8.lon: 1.762795
    test 841 line 142 toEtm8.easting: 4163744.245622
    test 842 line 142 toEtm8.northing: 936884.674804
    test 843 line 142 toEtm8.convergence: 4.892559
    test 844 line 142 toEtm8.scale: 1.222164
    test 845 line 142 toEtm8.lat: 6.923695
    test 846 line 142 toEtm8.lon: 35.289456
    test 847 line 143 toEtm8.easting: 6155200.017926
    test 848 line 143 toEtm8.northing: 6926306.628390
    test 849 line 143 toEtm8.convergence: 55.103258
    test 850 line 143 toEtm8.scale: 1.500556
    test 851 line 143 toEtm8.lat: 36.129672
    test 852 line 143 toEtm8.lon: 67.533176
    test 853 line 144 toEtm8.easting: 16263383.285440
    test 854 line 144 toEtm8.northing: 3591296.731341
    test 855 line 144 toEtm8.convergence: 36.040254
    test 856 line 144 toEtm8.scale: 6.589288
    test 857 line 144 toEtm8.lat: 4.406529
    test 858 line 144 toEtm8.lon: 81.965734
    test 859 line 145 toEtm8.easting: 14220995.515398
    test 860 line 145 toEtm8.northing: 5100587.457503
    test 861 line 145 toEtm8.convergence: 47.314258
    test 862 line 145 toEtm8.scale: 4.693202
    test 863 line 145 toEtm8.lat: 8.474589
    test 864 line 145 toEtm8.lon: 81.129945
    test 865 line 146 toEtm8.easting: 3173034.802372
    test 866 line 146 toEtm8.northing: 7263421.942957
    test 867 line 146 toEtm8.convergence: 45.215808
    test 868 line 146 toEtm8.scale: 1.125410
    test 869 line 146 toEtm8.lat: 53.907276
    test 870 line 146 toEtm8.lon: 51.252904
    test 871 line 147 toEtm8.easting: 10253274.092204
    test 872 line 147 toEtm8.northing: 8867574.299792
    test 873 line 147 toEtm8.convergence: 79.198250
    test 874 line 147 toEtm8.scale: 2.572372
    test 875 line 147 toEtm8.lat: 22.120545
    test 876 line 147 toEtm8.lon: 85.756782
    test 877 line 148 toEtm8.easting: 2415561.483230
    test 878 line 148 toEtm8.northing: 8813225.217097
    test 879 line 148 toEtm8.convergence: 62.548978
    test 880 line 148 toEtm8.scale: 1.071748
    test 881 line 148 toEtm8.lat: 66.444100
    test 882 line 148 toEtm8.lon: 64.532960
    test 883 line 149 toEtm8.easting: 9589179.293295
    test 884 line 149 toEtm8.northing: 1777680.784143
    test 885 line 149 toEtm8.convergence: 14.838483
    test 886 line 149 toEtm8.scale: 2.380716
    test 887 line 149 toEtm8.lat: 6.670965
    test 888 line 149 toEtm8.lon: 65.660408
    test 889 line 150 toEtm8.easting: 727939.438391
    test 890 line 150 toEtm8.northing: 3684363.236810
    test 891 line 150 toEtm8.convergence: 4.266227
    test 892 line 150 toEtm8.scale: 1.006140
    test 893 line 150 toEtm8.lat: 33.054057
    test 894 line 150 toEtm8.lon: 7.787458
    test 895 line 151 toEtm8.easting: 1250765.991085
    test 896 line 151 toEtm8.northing: 792869.242719
    test 897 line 151 toEtm8.convergence: 1.396497
    test 898 line 151 toEtm8.scale: 1.019026
    test 899 line 151 toEtm8.lat: 7.035525
    test 900 line 151 toEtm8.lon: 11.253707
    test 901 line 152 toEtm8.easting: 710421.705887
    test 902 line 152 toEtm8.northing: 5019406.075928
    test 903 line 152 toEtm8.convergence: 6.393949
    test 904 line 152 toEtm8.scale: 1.005812
    test 905 line 152 toEtm8.lat: 44.971340
    test 906 line 152 toEtm8.lon: 9.009304
    test 907 line 153 toEtm8.easting: 4600995.074643
    test 908 line 153 toEtm8.northing: 4505712.084593
    test 909 line 153 toEtm8.convergence: 27.997458
    test 910 line 153 toEtm8.scale: 1.271841
    test 911 line 153 toEtm8.lat: 30.821397
    test 912 line 153 toEtm8.lon: 45.970577
    test 913 line 154 toEtm8.easting: 557642.627782
    test 914 line 154 toEtm8.northing: 7006911.251644
    test 915 line 154 toEtm8.convergence: 9.769903
    test 916 line 154 toEtm8.scale: 1.003411
    test 917 line 154 toEtm8.lat: 62.763886
    test 918 line 154 toEtm8.lon: 10.960144
    test 919 line 155 toEtm8.easting: 4635062.294291
    test 920 line 155 toEtm8.northing: 2702556.153311
    test 921 line 155 toEtm8.convergence: 15.779547
    test 922 line 155 toEtm8.scale: 1.277178
    test 923 line 155 toEtm8.lat: 18.888611
    test 924 line 155 toEtm8.lon: 41.009871
    test 925 line 156 toEtm8.easting: 14554962.255919
    test 926 line 156 toEtm8.northing: 4716639.908572
    test 927 line 156 toEtm8.convergence: 44.192751
    test 928 line 156 toEtm8.scale: 4.960020
    test 929 line 156 toEtm8.lat: 7.524119
    test 930 line 156 toEtm8.lon: 81.050715
    test 931 line 157 toEtm8.easting: 882126.661736
    test 932 line 157 toEtm8.northing: 7947612.369506
    test 933 line 157 toEtm8.convergence: 22.429487
    test 934 line 157 toEtm8.scale: 1.009132
    test 935 line 157 toEtm8.lat: 70.063902
    test 936 line 157 toEtm8.lon: 23.705255
    test 937 line 158 toEtm8.easting: 20262021.645983
    test 938 line 158 toEtm8.northing: 8113827.820796
    test 939 line 158 toEtm8.convergence: 76.936057
    test 940 line 158 toEtm8.scale: 10.349092
    test 941 line 158 toEtm8.lat: 3.556526
    test 942 line 158 toEtm8.lon: 88.363529
    test 943 line 159 toEtm8.easting: 6500508.399850
    test 944 line 159 toEtm8.northing: 6956476.342368
    test 945 line 159 toEtm8.convergence: 56.237116
    test 946 line 159 toEtm8.scale: 1.563162
    test 947 line 159 toEtm8.lat: 34.551257
    test 948 line 159 toEtm8.lon: 69.111091
    test 949 line 160 toEtm8.easting: 3884036.641314
    test 950 line 160 toEtm8.northing: 6890167.411733
    test 951 line 160 toEtm8.convergence: 45.760130
    test 952 line 160 toEtm8.scale: 1.190167
    test 953 line 160 toEtm8.lat: 47.929051
    test 954 line 160 toEtm8.lon: 54.103418
    test 955 line 161 toEtm8.easting: 217855.546078
    test 956 line 161 toEtm8.northing: 6184108.122568
    test 957 line 161 toEtm8.convergence: 2.870993
    test 958 line 161 toEtm8.scale: 1.000182
    test 959 line 161 toEtm8.lat: 55.753536
    test 960 line 161 toEtm8.lon: 3.471798
    test 961 line 162 toEtm8.easting: 11384139.290402
    test 962 line 162 toEtm8.northing: 8893889.949556
    test 963 line 162 toEtm8.convergence: 79.774854
    test 964 line 162 toEtm8.scale: 3.024672
    test 965 line 162 toEtm8.lat: 18.530847
    test 966 line 162 toEtm8.lon: 86.555312
    test 967 line 163 toEtm8.easting: 3469855.989805
    test 968 line 163 toEtm8.northing: 7723193.799228
    test 969 line 163 toEtm8.convergence: 53.114700
    test 970 line 163 toEtm8.scale: 1.150540
    test 971 line 163 toEtm8.lat: 54.510125
    test 972 line 163 toEtm8.lon: 58.556056
    test 973 line 164 toEtm8.easting: 5926165.994939
    test 974 line 164 toEtm8.northing: 9385463.732747
    test 975 line 164 toEtm8.convergence: 82.506981
    test 976 line 164 toEtm8.scale: 1.459758
    test 977 line 164 toEtm8.lat: 42.864162
    test 978 line 164 toEtm8.lon: 84.866326
    test 979 line 165 toEtm8.easting: 5798639.662224
    test 980 line 165 toEtm8.northing: 5305387.640916
    test 981 line 165 toEtm8.convergence: 38.617257
    test 982 line 165 toEtm8.scale: 1.442263
    test 983 line 165 toEtm8.lat: 30.911943
    test 984 line 165 toEtm8.lon: 57.114102
    test 985 line 166 toEtm8.easting: 9464.934388
    test 986 line 166 toEtm8.northing: 6489121.624944
    test 987 line 166 toEtm8.convergence: 0.138696
    test 988 line 166 toEtm8.scale: 0.999601
    test 989 line 166 toEtm8.lat: 58.542493
    test 990 line 166 toEtm8.lon: 0.162593
    test 991 line 167 toEtm8.easting: 12575834.275614
    test 992 line 167 toEtm8.northing: 8356610.895486
    test 993 line 167 toEtm8.convergence: 75.235223
    test 994 line 167 toEtm8.scale: 3.599442
    test 995 line 167 toEtm8.lat: 15.022689
    test 996 line 167 toEtm8.lon: 85.792615
    test 997 line 168 toEtm8.easting: 2719653.543469
    test 998 line 168 toEtm8.northing: 9362389.163495
    test 999 line 168 toEtm8.convergence: 76.049670
    test 1000 line 168 toEtm8.scale: 1.091315
    test 1001 line 168 toEtm8.lat: 65.692275
    test 1002 line 168 toEtm8.lon: 77.241377
    test 1003 line 169 toEtm8.easting: 4845341.924698
    test 1004 line 169 toEtm8.northing: 8710522.326901
    test 1005 line 169 toEtm8.convergence: 72.320942
    test 1006 line 169 toEtm8.scale: 1.300382
    test 1007 line 169 toEtm8.lat: 48.806211
    test 1008 line 169 toEtm8.lon: 76.486365
    test 1009 line 170 toEtm8.easting: 3935261.522763
    test 1010 line 170 toEtm8.northing: 9454271.649062
    test 1011 line 170 toEtm8.convergence: 81.162334
    test 1012 line 170 toEtm8.scale: 1.194767
    test 1013 line 170 toEtm8.lat: 56.436025
    test 1014 line 170 toEtm8.lon: 82.611568
    test 1015 line 171 toEtm8.easting: 7074299.823000
    test 1016 line 171 toEtm8.northing: 1648736.065055
    test 1017 line 171 toEtm8.convergence: 12.145925
    test 1018 line 171 toEtm8.scale: 1.687551
    test 1019 line 171 toEtm8.lat: 8.766053
    test 1020 line 171 toEtm8.lon: 54.367539
    test 1021 line 172 toEtm8.easting: 3689072.579308
    test 1022 line 172 toEtm8.northing: 2230802.665211
    test 1023 line 172 toEtm8.convergence: 10.856248
    test 1024 line 172 toEtm8.scale: 1.172689
    test 1025 line 172 toEtm8.lat: 17.095495
    test 1026 line 172 toEtm8.lon: 33.059128
    test 1027 line 173 toEtm8.easting: 8102565.885587
    test 1028 line 173 toEtm8.northing: 5167396.617580
    test 1029 line 173 toEtm8.convergence: 42.324886
    test 1030 line 173 toEtm8.scale: 1.921927
    test 1031 line 173 toEtm8.lat: 22.142861
    test 1032 line 173 toEtm8.lon: 67.200684
    test 1033 line 174 toEtm8.easting: 8181271.353564
    test 1034 line 174 toEtm8.northing: 4425436.547185
    test 1035 line 174 toEtm8.convergence: 35.900845
    test 1036 line 174 toEtm8.scale: 1.945017
    test 1037 line 174 toEtm8.lat: 19.222623
    test 1038 line 174 toEtm8.lon: 65.180785
    test 1039 line 175 toEtm8.easting: 767067.394003
    test 1040 line 175 toEtm8.northing: 3701745.857296
    test 1041 line 175 toEtm8.convergence: 4.519201
    test 1042 line 175 toEtm8.scale: 1.006863
    test 1043 line 175 toEtm8.lat: 33.182474
    test 1044 line 175 toEtm8.lon: 8.216952
    test 1045 line 176 toEtm8.easting: 6688114.168572
    test 1046 line 176 toEtm8.northing: 2052857.299639
    test 1047 line 176 toEtm8.convergence: 14.766191
    test 1048 line 176 toEtm8.scale: 1.607200
    test 1049 line 176 toEtm8.lat: 11.417963
    test 1050 line 176 toEtm8.lon: 52.808691
    test 1051 line 177 toEtm8.easting: 5608408.773761
    test 1052 line 177 toEtm8.northing: 3859055.659110
    test 1053 line 177 toEtm8.convergence: 26.244151
    test 1054 line 177 toEtm8.scale: 1.413463
    test 1055 line 177 toEtm8.lat: 23.836688
    test 1056 line 177 toEtm8.lon: 50.500180
    test 1057 line 178 toEtm8.easting: 3836942.765275
    test 1058 line 178 toEtm8.northing: 6415467.634326
    test 1059 line 178 toEtm8.convergence: 40.575885
    test 1060 line 178 toEtm8.scale: 1.185615
    test 1061 line 178 toEtm8.lat: 45.550020
    test 1062 line 178 toEtm8.lon: 50.148036
    test 1063 line 179 toEtm8.easting: 1298730.366025
    test 1064 line 179 toEtm8.northing: 6021453.000792
    test 1065 line 179 toEtm8.convergence: 15.613320
    test 1066 line 179 toEtm8.scale: 1.020367
    test 1067 line 179 toEtm8.lat: 52.746079
    test 1068 line 179 toEtm8.lon: 19.343926
    test 1069 line 180 toEtm8.easting: 416934.289208
    test 1070 line 180 toEtm8.northing: 7295683.451705
    test 1071 line 180 toEtm8.convergence: 8.238232
    test 1072 line 180 toEtm8.scale: 1.001729
    test 1073 line 180 toEtm8.lat: 65.513348
    test 1074 line 180 toEtm8.lon: 9.039529
    test 1075 line 181 toEtm8.easting: 4336076.850889
    test 1076 line 181 toEtm8.northing: 7617975.722779
    test 1077 line 181 toEtm8.convergence: 56.537088
    test 1078 line 181 toEtm8.scale: 1.238582
    test 1079 line 181 toEtm8.lat: 48.709795
    test 1080 line 181 toEtm8.lon: 63.554005
    test 1081 line 182 toEtm8.easting: 168047.336980
    test 1082 line 182 toEtm8.northing: 2185000.046530
    test 1083 line 182 toEtm8.convergence: 0.542187
    test 1084 line 182 toEtm8.scale: 0.999949
    test 1085 line 182 toEtm8.lat: 19.753509
    test 1086 line 182 toEtm8.lon: 1.603846
    test 1087 line 183 toEtm8.easting: 8276281.328790
    test 1088 line 183 toEtm8.northing: 263444.350545
    test 1089 line 183 toEtm8.convergence: 2.071435
    test 1090 line 183 toEtm8.scale: 1.980314
    test 1091 line 183 toEtm8.lat: 1.202816
    test 1092 line 183 toEtm8.lon: 59.377276
    test 1093 line 184 toEtm8.easting: 4772573.810710
    test 1094 line 184 toEtm8.northing: 6765710.336002
    test 1095 line 184 toEtm8.convergence: 48.857561
    test 1096 line 184 toEtm8.scale: 1.291911
    test 1097 line 184 toEtm8.lat: 42.564975
    test 1098 line 184 toEtm8.lon: 59.356947
    test 1099 line 185 toEtm8.easting: 5427755.074639
    test 1100 line 185 toEtm8.northing: 1556055.820924
    test 1101 line 185 toEtm8.convergence: 9.862178
    test 1102 line 185 toEtm8.scale: 1.387394
    test 1103 line 185 toEtm8.lat: 10.090572
    test 1104 line 185 toEtm8.lon: 44.604132
    test 1105 line 186 toEtm8.easting: 11588458.616041
    test 1106 line 186 toEtm8.northing: 5707993.922613
    test 1107 line 186 toEtm8.convergence: 50.784827
    test 1108 line 186 toEtm8.scale: 3.149567
    test 1109 line 186 toEtm8.lat: 14.133028
    test 1110 line 186 toEtm8.lon: 78.097533
    test 1111 line 187 toEtm8.easting: 7152433.802688
    test 1112 line 187 toEtm8.northing: 761390.695844
    test 1113 line 187 toEtm8.convergence: 5.607350
    test 1114 line 187 toEtm8.scale: 1.705261
    test 1115 line 187 toEtm8.lat: 4.031123
    test 1116 line 187 toEtm8.lon: 54.048782
    test 1117 line 188 toEtm8.easting: 3105651.390901
    test 1118 line 188 toEtm8.northing: 9426026.169064
    test 1119 line 188 toEtm8.convergence: 78.750206
    test 1120 line 188 toEtm8.scale: 1.119737
    test 1121 line 188 toEtm8.lat: 62.746603
    test 1122 line 188 toEtm8.lon: 79.968641
    test 1123 line 189 toEtm8.easting: 2959009.639022
    test 1124 line 189 toEtm8.northing: 8339242.269282
    test 1125 line 189 toEtm8.convergence: 58.460865
    test 1126 line 189 toEtm8.scale: 1.108554
    test 1127 line 189 toEtm8.lat: 60.626429
    test 1128 line 189 toEtm8.lon: 61.851551
    test 1129 line 190 toEtm8.easting: 8640472.267145
    test 1130 line 190 toEtm8.northing: 6230320.417931
    test 1131 line 190 toEtm8.convergence: 52.816810
    test 1132 line 190 toEtm8.scale: 2.062973
    test 1133 line 190 toEtm8.lat: 23.600626
    test 1134 line 190 toEtm8.lon: 72.811634
    test 1135 line 191 toEtm8.easting: 811352.108932
    test 1136 line 191 toEtm8.northing: 9816129.813481
    test 1137 line 191 toEtm8.convergence: 77.299184
    test 1138 line 191 toEtm8.scale: 1.007651
    test 1139 line 191 toEtm8.lat: 82.572236
    test 1140 line 191 toEtm8.lon: 77.402323
    test 1141 line 192 toEtm8.easting: 6521874.973458
    test 1142 line 192 toEtm8.northing: 1053612.479744
    test 1143 line 192 toEtm8.convergence: 7.407328
    test 1144 line 192 toEtm8.scale: 1.575529
    test 1145 line 192 toEtm8.lat: 6.030051
    test 1146 line 192 toEtm8.lon: 50.783505
    test 1147 line 193 toEtm8.easting: 3477983.997875
    test 1148 line 193 toEtm8.northing: 5651613.325947
    test 1149 line 193 toEtm8.convergence: 31.530673
    test 1150 line 193 toEtm8.scale: 1.151875
    test 1151 line 193 toEtm8.lat: 42.411523
    test 1152 line 193 toEtm8.lon: 42.258009
    test 1153 line 194 toEtm8.easting: 629892.822243
    test 1154 line 194 toEtm8.northing: 3283914.910451
    test 1155 line 194 toEtm8.convergence: 3.210482
    test 1156 line 194 toEtm8.scale: 1.004499
    test 1157 line 194 toEtm8.lat: 29.526120
    test 1158 line 194 toEtm8.lon: 6.493069
    test 1159 line 195 toEtm8.easting: 3381879.687227
    test 1160 line 195 toEtm8.northing: 5103629.325665
    test 1161 line 195 toEtm8.convergence: 26.748108
    test 1162 line 195 toEtm8.scale: 1.143559
    test 1163 line 195 toEtm8.lat: 39.021853
    test 1164 line 195 toEtm8.lon: 38.641779
    test 1165 line 196 toEtm8.easting: 2815986.534177
    test 1166 line 196 toEtm8.northing: 9387029.120718
    test 1167 line 196 toEtm8.convergence: 76.967262
    test 1168 line 196 toEtm8.scale: 1.098032
    test 1169 line 196 toEtm8.lat: 64.971850
    test 1170 line 196 toEtm8.lon: 78.151893
    test 1171 line 197 toEtm8.easting: 3398195.889603
    test 1172 line 197 toEtm8.northing: 9138936.031490
    test 1173 line 197 toEtm8.convergence: 74.477499
    test 1174 line 197 toEtm8.scale: 1.144009
    test 1175 line 197 toEtm8.lat: 59.961819
    test 1176 line 197 toEtm8.lon: 76.473422
    test 1177 line 198 toEtm8.easting: 2421734.754637
    test 1178 line 198 toEtm8.northing: 5002372.094991
    test 1179 line 198 toEtm8.convergence: 20.017082
    test 1180 line 198 toEtm8.scale: 1.072592
    test 1181 line 198 toEtm8.lat: 41.374040
    test 1182 line 198 toEtm8.lon: 28.848343
    test 1183 line 199 toEtm8.easting: 2360869.895525
    test 1184 line 199 toEtm8.northing: 9553298.449536
    test 1185 line 199 toEtm8.convergence: 78.848205
    test 1186 line 199 toEtm8.scale: 1.068453
    test 1187 line 199 toEtm8.lat: 68.946087
    test 1188 line 199 toEtm8.lon: 79.574523
    test 1189 line 200 toEtm8.easting: 1196539.972194
    test 1190 line 200 toEtm8.northing: 9861920.836230
    test 1191 line 200 toEtm8.convergence: 83.437668
    test 1192 line 200 toEtm8.scale: 1.017137
    test 1193 line 200 toEtm8.lat: 79.275096
    test 1194 line 200 toEtm8.lon: 83.551272
    test 1195 line 201 toEtm8.easting: 1327758.704795
    test 1196 line 201 toEtm8.northing: 2375509.241683
    test 1197 line 201 toEtm8.convergence: 4.617572
    test 1198 line 201 toEtm8.scale: 1.021465
    test 1199 line 201 toEtm8.lat: 21.000252
    test 1200 line 201 toEtm8.lon: 12.697444
    test 1201 line 202 toEtm8.easting: 2070860.327644
    test 1202 line 202 toEtm8.northing: 8604500.719581
    test 1203 line 202 toEtm8.convergence: 54.722761
    test 1204 line 202 toEtm8.scale: 1.052469
    test 1205 line 202 toEtm8.lat: 68.015227
    test 1206 line 202 toEtm8.lon: 56.732419
    test 1207 line 203 toEtm8.easting: 6564776.654864
    test 1208 line 203 toEtm8.northing: 8171207.177379
    test 1209 line 203 toEtm8.convergence: 69.237523
    test 1210 line 203 toEtm8.scale: 1.573894
    test 1211 line 203 toEtm8.lat: 37.423675
    test 1212 line 203 toEtm8.lon: 76.947359
    test 1213 line 204 toEtm8.easting: 592653.553821
    test 1214 line 204 toEtm8.northing: 6125529.810052
    test 1215 line 204 toEtm8.convergence: 7.600785
    test 1216 line 204 toEtm8.scale: 1.003912
    test 1217 line 204 toEtm8.lat: 54.922707
    test 1218 line 204 toEtm8.lon: 9.260818
    test 1219 line 205 toEtm8.easting: 693459.671821
    test 1220 line 205 toEtm8.northing: 6943779.991032
    test 1221 line 205 toEtm8.convergence: 11.787587
    test 1222 line 205 toEtm8.scale: 1.005496
    test 1223 line 205 toEtm8.lat: 61.982810
    test 1224 line 205 toEtm8.lon: 13.299659
    test 1225 line 206 toEtm8.easting: 1838956.187625
    test 1226 line 206 toEtm8.northing: 3511959.612381
    test 1227 line 206 toEtm8.convergence: 9.844313
    test 1228 line 206 toEtm8.scale: 1.041603
    test 1229 line 206 toEtm8.lat: 30.324214
    test 1230 line 206 toEtm8.lon: 18.959769
    test 1231 line 207 toEtm8.easting: 4460690.884597
    test 1232 line 207 toEtm8.northing: 5541873.235403
    test 1233 line 207 toEtm8.convergence: 35.768613
    test 1234 line 207 toEtm8.scale: 1.254179
    test 1235 line 207 toEtm8.lat: 37.629667
    test 1236 line 207 toEtm8.lon: 49.649131
    test 1237 line 208 toEtm8.easting: 2311168.998941
    test 1238 line 208 toEtm8.northing: 9480561.869119
    test 1239 line 208 toEtm8.convergence: 76.828257
    test 1240 line 208 toEtm8.scale: 1.065556
    test 1241 line 208 toEtm8.lat: 69.225574
    test 1242 line 208 toEtm8.lon: 77.656135
    test 1243 line 209 toEtm8.easting: 4111775.114451
    test 1244 line 209 toEtm8.northing: 6509014.348792
    test 1245 line 209 toEtm8.convergence: 43.052130
    test 1246 line 209 toEtm8.scale: 1.214125
    test 1247 line 209 toEtm8.lat: 44.698478
    test 1248 line 209 toEtm8.lon: 52.979304
    test 1249 line 210 toEtm8.easting: 75358.261962
    test 1250 line 210 toEtm8.northing: 7711258.662251
    test 1251 line 210 toEtm8.convergence: 1.806297
    test 1252 line 210 toEtm8.scale: 0.999669
    test 1253 line 210 toEtm8.lat: 69.499594
    test 1254 line 210 toEtm8.lon: 1.928336
    test 1255 line 211 toEtm8.easting: 8781885.229116
    test 1256 line 211 toEtm8.northing: 9184776.452211
    test 1257 line 211 toEtm8.convergence: 81.795539
    test 1258 line 211 toEtm8.scale: 2.094908
    test 1259 line 211 toEtm8.lat: 27.981364
    test 1260 line 211 toEtm8.lon: 86.061113
    test 1261 line 212 toEtm8.easting: 954378.415174
    test 1262 line 212 toEtm8.northing: 7449110.669807
    test 1263 line 212 toEtm8.convergence: 19.380657
    test 1264 line 212 toEtm8.scale: 1.010768
    test 1265 line 212 toEtm8.lat: 65.699839
    test 1266 line 212 toEtm8.lon: 21.104725
    test 1267 line 213 toEtm8.easting: 720971.793706
    test 1268 line 213 toEtm8.northing: 5265195.121555
    test 1269 line 213 toEtm8.convergence: 7.002995
    test 1270 line 213 toEtm8.scale: 1.005995
    test 1271 line 213 toEtm8.lat: 47.143648
    test 1272 line 213 toEtm8.lon: 9.512189
    test 1273 line 214 toEtm8.easting: 561561.493937
    test 1274 line 214 toEtm8.northing: 989910.236221
    test 1275 line 214 toEtm8.convergence: 0.793118
    test 1276 line 214 toEtm8.scale: 1.003505
    test 1277 line 214 toEtm8.lat: 8.920167
    test 1278 line 214 toEtm8.lon: 5.101513
    test 1279 line 215 toEtm8.easting: 3446829.634468
    test 1280 line 215 toEtm8.northing: 9232868.155664
    test 1281 line 215 toEtm8.convergence: 76.279075
    test 1282 line 215 toEtm8.scale: 1.148263
    test 1283 line 215 toEtm8.lat: 59.778971
    test 1284 line 215 toEtm8.lon: 78.080322
    test 1285 line 216 toEtm8.easting: 4048307.545909
    test 1286 line 216 toEtm8.northing: 9800416.422998
    test 1287 line 216 toEtm8.convergence: 86.843918
    test 1288 line 216 toEtm8.scale: 1.206495
    test 1289 line 216 toEtm8.lat: 55.865310
    test 1290 line 216 toEtm8.lon: 87.384288
    test 1291 line 217 toEtm8.easting: 8973188.480293
    test 1292 line 217 toEtm8.northing: 7042230.087021
    test 1293 line 217 toEtm8.convergence: 60.872456
    test 1294 line 217 toEtm8.scale: 2.156098
    test 1295 line 217 toEtm8.lat: 24.310973
    test 1296 line 217 toEtm8.lon: 76.823777
    test 1297 line 218 toEtm8.easting: 126314.191618
    test 1298 line 218 toEtm8.northing: 396006.687921
    test 1299 line 218 toEtm8.convergence: 0.071065
    test 1300 line 218 toEtm8.scale: 0.999798
    test 1301 line 218 toEtm8.lat: 3.582041
    test 1302 line 218 toEtm8.lon: 1.137286
    test 1303 line 219 toEtm8.easting: 5247652.345647
    test 1304 line 219 toEtm8.northing: 8670513.359752
    test 1305 line 219 toEtm8.convergence: 72.700498
    test 1306 line 219 toEtm8.scale: 1.355272
    test 1307 line 219 toEtm8.lat: 46.124233
    test 1308 line 219 toEtm8.lon: 77.313118
    test 1309 line 220 toEtm8.easting: 8103656.838119
    test 1310 line 220 toEtm8.northing: 9469794.014737
    test 1311 line 220 toEtm8.convergence: 84.490673
    test 1312 line 220 toEtm8.scale: 1.912164
    test 1313 line 220 toEtm8.lat: 31.171391
    test 1314 line 220 toEtm8.lon: 87.104504
    test 1315 line 221 toEtm8.easting: 6300112.758236
    test 1316 line 221 toEtm8.northing: 93835.917364
    test 1317 line 221 toEtm8.convergence: 0.644805
    test 1318 line 221 toEtm8.scale: 1.534073
    test 1319 line 221 toEtm8.lat: 0.553171
    test 1320 line 221 toEtm8.lon: 49.117104
    test 1321 line 222 toEtm8.easting: 3894813.593782
    test 1322 line 222 toEtm8.northing: 4833832.341027
    test 1323 line 222 toEtm8.convergence: 27.453298
    test 1324 line 222 toEtm8.scale: 1.192135
    test 1325 line 222 toEtm8.lat: 35.361587
    test 1326 line 222 toEtm8.lon: 41.860599
    test 1327 line 223 toEtm8.easting: 402511.346712
    test 1328 line 223 toEtm8.northing: 3520621.561911
    test 1329 line 223 toEtm8.convergence: 2.238474
    test 1330 line 223 toEtm8.scale: 1.001599
    test 1331 line 223 toEtm8.lat: 31.750314
    test 1332 line 223 toEtm8.lon: 4.248167
    test 1333 line 224 toEtm8.easting: 5357378.503148
    test 1334 line 224 toEtm8.northing: 2772997.602234
    test 1335 line 224 toEtm8.convergence: 17.823560
    test 1336 line 224 toEtm8.scale: 1.376031
    test 1337 line 224 toEtm8.lat: 17.924336
    test 1338 line 224 toEtm8.lon: 46.096402
    test 1339 line 225 toEtm8.easting: 2807553.985866
    test 1340 line 225 toEtm8.northing: 8177847.980275
    test 1341 line 225 toEtm8.convergence: 54.680045
    test 1342 line 225 toEtm8.scale: 1.097531
    test 1343 line 225 toEtm8.lat: 60.931488
    test 1344 line 225 toEtm8.lon: 58.221214
    test 1345 line 226 toEtm8.easting: 18289045.166501
    test 1346 line 226 toEtm8.northing: 7792942.339604
    test 1347 line 226 toEtm8.convergence: 73.216494
    test 1348 line 226 toEtm8.scale: 8.098009
    test 1349 line 226 toEtm8.lat: 5.358151
    test 1350 line 226 toEtm8.lon: 87.556213
    test 1351 line 227 toEtm8.easting: 8376822.459538
    test 1352 line 227 toEtm8.northing: 8128174.623878
    test 1353 line 227 toEtm8.convergence: 70.920117
    test 1354 line 227 toEtm8.scale: 1.984873
    test 1355 line 227 toEtm8.lat: 28.616673
    test 1356 line 227 toEtm8.lon: 80.452426
    test 1357 line 228 toEtm8.easting: 11898068.353272
    test 1358 line 228 toEtm8.northing: 4772439.493697
    test 1359 line 228 toEtm8.convergence: 42.613968
    test 1360 line 228 toEtm8.scale: 3.314412
    test 1361 line 228 toEtm8.lat: 11.709763
    test 1362 line 228 toEtm8.lon: 76.760295
    test 1363 line 229 toEtm8.easting: 10550946.939050
    test 1364 line 229 toEtm8.northing: 3851968.815295
    test 1365 line 229 toEtm8.convergence: 33.383025
    test 1366 line 229 toEtm8.scale: 2.724754
    test 1367 line 229 toEtm8.lat: 12.009498
    test 1368 line 229 toEtm8.lon: 71.782351
    test 1369 line 230 toEtm8.easting: 6828299.123607
    test 1370 line 230 toEtm8.northing: 9394803.227463
    test 1371 line 230 toEtm8.convergence: 83.181386
    test 1372 line 230 toEtm8.scale: 1.624359
    test 1373 line 230 toEtm8.lat: 37.629784
    test 1374 line 230 toEtm8.lon: 85.795687
    test 1375 line 231 toEtm8.easting: 11162550.334022
    test 1376 line 231 toEtm8.northing: 2640267.279593
    test 1377 line 231 toEtm8.convergence: 23.145404
    test 1378 line 231 toEtm8.scale: 2.998408
    test 1379 line 231 toEtm8.lat: 7.721128
    test 1380 line 231 toEtm8.lon: 71.662731
    test 1381 line 232 toEtm8.easting: 4411584.447941
    test 1382 line 232 toEtm8.northing: 4956173.694407
    test 1383 line 232 toEtm8.convergence: 30.713919
    test 1384 line 232 toEtm8.scale: 1.248736
    test 1385 line 232 toEtm8.lat: 34.295026
    test 1386 line 232 toEtm8.lon: 46.442191
    test 1387 line 233 toEtm8.easting: 672108.897905
    test 1388 line 233 toEtm8.northing: 4751554.657054
    test 1389 line 233 toEtm8.convergence: 5.569178
    test 1390 line 233 toEtm8.scale: 1.005162
    test 1391 line 233 toEtm8.lat: 42.622496
    test 1392 line 233 toEtm8.lon: 8.193605
    test 1393 line 234 toEtm8.easting: 5022964.290579
    test 1394 line 234 toEtm8.northing: 6860418.199502
    test 1395 line 234 toEtm8.convergence: 50.862230
    test 1396 line 234 toEtm8.scale: 1.324925
    test 1397 line 234 toEtm8.lat: 41.667780
    test 1398 line 234 toEtm8.lon: 61.518288
    test 1399 line 235 toEtm8.easting: 1669655.595207
    test 1400 line 235 toEtm8.northing: 4152086.537021
    test 1401 line 235 toEtm8.convergence: 11.110237
    test 1402 line 235 toEtm8.scale: 1.034138
    test 1403 line 235 toEtm8.lat: 36.060369
    test 1404 line 235 toEtm8.lon: 18.444112
    test 1405 line 236 toEtm8.easting: 6055876.729655
    test 1406 line 236 toEtm8.northing: 4896837.552619
    test 1407 line 236 toEtm8.convergence: 35.799747
    test 1408 line 236 toEtm8.scale: 1.485967
    test 1409 line 236 toEtm8.lat: 27.948091
    test 1410 line 236 toEtm8.lon: 56.816429
    test 1411 line 237 toEtm8.easting: 1209214.164379
    test 1412 line 237 toEtm8.northing: 7266409.859178
    test 1413 line 237 toEtm8.convergence: 22.319633
    test 1414 line 237 toEtm8.scale: 1.017554
    test 1415 line 237 toEtm8.lat: 63.386030
    test 1416 line 237 toEtm8.lon: 24.662716
    test 1417 line 238 toEtm8.easting: 5154564.559584
    test 1418 line 238 toEtm8.northing: 698118.349975
    test 1419 line 238 toEtm8.convergence: 4.242360
    test 1420 line 238 toEtm8.scale: 1.347481
    test 1421 line 238 toEtm8.lat: 4.680922
    test 1422 line 238 toEtm8.lon: 42.114426
    test 1423 line 239 toEtm8.easting: 2695149.806543
    test 1424 line 239 toEtm8.northing: 8208197.765605
    test 1425 line 239 toEtm8.convergence: 54.178615
    test 1426 line 239 toEtm8.scale: 1.089730
    test 1427 line 239 toEtm8.lat: 61.826625
    test 1428 line 239 toEtm8.lon: 57.525096
    test 1429 line 240 toEtm8.easting: 3394792.327820
    test 1430 line 240 toEtm8.northing: 3217583.415552
    test 1431 line 240 toEtm8.convergence: 15.165863
    test 1432 line 240 toEtm8.scale: 1.145285
    test 1433 line 240 toEtm8.lat: 25.104353
    test 1434 line 240 toEtm8.lon: 32.528660
    test 1435 line 241 toEtm8.easting: 1429160.966985
    test 1436 line 241 toEtm8.northing: 8212685.362032
    test 1437 line 241 toEtm8.convergence: 37.484904
    test 1438 line 241 toEtm8.scale: 1.024676
    test 1439 line 241 toEtm8.lat: 69.678351
    test 1440 line 241 toEtm8.lon: 39.275513
    test 1441 line 242 toEtm8.easting: 8343387.998065
    test 1442 line 242 toEtm8.northing: 8885196.954578
    test 1443 line 242 toEtm8.convergence: 78.561937
    test 1444 line 242 toEtm8.scale: 1.974733
    test 1445 line 242 toEtm8.lat: 29.671384
    test 1446 line 242 toEtm8.lon: 84.196595
    test 1447 line 243 toEtm8.easting: 1990722.928606
    test 1448 line 243 toEtm8.northing: 7569202.065162
    test 1449 line 243 toEtm8.convergence: 37.075276
    test 1450 line 243 toEtm8.scale: 1.048486
    test 1451 line 243 toEtm8.lat: 62.300208
    test 1452 line 243 toEtm8.lon: 40.474051
    test 1453 line 244 toEtm8.easting: 1554980.099559
    test 1454 line 244 toEtm8.northing: 1449423.919586
    test 1455 line 244 toEtm8.convergence: 3.188328
    test 1456 line 244 toEtm8.scale: 1.029664
    test 1457 line 244 toEtm8.lat: 12.721776
    test 1458 line 244 toEtm8.lon: 14.190003
    test 1459 line 245 toEtm8.easting: 785205.450196
    test 1460 line 245 toEtm8.northing: 5575158.423096
    test 1461 line 245 toEtm8.convergence: 8.388417
    test 1462 line 245 toEtm8.scale: 1.007181
    test 1463 line 245 toEtm8.lat: 49.811296
    test 1464 line 245 toEtm8.lon: 10.925011
    test 1465 line 246 toEtm8.easting: 3310405.988313
    test 1466 line 246 toEtm8.northing: 5955022.233881
    test 1467 line 246 toEtm8.convergence: 33.007587
    test 1468 line 246 toEtm8.scale: 1.137141
    test 1469 line 246 toEtm8.lat: 45.132680
    test 1470 line 246 toEtm8.lon: 42.478624
    test 1471 line 247 toEtm8.easting: 4733460.960666
    test 1472 line 247 toEtm8.northing: 129034.889816
    test 1473 line 247 toEtm8.convergence: 0.737551
    test 1474 line 247 toEtm8.scale: 1.290439
    test 1475 line 247 toEtm8.lat: 0.904279
    test 1476 line 247 toEtm8.lon: 39.078412
    test 1477 line 248 toEtm8.easting: 3322708.343909
    test 1478 line 248 toEtm8.northing: 3864738.078742
    test 1479 line 248 toEtm8.convergence: 18.472566
    test 1480 line 248 toEtm8.scale: 1.138838
    test 1481 line 248 toEtm8.lat: 30.163605
    test 1482 line 248 toEtm8.lon: 33.577996
    test 1483 line 249 toEtm8.easting: 8672864.417204
    test 1484 line 249 toEtm8.northing: 8333465.983444
    test 1485 line 249 toEtm8.convergence: 73.206273
    test 1486 line 249 toEtm8.scale: 2.065441
    test 1487 line 249 toEtm8.lat: 27.643244
    test 1488 line 249 toEtm8.lon: 81.892859
    test 1489 line 250 toEtm8.easting: 11126818.231196
    test 1490 line 250 toEtm8.northing: 7618712.174991
    test 1491 line 250 toEtm8.convergence: 67.887173
    test 1492 line 250 toEtm8.scale: 2.922417
    test 1493 line 250 toEtm8.lat: 18.201208
    test 1494 line 250 toEtm8.lon: 82.434618
    test 1495 line 251 toEtm8.easting: 8650100.981797
    test 1496 line 251 toEtm8.northing: 9975084.168997
    test 1497 line 251 toEtm8.convergence: 89.767446
    test 1498 line 251 toEtm8.scale: 2.057289
    test 1499 line 251 toEtm8.lat: 28.804576
    test 1500 line 251 toEtm8.lon: 89.886072
    test 1501 line 252 toEtm8.easting: 2212701.180192
    test 1502 line 252 toEtm8.northing: 650348.100229
    test 1503 line 252 toEtm8.convergence: 1.970441
    test 1504 line 252 toEtm8.scale: 1.060830
    test 1505 line 252 toEtm8.lat: 5.542998
    test 1506 line 252 toEtm8.lon: 19.589578
    test 1507 line 253 toEtm8.easting: 6890222.326618
    test 1508 line 253 toEtm8.northing: 7506813.499547
    test 1509 line 253 toEtm8.convergence: 62.684825
    test 1510 line 253 toEtm8.scale: 1.638488
    test 1511 line 253 toEtm8.lat: 34.237147
    test 1512 line 253 toEtm8.lon: 73.678164
    test 1513 line 254 toEtm8.easting: 6692260.067325
    test 1514 line 254 toEtm8.northing: 4244174.008110
    test 1515 line 254 toEtm8.convergence: 31.812920
    test 1516 line 254 toEtm8.scale: 1.604640
    test 1517 line 254 toEtm8.lat: 22.704949
    test 1518 line 254 toEtm8.lon: 57.877010
    test 1519 line 255 toEtm8.easting: 1225564.137190
    test 1520 line 255 toEtm8.northing: 4778923.924144
    test 1521 line 255 toEtm8.convergence: 10.083419
    test 1522 line 255 toEtm8.scale: 1.018134
    test 1523 line 255 toEtm8.lat: 42.192424
    test 1524 line 255 toEtm8.lon: 14.828196
    test 1525 line 256 toEtm8.easting: 12341116.154950
    test 1526 line 256 toEtm8.northing: 5081855.521966
    test 1527 line 256 toEtm8.convergence: 45.712546
    test 1528 line 256 toEtm8.scale: 3.535170
    test 1529 line 256 toEtm8.lat: 11.481151
    test 1530 line 256 toEtm8.lon: 78.189236
    test 1531 line 257 toEtm8.easting: 6673845.021771
    test 1532 line 257 toEtm8.northing: 1177587.190565
    test 1533 line 257 toEtm8.convergence: 8.389141
    test 1534 line 257 toEtm8.scale: 1.605171
    test 1535 line 257 toEtm8.lat: 6.609626
    test 1536 line 257 toEtm8.lon: 51.735783
    test 1537 line 258 toEtm8.easting: 6966354.690417
    test 1538 line 258 toEtm8.northing: 3641802.005093
    test 1539 line 258 toEtm8.convergence: 27.409636
    test 1540 line 258 toEtm8.scale: 1.661469
    test 1541 line 258 toEtm8.lat: 19.059369
    test 1542 line 258 toEtm8.lon: 57.526439
    test 1543 max forward error: 7.078052e-08
    test 1544 max reverse error: 1.136868e-13
    test 1545 Etm.scale0: 0.9996
    test 1546 Etm.datum: WGS84
    test 1547 Etm.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    1 of 1548 testEtmTMcoords.py tests (0.1%) FAILED, ALL KNOWN, 1 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 3.349 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testExactTMcoords.py

    testing testExactTMcoords.py 19.05.23 (module pygeodesy.etm 20.09.27)
    test 1 line 1 _ExactTM.easting: 1548706.791619
    test 2 line 1 _ExactTM.northing: 8451449.198772
    test 3 line 1 _ExactTM.convergence: 43.922790
    test 4 line 1 _ExactTM.scale: 1.029060
    test 5 line 1 _ExactTM.lat: 70.579277
    test 6 line 1 _ExactTM.lon: 45.599420
    test 7 line 2 _ExactTM.easting: 2624150.740929
    test 8 line 2 _ExactTM.northing: 1204434.041605
    test 9 line 2 _ExactTM.convergence: 4.292619
    test 10 line 2 _ExactTM.scale: 1.086051
    test 11 line 2 _ExactTM.lat: 10.018894
    test 12 line 2 _ExactTM.lon: 23.313324
    test 13 line 3 _ExactTM.easting: 9855841.232935
    test 14 line 3 _ExactTM.northing: 6145496.115155
    test 15 line 3 _ExactTM.convergence: 53.348315
    test 16 line 3 _ExactTM.scale: 2.445098
    test 17 line 3 _ExactTM.lat: 19.479896
    test 18 line 3 _ExactTM.lon: 75.662049
    test 19 line 4 _ExactTM.easting: 3206390.691996
    test 20 line 4 _ExactTM.northing: 2650745.400406
    test 21 line 4 _ExactTM.convergence: 11.666950
    test 22 line 4 _ExactTM.scale: 1.129359
    test 23 line 4 _ExactTM.lat: 21.072465
    test 24 line 4 _ExactTM.lon: 29.828684
    test 25 line 5 _ExactTM.easting: 4328154.083501
    test 26 line 5 _ExactTM.northing: 749647.623690
    test 27 line 5 _ExactTM.convergence: 4.024317
    test 28 line 5 _ExactTM.scale: 1.240829
    test 29 line 5 _ExactTM.lat: 5.458957
    test 30 line 5 _ExactTM.lon: 36.385237
    test 31 line 6 _ExactTM.easting: 847598.266514
    test 32 line 6 _ExactTM.northing: 7947180.962440
    test 33 line 6 _ExactTM.convergence: 21.639091
    test 34 line 6 _ExactTM.scale: 1.008399
    test 35 line 6 _ExactTM.lat: 70.175454
    test 36 line 6 _ExactTM.lon: 22.865350
    test 37 line 7 _ExactTM.easting: 2727657.337974
    test 38 line 7 _ExactTM.northing: 8283916.696410
    test 39 line 7 _ExactTM.convergence: 55.690909
    test 40 line 7 _ExactTM.scale: 1.091942
    test 41 line 7 _ExactTM.lat: 61.965605
    test 42 line 7 _ExactTM.lon: 58.931371
    test 43 line 8 _ExactTM.easting: 2331001.751890
    test 44 line 8 _ExactTM.northing: 1313608.224751
    test 45 line 8 _ExactTM.convergence: 4.214690
    test 46 line 8 _ExactTM.scale: 1.067599
    test 47 line 8 _ExactTM.lat: 11.116050
    test 48 line 8 _ExactTM.lon: 20.901069
    test 49 line 9 _ExactTM.easting: 6035557.239480
    test 50 line 9 _ExactTM.northing: 5791770.791879
    test 51 line 9 _ExactTM.convergence: 43.698170
    test 52 line 9 _ExactTM.scale: 1.481260
    test 53 line 9 _ExactTM.lat: 32.210543
    test 54 line 9 _ExactTM.lon: 60.705849
    test 55 line 10 _ExactTM.easting: 1064553.125852
    test 56 line 10 _ExactTM.northing: 9417273.737208
    test 57 line 10 _ExactTM.convergence: 61.100380
    test 58 line 10 _ExactTM.scale: 1.013475
    test 59 line 10 _ExactTM.lat: 79.187451
    test 60 line 10 _ExactTM.lon: 61.532382
    test 61 line 11 _ExactTM.easting: 1400137.116164
    test 62 line 11 _ExactTM.northing: 9616907.017686
    test 63 line 11 _ExactTM.convergence: 74.527087
    test 64 line 11 _ExactTM.scale: 1.023640
    test 65 line 11 _ExactTM.lat: 77.103759
    test 66 line 11 _ExactTM.lon: 74.899105
    test 67 line 12 _ExactTM.easting: 9860691.016626
    test 68 line 12 _ExactTM.northing: 7433039.143328
    test 69 line 12 _ExactTM.convergence: 65.357693
    test 70 line 12 _ExactTM.scale: 2.438973
    test 71 line 12 _ExactTM.lat: 21.889514
    test 72 line 12 _ExactTM.lon: 80.019886
    test 73 line 13 _ExactTM.easting: 8076501.833695
    test 74 line 13 _ExactTM.northing: 8561614.174782
    test 75 line 13 _ExactTM.convergence: 75.073393
    test 76 line 13 _ExactTM.scale: 1.906202
    test 77 line 13 _ExactTM.lat: 30.536296
    test 78 line 13 _ExactTM.lon: 82.186178
    test 79 line 14 _ExactTM.easting: 3335099.866623
    test 80 line 14 _ExactTM.northing: 6740519.084015
    test 81 line 14 _ExactTM.convergence: 40.611821
    test 82 line 14 _ExactTM.scale: 1.139021
    test 83 line 14 _ExactTM.lat: 49.990485
    test 84 line 14 _ExactTM.lon: 48.203179
    test 85 line 15 _ExactTM.easting: 12051574.928500
    test 86 line 15 _ExactTM.northing: 6587213.051951
    test 87 line 15 _ExactTM.convergence: 59.033237
    test 88 line 15 _ExactTM.scale: 3.357469
    test 89 line 15 _ExactTM.lat: 14.486312
    test 90 line 15 _ExactTM.lon: 80.905137
    test 91 line 16 _ExactTM.easting: 5387578.735298
    test 92 line 16 _ExactTM.northing: 4111216.907168
    test 93 line 16 _ExactTM.convergence: 27.574337
    test 94 line 16 _ExactTM.scale: 1.379357
    test 95 line 16 _ExactTM.lat: 25.936824
    test 96 line 16 _ExactTM.lon: 49.913598
    test 97 line 17 _ExactTM.easting: 2622214.380233
    test 98 line 17 _ExactTM.northing: 8678923.984567
    test 99 line 17 _ExactTM.convergence: 61.697275
    test 100 line 17 _ExactTM.scale: 1.084810
    test 101 line 17 _ExactTM.lat: 64.402196
    test 102 line 17 _ExactTM.lon: 64.091395
    test 103 line 18 _ExactTM.easting: 5068474.169633
    test 104 line 18 _ExactTM.northing: 9492066.993709
    test 105 line 18 _ExactTM.convergence: 83.156740
    test 106 line 18 _ExactTM.scale: 1.329990
    test 107 line 18 _ExactTM.lat: 48.451354
    test 108 line 18 _ExactTM.lon: 84.856198
    test 109 line 19 _ExactTM.easting: 738062.047779
    test 110 line 19 _ExactTM.northing: 3031007.074116
    test 111 line 19 _ExactTM.convergence: 3.416802
    test 112 line 19 _ExactTM.scale: 1.006332
    test 113 line 19 _ExactTM.lat: 27.203895
    test 114 line 19 _ExactTM.lon: 7.440229
    test 115 line 20 _ExactTM.easting: 1944413.834565
    test 116 line 20 _ExactTM.northing: 9613299.224493
    test 117 line 20 _ExactTM.convergence: 78.462831
    test 118 line 20 _ExactTM.scale: 1.046134
    test 119 line 20 _ExactTM.lat: 72.509000
    test 120 line 20 _ExactTM.lon: 78.982283
    test 121 line 21 _ExactTM.easting: 2114521.418406
    test 122 line 21 _ExactTM.northing: 4954077.440098
    test 123 line 21 _ExactTM.convergence: 17.571878
    test 124 line 21 _ExactTM.scale: 1.055093
    test 125 line 21 _ExactTM.lat: 41.824954
    test 126 line 21 _ExactTM.lon: 25.392744
    test 127 line 22 _ExactTM.easting: 620365.905090
    test 128 line 22 _ExactTM.northing: 4755542.026562
    test 129 line 22 _ExactTM.convergence: 5.152022
    test 130 line 22 _ExactTM.scale: 1.004338
    test 131 line 22 _ExactTM.lat: 42.701376
    test 132 line 22 _ExactTM.lon: 7.572738
    test 133 line 23 _ExactTM.easting: 263004.770989
    test 134 line 23 _ExactTM.northing: 4493669.762451
    test 135 line 23 _ExactTM.convergence: 2.020523
    test 136 line 23 _ExactTM.scale: 1.000452
    test 137 line 23 _ExactTM.lat: 40.552052
    test 138 line 23 _ExactTM.lon: 3.106056
    test 139 line 24 _ExactTM.easting: 3217221.739462
    test 140 line 24 _ExactTM.northing: 437776.119161
    test 141 line 24 _ExactTM.convergence: 1.848169
    test 142 line 24 _ExactTM.scale: 1.130558
    test 143 line 24 _ExactTM.lat: 3.501242
    test 144 line 24 _ExactTM.lon: 27.806507
    test 145 line 25 _ExactTM.easting: 14661142.444961
    test 146 line 25 _ExactTM.northing: 7476100.824185
    test 147 line 25 _ExactTM.convergence: 68.376669
    test 148 line 25 _ExactTM.scale: 4.896650
    test 149 line 25 _ExactTM.lat: 10.148715
    test 150 line 25 _ExactTM.lon: 85.373768
    test 151 line 26 _ExactTM.easting: 967777.158554
    test 152 line 26 _ExactTM.northing: 6615684.266592
    test 153 line 26 _ExactTM.convergence: 14.410044
    test 154 line 26 _ExactTM.scale: 1.011100
    test 155 line 26 _ExactTM.lat: 58.582623
    test 156 line 26 _ExactTM.lon: 16.755558
    test 157 line 27 _ExactTM.easting: 7558840.728461
    test 158 line 27 _ExactTM.northing: 4144728.130764
    test 159 line 27 _ExactTM.convergence: 32.557264
    test 160 line 27 _ExactTM.scale: 1.791490
    test 161 line 27 _ExactTM.lat: 19.793004
    test 162 line 27 _ExactTM.lon: 61.746763
    test 163 line 28 _ExactTM.easting: 1056008.314161
    test 164 line 28 _ExactTM.northing: 9290799.692669
    test 165 line 28 _ExactTM.convergence: 55.843278
    test 166 line 28 _ExactTM.scale: 1.013253
    test 167 line 28 _ExactTM.lat: 78.666776
    test 168 line 28 _ExactTM.lon: 56.365355
    test 169 line 29 _ExactTM.easting: 1943965.134687
    test 170 line 29 _ExactTM.northing: 1389972.228690
    test 171 line 29 _ExactTM.convergence: 3.774869
    test 172 line 29 _ExactTM.scale: 1.046724
    test 173 line 29 _ExactTM.lat: 11.998788
    test 174 line 29 _ExactTM.lon: 17.597873
    test 175 line 30 _ExactTM.easting: 5803077.072902
    test 176 line 30 _ExactTM.northing: 5649957.943659
    test 177 line 30 _ExactTM.convergence: 41.717943
    test 178 line 30 _ExactTM.scale: 1.442572
    test 179 line 30 _ExactTM.lat: 32.540378
    test 180 line 30 _ExactTM.lon: 58.764613
    test 181 line 31 _ExactTM.easting: 2928716.986009
    test 182 line 31 _ExactTM.northing: 5731835.058317
    test 183 line 31 _ExactTM.convergence: 28.538550
    test 184 line 31 _ExactTM.scale: 1.106780
    test 185 line 31 _ExactTM.lat: 45.160356
    test 186 line 31 _ExactTM.lon: 37.465285
    test 187 line 32 _ExactTM.easting: 326141.975756
    test 188 line 32 _ExactTM.northing: 8881325.164543
    test 189 line 32 _ExactTM.convergence: 16.111415
    test 190 line 32 _ExactTM.scale: 1.000900
    test 191 line 32 _ExactTM.lat: 79.584190
    test 192 line 32 _ExactTM.lon: 16.367006
    test 193 line 33 _ExactTM.easting: 3933015.267450
    test 194 line 33 _ExactTM.northing: 7932373.909512
    test 195 line 33 _ExactTM.convergence: 58.577424
    test 196 line 33 _ExactTM.scale: 1.194811
    test 197 line 33 _ExactTM.lat: 52.470664
    test 198 line 33 _ExactTM.lon: 64.125580
    test 199 line 34 _ExactTM.easting: 8598926.983213
    test 200 line 34 _ExactTM.northing: 6214135.167503
    test 201 line 34 _ExactTM.convergence: 52.612878
    test 202 line 34 _ExactTM.scale: 2.051367
    test 203 line 34 _ExactTM.lat: 23.702673
    test 204 line 34 _ExactTM.lon: 72.630363
    test 205 line 35 _ExactTM.easting: 6620553.333772
    test 206 line 35 _ExactTM.northing: 6540527.122948
    test 207 line 35 _ExactTM.convergence: 52.350140
    test 208 line 35 _ExactTM.scale: 1.586614
    test 209 line 35 _ExactTM.lat: 32.603520
    test 210 line 35 _ExactTM.lon: 67.280123
    test 211 line 36 _ExactTM.easting: 1515136.758292
    test 212 line 36 _ExactTM.northing: 3858996.087537
    test 213 line 36 _ExactTM.convergence: 9.225127
    test 214 line 36 _ExactTM.scale: 1.028029
    test 215 line 36 _ExactTM.lat: 33.776224
    test 216 line 36 _ExactTM.lon: 16.280993
    test 217 line 37 _ExactTM.easting: 479854.373445
    test 218 line 37 _ExactTM.northing: 8980501.389896
    test 219 line 37 _ExactTM.convergence: 25.021222
    test 220 line 37 _ExactTM.scale: 1.002415
    test 221 line 37 _ExactTM.lat: 79.932747
    test 222 line 37 _ExactTM.lon: 25.363622
    test 223 line 38 _ExactTM.easting: 5243446.564940
    test 224 line 38 _ExactTM.northing: 140657.213960
    test 225 line 38 _ExactTM.convergence: 0.862817
    test 226 line 38 _ExactTM.scale: 1.360358
    test 227 line 38 _ExactTM.lat: 0.935056
    test 228 line 38 _ExactTM.lon: 42.538824
    test 229 line 39 _ExactTM.easting: 12806457.923218
    test 230 line 39 _ExactTM.northing: 7170118.684675
    test 231 line 39 _ExactTM.convergence: 64.708921
    test 232 line 39 _ExactTM.scale: 3.740588
    test 233 line 39 _ExactTM.lat: 13.490862
    test 234 line 39 _ExactTM.lon: 83.178380
    test 235 line 40 _ExactTM.easting: 1202993.459158
    test 236 line 40 _ExactTM.northing: 5557316.053599
    test 237 line 40 _ExactTM.convergence: 12.579061
    test 238 line 40 _ExactTM.scale: 1.017426
    test 239 line 40 _ExactTM.lat: 48.979057
    test 240 line 40 _ExactTM.lon: 16.474542
    test 241 line 41 _ExactTM.easting: 1729088.710196
    test 242 line 41 _ExactTM.northing: 7770874.289954
    test 243 line 41 _ExactTM.convergence: 36.021783
    test 244 line 41 _ExactTM.scale: 1.036397
    test 245 line 41 _ExactTM.lat: 65.036016
    test 246 line 41 _ExactTM.lon: 38.729091
    test 247 line 42 _ExactTM.easting: 2437301.517425
    test 248 line 42 _ExactTM.northing: 5539327.748318
    test 249 line 42 _ExactTM.convergence: 23.461879
    test 250 line 42 _ExactTM.scale: 1.073459
    test 251 line 42 _ExactTM.lat: 45.510091
    test 252 line 42 _ExactTM.lon: 31.303729
    test 253 line 43 _ExactTM.easting: 3647186.135066
    test 254 line 43 _ExactTM.northing: 2086412.330983
    test 255 line 43 _ExactTM.convergence: 10.023991
    test 256 line 43 _ExactTM.scale: 1.168707
    test 257 line 43 _ExactTM.lat: 16.058010
    test 258 line 43 _ExactTM.lon: 32.520026
    test 259 line 44 _ExactTM.easting: 1818497.243556
    test 260 line 44 _ExactTM.northing: 4275471.745057
    test 261 line 44 _ExactTM.convergence: 12.499656
    test 262 line 44 _ExactTM.scale: 1.040604
    test 263 line 44 _ExactTM.lat: 36.845200
    test 264 line 44 _ExactTM.lon: 20.282283
    test 265 line 45 _ExactTM.easting: 3751304.113783
    test 266 line 45 _ExactTM.northing: 5130454.001592
    test 267 line 45 _ExactTM.convergence: 28.959707
    test 268 line 45 _ExactTM.scale: 1.177681
    test 269 line 45 _ExactTM.lat: 37.865481
    test 270 line 45 _ExactTM.lon: 41.990402
    test 271 line 46 _ExactTM.easting: 2616733.138544
    test 272 line 46 _ExactTM.northing: 394644.463815
    test 273 line 46 _ExactTM.convergence: 1.390425
    test 274 line 46 _ExactTM.scale: 1.085595
    test 275 line 46 _ExactTM.lat: 3.287272
    test 276 line 46 _ExactTM.lon: 22.917604
    test 277 line 47 _ExactTM.easting: 1756506.573942
    test 278 line 47 _ExactTM.northing: 5570393.986394
    test 279 line 47 _ExactTM.convergence: 17.897894
    test 280 line 47 _ExactTM.scale: 1.037732
    test 281 line 47 _ExactTM.lat: 47.813686
    test 282 line 47 _ExactTM.lon: 23.545092
    test 283 line 48 _ExactTM.easting: 8752461.894711
    test 284 line 48 _ExactTM.northing: 6087728.152284
    test 285 line 48 _ExactTM.convergence: 51.628465
    test 286 line 48 _ExactTM.scale: 2.095465
    test 287 line 48 _ExactTM.lat: 22.836853
    test 288 line 48 _ExactTM.lon: 72.604385
    test 289 line 49 _ExactTM.easting: 1309272.216432
    test 290 line 49 _ExactTM.northing: 59520.028899
    test 291 line 49 _ExactTM.convergence: 0.109069
    test 292 line 49 _ExactTM.scale: 1.020897
    test 293 line 49 _ExactTM.lat: 0.527262
    test 294 line 49 _ExactTM.lon: 11.684209
    test 295 line 50 _ExactTM.easting: 328652.277129
    test 296 line 50 _ExactTM.northing: 2233043.958874
    test 297 line 50 _ExactTM.convergence: 1.084863
    test 298 line 50 _ExactTM.scale: 1.000935
    test 299 line 50 _ExactTM.lat: 20.166742
    test 300 line 50 _ExactTM.lon: 3.143948
    test 301 line 51 _ExactTM.easting: 8637959.716447
    test 302 line 51 _ExactTM.northing: 9190635.156031
    test 303 line 51 _ExactTM.convergence: 81.802563
    test 304 line 51 _ExactTM.scale: 2.054329
    test 305 line 51 _ExactTM.lat: 28.604629
    test 306 line 51 _ExactTM.lon: 85.988721
    test 307 line 52 _ExactTM.easting: 8548521.455147
    test 308 line 52 _ExactTM.northing: 9172410.943282
    test 309 line 52 _ExactTM.convergence: 81.583928
    test 310 line 52 _ExactTM.scale: 2.029641
    test 311 line 52 _ExactTM.lat: 28.984048
    test 312 line 52 _ExactTM.lon: 85.833448
    test 313 line 53 _ExactTM.easting: 796987.281104
    test 314 line 53 _ExactTM.northing: 7677446.357675
    test 315 line 53 _ExactTM.convergence: 18.084472
    test 316 line 53 _ExactTM.scale: 1.007381
    test 317 line 53 _ExactTM.lat: 68.071020
    test 318 line 53 _ExactTM.lon: 19.392823
    test 319 line 54 _ExactTM.easting: 3291036.496762
    test 320 line 54 _ExactTM.northing: 9513199.600666
    test 321 line 54 _ExactTM.convergence: 80.890254
    test 322 line 54 _ExactTM.scale: 1.134826
    test 323 line 54 _ExactTM.lat: 61.416576
    test 324 line 54 _ExactTM.lon: 81.981611
    test 325 line 55 _ExactTM.easting: 7087225.330906
    test 326 line 55 _ExactTM.northing: 8382823.855822
    test 327 line 55 _ExactTM.convergence: 72.253756
    test 328 line 55 _ExactTM.scale: 1.678070
    test 329 line 55 _ExactTM.lat: 35.074753
    test 330 line 55 _ExactTM.lon: 79.496003
    test 331 line 56 _ExactTM.easting: 5090358.125724
    test 332 line 56 _ExactTM.northing: 4318294.133489
    test 333 line 56 _ExactTM.convergence: 28.266280
    test 334 line 56 _ExactTM.scale: 1.336264
    test 335 line 56 _ExactTM.lat: 28.078790
    test 336 line 56 _ExactTM.lon: 48.684350
    test skipped (1): line 57 _ExactTM.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 _ExactTM.easting: 3447670.550785
    test 338 line 58 _ExactTM.northing: 3680238.888223
    test 339 line 58 _ExactTM.convergence: 17.934948
    test 340 line 58 _ExactTM.scale: 1.149831
    test 341 line 58 _ExactTM.lat: 28.473948
    test 342 line 58 _ExactTM.lon: 34.127306
    test 343 line 59 _ExactTM.easting: 3396522.906798
    test 344 line 59 _ExactTM.northing: 8093659.687593
    test 345 line 59 _ExactTM.convergence: 57.747117
    test 346 line 59 _ExactTM.scale: 1.144006
    test 347 line 59 _ExactTM.lat: 56.629354
    test 348 line 59 _ExactTM.lon: 62.196474
    test 349 line 60 _ExactTM.easting: 11249894.100784
    test 350 line 60 _ExactTM.northing: 1619226.506299
    test 351 line 60 _ExactTM.convergence: 14.210358
    test 352 line 60 _ExactTM.scale: 3.048347
    test 353 line 60 _ExactTM.lat: 4.747762
    test 354 line 60 _ExactTM.lon: 70.932555
    test 355 line 61 _ExactTM.easting: 6808805.230950
    test 356 line 61 _ExactTM.northing: 8044779.777369
    test 357 line 61 _ExactTM.convergence: 68.242008
    test 358 line 61 _ExactTM.scale: 1.621464
    test 359 line 61 _ExactTM.lat: 35.882113
    test 360 line 61 _ExactTM.lon: 76.741849
    test 361 line 62 _ExactTM.easting: 2306021.556506
    test 362 line 62 _ExactTM.northing: 757191.592866
    test 363 line 62 _ExactTM.convergence: 2.385686
    test 364 line 62 _ExactTM.scale: 1.066159
    test 365 line 62 _ExactTM.lat: 6.420705
    test 366 line 62 _ExactTM.lon: 20.416028
    test 367 line 63 _ExactTM.easting: 1547406.313862
    test 368 line 63 _ExactTM.northing: 6048712.751824
    test 369 line 63 _ExactTM.convergence: 18.474372
    test 370 line 63 _ExactTM.scale: 1.029123
    test 371 line 63 _ExactTM.lat: 52.335248
    test 372 line 63 _ExactTM.lon: 22.879294
    test 373 line 64 _ExactTM.easting: 2430467.650383
    test 374 line 64 _ExactTM.northing: 7557167.613972
    test 375 line 64 _ExactTM.convergence: 42.110021
    test 376 line 64 _ExactTM.scale: 1.072759
    test 377 line 64 _ExactTM.lat: 59.846391
    test 378 line 64 _ExactTM.lon: 46.262536
    test 379 line 65 _ExactTM.easting: 2334053.905830
    test 380 line 65 _ExactTM.northing: 1948076.966582
    test 381 line 65 _ExactTM.convergence: 6.353185
    test 382 line 65 _ExactTM.scale: 1.067733
    test 383 line 65 _ExactTM.lat: 16.461790
    test 384 line 65 _ExactTM.lon: 21.433269
    test 385 line 66 _ExactTM.easting: 5564175.186737
    test 386 line 66 _ExactTM.northing: 1836851.660412
    test 387 line 66 _ExactTM.convergence: 11.870682
    test 388 line 66 _ExactTM.scale: 1.408265
    test 389 line 66 _ExactTM.lat: 11.707905
    test 390 line 66 _ExactTM.lon: 45.827075
    test 391 line 67 _ExactTM.easting: 6118505.590359
    test 392 line 67 _ExactTM.northing: 7631684.552421
    test 393 line 67 _ExactTM.convergence: 62.477323
    test 394 line 67 _ExactTM.scale: 1.493420
    test 395 line 67 _ExactTM.lat: 38.519075
    test 396 line 67 _ExactTM.lon: 71.935918
    test 397 line 68 _ExactTM.easting: 7365359.294665
    test 398 line 68 _ExactTM.northing: 8818194.451531
    test 399 line 68 _ExactTM.convergence: 77.207042
    test 400 line 68 _ExactTM.scale: 1.737639
    test 401 line 68 _ExactTM.lat: 34.264007
    test 402 line 68 _ExactTM.lon: 82.647878
    test 403 line 69 _ExactTM.easting: 36187.342415
    test 404 line 69 _ExactTM.northing: 2142565.324802
    test 405 line 69 _ExactTM.convergence: 0.114334
    test 406 line 69 _ExactTM.scale: 0.999616
    test 407 line 69 _ExactTM.lat: 19.376880
    test 408 line 69 _ExactTM.lon: 0.344605
    test 409 line 70 _ExactTM.easting: 2380328.546851
    test 410 line 70 _ExactTM.northing: 8440109.872384
    test 411 line 70 _ExactTM.convergence: 55.076067
    test 412 line 70 _ExactTM.scale: 1.069658
    test 413 line 70 _ExactTM.lat: 65.075805
    test 414 line 70 _ExactTM.lon: 57.653438
    test 415 line 71 _ExactTM.easting: 582511.608826
    test 416 line 71 _ExactTM.northing: 8876047.217071
    test 417 line 71 _ExactTM.convergence: 27.133300
    test 418 line 71 _ExactTM.scale: 1.003749
    test 419 line 71 _ExactTM.lat: 78.691870
    test 420 line 71 _ExactTM.lon: 27.591736
    test 421 line 72 _ExactTM.easting: 899441.350477
    test 422 line 72 _ExactTM.northing: 4582046.430516
    test 423 line 72 _ExactTM.convergence: 7.031211
    test 424 line 72 _ExactTM.scale: 1.009573
    test 425 line 72 _ExactTM.lat: 40.893022
    test 426 line 72 _ExactTM.lon: 10.668804
    test 427 line 73 _ExactTM.easting: 5022485.124337
    test 428 line 73 _ExactTM.northing: 9741774.933721
    test 429 line 73 _ExactTM.convergence: 86.505947
    test 430 line 73 _ExactTM.scale: 1.323700
    test 431 line 73 _ExactTM.lat: 48.914279
    test 432 line 73 _ExactTM.lon: 87.359268
    test 433 line 74 _ExactTM.easting: 6701004.587204
    test 434 line 74 _ExactTM.northing: 2954368.258231
    test 435 line 74 _ExactTM.convergence: 21.560153
    test 436 line 74 _ExactTM.scale: 1.608554
    test 437 line 74 _ExactTM.lat: 16.208377
    test 438 line 74 _ExactTM.lon: 54.494282
    test 439 line 75 _ExactTM.easting: 454986.218897
    test 440 line 75 _ExactTM.northing: 4885087.887884
    test 441 line 75 _ExactTM.convergence: 3.945648
    test 442 line 75 _ExactTM.scale: 1.002147
    test 443 line 75 _ExactTM.lat: 43.977936
    test 444 line 75 _ExactTM.lon: 5.672541
    test 445 line 76 _ExactTM.easting: 8903956.140311
    test 446 line 76 _ExactTM.northing: 8470608.577482
    test 447 line 76 _ExactTM.convergence: 74.723116
    test 448 line 76 _ExactTM.scale: 2.131311
    test 449 line 76 _ExactTM.lat: 26.850861
    test 450 line 76 _ExactTM.lon: 82.834480
    test 451 line 77 _ExactTM.easting: 1547627.594741
    test 452 line 77 _ExactTM.northing: 6036584.538347
    test 453 line 77 _ExactTM.convergence: 18.407629
    test 454 line 77 _ExactTM.scale: 1.029132
    test 455 line 77 _ExactTM.lat: 52.234165
    test 456 line 77 _ExactTM.lon: 22.827655
    test 457 line 78 _ExactTM.easting: 5221488.778597
    test 458 line 78 _ExactTM.northing: 1762592.044392
    test 459 line 78 _ExactTM.convergence: 10.927880
    test 460 line 78 _ExactTM.scale: 1.356721
    test 461 line 78 _ExactTM.lat: 11.674646
    test 462 line 78 _ExactTM.lon: 43.500147
    test 463 line 79 _ExactTM.easting: 4880570.297161
    test 464 line 79 _ExactTM.northing: 3325433.988867
    test 465 line 79 _ExactTM.convergence: 20.469862
    test 466 line 79 _ExactTM.scale: 1.308476
    test 467 line 79 _ExactTM.lat: 22.492753
    test 468 line 79 _ExactTM.lon: 44.179153
    test 469 line 80 _ExactTM.easting: 23930680.082694
    test 470 line 80 _ExactTM.northing: 7491462.099038
    test 471 line 80 _ExactTM.convergence: 75.937628
    test 472 line 80 _ExactTM.scale: 15.556365
    test 473 line 80 _ExactTM.lat: 0.910999
    test 474 line 80 _ExactTM.lon: 88.548823
    test 475 line 81 _ExactTM.easting: 71519.450458
    test 476 line 81 _ExactTM.northing: 3654740.444852
    test 477 line 81 _ExactTM.convergence: 0.417448
    test 478 line 81 _ExactTM.scale: 0.999663
    test 479 line 81 _ExactTM.lat: 33.028802
    test 480 line 81 _ExactTM.lon: 0.765843
    test 481 line 82 _ExactTM.easting: 4152797.795220
    test 482 line 82 _ExactTM.northing: 7823098.502751
    test 483 line 82 _ExactTM.convergence: 58.238901
    test 484 line 82 _ExactTM.scale: 1.218052
    test 485 line 82 _ExactTM.lat: 50.649195
    test 486 line 82 _ExactTM.lon: 64.389076
    test 487 line 83 _ExactTM.easting: 2926725.707639
    test 488 line 83 _ExactTM.northing: 7904918.072844
    test 489 line 83 _ExactTM.convergence: 51.592748
    test 490 line 83 _ExactTM.scale: 1.106206
    test 491 line 83 _ExactTM.lat: 58.820640
    test 492 line 83 _ExactTM.lon: 55.841048
    test 493 line 84 _ExactTM.easting: 1325509.113869
    test 494 line 84 _ExactTM.northing: 9675214.948213
    test 495 line 84 _ExactTM.convergence: 76.116213
    test 496 line 84 _ExactTM.scale: 1.021136
    test 497 line 84 _ExactTM.lat: 77.865762
    test 498 line 84 _ExactTM.lon: 76.414618
    test 499 line 85 _ExactTM.easting: 3045296.448926
    test 500 line 85 _ExactTM.northing: 542153.443280
    test 501 line 85 _ExactTM.convergence: 2.185095
    test 502 line 85 _ExactTM.scale: 1.116664
    test 503 line 85 _ExactTM.lat: 4.389639
    test 504 line 85 _ExactTM.lon: 26.458976
    test 505 line 86 _ExactTM.easting: 11843870.887518
    test 506 line 86 _ExactTM.northing: 5912803.073343
    test 507 line 86 _ExactTM.convergence: 52.814259
    test 508 line 86 _ExactTM.scale: 3.267256
    test 509 line 86 _ExactTM.lat: 13.924448
    test 510 line 86 _ExactTM.lon: 79.017873
    test 511 line 87 _ExactTM.easting: 8891099.704936
    test 512 line 87 _ExactTM.northing: 162160.142227
    test 513 line 87 _ExactTM.convergence: 1.312094
    test 514 line 87 _ExactTM.scale: 2.157363
    test 515 line 87 _ExactTM.lat: 0.679713
    test 516 line 87 _ExactTM.lon: 62.036792
    test 517 line 88 _ExactTM.easting: 4784814.214450  FAILED, KNOWN, expected 4784814.214449
    test 518 line 88 _ExactTM.northing: 2984497.432580
    test 519 line 88 _ExactTM.convergence: 17.946545
    test 520 line 88 _ExactTM.scale: 1.296116
    test 521 line 88 _ExactTM.lat: 20.478281
    test 522 line 88 _ExactTM.lon: 42.678234
    test 523 line 89 _ExactTM.easting: 1772074.682154
    test 524 line 89 _ExactTM.northing: 9491552.560143
    test 525 line 89 _ExactTM.convergence: 73.634830
    test 526 line 89 _ExactTM.scale: 1.038202
    test 527 line 89 _ExactTM.lat: 73.695703
    test 528 line 89 _ExactTM.lon: 74.259097
    test 529 line 90 _ExactTM.easting: 1907649.782106
    test 530 line 90 _ExactTM.northing: 6994232.429379
    test 531 line 90 _ExactTM.convergence: 29.718929
    test 532 line 90 _ExactTM.scale: 1.044503
    test 533 line 90 _ExactTM.lat: 58.569370
    test 534 line 90 _ExactTM.lon: 33.777549
    test 535 line 91 _ExactTM.easting: 2084423.818962
    test 536 line 91 _ExactTM.northing: 2211816.035619
    test 537 line 91 _ExactTM.convergence: 6.556448
    test 538 line 91 _ExactTM.scale: 1.053793
    test 539 line 91 _ExactTM.lat: 18.933881
    test 540 line 91 _ExactTM.lon: 19.492695
    test 541 line 92 _ExactTM.easting: 1064373.671729
    test 542 line 92 _ExactTM.northing: 7812482.547461
    test 543 line 92 _ExactTM.convergence: 24.874124
    test 544 line 92 _ExactTM.scale: 1.013490
    test 545 line 92 _ExactTM.lat: 68.317934
    test 546 line 92 _ExactTM.lon: 26.515687
    test 547 line 93 _ExactTM.easting: 4770385.479297
    test 548 line 93 _ExactTM.northing: 9734318.902980
    test 549 line 93 _ExactTM.convergence: 86.273119
    test 550 line 93 _ExactTM.scale: 1.290553
    test 551 line 93 _ExactTM.lat: 50.641941
    test 552 line 93 _ExactTM.lon: 87.111557
    test 553 line 94 _ExactTM.easting: 6398096.677297
    test 554 line 94 _ExactTM.northing: 4410894.752104
    test 555 line 94 _ExactTM.convergence: 32.558023
    test 556 line 94 _ExactTM.scale: 1.548004
    test 557 line 94 _ExactTM.lat: 24.411298
    test 558 line 94 _ExactTM.lon: 56.881823
    test 559 line 95 _ExactTM.easting: 3138623.300415
    test 560 line 95 _ExactTM.northing: 3082960.600798
    test 561 line 95 _ExactTM.convergence: 13.557672
    test 562 line 95 _ExactTM.scale: 1.123724
    test 563 line 95 _ExactTM.lat: 24.571871
    test 564 line 95 _ExactTM.lon: 30.073097
    test 565 line 96 _ExactTM.easting: 2748325.794651
    test 566 line 96 _ExactTM.northing: 4202811.912668
    test 567 line 96 _ExactTM.convergence: 17.578706
    test 568 line 96 _ExactTM.scale: 1.094102
    test 569 line 96 _ExactTM.lat: 34.202576
    test 570 line 96 _ExactTM.lon: 29.383166
    test 571 line 97 _ExactTM.easting: 6677830.630367
    test 572 line 97 _ExactTM.northing: 5350071.837395
    test 573 line 97 _ExactTM.convergence: 41.306641
    test 574 line 97 _ExactTM.scale: 1.599774
    test 575 line 97 _ExactTM.lat: 27.756285
    test 576 line 97 _ExactTM.lon: 61.881905
    test 577 line 98 _ExactTM.easting: 5941536.667431
    test 578 line 98 _ExactTM.northing: 3293112.175140
    test 579 line 98 _ExactTM.convergence: 22.752845
    test 580 line 98 _ExactTM.scale: 1.468473
    test 581 line 98 _ExactTM.lat: 19.742270
    test 582 line 98 _ExactTM.lon: 50.957821
    test 583 line 99 _ExactTM.easting: 3152481.792567
    test 584 line 99 _ExactTM.northing: 5903048.837978
    test 585 line 99 _ExactTM.convergence: 31.494606
    test 586 line 99 _ExactTM.scale: 1.124085
    test 587 line 99 _ExactTM.lat: 45.453582
    test 588 line 99 _ExactTM.lon: 40.659833
    test 589 line 100 _ExactTM.easting: 10460475.897730
    test 590 line 100 _ExactTM.northing: 2553463.624391
    test 591 line 100 _ExactTM.convergence: 21.965869
    test 592 line 100 _ExactTM.scale: 2.700296
    test 593 line 100 _ExactTM.lat: 8.322144
    test 594 line 100 _ExactTM.lon: 69.488157
    test 595 line 101 _ExactTM.easting: 1964010.778021
    test 596 line 101 _ExactTM.northing: 5634042.923056
    test 597 line 101 _ExactTM.convergence: 20.117800
    test 598 line 101 _ExactTM.scale: 1.047344
    test 599 line 101 _ExactTM.lat: 47.749831
    test 600 line 101 _ExactTM.lon: 26.322002
    test 601 line 102 _ExactTM.easting: 2065306.424934
    test 602 line 102 _ExactTM.northing: 2135008.468651
    test 603 line 102 _ExactTM.convergence: 6.258981
    test 604 line 102 _ExactTM.scale: 1.052800
    test 605 line 102 _ExactTM.lat: 18.297493
    test 606 line 102 _ExactTM.lon: 19.244669
    test 607 line 103 _ExactTM.easting: 5127738.132976
    test 608 line 103 _ExactTM.northing: 6793804.304411
    test 609 line 103 _ExactTM.convergence: 50.557915
    test 610 line 103 _ExactTM.scale: 1.339412
    test 611 line 103 _ExactTM.lat: 40.834541
    test 612 line 103 _ExactTM.lon: 61.650750
    test 613 line 104 _ExactTM.easting: 8385525.148166
    test 614 line 104 _ExactTM.northing: 6924932.344306
    test 615 line 104 _ExactTM.convergence: 59.087561
    test 616 line 104 _ExactTM.scale: 1.990364
    test 617 line 104 _ExactTM.lat: 26.273247
    test 618 line 104 _ExactTM.lon: 74.926694
    test 619 line 105 _ExactTM.easting: 2297510.791909
    test 620 line 105 _ExactTM.northing: 2805666.962834
    test 621 line 105 _ExactTM.convergence: 9.301553
    test 622 line 105 _ExactTM.scale: 1.065508
    test 623 line 105 _ExactTM.lat: 23.698347
    test 624 line 105 _ExactTM.lon: 22.155657
    test 625 line 106 _ExactTM.easting: 13749544.917635
    test 626 line 106 _ExactTM.northing: 8288728.384650
    test 627 line 106 _ExactTM.convergence: 75.033970
    test 628 line 106 _ExactTM.scale: 4.270588
    test 629 line 106 _ExactTM.lat: 12.364113
    test 630 line 106 _ExactTM.lon: 86.348578
    test 631 line 107 _ExactTM.easting: 317518.455546
    test 632 line 107 _ExactTM.northing: 1097517.583745
    test 633 line 107 _ExactTM.convergence: 0.499004
    test 634 line 107 _ExactTM.scale: 1.000848
    test 635 line 107 _ExactTM.lat: 9.916091
    test 636 line 107 _ExactTM.lon: 2.895277
    test 637 line 108 _ExactTM.easting: 3856035.184888
    test 638 line 108 _ExactTM.northing: 9141364.450290
    test 639 line 108 _ExactTM.convergence: 75.972763
    test 640 line 108 _ExactTM.scale: 1.186786
    test 641 line 108 _ExactTM.lat: 56.553876
    test 642 line 108 _ExactTM.lon: 78.215077
    test 643 line 109 _ExactTM.easting: 1457484.942823
    test 644 line 109 _ExactTM.northing: 9385297.101973
    test 645 line 109 _ExactTM.convergence: 66.784662
    test 646 line 109 _ExactTM.scale: 1.025660
    test 647 line 109 _ExactTM.lat: 75.957631
    test 648 line 109 _ExactTM.lon: 67.407383
    test 649 line 110 _ExactTM.easting: 1304934.901841
    test 650 line 110 _ExactTM.northing: 3604655.155715
    test 651 line 110 _ExactTM.convergence: 7.343989
    test 652 line 110 _ExactTM.scale: 1.020672
    test 653 line 110 _ExactTM.lat: 31.826531
    test 654 line 110 _ExactTM.lon: 13.731050
    test 655 line 111 _ExactTM.easting: 1399093.491792
    test 656 line 111 _ExactTM.northing: 8314607.120342
    test 657 line 111 _ExactTM.convergence: 38.630161
    test 658 line 111 _ExactTM.scale: 1.023625
    test 659 line 111 _ExactTM.lat: 70.542985
    test 660 line 111 _ExactTM.lon: 40.282055
    test 661 line 112 _ExactTM.easting: 356983.618540
    test 662 line 112 _ExactTM.northing: 4282309.048994
    test 663 line 112 _ExactTM.convergence: 2.561485
    test 664 line 112 _ExactTM.scale: 1.001170
    test 665 line 112 _ExactTM.lat: 38.617487
    test 666 line 112 _ExactTM.lon: 4.099838
    test 667 line 113 _ExactTM.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 668 line 113 _ExactTM.northing: 1510288.212229
    test 669 line 113 _ExactTM.convergence: 12.752154
    test 670 line 113 _ExactTM.scale: 2.511357
    test 671 line 113 _ExactTM.lat: 5.389447
    test 672 line 113 _ExactTM.lon: 66.729612
    test 673 line 114 _ExactTM.easting: 6367592.504007
    test 674 line 114 _ExactTM.northing: 1200437.077672
    test 675 line 114 _ExactTM.convergence: 8.338041
    test 676 line 114 _ExactTM.scale: 1.546210
    test 677 line 114 _ExactTM.lat: 6.995168
    test 678 line 114 _ExactTM.lon: 50.014763
    test 679 line 115 _ExactTM.easting: 4391263.676460
    test 680 line 115 _ExactTM.northing: 6325455.989408
    test 681 line 115 _ExactTM.convergence: 42.653541
    test 682 line 115 _ExactTM.scale: 1.245560
    test 683 line 115 _ExactTM.lat: 42.321894
    test 684 line 115 _ExactTM.lon: 53.784040
    test 685 line 116 _ExactTM.easting: 6209880.527527
    test 686 line 116 _ExactTM.northing: 2154754.449747
    test 687 line 116 _ExactTM.convergence: 14.919512
    test 688 line 116 _ExactTM.scale: 1.516560
    test 689 line 116 _ExactTM.lat: 12.698515
    test 690 line 116 _ExactTM.lon: 50.242047
    test 691 line 117 _ExactTM.easting: 1507053.688772
    test 692 line 117 _ExactTM.northing: 6261383.513280
    test 693 line 117 _ExactTM.convergence: 19.280373
    test 694 line 117 _ExactTM.scale: 1.027584
    test 695 line 117 _ExactTM.lat: 54.207636
    test 696 line 117 _ExactTM.lon: 23.325731
    test 697 line 118 _ExactTM.easting: 8332725.003777
    test 698 line 118 _ExactTM.northing: 3002712.329753
    test 699 line 118 _ExactTM.convergence: 24.059212
    test 700 line 118 _ExactTM.scale: 1.990450
    test 701 line 118 _ExactTM.lat: 13.224787
    test 702 line 118 _ExactTM.lon: 62.426698
    test 703 line 119 _ExactTM.easting: 3958910.085235
    test 704 line 119 _ExactTM.northing: 3462284.926102
    test 705 line 119 _ExactTM.convergence: 18.546398
    test 706 line 119 _ExactTM.scale: 1.199351
    test 707 line 119 _ExactTM.lat: 25.650282
    test 708 line 119 _ExactTM.lon: 37.710391
    test 709 line 120 _ExactTM.easting: 10452892.282083
    test 710 line 120 _ExactTM.northing: 8000059.605114
    test 711 line 120 _ExactTM.convergence: 71.075240
    test 712 line 120 _ExactTM.scale: 2.650111
    test 713 line 120 _ExactTM.lat: 20.684773
    test 714 line 120 _ExactTM.lon: 82.849734
    test 715 line 121 _ExactTM.easting: 496148.253731
    test 716 line 121 _ExactTM.northing: 6388503.365043
    test 717 line 121 _ExactTM.convergence: 6.970955
    test 718 line 121 _ExactTM.scale: 1.002620
    test 719 line 121 _ExactTM.lat: 57.367533
    test 720 line 121 _ExactTM.lon: 8.260866
    test 721 line 122 _ExactTM.easting: 7375792.085850
    test 722 line 122 _ExactTM.northing: 5544624.072155
    test 723 line 122 _ExactTM.convergence: 44.510851
    test 724 line 122 _ExactTM.scale: 1.745898
    test 725 line 122 _ExactTM.lat: 25.958757
    test 726 line 122 _ExactTM.lon: 65.760477
    test 727 line 123 _ExactTM.easting: 2826258.041979
    test 728 line 123 _ExactTM.northing: 5167759.816959
    test 729 line 123 _ExactTM.convergence: 23.783897
    test 730 line 123 _ExactTM.scale: 1.099415
    test 731 line 123 _ExactTM.lat: 41.395848
    test 732 line 123 _ExactTM.lon: 33.661790
    test 733 line 124 _ExactTM.easting: 3958563.378851
    test 734 line 124 _ExactTM.northing: 8499923.231243
    test 735 line 124 _ExactTM.convergence: 66.570945
    test 736 line 124 _ExactTM.scale: 1.197296
    test 737 line 124 _ExactTM.lat: 54.266617
    test 738 line 124 _ExactTM.lon: 70.602199
    test 739 line 125 _ExactTM.easting: 4408189.533462
    test 740 line 125 _ExactTM.northing: 8046312.003642
    test 741 line 125 _ExactTM.convergence: 62.216959
    test 742 line 125 _ExactTM.scale: 1.246750
    test 743 line 125 _ExactTM.lat: 49.840393
    test 744 line 125 _ExactTM.lon: 68.036728
    test 745 line 126 _ExactTM.easting: 3629225.627512
    test 746 line 126 _ExactTM.northing: 6371258.454645
    test 747 line 126 _ExactTM.convergence: 38.881675
    test 748 line 126 _ExactTM.scale: 1.165511
    test 749 line 126 _ExactTM.lat: 46.306035
    test 750 line 126 _ExactTM.lon: 48.085828
    test 751 line 127 _ExactTM.easting: 602838.450710
    test 752 line 127 _ExactTM.northing: 4851370.637205
    test 753 line 127 _ExactTM.convergence: 5.160395
    test 754 line 127 _ExactTM.scale: 1.004073
    test 755 line 127 _ExactTM.lat: 43.570988
    test 756 line 127 _ExactTM.lon: 7.464494
    test 757 line 128 _ExactTM.easting: 764616.665051
    test 758 line 128 _ExactTM.northing: 2164299.337945
    test 759 line 128 _ExactTM.convergence: 2.429300
    test 760 line 128 _ExactTM.scale: 1.006835
    test 761 line 128 _ExactTM.lat: 19.427290
    test 762 line 128 _ExactTM.lon: 7.268247
    test 763 line 129 _ExactTM.easting: 5048953.021931
    test 764 line 129 _ExactTM.northing: 1885974.057398
    test 765 line 129 _ExactTM.convergence: 11.459804
    test 766 line 129 _ExactTM.scale: 1.332207
    test 767 line 129 _ExactTM.lat: 12.713794
    test 768 line 129 _ExactTM.lon: 42.507018
    test 769 line 130 _ExactTM.easting: 2293996.601155
    test 770 line 130 _ExactTM.northing: 2392408.644221
    test 771 line 130 _ExactTM.convergence: 7.791838
    test 772 line 130 _ExactTM.scale: 1.065348
    test 773 line 130 _ExactTM.lat: 20.238782
    test 774 line 130 _ExactTM.lon: 21.566068
    test 775 line 131 _ExactTM.easting: 1530603.839418
    test 776 line 131 _ExactTM.northing: 7287841.459898
    test 777 line 131 _ExactTM.convergence: 27.502921
    test 778 line 131 _ExactTM.scale: 1.028416
    test 779 line 131 _ExactTM.lat: 62.367847
    test 780 line 131 _ExactTM.lon: 30.438849
    test 781 line 132 _ExactTM.easting: 2660000.093152
    test 782 line 132 _ExactTM.northing: 5161982.213248
    test 783 line 132 _ExactTM.convergence: 22.629836
    test 784 line 132 _ExactTM.scale: 1.087851
    test 785 line 132 _ExactTM.lat: 41.891569
    test 786 line 132 _ExactTM.lon: 31.959547
    test 787 line 133 _ExactTM.easting: 5037478.329414
    test 788 line 133 _ExactTM.northing: 8768172.379908
    test 789 line 133 _ExactTM.convergence: 73.511182
    test 790 line 133 _ExactTM.scale: 1.325919
    test 791 line 133 _ExactTM.lat: 47.664248
    test 792 line 133 _ExactTM.lon: 77.630062
    test 793 line 134 _ExactTM.easting: 2289650.957799
    test 794 line 134 _ExactTM.northing: 8784328.593607
    test 795 line 134 _ExactTM.convergence: 60.786067
    test 796 line 134 _ExactTM.scale: 1.064346
    test 797 line 134 _ExactTM.lat: 67.259559
    test 798 line 134 _ExactTM.lon: 62.715293
    test 799 line 135 _ExactTM.easting: 647913.889744
    test 800 line 135 _ExactTM.northing: 6742382.228217
    test 801 line 135 _ExactTM.convergence: 10.252667
    test 802 line 135 _ExactTM.scale: 1.004748
    test 803 line 135 _ExactTM.lat: 60.295381
    test 804 line 135 _ExactTM.lon: 11.763097
    test 805 line 136 _ExactTM.easting: 1118372.698566
    test 806 line 136 _ExactTM.northing: 9040627.942263
    test 807 line 136 _ExactTM.convergence: 48.936803
    test 808 line 136 _ExactTM.scale: 1.014920
    test 809 line 136 _ExactTM.lat: 76.878914
    test 810 line 136 _ExactTM.lon: 49.685773
    test 811 line 137 _ExactTM.easting: 440696.510070
    test 812 line 137 _ExactTM.northing: 5500355.826297
    test 813 line 137 _ExactTM.convergence: 4.636104
    test 814 line 137 _ExactTM.scale: 1.001986
    test 815 line 137 _ExactTM.lat: 49.495349
    test 816 line 137 _ExactTM.lon: 6.087551
    test 817 line 138 _ExactTM.easting: 601728.149727
    test 818 line 138 _ExactTM.northing: 9095352.048149
    test 819 line 138 _ExactTM.convergence: 33.435771
    test 820 line 138 _ExactTM.scale: 1.004027
    test 821 line 138 _ExactTM.lat: 80.297265
    test 822 line 138 _ExactTM.lon: 33.816372
    test 823 line 139 _ExactTM.easting: 3481444.777827
    test 824 line 139 _ExactTM.northing: 291665.708749
    test 825 line 139 _ExactTM.convergence: 1.314726
    test 826 line 139 _ExactTM.scale: 1.153534
    test 827 line 139 _ExactTM.lat: 2.286437
    test 828 line 139 _ExactTM.lon: 29.855149
    test 829 line 140 _ExactTM.easting: 3515304.901524
    test 830 line 140 _ExactTM.northing: 1443981.882918
    test 831 line 140 _ExactTM.convergence: 6.641638
    test 832 line 140 _ExactTM.scale: 1.156509
    test 833 line 140 _ExactTM.lat: 11.264457
    test 834 line 140 _ExactTM.lon: 30.743907
    test 835 line 141 _ExactTM.easting: 160012.186959
    test 836 line 141 _ExactTM.northing: 3922609.253231
    test 837 line 141 _ExactTM.convergence: 1.022225
    test 838 line 141 _ExactTM.scale: 0.999916
    test 839 line 141 _ExactTM.lat: 35.434073
    test 840 line 141 _ExactTM.lon: 1.762795
    test 841 line 142 _ExactTM.easting: 4163744.245622
    test 842 line 142 _ExactTM.northing: 936884.674804
    test 843 line 142 _ExactTM.convergence: 4.892559
    test 844 line 142 _ExactTM.scale: 1.222164
    test 845 line 142 _ExactTM.lat: 6.923695
    test 846 line 142 _ExactTM.lon: 35.289456
    test 847 line 143 _ExactTM.easting: 6155200.017926
    test 848 line 143 _ExactTM.northing: 6926306.628390
    test 849 line 143 _ExactTM.convergence: 55.103258
    test 850 line 143 _ExactTM.scale: 1.500556
    test 851 line 143 _ExactTM.lat: 36.129672
    test 852 line 143 _ExactTM.lon: 67.533176
    test 853 line 144 _ExactTM.easting: 16263383.285440
    test 854 line 144 _ExactTM.northing: 3591296.731341
    test 855 line 144 _ExactTM.convergence: 36.040254
    test 856 line 144 _ExactTM.scale: 6.589288
    test 857 line 144 _ExactTM.lat: 4.406529
    test 858 line 144 _ExactTM.lon: 81.965734
    test 859 line 145 _ExactTM.easting: 14220995.515399  FAILED, KNOWN, expected 14220995.515398
    test 860 line 145 _ExactTM.northing: 5100587.457503
    test 861 line 145 _ExactTM.convergence: 47.314258
    test 862 line 145 _ExactTM.scale: 4.693202
    test 863 line 145 _ExactTM.lat: 8.474589
    test 864 line 145 _ExactTM.lon: 81.129945
    test 865 line 146 _ExactTM.easting: 3173034.802372
    test 866 line 146 _ExactTM.northing: 7263421.942957
    test 867 line 146 _ExactTM.convergence: 45.215808
    test 868 line 146 _ExactTM.scale: 1.125410
    test 869 line 146 _ExactTM.lat: 53.907276
    test 870 line 146 _ExactTM.lon: 51.252904
    test 871 line 147 _ExactTM.easting: 10253274.092204
    test 872 line 147 _ExactTM.northing: 8867574.299792
    test 873 line 147 _ExactTM.convergence: 79.198250
    test 874 line 147 _ExactTM.scale: 2.572372
    test 875 line 147 _ExactTM.lat: 22.120545
    test 876 line 147 _ExactTM.lon: 85.756782
    test 877 line 148 _ExactTM.easting: 2415561.483230
    test 878 line 148 _ExactTM.northing: 8813225.217097
    test 879 line 148 _ExactTM.convergence: 62.548978
    test 880 line 148 _ExactTM.scale: 1.071748
    test 881 line 148 _ExactTM.lat: 66.444100
    test 882 line 148 _ExactTM.lon: 64.532960
    test 883 line 149 _ExactTM.easting: 9589179.293295
    test 884 line 149 _ExactTM.northing: 1777680.784143
    test 885 line 149 _ExactTM.convergence: 14.838483
    test 886 line 149 _ExactTM.scale: 2.380716
    test 887 line 149 _ExactTM.lat: 6.670965
    test 888 line 149 _ExactTM.lon: 65.660408
    test 889 line 150 _ExactTM.easting: 727939.438391
    test 890 line 150 _ExactTM.northing: 3684363.236810
    test 891 line 150 _ExactTM.convergence: 4.266227
    test 892 line 150 _ExactTM.scale: 1.006140
    test 893 line 150 _ExactTM.lat: 33.054057
    test 894 line 150 _ExactTM.lon: 7.787458
    test 895 line 151 _ExactTM.easting: 1250765.991085
    test 896 line 151 _ExactTM.northing: 792869.242719
    test 897 line 151 _ExactTM.convergence: 1.396497
    test 898 line 151 _ExactTM.scale: 1.019026
    test 899 line 151 _ExactTM.lat: 7.035525
    test 900 line 151 _ExactTM.lon: 11.253707
    test 901 line 152 _ExactTM.easting: 710421.705887
    test 902 line 152 _ExactTM.northing: 5019406.075928
    test 903 line 152 _ExactTM.convergence: 6.393949
    test 904 line 152 _ExactTM.scale: 1.005812
    test 905 line 152 _ExactTM.lat: 44.971340
    test 906 line 152 _ExactTM.lon: 9.009304
    test 907 line 153 _ExactTM.easting: 4600995.074643
    test 908 line 153 _ExactTM.northing: 4505712.084593
    test 909 line 153 _ExactTM.convergence: 27.997458
    test 910 line 153 _ExactTM.scale: 1.271841
    test 911 line 153 _ExactTM.lat: 30.821397
    test 912 line 153 _ExactTM.lon: 45.970577
    test 913 line 154 _ExactTM.easting: 557642.627782
    test 914 line 154 _ExactTM.northing: 7006911.251644
    test 915 line 154 _ExactTM.convergence: 9.769903
    test 916 line 154 _ExactTM.scale: 1.003411
    test 917 line 154 _ExactTM.lat: 62.763886
    test 918 line 154 _ExactTM.lon: 10.960144
    test 919 line 155 _ExactTM.easting: 4635062.294291
    test 920 line 155 _ExactTM.northing: 2702556.153311
    test 921 line 155 _ExactTM.convergence: 15.779547
    test 922 line 155 _ExactTM.scale: 1.277178
    test 923 line 155 _ExactTM.lat: 18.888611
    test 924 line 155 _ExactTM.lon: 41.009871
    test 925 line 156 _ExactTM.easting: 14554962.255919
    test 926 line 156 _ExactTM.northing: 4716639.908572
    test 927 line 156 _ExactTM.convergence: 44.192751
    test 928 line 156 _ExactTM.scale: 4.960020
    test 929 line 156 _ExactTM.lat: 7.524119
    test 930 line 156 _ExactTM.lon: 81.050715
    test 931 line 157 _ExactTM.easting: 882126.661736
    test 932 line 157 _ExactTM.northing: 7947612.369506
    test 933 line 157 _ExactTM.convergence: 22.429487
    test 934 line 157 _ExactTM.scale: 1.009132
    test 935 line 157 _ExactTM.lat: 70.063902
    test 936 line 157 _ExactTM.lon: 23.705255
    test 937 line 158 _ExactTM.easting: 20262021.645983
    test 938 line 158 _ExactTM.northing: 8113827.820796
    test 939 line 158 _ExactTM.convergence: 76.936057
    test 940 line 158 _ExactTM.scale: 10.349092
    test 941 line 158 _ExactTM.lat: 3.556526
    test 942 line 158 _ExactTM.lon: 88.363529
    test 943 line 159 _ExactTM.easting: 6500508.399850
    test 944 line 159 _ExactTM.northing: 6956476.342368
    test 945 line 159 _ExactTM.convergence: 56.237116
    test 946 line 159 _ExactTM.scale: 1.563162
    test 947 line 159 _ExactTM.lat: 34.551257
    test 948 line 159 _ExactTM.lon: 69.111091
    test 949 line 160 _ExactTM.easting: 3884036.641314
    test 950 line 160 _ExactTM.northing: 6890167.411733
    test 951 line 160 _ExactTM.convergence: 45.760130
    test 952 line 160 _ExactTM.scale: 1.190167
    test 953 line 160 _ExactTM.lat: 47.929051
    test 954 line 160 _ExactTM.lon: 54.103418
    test 955 line 161 _ExactTM.easting: 217855.546078
    test 956 line 161 _ExactTM.northing: 6184108.122568
    test 957 line 161 _ExactTM.convergence: 2.870993
    test 958 line 161 _ExactTM.scale: 1.000182
    test 959 line 161 _ExactTM.lat: 55.753536
    test 960 line 161 _ExactTM.lon: 3.471798
    test 961 line 162 _ExactTM.easting: 11384139.290402
    test 962 line 162 _ExactTM.northing: 8893889.949556
    test 963 line 162 _ExactTM.convergence: 79.774854
    test 964 line 162 _ExactTM.scale: 3.024672
    test 965 line 162 _ExactTM.lat: 18.530847
    test 966 line 162 _ExactTM.lon: 86.555312
    test 967 line 163 _ExactTM.easting: 3469855.989805
    test 968 line 163 _ExactTM.northing: 7723193.799228
    test 969 line 163 _ExactTM.convergence: 53.114700
    test 970 line 163 _ExactTM.scale: 1.150540
    test 971 line 163 _ExactTM.lat: 54.510125
    test 972 line 163 _ExactTM.lon: 58.556056
    test 973 line 164 _ExactTM.easting: 5926165.994939
    test 974 line 164 _ExactTM.northing: 9385463.732747
    test 975 line 164 _ExactTM.convergence: 82.506981
    test 976 line 164 _ExactTM.scale: 1.459758
    test 977 line 164 _ExactTM.lat: 42.864162
    test 978 line 164 _ExactTM.lon: 84.866326
    test 979 line 165 _ExactTM.easting: 5798639.662224
    test 980 line 165 _ExactTM.northing: 5305387.640916
    test 981 line 165 _ExactTM.convergence: 38.617257
    test 982 line 165 _ExactTM.scale: 1.442263
    test 983 line 165 _ExactTM.lat: 30.911943
    test 984 line 165 _ExactTM.lon: 57.114102
    test 985 line 166 _ExactTM.easting: 9464.934388
    test 986 line 166 _ExactTM.northing: 6489121.624944
    test 987 line 166 _ExactTM.convergence: 0.138696
    test 988 line 166 _ExactTM.scale: 0.999601
    test 989 line 166 _ExactTM.lat: 58.542493
    test 990 line 166 _ExactTM.lon: 0.162593
    test 991 line 167 _ExactTM.easting: 12575834.275614
    test 992 line 167 _ExactTM.northing: 8356610.895486
    test 993 line 167 _ExactTM.convergence: 75.235223
    test 994 line 167 _ExactTM.scale: 3.599442
    test 995 line 167 _ExactTM.lat: 15.022689
    test 996 line 167 _ExactTM.lon: 85.792615
    test 997 line 168 _ExactTM.easting: 2719653.543469
    test 998 line 168 _ExactTM.northing: 9362389.163495
    test 999 line 168 _ExactTM.convergence: 76.049670
    test 1000 line 168 _ExactTM.scale: 1.091315
    test 1001 line 168 _ExactTM.lat: 65.692275
    test 1002 line 168 _ExactTM.lon: 77.241377
    test 1003 line 169 _ExactTM.easting: 4845341.924698
    test 1004 line 169 _ExactTM.northing: 8710522.326901
    test 1005 line 169 _ExactTM.convergence: 72.320942
    test 1006 line 169 _ExactTM.scale: 1.300382
    test 1007 line 169 _ExactTM.lat: 48.806211
    test 1008 line 169 _ExactTM.lon: 76.486365
    test 1009 line 170 _ExactTM.easting: 3935261.522763
    test 1010 line 170 _ExactTM.northing: 9454271.649062
    test 1011 line 170 _ExactTM.convergence: 81.162334
    test 1012 line 170 _ExactTM.scale: 1.194767
    test 1013 line 170 _ExactTM.lat: 56.436025
    test 1014 line 170 _ExactTM.lon: 82.611568
    test 1015 line 171 _ExactTM.easting: 7074299.823000
    test 1016 line 171 _ExactTM.northing: 1648736.065055
    test 1017 line 171 _ExactTM.convergence: 12.145925
    test 1018 line 171 _ExactTM.scale: 1.687551
    test 1019 line 171 _ExactTM.lat: 8.766053
    test 1020 line 171 _ExactTM.lon: 54.367539
    test 1021 line 172 _ExactTM.easting: 3689072.579308
    test 1022 line 172 _ExactTM.northing: 2230802.665211
    test 1023 line 172 _ExactTM.convergence: 10.856248
    test 1024 line 172 _ExactTM.scale: 1.172689
    test 1025 line 172 _ExactTM.lat: 17.095495
    test 1026 line 172 _ExactTM.lon: 33.059128
    test 1027 line 173 _ExactTM.easting: 8102565.885587
    test 1028 line 173 _ExactTM.northing: 5167396.617580
    test 1029 line 173 _ExactTM.convergence: 42.324886
    test 1030 line 173 _ExactTM.scale: 1.921927
    test 1031 line 173 _ExactTM.lat: 22.142861
    test 1032 line 173 _ExactTM.lon: 67.200684
    test 1033 line 174 _ExactTM.easting: 8181271.353564
    test 1034 line 174 _ExactTM.northing: 4425436.547185
    test 1035 line 174 _ExactTM.convergence: 35.900845
    test 1036 line 174 _ExactTM.scale: 1.945017
    test 1037 line 174 _ExactTM.lat: 19.222623
    test 1038 line 174 _ExactTM.lon: 65.180785
    test 1039 line 175 _ExactTM.easting: 767067.394003
    test 1040 line 175 _ExactTM.northing: 3701745.857296
    test 1041 line 175 _ExactTM.convergence: 4.519201
    test 1042 line 175 _ExactTM.scale: 1.006863
    test 1043 line 175 _ExactTM.lat: 33.182474
    test 1044 line 175 _ExactTM.lon: 8.216952
    test 1045 line 176 _ExactTM.easting: 6688114.168572
    test 1046 line 176 _ExactTM.northing: 2052857.299639
    test 1047 line 176 _ExactTM.convergence: 14.766191
    test 1048 line 176 _ExactTM.scale: 1.607200
    test 1049 line 176 _ExactTM.lat: 11.417963
    test 1050 line 176 _ExactTM.lon: 52.808691
    test 1051 line 177 _ExactTM.easting: 5608408.773761
    test 1052 line 177 _ExactTM.northing: 3859055.659110
    test 1053 line 177 _ExactTM.convergence: 26.244151
    test 1054 line 177 _ExactTM.scale: 1.413463
    test 1055 line 177 _ExactTM.lat: 23.836688
    test 1056 line 177 _ExactTM.lon: 50.500180
    test 1057 line 178 _ExactTM.easting: 3836942.765275
    test 1058 line 178 _ExactTM.northing: 6415467.634326
    test 1059 line 178 _ExactTM.convergence: 40.575885
    test 1060 line 178 _ExactTM.scale: 1.185615
    test 1061 line 178 _ExactTM.lat: 45.550020
    test 1062 line 178 _ExactTM.lon: 50.148036
    test 1063 line 179 _ExactTM.easting: 1298730.366025
    test 1064 line 179 _ExactTM.northing: 6021453.000792
    test 1065 line 179 _ExactTM.convergence: 15.613320
    test 1066 line 179 _ExactTM.scale: 1.020367
    test 1067 line 179 _ExactTM.lat: 52.746079
    test 1068 line 179 _ExactTM.lon: 19.343926
    test 1069 line 180 _ExactTM.easting: 416934.289208
    test 1070 line 180 _ExactTM.northing: 7295683.451705
    test 1071 line 180 _ExactTM.convergence: 8.238232
    test 1072 line 180 _ExactTM.scale: 1.001729
    test 1073 line 180 _ExactTM.lat: 65.513348
    test 1074 line 180 _ExactTM.lon: 9.039529
    test 1075 line 181 _ExactTM.easting: 4336076.850889
    test 1076 line 181 _ExactTM.northing: 7617975.722779
    test 1077 line 181 _ExactTM.convergence: 56.537088
    test 1078 line 181 _ExactTM.scale: 1.238582
    test 1079 line 181 _ExactTM.lat: 48.709795
    test 1080 line 181 _ExactTM.lon: 63.554005
    test 1081 line 182 _ExactTM.easting: 168047.336980
    test 1082 line 182 _ExactTM.northing: 2185000.046530
    test 1083 line 182 _ExactTM.convergence: 0.542187
    test 1084 line 182 _ExactTM.scale: 0.999949
    test 1085 line 182 _ExactTM.lat: 19.753509
    test 1086 line 182 _ExactTM.lon: 1.603846
    test 1087 line 183 _ExactTM.easting: 8276281.328790
    test 1088 line 183 _ExactTM.northing: 263444.350545
    test 1089 line 183 _ExactTM.convergence: 2.071435
    test 1090 line 183 _ExactTM.scale: 1.980314
    test 1091 line 183 _ExactTM.lat: 1.202816
    test 1092 line 183 _ExactTM.lon: 59.377276
    test 1093 line 184 _ExactTM.easting: 4772573.810710
    test 1094 line 184 _ExactTM.northing: 6765710.336002
    test 1095 line 184 _ExactTM.convergence: 48.857561
    test 1096 line 184 _ExactTM.scale: 1.291911
    test 1097 line 184 _ExactTM.lat: 42.564975
    test 1098 line 184 _ExactTM.lon: 59.356947
    test 1099 line 185 _ExactTM.easting: 5427755.074639
    test 1100 line 185 _ExactTM.northing: 1556055.820924
    test 1101 line 185 _ExactTM.convergence: 9.862178
    test 1102 line 185 _ExactTM.scale: 1.387394
    test 1103 line 185 _ExactTM.lat: 10.090572
    test 1104 line 185 _ExactTM.lon: 44.604132
    test 1105 line 186 _ExactTM.easting: 11588458.616041
    test 1106 line 186 _ExactTM.northing: 5707993.922613
    test 1107 line 186 _ExactTM.convergence: 50.784827
    test 1108 line 186 _ExactTM.scale: 3.149567
    test 1109 line 186 _ExactTM.lat: 14.133028
    test 1110 line 186 _ExactTM.lon: 78.097533
    test 1111 line 187 _ExactTM.easting: 7152433.802688
    test 1112 line 187 _ExactTM.northing: 761390.695844
    test 1113 line 187 _ExactTM.convergence: 5.607350
    test 1114 line 187 _ExactTM.scale: 1.705261
    test 1115 line 187 _ExactTM.lat: 4.031123
    test 1116 line 187 _ExactTM.lon: 54.048782
    test 1117 line 188 _ExactTM.easting: 3105651.390901
    test 1118 line 188 _ExactTM.northing: 9426026.169064
    test 1119 line 188 _ExactTM.convergence: 78.750206
    test 1120 line 188 _ExactTM.scale: 1.119737
    test 1121 line 188 _ExactTM.lat: 62.746603
    test 1122 line 188 _ExactTM.lon: 79.968641
    test 1123 line 189 _ExactTM.easting: 2959009.639022
    test 1124 line 189 _ExactTM.northing: 8339242.269282
    test 1125 line 189 _ExactTM.convergence: 58.460865
    test 1126 line 189 _ExactTM.scale: 1.108554
    test 1127 line 189 _ExactTM.lat: 60.626429
    test 1128 line 189 _ExactTM.lon: 61.851551
    test 1129 line 190 _ExactTM.easting: 8640472.267145
    test 1130 line 190 _ExactTM.northing: 6230320.417931
    test 1131 line 190 _ExactTM.convergence: 52.816810
    test 1132 line 190 _ExactTM.scale: 2.062973
    test 1133 line 190 _ExactTM.lat: 23.600626
    test 1134 line 190 _ExactTM.lon: 72.811634
    test 1135 line 191 _ExactTM.easting: 811352.108932
    test 1136 line 191 _ExactTM.northing: 9816129.813481
    test 1137 line 191 _ExactTM.convergence: 77.299184
    test 1138 line 191 _ExactTM.scale: 1.007651
    test 1139 line 191 _ExactTM.lat: 82.572236
    test 1140 line 191 _ExactTM.lon: 77.402323
    test 1141 line 192 _ExactTM.easting: 6521874.973458
    test 1142 line 192 _ExactTM.northing: 1053612.479744
    test 1143 line 192 _ExactTM.convergence: 7.407328
    test 1144 line 192 _ExactTM.scale: 1.575529
    test 1145 line 192 _ExactTM.lat: 6.030051
    test 1146 line 192 _ExactTM.lon: 50.783505
    test 1147 line 193 _ExactTM.easting: 3477983.997875
    test 1148 line 193 _ExactTM.northing: 5651613.325947
    test 1149 line 193 _ExactTM.convergence: 31.530673
    test 1150 line 193 _ExactTM.scale: 1.151875
    test 1151 line 193 _ExactTM.lat: 42.411523
    test 1152 line 193 _ExactTM.lon: 42.258009
    test 1153 line 194 _ExactTM.easting: 629892.822243
    test 1154 line 194 _ExactTM.northing: 3283914.910451
    test 1155 line 194 _ExactTM.convergence: 3.210482
    test 1156 line 194 _ExactTM.scale: 1.004499
    test 1157 line 194 _ExactTM.lat: 29.526120
    test 1158 line 194 _ExactTM.lon: 6.493069
    test 1159 line 195 _ExactTM.easting: 3381879.687227
    test 1160 line 195 _ExactTM.northing: 5103629.325665
    test 1161 line 195 _ExactTM.convergence: 26.748108
    test 1162 line 195 _ExactTM.scale: 1.143559
    test 1163 line 195 _ExactTM.lat: 39.021853
    test 1164 line 195 _ExactTM.lon: 38.641779
    test 1165 line 196 _ExactTM.easting: 2815986.534177
    test 1166 line 196 _ExactTM.northing: 9387029.120718
    test 1167 line 196 _ExactTM.convergence: 76.967262
    test 1168 line 196 _ExactTM.scale: 1.098032
    test 1169 line 196 _ExactTM.lat: 64.971850
    test 1170 line 196 _ExactTM.lon: 78.151893
    test 1171 line 197 _ExactTM.easting: 3398195.889603
    test 1172 line 197 _ExactTM.northing: 9138936.031490
    test 1173 line 197 _ExactTM.convergence: 74.477499
    test 1174 line 197 _ExactTM.scale: 1.144009
    test 1175 line 197 _ExactTM.lat: 59.961819
    test 1176 line 197 _ExactTM.lon: 76.473422
    test 1177 line 198 _ExactTM.easting: 2421734.754637
    test 1178 line 198 _ExactTM.northing: 5002372.094991
    test 1179 line 198 _ExactTM.convergence: 20.017082
    test 1180 line 198 _ExactTM.scale: 1.072592
    test 1181 line 198 _ExactTM.lat: 41.374040
    test 1182 line 198 _ExactTM.lon: 28.848343
    test 1183 line 199 _ExactTM.easting: 2360869.895525
    test 1184 line 199 _ExactTM.northing: 9553298.449536
    test 1185 line 199 _ExactTM.convergence: 78.848205
    test 1186 line 199 _ExactTM.scale: 1.068453
    test 1187 line 199 _ExactTM.lat: 68.946087
    test 1188 line 199 _ExactTM.lon: 79.574523
    test 1189 line 200 _ExactTM.easting: 1196539.972194
    test 1190 line 200 _ExactTM.northing: 9861920.836230
    test 1191 line 200 _ExactTM.convergence: 83.437668
    test 1192 line 200 _ExactTM.scale: 1.017137
    test 1193 line 200 _ExactTM.lat: 79.275096
    test 1194 line 200 _ExactTM.lon: 83.551272
    test 1195 line 201 _ExactTM.easting: 1327758.704795
    test 1196 line 201 _ExactTM.northing: 2375509.241683
    test 1197 line 201 _ExactTM.convergence: 4.617572
    test 1198 line 201 _ExactTM.scale: 1.021465
    test 1199 line 201 _ExactTM.lat: 21.000252
    test 1200 line 201 _ExactTM.lon: 12.697444
    test 1201 line 202 _ExactTM.easting: 2070860.327644
    test 1202 line 202 _ExactTM.northing: 8604500.719581
    test 1203 line 202 _ExactTM.convergence: 54.722761
    test 1204 line 202 _ExactTM.scale: 1.052469
    test 1205 line 202 _ExactTM.lat: 68.015227
    test 1206 line 202 _ExactTM.lon: 56.732419
    test 1207 line 203 _ExactTM.easting: 6564776.654864
    test 1208 line 203 _ExactTM.northing: 8171207.177379
    test 1209 line 203 _ExactTM.convergence: 69.237523
    test 1210 line 203 _ExactTM.scale: 1.573894
    test 1211 line 203 _ExactTM.lat: 37.423675
    test 1212 line 203 _ExactTM.lon: 76.947359
    test 1213 line 204 _ExactTM.easting: 592653.553821
    test 1214 line 204 _ExactTM.northing: 6125529.810052
    test 1215 line 204 _ExactTM.convergence: 7.600785
    test 1216 line 204 _ExactTM.scale: 1.003912
    test 1217 line 204 _ExactTM.lat: 54.922707
    test 1218 line 204 _ExactTM.lon: 9.260818
    test 1219 line 205 _ExactTM.easting: 693459.671821
    test 1220 line 205 _ExactTM.northing: 6943779.991032
    test 1221 line 205 _ExactTM.convergence: 11.787587
    test 1222 line 205 _ExactTM.scale: 1.005496
    test 1223 line 205 _ExactTM.lat: 61.982810
    test 1224 line 205 _ExactTM.lon: 13.299659
    test 1225 line 206 _ExactTM.easting: 1838956.187625
    test 1226 line 206 _ExactTM.northing: 3511959.612381
    test 1227 line 206 _ExactTM.convergence: 9.844313
    test 1228 line 206 _ExactTM.scale: 1.041603
    test 1229 line 206 _ExactTM.lat: 30.324214
    test 1230 line 206 _ExactTM.lon: 18.959769
    test 1231 line 207 _ExactTM.easting: 4460690.884597
    test 1232 line 207 _ExactTM.northing: 5541873.235403
    test 1233 line 207 _ExactTM.convergence: 35.768613
    test 1234 line 207 _ExactTM.scale: 1.254179
    test 1235 line 207 _ExactTM.lat: 37.629667
    test 1236 line 207 _ExactTM.lon: 49.649131
    test 1237 line 208 _ExactTM.easting: 2311168.998941
    test 1238 line 208 _ExactTM.northing: 9480561.869119
    test 1239 line 208 _ExactTM.convergence: 76.828257
    test 1240 line 208 _ExactTM.scale: 1.065556
    test 1241 line 208 _ExactTM.lat: 69.225574
    test 1242 line 208 _ExactTM.lon: 77.656135
    test 1243 line 209 _ExactTM.easting: 4111775.114451
    test 1244 line 209 _ExactTM.northing: 6509014.348792
    test 1245 line 209 _ExactTM.convergence: 43.052130
    test 1246 line 209 _ExactTM.scale: 1.214125
    test 1247 line 209 _ExactTM.lat: 44.698478
    test 1248 line 209 _ExactTM.lon: 52.979304
    test 1249 line 210 _ExactTM.easting: 75358.261962
    test 1250 line 210 _ExactTM.northing: 7711258.662251
    test 1251 line 210 _ExactTM.convergence: 1.806297
    test 1252 line 210 _ExactTM.scale: 0.999669
    test 1253 line 210 _ExactTM.lat: 69.499594
    test 1254 line 210 _ExactTM.lon: 1.928336
    test 1255 line 211 _ExactTM.easting: 8781885.229116
    test 1256 line 211 _ExactTM.northing: 9184776.452211
    test 1257 line 211 _ExactTM.convergence: 81.795539
    test 1258 line 211 _ExactTM.scale: 2.094908
    test 1259 line 211 _ExactTM.lat: 27.981364
    test 1260 line 211 _ExactTM.lon: 86.061113
    test 1261 line 212 _ExactTM.easting: 954378.415174
    test 1262 line 212 _ExactTM.northing: 7449110.669807
    test 1263 line 212 _ExactTM.convergence: 19.380657
    test 1264 line 212 _ExactTM.scale: 1.010768
    test 1265 line 212 _ExactTM.lat: 65.699839
    test 1266 line 212 _ExactTM.lon: 21.104725
    test 1267 line 213 _ExactTM.easting: 720971.793706
    test 1268 line 213 _ExactTM.northing: 5265195.121555
    test 1269 line 213 _ExactTM.convergence: 7.002995
    test 1270 line 213 _ExactTM.scale: 1.005995
    test 1271 line 213 _ExactTM.lat: 47.143648
    test 1272 line 213 _ExactTM.lon: 9.512189
    test 1273 line 214 _ExactTM.easting: 561561.493937
    test 1274 line 214 _ExactTM.northing: 989910.236221
    test 1275 line 214 _ExactTM.convergence: 0.793118
    test 1276 line 214 _ExactTM.scale: 1.003505
    test 1277 line 214 _ExactTM.lat: 8.920167
    test 1278 line 214 _ExactTM.lon: 5.101513
    test 1279 line 215 _ExactTM.easting: 3446829.634468
    test 1280 line 215 _ExactTM.northing: 9232868.155664
    test 1281 line 215 _ExactTM.convergence: 76.279075
    test 1282 line 215 _ExactTM.scale: 1.148263
    test 1283 line 215 _ExactTM.lat: 59.778971
    test 1284 line 215 _ExactTM.lon: 78.080322
    test 1285 line 216 _ExactTM.easting: 4048307.545909
    test 1286 line 216 _ExactTM.northing: 9800416.422998
    test 1287 line 216 _ExactTM.convergence: 86.843918
    test 1288 line 216 _ExactTM.scale: 1.206495
    test 1289 line 216 _ExactTM.lat: 55.865310
    test 1290 line 216 _ExactTM.lon: 87.384288
    test 1291 line 217 _ExactTM.easting: 8973188.480293
    test 1292 line 217 _ExactTM.northing: 7042230.087021
    test 1293 line 217 _ExactTM.convergence: 60.872456
    test 1294 line 217 _ExactTM.scale: 2.156098
    test 1295 line 217 _ExactTM.lat: 24.310973
    test 1296 line 217 _ExactTM.lon: 76.823777
    test 1297 line 218 _ExactTM.easting: 126314.191618
    test 1298 line 218 _ExactTM.northing: 396006.687921
    test 1299 line 218 _ExactTM.convergence: 0.071065
    test 1300 line 218 _ExactTM.scale: 0.999798
    test 1301 line 218 _ExactTM.lat: 3.582041
    test 1302 line 218 _ExactTM.lon: 1.137286
    test 1303 line 219 _ExactTM.easting: 5247652.345647
    test 1304 line 219 _ExactTM.northing: 8670513.359752
    test 1305 line 219 _ExactTM.convergence: 72.700498
    test 1306 line 219 _ExactTM.scale: 1.355272
    test 1307 line 219 _ExactTM.lat: 46.124233
    test 1308 line 219 _ExactTM.lon: 77.313118
    test 1309 line 220 _ExactTM.easting: 8103656.838119
    test 1310 line 220 _ExactTM.northing: 9469794.014737
    test 1311 line 220 _ExactTM.convergence: 84.490673
    test 1312 line 220 _ExactTM.scale: 1.912164
    test 1313 line 220 _ExactTM.lat: 31.171391
    test 1314 line 220 _ExactTM.lon: 87.104504
    test 1315 line 221 _ExactTM.easting: 6300112.758236
    test 1316 line 221 _ExactTM.northing: 93835.917364
    test 1317 line 221 _ExactTM.convergence: 0.644805
    test 1318 line 221 _ExactTM.scale: 1.534073
    test 1319 line 221 _ExactTM.lat: 0.553171
    test 1320 line 221 _ExactTM.lon: 49.117104
    test 1321 line 222 _ExactTM.easting: 3894813.593782
    test 1322 line 222 _ExactTM.northing: 4833832.341027
    test 1323 line 222 _ExactTM.convergence: 27.453298
    test 1324 line 222 _ExactTM.scale: 1.192135
    test 1325 line 222 _ExactTM.lat: 35.361587
    test 1326 line 222 _ExactTM.lon: 41.860599
    test 1327 line 223 _ExactTM.easting: 402511.346712
    test 1328 line 223 _ExactTM.northing: 3520621.561911
    test 1329 line 223 _ExactTM.convergence: 2.238474
    test 1330 line 223 _ExactTM.scale: 1.001599
    test 1331 line 223 _ExactTM.lat: 31.750314
    test 1332 line 223 _ExactTM.lon: 4.248167
    test 1333 line 224 _ExactTM.easting: 5357378.503148
    test 1334 line 224 _ExactTM.northing: 2772997.602234
    test 1335 line 224 _ExactTM.convergence: 17.823560
    test 1336 line 224 _ExactTM.scale: 1.376031
    test 1337 line 224 _ExactTM.lat: 17.924336
    test 1338 line 224 _ExactTM.lon: 46.096402
    test 1339 line 225 _ExactTM.easting: 2807553.985866
    test 1340 line 225 _ExactTM.northing: 8177847.980275
    test 1341 line 225 _ExactTM.convergence: 54.680045
    test 1342 line 225 _ExactTM.scale: 1.097531
    test 1343 line 225 _ExactTM.lat: 60.931488
    test 1344 line 225 _ExactTM.lon: 58.221214
    test 1345 line 226 _ExactTM.easting: 18289045.166501
    test 1346 line 226 _ExactTM.northing: 7792942.339604
    test 1347 line 226 _ExactTM.convergence: 73.216494
    test 1348 line 226 _ExactTM.scale: 8.098009
    test 1349 line 226 _ExactTM.lat: 5.358151
    test 1350 line 226 _ExactTM.lon: 87.556213
    test 1351 line 227 _ExactTM.easting: 8376822.459538
    test 1352 line 227 _ExactTM.northing: 8128174.623878
    test 1353 line 227 _ExactTM.convergence: 70.920117
    test 1354 line 227 _ExactTM.scale: 1.984873
    test 1355 line 227 _ExactTM.lat: 28.616673
    test 1356 line 227 _ExactTM.lon: 80.452426
    test 1357 line 228 _ExactTM.easting: 11898068.353272
    test 1358 line 228 _ExactTM.northing: 4772439.493697
    test 1359 line 228 _ExactTM.convergence: 42.613968
    test 1360 line 228 _ExactTM.scale: 3.314412
    test 1361 line 228 _ExactTM.lat: 11.709763
    test 1362 line 228 _ExactTM.lon: 76.760295
    test 1363 line 229 _ExactTM.easting: 10550946.939050
    test 1364 line 229 _ExactTM.northing: 3851968.815295
    test 1365 line 229 _ExactTM.convergence: 33.383025
    test 1366 line 229 _ExactTM.scale: 2.724754
    test 1367 line 229 _ExactTM.lat: 12.009498
    test 1368 line 229 _ExactTM.lon: 71.782351
    test 1369 line 230 _ExactTM.easting: 6828299.123607
    test 1370 line 230 _ExactTM.northing: 9394803.227463
    test 1371 line 230 _ExactTM.convergence: 83.181386
    test 1372 line 230 _ExactTM.scale: 1.624359
    test 1373 line 230 _ExactTM.lat: 37.629784
    test 1374 line 230 _ExactTM.lon: 85.795687
    test 1375 line 231 _ExactTM.easting: 11162550.334022
    test 1376 line 231 _ExactTM.northing: 2640267.279593
    test 1377 line 231 _ExactTM.convergence: 23.145404
    test 1378 line 231 _ExactTM.scale: 2.998408
    test 1379 line 231 _ExactTM.lat: 7.721128
    test 1380 line 231 _ExactTM.lon: 71.662731
    test 1381 line 232 _ExactTM.easting: 4411584.447941
    test 1382 line 232 _ExactTM.northing: 4956173.694407
    test 1383 line 232 _ExactTM.convergence: 30.713919
    test 1384 line 232 _ExactTM.scale: 1.248736
    test 1385 line 232 _ExactTM.lat: 34.295026
    test 1386 line 232 _ExactTM.lon: 46.442191
    test 1387 line 233 _ExactTM.easting: 672108.897905
    test 1388 line 233 _ExactTM.northing: 4751554.657054
    test 1389 line 233 _ExactTM.convergence: 5.569178
    test 1390 line 233 _ExactTM.scale: 1.005162
    test 1391 line 233 _ExactTM.lat: 42.622496
    test 1392 line 233 _ExactTM.lon: 8.193605
    test 1393 line 234 _ExactTM.easting: 5022964.290579
    test 1394 line 234 _ExactTM.northing: 6860418.199502
    test 1395 line 234 _ExactTM.convergence: 50.862230
    test 1396 line 234 _ExactTM.scale: 1.324925
    test 1397 line 234 _ExactTM.lat: 41.667780
    test 1398 line 234 _ExactTM.lon: 61.518288
    test 1399 line 235 _ExactTM.easting: 1669655.595207
    test 1400 line 235 _ExactTM.northing: 4152086.537021
    test 1401 line 235 _ExactTM.convergence: 11.110237
    test 1402 line 235 _ExactTM.scale: 1.034138
    test 1403 line 235 _ExactTM.lat: 36.060369
    test 1404 line 235 _ExactTM.lon: 18.444112
    test 1405 line 236 _ExactTM.easting: 6055876.729655
    test 1406 line 236 _ExactTM.northing: 4896837.552619
    test 1407 line 236 _ExactTM.convergence: 35.799747
    test 1408 line 236 _ExactTM.scale: 1.485967
    test 1409 line 236 _ExactTM.lat: 27.948091
    test 1410 line 236 _ExactTM.lon: 56.816429
    test 1411 line 237 _ExactTM.easting: 1209214.164379
    test 1412 line 237 _ExactTM.northing: 7266409.859178
    test 1413 line 237 _ExactTM.convergence: 22.319633
    test 1414 line 237 _ExactTM.scale: 1.017554
    test 1415 line 237 _ExactTM.lat: 63.386030
    test 1416 line 237 _ExactTM.lon: 24.662716
    test 1417 line 238 _ExactTM.easting: 5154564.559584
    test 1418 line 238 _ExactTM.northing: 698118.349975
    test 1419 line 238 _ExactTM.convergence: 4.242360
    test 1420 line 238 _ExactTM.scale: 1.347481
    test 1421 line 238 _ExactTM.lat: 4.680922
    test 1422 line 238 _ExactTM.lon: 42.114426
    test 1423 line 239 _ExactTM.easting: 2695149.806543
    test 1424 line 239 _ExactTM.northing: 8208197.765605
    test 1425 line 239 _ExactTM.convergence: 54.178615
    test 1426 line 239 _ExactTM.scale: 1.089730
    test 1427 line 239 _ExactTM.lat: 61.826625
    test 1428 line 239 _ExactTM.lon: 57.525096
    test 1429 line 240 _ExactTM.easting: 3394792.327820
    test 1430 line 240 _ExactTM.northing: 3217583.415552
    test 1431 line 240 _ExactTM.convergence: 15.165863
    test 1432 line 240 _ExactTM.scale: 1.145285
    test 1433 line 240 _ExactTM.lat: 25.104353
    test 1434 line 240 _ExactTM.lon: 32.528660
    test 1435 line 241 _ExactTM.easting: 1429160.966985
    test 1436 line 241 _ExactTM.northing: 8212685.362032
    test 1437 line 241 _ExactTM.convergence: 37.484904
    test 1438 line 241 _ExactTM.scale: 1.024676
    test 1439 line 241 _ExactTM.lat: 69.678351
    test 1440 line 241 _ExactTM.lon: 39.275513
    test 1441 line 242 _ExactTM.easting: 8343387.998065
    test 1442 line 242 _ExactTM.northing: 8885196.954578
    test 1443 line 242 _ExactTM.convergence: 78.561937
    test 1444 line 242 _ExactTM.scale: 1.974733
    test 1445 line 242 _ExactTM.lat: 29.671384
    test 1446 line 242 _ExactTM.lon: 84.196595
    test 1447 line 243 _ExactTM.easting: 1990722.928606
    test 1448 line 243 _ExactTM.northing: 7569202.065162
    test 1449 line 243 _ExactTM.convergence: 37.075276
    test 1450 line 243 _ExactTM.scale: 1.048486
    test 1451 line 243 _ExactTM.lat: 62.300208
    test 1452 line 243 _ExactTM.lon: 40.474051
    test 1453 line 244 _ExactTM.easting: 1554980.099559
    test 1454 line 244 _ExactTM.northing: 1449423.919586
    test 1455 line 244 _ExactTM.convergence: 3.188328
    test 1456 line 244 _ExactTM.scale: 1.029664
    test 1457 line 244 _ExactTM.lat: 12.721776
    test 1458 line 244 _ExactTM.lon: 14.190003
    test 1459 line 245 _ExactTM.easting: 785205.450196
    test 1460 line 245 _ExactTM.northing: 5575158.423096
    test 1461 line 245 _ExactTM.convergence: 8.388417
    test 1462 line 245 _ExactTM.scale: 1.007181
    test 1463 line 245 _ExactTM.lat: 49.811296
    test 1464 line 245 _ExactTM.lon: 10.925011
    test 1465 line 246 _ExactTM.easting: 3310405.988313
    test 1466 line 246 _ExactTM.northing: 5955022.233881
    test 1467 line 246 _ExactTM.convergence: 33.007587
    test 1468 line 246 _ExactTM.scale: 1.137141
    test 1469 line 246 _ExactTM.lat: 45.132680
    test 1470 line 246 _ExactTM.lon: 42.478624
    test 1471 line 247 _ExactTM.easting: 4733460.960666
    test 1472 line 247 _ExactTM.northing: 129034.889816
    test 1473 line 247 _ExactTM.convergence: 0.737551
    test 1474 line 247 _ExactTM.scale: 1.290439
    test 1475 line 247 _ExactTM.lat: 0.904279
    test 1476 line 247 _ExactTM.lon: 39.078412
    test 1477 line 248 _ExactTM.easting: 3322708.343909
    test 1478 line 248 _ExactTM.northing: 3864738.078742
    test 1479 line 248 _ExactTM.convergence: 18.472566
    test 1480 line 248 _ExactTM.scale: 1.138838
    test 1481 line 248 _ExactTM.lat: 30.163605
    test 1482 line 248 _ExactTM.lon: 33.577996
    test 1483 line 249 _ExactTM.easting: 8672864.417204
    test 1484 line 249 _ExactTM.northing: 8333465.983444
    test 1485 line 249 _ExactTM.convergence: 73.206273
    test 1486 line 249 _ExactTM.scale: 2.065441
    test 1487 line 249 _ExactTM.lat: 27.643244
    test 1488 line 249 _ExactTM.lon: 81.892859
    test 1489 line 250 _ExactTM.easting: 11126818.231196
    test 1490 line 250 _ExactTM.northing: 7618712.174991
    test 1491 line 250 _ExactTM.convergence: 67.887173
    test 1492 line 250 _ExactTM.scale: 2.922417
    test 1493 line 250 _ExactTM.lat: 18.201208
    test 1494 line 250 _ExactTM.lon: 82.434618
    test 1495 line 251 _ExactTM.easting: 8650100.981797
    test 1496 line 251 _ExactTM.northing: 9975084.168997
    test 1497 line 251 _ExactTM.convergence: 89.767446
    test 1498 line 251 _ExactTM.scale: 2.057289
    test 1499 line 251 _ExactTM.lat: 28.804576
    test 1500 line 251 _ExactTM.lon: 89.886072
    test 1501 line 252 _ExactTM.easting: 2212701.180192
    test 1502 line 252 _ExactTM.northing: 650348.100229
    test 1503 line 252 _ExactTM.convergence: 1.970441
    test 1504 line 252 _ExactTM.scale: 1.060830
    test 1505 line 252 _ExactTM.lat: 5.542998
    test 1506 line 252 _ExactTM.lon: 19.589578
    test 1507 line 253 _ExactTM.easting: 6890222.326618
    test 1508 line 253 _ExactTM.northing: 7506813.499547
    test 1509 line 253 _ExactTM.convergence: 62.684825
    test 1510 line 253 _ExactTM.scale: 1.638488
    test 1511 line 253 _ExactTM.lat: 34.237147
    test 1512 line 253 _ExactTM.lon: 73.678164
    test 1513 line 254 _ExactTM.easting: 6692260.067325
    test 1514 line 254 _ExactTM.northing: 4244174.008110
    test 1515 line 254 _ExactTM.convergence: 31.812920
    test 1516 line 254 _ExactTM.scale: 1.604640
    test 1517 line 254 _ExactTM.lat: 22.704949
    test 1518 line 254 _ExactTM.lon: 57.877010
    test 1519 line 255 _ExactTM.easting: 1225564.137190
    test 1520 line 255 _ExactTM.northing: 4778923.924144
    test 1521 line 255 _ExactTM.convergence: 10.083419
    test 1522 line 255 _ExactTM.scale: 1.018134
    test 1523 line 255 _ExactTM.lat: 42.192424
    test 1524 line 255 _ExactTM.lon: 14.828196
    test 1525 line 256 _ExactTM.easting: 12341116.154950
    test 1526 line 256 _ExactTM.northing: 5081855.521966
    test 1527 line 256 _ExactTM.convergence: 45.712546
    test 1528 line 256 _ExactTM.scale: 3.535170
    test 1529 line 256 _ExactTM.lat: 11.481151
    test 1530 line 256 _ExactTM.lon: 78.189236
    test 1531 line 257 _ExactTM.easting: 6673845.021771
    test 1532 line 257 _ExactTM.northing: 1177587.190565
    test 1533 line 257 _ExactTM.convergence: 8.389141
    test 1534 line 257 _ExactTM.scale: 1.605171
    test 1535 line 257 _ExactTM.lat: 6.609626
    test 1536 line 257 _ExactTM.lon: 51.735783
    test 1537 line 258 _ExactTM.easting: 6966354.690417
    test 1538 line 258 _ExactTM.northing: 3641802.005093
    test 1539 line 258 _ExactTM.convergence: 27.409636
    test 1540 line 258 _ExactTM.scale: 1.661469
    test 1541 line 258 _ExactTM.lat: 19.059369
    test 1542 line 258 _ExactTM.lon: 57.526439
    test 1543 max forward error: 6.332994e-08
    test 1544 max reverse error: 1.136868e-13
    test 1545 _ExactTM.scale0: 0.9996
    test 1546 _ExactTM.datum: WGS84
    test 1547 _ExactTM.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    3 of 1548 testExactTMcoords.py tests (0.2%) FAILED, ALL KNOWN, 1 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 3.145 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testFmath.py

    testing testFmath.py 20.10.03 (module pygeodesy.fmath 20.10.08)
    test 1 fpolynomialA: 1.21197509766
    test 2 fhornerA: 1.21197509766
    test 3 fpolynomialB: 0.1513671875
    test 4 fhornerB: 0.1513671875
    test 5 fpolynomialA: 1.21197509766
    test 6 fhornerA: 1.21197509766
    test 7 fpolynomialB: 0.1513671875
    test 8 fhornerB: 0.1513671875
    test 9 fpolynomialA: 1.21197509766
    test 10 fhornerA: 1.21197509766
    test 11 fpolynomialB: 0.1513671875
    test 12 fhornerB: 0.1513671875
    test 13 fpolynomialA: 1.21197509766
    test 14 fhornerA: 1.21197509766
    test 15 fpolynomialB: 0.1513671875
    test 16 fhornerB: 0.1513671875
    test 17 fpolynomialA: 1.21197509766
    test 18 fhornerA: 1.21197509766
    test 19 fpolynomialB: 0.1513671875
    test 20 fhornerB: 0.1513671875
    test 21 fpolynomialA: 1.21197509766
    test 22 fhornerA: 1.21197509766
    test 23 fpolynomialB: 0.1513671875
    test 24 fhornerB: 0.1513671875
    test 25 fpolynomialA: 1.21197509766
    test 26 fhornerA: 1.21197509766
    test 27 fpolynomialB: 0.1513671875
    test 28 fhornerB: 0.1513671875
    test 29 fpolynomialA: 1.21197509766
    test 30 fhornerA: 1.21197509766
    test 31 fpolynomialB: 0.1513671875
    test 32 fhornerB: 0.1513671875
    test 33 fpolynomialA: 1.21197509766
    test 34 fhornerA: 1.21197509766
    test 35 fpolynomialB: 0.1513671875
    test 36 fhornerB: 0.1513671875
    test 37 fpolynomialA: 1.21197509766
    test 38 fhornerA: 1.21197509766
    test 39 fpolynomialB: 0.1513671875
    test 40 fhornerB: 0.1513671875
    test 41 fpolynomialA: 1.21197509766
    test 42 fhornerA: 1.21197509766
    test 43 fpolynomialB: 0.1513671875
    test 44 fhornerB: 0.1513671875
    test 45 fpolynomialA: 1.21197509766
    test 46 fhornerA: 1.21197509766
    test 47 fpolynomialB: 0.1513671875
    test 48 fhornerB: 0.1513671875
    test 49 fpolynomialA: 1.21197509766
    test 50 fhornerA: 1.21197509766
    test 51 fpolynomialB: 0.1513671875
    test 52 fhornerB: 0.1513671875
    test 53 fpolynomialA: 1.21197509766
    test 54 fhornerA: 1.21197509766
    test 55 fpolynomialB: 0.1513671875
    test 56 fhornerB: 0.1513671875
    test 57 fpolynomialA: 1.21197509766
    test 58 fhornerA: 1.21197509766
    test 59 fpolynomialB: 0.1513671875
    test 60 fhornerB: 0.1513671875
    test 61 fpolynomialA: 1.21197509766
    test 62 fhornerA: 1.21197509766
    test 63 fpolynomialB: 0.1513671875
    test 64 fhornerB: 0.1513671875
    test 65 fpolynomialA: 1.21197509766
    test 66 fhornerA: 1.21197509766
    test 67 fpolynomialB: 0.1513671875
    test 68 fhornerB: 0.1513671875
    test 69 fpolynomialA: 1.21197509766
    test 70 fhornerA: 1.21197509766
    test 71 fpolynomialB: 0.1513671875
    test 72 fhornerB: 0.1513671875
    test 73 fpolynomialA: 1.21197509766
    test 74 fhornerA: 1.21197509766
    test 75 fpolynomialB: 0.1513671875
    test 76 fhornerB: 0.1513671875
    test 77 fpolynomialA: 1.21197509766
    test 78 fhornerA: 1.21197509766
    test 79 fpolynomialB: 0.1513671875
    test 80 fhornerB: 0.1513671875
    test 81 fpolynomialA: 1.21197509766
    test 82 fhornerA: 1.21197509766
    test 83 fpolynomialB: 0.1513671875
    test 84 fhornerB: 0.1513671875
    test 85 fpolynomialA: 1.21197509766
    test 86 fhornerA: 1.21197509766
    test 87 fpolynomialB: 0.1513671875
    test 88 fhornerB: 0.1513671875
    test 89 fpolynomialA: 1.21197509766
    test 90 fhornerA: 1.21197509766
    test 91 fpolynomialB: 0.1513671875
    test 92 fhornerB: 0.1513671875
    test 93 fpolynomialA: 1.21197509766
    test 94 fhornerA: 1.21197509766
    test 95 fpolynomialB: 0.1513671875
    test 96 fhornerB: 0.1513671875
    test 97 fpolynomialA: 1.21197509766
    test 98 fhornerA: 1.21197509766
    test 99 fpolynomialB: 0.1513671875
    test 100 fhornerB: 0.1513671875
    test 101 fpolynomialA: 1.21197509766
    test 102 fhornerA: 1.21197509766
    test 103 fpolynomialB: 0.1513671875
    test 104 fhornerB: 0.1513671875
    test 105 fpolynomialA: 1.21197509766
    test 106 fhornerA: 1.21197509766
    test 107 fpolynomialB: 0.1513671875
    test 108 fhornerB: 0.1513671875
    test 109 fpolynomialA: 1.21197509766
    test 110 fhornerA: 1.21197509766
    test 111 fpolynomialB: 0.1513671875
    test 112 fhornerB: 0.1513671875
    test 113 fpolynomialA: 1.21197509766
    test 114 fhornerA: 1.21197509766
    test 115 fpolynomialB: 0.1513671875
    test 116 fhornerB: 0.1513671875
    test 117 fpolynomialA: 1.21197509766
    test 118 fhornerA: 1.21197509766
    test 119 fpolynomialB: 0.1513671875
    test 120 fhornerB: 0.1513671875
    test 121 fpolynomialA: 1.21197509766
    test 122 fhornerA: 1.21197509766
    test 123 fpolynomialB: 0.1513671875
    test 124 fhornerB: 0.1513671875
    test 125 fpolynomialA: 1.21197509766
    test 126 fhornerA: 1.21197509766
    test 127 fpolynomialB: 0.1513671875
    test 128 fhornerB: 0.1513671875
    test 129 fpolynomialA: 1.21197509766
    test 130 fhornerA: 1.21197509766
    test 131 fpolynomialB: 0.1513671875
    test 132 fhornerB: 0.1513671875
    test 133 sum: 0.0  FAILED, KNOWN, expected 2.0
    test 134 fsum: 2.0
    test 135 Fsum: 2.0
    test 136 sum: 0.0  FAILED, KNOWN, expected 4.0
    test 137 fsum: 4.0
    test 138 Fsum: 4.0
    test 139 sum: 0.0  FAILED, KNOWN, expected 8.0
    test 140 fsum: 8.0
    test 141 Fsum: 8.0
    test 142 sum: 0.0  FAILED, KNOWN, expected 16.0
    test 143 fsum: 16.0
    test 144 Fsum: 16.0
    test 145 sum: 0.0  FAILED, KNOWN, expected 32.0
    test 146 fsum: 32.0
    test 147 Fsum: 32.0
    test 148 sum: 0.0  FAILED, KNOWN, expected 64.0
    test 149 fsum: 64.0
    test 150 Fsum: 64.0
    test 151 sum: 0.0  FAILED, KNOWN, expected 128.0
    test 152 fsum: 128.0
    test 153 Fsum: 128.0
    test 154 sum: 0.0  FAILED, KNOWN, expected 256.0
    test 155 fsum: 256.0
    test 156 Fsum: 256.0
    test 157 sum: 0.0  FAILED, KNOWN, expected 512.0
    test 158 fsum: 512.0
    test 159 Fsum: 512.0
    test 160 sum: 0.0  FAILED, KNOWN, expected 1024.0
    test 161 fsum: 1024.0
    test 162 Fsum: 1024.0
    test 163 sum: 1.005
    test 164 fsum: 1.005
    test 165 Fsum: 1.005
    test 166 fsum: 1.0000000000000002e+16
    test 167 Fsum: 1.0000000000000002e+16
    test 168 sum: 3.88533778445e+84  FAILED, KNOWN, expected -5.55775395833e-06
    test 169 fsum: -5.55775395833e-06
    test 170 Fsum: -5.55775395833e-06
    test 171 Fsum: -5.55775395833e-06
    test 172 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.41370449156e-08
    test 173 fsum: -1.41370449156e-08
    test 174 Fsum: -1.41370449156e-08
    test 175 Fsum: -1.41370449156e-08
    test 176 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.20394419295
    test 177 fsum: 2.20394419295
    test 178 Fsum: 2.20394419295
    test 179 Fsum: 2.20394419295
    test 180 sum: -3.88533778445e+84  FAILED, KNOWN, expected 4.05695507755e-11
    test 181 fsum: 4.05695507755e-11
    test 182 Fsum: 4.05695507755e-11
    test 183 Fsum: 4.05695507755e-11
    test 184 sum: 3.88533778445e+84  FAILED, KNOWN, expected -6.49636245676e-05
    test 185 fsum: -6.49636245676e-05
    test 186 Fsum: -6.49636245676e-05
    test 187 Fsum: -6.49636245676e-05
    test 188 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.0171635686014
    test 189 fsum: -0.0171635686014
    test 190 Fsum: -0.0171635686014
    test 191 Fsum: -0.0171635686014
    test 192 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.520666849574
    test 193 fsum: 0.520666849574
    test 194 Fsum: 0.520666849574
    test 195 Fsum: 0.520666849574
    test 196 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.32101660366e-06
    test 197 fsum: -1.32101660366e-06
    test 198 Fsum: -1.32101660366e-06
    test 199 Fsum: -1.32101660366e-06
    test 200 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.79904977533e-08
    test 201 fsum: 1.79904977533e-08
    test 202 Fsum: 1.79904977533e-08
    test 203 Fsum: 1.79904977533e-08
    test 204 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00037450105512
    test 205 fsum: 0.00037450105512
    test 206 Fsum: 0.00037450105512
    test 207 Fsum: 0.00037450105512
    test 208 sum: 3.88533778445e+84  FAILED, KNOWN, expected 4.49116758521
    test 209 fsum: 4.49116758521
    test 210 Fsum: 4.49116758521
    test 211 Fsum: 4.49116758521
    test 212 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.32429087965e-15
    test 213 fsum: 1.32429087965e-15
    test 214 Fsum: 1.32429087965e-15
    test 215 Fsum: 1.32429087965e-15
    test 216 sum: -3.88533778445e+84  FAILED, KNOWN, expected -5.02802554721e-06
    test 217 fsum: -5.02802554721e-06
    test 218 Fsum: -5.02802554721e-06
    test 219 Fsum: -5.02802554721e-06
    test 220 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.112258359844
    test 221 fsum: 0.112258359844
    test 222 Fsum: 0.112258359844
    test 223 Fsum: 0.112258359844
    test 224 sum: 3.88533778445e+84  FAILED, KNOWN, expected 7.07576864228e-08
    test 225 fsum: 7.07576864228e-08
    test 226 Fsum: 7.07576864228e-08
    test 227 Fsum: 7.07576864228e-08
    test 228 sum: 0.0  FAILED, KNOWN, expected 0.00614096229824
    test 229 fsum: 0.00614096229824
    test 230 Fsum: 0.00614096229824
    test 231 Fsum: 0.00614096229824
    test 232 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.0915821358473
    test 233 fsum: 0.0915821358473
    test 234 Fsum: 0.0915821358473
    test 235 Fsum: 0.0915821358473
    test 236 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0023146641819
    test 237 fsum: -0.0023146641819
    test 238 Fsum: -0.0023146641819
    test 239 Fsum: -0.0023146641819
    test 240 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.433115983601
    test 241 fsum: -0.433115983601
    test 242 Fsum: -0.433115983601
    test 243 Fsum: -0.433115983601
    test 244 sum: 3.88533778445e+84  FAILED, KNOWN, expected -3.15287123238e-07
    test 245 fsum: -3.15287123238e-07
    test 246 Fsum: -3.15287123238e-07
    test 247 Fsum: -3.15287123238e-07
    test 248 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.82152703412e-08
    test 249 fsum: -1.82152703412e-08
    test 250 Fsum: -1.82152703412e-08
    test 251 Fsum: -1.82152703412e-08
    test 252 sum: 14.000679346  FAILED, KNOWN, expected 1.93937955839e-09
    test 253 fsum: 1.93937955839e-09
    test 254 Fsum: 1.93937955839e-09
    test 255 Fsum: 1.93937955839e-09
    test 256 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.58209262778e-05
    test 257 fsum: 2.58209262778e-05
    test 258 Fsum: 2.58209262778e-05
    test 259 Fsum: 2.58209262778e-05
    test 260 sum: -3.88533778445e+84  FAILED, KNOWN, expected 5.67367484589e-05
    test 261 fsum: 5.67367484589e-05
    test 262 Fsum: 5.67367484589e-05
    test 263 Fsum: 5.67367484589e-05
    test 264 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.30439490152e-15
    test 265 fsum: 1.30439490152e-15
    test 266 Fsum: 1.30439490152e-15
    test 267 Fsum: 1.30439490152e-15
    test 268 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.0797181706499
    test 269 fsum: 0.0797181706499
    test 270 Fsum: 0.0797181706499
    test 271 Fsum: 0.0797181706499
    test 272 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.0114765530142
    test 273 fsum: -0.0114765530142
    test 274 Fsum: -0.0114765530142
    test 275 Fsum: -0.0114765530142
    test 276 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.00183833849875
    test 277 fsum: 0.00183833849875
    test 278 Fsum: 0.00183833849875
    test 279 Fsum: 0.00183833849875
    test 280 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00337283331123
    test 281 fsum: 0.00337283331123
    test 282 Fsum: 0.00337283331123
    test 283 Fsum: 0.00337283331123
    test 284 sum: -3.88533778445e+84  FAILED, KNOWN, expected -8.22785832218e-16
    test 285 fsum: -8.22785832218e-16
    test 286 Fsum: -8.22785832218e-16
    test 287 Fsum: -8.22785832218e-16
    test 288 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.593244429
    test 289 fsum: 1.593244429
    test 290 Fsum: 1.593244429
    test 291 Fsum: 1.593244429
    test 292 sum: -3.88533778445e+84  FAILED, KNOWN, expected -3.5865321793e-06
    test 293 fsum: -3.5865321793e-06
    test 294 Fsum: -3.5865321793e-06
    test 295 Fsum: -3.5865321793e-06
    test 296 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.000312871534731
    test 297 fsum: -0.000312871534731
    test 298 Fsum: -0.000312871534731
    test 299 Fsum: -0.000312871534731
    test 300 sum: 3.88533778445e+84  FAILED, KNOWN, expected -4.9689948906e-07
    test 301 fsum: -4.9689948906e-07
    test 302 Fsum: -4.9689948906e-07
    test 303 Fsum: -4.9689948906e-07
    test 304 sum: 0.0  FAILED, KNOWN, expected 0.0013342406198
    test 305 fsum: 0.0013342406198
    test 306 Fsum: 0.0013342406198
    test 307 Fsum: 0.0013342406198
    test 308 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.00010056006881
    test 309 fsum: 0.00010056006881
    test 310 Fsum: 0.00010056006881
    test 311 Fsum: 0.00010056006881
    test 312 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0309426534695
    test 313 fsum: -0.0309426534695
    test 314 Fsum: -0.0309426534695
    test 315 Fsum: -0.0309426534695
    test 316 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00211431154047
    test 317 fsum: 0.00211431154047
    test 318 Fsum: 0.00211431154047
    test 319 Fsum: 0.00211431154047
    test 320 sum: 3.88533778445e+84  FAILED, KNOWN, expected 4.95731489724e-07
    test 321 fsum: 4.95731489724e-07
    test 322 Fsum: 4.95731489724e-07
    test 323 Fsum: 4.95731489724e-07
    test 324 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.0137265102882
    test 325 fsum: -0.0137265102882
    test 326 Fsum: -0.0137265102882
    test 327 Fsum: -0.0137265102882
    test 328 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.000150617745714
    test 329 fsum: -0.000150617745714
    test 330 Fsum: -0.000150617745714
    test 331 Fsum: -0.000150617745714
    test 332 sum: -3.88533778445e+84  FAILED, KNOWN, expected -3.36952152661e-12
    test 333 fsum: -3.36952152661e-12
    test 334 Fsum: -3.36952152661e-12
    test 335 Fsum: -3.36952152661e-12
    test 336 sum: 3.88533778445e+84  FAILED, KNOWN, expected -7.55413712857
    test 337 fsum: -7.55413712857
    test 338 Fsum: -7.55413712857
    test 339 Fsum: -7.55413712857
    test 340 sum: -3.88533778445e+84  FAILED, KNOWN, expected 3.16455583273e-13
    test 341 fsum: 3.16455583273e-13
    test 342 Fsum: 3.16455583273e-13
    test 343 Fsum: 3.16455583273e-13
    test 344 sum: -0.661084710745  FAILED, KNOWN, expected 2.24870160916e-07
    test 345 fsum: 2.24870160916e-07
    test 346 Fsum: 2.24870160916e-07
    test 347 Fsum: 2.24870160916e-07
    test 348 sum: 0.000211309796511  FAILED, KNOWN, expected 2.77250063857e-11
    test 349 fsum: 2.77250063857e-11
    test 350 Fsum: 2.77250063857e-11
    test 351 Fsum: 2.77250063857e-11
    test 352 sum: -3.88533778445e+84  FAILED, KNOWN, expected 5.50083189359e-06
    test 353 fsum: 5.50083189359e-06
    test 354 Fsum: 5.50083189359e-06
    test 355 Fsum: 5.50083189359e-06
    test 356 sum: 3.88533778445e+84  FAILED, KNOWN, expected -3.42430660326e-09
    test 357 fsum: -3.42430660326e-09
    test 358 Fsum: -3.42430660326e-09
    test 359 Fsum: -3.42430660326e-09
    test 360 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00222776198292
    test 361 fsum: -0.00222776198292
    test 362 Fsum: -0.00222776198292
    test 363 Fsum: -0.00222776198292
    test 364 sum: -7.0  FAILED, KNOWN, expected -2.20480621003e-05
    test 365 fsum: -2.20480621003e-05
    test 366 Fsum: -2.20480621003e-05
    test 367 Fsum: -2.20480621003e-05
    test 368 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.0976584139552
    test 369 fsum: 0.0976584139552
    test 370 Fsum: 0.0976584139552
    test 371 Fsum: 0.0976584139552
    test 372 sum: 3.88533778445e+84  FAILED, KNOWN, expected 6.49948065953e-05
    test 373 fsum: 6.49948065953e-05
    test 374 Fsum: 6.49948065953e-05
    test 375 Fsum: 6.49948065953e-05
    test 376 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.08711538994e-15
    test 377 fsum: 2.08711538994e-15
    test 378 Fsum: 2.08711538994e-15
    test 379 Fsum: 2.08711538994e-15
    test 380 sum: 3.88533778445e+84  FAILED, KNOWN, expected 2.39101459671e-13
    test 381 fsum: 2.39101459671e-13
    test 382 Fsum: 2.39101459671e-13
    test 383 Fsum: 2.39101459671e-13
    test 384 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.11399409445e-08
    test 385 fsum: 1.11399409445e-08
    test 386 Fsum: 1.11399409445e-08
    test 387 Fsum: 1.11399409445e-08
    test 388 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.34597172015e-05
    test 389 fsum: -1.34597172015e-05
    test 390 Fsum: -1.34597172015e-05
    test 391 Fsum: -1.34597172015e-05
    test 392 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.00216772565694
    test 393 fsum: -0.00216772565694
    test 394 Fsum: -0.00216772565694
    test 395 Fsum: -0.00216772565694
    test 396 sum: 3.88533778445e+84  FAILED, KNOWN, expected 5.55380541154e-10
    test 397 fsum: 5.55380541154e-10
    test 398 Fsum: 5.55380541154e-10
    test 399 Fsum: 5.55380541154e-10
    test 400 sum: -3.88533778445e+84  FAILED, KNOWN, expected -2.56708807366e-09
    test 401 fsum: -2.56708807366e-09
    test 402 Fsum: -2.56708807366e-09
    test 403 Fsum: -2.56708807366e-09
    test 404 sum: -3.88533778445e+84  FAILED, KNOWN, expected -198.710423146
    test 405 fsum: -198.710423146
    test 406 Fsum: -198.710423146
    test 407 Fsum: -198.710423146
    test 408 sum: 3.88533778445e+84  FAILED, KNOWN, expected 5.63881869591e-11
    test 409 fsum: 5.63881869591e-11
    test 410 Fsum: 5.63881869591e-11
    test 411 Fsum: 5.63881869591e-11
    test 412 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.51006668296e-07
    test 413 fsum: 1.51006668296e-07
    test 414 Fsum: 1.51006668296e-07
    test 415 Fsum: 1.51006668296e-07
    test 416 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0127342501866
    test 417 fsum: -0.0127342501866
    test 418 Fsum: -0.0127342501866
    test 419 Fsum: -0.0127342501866
    test 420 sum: -28.9531379197  FAILED, KNOWN, expected 0.108005791351
    test 421 fsum: 0.108005791351
    test 422 Fsum: 0.108005791351
    test 423 Fsum: 0.108005791351
    test 424 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00631353966959
    test 425 fsum: -0.00631353966959
    test 426 Fsum: -0.00631353966959
    test 427 Fsum: -0.00631353966959
    test 428 sum: -3.88533778445e+84  FAILED, KNOWN, expected 4.36295946037e-06
    test 429 fsum: 4.36295946037e-06
    test 430 Fsum: 4.36295946037e-06
    test 431 Fsum: 4.36295946037e-06
    test 432 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.951904979565
    test 433 fsum: -0.951904979565
    test 434 Fsum: -0.951904979565
    test 435 Fsum: -0.951904979565
    test 436 sum: -3.88533778445e+84  FAILED, KNOWN, expected 8.28993992429e-06
    test 437 fsum: 8.28993992429e-06
    test 438 Fsum: 8.28993992429e-06
    test 439 Fsum: 8.28993992429e-06
    test 440 sum: -16.2515358671  FAILED, KNOWN, expected 0.00248335121208
    test 441 fsum: 0.00248335121208
    test 442 Fsum: 0.00248335121208
    test 443 Fsum: 0.00248335121208
    test 444 sum: 3.88533778445e+84  FAILED, KNOWN, expected 2.01646599955e-07
    test 445 fsum: 2.01646599955e-07
    test 446 Fsum: 2.01646599955e-07
    test 447 Fsum: 2.01646599955e-07
    test 448 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.41260927691e-05
    test 449 fsum: 2.41260927691e-05
    test 450 Fsum: 2.41260927691e-05
    test 451 Fsum: 2.41260927691e-05
    test 452 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.34482460771e-09
    test 453 fsum: 1.34482460771e-09
    test 454 Fsum: 1.34482460771e-09
    test 455 Fsum: 1.34482460771e-09
    test 456 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0160730087767
    test 457 fsum: -0.0160730087767
    test 458 Fsum: -0.0160730087767
    test 459 Fsum: -0.0160730087767
    test 460 sum: 0.0  FAILED, KNOWN, expected -2.97181952065
    test 461 fsum: -2.97181952065
    test 462 Fsum: -2.97181952065
    test 463 Fsum: -2.97181952065
    test 464 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00564259316495
    test 465 fsum: 0.00564259316495
    test 466 Fsum: 0.00564259316495
    test 467 Fsum: 0.00564259316495
    test 468 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.12479985952e-06
    test 469 fsum: 1.12479985952e-06
    test 470 Fsum: 1.12479985952e-06
    test 471 Fsum: 1.12479985952e-06
    test 472 sum: 21.0  FAILED, KNOWN, expected 1.43362205628e-10
    test 473 fsum: 1.43362205628e-10
    test 474 Fsum: 1.43362205628e-10
    test 475 Fsum: 1.43362205628e-10
    test 476 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00629425145498
    test 477 fsum: -0.00629425145498
    test 478 Fsum: -0.00629425145498
    test 479 Fsum: -0.00629425145498
    test 480 sum: -6.99871791831  FAILED, KNOWN, expected 0.000555882730144
    test 481 fsum: 0.000555882730144
    test 482 Fsum: 0.000555882730144
    test 483 Fsum: 0.000555882730144
    test 484 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.0227833522779
    test 485 fsum: 0.0227833522779
    test 486 Fsum: 0.0227833522779
    test 487 Fsum: 0.0227833522779
    test 488 sum: 3.88533778445e+84  FAILED, KNOWN, expected 5.39050844061e-08
    test 489 fsum: 5.39050844061e-08
    test 490 Fsum: 5.39050844061e-08
    test 491 Fsum: 5.39050844061e-08
    test 492 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.0284019628828
    test 493 fsum: 0.0284019628828
    test 494 Fsum: 0.0284019628828
    test 495 Fsum: 0.0284019628828
    test 496 sum: 3.88533778445e+84  FAILED, KNOWN, expected 5.13145773425e-08
    test 497 fsum: 5.13145773425e-08
    test 498 Fsum: 5.13145773425e-08
    test 499 Fsum: 5.13145773425e-08
    test 500 sum: 0.0  FAILED, KNOWN, expected 0.00343917962504
    test 501 fsum: 0.00343917962504
    test 502 Fsum: 0.00343917962504
    test 503 Fsum: 0.00343917962504
    test 504 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.0775191608453
    test 505 fsum: 0.0775191608453
    test 506 Fsum: 0.0775191608453
    test 507 Fsum: 0.0775191608453
    test 508 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.71752738866e-09
    test 509 fsum: 1.71752738866e-09
    test 510 Fsum: 1.71752738866e-09
    test 511 Fsum: 1.71752738866e-09
    test 512 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.000929618610258
    test 513 fsum: -0.000929618610258
    test 514 Fsum: -0.000929618610258
    test 515 Fsum: -0.000929618610258
    test 516 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00152298437151
    test 517 fsum: 0.00152298437151
    test 518 Fsum: 0.00152298437151
    test 519 Fsum: 0.00152298437151
    test 520 sum: -3.88533778445e+84  FAILED, KNOWN, expected -8.15563334812e-05
    test 521 fsum: -8.15563334812e-05
    test 522 Fsum: -8.15563334812e-05
    test 523 Fsum: -8.15563334812e-05
    test 524 sum: -3.88533778445e+84  FAILED, KNOWN, expected -2.72782307442e-09
    test 525 fsum: -2.72782307442e-09
    test 526 Fsum: -2.72782307442e-09
    test 527 Fsum: -2.72782307442e-09
    test 528 sum: -7.0  FAILED, KNOWN, expected -0.0206709167575
    test 529 fsum: -0.0206709167575
    test 530 Fsum: -0.0206709167575
    test 531 Fsum: -0.0206709167575
    test 532 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.0804538511124
    test 533 fsum: -0.0804538511124
    test 534 Fsum: -0.0804538511124
    test 535 Fsum: -0.0804538511124
    test 536 sum: 3.88533778445e+84  FAILED, KNOWN, expected -5.67559030836e-13
    test 537 fsum: -5.67559030836e-13
    test 538 Fsum: -5.67559030836e-13
    test 539 Fsum: -5.67559030836e-13
    test 540 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00180552169706
    test 541 fsum: 0.00180552169706
    test 542 Fsum: 0.00180552169706
    test 543 Fsum: 0.00180552169706
    test 544 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.88909321587e-06
    test 545 fsum: 1.88909321587e-06
    test 546 Fsum: 1.88909321587e-06
    test 547 Fsum: 1.88909321587e-06
    test 548 sum: 7.0  FAILED, KNOWN, expected -0.178988587755
    test 549 fsum: -0.178988587755
    test 550 Fsum: -0.178988587755
    test 551 Fsum: -0.178988587755
    test 552 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.000446112070586
    test 553 fsum: 0.000446112070586
    test 554 Fsum: 0.000446112070586
    test 555 Fsum: 0.000446112070586
    test 556 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.000395191244595
    test 557 fsum: 0.000395191244595
    test 558 Fsum: 0.000395191244595
    test 559 Fsum: 0.000395191244595
    test 560 sum: -0.00116488543386  FAILED, KNOWN, expected 0.435409318122
    test 561 fsum: 0.435409318122
    test 562 Fsum: 0.435409318122
    test 563 Fsum: 0.435409318122
    test 564 sum: -3.88533778445e+84  FAILED, KNOWN, expected -4.31362760974e-11
    test 565 fsum: -4.31362760974e-11
    test 566 Fsum: -4.31362760974e-11
    test 567 Fsum: -4.31362760974e-11
    test 568 fmul: 0.00000000
    test 569 fpowers: 10
    test 570 fpowers: 2
    test 571 fpowers: 1024
    test 572 fpowers: 4
    test 573 fpowers: 16
    test 574 fpowers: 1024
    test 575 fpowers: 4
    test 576 fpowers: 8
    test 577 fpowers: 512
    test 578 Airy1830: 6366914.6089252215
    test 579 Airy1830: 6366914.6089252215
    test 580 Airy1830: 6366914.6089252215
    test 581 Airy1830: 6366914.6089252215
    test 582 AiryModified: 6366691.7746198820
    test 583 AiryModified: 6366691.7746198820
    test 584 AiryModified: 6366691.7746198820
    test 585 AiryModified: 6366691.7746198820
    test 586 Australia1966: 6367471.8485322827
    test 587 Australia1966: 6367471.8485322827
    test 588 Australia1966: 6367471.8485322827
    test 589 Australia1966: 6367471.8485322827
    test 590 Bessel1841: 6366742.5202339496
    test 591 Bessel1841: 6366742.5202339496
    test 592 Bessel1841: 6366742.5202339496
    test 593 Bessel1841: 6366742.5202339496
    test 594 CPM1799: 6366208.8818478417
    test 595 CPM1799: 6366208.8818478417
    test 596 CPM1799: 6366208.8818478417
    test 597 CPM1799: 6366208.8818478417
    test 598 Clarke1866: 6367399.6891697831
    test 599 Clarke1866: 6367399.6891697831
    test 600 Clarke1866: 6367399.6891697831
    test 601 Clarke1866: 6367399.6891697831
    test 602 Clarke1880: 6367386.6439805133
    test 603 Clarke1880: 6367386.6439805133
    test 604 Clarke1880: 6367386.6439805133
    test 605 Clarke1880: 6367386.6439805133
    test 606 Clarke1880IGN: 6367386.7366733626
    test 607 Clarke1880IGN: 6367386.7366733626
    test 608 Clarke1880IGN: 6367386.7366733626
    test 609 Clarke1880IGN: 6367386.7366733626
    test 610 Clarke1880Mod: 6367386.6920787534
    test 611 Clarke1880Mod: 6367386.6920787534
    test 612 Clarke1880Mod: 6367386.6920787534
    test 613 Clarke1880Mod: 6367386.6920787534
    test 614 Delambre1810: 6366197.0768433437
    test 615 Delambre1810: 6366197.0768433437
    test 616 Delambre1810: 6366197.0768433437
    test 617 Delambre1810: 6366197.0768433437
    test 618 Engelis1985: 6367448.1750797099
    test 619 Engelis1985: 6367448.1750797099
    test 620 Engelis1985: 6367448.1750797099
    test 621 Engelis1985: 6367448.1750797099
    test 622 Everest1969: 6366699.5783950081
    test 623 Everest1969: 6366699.5783950081
    test 624 Everest1969: 6366699.5783950081
    test 625 Everest1969: 6366699.5783950081
    test 626 Fisher1968: 6367463.6560438070
    test 627 Fisher1968: 6367463.6560438070
    test 628 Fisher1968: 6367463.6560438070
    test 629 Fisher1968: 6367463.6560438070
    test 630 GEM10C: 6367449.1458247388
    test 631 GEM10C: 6367449.1458247388
    test 632 GEM10C: 6367449.1458247388
    test 633 GEM10C: 6367449.1458247388
    test 634 GRS67: 6367471.7470653253
    test 635 GRS67: 6367471.7470653253
    test 636 GRS67: 6367471.7470653253
    test 637 GRS67: 6367471.7470653253
    test 638 GRS80: 6367449.1457710434
    test 639 GRS80: 6367449.1457710434
    test 640 GRS80: 6367449.1457710434
    test 641 GRS80: 6367449.1457710434
    test 642 Helmert1906: 6367513.5722707417
    test 643 Helmert1906: 6367513.5722707417
    test 644 Helmert1906: 6367513.5722707417
    test 645 Helmert1906: 6367513.5722707417
    test 646 IERS1989: 6367448.1394912470
    test 647 IERS1989: 6367448.1394912470
    test 648 IERS1989: 6367448.1394912470
    test 649 IERS1989: 6367448.1394912470
    test 650 IERS1992TOPEX: 6367448.4469964085
    test 651 IERS1992TOPEX: 6367448.4469964085
    test 652 IERS1992TOPEX: 6367448.4469964085
    test 653 IERS1992TOPEX: 6367448.4469964085
    test 654 IERS2003: 6367448.7177105760
    test 655 IERS2003: 6367448.7177105760
    test 656 IERS2003: 6367448.7177105760
    test 657 IERS2003: 6367448.7177105760
    test 658 Intl1924: 6367654.5000575846
    test 659 Intl1924: 6367654.5000575846
    test 660 Intl1924: 6367654.5000575846
    test 661 Intl1924: 6367654.5000575846
    test 662 Intl1967: 6367469.3389444565
    test 663 Intl1967: 6367469.3389444565
    test 664 Intl1967: 6367469.3389444565
    test 665 Intl1967: 6367469.3389444565
    test 666 Krassovski1940: 6367558.4968749806
    test 667 Krassovski1940: 6367558.4968749806
    test 668 Krassovski1940: 6367558.4968749806
    test 669 Krassovski1940: 6367558.4968749806
    test 670 Krassowsky1940: 6367558.4968749806
    test 671 Krassowsky1940: 6367558.4968749806
    test 672 Krassowsky1940: 6367558.4968749806
    test 673 Krassowsky1940: 6367558.4968749806
    test 674 Maupertuis1738: 6380564.1301183729
    test 675 Maupertuis1738: 6380564.1301183729
    test 676 Maupertuis1738: 6380564.1301183729
    test 677 Maupertuis1738: 6380564.1301183729
    test 678 Mercury1960: 6367479.6292364299
    test 679 Mercury1960: 6367479.6292364299
    test 680 Mercury1960: 6367479.6292364299
    test 681 Mercury1960: 6367479.6292364299
    test 682 Mercury1968Mod: 6367463.6560438070
    test 683 Mercury1968Mod: 6367463.6560438070
    test 684 Mercury1968Mod: 6367463.6560438070
    test 685 Mercury1968Mod: 6367463.6560438070
    test 686 NWL1965: 6367456.8736684117
    test 687 NWL1965: 6367456.8736684117
    test 688 NWL1965: 6367456.8736684117
    test 689 NWL1965: 6367456.8736684117
    test 690 OSU86F: 6367448.3471653014
    test 691 OSU86F: 6367448.3471653014
    test 692 OSU86F: 6367448.3471653014
    test 693 OSU86F: 6367448.3471653014
    test 694 OSU91A: 6367448.4469977310
    test 695 OSU91A: 6367448.4469977310
    test 696 OSU91A: 6367448.4469977310
    test 697 OSU91A: 6367448.4469977310
    test 698 Plessis1817: 6366197.1571073858
    test 699 Plessis1817: 6366197.1571073858
    test 700 Plessis1817: 6366197.1571073858
    test 701 Plessis1817: 6366197.1571073858
    test 702 SGS85: 6367448.1394912470
    test 703 SGS85: 6367448.1394912470
    test 704 SGS85: 6367448.1394912470
    test 705 SGS85: 6367448.1394912470
    test 706 SoAmerican1969: 6367471.8485322846
    test 707 SoAmerican1969: 6367471.8485322846
    test 708 SoAmerican1969: 6367471.8485322846
    test 709 SoAmerican1969: 6367471.8485322846
    test 710 Sphere: 6371008.7714149999
    test 711 Sphere: 6371008.7714149999
    test 712 Sphere: 6371008.7714149999
    test 713 Sphere: 6371008.7714149999
    test 714 SphereAuthalic: 6371000.0000000000
    test 715 SphereAuthalic: 6371000.0000000000
    test 716 SphereAuthalic: 6371000.0000000000
    test 717 SphereAuthalic: 6371000.0000000000
    test 718 SpherePopular: 6378137.0000000000
    test 719 SpherePopular: 6378137.0000000000
    test 720 SpherePopular: 6378137.0000000000
    test 721 SpherePopular: 6378137.0000000000
    test 722 Struve1860: 6367482.3183254926
    test 723 Struve1860: 6367482.3183254926
    test 724 Struve1860: 6367482.3183254926
    test 725 Struve1860: 6367482.3183254926
    test 726 WGS60: 6367478.6309118913
    test 727 WGS60: 6367478.6309118913
    test 728 WGS60: 6367478.6309118913
    test 729 WGS60: 6367478.6309118913
    test 730 WGS66: 6367456.8736684117
    test 731 WGS66: 6367456.8736684117
    test 732 WGS66: 6367456.8736684117
    test 733 WGS66: 6367456.8736684117
    test 734 WGS72: 6367447.2486238265
    test 735 WGS72: 6367447.2486238265
    test 736 WGS72: 6367447.2486238265
    test 737 WGS72: 6367447.2486238265
    test 738 WGS84: 6367449.1458234144
    test 739 WGS84: 6367449.1458234144
    test 740 WGS84: 6367449.1458234144
    test 741 WGS84: 6367449.1458234144
    test 742 FSum+: 4.0
    test 743 FSum-: 2.0
    test 744 FSum-: 0.0
    test 745 FSum*: 4.0
    test 746 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 747 ._fsum2_: 4.0
    test 748 ._n: 4
    test 749 ._ps: [4.0]
    test 750 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 751 ._fsum2_: 4.0
    test 752 ._n: 4
    test 753 ._ps: [4.0]
    test 754 FSum+: 8.0
    test 755 FSum-: 4.0
    test 756 FSum-: 0.0
    test 757 FSum*: 8.0
    test 758 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 759 ._fsum2_: 8.0
    test 760 ._n: 8
    test 761 ._ps: [8.0]
    test 762 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 763 ._fsum2_: 8.0
    test 764 ._n: 8
    test 765 ._ps: [8.0]
    test 766 FSum+: 16.0
    test 767 FSum-: 8.0
    test 768 FSum-: 0.0
    test 769 FSum*: 16.0
    test 770 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 771 ._fsum2_: 16.0
    test 772 ._n: 16
    test 773 ._ps: [16.0]
    test 774 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 775 ._fsum2_: 16.0
    test 776 ._n: 16
    test 777 ._ps: [16.0]
    test 778 FSum+: 32.0
    test 779 FSum-: 16.0
    test 780 FSum-: 0.0
    test 781 FSum*: 32.0
    test 782 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 783 ._fsum2_: 32.0
    test 784 ._n: 32
    test 785 ._ps: [32.0]
    test 786 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 787 ._fsum2_: 32.0
    test 788 ._n: 32
    test 789 ._ps: [32.0]
    test 790 FSum+: 64.0
    test 791 FSum-: 32.0
    test 792 FSum-: 0.0
    test 793 FSum*: 64.0
    test 794 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 795 ._fsum2_: 64.0
    test 796 ._n: 64
    test 797 ._ps: [64.0]
    test 798 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 799 ._fsum2_: 64.0
    test 800 ._n: 64
    test 801 ._ps: [64.0]
    test 802 FSum+: 128.0
    test 803 FSum-: 64.0
    test 804 FSum-: 0.0
    test 805 FSum*: 128.0
    test 806 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 807 ._fsum2_: 128.0
    test 808 ._n: 128
    test 809 ._ps: [128.0]
    test 810 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 811 ._fsum2_: 128.0
    test 812 ._n: 128
    test 813 ._ps: [128.0]
    test 814 FSum+: 256.0
    test 815 FSum-: 128.0
    test 816 FSum-: 0.0
    test 817 FSum*: 256.0
    test 818 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 819 ._fsum2_: 256.0
    test 820 ._n: 256
    test 821 ._ps: [256.0]
    test 822 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 823 ._fsum2_: 256.0
    test 824 ._n: 256
    test 825 ._ps: [256.0]
    test 826 FSum+: 512.0
    test 827 FSum-: 256.0
    test 828 FSum-: 0.0
    test 829 FSum*: 512.0
    test 830 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 831 ._fsum2_: 512.0
    test 832 ._n: 512
    test 833 ._ps: [512.0]
    test 834 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 835 ._fsum2_: 512.0
    test 836 ._n: 512
    test 837 ._ps: [512.0]
    test 838 FSum+: 1024.0
    test 839 FSum-: 512.0
    test 840 FSum-: 0.0
    test 841 FSum*: 1024.0
    test 842 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 843 ._fsum2_: 1024.0
    test 844 ._n: 1024
    test 845 ._ps: [1024.0]
    test 846 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 847 ._fsum2_: 1024.0
    test 848 ._n: 1024
    test 849 ._ps: [1024.0]
    test 850 FSum+: 2048.0
    test 851 FSum-: 1024.0
    test 852 FSum-: 0.0
    test 853 FSum*: 2048.0
    test 854 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 855 ._fsum2_: 2048.0
    test 856 ._n: 2048
    test 857 ._ps: [2048.0]
    test 858 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 859 ._fsum2_: 2048.0
    test 860 ._n: 2048
    test 861 ._ps: [2048.0]
    test 862 FSum0: 0.0
    test 863 FSum0: 0.0
    test 864 FSum0: 0.0
    test 865 FSum0: 0.0
    test 866 FSum0: 0.0
    test 867 Fsum#: 2049
    test 868 Fsum#: 1
    test 869 FSum.: fmath.Fsum()
    test 870 _2sum: OverflowError('_2sum(1.0e+308, inf): inf',)
    test 871 hypot_ : 1.00001250
    test 872 euclid_: 1.00207107  FAILED, KNOWN, expected 1.00001250
    test 873 hypot2_: 1.00002500
    test 874 hypot3 : 1.00001250
    test 875 hypot_ : 3606.937759
    test 876 euclid_: 3845.584412  FAILED, KNOWN, expected 3859.423403
    test 877 hypot2_: 13010000.0
    test 878 hypot3 : 3606.937759
    test 879 hypot_ : 40112.842
    test 880 hypot2_: 1609040100.0
    test 881 euclid_: 41277.666  FAILED, KNOWN, expected 41316.227
    test 882 cbrt: 3.00
    test 883 cbrt: -3.00
    test 884 cbrt2: 9.00
    test 885 cbrt2: 9.00
    test 886 sqrt3: 27.00
    test 887 ints: 1
    test 888 ints: 1
    test 889 fsum : -3.589050987401e+19  FAILED, KNOWN, expected 1.0
    test 890 fsum_: -3.589050987401e+19  FAILED, KNOWN, expected 1.0
    test 891 Fsum : -3.589050987401e+19  FAILED, KNOWN, expected 1.0
    test 892 sum  : -3.689348814742e+19  FAILED, KNOWN, expected 1.0

    117 of 892 testFmath.py tests (13.1%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 470.246 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testFormy.py

    testing testFormy.py 20.09.08
    test 1 antipode1: (-89.0, -1.0)
    test 2 antipode2: (89.0, 1.0)
    test 3 bearing1: 251.364
    test 4 bearing2: 251.364
    test 5 bearing3: 249.614
    test 6 isantipode1: True
    test 7 isantipode2: True
    test 8 isantipode3: False
    test 9 isantipode4: True
    test 10 isantipode5: True
    test 11 isantipode6: False
    test 12 heightOf0: 2638958.23912
    test 13 heightOf45: 5401080.43931
    test 14 heightOf90: 6371008.77141
    test 15 heightOf135: 5401080.43931
    test 16 horizon0: 0.0
    test 17 horizon10Km: 357099.672
    test 18 horizon30Kft: 392310.704
    test 19 horizon10Kft: 214877.422
    test 20 haversine1 (0.0%): 298009.404
    test 21 vincentys1 (0.0%): 298009.404
    test 22 cosineAndoyerLambert1 (0.1%): 298395.796  FAILED, KNOWN, expected 298009.404
    test 23 cosineForsytheAndoyerLambert1 (0.1%): 298396.056  FAILED, KNOWN, expected 298009.404
    test 24 cosineLaw1 (0.0%): 298009.404
    test 25 equirectangular1 (0.0%): 298039.206  FAILED, KNOWN, expected 298009.404
    test 26 euclidean1 (5.3%): 313698.901  FAILED, KNOWN, expected 298009.404
    test 27 flatLocal1 (0.1%): 298425.999  FAILED, KNOWN, expected 298009.404
    test 28 flatPolar1 (8.7%): 323841.582  FAILED, KNOWN, expected 298009.404
    test 29 thomas1 (0.1%): 298396.261  FAILED, KNOWN, expected 298009.404
    test 30 hubeny: <function flatLocal at 0x1008ba7d0>
    test 31 haversine2 (0.0%): 98164.988
    test 32 vincentys2 (0.0%): 98164.988
    test 33 cosineAndoyerLambert2 (0.1%): 98071.421  FAILED, KNOWN, expected 98164.988
    test 34 cosineForsytheAndoyerLambert2 (0.1%): 98071.560  FAILED, KNOWN, expected 98164.988
    test 35 cosineLaw2 (0.0%): 98164.988
    test 36 equirectangular2 (0.0%): 98165.123  FAILED, KNOWN, expected 98164.988
    test 37 euclidean2 (6.4%): 104419.458  FAILED, KNOWN, expected 98164.988
    test 38 flatLocal2 (0.1%): 98071.693  FAILED, KNOWN, expected 98164.988
    test 39 flatPolar2 (0.6%): 98725.040  FAILED, KNOWN, expected 98164.988
    test 40 thomas2 (0.1%): 98071.535  FAILED, KNOWN, expected 98164.988
    test 41 hubeny: <function flatLocal at 0x1008ba7d0>
    test 42 haversine3 (0.0%): 651816.987
    test 43 vincentys3 (0.0%): 651816.987
    test 44 cosineAndoyerLambert3 (0.3%): 653456.144  FAILED, KNOWN, expected 651816.987
    test 45 cosineForsytheAndoyerLambert3 (0.3%): 653456.175  FAILED, KNOWN, expected 651816.987
    test 46 cosineLaw3 (0.0%): 651816.987
    test 47 equirectangular3 (0.0%): 652041.760  FAILED, KNOWN, expected 651816.987
    test 48 euclidean3 (4.4%): 680281.470  FAILED, KNOWN, expected 651816.987
    test 49 flatLocal3 (0.3%): 653681.559  FAILED, KNOWN, expected 651816.987
    test 50 flatPolar3 (13.0%): 736534.840  FAILED, KNOWN, expected 651816.987
    test 51 thomas3 (0.3%): 653456.933  FAILED, KNOWN, expected 651816.987
    test 52 hubeny: <function flatLocal at 0x1008ba7d0>
    test 53 haversine4 (0.0%): 4084985.780
    test 54 vincentys4 (0.0%): 4084985.780
    test 55 cosineAndoyerLambert4 (0.2%): 4094954.008  FAILED, KNOWN, expected 4084985.780
    test 56 cosineForsytheAndoyerLambert4 (0.2%): 4094953.639  FAILED, KNOWN, expected 4084985.780
    test 57 cosineLaw4 (0.0%): 4084985.780
    test 58 equirectangular4 (1.3%): 4136407.022  FAILED, KNOWN, expected 4084985.780
    test 59 euclidean4 (4.2%): 4257296.511  FAILED, KNOWN, expected 4084985.780
    test 60 flatLocal4 (1.5%): 4146513.247  FAILED, KNOWN, expected 4084985.780
    test 61 flatPolar4 (12.3%): 4587896.452  FAILED, KNOWN, expected 4084985.780
    test 62 thomas4 (0.2%): 4094958.301  FAILED, KNOWN, expected 4084985.780
    test 63 hubeny: <function flatLocal at 0x1008ba7d0>
    test 64 haversine5 (0.0%): 9670051.606
    test 65 vincentys5 (0.0%): 9670051.606
    test 66 cosineAndoyerLambert5 (0.2%): 9690752.610  FAILED, KNOWN, expected 9670051.606
    test 67 cosineForsytheAndoyerLambert5 (0.2%): 9690746.120  FAILED, KNOWN, expected 9670051.606
    test 68 cosineLaw5 (0.0%): 9670051.606
    test 69 equirectangular5 (7.8%): 10423307.214  FAILED, KNOWN, expected 9670051.606
    test 70 euclidean5 (9.3%): 10573030.726  FAILED, KNOWN, expected 9670051.606
    test 71 flatLocal5 (8.0%): 10446503.342  FAILED, KNOWN, expected 9670051.606
    test 72 flatPolar5 (55.6%): 15045906.074  FAILED, KNOWN, expected 9670051.606
    test 73 thomas5 (0.2%): 9690767.767  FAILED, KNOWN, expected 9670051.606
    test 74 hubeny: <function flatLocal at 0x1008ba7d0>
    test 75 haversine6 (0.0%): 10496496.577
    test 76 vincentys6 (0.0%): 10496496.577
    test 77 cosineAndoyerLambert6 (0.2%): 10477328.664  FAILED, KNOWN, expected 10496496.577
    test 78 cosineForsytheAndoyerLambert6 (0.2%): 10477342.084  FAILED, KNOWN, expected 10496496.577
    test 79 cosineLaw6 (0.0%): 10496496.577
    test 80 equirectangular6 (3.3%): 10844969.236  FAILED, KNOWN, expected 10496496.577
    test 81 euclidean6 (4.5%): 10968488.107  FAILED, KNOWN, expected 10496496.577
    test 82 flatLocal6 (3.1%): 10818798.605  FAILED, KNOWN, expected 10496496.577
    test 83 flatPolar6 (23.9%): 13002288.857  FAILED, KNOWN, expected 10496496.577
    test 84 thomas6 (0.2%): 10477316.498  FAILED, KNOWN, expected 10496496.577
    test 85 hubeny: <function flatLocal at 0x1008ba7d0>
    test 86 haversine7 (0.0%): 8998396.669
    test 87 vincentys7 (0.0%): 8998396.669
    test 88 cosineAndoyerLambert7 (0.3%): 8974227.489  FAILED, KNOWN, expected 8998396.669
    test 89 cosineForsytheAndoyerLambert7 (0.3%): 8974238.592  FAILED, KNOWN, expected 8998396.669
    test 90 cosineLaw7 (0.0%): 8998396.669
    test 91 equirectangular7 (2.0%): 9182626.289  FAILED, KNOWN, expected 8998396.669
    test 92 euclidean7 (7.8%): 9696965.812  FAILED, KNOWN, expected 8998396.669
    test 93 flatLocal7 (1.7%): 9151831.117  FAILED, KNOWN, expected 8998396.669
    test 94 flatPolar7 (17.6%): 10578638.162  FAILED, KNOWN, expected 8998396.669
    test 95 thomas7 (0.3%): 8974216.867  FAILED, KNOWN, expected 8998396.669
    test 96 hubeny: <function flatLocal at 0x1008ba7d0>
    test 97 haversine8 (0.0%): 6906867.946
    test 98 vincentys8 (0.0%): 6906867.946
    test 99 cosineAndoyerLambert8 (0.1%): 6916085.969  FAILED, KNOWN, expected 6906867.946
    test 100 cosineForsytheAndoyerLambert8 (0.1%): 6916085.333  FAILED, KNOWN, expected 6906867.946
    test 101 cosineLaw8 (0.0%): 6906867.946
    test 102 equirectangular8 (0.9%): 6969581.760  FAILED, KNOWN, expected 6906867.946
    test 103 euclidean8 (6.5%): 7358706.022  FAILED, KNOWN, expected 6906867.946
    test 104 flatLocal8 (1.0%): 6978905.097  FAILED, KNOWN, expected 6906867.946
    test 105 flatPolar8 (23.2%): 8511564.321  FAILED, KNOWN, expected 6906867.946
    test 106 thomas8 (0.1%): 6916087.828  FAILED, KNOWN, expected 6906867.946
    test 107 hubeny: <function flatLocal at 0x1008ba7d0>
    test 108 haversine9 (0.0%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 109 vincentys9 (0.0%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 110 cosineAndoyerLambert9 (0.1%): 8050357.566  FAILED, KNOWN, expected 8044806.076
    test 111 cosineForsytheAndoyerLambert9 (0.1%): 8050363.635  FAILED, KNOWN, expected 8044806.076
    test 112 cosineLaw9 (0.0%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 113 flatLocal9 (15.2%): 9268128.573  FAILED, KNOWN, expected 8044806.076
    test 114 thomas9 (0.1%): 8050370.796  FAILED, KNOWN, expected 8044806.076
    test 115 hubeny: <function flatLocal at 0x1008ba7d0>

    test 116 intersections2: pygeodesy.formy
    test 117 intersection2 (None) 1: (1.0003, 1.0003), (-1.0003, -1.0003)
    test 118 intersection2 (None) 2: (2.0024, 2.0024), (-2.0024, -2.0024)
    test 119 intersection2 (None) 5: (5.0381, 5.0381), (-5.0381, -5.0381)
    test 120 intersection2 (None) 10: (10.3062, 10.3062), (-10.3062, -10.3062)
    test 121 intersection2 (None) 20: (22.494, 22.494), (-22.494, -22.494)
    test 122 intersection2 (None) 30: (38.7298, 38.7298), (-38.7298, -38.7298)
    test 123 intersection2 (None) 40: (62.0732, 62.0732), (-62.0732, -62.0732)
    test 124 intersection2 (6371008.77141) 1: (-1.0, -1.0003), (1.0, 1.0003)
    test 125 intersection2 (6371008.77141) 2: (-2.0, -2.0024), (2.0, 2.0024)
    test 126 intersection2 (6371008.77141) 5: (-4.9999, -5.0383), (4.9999, 5.0383)
    test 127 intersection2 (6371008.77141) 10: (-9.9976, -10.3117), (9.9976, 10.3117)
    test 128 intersection2 (6371008.77141) 20: (-19.914, -22.6761), (19.914, 22.6761)
    test 129 intersection2 (6371008.77141) 30: (-29.2059, -40.203), (29.2059, 40.203)
    test 130 intersection2 (6371008.77141) 40: (-35.5129, -68.6826), (35.5129, 68.6826)
    test 131 intersection2 (WGS84) 1: (-1.0045, -1.0048), (1.0045, 1.0048)
    test 132 intersection2 (WGS84) 2: (-2.0089, -2.0114), (2.0089, 2.0114)
    test 133 intersection2 (WGS84) 5: (-5.0218, -5.0605), (5.0218, 5.0605)
    test 134 intersection2 (WGS84) 10: (-10.0378, -10.3545), (10.0378, 10.3545)
    test 135 intersection2 (WGS84) 20: (-19.9682, -22.7468), (19.9682, 22.7468)
    test 136 intersection2 (WGS84) 30: (-29.2359, -40.2625), (29.2359, 40.2625)
    test 137 intersection2 (WGS84) 40: (-35.5123, -68.6794), (35.5123, 68.6794)

    test 138 radical2: (0.26, 2.6)
    test 139 radical2: (0.74, 7.4)
    test 140 radical2: (0.5, 5.0)
    test 141 IntersectionError: distance (10.0), radius1 (5.0) or radius2 (4.0): too distant  FAILED, KNOWN, expected distance (10.0), ...

    test 142 LimitError: delta exceeds limit: equirectangular_(0.0, 0.0, 60.0, 120.0, limit=45)  FAILED, KNOWN, expected delta exceeds ...

    65 of 142 testFormy.py tests (45.8%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 48.139 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testFrechet.py

    testing testFrechet.py 20.10.03
    test 1 FrechetDegrees_ (degrees): (288.0, 1, 1, 147, 5400)
    test 2 FrechetDegrees_ (degrees): (288.0, 1, 1, 205, 10710)
    test 3 copy(FrechetDegrees_): (<class '__main__.FrechetDegrees_'>, True)
    test 4 FrechetDegrees_.copy(): (<class '__main__.FrechetDegrees_'>, True)
    test 5 FrechetRadians_ (radians): (5.02655, 1, 1, 147, 5400)
    test 6 FrechetRadians_ (radians): (5.02655, 1, 1, 205, 10710)
    test 7 copy(FrechetRadians_): (<class '__main__.FrechetRadians_'>, True)
    test 8 FrechetRadians_.copy(): (<class '__main__.FrechetRadians_'>, True)
    test 9 FrechetCosineAndoyerLambert (radians): (1.81201, 18, 14, 117, 5400)
    test 10 FrechetCosineAndoyerLambert (radians): (1.83135, 3, 4.5, 196, 10710)
    test 11 copy(FrechetCosineAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 12 FrechetCosineAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 13 FrechetCosineForsytheAndoyerLambert (radians): (1.81201, 18, 14, 117, 5400)
    test 14 FrechetCosineForsytheAndoyerLambert (radians): (1.83135, 3, 4.5, 196, 10710)
    test 15 copy(FrechetCosineForsytheAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 16 FrechetCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 17 FrechetCosineLaw (radians): (1.81341, 18, 14, 117, 5400)
    test 18 FrechetCosineLaw (radians): (1.83289, 3, 4.5, 196, 10710)
    test 19 copy(FrechetCosineLaw): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 20 FrechetCosineLaw.copy(): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 21 FrechetEquirectangular (radians2): (7.53702, 1, 3, 145, 5400)
    test 22 FrechetEquirectangular (radians2): (12.58507, 0, 2.5, 203, 10710)
    test 23 copy(FrechetEquirectangular): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 24 FrechetEquirectangular.copy(): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 25 FrechetEuclidean (radians): (2.80593, 1, 3, 145, 5400)
    test 26 FrechetEuclidean (radians): (3.83981, 0, 2.5, 203, 10710)
    test 27 copy(FrechetEuclidean): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 28 FrechetEuclidean.copy(): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 29 FrechetFlatLocal (radians2): (7.55994, 1, 3, 145, 5400)
    test 30 FrechetFlatLocal (radians2): (12.61423, 0, 2.5, 203, 10710)
    test 31 copy(FrechetFlatLocal): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 32 FrechetFlatLocal.copy(): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 33 FrechetFlatPolar (radians): (2.88199, 89, 59, 1, 5400)
    test 34 FrechetFlatPolar (radians): (2.88199, 89, 59, 1, 10710)
    test 35 copy(FrechetFlatPolar): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 36 FrechetFlatPolar.copy(): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 37 FrechetHaversine (radians): (1.81341, 18, 14, 117, 5400)
    test 38 FrechetHaversine (radians): (1.83289, 3, 4.5, 196, 10710)
    test 39 copy(FrechetHaversine): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 40 FrechetHaversine.copy(): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 41 FrechetHubeny (radians2): (7.55994, 1, 3, 145, 5400)
    test 42 FrechetHubeny (radians2): (12.61423, 0, 2.5, 203, 10710)
    test 43 copy(FrechetHubeny): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 44 FrechetHubeny.copy(): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 45 FrechetThomas (radians): (1.81201, 18, 14, 117, 5400)
    test 46 FrechetThomas (radians): (1.83135, 3, 4.5, 196, 10710)
    test 47 copy(FrechetThomas): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 48 FrechetThomas.copy(): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 49 FrechetVincentys (radians): (1.81341, 18, 14, 117, 5400)
    test 50 FrechetVincentys (radians): (1.83289, 3, 4.5, 196, 10710)
    test 51 copy(FrechetVincentys): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 52 FrechetVincentys.copy(): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 53 frechet_: (288.0, 1, 1, 147, 5400, 'test')
    test 54 [fi1]: 38.0°S, 116.0°W
    test 55 [fi2]: 64.0°N, 121.0°E
    test 56 [fi1]: LatLon_(38.0°S, 116.0°W)
    test 57 [fi2]: LatLon_(64.0°N, 121.0°E)

    all 57 testFrechet.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 8.984 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testGars.py

    testing testGars.py 20.01.22 (module pygeodesy.gars 20.09.27)
    test 1 Garef: 381NH45
    test 2 Garef: 381NH45
    test 3 Garef: Garef('381NH45')
    test 4 Garef: '381NH45'
    test 5 Garef: '381NH45'
    test 6 Garef.precision: 2
    test 7 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 8 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 9 Garef.latlon: 57.64911, 10.40744
    test 10 Garef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 11 codec3: 381NH45
    test 12 decode3: 57.625, 10.375, 2.0
    test 13 encode: 381NH45
    test 14 Garef(LatLon): 381NH45
    test 15 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 16 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 17 precision: -1  FAILED, KNOWN, expected 0
    test 18 resolution: 30′
    test 19 precision: 0
    test 20 resolution: 30′
    test 21 precision: 1
    test 22 resolution: 15′
    test 23 precision: 2
    test 24 resolution: 5′
    test 25 precision: 3  FAILED, KNOWN, expected 2
    test 26 resolution: 5′

    2 of 26 testGars.py tests (7.7%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 2.510 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testGeohash.py

    testing testGeohash.py 20.04.24 (module pygeodesy.geohash 20.10.02)
    test 1 Geohash: geek
    test 2 Geohash: geek
    test 3 Geohash: 'geek'
    test 4 Geohash: Geohash('geek')
    test 5 Geohash: geek
    test 6 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 7 toLatLon: 65.478516°N, 017.753906°W
    test 8 latlon: 65.4785156, -17.7539062
    test 9 ab: 1.1428157, -0.3098641
    test 10 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 11 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 12 Geohash: geehpbpbp
    test 13 toLatLon: 65.390625°N, 017.929689°W
    test 14 latlon: 65.390625, -17.929689
    test 15 ab: 1.1412817, -0.3129321
    test 16 decode: ('65.390646', '-17.929709')
    test 17 decode_error: 2.145767e-05, 2.145767e-05
    test 18 distance1: 2758.887
    test 19 distance2: 682.760
    test 20 distance3: 397.404
    test 21 sizes: 4.8, 4.8
    test 22 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 23 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 24 N: geehpbpbr
    test 25 NE: geek00002
    test 26 E: geek00000
    test 27 SE: gee7bpbpb
    test 28 S: gee5zzzzz
    test 29 SW: gee5zzzzy
    test 30 W: geehpbpbn
    test 31 NW: geehpbpbq
    test 32 N: geehpbpbr
    test 33 NE: geek00002
    test 34 E: geek00000
    test 35 SE: gee7bpbpb
    test 36 S: gee5zzzzz
    test 37 SW: gee5zzzzy
    test 38 W: geehpbpbn
    test 39 NW: geehpbpbq
    test 40 N: geehpbpbr
    test 41 NE: geek00002
    test 42 E: geek00000
    test 43 SE: gee7bpbpb
    test 44 S: gee5zzzzz
    test 45 SW: gee5zzzzy
    test 46 W: geehpbpbn
    test 47 NW: geehpbpbq
    test 48 N: geehpbpbr
    test 49 NE: geek00002
    test 50 E: geek00000
    test 51 SE: gee7bpbpb
    test 52 S: gee5zzzzz
    test 53 SW: gee5zzzzy
    test 54 W: geehpbpbn
    test 55 NW: geehpbpbq
    test 56 bounds: 52.20428467, 0.11810303, 52.20565796, 0.11947632
    test 57 decode: 52.205, 0.1188
    test 58 encode-decode: u120fxw
    test 59 encode-decode: geek
    test 60 encode-decode: fur
    test 61 encode-decode: geehpbpbp
    test 62 encode-decode: u4pruydqqvj8
    test 63 encode-decode: bgr96qxvpd46
    test 64 encode-decode: 0123456789
    test 65 encode-decode: zzzzzz
    test 66 Geohash: u4pruydq
    test 67 N.E.S.W: True
    test 68 E.S.W.N: True
    test 69 S.W.N.E: True
    test 70 W.N.E.S: True
    test 71 N.E.S.S.W.W.N.N.E.S: True
    test 72 Geohash: u4pruydqq
    test 73 N.E.S.W: True
    test 74 E.S.W.N: True
    test 75 S.W.N.E: True
    test 76 W.N.E.S: True
    test 77 N.E.S.S.W.W.N.N.E.S: True
    test 78 Geohash: u4pruydqqv
    test 79 N.E.S.W: True
    test 80 E.S.W.N: True
    test 81 S.W.N.E: True
    test 82 W.N.E.S: True
    test 83 N.E.S.S.W.W.N.N.E.S: True
    test 84 Geohash: u4pruydqqvj
    test 85 N.E.S.W: True
    test 86 E.S.W.N: True
    test 87 S.W.N.E: True
    test 88 W.N.E.S: True
    test 89 N.E.S.S.W.W.N.N.E.S: True
    test 90 Geohash: u4pruydqqvj8
    test 91 N.E.S.W: True
    test 92 E.S.W.N: True
    test 93 S.W.N.E: True
    test 94 W.N.E.S: True
    test 95 N.E.S.S.W.W.N.N.E.S: True
    test 96 encode: u120fxw
    test 97 decode: ('52.205', '0.1188')
    test 98 decode_error: 6.866455e-04, 6.866455e-04
    test 99 distance1: 486.710
    test 100 distance2: 3.374
    test 101 distance3: 2.798
    test 102 sizes: 153.0, 153.0
    test 103 Geohash: u336xv
    test 104 encode: u336xv
    test 105 equal: True
    test 106 sizes: 610.0, 1220.0
    test 107 encode: fur
    test 108 decode: ('69.6', '-45.7')
    test 109 decode: ('70.3', '-51')
    test 110 decode: ('68', '-68')
    test 111 decode_error: (0.703125, 0.703125)
    test 112 decode_error: (2.8125, 5.625)
    test 113 decode_error: (22.5, 22.5)
    test 114 precision: 0  FAILED, KNOWN, expected 1
    test 115 resolution: 360.0, 180.0
    test 116 precision: 1
    test 117 resolution: 45.0, 11.25
    test 118 precision: 2
    test 119 resolution: 11.25, 0.352
    test 120 precision: 3
    test 121 resolution: 1.4062, 0.011
    test 122 precision: 4
    test 123 resolution: 0.35156, 0.00034
    test 124 precision: 5
    test 125 resolution: 0.043945, 0.000011
    test 126 precision: 6
    test 127 resolution: 0.0109863, 0.0000003
    test 128 precision: 7
    test 129 resolution: 0.00137329, 0.00000001
    test 130 precision: 8
    test 131 resolution: 0.000343323, 0.0
    test 132 precision: 9
    test 133 resolution: 0.0000429153, 0.0
    test 134 precision: 10
    test 135 resolution: 0.00001072884, 0.0
    test 136 precision: 11
    test 137 resolution: 0.000001341105, 0.0
    test 138 precision: 12
    test 139 resolution: 0.0000003352761, 0.0
    test 140 precision: 13  FAILED, KNOWN, expected 12
    test 141 resolution: 0.00000033527613, 0.0

    2 of 141 testGeohash.py tests (1.4%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 22.629 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testGeoids.py

    testing testGeoids.py 20.09.24
    test 1 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 2: 11.422  FAILED, KNOWN, expected 11.423
    test 2 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 2: 0.887  FAILED, KNOWN, expected 0.892
    test 3 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 2: 65.226
    test 4 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 2: 24.460  FAILED, KNOWN, expected 24.463
    test 5 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 2: -29.682
    test 6 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 2: 10.503
    test 7 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 2: 29.325  FAILED, KNOWN, expected 29.326
    test 8 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 2: 60.423  FAILED, KNOWN, expected 60.424
    test 9 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 2: 68.997  FAILED, KNOWN, expected 68.996
    test 10 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 2: 36.295  FAILED, KNOWN, expected 36.287
    test 11 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 2: 6.627  FAILED, KNOWN, expected 6.626
    test 12 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 2: -20.860
    test 13 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 2: -3.266  FAILED, KNOWN, expected -3.267
    test 14 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 2: -1.296  FAILED, KNOWN, expected -1.294
    test 15 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 2: -2.322
    test 16 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 2: -17.556  FAILED, KNOWN, expected -17.557
    test 17 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 2: -16.594
    test 18 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 2: 24.455  FAILED, KNOWN, expected 24.453
    test 19 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 2: -18.591  FAILED, KNOWN, expected -18.592
    test 20 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 2: 44.051  FAILED, KNOWN, expected 44.049
    test 21 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 2: 18.582  FAILED, KNOWN, expected 18.581
    test 22 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 2: 44.290  FAILED, KNOWN, expected 44.289
    test 23 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 2: 49.821  FAILED, KNOWN, expected 49.816
    test 24 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 2: -36.108  FAILED, KNOWN, expected -36.114
    test 25 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 2: -41.046  FAILED, KNOWN, expected -41.048
    test 26 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 2: 26.457  FAILED, KNOWN, expected 26.456
    test 27 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 2: 49.309  FAILED, KNOWN, expected 49.317
    test 28 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 2: 20.706  FAILED, KNOWN, expected 20.714
    test 29 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 2: -7.363  FAILED, KNOWN, expected -7.362
    test 30 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 2: -16.499  FAILED, KNOWN, expected -16.492
    test 31 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 2: 18.108  FAILED, KNOWN, expected 18.110
    test 32 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 2: 51.859  FAILED, KNOWN, expected 51.858
    test 33 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 2: -38.979  FAILED, KNOWN, expected -38.981
    test 34 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 2: -9.912  FAILED, KNOWN, expected -9.913
    test 35 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 2: -2.827  FAILED, KNOWN, expected -2.828
    test 36 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 2: -5.719
    test 37 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 2: 22.420  FAILED, KNOWN, expected 22.426
    test 38 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 2: 24.546  FAILED, KNOWN, expected 24.545
    test 39 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 2: 40.651  FAILED, KNOWN, expected 40.652
    test 40 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 2: 22.380  FAILED, KNOWN, expected 22.383
    test 41 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 2: 22.185  FAILED, KNOWN, expected 22.182
    test 42 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 2: 14.927  FAILED, KNOWN, expected 14.930
    test 43 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 2: -47.093  FAILED, KNOWN, expected -47.094
    test 44 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 2: -18.421
    test 45 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 2: 10.060  FAILED, KNOWN, expected 10.055
    test 46 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 2: 5.784  FAILED, KNOWN, expected 5.786
    test 47 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 2: -22.840  FAILED, KNOWN, expected -22.838
    test 48 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 2: 42.988  FAILED, KNOWN, expected 42.989
    test 49 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 2: 15.351  FAILED, KNOWN, expected 15.353
    test 50 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 2: -6.341  FAILED, KNOWN, expected -6.337
    test 51 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 2: -25.551  FAILED, KNOWN, expected -25.555
    test 52 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 2: -9.921  FAILED, KNOWN, expected -9.923
    test 53 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 2: -10.861  FAILED, KNOWN, expected -10.852
    test 54 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 2: -0.136  FAILED, KNOWN, expected -0.135
    test 55 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 2: -43.808  FAILED, KNOWN, expected -43.809
    test 56 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 2: 57.151  FAILED, KNOWN, expected 57.150
    test 57 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 2: -17.660  FAILED, KNOWN, expected -17.657
    test 58 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 2: 46.356  FAILED, KNOWN, expected 46.358
    test 59 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 2: -14.404
    test 60 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 2: 11.239  FAILED, KNOWN, expected 11.242
    test 61 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 2: 42.236  FAILED, KNOWN, expected 42.237
    test 62 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 2: 22.148  FAILED, KNOWN, expected 22.147
    test 63 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 2: -33.395  FAILED, KNOWN, expected -33.396
    test 64 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 2: 7.965  FAILED, KNOWN, expected 7.961
    test 65 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 2: 7.228  FAILED, KNOWN, expected 7.229
    test 66 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 2: -44.289  FAILED, KNOWN, expected -44.292
    test 67 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 2: 21.872  FAILED, KNOWN, expected 21.875
    test 68 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 2: 28.935  FAILED, KNOWN, expected 28.933
    test 69 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 2: -41.255  FAILED, KNOWN, expected -41.238
    test 70 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 2: -31.334  FAILED, KNOWN, expected -31.331
    test 71 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 2: -32.702
    test 72 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 2: 60.118  FAILED, KNOWN, expected 60.117
    test 73 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 2: 6.456  FAILED, KNOWN, expected 6.457
    test 74 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 2: -31.959  FAILED, KNOWN, expected -31.961
    test 75 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 2: -26.572  FAILED, KNOWN, expected -26.571
    test 76 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 2: -29.761  FAILED, KNOWN, expected -29.760
    test 77 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 2: 21.980
    test 78 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 2: 16.849
    test 79 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 2: -20.922  FAILED, KNOWN, expected -20.923
    test 80 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 2: -42.745  FAILED, KNOWN, expected -42.749
    test 81 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 2: -21.839  FAILED, KNOWN, expected -21.841
    test 82 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 2: 25.482
    test 83 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 2: -8.845  FAILED, KNOWN, expected -8.847
    test 84 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 2: -19.600  FAILED, KNOWN, expected -19.604
    test 85 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 2: 25.672  FAILED, KNOWN, expected 25.668
    test 86 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 2: -3.772
    test 87 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 2: 17.747  FAILED, KNOWN, expected 17.748
    test 88 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 2: -17.838  FAILED, KNOWN, expected -17.839
    test 89 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 2: 14.293  FAILED, KNOWN, expected 14.292
    test 90 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 2: 16.529
    test 91 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 2: -8.230  FAILED, KNOWN, expected -8.229
    test 92 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 2: 9.828  FAILED, KNOWN, expected 9.830
    test 93 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 2: 6.213  FAILED, KNOWN, expected 6.215
    test 94 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 2: -2.957  FAILED, KNOWN, expected -2.960
    test 95 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 2: -42.326  FAILED, KNOWN, expected -42.323
    test 96 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 2: 38.352  FAILED, KNOWN, expected 38.356
    test 97 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 2: 34.242  FAILED, KNOWN, expected 34.259
    test 98 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 2: -37.390  FAILED, KNOWN, expected -37.397
    test 99 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 2: -2.015  FAILED, KNOWN, expected -2.016
    test 100 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 2: 33.915  FAILED, KNOWN, expected 33.912
    test 101 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 2: 12.676
    test 102 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 2: 15.729  FAILED, KNOWN, expected 15.692
    test 103 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 2: -11.117
    test 104 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 2: 27.443  FAILED, KNOWN, expected 27.437
    test 105 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 2: -23.893  FAILED, KNOWN, expected -23.894
    test 106 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 2: 18.749  FAILED, KNOWN, expected 18.766
    test 107 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 2: -7.452
    test 108 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 2: 30.141  FAILED, KNOWN, expected 30.143
    test 109 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 2: -61.176  FAILED, KNOWN, expected -61.172
    test 110 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 2: -24.892  FAILED, KNOWN, expected -24.890
    test 111 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 2: 39.523  FAILED, KNOWN, expected 39.519
    test 112 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 2: 19.417  FAILED, KNOWN, expected 19.419
    test 113 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 2: 2.069
    test 114 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 2: 25.048
    test 115 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 2: 22.547
    test 116 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 2: -34.359
    test 117 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 2: -5.454  FAILED, KNOWN, expected -5.453
    test 118 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 2: -6.802  FAILED, KNOWN, expected -6.804
    test 119 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 2: -35.053  FAILED, KNOWN, expected -35.054
    test 120 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 2: -15.417  FAILED, KNOWN, expected -15.418
    test 121 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 2: -79.556  FAILED, KNOWN, expected -79.557
    test 122 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 2: -16.894
    test 123 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 2: 36.213  FAILED, KNOWN, expected 36.215
    test 124 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 2: 3.524  FAILED, KNOWN, expected 3.523
    test 125 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 2: 23.796  FAILED, KNOWN, expected 23.797
    test 126 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 2: 51.587  FAILED, KNOWN, expected 51.586
    test 127 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 2: -30.131
    test 128 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 2: -51.853  FAILED, KNOWN, expected -51.848
    test 129 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 2: 37.200  FAILED, KNOWN, expected 37.192
    test 130 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 2: 63.583  FAILED, KNOWN, expected 63.597
    test 131 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 2: -62.636
    test 132 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 2: -8.717
    test 133 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 2: 40.649  FAILED, KNOWN, expected 40.645
    test 134 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 2: -60.730  FAILED, KNOWN, expected -60.729
    test 135 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 2: 8.784  FAILED, KNOWN, expected 8.783
    test 136 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 2: 31.569  FAILED, KNOWN, expected 31.523
    test 137 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 2: -6.249  FAILED, KNOWN, expected -6.250
    test 138 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 2: 32.599
    test 139 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 2: -24.531  FAILED, KNOWN, expected -24.536
    test 140 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 2: -38.863  FAILED, KNOWN, expected -38.869
    test 141 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 2: -23.214  FAILED, KNOWN, expected -23.213
    test 142 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 2: -11.824
    test 143 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 2: 16.712  FAILED, KNOWN, expected 16.709
    test 144 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 2: -22.380  FAILED, KNOWN, expected -22.379
    test 145 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 2: -4.941
    test 146 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 2: 19.382  FAILED, KNOWN, expected 19.394
    test 147 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 2: -9.381
    test 148 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 2: -23.319
    test 149 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 2: 24.470  FAILED, KNOWN, expected 24.468
    test 150 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 2: -21.762  FAILED, KNOWN, expected -21.761
    test 151 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 2: -18.798
    test 152 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 2: 12.611  FAILED, KNOWN, expected 12.612
    test 153 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 2: -19.708  FAILED, KNOWN, expected -19.706
    test 154 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 2: 45.794  FAILED, KNOWN, expected 45.792
    test 155 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 2: -8.408  FAILED, KNOWN, expected -8.406
    test 156 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 2: -8.366  FAILED, KNOWN, expected -8.367
    test 157 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 2: -2.026  FAILED, KNOWN, expected -2.025
    test 158 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 2: -16.569
    test 159 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 2: -35.434  FAILED, KNOWN, expected -35.435
    test 160 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 2: -39.009
    test 161 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 2: -6.921
    test 162 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 2: 50.811  FAILED, KNOWN, expected 50.795
    test 163 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 2: 1.069  FAILED, KNOWN, expected 1.070
    test 164 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 2: -14.198  FAILED, KNOWN, expected -14.214
    test 165 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 2: 17.603  FAILED, KNOWN, expected 17.600
    test 166 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 2: 44.803  FAILED, KNOWN, expected 44.804
    test 167 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 2: -17.924  FAILED, KNOWN, expected -17.922
    test 168 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 2: 10.681  FAILED, KNOWN, expected 10.662
    test 169 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 2: 7.672  FAILED, KNOWN, expected 7.670
    test 170 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 2: 8.622  FAILED, KNOWN, expected 8.623
    test 171 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 2: -60.723
    test 172 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 2: 3.818
    test 173 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 2: -1.870  FAILED, KNOWN, expected -1.871
    test 174 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 2: 30.642  FAILED, KNOWN, expected 30.633
    test 175 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 2: 2.801
    test 176 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 2: 19.858  FAILED, KNOWN, expected 19.859
    test 177 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 2: 5.347  FAILED, KNOWN, expected 5.348
    test 178 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 2: 9.940  FAILED, KNOWN, expected 9.941
    test 179 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 2: 22.322  FAILED, KNOWN, expected 22.321
    test 180 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 2: -24.136  FAILED, KNOWN, expected -24.135
    test 181 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 2: -17.680  FAILED, KNOWN, expected -17.679
    test 182 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 2: -37.149  FAILED, KNOWN, expected -37.150
    test 183 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 2: -61.158
    test 184 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 2: 20.600  FAILED, KNOWN, expected 20.602
    test 185 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 2: 13.054  FAILED, KNOWN, expected 13.055
    test 186 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 2: 40.138  FAILED, KNOWN, expected 40.132
    test 187 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 2: 43.263
    test 188 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 2: -23.129  FAILED, KNOWN, expected -23.126
    test 189 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 2: -20.677  FAILED, KNOWN, expected -20.678
    test 190 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 2: -8.531  FAILED, KNOWN, expected -8.529
    test 191 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 2: -8.669  FAILED, KNOWN, expected -8.666
    test 192 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 2: -12.798  FAILED, KNOWN, expected -12.796
    test 193 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 2: 15.770  FAILED, KNOWN, expected 15.773
    test 194 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 2: -19.955  FAILED, KNOWN, expected -19.954
    test 195 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 2: -31.479  FAILED, KNOWN, expected -31.480
    test 196 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 2: -17.428  FAILED, KNOWN, expected -17.429
    test 197 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 2: 24.037
    test 198 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 2: 4.522  FAILED, KNOWN, expected 4.520
    test 199 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 2: 11.403  FAILED, KNOWN, expected 11.394
    test 200 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 2: 5.676  FAILED, KNOWN, expected 5.679
    test 201 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 2: 28.705  FAILED, KNOWN, expected 28.707
    test 202 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 2: -30.261  FAILED, KNOWN, expected -30.262
    test 203 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 2: -15.984
    test 204 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 2: -18.636  FAILED, KNOWN, expected -18.635
    test 205 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 2: -37.749
    test 206 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 2: -26.691
    test 207 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 2: -39.561
    test 208 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 2: -22.563  FAILED, KNOWN, expected -22.562
    test 209 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 2: -30.012
    test 210 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 2: -48.039

    test 211 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.046

    test 212 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 213 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 214 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 215 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 216 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 217 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 218 GeoidKarney('egm96-5.pgm').dtype: 'ushort'
    test 219 GeoidKarney('egm96-5.pgm').knots: 9335520
    test 220 GeoidKarney('egm96-5.pgm').mean: -1.317
    test 221 GeoidKarney('egm96-5.pgm').nBytes: None
    test 222 GeoidKarney('egm96-5.pgm').scipy: None
    test 223 GeoidKarney('egm96-5.pgm').smooth: None
    test 224 GeoidKarney('egm96-5.pgm').stdev: 29.244
    test 225 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 226 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 227 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 228 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 229 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 230 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 231 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 232 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 3: 11.424  FAILED, KNOWN, expected 11.423
    test 233 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 3: 0.892
    test 234 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 3: 65.225  FAILED, KNOWN, expected 65.226
    test 235 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 3: 24.464  FAILED, KNOWN, expected 24.463
    test 236 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 3: -29.682
    test 237 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 3: 10.503
    test 238 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 3: 29.325  FAILED, KNOWN, expected 29.326
    test 239 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 3: 60.423  FAILED, KNOWN, expected 60.424
    test 240 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 3: 68.996
    test 241 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 3: 36.287
    test 242 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 3: 6.626
    test 243 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 3: -20.861  FAILED, KNOWN, expected -20.860
    test 244 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 3: -3.267
    test 245 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 3: -1.295  FAILED, KNOWN, expected -1.294
    test 246 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 3: -2.323  FAILED, KNOWN, expected -2.322
    test 247 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 3: -17.555  FAILED, KNOWN, expected -17.557
    test 248 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 3: -16.594
    test 249 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 3: 24.454  FAILED, KNOWN, expected 24.453
    test 250 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 3: -18.592
    test 251 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 3: 44.048  FAILED, KNOWN, expected 44.049
    test 252 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 3: 18.582  FAILED, KNOWN, expected 18.581
    test 253 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 3: 44.290  FAILED, KNOWN, expected 44.289
    test 254 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 3: 49.817  FAILED, KNOWN, expected 49.816
    test 255 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 3: -36.114
    test 256 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 3: -41.047  FAILED, KNOWN, expected -41.048
    test 257 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 3: 26.456
    test 258 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 3: 49.317
    test 259 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 3: 20.714
    test 260 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 3: -7.362
    test 261 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 3: -16.491  FAILED, KNOWN, expected -16.492
    test 262 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 3: 18.110
    test 263 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 3: 51.858
    test 264 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 3: -38.979  FAILED, KNOWN, expected -38.981
    test 265 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 3: -9.913
    test 266 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 3: -2.828
    test 267 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 3: -5.718  FAILED, KNOWN, expected -5.719
    test 268 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 3: 22.427  FAILED, KNOWN, expected 22.426
    test 269 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 3: 24.545
    test 270 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 3: 40.651  FAILED, KNOWN, expected 40.652
    test 271 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 3: 22.383
    test 272 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 3: 22.183  FAILED, KNOWN, expected 22.182
    test 273 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 3: 14.929  FAILED, KNOWN, expected 14.930
    test 274 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 3: -47.094
    test 275 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 3: -18.421
    test 276 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 3: 10.055
    test 277 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 3: 5.786
    test 278 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 3: -22.838
    test 279 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 3: 42.989
    test 280 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 3: 15.352  FAILED, KNOWN, expected 15.353
    test 281 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 3: -6.338  FAILED, KNOWN, expected -6.337
    test 282 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 3: -25.554  FAILED, KNOWN, expected -25.555
    test 283 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 3: -9.922  FAILED, KNOWN, expected -9.923
    test 284 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 3: -10.853  FAILED, KNOWN, expected -10.852
    test 285 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 3: -0.135
    test 286 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 287 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 3: 57.150
    test 288 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 3: -17.656  FAILED, KNOWN, expected -17.657
    test 289 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 3: 46.359  FAILED, KNOWN, expected 46.358
    test 290 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 3: -14.404
    test 291 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 3: 11.242
    test 292 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 3: 42.237
    test 293 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 3: 22.147
    test 294 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 3: -33.396
    test 295 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 3: 7.961
    test 296 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 3: 7.228  FAILED, KNOWN, expected 7.229
    test 297 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 3: -44.290  FAILED, KNOWN, expected -44.292
    test 298 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 3: 21.874  FAILED, KNOWN, expected 21.875
    test 299 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 3: 28.933
    test 300 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 3: -41.238
    test 301 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 3: -31.331
    test 302 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 303 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 3: 60.117
    test 304 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 3: 6.457
    test 305 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 3: -31.961
    test 306 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 3: -26.572  FAILED, KNOWN, expected -26.571
    test 307 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 3: -29.761  FAILED, KNOWN, expected -29.760
    test 308 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 3: 21.981  FAILED, KNOWN, expected 21.980
    test 309 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 3: 16.849
    test 310 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 3: -20.923
    test 311 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 3: -42.749
    test 312 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 3: -21.840  FAILED, KNOWN, expected -21.841
    test 313 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 3: 25.481  FAILED, KNOWN, expected 25.482
    test 314 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 3: -8.846  FAILED, KNOWN, expected -8.847
    test 315 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 3: -19.603  FAILED, KNOWN, expected -19.604
    test 316 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 3: 25.668
    test 317 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 3: -3.772
    test 318 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 3: 17.747  FAILED, KNOWN, expected 17.748
    test 319 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 3: -17.838  FAILED, KNOWN, expected -17.839
    test 320 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 3: 14.292
    test 321 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 3: 16.529
    test 322 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 3: -8.230  FAILED, KNOWN, expected -8.229
    test 323 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 3: 9.831  FAILED, KNOWN, expected 9.830
    test 324 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 3: 6.215
    test 325 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 3: -2.960
    test 326 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 3: -42.323
    test 327 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 3: 38.356
    test 328 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 3: 34.259
    test 329 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 3: -37.397
    test 330 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 3: -2.017  FAILED, KNOWN, expected -2.016
    test 331 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 3: 33.912
    test 332 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 3: 12.676
    test 333 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 3: 15.692
    test 334 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 3: -11.117
    test 335 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 3: 27.437
    test 336 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 3: -23.894
    test 337 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 3: 18.765  FAILED, KNOWN, expected 18.766
    test 338 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 3: -7.452
    test 339 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 3: 30.143
    test 340 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 3: -61.172
    test 341 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 3: -24.890
    test 342 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 3: 39.519
    test 343 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 3: 19.420  FAILED, KNOWN, expected 19.419
    test 344 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 3: 2.067  FAILED, KNOWN, expected 2.069
    test 345 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 3: 25.049  FAILED, KNOWN, expected 25.048
    test 346 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 3: 22.546  FAILED, KNOWN, expected 22.547
    test 347 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 3: -34.358  FAILED, KNOWN, expected -34.359
    test 348 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 3: -5.454  FAILED, KNOWN, expected -5.453
    test 349 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 3: -6.804
    test 350 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 3: -35.053  FAILED, KNOWN, expected -35.054
    test 351 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 3: -15.417  FAILED, KNOWN, expected -15.418
    test 352 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 3: -79.557
    test 353 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 3: -16.894
    test 354 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 3: 36.215
    test 355 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 3: 3.523
    test 356 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 3: 23.797
    test 357 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 3: 51.587  FAILED, KNOWN, expected 51.586
    test 358 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 3: -30.131
    test 359 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 3: -51.849  FAILED, KNOWN, expected -51.848
    test 360 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 3: 37.191  FAILED, KNOWN, expected 37.192
    test 361 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 3: 63.596  FAILED, KNOWN, expected 63.597
    test 362 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 3: -62.636
    test 363 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 3: -8.718  FAILED, KNOWN, expected -8.717
    test 364 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 3: 40.645
    test 365 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 3: -60.729
    test 366 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 3: 8.784  FAILED, KNOWN, expected 8.783
    test 367 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 3: 31.523
    test 368 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 3: -6.251  FAILED, KNOWN, expected -6.250
    test 369 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 3: 32.598  FAILED, KNOWN, expected 32.599
    test 370 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 3: -24.536
    test 371 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 3: -38.869
    test 372 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.212  FAILED, KNOWN, expected -23.213
    test 373 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 3: -11.824
    test 374 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 3: 16.710  FAILED, KNOWN, expected 16.709
    test 375 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 3: -22.378  FAILED, KNOWN, expected -22.379
    test 376 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 3: -4.941
    test 377 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 3: 19.394
    test 378 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 3: -9.381
    test 379 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 380 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 3: 24.467  FAILED, KNOWN, expected 24.468
    test 381 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 3: -21.761
    test 382 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 3: -18.798
    test 383 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 3: 12.612
    test 384 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 3: -19.708  FAILED, KNOWN, expected -19.706
    test 385 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 3: 45.792
    test 386 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 3: -8.406
    test 387 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 3: -8.367
    test 388 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 3: -2.026  FAILED, KNOWN, expected -2.025
    test 389 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 3: -16.567  FAILED, KNOWN, expected -16.569
    test 390 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 3: -35.435
    test 391 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 3: -39.008  FAILED, KNOWN, expected -39.009
    test 392 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 3: -6.921
    test 393 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 3: 50.795
    test 394 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 3: 1.071  FAILED, KNOWN, expected 1.070
    test 395 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 3: -14.214
    test 396 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 3: 17.600
    test 397 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 3: 44.803  FAILED, KNOWN, expected 44.804
    test 398 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 3: -17.923  FAILED, KNOWN, expected -17.922
    test 399 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 3: 10.662
    test 400 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 3: 7.670
    test 401 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 3: 8.624  FAILED, KNOWN, expected 8.623
    test 402 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 3: -60.722  FAILED, KNOWN, expected -60.723
    test 403 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 3: 3.820  FAILED, KNOWN, expected 3.818
    test 404 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 3: -1.871
    test 405 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 3: 30.634  FAILED, KNOWN, expected 30.633
    test 406 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 3: 2.800  FAILED, KNOWN, expected 2.801
    test 407 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 3: 19.858  FAILED, KNOWN, expected 19.859
    test 408 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 3: 5.347  FAILED, KNOWN, expected 5.348
    test 409 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 3: 9.941
    test 410 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 3: 22.322  FAILED, KNOWN, expected 22.321
    test 411 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 3: -24.135
    test 412 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 3: -17.680  FAILED, KNOWN, expected -17.679
    test 413 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 414 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 3: -61.158
    test 415 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 3: 20.603  FAILED, KNOWN, expected 20.602
    test 416 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 3: 13.056  FAILED, KNOWN, expected 13.055
    test 417 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 3: 40.133  FAILED, KNOWN, expected 40.132
    test 418 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 3: 43.263
    test 419 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 420 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 3: -20.678
    test 421 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 3: -8.530  FAILED, KNOWN, expected -8.529
    test 422 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 3: -8.666
    test 423 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 3: -12.795  FAILED, KNOWN, expected -12.796
    test 424 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 3: 15.774  FAILED, KNOWN, expected 15.773
    test 425 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 3: -19.955  FAILED, KNOWN, expected -19.954
    test 426 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 3: -31.480
    test 427 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 3: -17.428  FAILED, KNOWN, expected -17.429
    test 428 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 3: 24.037
    test 429 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 3: 4.519  FAILED, KNOWN, expected 4.520
    test 430 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 3: 11.393  FAILED, KNOWN, expected 11.394
    test 431 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 3: 5.678  FAILED, KNOWN, expected 5.679
    test 432 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 3: 28.707
    test 433 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 434 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 435 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.635
    test 436 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 437 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 438 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 439 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.562
    test 440 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 441 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 442 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.002

    test 443 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 444 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 445 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 446 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 447 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 448 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 449 GeoidKarney('egm96-5.pgm').dtype: 'ushort'
    test 450 GeoidKarney('egm96-5.pgm').knots: 9335520
    test 451 GeoidKarney('egm96-5.pgm').mean: -1.317
    test 452 GeoidKarney('egm96-5.pgm').nBytes: None
    test 453 GeoidKarney('egm96-5.pgm').scipy: None
    test 454 GeoidKarney('egm96-5.pgm').smooth: None
    test 455 GeoidKarney('egm96-5.pgm').stdev: 29.244
    test 456 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 457 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 458 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 459 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 460 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 461 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 462 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    210 tests skipped (210): no scipy
    test 463 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 2: 12.637  FAILED, KNOWN, expected 12.636
    test 464 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 2: 0.749
    test 465 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 2: 65.110  FAILED, KNOWN, expected 65.109
    test 466 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 2: 24.889
    test 467 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 2: -29.557
    test 468 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 2: 9.741  FAILED, KNOWN, expected 9.742
    test 469 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 2: 30.061  FAILED, KNOWN, expected 30.059
    test 470 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 2: 60.691  FAILED, KNOWN, expected 60.690
    test 471 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 2: 69.134  FAILED, KNOWN, expected 69.133
    test 472 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 2: 36.522  FAILED, KNOWN, expected 36.520
    test 473 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 2: 6.801
    test 474 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 2: -20.652  FAILED, KNOWN, expected -20.651
    test 475 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 2: -3.040
    test 476 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 2: -1.329  FAILED, KNOWN, expected -1.328
    test 477 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 2: -2.171  FAILED, KNOWN, expected -2.172
    test 478 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 2: -17.411
    test 479 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 2: -16.426  FAILED, KNOWN, expected -16.425
    test 480 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 2: 24.699  FAILED, KNOWN, expected 24.698
    test 481 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 2: -18.328  FAILED, KNOWN, expected -18.329
    test 482 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 2: 43.802
    test 483 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 2: 18.716
    test 484 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 2: 44.468  FAILED, KNOWN, expected 44.469
    test 485 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 2: 49.943  FAILED, KNOWN, expected 49.944
    test 486 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 2: -35.878
    test 487 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 2: -40.777
    test 488 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 2: 26.560  FAILED, KNOWN, expected 26.559
    test 489 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 2: 49.361
    test 490 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 2: 21.106  FAILED, KNOWN, expected 21.107
    test 491 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 2: -7.202
    test 492 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 2: -17.168
    test 493 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 2: 18.359
    test 494 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 2: 52.118
    test 495 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 2: -38.949  FAILED, KNOWN, expected -38.950
    test 496 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 2: -9.935  FAILED, KNOWN, expected -9.934
    test 497 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 2: -2.879
    test 498 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 2: -5.025
    test 499 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 2: 24.296
    test 500 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 2: 25.131
    test 501 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 2: 40.720  FAILED, KNOWN, expected 40.721
    test 502 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 2: 22.388
    test 503 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 2: 22.485  FAILED, KNOWN, expected 22.486
    test 504 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 2: 14.942  FAILED, KNOWN, expected 14.943
    test 505 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 2: -47.387
    test 506 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 2: -18.404  FAILED, KNOWN, expected -18.403
    test 507 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 2: 10.186  FAILED, KNOWN, expected 10.185
    test 508 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 2: 5.671
    test 509 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 2: -24.577
    test 510 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 2: 43.288
    test 511 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 2: 13.747  FAILED, KNOWN, expected 13.748
    test 512 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 2: -5.342
    test 513 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 2: -25.579
    test 514 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 2: -9.849
    test 515 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 2: -10.491
    test 516 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 2: 0.243  FAILED, KNOWN, expected 0.244
    test 517 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 2: -43.820  FAILED, KNOWN, expected -43.821
    test 518 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 2: 57.400  FAILED, KNOWN, expected 57.401
    test 519 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 2: -17.889  FAILED, KNOWN, expected -17.890
    test 520 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 2: 46.422  FAILED, KNOWN, expected 46.421
    test 521 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 2: -14.475
    test 522 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 2: 11.119  FAILED, KNOWN, expected 11.118
    test 523 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 2: 42.291
    test 524 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 2: 22.327  FAILED, KNOWN, expected 22.326
    test 525 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 2: -33.098
    test 526 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 2: 9.431  FAILED, KNOWN, expected 9.430
    test 527 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 2: 6.032
    test 528 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 2: -44.330
    test 529 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 2: 21.775
    test 530 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 2: 29.243
    test 531 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 2: -40.677  FAILED, KNOWN, expected -40.676
    test 532 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 2: -31.353
    test 533 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 2: -32.700  FAILED, KNOWN, expected -32.701
    test 534 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 2: 60.628  FAILED, KNOWN, expected 60.629
    test 535 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 2: 6.617
    test 536 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 2: -31.888  FAILED, KNOWN, expected -31.887
    test 537 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 2: -26.536  FAILED, KNOWN, expected -26.535
    test 538 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 2: -29.631  FAILED, KNOWN, expected -29.630
    test 539 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 2: 22.274  FAILED, KNOWN, expected 22.275
    test 540 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 2: 17.095  FAILED, KNOWN, expected 17.094
    test 541 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 2: -20.940  FAILED, KNOWN, expected -20.941
    test 542 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 2: -42.740
    test 543 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 2: -21.651
    test 544 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 2: 25.240
    test 545 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 2: -8.758
    test 546 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 2: -19.606  FAILED, KNOWN, expected -19.607
    test 547 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 2: 26.258
    test 548 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 2: -3.824
    test 549 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 2: 18.194  FAILED, KNOWN, expected 18.195
    test 550 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 2: -17.724  FAILED, KNOWN, expected -17.725
    test 551 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 2: 14.511  FAILED, KNOWN, expected 14.513
    test 552 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 2: 16.808  FAILED, KNOWN, expected 16.809
    test 553 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 2: -8.025  FAILED, KNOWN, expected -8.026
    test 554 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 2: 9.688
    test 555 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 2: 6.218
    test 556 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 2: -2.725  FAILED, KNOWN, expected -2.724
    test 557 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 2: -42.566  FAILED, KNOWN, expected -42.565
    test 558 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 2: 38.341
    test 559 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 2: 33.888  FAILED, KNOWN, expected 33.889
    test 560 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 2: -37.382  FAILED, KNOWN, expected -37.380
    test 561 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 2: -1.857  FAILED, KNOWN, expected -1.858
    test 562 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 2: 34.196  FAILED, KNOWN, expected 34.195
    test 563 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 2: 12.767
    test 564 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 2: 15.612
    test 565 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 2: -11.063
    test 566 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 2: 27.387
    test 567 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 2: -23.817
    test 568 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 2: 18.713  FAILED, KNOWN, expected 18.712
    test 569 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 2: -7.343  FAILED, KNOWN, expected -7.344
    test 570 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 2: 29.997  FAILED, KNOWN, expected 29.998
    test 571 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 2: -61.869
    test 572 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 2: -24.937
    test 573 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 2: 38.558  FAILED, KNOWN, expected 38.556
    test 574 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 2: 19.672  FAILED, KNOWN, expected 19.671
    test 575 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 2: 2.273  FAILED, KNOWN, expected 2.272
    test 576 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 2: 24.863
    test 577 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 2: 21.637  FAILED, KNOWN, expected 21.636
    test 578 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 2: -33.851
    test 579 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 2: -5.299
    test 580 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 2: -6.789
    test 581 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 2: -35.030
    test 582 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 2: -15.338
    test 583 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 2: -79.356
    test 584 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 2: -16.650
    test 585 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 2: 36.358  FAILED, KNOWN, expected 36.359
    test 586 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 2: 3.614  FAILED, KNOWN, expected 3.615
    test 587 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 2: 23.946  FAILED, KNOWN, expected 23.947
    test 588 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 2: 51.495
    test 589 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 2: -30.909  FAILED, KNOWN, expected -30.910
    test 590 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 2: -52.131
    test 591 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 2: 37.046  FAILED, KNOWN, expected 37.045
    test 592 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 2: 64.181  FAILED, KNOWN, expected 64.180
    test 593 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 2: -62.475
    test 594 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 2: -8.454
    test 595 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 2: 40.834
    test 596 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 2: -60.456  FAILED, KNOWN, expected -60.455
    test 597 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 2: 9.727
    test 598 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 2: 32.143  FAILED, KNOWN, expected 32.142
    test 599 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 2: -6.221  FAILED, KNOWN, expected -6.220
    test 600 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 2: 32.489
    test 601 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 2: -24.692
    test 602 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 2: -38.748  FAILED, KNOWN, expected -38.749
    test 603 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 2: -23.254  FAILED, KNOWN, expected -23.255
    test 604 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 2: -13.454  FAILED, KNOWN, expected -13.455
    test 605 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 2: 16.627
    test 606 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 2: -22.221
    test 607 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 2: -4.836
    test 608 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 2: 19.571
    test 609 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 2: -9.227
    test 610 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 2: -23.248
    test 611 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 2: 24.829
    test 612 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 2: -21.706  FAILED, KNOWN, expected -21.705
    test 613 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 2: -17.054  FAILED, KNOWN, expected -17.053
    test 614 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 2: 11.716
    test 615 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 2: -19.529  FAILED, KNOWN, expected -19.530
    test 616 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 2: 45.929
    test 617 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 2: -8.283
    test 618 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 2: -8.467
    test 619 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 2: -1.829
    test 620 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 2: -16.505  FAILED, KNOWN, expected -16.506
    test 621 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 2: -35.384
    test 622 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 2: -38.962  FAILED, KNOWN, expected -38.963
    test 623 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 2: -6.956
    test 624 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 2: 51.006  FAILED, KNOWN, expected 51.005
    test 625 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 2: 1.193  FAILED, KNOWN, expected 1.192
    test 626 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 2: -15.038
    test 627 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 2: 17.792  FAILED, KNOWN, expected 17.791
    test 628 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 2: 44.653  FAILED, KNOWN, expected 44.652
    test 629 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 2: -17.972  FAILED, KNOWN, expected -17.971
    test 630 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 2: 11.631
    test 631 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 2: 7.394
    test 632 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 2: 7.932
    test 633 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 2: -60.594  FAILED, KNOWN, expected -60.593
    test 634 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 2: 4.382  FAILED, KNOWN, expected 4.384
    test 635 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 2: 1.296  FAILED, KNOWN, expected 1.297
    test 636 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 2: 30.852
    test 637 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 2: 2.705  FAILED, KNOWN, expected 2.704
    test 638 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 2: 21.263  FAILED, KNOWN, expected 21.264
    test 639 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 2: 5.443
    test 640 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 2: 9.998
    test 641 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 2: 22.428
    test 642 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 2: -23.156  FAILED, KNOWN, expected -23.154
    test 643 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 2: -17.662
    test 644 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 2: -36.840  FAILED, KNOWN, expected -36.839
    test 645 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 2: -61.220  FAILED, KNOWN, expected -61.221
    test 646 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 2: 20.355
    test 647 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 2: 13.147
    test 648 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 2: 41.072
    test 649 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 2: 42.982
    test 650 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 2: -22.997  FAILED, KNOWN, expected -22.998
    test 651 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 2: -20.662
    test 652 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 2: -8.438
    test 653 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 2: -8.711  FAILED, KNOWN, expected -8.712
    test 654 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 2: -12.654  FAILED, KNOWN, expected -12.653
    test 655 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 2: 17.163  FAILED, KNOWN, expected 17.166
    test 656 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 2: -19.873  FAILED, KNOWN, expected -19.874
    test 657 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 2: -31.124
    test 658 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 2: -17.307
    test 659 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 2: 23.437  FAILED, KNOWN, expected 23.434
    test 660 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 2: 4.508
    test 661 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 2: 11.550  FAILED, KNOWN, expected 11.549
    test 662 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 2: 5.749  FAILED, KNOWN, expected 5.748
    test 663 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 2: 28.788
    test 664 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 2: -30.588  FAILED, KNOWN, expected -30.589
    test 665 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 2: -15.273
    test 666 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 2: -18.624
    test 667 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 2: -37.872  FAILED, KNOWN, expected -37.873
    test 668 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 2: -26.511
    test 669 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 2: -39.600
    test 670 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 2: -22.689
    test 671 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 2: -30.066  FAILED, KNOWN, expected -30.067
    test 672 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 2: -48.093

    test 673 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.003

    test 674 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 675 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 676 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 677 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 678 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 679 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 680 GeoidKarney('egm2008-1.pgm').dtype: 'ushort'
    test 681 GeoidKarney('egm2008-1.pgm').knots: 233301600
    test 682 GeoidKarney('egm2008-1.pgm').mean: -1.317
    test 683 GeoidKarney('egm2008-1.pgm').nBytes: None
    test 684 GeoidKarney('egm2008-1.pgm').scipy: None
    test 685 GeoidKarney('egm2008-1.pgm').smooth: None
    test 686 GeoidKarney('egm2008-1.pgm').stdev: 29.244
    test 687 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 688 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 689 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 690 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 691 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 692 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 693 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 694 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 3: 12.637  FAILED, KNOWN, expected 12.636
    test 695 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 3: 0.749
    test 696 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 3: 65.110  FAILED, KNOWN, expected 65.109
    test 697 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 3: 24.889
    test 698 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 3: -29.556  FAILED, KNOWN, expected -29.557
    test 699 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 3: 9.741  FAILED, KNOWN, expected 9.742
    test 700 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 3: 30.060  FAILED, KNOWN, expected 30.059
    test 701 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 3: 60.690
    test 702 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 3: 69.134  FAILED, KNOWN, expected 69.133
    test 703 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 3: 36.521  FAILED, KNOWN, expected 36.520
    test 704 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 3: 6.801
    test 705 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 3: -20.652  FAILED, KNOWN, expected -20.651
    test 706 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 3: -3.040
    test 707 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 3: -1.329  FAILED, KNOWN, expected -1.328
    test 708 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 3: -2.171  FAILED, KNOWN, expected -2.172
    test 709 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 3: -17.411
    test 710 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 3: -16.426  FAILED, KNOWN, expected -16.425
    test 711 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 3: 24.699  FAILED, KNOWN, expected 24.698
    test 712 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 3: -18.328  FAILED, KNOWN, expected -18.329
    test 713 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 3: 43.802
    test 714 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 3: 18.716
    test 715 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 3: 44.468  FAILED, KNOWN, expected 44.469
    test 716 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 3: 49.943  FAILED, KNOWN, expected 49.944
    test 717 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 3: -35.878
    test 718 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 3: -40.777
    test 719 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 3: 26.559
    test 720 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 3: 49.362  FAILED, KNOWN, expected 49.361
    test 721 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 3: 21.106  FAILED, KNOWN, expected 21.107
    test 722 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 3: -7.203  FAILED, KNOWN, expected -7.202
    test 723 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 3: -17.167  FAILED, KNOWN, expected -17.168
    test 724 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 3: 18.359
    test 725 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 3: 52.117  FAILED, KNOWN, expected 52.118
    test 726 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 3: -38.950
    test 727 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 3: -9.935  FAILED, KNOWN, expected -9.934
    test 728 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 3: -2.879
    test 729 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 3: -5.025
    test 730 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 3: 24.296
    test 731 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 3: 25.131
    test 732 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 3: 40.720  FAILED, KNOWN, expected 40.721
    test 733 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 3: 22.387  FAILED, KNOWN, expected 22.388
    test 734 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 3: 22.485  FAILED, KNOWN, expected 22.486
    test 735 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 3: 14.942  FAILED, KNOWN, expected 14.943
    test 736 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 3: -47.387
    test 737 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 3: -18.404  FAILED, KNOWN, expected -18.403
    test 738 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 3: 10.185
    test 739 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 3: 5.670  FAILED, KNOWN, expected 5.671
    test 740 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 3: -24.577
    test 741 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 3: 43.288
    test 742 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 3: 13.747  FAILED, KNOWN, expected 13.748
    test 743 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 3: -5.342
    test 744 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 3: -25.579
    test 745 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 3: -9.849
    test 746 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 3: -10.490  FAILED, KNOWN, expected -10.491
    test 747 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 3: 0.243  FAILED, KNOWN, expected 0.244
    test 748 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 749 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 3: 57.401
    test 750 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 3: -17.889  FAILED, KNOWN, expected -17.890
    test 751 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 3: 46.423  FAILED, KNOWN, expected 46.421
    test 752 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 3: -14.475
    test 753 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 3: 11.118
    test 754 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 3: 42.291
    test 755 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 3: 22.327  FAILED, KNOWN, expected 22.326
    test 756 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 3: -33.098
    test 757 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 3: 9.431  FAILED, KNOWN, expected 9.430
    test 758 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 3: 6.032
    test 759 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 3: -44.330
    test 760 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 3: 21.775
    test 761 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 3: 29.243
    test 762 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 3: -40.677  FAILED, KNOWN, expected -40.676
    test 763 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 3: -31.352  FAILED, KNOWN, expected -31.353
    test 764 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 765 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 3: 60.628  FAILED, KNOWN, expected 60.629
    test 766 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 3: 6.617
    test 767 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 3: -31.887
    test 768 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 3: -26.536  FAILED, KNOWN, expected -26.535
    test 769 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 3: -29.631  FAILED, KNOWN, expected -29.630
    test 770 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 3: 22.274  FAILED, KNOWN, expected 22.275
    test 771 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 3: 17.095  FAILED, KNOWN, expected 17.094
    test 772 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 3: -20.940  FAILED, KNOWN, expected -20.941
    test 773 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 3: -42.740
    test 774 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 3: -21.651
    test 775 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 3: 25.240
    test 776 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 3: -8.758
    test 777 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 3: -19.606  FAILED, KNOWN, expected -19.607
    test 778 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 3: 26.258
    test 779 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 3: -3.823  FAILED, KNOWN, expected -3.824
    test 780 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 3: 18.195
    test 781 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 3: -17.724  FAILED, KNOWN, expected -17.725
    test 782 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 3: 14.512  FAILED, KNOWN, expected 14.513
    test 783 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 3: 16.808  FAILED, KNOWN, expected 16.809
    test 784 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 3: -8.025  FAILED, KNOWN, expected -8.026
    test 785 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 3: 9.689  FAILED, KNOWN, expected 9.688
    test 786 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 3: 6.218
    test 787 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 3: -2.725  FAILED, KNOWN, expected -2.724
    test 788 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 3: -42.566  FAILED, KNOWN, expected -42.565
    test 789 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 3: 38.342  FAILED, KNOWN, expected 38.341
    test 790 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 3: 33.888  FAILED, KNOWN, expected 33.889
    test 791 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 3: -37.381  FAILED, KNOWN, expected -37.380
    test 792 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 3: -1.857  FAILED, KNOWN, expected -1.858
    test 793 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 3: 34.196  FAILED, KNOWN, expected 34.195
    test 794 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 3: 12.767
    test 795 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 3: 15.612
    test 796 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 3: -11.063
    test 797 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 3: 27.386  FAILED, KNOWN, expected 27.387
    test 798 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 3: -23.817
    test 799 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 3: 18.713  FAILED, KNOWN, expected 18.712
    test 800 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 3: -7.343  FAILED, KNOWN, expected -7.344
    test 801 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 3: 29.997  FAILED, KNOWN, expected 29.998
    test 802 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 3: -61.869
    test 803 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 3: -24.938  FAILED, KNOWN, expected -24.937
    test 804 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 3: 38.557  FAILED, KNOWN, expected 38.556
    test 805 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 3: 19.671
    test 806 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 3: 2.273  FAILED, KNOWN, expected 2.272
    test 807 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 3: 24.863
    test 808 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 3: 21.636
    test 809 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 3: -33.850  FAILED, KNOWN, expected -33.851
    test 810 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 3: -5.299
    test 811 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 3: -6.789
    test 812 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 3: -35.030
    test 813 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 3: -15.338
    test 814 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 3: -79.356
    test 815 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 3: -16.649  FAILED, KNOWN, expected -16.650
    test 816 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 3: 36.359
    test 817 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 3: 3.614  FAILED, KNOWN, expected 3.615
    test 818 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 3: 23.946  FAILED, KNOWN, expected 23.947
    test 819 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 3: 51.494  FAILED, KNOWN, expected 51.495
    test 820 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 3: -30.909  FAILED, KNOWN, expected -30.910
    test 821 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 3: -52.131
    test 822 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 3: 37.046  FAILED, KNOWN, expected 37.045
    test 823 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 3: 64.181  FAILED, KNOWN, expected 64.180
    test 824 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 3: -62.475
    test 825 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 3: -8.454
    test 826 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 3: 40.834
    test 827 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 3: -60.455
    test 828 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 3: 9.728  FAILED, KNOWN, expected 9.727
    test 829 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 3: 32.141  FAILED, KNOWN, expected 32.142
    test 830 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 3: -6.221  FAILED, KNOWN, expected -6.220
    test 831 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 3: 32.488  FAILED, KNOWN, expected 32.489
    test 832 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 3: -24.692
    test 833 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 3: -38.749
    test 834 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 835 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 3: -13.454  FAILED, KNOWN, expected -13.455
    test 836 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 3: 16.627
    test 837 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 3: -22.221
    test 838 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 3: -4.836
    test 839 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 3: 19.571
    test 840 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 3: -9.227
    test 841 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 842 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 3: 24.829
    test 843 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 3: -21.706  FAILED, KNOWN, expected -21.705
    test 844 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 3: -17.054  FAILED, KNOWN, expected -17.053
    test 845 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 3: 11.715  FAILED, KNOWN, expected 11.716
    test 846 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 3: -19.529  FAILED, KNOWN, expected -19.530
    test 847 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 3: 45.929
    test 848 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 3: -8.283
    test 849 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 3: -8.467
    test 850 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 3: -1.829
    test 851 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 3: -16.505  FAILED, KNOWN, expected -16.506
    test 852 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 3: -35.384
    test 853 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 3: -38.962  FAILED, KNOWN, expected -38.963
    test 854 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 3: -6.956
    test 855 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 3: 51.006  FAILED, KNOWN, expected 51.005
    test 856 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 3: 1.193  FAILED, KNOWN, expected 1.192
    test 857 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 3: -15.038
    test 858 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 3: 17.791
    test 859 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 3: 44.653  FAILED, KNOWN, expected 44.652
    test 860 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 3: -17.972  FAILED, KNOWN, expected -17.971
    test 861 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 3: 11.630  FAILED, KNOWN, expected 11.631
    test 862 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 3: 7.394
    test 863 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 3: 7.932
    test 864 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 3: -60.594  FAILED, KNOWN, expected -60.593
    test 865 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 3: 4.384
    test 866 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 3: 1.296  FAILED, KNOWN, expected 1.297
    test 867 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 3: 30.852
    test 868 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 3: 2.705  FAILED, KNOWN, expected 2.704
    test 869 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 3: 21.264
    test 870 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 3: 5.443
    test 871 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 3: 9.998
    test 872 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 3: 22.428
    test 873 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 3: -23.155  FAILED, KNOWN, expected -23.154
    test 874 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 3: -17.662
    test 875 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 876 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 3: -61.220  FAILED, KNOWN, expected -61.221
    test 877 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 3: 20.355
    test 878 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 3: 13.147
    test 879 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 3: 41.073  FAILED, KNOWN, expected 41.072
    test 880 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 3: 42.982
    test 881 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 882 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 3: -20.662
    test 883 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 3: -8.438
    test 884 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 3: -8.711  FAILED, KNOWN, expected -8.712
    test 885 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 3: -12.653
    test 886 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 3: 17.166
    test 887 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 3: -19.873  FAILED, KNOWN, expected -19.874
    test 888 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 3: -31.124
    test 889 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 3: -17.306  FAILED, KNOWN, expected -17.307
    test 890 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 3: 23.435  FAILED, KNOWN, expected 23.434
    test 891 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 3: 4.508
    test 892 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 3: 11.550  FAILED, KNOWN, expected 11.549
    test 893 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 3: 5.749  FAILED, KNOWN, expected 5.748
    test 894 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 3: 28.788
    test 895 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.589
    test 896 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 897 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 898 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 899 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 900 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 901 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 902 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.067
    test 903 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 904 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001

    test 905 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 906 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 907 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 908 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 909 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 910 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 911 GeoidKarney('egm2008-1.pgm').dtype: 'ushort'
    test 912 GeoidKarney('egm2008-1.pgm').knots: 233301600
    test 913 GeoidKarney('egm2008-1.pgm').mean: -1.317
    test 914 GeoidKarney('egm2008-1.pgm').nBytes: None
    test 915 GeoidKarney('egm2008-1.pgm').scipy: None
    test 916 GeoidKarney('egm2008-1.pgm').smooth: None
    test 917 GeoidKarney('egm2008-1.pgm').stdev: 29.244
    test 918 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 919 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 920 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 921 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 922 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 923 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 924 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    210 tests skipped (420): no scipy
    test 925 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 2: 11.727  FAILED, KNOWN, expected 11.729
    test 926 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 2: 0.280  FAILED, KNOWN, expected 0.270
    test 927 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 2: 67.071  FAILED, KNOWN, expected 67.074
    test 928 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 2: 25.366  FAILED, KNOWN, expected 25.344
    test 929 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 2: -28.913  FAILED, KNOWN, expected -28.919
    test 930 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 2: 14.383  FAILED, KNOWN, expected 14.386
    test 931 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 2: 30.701  FAILED, KNOWN, expected 30.700
    test 932 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 2: 62.222  FAILED, KNOWN, expected 62.225
    test 933 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 2: 70.221  FAILED, KNOWN, expected 70.222
    test 934 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 2: 34.290  FAILED, KNOWN, expected 34.336
    test 935 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 2: 8.205  FAILED, KNOWN, expected 8.206
    test 936 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 2: -20.068  FAILED, KNOWN, expected -20.074
    test 937 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 2: -3.129
    test 938 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 2: -3.214  FAILED, KNOWN, expected -3.217
    test 939 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 2: -1.536  FAILED, KNOWN, expected -1.531
    test 940 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 2: -16.742
    test 941 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 2: -15.418  FAILED, KNOWN, expected -15.412
    test 942 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 2: 25.077  FAILED, KNOWN, expected 25.078
    test 943 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 2: -18.114  FAILED, KNOWN, expected -18.120
    test 944 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 2: 46.230  FAILED, KNOWN, expected 46.224
    test 945 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 2: 18.648  FAILED, KNOWN, expected 18.649
    test 946 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 2: 44.759  FAILED, KNOWN, expected 44.764
    test 947 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 2: 51.095  FAILED, KNOWN, expected 51.089
    test 948 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 2: -34.436  FAILED, KNOWN, expected -34.471
    test 949 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 2: -39.124
    test 950 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 2: 28.131  FAILED, KNOWN, expected 28.142
    test 951 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 2: 49.606  FAILED, KNOWN, expected 49.619
    test 952 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 2: 22.568  FAILED, KNOWN, expected 22.575
    test 953 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 2: -6.894  FAILED, KNOWN, expected -6.893
    test 954 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 2: -15.017  FAILED, KNOWN, expected -15.012
    test 955 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 2: 18.777  FAILED, KNOWN, expected 18.776
    test 956 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 2: 53.644  FAILED, KNOWN, expected 53.645
    test 957 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 2: -39.058  FAILED, KNOWN, expected -39.074
    test 958 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 2: -9.643  FAILED, KNOWN, expected -9.645
    test 959 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 2: -2.520  FAILED, KNOWN, expected -2.528
    test 960 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 2: -6.918  FAILED, KNOWN, expected -6.907
    test 961 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 2: 21.758  FAILED, KNOWN, expected 21.711
    test 962 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 2: 25.617  FAILED, KNOWN, expected 25.611
    test 963 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 2: 41.585  FAILED, KNOWN, expected 41.569
    test 964 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 2: 23.283  FAILED, KNOWN, expected 23.280
    test 965 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 2: 24.497  FAILED, KNOWN, expected 24.502
    test 966 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 2: 14.825  FAILED, KNOWN, expected 14.826
    test 967 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 2: -45.104
    test 968 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 2: -17.254  FAILED, KNOWN, expected -17.252
    test 969 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 2: 12.984  FAILED, KNOWN, expected 12.972
    test 970 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 2: 4.773  FAILED, KNOWN, expected 4.776
    test 971 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 2: -23.577
    test 972 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 2: 43.884  FAILED, KNOWN, expected 43.885
    test 973 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 2: 17.064  FAILED, KNOWN, expected 17.072
    test 974 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 2: -6.637  FAILED, KNOWN, expected -6.643
    test 975 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 2: -23.332  FAILED, KNOWN, expected -23.325
    test 976 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 2: -10.689  FAILED, KNOWN, expected -10.698
    test 977 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 2: -10.305  FAILED, KNOWN, expected -10.265
    test 978 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 2: 0.692  FAILED, KNOWN, expected 0.689
    test 979 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 2: -43.763  FAILED, KNOWN, expected -43.758
    test 980 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 2: 57.551  FAILED, KNOWN, expected 57.554
    test 981 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 2: -16.939  FAILED, KNOWN, expected -16.936
    test 982 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 2: 45.227  FAILED, KNOWN, expected 45.295
    test 983 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 2: -13.585  FAILED, KNOWN, expected -13.586
    test 984 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 2: 11.469  FAILED, KNOWN, expected 11.468
    test 985 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 2: 42.090  FAILED, KNOWN, expected 42.092
    test 986 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 2: 22.828  FAILED, KNOWN, expected 22.830
    test 987 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 2: -32.300  FAILED, KNOWN, expected -32.302
    test 988 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 2: 9.212  FAILED, KNOWN, expected 9.228
    test 989 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 2: 6.000  FAILED, KNOWN, expected 5.965
    test 990 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 2: -45.000  FAILED, KNOWN, expected -45.013
    test 991 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 2: 21.148  FAILED, KNOWN, expected 21.118
    test 992 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 2: 30.500  FAILED, KNOWN, expected 30.497
    test 993 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 2: -40.416  FAILED, KNOWN, expected -40.396
    test 994 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 2: -31.726  FAILED, KNOWN, expected -31.704
    test 995 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 2: -32.271  FAILED, KNOWN, expected -32.277
    test 996 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 2: 61.016  FAILED, KNOWN, expected 61.024
    test 997 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 2: 5.017  FAILED, KNOWN, expected 4.994
    test 998 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 2: -30.240  FAILED, KNOWN, expected -30.237
    test 999 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 2: -26.007  FAILED, KNOWN, expected -26.006
    test 1000 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 2: -29.280  FAILED, KNOWN, expected -29.283
    test 1001 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 2: 22.400  FAILED, KNOWN, expected 22.394
    test 1002 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 2: 17.549  FAILED, KNOWN, expected 17.550
    test 1003 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 2: -20.621  FAILED, KNOWN, expected -20.622
    test 1004 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 2: -41.463  FAILED, KNOWN, expected -41.484
    test 1005 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 2: -20.969  FAILED, KNOWN, expected -20.968
    test 1006 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 2: 25.561  FAILED, KNOWN, expected 25.568
    test 1007 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 2: -8.574  FAILED, KNOWN, expected -8.581
    test 1008 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 2: -18.329
    test 1009 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 2: 25.003  FAILED, KNOWN, expected 25.001
    test 1010 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 2: -2.945  FAILED, KNOWN, expected -2.940
    test 1011 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 2: 18.220  FAILED, KNOWN, expected 18.228
    test 1012 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 2: -16.511  FAILED, KNOWN, expected -16.507
    test 1013 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 2: 14.277  FAILED, KNOWN, expected 14.275
    test 1014 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 2: 16.866  FAILED, KNOWN, expected 16.852
    test 1015 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 2: -6.870  FAILED, KNOWN, expected -6.872
    test 1016 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 2: 8.987  FAILED, KNOWN, expected 9.006
    test 1017 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 2: 6.277  FAILED, KNOWN, expected 6.296
    test 1018 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 2: -1.483  FAILED, KNOWN, expected -1.481
    test 1019 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 2: -40.929  FAILED, KNOWN, expected -40.915
    test 1020 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 2: 37.481  FAILED, KNOWN, expected 37.495
    test 1021 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 2: 32.222  FAILED, KNOWN, expected 32.258
    test 1022 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 2: -41.529
    test 1023 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 2: -1.377
    test 1024 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 2: 35.263  FAILED, KNOWN, expected 35.280
    test 1025 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 2: 12.958
    test 1026 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 2: 18.423  FAILED, KNOWN, expected 18.307
    test 1027 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 2: -10.400
    test 1028 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 2: 28.649  FAILED, KNOWN, expected 28.638
    test 1029 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 2: -24.060  FAILED, KNOWN, expected -24.059
    test 1030 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 2: 18.800  FAILED, KNOWN, expected 18.806
    test 1031 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 2: -6.808  FAILED, KNOWN, expected -6.820
    test 1032 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 2: 31.485  FAILED, KNOWN, expected 31.486
    test 1033 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 2: -62.021  FAILED, KNOWN, expected -62.024
    test 1034 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 2: -24.246  FAILED, KNOWN, expected -24.248
    test 1035 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 2: 43.246  FAILED, KNOWN, expected 43.255
    test 1036 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 2: 18.496  FAILED, KNOWN, expected 18.498
    test 1037 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 2: 4.100  FAILED, KNOWN, expected 4.067
    test 1038 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 2: 25.456  FAILED, KNOWN, expected 25.454
    test 1039 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 2: 26.619  FAILED, KNOWN, expected 26.657
    test 1040 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 2: -32.003  FAILED, KNOWN, expected -31.966
    test 1041 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 2: -4.422  FAILED, KNOWN, expected -4.415
    test 1042 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 2: -6.717  FAILED, KNOWN, expected -6.741
    test 1043 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 2: -34.915  FAILED, KNOWN, expected -34.900
    test 1044 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 2: -14.214  FAILED, KNOWN, expected -14.223
    test 1045 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 2: -79.313  FAILED, KNOWN, expected -79.317
    test 1046 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 2: -16.163
    test 1047 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 2: 36.296  FAILED, KNOWN, expected 36.287
    test 1048 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 2: 4.066  FAILED, KNOWN, expected 4.068
    test 1049 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 2: 24.401  FAILED, KNOWN, expected 24.407
    test 1050 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 2: 53.051  FAILED, KNOWN, expected 53.054
    test 1051 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 2: -30.616  FAILED, KNOWN, expected -30.622
    test 1052 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 2: -53.544  FAILED, KNOWN, expected -53.540
    test 1053 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 2: 36.274  FAILED, KNOWN, expected 36.262
    test 1054 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 2: 64.339  FAILED, KNOWN, expected 64.369
    test 1055 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 2: -61.320  FAILED, KNOWN, expected -61.300
    test 1056 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 2: -7.996  FAILED, KNOWN, expected -7.999
    test 1057 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 2: 41.489  FAILED, KNOWN, expected 41.477
    test 1058 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 2: -59.881  FAILED, KNOWN, expected -59.876
    test 1059 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 2: 8.422  FAILED, KNOWN, expected 8.404
    test 1060 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 2: 39.200  FAILED, KNOWN, expected 39.152
    test 1061 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 2: -7.068  FAILED, KNOWN, expected -7.076
    test 1062 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 2: 33.179  FAILED, KNOWN, expected 33.178
    test 1063 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 2: -23.801  FAILED, KNOWN, expected -23.832
    test 1064 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 2: -38.175  FAILED, KNOWN, expected -38.206
    test 1065 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 2: -22.171  FAILED, KNOWN, expected -22.142
    test 1066 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 2: -13.746  FAILED, KNOWN, expected -13.765
    test 1067 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 2: 16.909  FAILED, KNOWN, expected 16.898
    test 1068 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 2: -22.479  FAILED, KNOWN, expected -22.474
    test 1069 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 2: -4.710  FAILED, KNOWN, expected -4.718
    test 1070 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 2: 16.680  FAILED, KNOWN, expected 16.635
    test 1071 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 2: -9.012
    test 1072 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 2: -23.556  FAILED, KNOWN, expected -23.543
    test 1073 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 2: 26.240  FAILED, KNOWN, expected 26.236
    test 1074 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 2: -21.963  FAILED, KNOWN, expected -21.953
    test 1075 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 2: -17.959
    test 1076 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 2: 9.072  FAILED, KNOWN, expected 9.078
    test 1077 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 2: -19.160  FAILED, KNOWN, expected -19.158
    test 1078 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 2: 46.776
    test 1079 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 2: -8.053  FAILED, KNOWN, expected -8.055
    test 1080 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 2: -7.681  FAILED, KNOWN, expected -7.696
    test 1081 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 2: -1.052  FAILED, KNOWN, expected -1.049
    test 1082 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 2: -16.081
    test 1083 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 2: -35.429  FAILED, KNOWN, expected -35.427
    test 1084 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 2: -38.648
    test 1085 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 2: -5.524  FAILED, KNOWN, expected -5.519
    test 1086 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 2: 53.448  FAILED, KNOWN, expected 53.431
    test 1087 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 2: 1.977  FAILED, KNOWN, expected 1.979
    test 1088 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 2: -13.131  FAILED, KNOWN, expected -13.197
    test 1089 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 2: 18.953  FAILED, KNOWN, expected 18.945
    test 1090 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 2: 45.180  FAILED, KNOWN, expected 45.187
    test 1091 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 2: -17.155  FAILED, KNOWN, expected -17.145
    test 1092 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 2: 13.136  FAILED, KNOWN, expected 13.146
    test 1093 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 2: 4.933
    test 1094 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 2: 12.313  FAILED, KNOWN, expected 12.326
    test 1095 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 2: -60.029  FAILED, KNOWN, expected -60.030
    test 1096 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 2: 3.034  FAILED, KNOWN, expected 3.110
    test 1097 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 2: -2.741
    test 1098 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 2: 32.108  FAILED, KNOWN, expected 32.085
    test 1099 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 2: 2.069  FAILED, KNOWN, expected 2.060
    test 1100 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 2: 22.901  FAILED, KNOWN, expected 22.916
    test 1101 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 2: 5.526  FAILED, KNOWN, expected 5.519
    test 1102 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 2: 11.019  FAILED, KNOWN, expected 11.020
    test 1103 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 2: 22.181  FAILED, KNOWN, expected 22.171
    test 1104 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 2: -22.957  FAILED, KNOWN, expected -22.944
    test 1105 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 2: -17.583  FAILED, KNOWN, expected -17.580
    test 1106 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 2: -35.728  FAILED, KNOWN, expected -35.738
    test 1107 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 2: -61.036  FAILED, KNOWN, expected -61.040
    test 1108 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 2: 20.897  FAILED, KNOWN, expected 20.907
    test 1109 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 2: 13.865  FAILED, KNOWN, expected 13.874
    test 1110 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 2: 40.920  FAILED, KNOWN, expected 40.929
    test 1111 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 2: 43.196  FAILED, KNOWN, expected 43.191
    test 1112 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 2: -22.016  FAILED, KNOWN, expected -22.006
    test 1113 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 2: -20.378  FAILED, KNOWN, expected -20.375
    test 1114 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 2: -7.856  FAILED, KNOWN, expected -7.852
    test 1115 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 2: -8.680  FAILED, KNOWN, expected -8.674
    test 1116 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 2: -14.089  FAILED, KNOWN, expected -14.117
    test 1117 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 2: 17.249  FAILED, KNOWN, expected 17.251
    test 1118 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 2: -19.434  FAILED, KNOWN, expected -19.436
    test 1119 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 2: -31.333  FAILED, KNOWN, expected -31.330
    test 1120 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 2: -17.088  FAILED, KNOWN, expected -17.090
    test 1121 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 2: 24.177  FAILED, KNOWN, expected 24.184
    test 1122 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 2: 6.146  FAILED, KNOWN, expected 6.142
    test 1123 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 2: 11.771  FAILED, KNOWN, expected 11.693
    test 1124 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 2: 6.830  FAILED, KNOWN, expected 6.840
    test 1125 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 2: 31.293  FAILED, KNOWN, expected 31.298
    test 1126 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 2: -31.953  FAILED, KNOWN, expected -31.952
    test 1127 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 2: -14.946
    test 1128 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 2: -17.031  FAILED, KNOWN, expected -17.032
    test 1129 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 2: -37.962
    test 1130 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 2: -26.493  FAILED, KNOWN, expected -26.492
    test 1131 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 2: -39.543
    test 1132 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 2: -22.557  FAILED, KNOWN, expected -22.556
    test 1133 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 2: -28.710
    test 1134 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 2: -46.590

    test 1135 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.116

    test 1136 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1137 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1138 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1139 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1140 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1141 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1142 GeoidKarney('egm84-15.pgm').dtype: 'ushort'
    test 1143 GeoidKarney('egm84-15.pgm').knots: 1038240
    test 1144 GeoidKarney('egm84-15.pgm').mean: -1.317
    test 1145 GeoidKarney('egm84-15.pgm').nBytes: None
    test 1146 GeoidKarney('egm84-15.pgm').scipy: None
    test 1147 GeoidKarney('egm84-15.pgm').smooth: None
    test 1148 GeoidKarney('egm84-15.pgm').stdev: 29.244
    test 1149 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1150 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1151 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1152 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1153 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1154 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1155 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1156 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 3: 11.729
    test 1157 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 3: 0.271  FAILED, KNOWN, expected 0.270
    test 1158 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 3: 67.074
    test 1159 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 3: 25.345  FAILED, KNOWN, expected 25.344
    test 1160 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 3: -28.919
    test 1161 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 3: 14.386
    test 1162 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 3: 30.699  FAILED, KNOWN, expected 30.700
    test 1163 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 3: 62.226  FAILED, KNOWN, expected 62.225
    test 1164 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 3: 70.222
    test 1165 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 3: 34.334  FAILED, KNOWN, expected 34.336
    test 1166 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 3: 8.206
    test 1167 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 3: -20.073  FAILED, KNOWN, expected -20.074
    test 1168 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 3: -3.129
    test 1169 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 3: -3.216  FAILED, KNOWN, expected -3.217
    test 1170 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 3: -1.532  FAILED, KNOWN, expected -1.531
    test 1171 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 3: -16.741  FAILED, KNOWN, expected -16.742
    test 1172 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 3: -15.413  FAILED, KNOWN, expected -15.412
    test 1173 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 3: 25.079  FAILED, KNOWN, expected 25.078
    test 1174 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 3: -18.120
    test 1175 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 3: 46.225  FAILED, KNOWN, expected 46.224
    test 1176 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 3: 18.649
    test 1177 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 3: 44.763  FAILED, KNOWN, expected 44.764
    test 1178 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 3: 51.090  FAILED, KNOWN, expected 51.089
    test 1179 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 3: -34.470  FAILED, KNOWN, expected -34.471
    test 1180 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 3: -39.125  FAILED, KNOWN, expected -39.124
    test 1181 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 3: 28.142
    test 1182 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 3: 49.620  FAILED, KNOWN, expected 49.619
    test 1183 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 3: 22.576  FAILED, KNOWN, expected 22.575
    test 1184 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 3: -6.893
    test 1185 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 3: -15.013  FAILED, KNOWN, expected -15.012
    test 1186 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 3: 18.777  FAILED, KNOWN, expected 18.776
    test 1187 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 3: 53.645
    test 1188 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 3: -39.073  FAILED, KNOWN, expected -39.074
    test 1189 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 3: -9.645
    test 1190 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 3: -2.527  FAILED, KNOWN, expected -2.528
    test 1191 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 3: -6.907
    test 1192 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 3: 21.715  FAILED, KNOWN, expected 21.711
    test 1193 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 3: 25.612  FAILED, KNOWN, expected 25.611
    test 1194 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 3: 41.570  FAILED, KNOWN, expected 41.569
    test 1195 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 3: 23.280
    test 1196 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 3: 24.502
    test 1197 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 3: 14.825  FAILED, KNOWN, expected 14.826
    test 1198 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 3: -45.104
    test 1199 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 3: -17.252
    test 1200 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 3: 12.972
    test 1201 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 3: 4.777  FAILED, KNOWN, expected 4.776
    test 1202 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 3: -23.578  FAILED, KNOWN, expected -23.577
    test 1203 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 3: 43.886  FAILED, KNOWN, expected 43.885
    test 1204 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 3: 17.071  FAILED, KNOWN, expected 17.072
    test 1205 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 3: -6.643
    test 1206 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 3: -23.326  FAILED, KNOWN, expected -23.325
    test 1207 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 3: -10.699  FAILED, KNOWN, expected -10.698
    test 1208 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 3: -10.268  FAILED, KNOWN, expected -10.265
    test 1209 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 3: 0.690  FAILED, KNOWN, expected 0.689
    test 1210 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1211 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 3: 57.553  FAILED, KNOWN, expected 57.554
    test 1212 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 3: -16.937  FAILED, KNOWN, expected -16.936
    test 1213 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 3: 45.291  FAILED, KNOWN, expected 45.295
    test 1214 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 3: -13.585  FAILED, KNOWN, expected -13.586
    test 1215 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 3: 11.467  FAILED, KNOWN, expected 11.468
    test 1216 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 3: 42.092
    test 1217 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 3: 22.830
    test 1218 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 3: -32.302
    test 1219 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 3: 9.228
    test 1220 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 3: 5.966  FAILED, KNOWN, expected 5.965
    test 1221 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 3: -45.012  FAILED, KNOWN, expected -45.013
    test 1222 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 3: 21.118
    test 1223 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 3: 30.497
    test 1224 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 3: -40.397  FAILED, KNOWN, expected -40.396
    test 1225 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 3: -31.701  FAILED, KNOWN, expected -31.704
    test 1226 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.276  FAILED, KNOWN, expected -32.277
    test 1227 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 3: 61.024
    test 1228 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 3: 4.996  FAILED, KNOWN, expected 4.994
    test 1229 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 3: -30.238  FAILED, KNOWN, expected -30.237
    test 1230 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 3: -26.006
    test 1231 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 3: -29.283
    test 1232 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 3: 22.393  FAILED, KNOWN, expected 22.394
    test 1233 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 3: 17.550
    test 1234 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 3: -20.623  FAILED, KNOWN, expected -20.622
    test 1235 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 3: -41.482  FAILED, KNOWN, expected -41.484
    test 1236 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 3: -20.968
    test 1237 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 3: 25.567  FAILED, KNOWN, expected 25.568
    test 1238 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 3: -8.581
    test 1239 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 3: -18.330  FAILED, KNOWN, expected -18.329
    test 1240 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 3: 25.000  FAILED, KNOWN, expected 25.001
    test 1241 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 3: -2.941  FAILED, KNOWN, expected -2.940
    test 1242 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 3: 18.229  FAILED, KNOWN, expected 18.228
    test 1243 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 3: -16.507
    test 1244 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 3: 14.275
    test 1245 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 3: 16.853  FAILED, KNOWN, expected 16.852
    test 1246 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 3: -6.872
    test 1247 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 3: 9.005  FAILED, KNOWN, expected 9.006
    test 1248 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 3: 6.294  FAILED, KNOWN, expected 6.296
    test 1249 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 3: -1.482  FAILED, KNOWN, expected -1.481
    test 1250 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 3: -40.916  FAILED, KNOWN, expected -40.915
    test 1251 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 3: 37.495
    test 1252 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 3: 32.255  FAILED, KNOWN, expected 32.258
    test 1253 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 3: -41.528  FAILED, KNOWN, expected -41.529
    test 1254 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 3: -1.376  FAILED, KNOWN, expected -1.377
    test 1255 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 3: 35.279  FAILED, KNOWN, expected 35.280
    test 1256 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 3: 12.958
    test 1257 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 3: 18.313  FAILED, KNOWN, expected 18.307
    test 1258 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 3: -10.400
    test 1259 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 3: 28.640  FAILED, KNOWN, expected 28.638
    test 1260 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 3: -24.059
    test 1261 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 3: 18.806
    test 1262 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 3: -6.819  FAILED, KNOWN, expected -6.820
    test 1263 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 3: 31.486
    test 1264 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 3: -62.024
    test 1265 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 3: -24.247  FAILED, KNOWN, expected -24.248
    test 1266 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 3: 43.255
    test 1267 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 3: 18.499  FAILED, KNOWN, expected 18.498
    test 1268 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 3: 4.069  FAILED, KNOWN, expected 4.067
    test 1269 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 3: 25.455  FAILED, KNOWN, expected 25.454
    test 1270 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 3: 26.655  FAILED, KNOWN, expected 26.657
    test 1271 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 3: -31.967  FAILED, KNOWN, expected -31.966
    test 1272 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 3: -4.416  FAILED, KNOWN, expected -4.415
    test 1273 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 3: -6.741
    test 1274 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 3: -34.902  FAILED, KNOWN, expected -34.900
    test 1275 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 3: -14.223
    test 1276 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 3: -79.317
    test 1277 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 3: -16.162  FAILED, KNOWN, expected -16.163
    test 1278 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 3: 36.288  FAILED, KNOWN, expected 36.287
    test 1279 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 3: 4.067  FAILED, KNOWN, expected 4.068
    test 1280 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 3: 24.406  FAILED, KNOWN, expected 24.407
    test 1281 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 3: 53.053  FAILED, KNOWN, expected 53.054
    test 1282 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 3: -30.621  FAILED, KNOWN, expected -30.622
    test 1283 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 3: -53.540
    test 1284 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 3: 36.262
    test 1285 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 3: 64.367  FAILED, KNOWN, expected 64.369
    test 1286 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 3: -61.301  FAILED, KNOWN, expected -61.300
    test 1287 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 3: -8.000  FAILED, KNOWN, expected -7.999
    test 1288 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 3: 41.479  FAILED, KNOWN, expected 41.477
    test 1289 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 3: -59.875  FAILED, KNOWN, expected -59.876
    test 1290 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 3: 8.404
    test 1291 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 3: 39.154  FAILED, KNOWN, expected 39.152
    test 1292 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 3: -7.076
    test 1293 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 3: 33.179  FAILED, KNOWN, expected 33.178
    test 1294 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 3: -23.832
    test 1295 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 3: -38.206
    test 1296 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.144  FAILED, KNOWN, expected -22.142
    test 1297 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 3: -13.763  FAILED, KNOWN, expected -13.765
    test 1298 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 3: 16.899  FAILED, KNOWN, expected 16.898
    test 1299 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 3: -22.475  FAILED, KNOWN, expected -22.474
    test 1300 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 3: -4.717  FAILED, KNOWN, expected -4.718
    test 1301 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 3: 16.635
    test 1302 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 3: -9.011  FAILED, KNOWN, expected -9.012
    test 1303 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 1304 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 3: 26.236
    test 1305 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 3: -21.955  FAILED, KNOWN, expected -21.953
    test 1306 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 3: -17.959
    test 1307 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 3: 9.078
    test 1308 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 3: -19.157  FAILED, KNOWN, expected -19.158
    test 1309 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 3: 46.776
    test 1310 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 3: -8.055
    test 1311 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 3: -7.695  FAILED, KNOWN, expected -7.696
    test 1312 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 3: -1.048  FAILED, KNOWN, expected -1.049
    test 1313 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 3: -16.082  FAILED, KNOWN, expected -16.081
    test 1314 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 3: -35.426  FAILED, KNOWN, expected -35.427
    test 1315 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 3: -38.648
    test 1316 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 3: -5.519
    test 1317 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 3: 53.430  FAILED, KNOWN, expected 53.431
    test 1318 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 3: 1.978  FAILED, KNOWN, expected 1.979
    test 1319 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 3: -13.194  FAILED, KNOWN, expected -13.197
    test 1320 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 3: 18.945
    test 1321 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 3: 45.185  FAILED, KNOWN, expected 45.187
    test 1322 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 3: -17.146  FAILED, KNOWN, expected -17.145
    test 1323 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 3: 13.145  FAILED, KNOWN, expected 13.146
    test 1324 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 3: 4.932  FAILED, KNOWN, expected 4.933
    test 1325 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 3: 12.327  FAILED, KNOWN, expected 12.326
    test 1326 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 3: -60.029  FAILED, KNOWN, expected -60.030
    test 1327 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 3: 3.107  FAILED, KNOWN, expected 3.110
    test 1328 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 3: -2.741
    test 1329 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 3: 32.086  FAILED, KNOWN, expected 32.085
    test 1330 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 3: 2.060
    test 1331 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 3: 22.916
    test 1332 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 3: 5.519
    test 1333 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 3: 11.021  FAILED, KNOWN, expected 11.020
    test 1334 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 3: 22.171
    test 1335 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 3: -22.945  FAILED, KNOWN, expected -22.944
    test 1336 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 3: -17.579  FAILED, KNOWN, expected -17.580
    test 1337 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 1338 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 3: -61.040
    test 1339 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 3: 20.906  FAILED, KNOWN, expected 20.907
    test 1340 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 3: 13.874
    test 1341 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 3: 40.928  FAILED, KNOWN, expected 40.929
    test 1342 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 3: 43.191
    test 1343 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.006
    test 1344 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 3: -20.375
    test 1345 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 3: -7.851  FAILED, KNOWN, expected -7.852
    test 1346 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 3: -8.675  FAILED, KNOWN, expected -8.674
    test 1347 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 3: -14.116  FAILED, KNOWN, expected -14.117
    test 1348 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 3: 17.252  FAILED, KNOWN, expected 17.251
    test 1349 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 3: -19.435  FAILED, KNOWN, expected -19.436
    test 1350 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 3: -31.331  FAILED, KNOWN, expected -31.330
    test 1351 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 3: -17.091  FAILED, KNOWN, expected -17.090
    test 1352 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 3: 24.184
    test 1353 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 3: 6.142
    test 1354 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 3: 11.693
    test 1355 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 3: 6.839  FAILED, KNOWN, expected 6.840
    test 1356 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 3: 31.298
    test 1357 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.952
    test 1358 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 1359 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.032
    test 1360 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 1361 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.492
    test 1362 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 1363 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.556
    test 1364 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 1365 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 1366 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.005

    test 1367 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1368 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1369 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1370 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1371 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1372 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1373 GeoidKarney('egm84-15.pgm').dtype: 'ushort'
    test 1374 GeoidKarney('egm84-15.pgm').knots: 1038240
    test 1375 GeoidKarney('egm84-15.pgm').mean: -1.317
    test 1376 GeoidKarney('egm84-15.pgm').nBytes: None
    test 1377 GeoidKarney('egm84-15.pgm').scipy: None
    test 1378 GeoidKarney('egm84-15.pgm').smooth: None
    test 1379 GeoidKarney('egm84-15.pgm').stdev: 29.244
    test 1380 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1381 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1382 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1383 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1384 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1385 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1386 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    210 tests skipped (630): no scipy
    9 tests skipped (639): no scipy

    778 of 1386 testGeoids.py tests (56.1%) FAILED, ALL KNOWN, 639 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 1.967 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testGreatCircle.py

    testing testGreatCircle.py 20.09.09

    testGreatCircle(pygeodesy.sphericalNvector, 20.10.02)
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 6 DistanceSameLocations: 0.0
    test 7 DistanceEqualLocations: 0.0
    test 8 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 9 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 10 InitialBearingEiffelToVersailles: 245.13460297
    test 11 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 12 InitialBearingVersaillesToEiffel: 65.003253951
    test 13 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 14 FinalBearingEiffelToVersailles: 245.00325395
    test 15 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 16 FinalBearingVersaillesToEiffel: 65.134602969
    test 17 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 18 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 19 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 20 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 21 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 22 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 23 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 24 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 25 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 26 Intersection: 48.83569095°N, 002.221252031°E
    test 27 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 28 CrossTrackDistance200m+90°: 200.0
    test 29 CrossTrackDistance200m+270°: -200.0
    test 30 CrossTrackDistanceCloseToZero: 0.0000000

    testGreatCircle(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 31 InitialBearingSameLocations: 0.0
    test 32 InitialBearingEqualLocations: 0.0
    test 33 FinalBearingSameLocations: 180.0
    test 34 FinalBearingEqualLocations: 180.0
    test 35 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 36 DistanceSameLocations: 0.0
    test 37 DistanceEqualLocations: 0.0
    test 38 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 39 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 40 InitialBearingEiffelToVersailles: 245.13460297
    test 41 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 42 InitialBearingVersaillesToEiffel: 65.003253951
    test 43 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 44 FinalBearingEiffelToVersailles: 245.00325395
    test 45 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 46 FinalBearingVersaillesToEiffel: 65.134602969
    test 47 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 48 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 49 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 50 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 51 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 52 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 53 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 54 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 55 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974331
    test 56 Intersection: 48.83569095°N, 002.221252031°E
    test 57 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 58 CrossTrackDistance200m+90°: 200.0
    test 59 CrossTrackDistance200m+270°: -200.0
    test 60 CrossTrackDistanceCloseToZero: 0.0000000

    10 of 60 testGreatCircle.py tests (16.7%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 13.268 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testHausdorff.py

    testing testHausdorff.py 20.10.03
    test 1 randomrange[0]: ()
    test 2 randomrange[1]: (0,)
    test 3 randomrange[2]: (1, 0)
    test 4 randomrange[8]: (0, 7, 5, 3, 2, 6, 1, 4)
    test 5 randomrange[32]: (18, 3, 9, 29, 22, 11, 30, 26, 0, 23, 31, 16, 13, 6, 7, 12, 8, 24, 27, 20, 5, 21, 10, 1, 19, 14, 4, 17, 25, 15, 2, 28)
    test 6 randomrange[128]: (109, 64, 14, 31, 88, 22, 32, 62, 73, 35, 60, 17, 76, 25, 68, 82, 91, 118, 34, 18, 41, 74, 106, 28, 36, 51, 26, 98, 16, 105, 83, 20, 97, 9, 114, 56, 1, 80, 8, 94, 110, 11, 39, 45, 112, 77, 72, 93, 79, 48, 69, 57, 102, 84, 124, 66, 107, 99, 117, 96, 100, 49, 123, 71, 63, 13, 127, 3, 121, 103, 61, 10, 58, 81, 87, 116, 113, 95, 59, 126, 86, 6, 33, 19, 65, 92, 12, 115, 0, 29, 46, 104, 54, 90, 44, 52, 89, 15, 101, 55, 47, 21, 37, 75, 111, 85, 24, 42, 70, 7, 122, 23, 53, 50, 27, 2, 43, 125, 67, 108, 38, 4, 120, 119, 30, 78, 5, 40)
    test 7 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, 18.45556)
    test 8 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, 16.05)
    test 9 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, 18.45556)
    test 10 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, 16.05)
    test 11 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, None)
    test 12 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, None)
    test 13 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, None)
    test 14 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, None)
    test 15 copy(HausdorffDegrees_): (<class '__main__.HausdorffDegrees_'>, True)
    test 16 HausdorffDegrees_.copy(): (<class '__main__.HausdorffDegrees_'>, True)
    test 17 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, 0.32211)
    test 18 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, 0.28013)
    test 19 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, 0.32211)
    test 20 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, 0.28013)
    test 21 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, None)
    test 22 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, None)
    test 23 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, None)
    test 24 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, None)
    test 25 copy(HausdorffRadians_): (<class '__main__.HausdorffRadians_'>, True)
    test 26 HausdorffRadians_.copy(): (<class '__main__.HausdorffRadians_'>, True)
    test 27 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 28 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 29 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 30 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 31 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 32 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 33 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 34 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 35 copy(HausdorffCosineAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 36 HausdorffCosineAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 37 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 38 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 39 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 40 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 41 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 42 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 43 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 44 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 45 copy(HausdorffCosineForsytheAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 46 HausdorffCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 47 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, 0.19776)
    test 48 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, 0.176)
    test 49 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, 0.19776)
    test 50 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, 0.176)
    test 51 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, None)
    test 52 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, None)
    test 53 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, None)
    test 54 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, None)
    test 55 copy(HausdorffCosineLaw): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 56 HausdorffCosineLaw.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 57 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, 0.06075)
    test 58 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, 0.04918)
    test 59 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, 0.06075)
    test 60 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, 0.04918)
    test 61 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, None)
    test 62 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, None)
    test 63 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, None)
    test 64 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, None)
    test 65 copy(HausdorffEquirectangular): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 66 HausdorffEquirectangular.copy(): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 67 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, 0.21327)
    test 68 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, 0.19061)
    test 69 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, 0.21327)
    test 70 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, 0.19061)
    test 71 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, None)
    test 72 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, None)
    test 73 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, None)
    test 74 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, None)
    test 75 copy(HausdorffEuclidean): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 76 HausdorffEuclidean.copy(): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 77 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 78 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 79 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 80 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 81 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, None)
    test 82 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, None)
    test 83 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, None)
    test 84 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, None)
    test 85 copy(HausdorffFlatLocal): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 86 HausdorffFlatLocal.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 87 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, 0.24569)
    test 88 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, 0.21335)
    test 89 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, 0.24569)
    test 90 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, 0.21335)
    test 91 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, None)
    test 92 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, None)
    test 93 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, None)
    test 94 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, None)
    test 95 copy(HausdorffFlatPolar): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 96 HausdorffFlatPolar.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 97 HausdorffHaversine (radians): (0.56202, 49, 29, 90, 0.19776)
    test 98 HausdorffHaversine (radians): (0.56202, 49, 29, 150, 0.176)
    test 99 HausdorffHaversine (radians): (0.56202, 49, 29, 90, 0.19776)
    test 100 HausdorffHaversine (radians): (0.56202, 49, 29, 150, 0.176)
    test 101 HausdorffHaversine (radians): (0.56202, 49, 29, 90, None)
    test 102 HausdorffHaversine (radians): (0.56202, 49, 29, 150, None)
    test 103 HausdorffHaversine (radians): (0.56202, 49, 29, 90, None)
    test 104 HausdorffHaversine (radians): (0.56202, 49, 29, 150, None)
    test 105 copy(HausdorffHaversine): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 106 HausdorffHaversine.copy(): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 107 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 108 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 109 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 110 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 111 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, None)
    test 112 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, None)
    test 113 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, None)
    test 114 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, None)
    test 115 copy(HausdorffHubeny): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 116 HausdorffHubeny.copy(): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 117 HausdorffThomas (radians): (0.56263, 49, 29, 90, 0.19764)
    test 118 HausdorffThomas (radians): (0.56263, 49, 29, 150, 0.17591)
    test 119 HausdorffThomas (radians): (0.56263, 49, 29, 90, 0.19764)
    test 120 HausdorffThomas (radians): (0.56263, 49, 29, 150, 0.17591)
    test 121 HausdorffThomas (radians): (0.56263, 49, 29, 90, None)
    test 122 HausdorffThomas (radians): (0.56263, 49, 29, 150, None)
    test 123 HausdorffThomas (radians): (0.56263, 49, 29, 90, None)
    test 124 HausdorffThomas (radians): (0.56263, 49, 29, 150, None)
    test 125 copy(HausdorffThomas): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 126 HausdorffThomas.copy(): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 127 HausdorffVincentys (radians): (0.56202, 49, 29, 90, 0.19776)
    test 128 HausdorffVincentys (radians): (0.56202, 49, 29, 150, 0.176)
    test 129 HausdorffVincentys (radians): (0.56202, 49, 29, 90, 0.19776)
    test 130 HausdorffVincentys (radians): (0.56202, 49, 29, 150, 0.176)
    test 131 HausdorffVincentys (radians): (0.56202, 49, 29, 90, None)
    test 132 HausdorffVincentys (radians): (0.56202, 49, 29, 150, None)
    test 133 HausdorffVincentys (radians): (0.56202, 49, 29, 90, None)
    test 134 HausdorffVincentys (radians): (0.56202, 49, 29, 150, None)
    test 135 copy(HausdorffVincentys): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 136 HausdorffVincentys.copy(): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 137 hausdorff_: (50.5, 61, 7, 90, 18.45556)
    test 138 hausdorff_: (50.5, 61, 7, 150, 16.05)
    test 139 hausdorff_: (50.5, 61, 7, 90, 18.45556)
    test 140 hausdorff_: (50.5, 61, 7, 150, 16.05)
    test 141 hausdorff_: (50.5, 61, 7, 90, None)
    test 142 hausdorff_: (50.5, 61, 7, 150, None)
    test 143 hausdorff_: (50.5, 61, 7, 90, None)
    test 144 hausdorff_: (50.5, 61, 7, 150, None)

    all 144 testHausdorff.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 13.156 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testHeights.py

    testing testHeights.py 20.10.03
    test 1 copy(HeightIDW): (<class 'pygeodesy.deprecated.HeightIDW'>, True)
    test 2 HeightIDW.copy(): (<class 'pygeodesy.deprecated.HeightIDW'>, True)
    test 3 HeightIDW(adjust=True): 6.142945781
    test 4 HeightIDW(float): <type 'float'>
    test 5 HeightIDW(latlon): True
    test 6 HeightIDW(adjust=True): 5.0
    test 7 HeightIDW(float): <type 'float'>
    test 8 HeightIDW(latlon): True
    test 9 HeightIDW(adjust=True): (6.142945781, 5.0,)
    test 10 HeightIDW(tuple): <type 'tuple'>
    test 11 HeightIDW(tuple-float): <type 'float'>
    test 12 HeightIDW(tuple-float): <type 'float'>
    test 13 HeightIDW(adjust=True): [6.142945781, 5.0]
    test 14 HeightIDW(list: <type 'list'>
    test 15 HeightIDW(list-float): <type 'float'>
    test 16 HeightIDW(list-float): <type 'float'>
    test 17 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 18 HeightIDWadjust: True
    test 19 HeightIDWkmin: 2
    test 20 HeightIDWwrap: None
    test 21 HeightIDWbeta: 2
    test 22 HeightIDWadjust: True
    test 23 HeightIDWbeta: 2
    test 24 HeightIDWkmin: 2
    test 25 HeightIDWwrap: None
    test 26 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 27 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 28 HeightIDWcosineAndoyerLambert(wrap=False): 6.108538037
    test 29 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 30 HeightIDWcosineAndoyerLambert(latlon): True
    test 31 HeightIDWcosineAndoyerLambert(wrap=False): 5.0
    test 32 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 33 HeightIDWcosineAndoyerLambert(latlon): True
    test 34 HeightIDWcosineAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 35 HeightIDWcosineAndoyerLambert(tuple): <type 'tuple'>
    test 36 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 37 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 38 HeightIDWcosineAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 39 HeightIDWcosineAndoyerLambert(list: <type 'list'>
    test 40 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 41 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 42 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 43 HeightIDWcosineAndoyerLambertadjust: None
    test 44 HeightIDWcosineAndoyerLambertkmin: 2
    test 45 HeightIDWcosineAndoyerLambertwrap: False
    test 46 HeightIDWcosineAndoyerLambertbeta: 2
    test 47 HeightIDWcosineAndoyerLambertadjust: None
    test 48 HeightIDWcosineAndoyerLambertbeta: 2
    test 49 HeightIDWcosineAndoyerLambertkmin: 2
    test 50 HeightIDWcosineAndoyerLambertwrap: False
    test 51 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 52 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 53 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 6.108538037
    test 54 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 55 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 56 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 5.0
    test 57 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 58 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 59 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 60 HeightIDWcosineForsytheAndoyerLambert(tuple): <type 'tuple'>
    test 61 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 62 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 63 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 64 HeightIDWcosineForsytheAndoyerLambert(list: <type 'list'>
    test 65 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 66 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 67 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 68 HeightIDWcosineForsytheAndoyerLambertadjust: None
    test 69 HeightIDWcosineForsytheAndoyerLambertkmin: 2
    test 70 HeightIDWcosineForsytheAndoyerLambertwrap: False
    test 71 HeightIDWcosineForsytheAndoyerLambertbeta: 2
    test 72 HeightIDWcosineForsytheAndoyerLambertadjust: None
    test 73 HeightIDWcosineForsytheAndoyerLambertbeta: 2
    test 74 HeightIDWcosineForsytheAndoyerLambertkmin: 2
    test 75 HeightIDWcosineForsytheAndoyerLambertwrap: False
    test 76 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 77 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 78 HeightIDWcosineLaw(wrap=True): 6.108538037
    test 79 HeightIDWcosineLaw(float): <type 'float'>
    test 80 HeightIDWcosineLaw(latlon): True
    test 81 HeightIDWcosineLaw(wrap=True): 5.0
    test 82 HeightIDWcosineLaw(float): <type 'float'>
    test 83 HeightIDWcosineLaw(latlon): True
    test 84 HeightIDWcosineLaw(wrap=True): (6.108538037, 5.0,)
    test 85 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 86 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 87 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 88 HeightIDWcosineLaw(wrap=True): [6.108538037, 5.0]
    test 89 HeightIDWcosineLaw(list: <type 'list'>
    test 90 HeightIDWcosineLaw(list-float): <type 'float'>
    test 91 HeightIDWcosineLaw(list-float): <type 'float'>
    test 92 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 93 HeightIDWcosineLawadjust: None
    test 94 HeightIDWcosineLawkmin: 2
    test 95 HeightIDWcosineLawwrap: True
    test 96 HeightIDWcosineLawbeta: 2
    test 97 HeightIDWcosineLawadjust: None
    test 98 HeightIDWcosineLawbeta: 2
    test 99 HeightIDWcosineLawkmin: 2
    test 100 HeightIDWcosineLawwrap: True
    test 101 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 102 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 103 HeightIDWcosineLaw(wrap=False): 6.108538037
    test 104 HeightIDWcosineLaw(float): <type 'float'>
    test 105 HeightIDWcosineLaw(latlon): True
    test 106 HeightIDWcosineLaw(wrap=False): 5.0
    test 107 HeightIDWcosineLaw(float): <type 'float'>
    test 108 HeightIDWcosineLaw(latlon): True
    test 109 HeightIDWcosineLaw(wrap=False): (6.108538037, 5.0,)
    test 110 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 111 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 112 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 113 HeightIDWcosineLaw(wrap=False): [6.108538037, 5.0]
    test 114 HeightIDWcosineLaw(list: <type 'list'>
    test 115 HeightIDWcosineLaw(list-float): <type 'float'>
    test 116 HeightIDWcosineLaw(list-float): <type 'float'>
    test 117 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 118 HeightIDWcosineLawadjust: None
    test 119 HeightIDWcosineLawkmin: 2
    test 120 HeightIDWcosineLawwrap: False
    test 121 HeightIDWcosineLawbeta: 2
    test 122 HeightIDWcosineLawadjust: None
    test 123 HeightIDWcosineLawbeta: 2
    test 124 HeightIDWcosineLawkmin: 2
    test 125 HeightIDWcosineLawwrap: False
    test 126 copy(HeightIDWdistanceTo): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 127 HeightIDWdistanceTo.copy(): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 128 HeightIDWdistanceTo(): 6.108538037
    test 129 HeightIDWdistanceTo(float): <type 'float'>
    test 130 HeightIDWdistanceTo(latlon): True
    test 131 HeightIDWdistanceTo(): 5.0
    test 132 HeightIDWdistanceTo(float): <type 'float'>
    test 133 HeightIDWdistanceTo(latlon): True
    test 134 HeightIDWdistanceTo(): (6.108538037, 5.0,)
    test 135 HeightIDWdistanceTo(tuple): <type 'tuple'>
    test 136 HeightIDWdistanceTo(tuple-float): <type 'float'>
    test 137 HeightIDWdistanceTo(tuple-float): <type 'float'>
    test 138 HeightIDWdistanceTo(): [6.108538037, 5.0]
    test 139 HeightIDWdistanceTo(list: <type 'list'>
    test 140 HeightIDWdistanceTo(list-float): <type 'float'>
    test 141 HeightIDWdistanceTo(list-float): <type 'float'>
    test 142 HeightError: type(other) (9.0): incompatible with sphericalTrigonometry.LatLon.distanceTo(other), invalid
    test 143 HeightIDWdistanceToadjust: None
    test 144 HeightIDWdistanceTokmin: 2
    test 145 HeightIDWdistanceTowrap: None
    test 146 HeightIDWdistanceTobeta: 2
    test 147 HeightIDWdistanceToadjust: None
    test 148 HeightIDWdistanceTobeta: 2
    test 149 HeightIDWdistanceTokmin: 2
    test 150 HeightIDWdistanceTowrap: None
    test 151 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 152 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 153 HeightIDWeuclidean(adjust=False): 6.143010434
    test 154 HeightIDWeuclidean(float): <type 'float'>
    test 155 HeightIDWeuclidean(latlon): True
    test 156 HeightIDWeuclidean(adjust=False): 5.0
    test 157 HeightIDWeuclidean(float): <type 'float'>
    test 158 HeightIDWeuclidean(latlon): True
    test 159 HeightIDWeuclidean(adjust=False): (6.143010434, 5.0,)
    test 160 HeightIDWeuclidean(tuple): <type 'tuple'>
    test 161 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 162 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 163 HeightIDWeuclidean(adjust=False): [6.143010434, 5.0]
    test 164 HeightIDWeuclidean(list: <type 'list'>
    test 165 HeightIDWeuclidean(list-float): <type 'float'>
    test 166 HeightIDWeuclidean(list-float): <type 'float'>
    test 167 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 168 HeightIDWeuclideanadjust: False
    test 169 HeightIDWeuclideankmin: 2
    test 170 HeightIDWeuclideanwrap: None
    test 171 HeightIDWeuclideanbeta: 2
    test 172 HeightIDWeuclideanadjust: False
    test 173 HeightIDWeuclideanbeta: 2
    test 174 HeightIDWeuclideankmin: 2
    test 175 HeightIDWeuclideanwrap: None
    test 176 copy(HeightIDW2): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 177 HeightIDW2.copy(): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 178 HeightIDW2(adjust=True, wrap=False): 6.108538529
    test 179 HeightIDW2(float): <type 'float'>
    test 180 HeightIDW2(latlon): True
    test 181 HeightIDW2(adjust=True, wrap=False): 5.0
    test 182 HeightIDW2(float): <type 'float'>
    test 183 HeightIDW2(latlon): True
    test 184 HeightIDW2(adjust=True, wrap=False): (6.108538529, 5.0,)
    test 185 HeightIDW2(tuple): <type 'tuple'>
    test 186 HeightIDW2(tuple-float): <type 'float'>
    test 187 HeightIDW2(tuple-float): <type 'float'>
    test 188 HeightIDW2(adjust=True, wrap=False): [6.108538529, 5.0]
    test 189 HeightIDW2(list: <type 'list'>
    test 190 HeightIDW2(list-float): <type 'float'>
    test 191 HeightIDW2(list-float): <type 'float'>
    test 192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 193 HeightIDW2adjust: True
    test 194 HeightIDW2kmin: 2
    test 195 HeightIDW2wrap: False
    test 196 HeightIDW2beta: 1
    test 197 HeightIDW2adjust: True
    test 198 HeightIDW2beta: 1
    test 199 HeightIDW2kmin: 2
    test 200 HeightIDW2wrap: False
    test 201 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 202 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 203 HeightIDWequirectangular(adjust=True, wrap=True): 6.108538529
    test 204 HeightIDWequirectangular(float): <type 'float'>
    test 205 HeightIDWequirectangular(latlon): True
    test 206 HeightIDWequirectangular(adjust=True, wrap=True): 5.0
    test 207 HeightIDWequirectangular(float): <type 'float'>
    test 208 HeightIDWequirectangular(latlon): True
    test 209 HeightIDWequirectangular(adjust=True, wrap=True): (6.108538529, 5.0,)
    test 210 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 211 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 212 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 213 HeightIDWequirectangular(adjust=True, wrap=True): [6.108538529, 5.0]
    test 214 HeightIDWequirectangular(list: <type 'list'>
    test 215 HeightIDWequirectangular(list-float): <type 'float'>
    test 216 HeightIDWequirectangular(list-float): <type 'float'>
    test 217 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 218 HeightIDWequirectangularadjust: True
    test 219 HeightIDWequirectangularkmin: 2
    test 220 HeightIDWequirectangularwrap: True
    test 221 HeightIDWequirectangularbeta: 1
    test 222 HeightIDWequirectangularadjust: True
    test 223 HeightIDWequirectangularbeta: 1
    test 224 HeightIDWequirectangularkmin: 2
    test 225 HeightIDWequirectangularwrap: True
    test 226 copy(HeightIDW2): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 227 HeightIDW2.copy(): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 228 HeightIDW2(adjust=False, wrap=False): 6.108614369
    test 229 HeightIDW2(float): <type 'float'>
    test 230 HeightIDW2(latlon): True
    test 231 HeightIDW2(adjust=False, wrap=False): 5.0
    test 232 HeightIDW2(float): <type 'float'>
    test 233 HeightIDW2(latlon): True
    test 234 HeightIDW2(adjust=False, wrap=False): (6.108614369, 5.0,)
    test 235 HeightIDW2(tuple): <type 'tuple'>
    test 236 HeightIDW2(tuple-float): <type 'float'>
    test 237 HeightIDW2(tuple-float): <type 'float'>
    test 238 HeightIDW2(adjust=False, wrap=False): [6.108614369, 5.0]
    test 239 HeightIDW2(list: <type 'list'>
    test 240 HeightIDW2(list-float): <type 'float'>
    test 241 HeightIDW2(list-float): <type 'float'>
    test 242 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 243 HeightIDW2adjust: False
    test 244 HeightIDW2kmin: 2
    test 245 HeightIDW2wrap: False
    test 246 HeightIDW2beta: 1
    test 247 HeightIDW2adjust: False
    test 248 HeightIDW2beta: 1
    test 249 HeightIDW2kmin: 2
    test 250 HeightIDW2wrap: False
    test 251 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 252 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 253 HeightIDWequirectangular(adjust=False, wrap=True): 6.108614369
    test 254 HeightIDWequirectangular(float): <type 'float'>
    test 255 HeightIDWequirectangular(latlon): True
    test 256 HeightIDWequirectangular(adjust=False, wrap=True): 5.0
    test 257 HeightIDWequirectangular(float): <type 'float'>
    test 258 HeightIDWequirectangular(latlon): True
    test 259 HeightIDWequirectangular(adjust=False, wrap=True): (6.108614369, 5.0,)
    test 260 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 261 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 262 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 263 HeightIDWequirectangular(adjust=False, wrap=True): [6.108614369, 5.0]
    test 264 HeightIDWequirectangular(list: <type 'list'>
    test 265 HeightIDWequirectangular(list-float): <type 'float'>
    test 266 HeightIDWequirectangular(list-float): <type 'float'>
    test 267 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 268 HeightIDWequirectangularadjust: False
    test 269 HeightIDWequirectangularkmin: 2
    test 270 HeightIDWequirectangularwrap: True
    test 271 HeightIDWequirectangularbeta: 1
    test 272 HeightIDWequirectangularadjust: False
    test 273 HeightIDWequirectangularbeta: 1
    test 274 HeightIDWequirectangularkmin: 2
    test 275 HeightIDWequirectangularwrap: True
    test 276 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 277 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 278 HeightIDWflatLocal(wrap=False): 6.860459007
    test 279 HeightIDWflatLocal(float): <type 'float'>
    test 280 HeightIDWflatLocal(latlon): True
    test 281 HeightIDWflatLocal(wrap=False): 5.0
    test 282 HeightIDWflatLocal(float): <type 'float'>
    test 283 HeightIDWflatLocal(latlon): True
    test 284 HeightIDWflatLocal(wrap=False): (6.860459007, 5.0,)
    test 285 HeightIDWflatLocal(tuple): <type 'tuple'>
    test 286 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 287 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 288 HeightIDWflatLocal(wrap=False): [6.860459007, 5.0]
    test 289 HeightIDWflatLocal(list: <type 'list'>
    test 290 HeightIDWflatLocal(list-float): <type 'float'>
    test 291 HeightIDWflatLocal(list-float): <type 'float'>
    test 292 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 293 HeightIDWflatLocaladjust: None
    test 294 HeightIDWflatLocalkmin: 2
    test 295 HeightIDWflatLocalwrap: False
    test 296 HeightIDWflatLocalbeta: 2
    test 297 HeightIDWflatLocaladjust: None
    test 298 HeightIDWflatLocalbeta: 2
    test 299 HeightIDWflatLocalkmin: 2
    test 300 HeightIDWflatLocalwrap: False
    test 301 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 302 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 303 HeightIDWflatPolar(wrap=False): 6.261469975
    test 304 HeightIDWflatPolar(float): <type 'float'>
    test 305 HeightIDWflatPolar(latlon): True
    test 306 HeightIDWflatPolar(wrap=False): 5.0
    test 307 HeightIDWflatPolar(float): <type 'float'>
    test 308 HeightIDWflatPolar(latlon): True
    test 309 HeightIDWflatPolar(wrap=False): (6.261469975, 5.0,)
    test 310 HeightIDWflatPolar(tuple): <type 'tuple'>
    test 311 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 312 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 313 HeightIDWflatPolar(wrap=False): [6.261469975, 5.0]
    test 314 HeightIDWflatPolar(list: <type 'list'>
    test 315 HeightIDWflatPolar(list-float): <type 'float'>
    test 316 HeightIDWflatPolar(list-float): <type 'float'>
    test 317 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 318 HeightIDWflatPolaradjust: None
    test 319 HeightIDWflatPolarkmin: 2
    test 320 HeightIDWflatPolarwrap: False
    test 321 HeightIDWflatPolarbeta: 2
    test 322 HeightIDWflatPolaradjust: None
    test 323 HeightIDWflatPolarbeta: 2
    test 324 HeightIDWflatPolarkmin: 2
    test 325 HeightIDWflatPolarwrap: False
    test 326 copy(HeightIDW3): (<class 'pygeodesy.deprecated.HeightIDW3'>, True)
    test 327 HeightIDW3.copy(): (<class 'pygeodesy.deprecated.HeightIDW3'>, True)
    test 328 HeightIDW3(wrap=True): 6.108538037
    test 329 HeightIDW3(float): <type 'float'>
    test 330 HeightIDW3(latlon): True
    test 331 HeightIDW3(wrap=True): 5.0
    test 332 HeightIDW3(float): <type 'float'>
    test 333 HeightIDW3(latlon): True
    test 334 HeightIDW3(wrap=True): (6.108538037, 5.0,)
    test 335 HeightIDW3(tuple): <type 'tuple'>
    test 336 HeightIDW3(tuple-float): <type 'float'>
    test 337 HeightIDW3(tuple-float): <type 'float'>
    test 338 HeightIDW3(wrap=True): [6.108538037, 5.0]
    test 339 HeightIDW3(list: <type 'list'>
    test 340 HeightIDW3(list-float): <type 'float'>
    test 341 HeightIDW3(list-float): <type 'float'>
    test 342 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 343 HeightIDW3adjust: None
    test 344 HeightIDW3kmin: 2
    test 345 HeightIDW3wrap: True
    test 346 HeightIDW3beta: 2
    test 347 HeightIDW3adjust: None
    test 348 HeightIDW3beta: 2
    test 349 HeightIDW3kmin: 2
    test 350 HeightIDW3wrap: True
    test 351 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 352 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 353 HeightIDWhaversine(wrap=False): 6.108538037
    test 354 HeightIDWhaversine(float): <type 'float'>
    test 355 HeightIDWhaversine(latlon): True
    test 356 HeightIDWhaversine(wrap=False): 5.0
    test 357 HeightIDWhaversine(float): <type 'float'>
    test 358 HeightIDWhaversine(latlon): True
    test 359 HeightIDWhaversine(wrap=False): (6.108538037, 5.0,)
    test 360 HeightIDWhaversine(tuple): <type 'tuple'>
    test 361 HeightIDWhaversine(tuple-float): <type 'float'>
    test 362 HeightIDWhaversine(tuple-float): <type 'float'>
    test 363 HeightIDWhaversine(wrap=False): [6.108538037, 5.0]
    test 364 HeightIDWhaversine(list: <type 'list'>
    test 365 HeightIDWhaversine(list-float): <type 'float'>
    test 366 HeightIDWhaversine(list-float): <type 'float'>
    test 367 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 368 HeightIDWhaversineadjust: None
    test 369 HeightIDWhaversinekmin: 2
    test 370 HeightIDWhaversinewrap: False
    test 371 HeightIDWhaversinebeta: 2
    test 372 HeightIDWhaversineadjust: None
    test 373 HeightIDWhaversinebeta: 2
    test 374 HeightIDWhaversinekmin: 2
    test 375 HeightIDWhaversinewrap: False
    test 376 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 377 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 378 HeightIDWhubeny(wrap=False): 6.860459007
    test 379 HeightIDWhubeny(float): <type 'float'>
    test 380 HeightIDWhubeny(latlon): True
    test 381 HeightIDWhubeny(wrap=False): 5.0
    test 382 HeightIDWhubeny(float): <type 'float'>
    test 383 HeightIDWhubeny(latlon): True
    test 384 HeightIDWhubeny(wrap=False): (6.860459007, 5.0,)
    test 385 HeightIDWhubeny(tuple): <type 'tuple'>
    test 386 HeightIDWhubeny(tuple-float): <type 'float'>
    test 387 HeightIDWhubeny(tuple-float): <type 'float'>
    test 388 HeightIDWhubeny(wrap=False): [6.860459007, 5.0]
    test 389 HeightIDWhubeny(list: <type 'list'>
    test 390 HeightIDWhubeny(list-float): <type 'float'>
    test 391 HeightIDWhubeny(list-float): <type 'float'>
    test 392 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 393 HeightIDWhubenyadjust: None
    test 394 HeightIDWhubenykmin: 2
    test 395 HeightIDWhubenywrap: False
    test 396 HeightIDWhubenybeta: 2
    test 397 HeightIDWhubenyadjust: None
    test 398 HeightIDWhubenybeta: 2
    test 399 HeightIDWhubenykmin: 2
    test 400 HeightIDWhubenywrap: False
    test 401 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 402 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 403 HeightIDWthomas(wrap=True): 6.108538037
    test 404 HeightIDWthomas(float): <type 'float'>
    test 405 HeightIDWthomas(latlon): True
    test 406 HeightIDWthomas(wrap=True): 5.0
    test 407 HeightIDWthomas(float): <type 'float'>
    test 408 HeightIDWthomas(latlon): True
    test 409 HeightIDWthomas(wrap=True): (6.108538037, 5.0,)
    test 410 HeightIDWthomas(tuple): <type 'tuple'>
    test 411 HeightIDWthomas(tuple-float): <type 'float'>
    test 412 HeightIDWthomas(tuple-float): <type 'float'>
    test 413 HeightIDWthomas(wrap=True): [6.108538037, 5.0]
    test 414 HeightIDWthomas(list: <type 'list'>
    test 415 HeightIDWthomas(list-float): <type 'float'>
    test 416 HeightIDWthomas(list-float): <type 'float'>
    test 417 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 418 HeightIDWthomasadjust: None
    test 419 HeightIDWthomaskmin: 2
    test 420 HeightIDWthomaswrap: True
    test 421 HeightIDWthomasbeta: 2
    test 422 HeightIDWthomasadjust: None
    test 423 HeightIDWthomasbeta: 2
    test 424 HeightIDWthomaskmin: 2
    test 425 HeightIDWthomaswrap: True
    test 426 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 427 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 428 HeightIDWthomas(wrap=False): 6.108538037
    test 429 HeightIDWthomas(float): <type 'float'>
    test 430 HeightIDWthomas(latlon): True
    test 431 HeightIDWthomas(wrap=False): 5.0
    test 432 HeightIDWthomas(float): <type 'float'>
    test 433 HeightIDWthomas(latlon): True
    test 434 HeightIDWthomas(wrap=False): (6.108538037, 5.0,)
    test 435 HeightIDWthomas(tuple): <type 'tuple'>
    test 436 HeightIDWthomas(tuple-float): <type 'float'>
    test 437 HeightIDWthomas(tuple-float): <type 'float'>
    test 438 HeightIDWthomas(wrap=False): [6.108538037, 5.0]
    test 439 HeightIDWthomas(list: <type 'list'>
    test 440 HeightIDWthomas(list-float): <type 'float'>
    test 441 HeightIDWthomas(list-float): <type 'float'>
    test 442 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 443 HeightIDWthomasadjust: None
    test 444 HeightIDWthomaskmin: 2
    test 445 HeightIDWthomaswrap: False
    test 446 HeightIDWthomasbeta: 2
    test 447 HeightIDWthomasadjust: None
    test 448 HeightIDWthomasbeta: 2
    test 449 HeightIDWthomaskmin: 2
    test 450 HeightIDWthomaswrap: False
    test 451 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 452 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 453 HeightIDWvincentys(wrap=True): 6.108538037
    test 454 HeightIDWvincentys(float): <type 'float'>
    test 455 HeightIDWvincentys(latlon): True
    test 456 HeightIDWvincentys(wrap=True): 5.0
    test 457 HeightIDWvincentys(float): <type 'float'>
    test 458 HeightIDWvincentys(latlon): True
    test 459 HeightIDWvincentys(wrap=True): (6.108538037, 5.0,)
    test 460 HeightIDWvincentys(tuple): <type 'tuple'>
    test 461 HeightIDWvincentys(tuple-float): <type 'float'>
    test 462 HeightIDWvincentys(tuple-float): <type 'float'>
    test 463 HeightIDWvincentys(wrap=True): [6.108538037, 5.0]
    test 464 HeightIDWvincentys(list: <type 'list'>
    test 465 HeightIDWvincentys(list-float): <type 'float'>
    test 466 HeightIDWvincentys(list-float): <type 'float'>
    test 467 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 468 HeightIDWvincentysadjust: None
    test 469 HeightIDWvincentyskmin: 2
    test 470 HeightIDWvincentyswrap: True
    test 471 HeightIDWvincentysbeta: 2
    test 472 HeightIDWvincentysadjust: None
    test 473 HeightIDWvincentysbeta: 2
    test 474 HeightIDWvincentyskmin: 2
    test 475 HeightIDWvincentyswrap: True
    test 476 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 477 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 478 HeightIDWvincentys(wrap=False): 6.108538037
    test 479 HeightIDWvincentys(float): <type 'float'>
    test 480 HeightIDWvincentys(latlon): True
    test 481 HeightIDWvincentys(wrap=False): 5.0
    test 482 HeightIDWvincentys(float): <type 'float'>
    test 483 HeightIDWvincentys(latlon): True
    test 484 HeightIDWvincentys(wrap=False): (6.108538037, 5.0,)
    test 485 HeightIDWvincentys(tuple): <type 'tuple'>
    test 486 HeightIDWvincentys(tuple-float): <type 'float'>
    test 487 HeightIDWvincentys(tuple-float): <type 'float'>
    test 488 HeightIDWvincentys(wrap=False): [6.108538037, 5.0]
    test 489 HeightIDWvincentys(list: <type 'list'>
    test 490 HeightIDWvincentys(list-float): <type 'float'>
    test 491 HeightIDWvincentys(list-float): <type 'float'>
    test 492 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 493 HeightIDWvincentysadjust: None
    test 494 HeightIDWvincentyskmin: 2
    test 495 HeightIDWvincentyswrap: False
    test 496 HeightIDWvincentysbeta: 2
    test 497 HeightIDWvincentysadjust: None
    test 498 HeightIDWvincentysbeta: 2
    test 499 HeightIDWvincentyskmin: 2
    test 500 HeightIDWvincentyswrap: False
    test 501 intersection: 02.64932°N, 002.550079°E, +2.50m
    test 502 copy(HeightIDW): (<class 'pygeodesy.deprecated.HeightIDW'>, True)
    test 503 HeightIDW.copy(): (<class 'pygeodesy.deprecated.HeightIDW'>, True)
    test 504 HeightIDW(adjust=True): 2.592748835
    test 505 HeightIDW(float): <type 'float'>
    test 506 HeightIDW(latlon): True
    test 507 HeightIDW(adjust=True): 3.0
    test 508 HeightIDW(float): <type 'float'>
    test 509 HeightIDW(latlon): True
    test 510 HeightIDW(adjust=True): (2.592748835, 3.0,)
    test 511 HeightIDW(tuple): <type 'tuple'>
    test 512 HeightIDW(tuple-float): <type 'float'>
    test 513 HeightIDW(tuple-float): <type 'float'>
    test 514 HeightIDW(adjust=True): [2.592748835, 3.0]
    test 515 HeightIDW(list: <type 'list'>
    test 516 HeightIDW(list-float): <type 'float'>
    test 517 HeightIDW(list-float): <type 'float'>
    test 518 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 519 HeightIDWadjust: True
    test 520 HeightIDWkmin: 2
    test 521 HeightIDWwrap: None
    test 522 HeightIDWbeta: 2
    test 523 HeightIDWadjust: True
    test 524 HeightIDWbeta: 2
    test 525 HeightIDWkmin: 2
    test 526 HeightIDWwrap: None
    test 527 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 528 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 529 HeightIDWcosineAndoyerLambert(wrap=False): 2.592742938
    test 530 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 531 HeightIDWcosineAndoyerLambert(latlon): True
    test 532 HeightIDWcosineAndoyerLambert(wrap=False): 3.0
    test 533 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 534 HeightIDWcosineAndoyerLambert(latlon): True
    test 535 HeightIDWcosineAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 536 HeightIDWcosineAndoyerLambert(tuple): <type 'tuple'>
    test 537 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 538 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 539 HeightIDWcosineAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 540 HeightIDWcosineAndoyerLambert(list: <type 'list'>
    test 541 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 542 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 543 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 544 HeightIDWcosineAndoyerLambertadjust: None
    test 545 HeightIDWcosineAndoyerLambertkmin: 2
    test 546 HeightIDWcosineAndoyerLambertwrap: False
    test 547 HeightIDWcosineAndoyerLambertbeta: 2
    test 548 HeightIDWcosineAndoyerLambertadjust: None
    test 549 HeightIDWcosineAndoyerLambertbeta: 2
    test 550 HeightIDWcosineAndoyerLambertkmin: 2
    test 551 HeightIDWcosineAndoyerLambertwrap: False
    test 552 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 553 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 554 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 2.592742938
    test 555 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 556 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 557 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 3.0
    test 558 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 559 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 560 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 561 HeightIDWcosineForsytheAndoyerLambert(tuple): <type 'tuple'>
    test 562 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 563 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 564 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 565 HeightIDWcosineForsytheAndoyerLambert(list: <type 'list'>
    test 566 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 567 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 568 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 569 HeightIDWcosineForsytheAndoyerLambertadjust: None
    test 570 HeightIDWcosineForsytheAndoyerLambertkmin: 2
    test 571 HeightIDWcosineForsytheAndoyerLambertwrap: False
    test 572 HeightIDWcosineForsytheAndoyerLambertbeta: 2
    test 573 HeightIDWcosineForsytheAndoyerLambertadjust: None
    test 574 HeightIDWcosineForsytheAndoyerLambertbeta: 2
    test 575 HeightIDWcosineForsytheAndoyerLambertkmin: 2
    test 576 HeightIDWcosineForsytheAndoyerLambertwrap: False
    test 577 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 578 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 579 HeightIDWcosineLaw(wrap=True): 2.592742938
    test 580 HeightIDWcosineLaw(float): <type 'float'>
    test 581 HeightIDWcosineLaw(latlon): True
    test 582 HeightIDWcosineLaw(wrap=True): 3.0
    test 583 HeightIDWcosineLaw(float): <type 'float'>
    test 584 HeightIDWcosineLaw(latlon): True
    test 585 HeightIDWcosineLaw(wrap=True): (2.592742938, 3.0,)
    test 586 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 587 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 588 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 589 HeightIDWcosineLaw(wrap=True): [2.592742938, 3.0]
    test 590 HeightIDWcosineLaw(list: <type 'list'>
    test 591 HeightIDWcosineLaw(list-float): <type 'float'>
    test 592 HeightIDWcosineLaw(list-float): <type 'float'>
    test 593 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 594 HeightIDWcosineLawadjust: None
    test 595 HeightIDWcosineLawkmin: 2
    test 596 HeightIDWcosineLawwrap: True
    test 597 HeightIDWcosineLawbeta: 2
    test 598 HeightIDWcosineLawadjust: None
    test 599 HeightIDWcosineLawbeta: 2
    test 600 HeightIDWcosineLawkmin: 2
    test 601 HeightIDWcosineLawwrap: True
    test 602 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 603 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 604 HeightIDWcosineLaw(wrap=False): 2.592742938
    test 605 HeightIDWcosineLaw(float): <type 'float'>
    test 606 HeightIDWcosineLaw(latlon): True
    test 607 HeightIDWcosineLaw(wrap=False): 3.0
    test 608 HeightIDWcosineLaw(float): <type 'float'>
    test 609 HeightIDWcosineLaw(latlon): True
    test 610 HeightIDWcosineLaw(wrap=False): (2.592742938, 3.0,)
    test 611 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 612 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 613 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 614 HeightIDWcosineLaw(wrap=False): [2.592742938, 3.0]
    test 615 HeightIDWcosineLaw(list: <type 'list'>
    test 616 HeightIDWcosineLaw(list-float): <type 'float'>
    test 617 HeightIDWcosineLaw(list-float): <type 'float'>
    test 618 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 619 HeightIDWcosineLawadjust: None
    test 620 HeightIDWcosineLawkmin: 2
    test 621 HeightIDWcosineLawwrap: False
    test 622 HeightIDWcosineLawbeta: 2
    test 623 HeightIDWcosineLawadjust: None
    test 624 HeightIDWcosineLawbeta: 2
    test 625 HeightIDWcosineLawkmin: 2
    test 626 HeightIDWcosineLawwrap: False
    test 627 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 628 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 629 HeightIDWeuclidean(adjust=False): 2.592735541
    test 630 HeightIDWeuclidean(float): <type 'float'>
    test 631 HeightIDWeuclidean(latlon): True
    test 632 HeightIDWeuclidean(adjust=False): 3.0
    test 633 HeightIDWeuclidean(float): <type 'float'>
    test 634 HeightIDWeuclidean(latlon): True
    test 635 HeightIDWeuclidean(adjust=False): (2.592735541, 3.0,)
    test 636 HeightIDWeuclidean(tuple): <type 'tuple'>
    test 637 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 638 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 639 HeightIDWeuclidean(adjust=False): [2.592735541, 3.0]
    test 640 HeightIDWeuclidean(list: <type 'list'>
    test 641 HeightIDWeuclidean(list-float): <type 'float'>
    test 642 HeightIDWeuclidean(list-float): <type 'float'>
    test 643 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 644 HeightIDWeuclideanadjust: False
    test 645 HeightIDWeuclideankmin: 2
    test 646 HeightIDWeuclideanwrap: None
    test 647 HeightIDWeuclideanbeta: 2
    test 648 HeightIDWeuclideanadjust: False
    test 649 HeightIDWeuclideanbeta: 2
    test 650 HeightIDWeuclideankmin: 2
    test 651 HeightIDWeuclideanwrap: None
    test 652 copy(HeightIDW2): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 653 HeightIDW2.copy(): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 654 HeightIDW2(adjust=True, wrap=False): 2.592743455
    test 655 HeightIDW2(float): <type 'float'>
    test 656 HeightIDW2(latlon): True
    test 657 HeightIDW2(adjust=True, wrap=False): 3.0
    test 658 HeightIDW2(float): <type 'float'>
    test 659 HeightIDW2(latlon): True
    test 660 HeightIDW2(adjust=True, wrap=False): (2.592743455, 3.0,)
    test 661 HeightIDW2(tuple): <type 'tuple'>
    test 662 HeightIDW2(tuple-float): <type 'float'>
    test 663 HeightIDW2(tuple-float): <type 'float'>
    test 664 HeightIDW2(adjust=True, wrap=False): [2.592743455, 3.0]
    test 665 HeightIDW2(list: <type 'list'>
    test 666 HeightIDW2(list-float): <type 'float'>
    test 667 HeightIDW2(list-float): <type 'float'>
    test 668 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 669 HeightIDW2adjust: True
    test 670 HeightIDW2kmin: 2
    test 671 HeightIDW2wrap: False
    test 672 HeightIDW2beta: 1
    test 673 HeightIDW2adjust: True
    test 674 HeightIDW2beta: 1
    test 675 HeightIDW2kmin: 2
    test 676 HeightIDW2wrap: False
    test 677 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 678 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 679 HeightIDWequirectangular(adjust=True, wrap=True): 2.592743455
    test 680 HeightIDWequirectangular(float): <type 'float'>
    test 681 HeightIDWequirectangular(latlon): True
    test 682 HeightIDWequirectangular(adjust=True, wrap=True): 3.0
    test 683 HeightIDWequirectangular(float): <type 'float'>
    test 684 HeightIDWequirectangular(latlon): True
    test 685 HeightIDWequirectangular(adjust=True, wrap=True): (2.592743455, 3.0,)
    test 686 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 687 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 688 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 689 HeightIDWequirectangular(adjust=True, wrap=True): [2.592743455, 3.0]
    test 690 HeightIDWequirectangular(list: <type 'list'>
    test 691 HeightIDWequirectangular(list-float): <type 'float'>
    test 692 HeightIDWequirectangular(list-float): <type 'float'>
    test 693 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 694 HeightIDWequirectangularadjust: True
    test 695 HeightIDWequirectangularkmin: 2
    test 696 HeightIDWequirectangularwrap: True
    test 697 HeightIDWequirectangularbeta: 1
    test 698 HeightIDWequirectangularadjust: True
    test 699 HeightIDWequirectangularbeta: 1
    test 700 HeightIDWequirectangularkmin: 2
    test 701 HeightIDWequirectangularwrap: True
    test 702 copy(HeightIDW2): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 703 HeightIDW2.copy(): (<class 'pygeodesy.deprecated.HeightIDW2'>, True)
    test 704 HeightIDW2(adjust=False, wrap=False): 2.592732915
    test 705 HeightIDW2(float): <type 'float'>
    test 706 HeightIDW2(latlon): True
    test 707 HeightIDW2(adjust=False, wrap=False): 3.0
    test 708 HeightIDW2(float): <type 'float'>
    test 709 HeightIDW2(latlon): True
    test 710 HeightIDW2(adjust=False, wrap=False): (2.592732915, 3.0,)
    test 711 HeightIDW2(tuple): <type 'tuple'>
    test 712 HeightIDW2(tuple-float): <type 'float'>
    test 713 HeightIDW2(tuple-float): <type 'float'>
    test 714 HeightIDW2(adjust=False, wrap=False): [2.592732915, 3.0]
    test 715 HeightIDW2(list: <type 'list'>
    test 716 HeightIDW2(list-float): <type 'float'>
    test 717 HeightIDW2(list-float): <type 'float'>
    test 718 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 719 HeightIDW2adjust: False
    test 720 HeightIDW2kmin: 2
    test 721 HeightIDW2wrap: False
    test 722 HeightIDW2beta: 1
    test 723 HeightIDW2adjust: False
    test 724 HeightIDW2beta: 1
    test 725 HeightIDW2kmin: 2
    test 726 HeightIDW2wrap: False
    test 727 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 728 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 729 HeightIDWequirectangular(adjust=False, wrap=True): 2.592732915
    test 730 HeightIDWequirectangular(float): <type 'float'>
    test 731 HeightIDWequirectangular(latlon): True
    test 732 HeightIDWequirectangular(adjust=False, wrap=True): 3.0
    test 733 HeightIDWequirectangular(float): <type 'float'>
    test 734 HeightIDWequirectangular(latlon): True
    test 735 HeightIDWequirectangular(adjust=False, wrap=True): (2.592732915, 3.0,)
    test 736 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 737 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 738 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 739 HeightIDWequirectangular(adjust=False, wrap=True): [2.592732915, 3.0]
    test 740 HeightIDWequirectangular(list: <type 'list'>
    test 741 HeightIDWequirectangular(list-float): <type 'float'>
    test 742 HeightIDWequirectangular(list-float): <type 'float'>
    test 743 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 744 HeightIDWequirectangularadjust: False
    test 745 HeightIDWequirectangularkmin: 2
    test 746 HeightIDWequirectangularwrap: True
    test 747 HeightIDWequirectangularbeta: 1
    test 748 HeightIDWequirectangularadjust: False
    test 749 HeightIDWequirectangularbeta: 1
    test 750 HeightIDWequirectangularkmin: 2
    test 751 HeightIDWequirectangularwrap: True
    test 752 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 753 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 754 HeightIDWflatLocal(wrap=False): 2.689429914
    test 755 HeightIDWflatLocal(float): <type 'float'>
    test 756 HeightIDWflatLocal(latlon): True
    test 757 HeightIDWflatLocal(wrap=False): 3.0
    test 758 HeightIDWflatLocal(float): <type 'float'>
    test 759 HeightIDWflatLocal(latlon): True
    test 760 HeightIDWflatLocal(wrap=False): (2.689429914, 3.0,)
    test 761 HeightIDWflatLocal(tuple): <type 'tuple'>
    test 762 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 763 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 764 HeightIDWflatLocal(wrap=False): [2.689429914, 3.0]
    test 765 HeightIDWflatLocal(list: <type 'list'>
    test 766 HeightIDWflatLocal(list-float): <type 'float'>
    test 767 HeightIDWflatLocal(list-float): <type 'float'>
    test 768 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 769 HeightIDWflatLocaladjust: None
    test 770 HeightIDWflatLocalkmin: 2
    test 771 HeightIDWflatLocalwrap: False
    test 772 HeightIDWflatLocalbeta: 2
    test 773 HeightIDWflatLocaladjust: None
    test 774 HeightIDWflatLocalbeta: 2
    test 775 HeightIDWflatLocalkmin: 2
    test 776 HeightIDWflatLocalwrap: False
    test 777 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 778 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 779 HeightIDWflatPolar(wrap=False): 2.592973059
    test 780 HeightIDWflatPolar(float): <type 'float'>
    test 781 HeightIDWflatPolar(latlon): True
    test 782 HeightIDWflatPolar(wrap=False): 3.0
    test 783 HeightIDWflatPolar(float): <type 'float'>
    test 784 HeightIDWflatPolar(latlon): True
    test 785 HeightIDWflatPolar(wrap=False): (2.592973059, 3.0,)
    test 786 HeightIDWflatPolar(tuple): <type 'tuple'>
    test 787 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 788 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 789 HeightIDWflatPolar(wrap=False): [2.592973059, 3.0]
    test 790 HeightIDWflatPolar(list: <type 'list'>
    test 791 HeightIDWflatPolar(list-float): <type 'float'>
    test 792 HeightIDWflatPolar(list-float): <type 'float'>
    test 793 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 794 HeightIDWflatPolaradjust: None
    test 795 HeightIDWflatPolarkmin: 2
    test 796 HeightIDWflatPolarwrap: False
    test 797 HeightIDWflatPolarbeta: 2
    test 798 HeightIDWflatPolaradjust: None
    test 799 HeightIDWflatPolarbeta: 2
    test 800 HeightIDWflatPolarkmin: 2
    test 801 HeightIDWflatPolarwrap: False
    test 802 copy(HeightIDW3): (<class 'pygeodesy.deprecated.HeightIDW3'>, True)
    test 803 HeightIDW3.copy(): (<class 'pygeodesy.deprecated.HeightIDW3'>, True)
    test 804 HeightIDW3(wrap=True): 2.592742938
    test 805 HeightIDW3(float): <type 'float'>
    test 806 HeightIDW3(latlon): True
    test 807 HeightIDW3(wrap=True): 3.0
    test 808 HeightIDW3(float): <type 'float'>
    test 809 HeightIDW3(latlon): True
    test 810 HeightIDW3(wrap=True): (2.592742938, 3.0,)
    test 811 HeightIDW3(tuple): <type 'tuple'>
    test 812 HeightIDW3(tuple-float): <type 'float'>
    test 813 HeightIDW3(tuple-float): <type 'float'>
    test 814 HeightIDW3(wrap=True): [2.592742938, 3.0]
    test 815 HeightIDW3(list: <type 'list'>
    test 816 HeightIDW3(list-float): <type 'float'>
    test 817 HeightIDW3(list-float): <type 'float'>
    test 818 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 819 HeightIDW3adjust: None
    test 820 HeightIDW3kmin: 2
    test 821 HeightIDW3wrap: True
    test 822 HeightIDW3beta: 2
    test 823 HeightIDW3adjust: None
    test 824 HeightIDW3beta: 2
    test 825 HeightIDW3kmin: 2
    test 826 HeightIDW3wrap: True
    test 827 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 828 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 829 HeightIDWhaversine(wrap=False): 2.592742938
    test 830 HeightIDWhaversine(float): <type 'float'>
    test 831 HeightIDWhaversine(latlon): True
    test 832 HeightIDWhaversine(wrap=False): 3.0
    test 833 HeightIDWhaversine(float): <type 'float'>
    test 834 HeightIDWhaversine(latlon): True
    test 835 HeightIDWhaversine(wrap=False): (2.592742938, 3.0,)
    test 836 HeightIDWhaversine(tuple): <type 'tuple'>
    test 837 HeightIDWhaversine(tuple-float): <type 'float'>
    test 838 HeightIDWhaversine(tuple-float): <type 'float'>
    test 839 HeightIDWhaversine(wrap=False): [2.592742938, 3.0]
    test 840 HeightIDWhaversine(list: <type 'list'>
    test 841 HeightIDWhaversine(list-float): <type 'float'>
    test 842 HeightIDWhaversine(list-float): <type 'float'>
    test 843 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 844 HeightIDWhaversineadjust: None
    test 845 HeightIDWhaversinekmin: 2
    test 846 HeightIDWhaversinewrap: False
    test 847 HeightIDWhaversinebeta: 2
    test 848 HeightIDWhaversineadjust: None
    test 849 HeightIDWhaversinebeta: 2
    test 850 HeightIDWhaversinekmin: 2
    test 851 HeightIDWhaversinewrap: False
    test 852 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 853 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 854 HeightIDWhubeny(wrap=False): 2.689429914
    test 855 HeightIDWhubeny(float): <type 'float'>
    test 856 HeightIDWhubeny(latlon): True
    test 857 HeightIDWhubeny(wrap=False): 3.0
    test 858 HeightIDWhubeny(float): <type 'float'>
    test 859 HeightIDWhubeny(latlon): True
    test 860 HeightIDWhubeny(wrap=False): (2.689429914, 3.0,)
    test 861 HeightIDWhubeny(tuple): <type 'tuple'>
    test 862 HeightIDWhubeny(tuple-float): <type 'float'>
    test 863 HeightIDWhubeny(tuple-float): <type 'float'>
    test 864 HeightIDWhubeny(wrap=False): [2.689429914, 3.0]
    test 865 HeightIDWhubeny(list: <type 'list'>
    test 866 HeightIDWhubeny(list-float): <type 'float'>
    test 867 HeightIDWhubeny(list-float): <type 'float'>
    test 868 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 869 HeightIDWhubenyadjust: None
    test 870 HeightIDWhubenykmin: 2
    test 871 HeightIDWhubenywrap: False
    test 872 HeightIDWhubenybeta: 2
    test 873 HeightIDWhubenyadjust: None
    test 874 HeightIDWhubenybeta: 2
    test 875 HeightIDWhubenykmin: 2
    test 876 HeightIDWhubenywrap: False
    test 877 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 878 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 879 HeightIDWthomas(wrap=True): 2.592742938
    test 880 HeightIDWthomas(float): <type 'float'>
    test 881 HeightIDWthomas(latlon): True
    test 882 HeightIDWthomas(wrap=True): 3.0
    test 883 HeightIDWthomas(float): <type 'float'>
    test 884 HeightIDWthomas(latlon): True
    test 885 HeightIDWthomas(wrap=True): (2.592742938, 3.0,)
    test 886 HeightIDWthomas(tuple): <type 'tuple'>
    test 887 HeightIDWthomas(tuple-float): <type 'float'>
    test 888 HeightIDWthomas(tuple-float): <type 'float'>
    test 889 HeightIDWthomas(wrap=True): [2.592742938, 3.0]
    test 890 HeightIDWthomas(list: <type 'list'>
    test 891 HeightIDWthomas(list-float): <type 'float'>
    test 892 HeightIDWthomas(list-float): <type 'float'>
    test 893 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 894 HeightIDWthomasadjust: None
    test 895 HeightIDWthomaskmin: 2
    test 896 HeightIDWthomaswrap: True
    test 897 HeightIDWthomasbeta: 2
    test 898 HeightIDWthomasadjust: None
    test 899 HeightIDWthomasbeta: 2
    test 900 HeightIDWthomaskmin: 2
    test 901 HeightIDWthomaswrap: True
    test 902 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 903 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 904 HeightIDWthomas(wrap=False): 2.592742938
    test 905 HeightIDWthomas(float): <type 'float'>
    test 906 HeightIDWthomas(latlon): True
    test 907 HeightIDWthomas(wrap=False): 3.0
    test 908 HeightIDWthomas(float): <type 'float'>
    test 909 HeightIDWthomas(latlon): True
    test 910 HeightIDWthomas(wrap=False): (2.592742938, 3.0,)
    test 911 HeightIDWthomas(tuple): <type 'tuple'>
    test 912 HeightIDWthomas(tuple-float): <type 'float'>
    test 913 HeightIDWthomas(tuple-float): <type 'float'>
    test 914 HeightIDWthomas(wrap=False): [2.592742938, 3.0]
    test 915 HeightIDWthomas(list: <type 'list'>
    test 916 HeightIDWthomas(list-float): <type 'float'>
    test 917 HeightIDWthomas(list-float): <type 'float'>
    test 918 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 919 HeightIDWthomasadjust: None
    test 920 HeightIDWthomaskmin: 2
    test 921 HeightIDWthomaswrap: False
    test 922 HeightIDWthomasbeta: 2
    test 923 HeightIDWthomasadjust: None
    test 924 HeightIDWthomasbeta: 2
    test 925 HeightIDWthomaskmin: 2
    test 926 HeightIDWthomaswrap: False
    test 927 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 928 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 929 HeightIDWvincentys(wrap=True): 2.592742938
    test 930 HeightIDWvincentys(float): <type 'float'>
    test 931 HeightIDWvincentys(latlon): True
    test 932 HeightIDWvincentys(wrap=True): 3.0
    test 933 HeightIDWvincentys(float): <type 'float'>
    test 934 HeightIDWvincentys(latlon): True
    test 935 HeightIDWvincentys(wrap=True): (2.592742938, 3.0,)
    test 936 HeightIDWvincentys(tuple): <type 'tuple'>
    test 937 HeightIDWvincentys(tuple-float): <type 'float'>
    test 938 HeightIDWvincentys(tuple-float): <type 'float'>
    test 939 HeightIDWvincentys(wrap=True): [2.592742938, 3.0]
    test 940 HeightIDWvincentys(list: <type 'list'>
    test 941 HeightIDWvincentys(list-float): <type 'float'>
    test 942 HeightIDWvincentys(list-float): <type 'float'>
    test 943 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 944 HeightIDWvincentysadjust: None
    test 945 HeightIDWvincentyskmin: 2
    test 946 HeightIDWvincentyswrap: True
    test 947 HeightIDWvincentysbeta: 2
    test 948 HeightIDWvincentysadjust: None
    test 949 HeightIDWvincentysbeta: 2
    test 950 HeightIDWvincentyskmin: 2
    test 951 HeightIDWvincentyswrap: True
    test 952 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 953 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 954 HeightIDWvincentys(wrap=False): 2.592742938
    test 955 HeightIDWvincentys(float): <type 'float'>
    test 956 HeightIDWvincentys(latlon): True
    test 957 HeightIDWvincentys(wrap=False): 3.0
    test 958 HeightIDWvincentys(float): <type 'float'>
    test 959 HeightIDWvincentys(latlon): True
    test 960 HeightIDWvincentys(wrap=False): (2.592742938, 3.0,)
    test 961 HeightIDWvincentys(tuple): <type 'tuple'>
    test 962 HeightIDWvincentys(tuple-float): <type 'float'>
    test 963 HeightIDWvincentys(tuple-float): <type 'float'>
    test 964 HeightIDWvincentys(wrap=False): [2.592742938, 3.0]
    test 965 HeightIDWvincentys(list: <type 'list'>
    test 966 HeightIDWvincentys(list-float): <type 'float'>
    test 967 HeightIDWvincentys(list-float): <type 'float'>
    test 968 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 969 HeightIDWvincentysadjust: None
    test 970 HeightIDWvincentyskmin: 2
    test 971 HeightIDWvincentyswrap: False
    test 972 HeightIDWvincentysbeta: 2
    test 973 HeightIDWvincentysadjust: None
    test 974 HeightIDWvincentysbeta: 2
    test 975 HeightIDWvincentyskmin: 2
    test 976 HeightIDWvincentyswrap: False
    80 tests skipped (80): scipy version 0.13 below 1.2 required by heights.HeightLinear

    all 976 testHeights.py tests passed, 80 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 65.983 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testKarney.py

    testing testKarney.py 20.08.21 (module pygeodesy.karney 20.09.12)
    103 tests skipped (103): no geographiclib

    testMath(pygeodesy.karney, 20.09.12)
    test 1 _diff182(-180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 2 _diff182(-180, -90): 90.0
    test 3 _diff182(-180, 0): 180.0  FAILED, KNOWN, expected -180.0
    test 4 _diff182(-180, 90): -90.0
    test 5 _diff182(-180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 6 _diff182(-90, -180): -90.0
    test 7 _diff182(-90, -90): 0.0  FAILED, KNOWN, expected -0.0
    test 8 _diff182(-90, 0): 90.0
    test 9 _diff182(-90, 90): 180.0  FAILED, KNOWN, expected -180.0
    test 10 _diff182(-90, 180): -90.0
    test 11 _diff182(0, -180): 180.0  FAILED, KNOWN, expected -180.0
    test 12 _diff182(0, -90): -90.0
    test 13 _diff182(0, 0): 0
    test 14 _diff182(0, 90): 90.0
    test 15 _diff182(0, 180): 180.0  FAILED, KNOWN, expected -180.0
    test 16 _diff182(90, -180): 90.0
    test 17 _diff182(90, -90): 180.0  FAILED, KNOWN, expected -180.0
    test 18 _diff182(90, 0): -90.0
    test 19 _diff182(90, 90): 0.0  FAILED, KNOWN, expected -0.0
    test 20 _diff182(90, 180): 90.0
    test 21 _diff182(180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 22 _diff182(180, -90): 90.0
    test 23 _diff182(180, 0): 180.0  FAILED, KNOWN, expected -180.0
    test 24 _diff182(180, 90): -90.0
    test 25 _diff182(180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 26 _norm180(-361): -1.0
    test 27  wrap180(-361): -1.0
    test 28 _norm180(-360): -0.0
    test 29  wrap180(-360): 0.0  FAILED, KNOWN, expected -0.0
    test 30 _norm180(-180): 180.0
    test 31  wrap180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 32 _norm180(-90): -90.0
    test 33  wrap180(-90): -90.0
    test 34 _norm180(0): 0.0
    test 35  wrap180(0): 0.0
    test 36 _norm180(0): 0.0
    test 37  wrap180(0): 0.0
    test 38 _norm180(90): 90.0
    test 39  wrap180(90): 90.0
    test 40 _norm180(180): 180.0
    test 41  wrap180(180): 180.0
    test 42 _norm180(360): 0.0
    test 43  wrap180(360): 0.0
    test 44 _norm180(361): 1.0
    test 45  wrap180(361): 1.0
    test 46 _fsum2_: 1.0e-20
    test 47 _fsum2_: 0.0
    test 48 _fsum2_: -8.0e-20  FAILED, KNOWN, expected 1.0e-20
    test 49 _fsum2_: 1.0e-20
    test 50 _fsum2_: -3.5890509874e+19  FAILED, KNOWN, expected 1.0
    test 51 _fsum2_: 0.0
    test 52 unroll: (30.0, 0.0)
    test 53 unroll: (60.0, 30.0)
    test 54 unroll: (90.0, 60.0)
    test 55 unroll: (120.0, 90.0)
    test 56 unroll: (150.0, 120.0)
    test 57 unroll: (180.0, 150.0)
    test 58 unroll: (-150.0, -180.0)
    test 59 unroll: (-120.0, -150.0)
    test 60 unroll: (-90.0, -120.0)
    test 61 unroll: (-60.0, -90.0)
    test 62 unroll: (-30.0, -60.0)
    test 63 unroll: (0.0, -30.0)
    test 64 unroll: (30.0, 0.0)

    16 of 64 testKarney.py tests (25.0%) FAILED, ALL KNOWN, 103 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 2.698 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testLatLon.py

    testing testLatLon.py 20.10.03

    testLatLon(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 isequalTo: False
    test 18 antipode1: 52.205°S, 179.881°W
    test 19 antipode2: True
    test 20 antipode3: 52.205°N, 000.119°E
    test 21 antipode4: True
    test 22 antipode5: 52.205°N, 000.119°E
    test 23 copy: True
    test 24 __eq__: True
    test 25 __ne__: False
    test 26 equirectangularTo: 404329.56
    test 27 distanceTo: 404279.720589
    test 28 distanceTo: 404279.720589
    test 29 distanceTo: 3972863
    test 30 distanceTo: 18013602.92
    test 31 distanceTo: 0.00  FAILED, KNOWN, expected 20003931.46
    test 32 intermediateTo: 51.372294°N, 000.707192°E
    test 33 intermediateTo: True
    test 34 intermediateTo: 404279.721
    test 35 intermediateTo+5: 35.560239°N, 008.833512°E
    test 36 intermediateTo+5: 4.885
    test 37 intermediateTo-4: 64.570387°N, 013.156352°W
    test 38 intermediateTo-4: 3.885
    test 39 intermediateTo-h: 125.000
    test 40 cosineAndoyerLambertTo: 125205.962
    test 41 cosineAndoyerLambertTo: 125205.962
    test 42 cosineForsyheAndoyerLambertTo: 125205.965
    test 43 cosineForsyheAndoyerLambertTo: 125205.965
    test 44 cosineLawTo: 124801.098
    test 45 cosineLawTo: 124801.098
    test 46 equirectangularTo: 124804.754
    test 47 equirectangularTo: 124804.754
    test 48 euclideanTo: 130015.089
    test 49 euclideanTo: 130015.089
    test 50 flatLocalTo: 125209.633
    test 51 flatLocalTo: 125209.633
    test 52 flatPolarTo: 133663.257
    test 53 flatPolarTo: 133663.257
    test 54 haversineTo: 124801.098
    test 55 haversineTo: 124801.098
    test 56 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 57 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 58 thomasTo: 125206.188
    test 59 thomasTo: 125206.188
    test 60 vincentysTo: 124801.098
    test 61 vincentysTo: 124801.098
    test 62 isclockwise: False
    test 63 isclockwise*: False
    test 64 isclockwise: True
    test 65 isclockwise*: True
    test 66 isclockwise: points (2): too few
    test 67 isclockwise*: points (2): too few
    test 68 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 69 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 70 isconvex: False
    test 71 isconvex*: False
    test 72 isconvex: True
    test 73 isconvex*: True
    test 74 isconvex: points (2): too few
    test 75 isconvex*: points (2): too few
    test 76 isenclosedBy1: True
    test 77 isenclosedBy1*: True
    test 78 isenclosedBy2: False
    test 79 isenclosedBy2*: False
    test 80 isenclosedBy3: False
    test 81 isenclosedBy3*: False
    test 82 isenclosedBy4: False
    test 83 isenclosedBy4*: False
    test 84 isenclosedBy5: False
    test 85 isenclosedBy5*: False
    test 86 isenclosedBy6: True
    test 87 isenclosedBy6*: True
    test 88 isenclosedBy7: True
    test 89 isenclosedBy7*: True
    test 90 compassAngleTo: 100.017
    test 91 compassAngleTo: 105.599
    test 92 compassAngleTo: 280.017
    test 93 compassAngleTo: 285.599
    test 94 equirectangularTo: 592.185
    test 95 distanceTo: 591.831
    test 96 compassAngleTo: 0.0
    test 97 compassAngleTo: 45.0
    test 98 compassAngleTo: 90.0
    test 99 compassAngleTo: 180.0
    test 100 compassAngleTo: 225.0
    test 101 compassAngleTo: 315.0
    test 102 compassAngleTo: 270.0
    test 103 compassAngleTo: 359.4
    test 104 latlon2: (53.0, 1.0)
    test 105 philam2: (0.93, 0.02)
    test 106 compassAngleTo: 31
    test 107 compassAngleTo: 45
    test 108 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 109 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 110 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 111 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 112 isequalTo: <type 'bool'>
    test 113 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 114 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 115 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 116 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 117 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 118 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 119 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 120 compassAngleTo: <type 'float'>
    test 121 cosineLawTo: <type 'float'>
    test 122 euclideanTo: <type 'float'>
    test 123 flatLocalTo: <type 'float'>
    test 124 flatPolarTo: <type 'float'>
    test 125 haversineTo: <type 'float'>
    test 126 hubenyTo: <type 'float'>
    test 127 vincentysTo: <type 'float'>
    test 128 toVector: (0.615661, 0.0, 0.788011)
    test 129 toVector3d: (0.61566, 0.0, 0.78801)
    test 130 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 131 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 132 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 133 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 134 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testLatLon(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 135 isEllipsoidal: True
    test 136 isSpherical: False
    test 137 lat/lonDMS: 52.20472°N, 000.14056°E
    test 138 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 139 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 140 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 141 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 142 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 143 isequalTo: True
    test 144 isequalTo: True
    test 145 latlon2: 52.20472, 0.14056
    test 146 latlon2: 52.2047, 0.1406
    test 147 latlon2: 52.205, 0.141
    test 148 latlon2: 52.2, 0.14
    test 149 latlon2: 52.2, 0.1
    test 150 latlon2: 52.0, 0.0
    test 151 isequalTo: False
    test 152 antipode1: 52.205°S, 179.881°W
    test 153 antipode2: True
    test 154 antipode3: 52.205°N, 000.119°E
    test 155 antipode4: True
    test 156 antipode5: 52.205°N, 000.119°E
    test 157 initialBearingTo: 156.1106
    test 158 finalBearingTo: 157.8345
    test 159 initialBearingTo: 65.9335
    test 160 finalBearingTo: 93.9034
    test 161 bearingTo2: 156.1106, 157.8345
    test 162 ispolar: True
    test 163 copy: True
    test 164 __eq__: True
    test 165 __ne__: False
    test 166 equirectangularTo: 404329.56
    test 167 distanceTo: 404607.805988
    test 168 distanceTo: 404607.805988
    test 169 distanceTo: 3981601
    test 170 antipodal: False
    test 171 distanceTo dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 172 distanceTo unrolled: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 173 antipodal: False
    test 174 distanceTo dateline: 9513998
    test 175 distanceTo unrolled: 9513998
    test 176 distanceTo: 18012714.66
    test 177 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 178 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 179 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 180 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 181 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 182 destination: 51.513526°N, 000.098038°W
    test 183 destination: 51°30′49″N, 000°05′53″W
    test 184 destination: 33°57′N, 118°24′W
    test 185 destination: 33.950367°N, 118.399012°W
    test 186 destination: 0.592546N, 2.066453W
    test 187 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 188 cosineAndoyerLambertTo: 125205.962
    test 189 cosineAndoyerLambertTo: 125205.962
    test 190 cosineForsyheAndoyerLambertTo: 125205.965
    test 191 cosineForsyheAndoyerLambertTo: 125205.965
    test 192 cosineLawTo: 124801.098
    test 193 cosineLawTo: 124801.098
    test 194 equirectangularTo: 124804.754
    test 195 equirectangularTo: 124804.754
    test 196 euclideanTo: 130015.089
    test 197 euclideanTo: 130015.089
    test 198 flatLocalTo: 125209.633
    test 199 flatLocalTo: 125209.633
    test 200 flatPolarTo: 133663.257
    test 201 flatPolarTo: 133663.257
    test 202 haversineTo: 124801.098
    test 203 haversineTo: 124801.098
    test 204 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 205 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 206 thomasTo: 125206.188
    test 207 thomasTo: 125206.188
    test 208 vincentysTo: 124801.098
    test 209 vincentysTo: 124801.098
    test 210 isclockwise: False
    test 211 isclockwise*: False
    test 212 isclockwise: True
    test 213 isclockwise*: True
    test 214 isclockwise: points (2): too few
    test 215 isclockwise*: points (2): too few
    test 216 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 217 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 218 isconvex: False
    test 219 isconvex*: False
    test 220 isconvex: True
    test 221 isconvex*: True
    test 222 isconvex: points (2): too few
    test 223 isconvex*: points (2): too few
    test 224 isenclosedBy1: True
    test 225 isenclosedBy1*: True
    test 226 isenclosedBy2: False
    test 227 isenclosedBy2*: False
    test 228 isenclosedBy3: False
    test 229 isenclosedBy3*: False
    test 230 isenclosedBy4: False
    test 231 isenclosedBy4*: False
    test 232 isenclosedBy5: False
    test 233 isenclosedBy5*: False
    test 234 isenclosedBy6: True
    test 235 isenclosedBy6*: True
    test 236 isenclosedBy7: True
    test 237 isenclosedBy7*: True
    test 238 initialBearingTo: 102.392291
    test 239 compassAngleTo: 100.017
    test 240 compassAngleTo: 105.599
    test 241 initialBearingTo: 288.676039
    test 242 compassAngleTo: 280.017
    test 243 compassAngleTo: 285.599
    test 244 equirectangularTo: 592.185
    test 245 distanceTo: 593.571
    test 246 bearingTo: 0.0
    test 247 compassAngleTo: 0.0
    test 248 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 249 compassAngleTo: 45.0
    test 250 bearingTo: 90.0
    test 251 compassAngleTo: 90.0
    test 252 bearingTo: 180.0
    test 253 compassAngleTo: 180.0
    test 254 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 255 compassAngleTo: 225.0
    test 256 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 257 compassAngleTo: 315.0
    test 258 bearingTo: 270.0
    test 259 compassAngleTo: 270.0
    test 260 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 261 compassAngleTo: 359.4
    test 262 latlon2: (53.0, 1.0)
    test 263 philam2: (0.93, 0.02)
    test 264 bearingTo: 31
    test 265 compassAngleTo: 31
    test 266 compassAngleTo: 45
    test 267 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 268 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 269 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 270 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 271 isequalTo: <type 'bool'>
    test 272 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 273 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 274 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 275 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 276 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 277 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 278 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 279 compassAngleTo: <type 'float'>
    test 280 cosineLawTo: <type 'float'>
    test 281 euclideanTo: <type 'float'>
    test 282 flatLocalTo: <type 'float'>
    test 283 flatPolarTo: <type 'float'>
    test 284 haversineTo: <type 'float'>
    test 285 hubenyTo: <type 'float'>
    test 286 vincentysTo: <type 'float'>
    test 287 toNvector: (0.615661, 0.0, 0.788011)
    test 288 toVector: (0.615661, 0.0, 0.788011)
    test 289 toVector3d: (0.61566, 0.0, 0.78801)
    test 290 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 311.234
    test 291 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66938776°N, 002.48641176°E
    test 292 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1586.951
    test 293 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65153156°N, 002.46821899°E
    test 294 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 295 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 137.897
    test 296 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 148.175
    test 297 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67811504°N, 002.49959193°E
    test 298 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 299 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2399.908
    test 300 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2399.908
    test 301 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.6613586°N, 002.47981223°E
    test 302 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 303 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 304 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1332.749
    test 305 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69124153°N, 002.50124031°E
    test 306 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1450.709
    test 307 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67811504°N, 002.49959193°E
    test 308 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2

    testLatLon(pygeodesy.sphericalNvector, 20.10.02)
    test 309 isEllipsoidal: False
    test 310 isSpherical: True
    test 311 lat/lonDMS: 52.20472°N, 000.14056°E
    test 312 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 313 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 314 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 315 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 316 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 317 isequalTo: True
    test 318 isequalTo: True
    test 319 latlon2: 52.20472, 0.14056
    test 320 latlon2: 52.2047, 0.1406
    test 321 latlon2: 52.205, 0.141
    test 322 latlon2: 52.2, 0.14
    test 323 latlon2: 52.2, 0.1
    test 324 latlon2: 52.0, 0.0
    test 325 isequalTo: False
    test 326 antipode1: 52.205°S, 179.881°W
    test 327 antipode2: True
    test 328 antipode3: 52.205°N, 000.119°E
    test 329 antipode4: True
    test 330 antipode5: 52.205°N, 000.119°E
    test 331 initialBearingTo: 156.1666
    test 332 finalBearingTo: 157.8904
    test 333 initialBearingTo: 65.8921
    test 334 finalBearingTo: 93.8581
    test 335 bearingTo2: 156.1666, 157.8904
    test 336 ispolar: True
    test 337 copy: True
    test 338 __eq__: True
    test 339 __ne__: False
    test 340 equirectangularTo: 404329.56
    test 341 distanceTo: 404279.720589
    test 342 distanceTo: 404279.720589
    test 343 distanceTo: 2145
    test 344 distanceTo: 18013602.92
    test 345 distanceTo: 0.00  FAILED, KNOWN, expected 20015114.35
    test 346 intermediateTo: 51.372084°N, 000.707337°E
    test 347 intermediateTo: True
    test 348 intermediateTo: 404279.721
    test 349 intermediateTo+5: 35.160975°N, 008.989542°E
    test 350 intermediateTo+5: 5.000
    test 351 intermediateTo-4: 64.911647°N, 013.726301°W
    test 352 intermediateTo-4: 4.000
    test 353 intermediateTo-h: 125.000
    test 354 intermediateChordTo: 51.372294°N, 000.707192°E
    test 355 intermediateChordTo: True
    test 356 intermediateChordTo-h: 125.000
    test 357 midpointTo: 50.536327°N, 001.274614°E
    test 358 destination: 51.513546°N, 000.098345°W
    test 359 destination: 51°30′49″N, 000°05′54″W
    test 360 destination: 34°37′N, 116°33′W
    test 361 destination: 34.613647°N, 116.55116°W
    test 362 destination: 0.604122N, 2.034201W
    test 363 destination: 31.96383509°N, 064.37329146°E
    test 364 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 365 alongTrackDistanceTo: 62331.58
    test 366 alongTrackDistanceTo: 99.588
    test 367 alongTrackDistanceTo: -7702.7
    test 368 alongTrackDistanceTo: 7587.6
    test 369 crossTrackDistanceTo: -305.665281606  FAILED, KNOWN, expected TypeError
    test 370 crossTrackDistanceTo: -307.55
    test 371 crossTrackDistanceTo: 7.4524
    test 372 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 373 cosineAndoyerLambertTo: 124801.098
    test 374 cosineAndoyerLambertTo: 124801.098
    test 375 cosineForsyheAndoyerLambertTo: 124801.098
    test 376 cosineForsyheAndoyerLambertTo: 124801.098
    test 377 cosineLawTo: 124801.098
    test 378 cosineLawTo: 124801.098
    test 379 equirectangularTo: 124804.754
    test 380 equirectangularTo: 124804.754
    test 381 euclideanTo: 130015.089
    test 382 euclideanTo: 130015.089
    test 383 flatLocalTo: 124804.754
    test 384 flatLocalTo: 124804.754
    test 385 flatPolarTo: 133663.257
    test 386 flatPolarTo: 133663.257
    test 387 haversineTo: 124801.098
    test 388 haversineTo: 124801.098
    test 389 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 390 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 391 thomasTo: 124801.098
    test 392 thomasTo: 124801.098
    test 393 vincentysTo: 124801.098
    test 394 vincentysTo: 124801.098
    test 395 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 396 isclockwise: False
    test 397 isclockwise*: False
    test 398 isclockwise: True
    test 399 isclockwise*: True
    test 400 isclockwise: points (2): too few
    test 401 isclockwise*: points (2): too few
    test 402 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 403 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 404 isconvex: False
    test 405 isconvex*: False
    test 406 isconvex: True
    test 407 isconvex*: True
    test 408 isconvex: points (2): too few
    test 409 isconvex*: points (2): too few
    test 410 isenclosedBy1: True
    test 411 isenclosedBy1*: True
    test 412 isenclosedBy2: False
    test 413 isenclosedBy2*: False
    test 414 isenclosedBy3: False
    test 415 isenclosedBy3*: False
    test 416 isenclosedBy4: False
    test 417 isenclosedBy4*: False
    test 418 isenclosedBy5: False
    test 419 isenclosedBy5*: False
    test 420 isenclosedBy6: True
    test 421 isenclosedBy6*: True
    test 422 isenclosedBy7: True
    test 423 isenclosedBy7*: True
    test 424 initialBearingTo: 102.432182
    test 425 compassAngleTo: 100.017
    test 426 compassAngleTo: 105.599
    test 427 initialBearingTo: 288.715918
    test 428 compassAngleTo: 280.017
    test 429 compassAngleTo: 285.599
    test 430 equirectangularTo: 592.185
    test 431 distanceTo: 591.831
    test 432 compassAngleTo: 0.0
    test 433 compassAngleTo: 45.0
    test 434 compassAngleTo: 90.0
    test 435 compassAngleTo: 180.0
    test 436 compassAngleTo: 225.0
    test 437 compassAngleTo: 315.0
    test 438 compassAngleTo: 270.0
    test 439 compassAngleTo: 359.4
    test 440 latlon2: (53.0, 1.0)
    test 441 philam2: (0.93, 0.02)
    test 442 compassAngleTo: 31
    test 443 compassAngleTo: 45
    test 444 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 445 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 446 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 447 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 448 isequalTo: <type 'bool'>
    test 449 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 450 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 451 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 452 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 453 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 454 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 455 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 456 compassAngleTo: <type 'float'>
    test 457 cosineLawTo: <type 'float'>
    test 458 euclideanTo: <type 'float'>
    test 459 flatLocalTo: <type 'float'>
    test 460 flatPolarTo: <type 'float'>
    test 461 haversineTo: <type 'float'>
    test 462 hubenyTo: <type 'float'>
    test 463 vincentysTo: <type 'float'>
    test 464 toVector: (0.615661, 0.0, 0.788011)
    test 465 toVector3d: (0.61566, 0.0, 0.78801)
    test 466 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 467 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 468 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 469 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 470 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testLatLon(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 471 isEllipsoidal: False
    test 472 isSpherical: True
    test 473 lat/lonDMS: 52.20472°N, 000.14056°E
    test 474 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 475 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 476 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 477 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 478 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 479 isequalTo: True
    test 480 isequalTo: True
    test 481 latlon2: 52.20472, 0.14056
    test 482 latlon2: 52.2047, 0.1406
    test 483 latlon2: 52.205, 0.141
    test 484 latlon2: 52.2, 0.14
    test 485 latlon2: 52.2, 0.1
    test 486 latlon2: 52.0, 0.0
    test 487 isequalTo: False
    test 488 antipode1: 52.205°S, 179.881°W
    test 489 antipode2: True
    test 490 antipode3: 52.205°N, 000.119°E
    test 491 antipode4: True
    test 492 antipode5: 52.205°N, 000.119°E
    test 493 initialBearingTo: 156.1666
    test 494 finalBearingTo: 157.8904
    test 495 initialBearingTo: 65.8921
    test 496 finalBearingTo: 93.8581
    test 497 bearingTo2: 156.1666, 157.8904
    test 498 ispolar: True
    test 499 copy: True
    test 500 __eq__: True
    test 501 __ne__: False
    test 502 equirectangularTo: 404329.56
    test 503 distanceTo: 404279.720589
    test 504 distanceTo: 404279.720589
    test 505 distanceTo: 2145
    test 506 antipodal: False
    test 507 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 508 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 509 antipodal: False
    test 510 distanceTo dateline: 9491735
    test 511 distanceTo unrolled: 9491735
    test 512 distanceTo: 18013602.92
    test 513 distanceTo: 20015114.35
    test 514 intermediateTo: 51.372084°N, 000.707337°E
    test 515 intermediateTo: True
    test 516 intermediateTo: 404279.721
    test 517 intermediateTo+5: 35.160975°N, 008.989542°E
    test 518 intermediateTo+5: 5.000
    test 519 intermediateTo-4: 64.911647°N, 013.726301°W
    test 520 intermediateTo-4: 4.000
    test 521 intermediateTo-h: 125.000
    test 522 midpointTo: 50.536327°N, 001.274614°E
    test 523 destination: 51.513546°N, 000.098345°W
    test 524 destination: 51°30′49″N, 000°05′54″W
    test 525 destination: 34°37′N, 116°33′W
    test 526 destination: 34.613647°N, 116.55116°W
    test 527 destination: 0.604122N, 2.034201W
    test 528 destination: 31.96383509°N, 064.37329146°E
    test 529 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 530 alongTrackDistanceTo: 62331.58
    test 531 alongTrackDistanceTo: 99.588
    test 532 alongTrackDistanceTo: -7702.7
    test 533 alongTrackDistanceTo: 7587.6
    test 534 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 535 crossTrackDistanceTo: -307.55
    test 536 crossTrackDistanceTo: 7.4524
    test 537 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 538 cosineAndoyerLambertTo: 124801.098
    test 539 cosineAndoyerLambertTo: 124801.098
    test 540 cosineForsyheAndoyerLambertTo: 124801.098
    test 541 cosineForsyheAndoyerLambertTo: 124801.098
    test 542 cosineLawTo: 124801.098
    test 543 cosineLawTo: 124801.098
    test 544 equirectangularTo: 124804.754
    test 545 equirectangularTo: 124804.754
    test 546 euclideanTo: 130015.089
    test 547 euclideanTo: 130015.089
    test 548 flatLocalTo: 124804.754
    test 549 flatLocalTo: 124804.754
    test 550 flatPolarTo: 133663.257
    test 551 flatPolarTo: 133663.257
    test 552 haversineTo: 124801.098
    test 553 haversineTo: 124801.098
    test 554 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 555 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 556 thomasTo: 124801.098
    test 557 thomasTo: 124801.098
    test 558 vincentysTo: 124801.098
    test 559 vincentysTo: 124801.098
    test 560 isclockwise: False
    test 561 isclockwise*: False
    test 562 isclockwise: True
    test 563 isclockwise*: True
    test 564 isclockwise: points (2): too few
    test 565 isclockwise*: points (2): too few
    test 566 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 567 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 568 isconvex: False
    test 569 isconvex*: False
    test 570 isconvex: True
    test 571 isconvex*: True
    test 572 isconvex: points (2): too few
    test 573 isconvex*: points (2): too few
    test 574 isenclosedBy1: True
    test 575 isenclosedBy1*: True
    test 576 isenclosedBy2: False
    test 577 isenclosedBy2*: False
    test 578 isenclosedBy3: False
    test 579 isenclosedBy3*: False
    test 580 isenclosedBy4: False
    test 581 isenclosedBy4*: False
    test 582 isenclosedBy5: False
    test 583 isenclosedBy5*: False
    test 584 isenclosedBy6: True
    test 585 isenclosedBy6*: True
    test 586 isenclosedBy7: True
    test 587 isenclosedBy7*: True
    test 588 initialBearingTo: 102.432182
    test 589 compassAngleTo: 100.017
    test 590 compassAngleTo: 105.599
    test 591 initialBearingTo: 288.715918
    test 592 compassAngleTo: 280.017
    test 593 compassAngleTo: 285.599
    test 594 equirectangularTo: 592.185
    test 595 distanceTo: 591.831
    test 596 bearingTo: 0.0
    test 597 compassAngleTo: 0.0
    test 598 bearingTo: 45.0
    test 599 compassAngleTo: 45.0
    test 600 bearingTo: 90.0
    test 601 compassAngleTo: 90.0
    test 602 bearingTo: 180.0
    test 603 compassAngleTo: 180.0
    test 604 bearingTo: 225.0
    test 605 compassAngleTo: 225.0
    test 606 bearingTo: 315.0
    test 607 compassAngleTo: 315.0
    test 608 bearingTo: 270.0
    test 609 compassAngleTo: 270.0
    test 610 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 611 compassAngleTo: 359.4
    test 612 latlon2: (53.0, 1.0)
    test 613 philam2: (0.93, 0.02)
    test 614 bearingTo: 31
    test 615 compassAngleTo: 31
    test 616 compassAngleTo: 45
    test 617 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 618 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 619 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 620 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 621 isequalTo: <type 'bool'>
    test 622 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 623 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 624 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 625 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 626 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 627 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 628 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 629 compassAngleTo: <type 'float'>
    test 630 cosineLawTo: <type 'float'>
    test 631 euclideanTo: <type 'float'>
    test 632 flatLocalTo: <type 'float'>
    test 633 flatPolarTo: <type 'float'>
    test 634 haversineTo: <type 'float'>
    test 635 hubenyTo: <type 'float'>
    test 636 vincentysTo: <type 'float'>
    test 637 toNvector: (0.61566, 0.0, 0.78801)
    test 638 toVector: (0.615661, 0.0, 0.788011)
    test 639 toVector3d: (0.61566, 0.0, 0.78801)
    test 640 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 641 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 642 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 643 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 644 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 645 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 646 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 647 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 648 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 649 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 650 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 651 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 652 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 653 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 654 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 655 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 656 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 657 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 658 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3

    27 of 658 testLatLon.py tests (4.1%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 133.842 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testLatLonBases.py

    testing testLatLonBases.py 20.10.08

    testLatLon(pygeodesy.ellipsoidalKarney, 20.10.08)
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 isequalTo: True
    test 4 isequalTo3: True
    test 5 latlon: (52.205, 0.119)
    test 6 latlonheight: (52.205, 0.119, 0)
    test 7 phimlam: (0.911149, 0.002077)
    test 8 phimlamheight: (0.911149, 0.002077, 0)
    test 9 toStr: 51°28′40″N, 000°00′06″W
    test 10 toStr: 51.4778°N, 000.0016°W
    test 11 precision: 0
    test 12 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 13 isequalTo: True
    test 14 isequalTo3: False
    test 15 latlon: (51.4778, -0.0016)
    test 16 phimlam: (0.898457, -0.000028)
    test 17 isequalTo: True
    test 18 isequalTo3: True
    test 19 latlon: (51.4778, -0.0016)
    test 20 latlonheight: (51.4778, -0.0016, 42.0)
    test 21 phimlam: (0.898457, -0.000028)
    test 22 phimlamheight: (0.898457, -0.000028, 42.0)
    test 23 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 24 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 25 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 26 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 27 lat, lon: 50.06632°N, 005.71475°W
    test 28 lat, lon: 50.066389°N, 005.714722°W
    test 29 isequalTo: True
    test 30 isequalTo3: True
    test 31 latlon: (52.205, 0.119)
    test 32 latlonheight: (52.205, 0.119, 0)
    test 33 phimlam: (0.911149, 0.002077)
    test 34 phimlamheight: (0.911149, 0.002077, 0)
    test 35 toStr: 51°28′40″N, 000°00′06″W
    test 36 toStr: 51.4778°N, 000.0016°W
    test 37 precision: 0
    test 38 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 39 isequalTo: True
    test 40 isequalTo3: False
    test 41 latlon: (51.4778, -0.0016)
    test 42 phimlam: (0.898457, -0.000028)
    test 43 isequalTo: True
    test 44 isequalTo3: True
    test 45 latlon: (51.4778, -0.0016)
    test 46 latlonheight: (51.4778, -0.0016, 42.0)
    test 47 phimlam: (0.898457, -0.000028)
    test 48 phimlamheight: (0.898457, -0.000028, 42.0)
    test 49 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 50 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 51 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 52 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 53 lat, lon: 50.06632°N, 005.71475°W
    test 54 lat, lon: 50.066389°N, 005.714722°W
    test 55 isequalTo: True
    test 56 isequalTo3: True
    test 57 latlon: (52.205, 0.119)
    test 58 latlonheight: (52.205, 0.119, 0)
    test 59 phimlam: (0.911149, 0.002077)
    test 60 phimlamheight: (0.911149, 0.002077, 0)
    test 61 toStr: 51°28′40″N, 000°00′06″W
    test 62 toStr: 51.4778°N, 000.0016°W
    test 63 precision: 0
    test 64 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 65 isequalTo: True
    test 66 isequalTo3: False
    test 67 latlon: (51.4778, -0.0016)
    test 68 phimlam: (0.898457, -0.000028)
    test 69 isequalTo: True
    test 70 isequalTo3: True
    test 71 latlon: (51.4778, -0.0016)
    test 72 latlonheight: (51.4778, -0.0016, 42.0)
    test 73 phimlam: (0.898457, -0.000028)
    test 74 phimlamheight: (0.898457, -0.000028, 42.0)
    test 75 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 76 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 77 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 78 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.sphericalNvector, 20.10.02)
    test 79 lat, lon: 50.06632°N, 005.71475°W
    test 80 lat, lon: 50.066389°N, 005.714722°W
    test 81 isequalTo: True
    test 82 isequalTo3: True
    test 83 latlon: (52.205, 0.119)
    test 84 latlonheight: (52.205, 0.119, 0)
    test 85 phimlam: (0.911149, 0.002077)
    test 86 phimlamheight: (0.911149, 0.002077, 0)
    test 87 toStr: 51°28′40″N, 000°00′06″W
    test 88 toStr: 51.4778°N, 000.0016°W
    test 89 precision: 0
    test 90 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 91 isequalTo: True
    test 92 isequalTo3: False
    test 93 latlon: (51.4778, -0.0016)
    test 94 phimlam: (0.898457, -0.000028)
    test 95 isequalTo: True
    test 96 isequalTo3: True
    test 97 latlon: (51.4778, -0.0016)
    test 98 latlonheight: (51.4778, -0.0016, 42.0)
    test 99 phimlam: (0.898457, -0.000028)
    test 100 phimlamheight: (0.898457, -0.000028, 42.0)
    test 101 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 102 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 103 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 104 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 105 lat, lon: 50.06632°N, 005.71475°W
    test 106 lat, lon: 50.066389°N, 005.714722°W
    test 107 isequalTo: True
    test 108 isequalTo3: True
    test 109 latlon: (52.205, 0.119)
    test 110 latlonheight: (52.205, 0.119, 0)
    test 111 phimlam: (0.911149, 0.002077)
    test 112 phimlamheight: (0.911149, 0.002077, 0)
    test 113 toStr: 51°28′40″N, 000°00′06″W
    test 114 toStr: 51.4778°N, 000.0016°W
    test 115 precision: 0
    test 116 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 117 isequalTo: True
    test 118 isequalTo3: False
    test 119 latlon: (51.4778, -0.0016)
    test 120 phimlam: (0.898457, -0.000028)
    test 121 isequalTo: True
    test 122 isequalTo3: True
    test 123 latlon: (51.4778, -0.0016)
    test 124 latlonheight: (51.4778, -0.0016, 42.0)
    test 125 phimlam: (0.898457, -0.000028)
    test 126 phimlamheight: (0.898457, -0.000028, 42.0)
    test 127 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 128 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 129 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 130 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonBase(pygeodesy.latlonBase, 20.10.02)
    test 131 lat, lon: 50.06632°N, 005.71475°W
    test 132 lat, lon: 50.066389°N, 005.714722°W
    test 133 isequalTo: True
    test 134 isequalTo3: True
    test 135 latlon: (52.205, 0.119)
    test 136 latlonheight: (52.205, 0.119, 0)
    test 137 phimlam: (0.911149, 0.002077)
    test 138 phimlamheight: (0.911149, 0.002077, 0)
    test 139 toStr: 51°28′40″N, 000°00′06″W
    test 140 toStr: 51.4778°N, 000.0016°W
    test 141 precision: 0
    test 142 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 143 isequalTo: True
    test 144 isequalTo3: False
    test 145 latlon: (51.4778, -0.0016)
    test 146 phimlam: (0.898457, -0.000028)
    test 147 isequalTo: True
    test 148 isequalTo3: True
    test 149 latlon: (51.4778, -0.0016)
    test 150 latlonheight: (51.4778, -0.0016, 42.0)
    test 151 phimlam: (0.898457, -0.000028)
    test 152 phimlamheight: (0.898457, -0.000028, 42.0)
    test 153 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 154 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 155 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 156 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonNvectorBase(pygeodesy.nvectorBase, 20.10.08)
    test 157 lat, lon: 50.06632°N, 005.71475°W
    test 158 lat, lon: 50.066389°N, 005.714722°W
    test 159 isequalTo: True
    test 160 isequalTo3: True
    test 161 latlon: (52.205, 0.119)
    test 162 latlonheight: (52.205, 0.119, 0)
    test 163 phimlam: (0.911149, 0.002077)
    test 164 phimlamheight: (0.911149, 0.002077, 0)
    test 165 toStr: 51°28′40″N, 000°00′06″W
    test 166 toStr: 51.4778°N, 000.0016°W
    test 167 precision: 0
    test 168 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 169 isequalTo: True
    test 170 isequalTo3: False
    test 171 latlon: (51.4778, -0.0016)
    test 172 phimlam: (0.898457, -0.000028)
    test 173 isequalTo: True
    test 174 isequalTo3: True
    test 175 latlon: (51.4778, -0.0016)
    test 176 latlonheight: (51.4778, -0.0016, 42.0)
    test 177 phimlam: (0.898457, -0.000028)
    test 178 phimlamheight: (0.898457, -0.000028, 42.0)
    test 179 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 180 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 181 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 182 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonEllipsoidalBase(pygeodesy.ellipsoidalBase, 20.10.04)
    test 183 lat, lon: 50.06632°N, 005.71475°W
    test 184 lat, lon: 50.066389°N, 005.714722°W
    test 185 isequalTo: True
    test 186 isequalTo3: True
    test 187 latlon: (52.205, 0.119)
    test 188 latlonheight: (52.205, 0.119, 0)
    test 189 phimlam: (0.911149, 0.002077)
    test 190 phimlamheight: (0.911149, 0.002077, 0)
    test 191 toStr: 51°28′40″N, 000°00′06″W
    test 192 toStr: 51.4778°N, 000.0016°W
    test 193 precision: 0
    test 194 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 195 isequalTo: True
    test 196 isequalTo3: False
    test 197 latlon: (51.4778, -0.0016)
    test 198 phimlam: (0.898457, -0.000028)
    test 199 isequalTo: True
    test 200 isequalTo3: True
    test 201 latlon: (51.4778, -0.0016)
    test 202 latlonheight: (51.4778, -0.0016, 42.0)
    test 203 phimlam: (0.898457, -0.000028)
    test 204 phimlamheight: (0.898457, -0.000028, 42.0)
    test 205 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 206 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 207 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 208 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonSphericalBase(pygeodesy.sphericalBase, 20.09.30)
    test 209 lat, lon: 50.06632°N, 005.71475°W
    test 210 lat, lon: 50.066389°N, 005.714722°W
    test 211 isequalTo: True
    test 212 isequalTo3: True
    test 213 latlon: (52.205, 0.119)
    test 214 latlonheight: (52.205, 0.119, 0)
    test 215 phimlam: (0.911149, 0.002077)
    test 216 phimlamheight: (0.911149, 0.002077, 0)
    test 217 toStr: 51°28′40″N, 000°00′06″W
    test 218 toStr: 51.4778°N, 000.0016°W
    test 219 precision: 0
    test 220 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 221 isequalTo: True
    test 222 isequalTo3: False
    test 223 latlon: (51.4778, -0.0016)
    test 224 phimlam: (0.898457, -0.000028)
    test 225 isequalTo: True
    test 226 isequalTo3: True
    test 227 latlon: (51.4778, -0.0016)
    test 228 latlonheight: (51.4778, -0.0016, 42.0)
    test 229 phimlam: (0.898457, -0.000028)
    test 230 phimlamheight: (0.898457, -0.000028, 42.0)
    test 231 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 232 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 233 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 234 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    all 234 testLatLonBases.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 14.945 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testLazily.py

    testing testLazily.py 20.01.07
    test 1 a_b2e: function
    test 2 a_b2e2: function
    test 3 a_b2e22: function
    test 4 a_b2e32: function
    test 5 a_b2f: function
    test 6 a_b2f2: function
    test 7 a_b2f_: function
    test 8 a_b2n: function
    test 9 a_f2b: function
    test 10 a_f2Tuple: class
    test 11 a_f_2b: function
    test 12 acos1: function
    test 13 albers: module
    test 14 AlbersEqualArea: class
    test 15 AlbersEqualArea2: class
    test 16 AlbersEqualArea4: class
    test 17 AlbersEqualAreaCylindrical: class
    test 18 AlbersEqualAreaNorth: class
    test 19 AlbersEqualAreaSouth: class
    test 20 AlbersError: class
    test 21 anstr: function
    test 22 anStr: function
    test 23 antipode: function
    test 24 antipode_: function
    test 25 areaof: function
    test 26 areaOf: function
    test 27 asin1: function
    test 28 atan2b: function
    test 29 atan2d: function
    test 30 attrs: function
    test 31 azimuthal: module
    test 32 AzimuthalError: class
    test 33 b_f2a: function
    test 34 b_f_2a: function
    test 35 Band: class
    test 36 bases: module
    test 37 basics: module
    test 38 Bearing: class
    test 39 bearing: function
    test 40 bearing_: function
    test 41 Bearing_: class
    test 42 bearingDMS: function
    test 43 Bool: class
    test 44 bounds: function
    test 45 boundsOf: function
    test 46 callername: function
    test 47 CassiniSoldner: class
    test 48 cbrt: function
    test 49 cbrt2: function
    test 50 centroidOf: function
    test 51 classname: function
    test 52 classnaming: function
    test 53 clipCS3: function
    test 54 clipDegrees: function
    test 55 clipDMS: function
    test 56 ClipError: class
    test 57 clipRadians: function
    test 58 clips: function
    test 59 clipSH: function
    test 60 clipSH3: function
    test 61 clipStr: function
    test 62 clipy: module
    test 63 compassAngle: function
    test 64 compassDMS: function
    test 65 compassPoint: function
    test 66 Conic: class
    test 67 Conics: class pygeodesy.named._NamedEnum
    test 68 cosineAndoyerLambert: function
    test 69 cosineAndoyerLambert_: function
    test 70 cosineForsytheAndoyerLambert: function
    test 71 cosineForsytheAndoyerLambert_: function
    test 72 cosineLaw: function
    test 73 cosineLaw_: function
    test 74 CrossError: class
    test 75 crosserrors: function
    test 76 css: module
    test 77 Css: class
    test 78 CSSError: class
    test 79 date2epoch: function
    test 80 datum: module
    test 81 Datum: class
    test 82 Datums: class pygeodesy.named._NamedEnum
    test 83 datums: module
    test 84 decodeEPSG2: function
    test 85 degDMS: function
    test 86 degrees: type builtin_function_or_method
    test 87 Degrees: class
    test 88 degrees180: function
    test 89 Degrees2: class
    test 90 degrees2m: function
    test 91 degrees360: function
    test 92 degrees90: function
    test 93 Degrees_: class
    test 94 deprecated: module
    test 95 Distance: class
    test 96 Distance_: class
    test 97 dms: module
    test 98 Easting: class
    test 99 ecef: module
    test 100 EcefCartesian: class
    test 101 EcefError: class
    test 102 EcefKarney: class
    test 103 EcefMatrix: class
    test 104 EcefSudano: class
    test 105 EcefVeness: class
    test 106 EcefYou: class
    test 107 egmGeoidHeights: function
    test 108 elevation2: function
    test 109 elevations: module
    test 110 Ellipsoid: class
    test 111 Ellipsoid2: class
    test 112 ellipsoidalKarney: module
    test 113 ellipsoidalNvector: module
    test 114 ellipsoidalVincenty: module
    test 115 Ellipsoids: class pygeodesy.named._NamedEnum
    test 116 ellipsoids: module
    test 117 elliptic: module
    test 118 Elliptic: class
    test 119 EllipticError: class
    test 120 encodeEPSG: function
    test 121 enstr2: function
    test 122 enStr2: function
    test 123 Epoch: class
    test 124 epoch2date: function
    test 125 EPS: float
    test 126 EPS1: float
    test 127 EPS1_2: float
    test 128 EPS_2: float
    test 129 epsg: module
    test 130 Epsg: class
    test 131 EPSGError: class
    test 132 equidistant: function
    test 133 Equidistant: class
    test 134 EquidistantKarney: class
    test 135 equirectangular: function
    test 136 equirectangular3: function
    test 137 equirectangular_: function
    test 138 errors: module
    test 139 etm: module
    test 140 Etm: class
    test 141 ETMError: class
    test 142 euclid: function
    test 143 euclid_: function
    test 144 euclidean: function
    test 145 euclidean_: function
    test 146 ExactTransverseMercator: class
    test 147 exception_chaining: function
    test 148 f2e2: function
    test 149 f2e22: function
    test 150 f2e32: function
    test 151 f2f2: function
    test 152 f2f_: function
    test 153 f2n: function
    test 154 f_2f: function
    test 155 F__E: str
    test 156 F__E_: str
    test 157 F__E__: str
    test 158 F__F: str
    test 159 F__F_: str
    test 160 F__F__: str
    test 161 F__G: str
    test 162 F__G_: str
    test 163 F__G__: str
    test 164 F_D: str
    test 165 F_D_: str
    test 166 F_D__: str
    test 167 F_DEG: str
    test 168 F_DEG_: str
    test 169 F_DEG__: str
    test 170 F_DM: str
    test 171 F_DM_: str
    test 172 F_DM__: str
    test 173 F_DMS: str
    test 174 F_DMS_: str
    test 175 F_DMS__: str
    test 176 F_MIN: str
    test 177 F_MIN_: str
    test 178 F_MIN__: str
    test 179 F_RAD: str
    test 180 F_RAD_: str
    test 181 F_RAD__: str
    test 182 F_SEC: str
    test 183 F_SEC_: str
    test 184 F_SEC__: str
    test 185 false2f: function
    test 186 falsed2f: function
    test 187 favg: function
    test 188 fdot: function
    test 189 Fdot: class
    test 190 fdot3: function
    test 191 Feet: class
    test 192 Fhorner: class
    test 193 fhorner: function
    test 194 fidw: function
    test 195 flatLocal: function
    test 196 flatLocal_: function
    test 197 flatPolar: function
    test 198 flatPolar_: function
    test 199 Float: class
    test 200 Float_: class
    test 201 fmath: module
    test 202 fmean: function
    test 203 formy: module
    test 204 fpolynomial: function
    test 205 Fpolynomial: class
    test 206 fpowers: function
    test 207 fprod: function
    test 208 fractional: function
    test 209 frange: function
    test 210 Frechet: class
    test 211 frechet: module
    test 212 frechet_: function
    test 213 FrechetCosineAndoyerLambert: class
    test 214 FrechetCosineForsytheAndoyerLambert: class
    test 215 FrechetCosineLaw: class
    test 216 FrechetDegrees: class
    test 217 FrechetDistanceTo: class
    test 218 FrechetEquirectangular: class
    test 219 FrechetError: class
    test 220 FrechetEuclidean: class
    test 221 FrechetFlatLocal: class
    test 222 FrechetFlatPolar: class
    test 223 FrechetHaversine: class
    test 224 FrechetHubeny: class
    test 225 FrechetKarney: class
    test 226 FrechetRadians: class
    test 227 FrechetThomas: class
    test 228 FrechetVincentys: class
    test 229 freduce: type builtin_function_or_method
    test 230 fStr: function
    test 231 fstr: function
    test 232 fStrzs: function
    test 233 fstrzs: function
    test 234 Fsum: class
    test 235 fsum: type builtin_function_or_method
    test 236 fsum_: function
    test 237 ft2m: function
    test 238 Garef: class
    test 239 gars: module
    test 240 GARSError: class
    test 241 geohash: module
    test 242 Geohash: class
    test 243 GeohashError: class
    test 244 GeoidError: class
    test 245 GeoidG2012B: class
    test 246 geoidHeight2: function
    test 247 GeoidKarney: class
    test 248 GeoidPGM: class
    test 249 geoids: module
    test 250 Georef: class
    test 251 gnomonic: function
    test 252 Gnomonic: class
    test 253 GnomonicKarney: class
    test 254 halfs2: function
    test 255 Hausdorff: class
    test 256 hausdorff: module
    test 257 hausdorff_: function
    test 258 HausdorffCosineAndoyerLambert: class
    test 259 HausdorffCosineForsytheAndoyerLambert: class
    test 260 HausdorffCosineLaw: class
    test 261 HausdorffDegrees: class
    test 262 HausdorffDistanceTo: class
    test 263 HausdorffEquirectangular: class
    test 264 HausdorffError: class
    test 265 HausdorffEuclidean: class
    test 266 HausdorffFlatLocal: class
    test 267 HausdorffFlatPolar: class
    test 268 HausdorffHaversine: class
    test 269 HausdorffHubeny: class
    test 270 HausdorffKarney: class
    test 271 HausdorffRadians: class
    test 272 HausdorffThomas: class
    test 273 HausdorffVincentys: class
    test 274 haversine: function
    test 275 haversine_: function
    test 276 Height: class
    test 277 HeightCubic: class
    test 278 HeightError: class
    test 279 HeightIDW: class
    test 280 HeightIDW2: class
    test 281 HeightIDW3: class
    test 282 HeightIDWcosineAndoyerLambert: class
    test 283 HeightIDWcosineForsytheAndoyerLambert: class
    test 284 HeightIDWcosineLaw: class
    test 285 HeightIDWdistanceTo: class
    test 286 HeightIDWequirectangular: class
    test 287 HeightIDWeuclidean: class
    test 288 HeightIDWflatLocal: class
    test 289 HeightIDWflatPolar: class
    test 290 HeightIDWhaversine: class
    test 291 HeightIDWhubeny: class
    test 292 HeightIDWkarney: class
    test 293 HeightIDWthomas: class
    test 294 HeightIDWvincentys: class
    test 295 HeightLinear: class
    test 296 HeightLSQBiSpline: class
    test 297 heightOf: function
    test 298 heights: module
    test 299 HeightSmoothBiSpline: class
    test 300 horizon: function
    test 301 hstr: function
    test 302 hubeny: function
    test 303 hubeny_: function
    test 304 hypot: type builtin_function_or_method
    test 305 hypot1: function
    test 306 hypot2: function
    test 307 hypot2_: function
    test 308 hypot3: function
    test 309 hypot_: function
    test 310 INF: float
    test 311 inStr: function
    test 312 instr: function
    test 313 Int: class
    test 314 Int_: class
    test 315 interns: module
    test 316 IntersectionError: class
    test 317 intersections2: function
    test 318 isantipode: function
    test 319 isantipode_: function
    test 320 isclass: function
    test 321 isclockwise: function
    test 322 iscolinearWith: function
    test 323 isconvex: function
    test 324 isconvex_: function
    test 325 isenclosedBy: function
    test 326 isenclosedby: function
    test 327 isfinite: function
    test 328 isidentifier: function
    test 329 isinf: type builtin_function_or_method
    test 330 isint: function
    test 331 iskeyword: type builtin_function_or_method
    test 332 isLazy: type NoneType
    test 333 isnan: type builtin_function_or_method
    test 334 isneg0: function
    test 335 isNumpy2: function
    test 336 isPoints2: function
    test 337 ispolar: function
    test 338 isscalar: function
    test 339 issequence: function
    test 340 isstr: function
    test 341 issubclassof: function
    test 342 isTuple2: function
    test 343 iterNumpy2: function
    test 344 iterNumpy2over: function
    test 345 joined: function
    test 346 joined_: function
    test 347 karney: module
    test 348 Lam: class
    test 349 Lam_: class
    test 350 LambertEqualArea: class
    test 351 Lat: class
    test 352 Lat_: class
    test 353 latDMS: function
    test 354 latlon2n_xyz: function
    test 355 LatLon2psxy: class
    test 356 LatLon_: class
    test 357 latlonDMS: function
    test 358 lazily: module
    test 359 LazyImportError: class
    test 360 Lcc: class
    test 361 lcc: module
    test 362 LCCError: class
    test 363 len2: function
    test 364 LenError: class
    test 365 LimitError: class
    test 366 limiterrors: function
    test 367 Lon: class
    test 368 Lon_: class
    test 369 lonDMS: function
    test 370 luneOf: function
    test 371 m2degrees: function
    test 372 m2ft: function
    test 373 m2km: function
    test 374 m2NM: function
    test 375 m2SM: function
    test 376 MANTIS: int
    test 377 map1: function
    test 378 map2: function
    test 379 MAX: float
    test 380 Meter: class
    test 381 mgrs: module
    test 382 Mgrs: class
    test 383 MGRSError: class
    test 384 MIN: float
    test 385 modulename: function
    test 386 n2e2: function
    test 387 n2f: function
    test 388 n_xyz2latlon: function
    test 389 n_xyz2philam: function
    test 390 named: module
    test 391 namedTuples: module
    test 392 nameof: function
    test 393 NAN: float
    test 394 nearestOn3: function
    test 395 nearestOn4: function
    test 396 nearestOn5: function
    test 397 NEG0: float
    test 398 NN: str
    test 399 normDMS: function
    test 400 Northing: class
    test 401 notImplemented: function
    test 402 notOverloaded: function
    test 403 Number_: class
    test 404 Numpy2LatLon: class
    test 405 nvector: module
    test 406 OK: str
    test 407 Orthographic: class
    test 408 osgr: module
    test 409 Osgr: class
    test 410 OSGRError: class
    test 411 pairs: function
    test 412 parse3d: function
    test 413 parse3llh: function
    test 414 parseDDDMMSS: function
    test 415 parseDMS: function
    test 416 parseDMS2: function
    test 417 ParseError: class
    test 418 parseETM5: function
    test 419 parseMGRS: function
    test 420 parseOSGR: function
    test 421 parseRad: function
    test 422 parseUPS5: function
    test 423 parseUTM: function
    test 424 parseUTM5: function
    test 425 parseUTMUPS5: function
    test 426 parseWM: function
    test 427 perimeterOf: function
    test 428 perimeterof: function
    test 429 PGMError: class
    test 430 Phi: class
    test 431 Phi_: class
    test 432 philam2n_xyz: function
    test 433 PI: float
    test 434 PI2: float
    test 435 PI4: float
    test 436 PI_2: float
    test 437 PI_4: float
    test 438 points: module
    test 439 points2: function
    test 440 PointsError: class
    test 441 polygon: function
    test 442 precision: function
    test 443 Precision_: class
    test 444 property_doc_: function
    test 445 property_RO: class
    test 446 pygeodesy_abspath: str
    test 447 quadOf: function
    test 448 R_FM: float
    test 449 R_KM: float
    test 450 R_M: float
    test 451 R_MA: float
    test 452 R_MB: float
    test 453 R_NM: float
    test 454 R_SM: float
    test 455 R_VM: float
    test 456 radians: type builtin_function_or_method
    test 457 Radians: class
    test 458 Radians2: class
    test 459 radiansPI: function
    test 460 radiansPI2: function
    test 461 radiansPI_2: function
    test 462 radical2: function
    test 463 Radius: class
    test 464 Radius_: class
    test 465 randomrangenerator: function
    test 466 RangeError: class
    test 467 rangerrors: function
    test 468 RefFrame: class
    test 469 RefFrameError: class
    test 470 RefFrames: class pygeodesy.named._NamedEnum
    test 471 reprs: function
    test 472 S_DEG: str
    test 473 S_MIN: str
    test 474 S_RAD: str
    test 475 S_SEC: str
    test 476 S_SEP: str
    test 477 scalar: function
    test 478 Scalar: class
    test 479 Scalar_: class
    test 480 SciPyError: class
    test 481 SciPyWarning: class
    test 482 simplify: module
    test 483 simplify1: function
    test 484 simplify2: function
    test 485 simplifyRDP: function
    test 486 simplifyRDPm: function
    test 487 simplifyRW: function
    test 488 simplifyVW: function
    test 489 simplifyVWm: function
    test 490 sincos2: function
    test 491 sincos2d: function
    test 492 sphericalNvector: module
    test 493 sphericalTrigonometry: module
    test 494 splice: function
    test 495 sqrt3: function
    test 496 Stereographic: class
    test 497 Str: class
    test 498 streprs: module
    test 499 strs: function
    test 500 tan_2: function
    test 501 tanPI_2_2: function
    test 502 thomas: function
    test 503 thomas_: function
    test 504 toCss: function
    test 505 toDMS: function
    test 506 toEtm8: function
    test 507 toLcc: function
    test 508 toMgrs: function
    test 509 toOsgr: function
    test 510 toUps8: function
    test 511 toUtm: function
    test 512 toUtm8: function
    test 513 toUtmUps8: function
    test 514 toWm: function
    test 515 Transform: class
    test 516 Transforms: class pygeodesy.named._NamedEnum
    test 517 trf: module
    test 518 TRFError: class
    test 519 trilaterate3d2: function
    test 520 Tuple2LatLon: class
    test 521 ub2str: function
    test 522 UnitError: class
    test 523 units: module
    test 524 unroll180: function
    test 525 unrollPI: function
    test 526 unstr: function
    test 527 unStr: function
    test 528 ups: module
    test 529 Ups: class
    test 530 UPSError: class
    test 531 upsZoneBand5: function
    test 532 utily: module
    test 533 Utm: class
    test 534 utm: module
    test 535 UTMError: class
    test 536 UtmUps: function
    test 537 utmups: module
    test 538 UTMUPSError: class
    test 539 utmupsValidate: function
    test 540 utmupsValidateOK: function
    test 541 utmupsZoneBand5: function
    test 542 utmZoneBand2: function
    test 543 utmZoneBand5: function
    test 544 vector3d: module
    test 545 Vector3d: class
    test 546 VectorError: class
    test 547 version: str
    test 548 VincentyError: class
    test 549 vincentys: function
    test 550 vincentys_: function
    test 551 webmercator: module
    test 552 WebMercatorError: class
    test 553 wgrs: module
    test 554 WGRSError: class
    test 555 Wm: class
    test 556 wrap180: function
    test 557 wrap360: function
    test 558 wrap90: function
    test 559 wrapPI: function
    test 560 wrapPI2: function
    test 561 wrapPI_2: function
    test 562 Zone: class
    test 563 isLazy: None
    test 564 missing in lazily._all_imports: None
    test 565 missing in pygeodesy.__all__: None
    test 566 cmd: /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c 'import pygeodesy, sys; sys.exit(0 if pygeodesy.isLazy == %s else 1)'
    test 567 PYGEODESY_LAZY_IMPORT=0: 0
    test 568 PYGEODESY_LAZY_IMPORT=1: 0
    test 569 PYGEODESY_LAZY_IMPORT=2: 0
    test 570 PYGEODESY_LAZY_IMPORT=3: 0
    test 571 PYGEODESY_LAZY_IMPORT=4: 0

    all 571 testLazily.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 755.555 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testLcc.py

    testing testLcc.py 20.04.06 (module pygeodesy.lcc 20.09.27)

    testLcc(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: [E:448251, N:5411932]
    test 4 lb1: WRF_Lb.WGS84
    test 5 lb1: lb1
    test 6 lb1: (81.929348, -79.558697)
    test 7 lb1: (1.429937, -1.388561)
    test 8 LatLon: 46.5°N, 003.0°E
    test 9 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 10 toLcc1: 700000 6600000
    test 11 toLcc1: 46.5°N, 003.0°E
    test 12 lb2: 1894411 1564650
    test 13 lb2: Clarke1866
    test 14 lb2: lb2
    test 15 toLatLon2: 35.0°N, 075.0°W
    test 16 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 17 toLatLon2: NAD27
    test 18 toLcc2: 1894410.9 1564649.5
    test 19 toLcc2: [E:1894411, N:1564649]
    test 20 toLcc2: Snyder.NAD27
    test 21 Be08Lb: 49.833333°N, 003.025882°E
    test 22 Be08Lb: GRS80
    test 23 Be08Lb: 49.833333°N, 004.359216°E
    test 24 Be08Lb: GRS80
    test 25 Be08Lb: 49.833333°N, 005.69255°E
    test 26 Be08Lb: GRS80
    test 27 Be08Lb: 51.166667°N, 003.025882°E
    test 28 Be08Lb: GRS80
    test 29 Be08Lb: 51.166667°N, 004.359216°E
    test 30 Be08Lb: GRS80
    test 31 Be08Lb: 51.166667°N, 005.69255°E
    test 32 Be08Lb: GRS80
    test 33 Be72Lb: 49.833334°N, 003.034153°E
    test 34 Be72Lb: NAD83
    test 35 Be72Lb: 49.833334°N, 004.367487°E
    test 36 Be72Lb: NAD83
    test 37 Be72Lb: 49.833334°N, 005.70082°E
    test 38 Be72Lb: NAD83
    test 39 Be72Lb: 51.166667°N, 003.034153°E
    test 40 Be72Lb: NAD83
    test 41 Be72Lb: 51.166667°N, 004.367487°E
    test 42 Be72Lb: NAD83
    test 43 Be72Lb: 51.166667°N, 005.70082°E
    test 44 Be72Lb: NAD83
    test 45 Fr93Lb: 49.0°N, 002.0°W
    test 46 Fr93Lb: WGS84
    test 47 Fr93Lb: 49.0°N, 003.0°E
    test 48 Fr93Lb: WGS84
    test 49 Fr93Lb: 49.0°N, 008.0°E
    test 50 Fr93Lb: WGS84
    test 51 Fr93Lb: 44.0°N, 002.0°W
    test 52 Fr93Lb: WGS84
    test 53 Fr93Lb: 44.0°N, 003.0°E
    test 54 Fr93Lb: WGS84
    test 55 Fr93Lb: 44.0°N, 008.0°E
    test 56 Fr93Lb: WGS84
    test 57 MaNLb: 31.73°N, 008.54°W
    test 58 MaNLb: NTF
    test 59 MaNLb: 31.73°N, 005.4°W
    test 60 MaNLb: NTF
    test 61 MaNLb: 31.73°N, 002.26°W
    test 62 MaNLb: NTF
    test 63 MaNLb: 34.87°N, 008.54°W
    test 64 MaNLb: NTF
    test 65 MaNLb: 34.87°N, 005.4°W
    test 66 MaNLb: NTF
    test 67 MaNLb: 34.87°N, 002.26°W
    test 68 MaNLb: NTF
    test 69 MxLb: 17.5°N, 114.0°W
    test 70 MxLb: WGS84
    test 71 MxLb: 17.5°N, 102.0°W
    test 72 MxLb: WGS84
    test 73 MxLb: 17.5°N, 090.0°W
    test 74 MxLb: WGS84
    test 75 MxLb: 29.5°N, 114.0°W
    test 76 MxLb: WGS84
    test 77 MxLb: 29.5°N, 102.0°W
    test 78 MxLb: WGS84
    test 79 MxLb: 29.5°N, 090.0°W
    test 80 MxLb: WGS84
    test 81 PyT_Lb: 45.898939°N, 000.540154°E
    test 82 PyT_Lb: NTF
    test 83 PyT_Lb: 45.898939°N, 002.337229°E
    test 84 PyT_Lb: NTF
    test 85 PyT_Lb: 45.898939°N, 004.134305°E
    test 86 PyT_Lb: NTF
    test 87 PyT_Lb: 47.696014°N, 000.540154°E
    test 88 PyT_Lb: NTF
    test 89 PyT_Lb: 47.696014°N, 002.337229°E
    test 90 PyT_Lb: NTF
    test 91 PyT_Lb: 47.696014°N, 004.134305°E
    test 92 PyT_Lb: NTF
    test 93 Snyder: 33.0°N, 108.0°W
    test 94 Snyder: NAD27
    test 95 Snyder: 33.0°N, 096.0°W
    test 96 Snyder: NAD27
    test 97 Snyder: 33.0°N, 084.0°W
    test 98 Snyder: NAD27
    test 99 Snyder: 45.0°N, 108.0°W
    test 100 Snyder: NAD27
    test 101 Snyder: 45.0°N, 096.0°W
    test 102 Snyder: NAD27
    test 103 Snyder: 45.0°N, 084.0°W
    test 104 Snyder: NAD27
    test 105 USA_Lb: 33.0°N, 108.0°W
    test 106 USA_Lb: WGS84
    test 107 USA_Lb: 33.0°N, 096.0°W
    test 108 USA_Lb: WGS84
    test 109 USA_Lb: 33.0°N, 084.0°W
    test 110 USA_Lb: WGS84
    test 111 USA_Lb: 45.0°N, 108.0°W
    test 112 USA_Lb: WGS84
    test 113 USA_Lb: 45.0°N, 096.0°W
    test 114 USA_Lb: WGS84
    test 115 USA_Lb: 45.0°N, 084.0°W
    test 116 USA_Lb: WGS84
    test 117 WRF_Lb: 33.0°N, 109.0°W
    test 118 WRF_Lb: WGS84
    test 119 WRF_Lb: 33.0°N, 097.0°W
    test 120 WRF_Lb: WGS84
    test 121 WRF_Lb: 33.0°N, 085.0°W
    test 122 WRF_Lb: WGS84
    test 123 WRF_Lb: 45.0°N, 109.0°W
    test 124 WRF_Lb: WGS84
    test 125 WRF_Lb: 45.0°N, 097.0°W
    test 126 WRF_Lb: WGS84
    test 127 WRF_Lb: 45.0°N, 085.0°W
    test 128 WRF_Lb: WGS84

    testLcc(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 129 lb1: 448251.0 5411932.0001
    test 130 lb1: 448251, 5411932
    test 131 lb1: [E:448251, N:5411932]
    test 132 lb1: WRF_Lb.WGS84
    test 133 lb1: lb1
    test 134 lb1: (81.929348, -79.558697)
    test 135 lb1: (1.429937, -1.388561)
    test 136 LatLon: 46.5°N, 003.0°E
    test 137 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 138 toLcc1: 700000 6600000
    test 139 toLcc1: 46.5°N, 003.0°E
    test 140 lb2: 1894411 1564650
    test 141 lb2: Clarke1866
    test 142 lb2: lb2
    test 143 toLatLon2: 35.0°N, 075.0°W
    test 144 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 145 toLatLon2: NAD27
    test 146 toLcc2: 1894410.9 1564649.5
    test 147 toLcc2: [E:1894411, N:1564649]
    test 148 toLcc2: Snyder.NAD27
    test 149 Be08Lb: 49.833333°N, 003.025882°E
    test 150 Be08Lb: GRS80
    test 151 Be08Lb: 49.833333°N, 004.359216°E
    test 152 Be08Lb: GRS80
    test 153 Be08Lb: 49.833333°N, 005.69255°E
    test 154 Be08Lb: GRS80
    test 155 Be08Lb: 51.166667°N, 003.025882°E
    test 156 Be08Lb: GRS80
    test 157 Be08Lb: 51.166667°N, 004.359216°E
    test 158 Be08Lb: GRS80
    test 159 Be08Lb: 51.166667°N, 005.69255°E
    test 160 Be08Lb: GRS80
    test 161 Be72Lb: 49.833334°N, 003.034153°E
    test 162 Be72Lb: NAD83
    test 163 Be72Lb: 49.833334°N, 004.367487°E
    test 164 Be72Lb: NAD83
    test 165 Be72Lb: 49.833334°N, 005.70082°E
    test 166 Be72Lb: NAD83
    test 167 Be72Lb: 51.166667°N, 003.034153°E
    test 168 Be72Lb: NAD83
    test 169 Be72Lb: 51.166667°N, 004.367487°E
    test 170 Be72Lb: NAD83
    test 171 Be72Lb: 51.166667°N, 005.70082°E
    test 172 Be72Lb: NAD83
    test 173 Fr93Lb: 49.0°N, 002.0°W
    test 174 Fr93Lb: WGS84
    test 175 Fr93Lb: 49.0°N, 003.0°E
    test 176 Fr93Lb: WGS84
    test 177 Fr93Lb: 49.0°N, 008.0°E
    test 178 Fr93Lb: WGS84
    test 179 Fr93Lb: 44.0°N, 002.0°W
    test 180 Fr93Lb: WGS84
    test 181 Fr93Lb: 44.0°N, 003.0°E
    test 182 Fr93Lb: WGS84
    test 183 Fr93Lb: 44.0°N, 008.0°E
    test 184 Fr93Lb: WGS84
    test 185 MaNLb: 31.73°N, 008.54°W
    test 186 MaNLb: NTF
    test 187 MaNLb: 31.73°N, 005.4°W
    test 188 MaNLb: NTF
    test 189 MaNLb: 31.73°N, 002.26°W
    test 190 MaNLb: NTF
    test 191 MaNLb: 34.87°N, 008.54°W
    test 192 MaNLb: NTF
    test 193 MaNLb: 34.87°N, 005.4°W
    test 194 MaNLb: NTF
    test 195 MaNLb: 34.87°N, 002.26°W
    test 196 MaNLb: NTF
    test 197 MxLb: 17.5°N, 114.0°W
    test 198 MxLb: WGS84
    test 199 MxLb: 17.5°N, 102.0°W
    test 200 MxLb: WGS84
    test 201 MxLb: 17.5°N, 090.0°W
    test 202 MxLb: WGS84
    test 203 MxLb: 29.5°N, 114.0°W
    test 204 MxLb: WGS84
    test 205 MxLb: 29.5°N, 102.0°W
    test 206 MxLb: WGS84
    test 207 MxLb: 29.5°N, 090.0°W
    test 208 MxLb: WGS84
    test 209 PyT_Lb: 45.898939°N, 000.540154°E
    test 210 PyT_Lb: NTF
    test 211 PyT_Lb: 45.898939°N, 002.337229°E
    test 212 PyT_Lb: NTF
    test 213 PyT_Lb: 45.898939°N, 004.134305°E
    test 214 PyT_Lb: NTF
    test 215 PyT_Lb: 47.696014°N, 000.540154°E
    test 216 PyT_Lb: NTF
    test 217 PyT_Lb: 47.696014°N, 002.337229°E
    test 218 PyT_Lb: NTF
    test 219 PyT_Lb: 47.696014°N, 004.134305°E
    test 220 PyT_Lb: NTF
    test 221 Snyder: 33.0°N, 108.0°W
    test 222 Snyder: NAD27
    test 223 Snyder: 33.0°N, 096.0°W
    test 224 Snyder: NAD27
    test 225 Snyder: 33.0°N, 084.0°W
    test 226 Snyder: NAD27
    test 227 Snyder: 45.0°N, 108.0°W
    test 228 Snyder: NAD27
    test 229 Snyder: 45.0°N, 096.0°W
    test 230 Snyder: NAD27
    test 231 Snyder: 45.0°N, 084.0°W
    test 232 Snyder: NAD27
    test 233 USA_Lb: 33.0°N, 108.0°W
    test 234 USA_Lb: WGS84
    test 235 USA_Lb: 33.0°N, 096.0°W
    test 236 USA_Lb: WGS84
    test 237 USA_Lb: 33.0°N, 084.0°W
    test 238 USA_Lb: WGS84
    test 239 USA_Lb: 45.0°N, 108.0°W
    test 240 USA_Lb: WGS84
    test 241 USA_Lb: 45.0°N, 096.0°W
    test 242 USA_Lb: WGS84
    test 243 USA_Lb: 45.0°N, 084.0°W
    test 244 USA_Lb: WGS84
    test 245 WRF_Lb: 33.0°N, 109.0°W
    test 246 WRF_Lb: WGS84
    test 247 WRF_Lb: 33.0°N, 097.0°W
    test 248 WRF_Lb: WGS84
    test 249 WRF_Lb: 33.0°N, 085.0°W
    test 250 WRF_Lb: WGS84
    test 251 WRF_Lb: 45.0°N, 109.0°W
    test 252 WRF_Lb: WGS84
    test 253 WRF_Lb: 45.0°N, 097.0°W
    test 254 WRF_Lb: WGS84
    test 255 WRF_Lb: 45.0°N, 085.0°W
    test 256 WRF_Lb: WGS84

    testConic(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 257 SnyderN: name='SnyderN', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 258 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 259 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 260 _SnyderN .auth: ''
    test 261 _SnyderN .opt3: 0.0
    test 262 _SnyderN .latlon0: (23.0, -96.0)
    test 263 _SnyderN .philam0: (0.401426, -1.675516)

    testConic(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 264 SnyderV: name='SnyderV', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 265 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 266 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 267 _SnyderV .auth: ''
    test 268 _SnyderV .opt3: 0.0
    test 269 _SnyderV .latlon0: (23.0, -96.0)
    test 270 _SnyderV .philam0: (0.401426, -1.675516)

    all 270 testLcc.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 26.457 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testMgrs.py

    testing testMgrs.py 20.05.01 (module pygeodesy.mgrs 20.09.22)
    test 1 Mgrs1: 42S XD 09705 38646
    test 2 Mgrs1: [Z:42S, G:XD, E:09705, N:38646]
    test 3 Mgrs2: 42S XD 19705 08646
    test 4 Mgrs2: [Z:42S, G:XD, E:19705, N:08646]
    test 5 Mgrs3: 42S XD 19000 38000
    test 6 Mgrs3: [Z:42S, G:XD, E:19000, N:38000]
    test 7 Mgrs4: 31U DQ 48251 11932
    test 8 Mgrs4: [Z:31U, G:DQ, E:48251, N:11932]
    test 9 Mgrs5: 31U DQ 48251 11932
    test 10 Mgrs5: [Z:31U, G:DQ, E:48251, N:11932]
    test 11 Mgrs6: 31U DQ 48251 11932
    test 12 Mgrs6: [Z:31U, G:DQ, E:48251, N:11932]
    test 13 Mgrs7: 31U DQ 48251 11932
    test 14 Mgrs7: [Z:31U, G:DQ, E:48251, N:11932]
    test 15 Mgrs8: 31U DQ 48251 11932
    test 16 Mgrs8: [Z:31U, G:DQ, E:48251, N:11932]
    test 17 toUtm1: 31 N 448251 5411932
    test 18 toUtm1: [Z:31U, H:N, E:448251, N:5411932]
    test 19 toMgrs1: 31U DQ 48251 11932
    test 20 toMgrs1: [Z:31U, G:DQ, E:48251, N:11932]
    test 21 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')  FAILED, KNOWN, expected (31, 'N', 448251.0, 5411932.0)
    test 22 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')
    test 23 easting: 48251.0
    test 24 northing: 11932.0
    test 25 en100k: DQ
    test 26 digraph: DQ
    test 27 zone: 31
    test 28 band: U
    test 29 bandLatitude: 48
    test 30 toMgrs: 31U DQ 48251 11932
    test 31 toMgrs(None): Mgrs6Tuple
    test 32 toUtm(60.0°N, 001.0°E).toMgrs: 31V CG 88455 53097
    test 33 toUtm(60.0°N, 003.0°E).toMgrs: 32V JM 65640 66593
    test 34 toUtm(60.0°N, 009.0°E).toMgrs: 32V NM 00000 51411
    test 35 toUtm(76.0°N, 001.0°E).toMgrs: 31X DE 45999 36099
    test 36 toUtm(76.0°N, 013.0°E).toMgrs: 33X VE 45999 36099
    test 37 toUtm(76.0°N, 025.0°E).toMgrs: 35X ME 45999 36099
    test 38 toUtm(76.0°N, 037.0°E).toMgrs: 37X DE 45999 36099

    1 of 38 testMgrs.py tests (2.6%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 8.195 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testModules.py

    testing testModules.py 19.09.17

    testModule(pygeodesy, 20.10.09)
    test 1 pygeodesy.AlbersEqualArea() class (pygeodesy.albers): True
    test 2 pygeodesy.AlbersEqualArea2() class (pygeodesy.albers): True
    test 3 pygeodesy.AlbersEqualArea4() class (pygeodesy.albers): True
    test 4 pygeodesy.AlbersEqualAreaCylindrical() class (pygeodesy.albers): True
    test 5 pygeodesy.AlbersEqualAreaNorth() class (pygeodesy.albers): True
    test 6 pygeodesy.AlbersEqualAreaSouth() class (pygeodesy.albers): True
    test 7 pygeodesy.AlbersError() class (pygeodesy.albers): True
    test 8 pygeodesy.AzimuthalError() class (pygeodesy.azimuthal): True
    test 9 pygeodesy.Band() class (pygeodesy.units): True
    test 10 pygeodesy.Bearing() class (pygeodesy.units): True
    test 11 pygeodesy.Bearing_() class (pygeodesy.units): True
    test 12 pygeodesy.Bool() class (pygeodesy.units): True
    test 13 pygeodesy.CSSError() class (pygeodesy.css): True
    test 14 pygeodesy.CassiniSoldner() class (pygeodesy.css): True
    test 15 pygeodesy.ClipError() class (pygeodesy.clipy): True
    test 16 pygeodesy.Conic() class (pygeodesy.lcc): True
    test 17 pygeodesy.Conics class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 18 pygeodesy.CrossError() class (pygeodesy.errors): True
    test 19 pygeodesy.Css() class (pygeodesy.css): True
    test 20 pygeodesy.Datum() class (pygeodesy.datums): True
    test 21 pygeodesy.Datums class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 22 pygeodesy.Degrees() class (pygeodesy.units): True
    test 23 pygeodesy.Degrees2() class (pygeodesy.units): True
    test 24 pygeodesy.Degrees_() class (pygeodesy.units): True
    test 25 pygeodesy.Distance() class (pygeodesy.units): True
    test 26 pygeodesy.Distance_() class (pygeodesy.units): True
    test 27 pygeodesy.EPS float: True
    test 28 pygeodesy.EPS1 float: True
    test 29 pygeodesy.EPS1_2 float: True
    test 30 pygeodesy.EPSGError() class (pygeodesy.epsg): True
    test 31 pygeodesy.EPS_2 float: True
    test 32 pygeodesy.ETMError() class (pygeodesy.etm): True
    test 33 pygeodesy.Easting() class (pygeodesy.units): True
    test 34 pygeodesy.EcefCartesian() class (pygeodesy.ecef): True
    test 35 pygeodesy.EcefError() class (pygeodesy.ecef): True
    test 36 pygeodesy.EcefKarney() class (pygeodesy.ecef): True
    test 37 pygeodesy.EcefMatrix() class (pygeodesy.ecef): True
    test 38 pygeodesy.EcefSudano() class (pygeodesy.ecef): True
    test 39 pygeodesy.EcefVeness() class (pygeodesy.ecef): True
    test 40 pygeodesy.EcefYou() class (pygeodesy.ecef): True
    test 41 pygeodesy.Ellipsoid() class (pygeodesy.ellipsoids): True
    test 42 pygeodesy.Ellipsoid2() class (pygeodesy.ellipsoids): True
    test 43 pygeodesy.Ellipsoids class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 44 pygeodesy.Elliptic() class (pygeodesy.elliptic): True
    test 45 pygeodesy.EllipticError() class (pygeodesy.elliptic): True
    test 46 pygeodesy.Epoch() class (pygeodesy.units): True
    test 47 pygeodesy.Epsg() class (pygeodesy.epsg): True
    test 48 pygeodesy.Equidistant() class (pygeodesy.azimuthal): True
    test 49 pygeodesy.EquidistantKarney() class (pygeodesy.azimuthal): True
    test 50 pygeodesy.Etm() class (pygeodesy.etm): True
    test 51 pygeodesy.ExactTransverseMercator() class (pygeodesy.etm): True
    test 52 pygeodesy.F_D str: True
    test 53 pygeodesy.F_DEG str: True
    test 54 pygeodesy.F_DEG_ str: True
    test 55 pygeodesy.F_DEG__ str: True
    test 56 pygeodesy.F_DM str: True
    test 57 pygeodesy.F_DMS str: True
    test 58 pygeodesy.F_DMS_ str: True
    test 59 pygeodesy.F_DMS__ str: True
    test 60 pygeodesy.F_DM_ str: True
    test 61 pygeodesy.F_DM__ str: True
    test 62 pygeodesy.F_D_ str: True
    test 63 pygeodesy.F_D__ str: True
    test 64 pygeodesy.F_MIN str: True
    test 65 pygeodesy.F_MIN_ str: True
    test 66 pygeodesy.F_MIN__ str: True
    test 67 pygeodesy.F_RAD str: True
    test 68 pygeodesy.F_RAD_ str: True
    test 69 pygeodesy.F_RAD__ str: True
    test 70 pygeodesy.F_SEC str: True
    test 71 pygeodesy.F_SEC_ str: True
    test 72 pygeodesy.F_SEC__ str: True
    test 73 pygeodesy.F__E str: True
    test 74 pygeodesy.F__E_ str: True
    test 75 pygeodesy.F__E__ str: True
    test 76 pygeodesy.F__F str: True
    test 77 pygeodesy.F__F_ str: True
    test 78 pygeodesy.F__F__ str: True
    test 79 pygeodesy.F__G str: True
    test 80 pygeodesy.F__G_ str: True
    test 81 pygeodesy.F__G__ str: True
    test 82 pygeodesy.Fdot() class (pygeodesy.fmath): True
    test 83 pygeodesy.Feet() class (pygeodesy.units): True
    test 84 pygeodesy.Fhorner() class (pygeodesy.fmath): True
    test 85 pygeodesy.Float() class (pygeodesy.units): True
    test 86 pygeodesy.Float_() class (pygeodesy.units): True
    test 87 pygeodesy.Fpolynomial() class (pygeodesy.fmath): True
    test 88 pygeodesy.Frechet() class (pygeodesy.frechet): True
    test 89 pygeodesy.FrechetCosineAndoyerLambert() class (pygeodesy.frechet): True
    test 90 pygeodesy.FrechetCosineForsytheAndoyerLambert() class (pygeodesy.frechet): True
    test 91 pygeodesy.FrechetCosineLaw() class (pygeodesy.frechet): True
    test 92 pygeodesy.FrechetDegrees() class (pygeodesy.frechet): True
    test 93 pygeodesy.FrechetDistanceTo() class (pygeodesy.frechet): True
    test 94 pygeodesy.FrechetEquirectangular() class (pygeodesy.frechet): True
    test 95 pygeodesy.FrechetError() class (pygeodesy.frechet): True
    test 96 pygeodesy.FrechetEuclidean() class (pygeodesy.frechet): True
    test 97 pygeodesy.FrechetFlatLocal() class (pygeodesy.frechet): True
    test 98 pygeodesy.FrechetFlatPolar() class (pygeodesy.frechet): True
    test 99 pygeodesy.FrechetHaversine() class (pygeodesy.frechet): True
    test 100 pygeodesy.FrechetHubeny() class (pygeodesy.frechet): True
    test 101 pygeodesy.FrechetKarney() class (pygeodesy.frechet): True
    test 102 pygeodesy.FrechetRadians() class (pygeodesy.frechet): True
    test 103 pygeodesy.FrechetThomas() class (pygeodesy.frechet): True
    test 104 pygeodesy.FrechetVincentys() class (pygeodesy.frechet): True
    test 105 pygeodesy.Fsum() class (pygeodesy.fmath): True
    test 106 pygeodesy.GARSError() class (pygeodesy.gars): True
    test 107 pygeodesy.Garef() class (pygeodesy.gars): True
    test 108 pygeodesy.Geohash() class (pygeodesy.geohash): True
    test 109 pygeodesy.GeohashError() class (pygeodesy.geohash): True
    test 110 pygeodesy.GeoidError() class (pygeodesy.geoids): True
    test 111 pygeodesy.GeoidG2012B() class (pygeodesy.geoids): True
    test 112 pygeodesy.GeoidKarney() class (pygeodesy.geoids): True
    test 113 pygeodesy.GeoidPGM() class (pygeodesy.geoids): True
    test 114 pygeodesy.Georef() class (pygeodesy.wgrs): True
    test 115 pygeodesy.Gnomonic() class (pygeodesy.azimuthal): True
    test 116 pygeodesy.GnomonicKarney() class (pygeodesy.azimuthal): True
    test 117 pygeodesy.Hausdorff() class (pygeodesy.hausdorff): True
    test 118 pygeodesy.HausdorffCosineAndoyerLambert() class (pygeodesy.hausdorff): True
    test 119 pygeodesy.HausdorffCosineForsytheAndoyerLambert() class (pygeodesy.hausdorff): True
    test 120 pygeodesy.HausdorffCosineLaw() class (pygeodesy.hausdorff): True
    test 121 pygeodesy.HausdorffDegrees() class (pygeodesy.hausdorff): True
    test 122 pygeodesy.HausdorffDistanceTo() class (pygeodesy.hausdorff): True
    test 123 pygeodesy.HausdorffEquirectangular() class (pygeodesy.hausdorff): True
    test 124 pygeodesy.HausdorffError() class (pygeodesy.hausdorff): True
    test 125 pygeodesy.HausdorffEuclidean() class (pygeodesy.hausdorff): True
    test 126 pygeodesy.HausdorffFlatLocal() class (pygeodesy.hausdorff): True
    test 127 pygeodesy.HausdorffFlatPolar() class (pygeodesy.hausdorff): True
    test 128 pygeodesy.HausdorffHaversine() class (pygeodesy.hausdorff): True
    test 129 pygeodesy.HausdorffHubeny() class (pygeodesy.hausdorff): True
    test 130 pygeodesy.HausdorffKarney() class (pygeodesy.hausdorff): True
    test 131 pygeodesy.HausdorffRadians() class (pygeodesy.hausdorff): True
    test 132 pygeodesy.HausdorffThomas() class (pygeodesy.hausdorff): True
    test 133 pygeodesy.HausdorffVincentys() class (pygeodesy.hausdorff): True
    test 134 pygeodesy.Height() class (pygeodesy.units): True
    test 135 pygeodesy.HeightCubic() class (pygeodesy.heights): True
    test 136 pygeodesy.HeightError() class (pygeodesy.heights): True
    test 137 pygeodesy.HeightIDW() class (pygeodesy.deprecated): True
    test 138 pygeodesy.HeightIDW2() class (pygeodesy.deprecated): True
    test 139 pygeodesy.HeightIDW3() class (pygeodesy.deprecated): True
    test 140 pygeodesy.HeightIDWcosineAndoyerLambert() class (pygeodesy.heights): True
    test 141 pygeodesy.HeightIDWcosineForsytheAndoyerLambert() class (pygeodesy.heights): True
    test 142 pygeodesy.HeightIDWcosineLaw() class (pygeodesy.heights): True
    test 143 pygeodesy.HeightIDWdistanceTo() class (pygeodesy.heights): True
    test 144 pygeodesy.HeightIDWequirectangular() class (pygeodesy.heights): True
    test 145 pygeodesy.HeightIDWeuclidean() class (pygeodesy.heights): True
    test 146 pygeodesy.HeightIDWflatLocal() class (pygeodesy.heights): True
    test 147 pygeodesy.HeightIDWflatPolar() class (pygeodesy.heights): True
    test 148 pygeodesy.HeightIDWhaversine() class (pygeodesy.heights): True
    test 149 pygeodesy.HeightIDWhubeny() class (pygeodesy.heights): True
    test 150 pygeodesy.HeightIDWkarney() class (pygeodesy.heights): True
    test 151 pygeodesy.HeightIDWthomas() class (pygeodesy.heights): True
    test 152 pygeodesy.HeightIDWvincentys() class (pygeodesy.heights): True
    test 153 pygeodesy.HeightLSQBiSpline() class (pygeodesy.heights): True
    test 154 pygeodesy.HeightLinear() class (pygeodesy.heights): True
    test 155 pygeodesy.HeightSmoothBiSpline() class (pygeodesy.heights): True
    test 156 pygeodesy.INF float: True
    test 157 pygeodesy.Int() class (pygeodesy.units): True
    test 158 pygeodesy.Int_() class (pygeodesy.units): True
    test 159 pygeodesy.IntersectionError() class (pygeodesy.errors): True
    test 160 pygeodesy.LCCError() class (pygeodesy.lcc): True
    test 161 pygeodesy.Lam() class (pygeodesy.units): True
    test 162 pygeodesy.Lam_() class (pygeodesy.units): True
    test 163 pygeodesy.LambertEqualArea() class (pygeodesy.azimuthal): True
    test 164 pygeodesy.Lat() class (pygeodesy.units): True
    test 165 pygeodesy.LatLon2psxy() class (pygeodesy.points): True
    test 166 pygeodesy.LatLon_() class (pygeodesy.points): True
    test 167 pygeodesy.Lat_() class (pygeodesy.units): True
    test 168 pygeodesy.LazyImportError() class (pygeodesy.lazily): True
    test 169 pygeodesy.Lcc() class (pygeodesy.lcc): True
    test 170 pygeodesy.LenError() class (pygeodesy.errors): True
    test 171 pygeodesy.LimitError() class (pygeodesy.errors): True
    test 172 pygeodesy.Lon() class (pygeodesy.units): True
    test 173 pygeodesy.Lon_() class (pygeodesy.units): True
    test 174 pygeodesy.MANTIS int: True
    test 175 pygeodesy.MAX float: True
    test 176 pygeodesy.MGRSError() class (pygeodesy.mgrs): True
    test 177 pygeodesy.MIN float: True
    test 178 pygeodesy.Meter() class (pygeodesy.units): True
    test 179 pygeodesy.Mgrs() class (pygeodesy.mgrs): True
    test 180 pygeodesy.NAN float: True
    test 181 pygeodesy.NEG0 float: True
    test 182 pygeodesy.NN str: True
    test 183 pygeodesy.Northing() class (pygeodesy.units): True
    test 184 pygeodesy.Number_() class (pygeodesy.units): True
    test 185 pygeodesy.Numpy2LatLon() class (pygeodesy.points): True
    test 186 pygeodesy.OK str: True
    test 187 pygeodesy.OSGRError() class (pygeodesy.osgr): True
    test 188 pygeodesy.Orthographic() class (pygeodesy.azimuthal): True
    test 189 pygeodesy.Osgr() class (pygeodesy.osgr): True
    test 190 pygeodesy.PGMError() class (pygeodesy.geoids): True
    test 191 pygeodesy.PI float: True
    test 192 pygeodesy.PI2 float: True
    test 193 pygeodesy.PI4 float: True
    test 194 pygeodesy.PI_2 float: True
    test 195 pygeodesy.PI_4 float: True
    test 196 pygeodesy.ParseError() class (pygeodesy.errors): True
    test 197 pygeodesy.Phi() class (pygeodesy.units): True
    test 198 pygeodesy.Phi_() class (pygeodesy.units): True
    test 199 pygeodesy.PointsError() class (pygeodesy.errors): True
    test 200 pygeodesy.Precision_() class (pygeodesy.units): True
    test 201 pygeodesy.R_FM float (pygeodesy.units): True
    test 202 pygeodesy.R_KM float (pygeodesy.units): True
    test 203 pygeodesy.R_M float: True
    test 204 pygeodesy.R_MA float (pygeodesy.units): True
    test 205 pygeodesy.R_MB float (pygeodesy.units): True
    test 206 pygeodesy.R_NM float (pygeodesy.units): True
    test 207 pygeodesy.R_SM float (pygeodesy.units): True
    test 208 pygeodesy.R_VM float (pygeodesy.units): True
    test 209 pygeodesy.Radians() class (pygeodesy.units): True
    test 210 pygeodesy.Radians2() class (pygeodesy.units): True
    test 211 pygeodesy.Radius() class (pygeodesy.units): True
    test 212 pygeodesy.Radius_() class (pygeodesy.units): True
    test 213 pygeodesy.RangeError() class (pygeodesy.errors): True
    test 214 pygeodesy.RefFrame() class (pygeodesy.trf): True
    test 215 pygeodesy.RefFrameError() class (pygeodesy.deprecated): True
    test 216 pygeodesy.RefFrames class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 217 pygeodesy.S_DEG str: True
    test 218 pygeodesy.S_MIN str: True
    test 219 pygeodesy.S_RAD str: True
    test 220 pygeodesy.S_SEC str: True
    test 221 pygeodesy.S_SEP str: True
    test 222 pygeodesy.Scalar() class (pygeodesy.units): True
    test 223 pygeodesy.Scalar_() class (pygeodesy.units): True
    test 224 pygeodesy.SciPyError() class (pygeodesy.errors): True
    test 225 pygeodesy.SciPyWarning() class (pygeodesy.errors): True
    test 226 pygeodesy.Stereographic() class (pygeodesy.azimuthal): True
    test 227 pygeodesy.Str() class (pygeodesy.units): True
    test 228 pygeodesy.TRFError() class (pygeodesy.errors): True
    test 229 pygeodesy.Transform() class (pygeodesy.datums): True
    test 230 pygeodesy.Transforms class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 231 pygeodesy.Tuple2LatLon() class (pygeodesy.points): True
    test 232 pygeodesy.UPSError() class (pygeodesy.ups): True
    test 233 pygeodesy.UTMError() class (pygeodesy.utm): True
    test 234 pygeodesy.UTMUPSError() class (pygeodesy.utmups): True
    test 235 pygeodesy.UnitError() class (pygeodesy.errors): True
    test 236 pygeodesy.Ups() class (pygeodesy.ups): True
    test 237 pygeodesy.Utm() class (pygeodesy.utm): True
    test 238 pygeodesy.UtmUps() function (pygeodesy.utmups): True
    test 239 pygeodesy.Vector3d() class (pygeodesy.vector3d): True
    test 240 pygeodesy.VectorError() class (pygeodesy.vector3d): True
    test 241 pygeodesy.VincentyError() class (pygeodesy.ellipsoidalVincenty): True
    test 242 pygeodesy.WGRSError() class (pygeodesy.wgrs): True
    test 243 pygeodesy.WebMercatorError() class (pygeodesy.webmercator): True
    test 244 pygeodesy.Wm() class (pygeodesy.webmercator): True
    test 245 pygeodesy.Zone() class (pygeodesy.units): True
    test 246 pygeodesy.a_b2e() function (pygeodesy.ellipsoids): True
    test 247 pygeodesy.a_b2e2() function (pygeodesy.ellipsoids): True
    test 248 pygeodesy.a_b2e22() function (pygeodesy.ellipsoids): True
    test 249 pygeodesy.a_b2e32() function (pygeodesy.ellipsoids): True
    test 250 pygeodesy.a_b2f() function (pygeodesy.ellipsoids): True
    test 251 pygeodesy.a_b2f2() function (pygeodesy.ellipsoids): True
    test 252 pygeodesy.a_b2f_() function (pygeodesy.ellipsoids): True
    test 253 pygeodesy.a_b2n() function (pygeodesy.ellipsoids): True
    test 254 pygeodesy.a_f2Tuple() class (pygeodesy.ellipsoids): True
    test 255 pygeodesy.a_f2b() function (pygeodesy.ellipsoids): True
    test 256 pygeodesy.a_f_2b() function (pygeodesy.ellipsoids): True
    test 257 pygeodesy.acos1() function (pygeodesy.utily): True
    test 258 pygeodesy.albers module: True
    test 259 pygeodesy.anStr() function (pygeodesy.deprecated): True
    test 260 pygeodesy.anstr() function (pygeodesy.streprs): True
    test 261 pygeodesy.antipode() function (pygeodesy.formy): True
    test 262 pygeodesy.antipode_() function (pygeodesy.formy): True
    test 263 pygeodesy.areaOf() function (pygeodesy.points): True
    test 264 pygeodesy.areaof() function (pygeodesy.deprecated): True
    test 265 pygeodesy.asin1() function (pygeodesy.utily): True
    test 266 pygeodesy.atan2b() function (pygeodesy.utily): True
    test 267 pygeodesy.atan2d() function (pygeodesy.utily): True
    test 268 pygeodesy.attrs() function (pygeodesy.streprs): True
    test 269 pygeodesy.azimuthal module: True
    test 270 pygeodesy.b_f2a() function (pygeodesy.ellipsoids): True
    test 271 pygeodesy.b_f_2a() function (pygeodesy.ellipsoids): True
    test 272 pygeodesy.bases module: True
    test 273 pygeodesy.basics module: True
    test 274 pygeodesy.bearing() function (pygeodesy.formy): True
    test 275 pygeodesy.bearingDMS() function (pygeodesy.dms): True
    test 276 pygeodesy.bearing_() function (pygeodesy.formy): True
    test 277 pygeodesy.bounds() function (pygeodesy.deprecated): True
    test 278 pygeodesy.boundsOf() function (pygeodesy.points): True
    test 279 pygeodesy.callername() function (pygeodesy.named): True
    test 280 pygeodesy.cbrt() function (pygeodesy.fmath): True
    test 281 pygeodesy.cbrt2() function (pygeodesy.fmath): True
    test 282 pygeodesy.centroidOf() function (pygeodesy.points): True
    test 283 pygeodesy.classname() function (pygeodesy.named): True
    test 284 pygeodesy.classnaming() function (pygeodesy.named): True
    test 285 pygeodesy.clipCS3() function (pygeodesy.clipy): True
    test 286 pygeodesy.clipDMS() function (pygeodesy.deprecated): True
    test 287 pygeodesy.clipDegrees() function (pygeodesy.dms): True
    test 288 pygeodesy.clipRadians() function (pygeodesy.dms): True
    test 289 pygeodesy.clipSH() function (pygeodesy.clipy): True
    test 290 pygeodesy.clipSH3() function (pygeodesy.clipy): True
    test 291 pygeodesy.clipStr() function (pygeodesy.deprecated): True
    test 292 pygeodesy.clips() function (pygeodesy.basics): True
    test 293 pygeodesy.clipy module: True
    test 294 pygeodesy.compassAngle() function (pygeodesy.formy): True
    test 295 pygeodesy.compassDMS() function (pygeodesy.dms): True
    test 296 pygeodesy.compassPoint() function (pygeodesy.dms): True
    test 297 pygeodesy.cosineAndoyerLambert() function (pygeodesy.formy): True
    test 298 pygeodesy.cosineAndoyerLambert_() function (pygeodesy.formy): True
    test 299 pygeodesy.cosineForsytheAndoyerLambert() function (pygeodesy.formy): True
    test 300 pygeodesy.cosineForsytheAndoyerLambert_() function (pygeodesy.formy): True
    test 301 pygeodesy.cosineLaw() function (pygeodesy.formy): True
    test 302 pygeodesy.cosineLaw_() function (pygeodesy.formy): True
    test 303 pygeodesy.crosserrors() function (pygeodesy.errors): True
    test 304 pygeodesy.css module: True
    test 305 pygeodesy.date2epoch() function (pygeodesy.trf): True
    test 306 pygeodesy.datum module: True
    test 307 pygeodesy.datums module: True
    test 308 pygeodesy.decodeEPSG2() function (pygeodesy.deprecated): True
    test 309 pygeodesy.degDMS() function (pygeodesy.dms): True
    test 310 pygeodesy.degrees type builtin_function_or_method (math): True
    test 311 pygeodesy.degrees180() function (pygeodesy.utily): True
    test 312 pygeodesy.degrees2m() function (pygeodesy.utily): True
    test 313 pygeodesy.degrees360() function (pygeodesy.utily): True
    test 314 pygeodesy.degrees90() function (pygeodesy.utily): True
    test 315 pygeodesy.deprecated module: True
    test 316 pygeodesy.dms module: True
    test 317 pygeodesy.ecef module: True
    test 318 pygeodesy.egmGeoidHeights() function (pygeodesy.geoids): True
    test 319 pygeodesy.elevation2() function (pygeodesy.elevations): True
    test 320 pygeodesy.elevations module: True
    test 321 pygeodesy.ellipsoidalKarney module: True
    test 322 pygeodesy.ellipsoidalNvector module: True
    test 323 pygeodesy.ellipsoidalVincenty module: True
    test 324 pygeodesy.ellipsoids module: True
    test 325 pygeodesy.elliptic module: True
    test 326 pygeodesy.enStr2() function (pygeodesy.deprecated): True
    test 327 pygeodesy.encodeEPSG() function (pygeodesy.deprecated): True
    test 328 pygeodesy.enstr2() function (pygeodesy.streprs): True
    test 329 pygeodesy.epoch2date() function (pygeodesy.trf): True
    test 330 pygeodesy.epsg module: True
    test 331 pygeodesy.equidistant() function (pygeodesy.azimuthal): True
    test 332 pygeodesy.equirectangular() function (pygeodesy.formy): True
    test 333 pygeodesy.equirectangular3() function (pygeodesy.deprecated): True
    test 334 pygeodesy.equirectangular_() function (pygeodesy.formy): True
    test 335 pygeodesy.errors module: True
    test 336 pygeodesy.etm module: True
    test 337 pygeodesy.euclid() function (pygeodesy.fmath): True
    test 338 pygeodesy.euclid_() function (pygeodesy.fmath): True
    test 339 pygeodesy.euclidean() function (pygeodesy.formy): True
    test 340 pygeodesy.euclidean_() function (pygeodesy.formy): True
    test 341 pygeodesy.exception_chaining() function (pygeodesy.errors): True
    test 342 pygeodesy.f2e2() function (pygeodesy.ellipsoids): True
    test 343 pygeodesy.f2e22() function (pygeodesy.ellipsoids): True
    test 344 pygeodesy.f2e32() function (pygeodesy.ellipsoids): True
    test 345 pygeodesy.f2f2() function (pygeodesy.ellipsoids): True
    test 346 pygeodesy.f2f_() function (pygeodesy.ellipsoids): True
    test 347 pygeodesy.f2n() function (pygeodesy.ellipsoids): True
    test 348 pygeodesy.fStr() function (pygeodesy.deprecated): True
    test 349 pygeodesy.fStrzs() function (pygeodesy.deprecated): True
    test 350 pygeodesy.f_2f() function (pygeodesy.ellipsoids): True
    test 351 pygeodesy.false2f() function (pygeodesy.deprecated): True
    test 352 pygeodesy.falsed2f() function (pygeodesy.deprecated): True
    test 353 pygeodesy.favg() function (pygeodesy.fmath): True
    test 354 pygeodesy.fdot() function (pygeodesy.fmath): True
    test 355 pygeodesy.fdot3() function (pygeodesy.fmath): True
    test 356 pygeodesy.fhorner() function (pygeodesy.fmath): True
    test 357 pygeodesy.fidw() function (pygeodesy.fmath): True
    test 358 pygeodesy.flatLocal() function (pygeodesy.formy): True
    test 359 pygeodesy.flatLocal_() function (pygeodesy.formy): True
    test 360 pygeodesy.flatPolar() function (pygeodesy.formy): True
    test 361 pygeodesy.flatPolar_() function (pygeodesy.formy): True
    test 362 pygeodesy.fmath module: True
    test 363 pygeodesy.fmean() function (pygeodesy.fmath): True
    test 364 pygeodesy.formy module: True
    test 365 pygeodesy.fpolynomial() function (pygeodesy.fmath): True
    test 366 pygeodesy.fpowers() function (pygeodesy.fmath): True
    test 367 pygeodesy.fprod() function (pygeodesy.fmath): True
    test 368 pygeodesy.fractional() function (pygeodesy.frechet): True
    test 369 pygeodesy.frange() function (pygeodesy.fmath): True
    test 370 pygeodesy.frechet module: True
    test 371 pygeodesy.frechet_() function (pygeodesy.frechet): True
    test 372 pygeodesy.freduce type builtin_function_or_method (_functools): True
    test 373 pygeodesy.fstr() function (pygeodesy.streprs): True
    test 374 pygeodesy.fstrzs() function (pygeodesy.streprs): True
    test 375 pygeodesy.fsum type builtin_function_or_method (math): True
    test 376 pygeodesy.fsum_() function (pygeodesy.fmath): True
    test 377 pygeodesy.ft2m() function (pygeodesy.utily): True
    test 378 pygeodesy.gars module: True
    test 379 pygeodesy.geohash module: True
    test 380 pygeodesy.geoidHeight2() function (pygeodesy.elevations): True
    test 381 pygeodesy.geoids module: True
    test 382 pygeodesy.gnomonic() function (pygeodesy.azimuthal): True
    test 383 pygeodesy.halfs2() function (pygeodesy.basics): True
    test 384 pygeodesy.hausdorff module: True
    test 385 pygeodesy.hausdorff_() function (pygeodesy.hausdorff): True
    test 386 pygeodesy.haversine() function (pygeodesy.formy): True
    test 387 pygeodesy.haversine_() function (pygeodesy.formy): True
    test 388 pygeodesy.heightOf() function (pygeodesy.formy): True
    test 389 pygeodesy.heights module: True
    test 390 pygeodesy.horizon() function (pygeodesy.formy): True
    test 391 pygeodesy.hstr() function (pygeodesy.streprs): True
    test 392 pygeodesy.hubeny() function (pygeodesy.formy): True
    test 393 pygeodesy.hubeny_() function (pygeodesy.formy): True
    test 394 pygeodesy.hypot type builtin_function_or_method (math): True
    test 395 pygeodesy.hypot1() function (pygeodesy.fmath): True
    test 396 pygeodesy.hypot2() function (pygeodesy.fmath): True
    test 397 pygeodesy.hypot2_() function (pygeodesy.fmath): True
    test 398 pygeodesy.hypot3() function (pygeodesy.deprecated): True
    test 399 pygeodesy.hypot_() function (pygeodesy.fmath): True
    test 400 pygeodesy.inStr() function (pygeodesy.deprecated): True
    test 401 pygeodesy.instr() function (pygeodesy.streprs): True
    test 402 pygeodesy.interns module: True
    test 403 pygeodesy.intersections2() function (pygeodesy.formy): True
    test 404 pygeodesy.isLazy type NoneType: True
    test 405 pygeodesy.isNumpy2() function (pygeodesy.utily): True
    test 406 pygeodesy.isPoints2() function (pygeodesy.utily): True
    test 407 pygeodesy.isTuple2() function (pygeodesy.utily): True
    test 408 pygeodesy.isantipode() function (pygeodesy.formy): True
    test 409 pygeodesy.isantipode_() function (pygeodesy.formy): True
    test 410 pygeodesy.isclass() function (inspect): True
    test 411 pygeodesy.isclockwise() function (pygeodesy.points): True
    test 412 pygeodesy.iscolinearWith() function (pygeodesy.vector3d): True
    test 413 pygeodesy.isconvex() function (pygeodesy.points): True
    test 414 pygeodesy.isconvex_() function (pygeodesy.points): True
    test 415 pygeodesy.isenclosedBy() function (pygeodesy.points): True
    test 416 pygeodesy.isenclosedby() function (pygeodesy.deprecated): True
    test 417 pygeodesy.isfinite() function (pygeodesy.basics): True
    test 418 pygeodesy.isidentifier() function (pygeodesy.basics): True
    test 419 pygeodesy.isinf type builtin_function_or_method (math): True
    test 420 pygeodesy.isint() function (pygeodesy.basics): True
    test 421 pygeodesy.iskeyword type builtin_function_or_method: True
    test 422 pygeodesy.isnan type builtin_function_or_method (math): True
    test 423 pygeodesy.isneg0() function (pygeodesy.basics): True
    test 424 pygeodesy.ispolar() function (pygeodesy.points): True
    test 425 pygeodesy.isscalar() function (pygeodesy.basics): True
    test 426 pygeodesy.issequence() function (pygeodesy.basics): True
    test 427 pygeodesy.isstr() function (pygeodesy.basics): True
    test 428 pygeodesy.issubclassof() function (pygeodesy.basics): True
    test 429 pygeodesy.iterNumpy2() function (pygeodesy.utily): True
    test 430 pygeodesy.iterNumpy2over() function (pygeodesy.utily): True
    test 431 pygeodesy.joined() function (pygeodesy.interns): True
    test 432 pygeodesy.joined_() function (pygeodesy.interns): True
    test 433 pygeodesy.karney module: True
    test 434 pygeodesy.latDMS() function (pygeodesy.dms): True
    test 435 pygeodesy.latlon2n_xyz() function (pygeodesy.formy): True
    test 436 pygeodesy.latlonDMS() function (pygeodesy.dms): True
    test 437 pygeodesy.lazily module: True
    test 438 pygeodesy.lcc module: True
    test 439 pygeodesy.len2() function (pygeodesy.basics): True
    test 440 pygeodesy.limiterrors() function (pygeodesy.errors): True
    test 441 pygeodesy.lonDMS() function (pygeodesy.dms): True
    test 442 pygeodesy.luneOf() function (pygeodesy.points): True
    test 443 pygeodesy.m2NM() function (pygeodesy.utily): True
    test 444 pygeodesy.m2SM() function (pygeodesy.utily): True
    test 445 pygeodesy.m2degrees() function (pygeodesy.utily): True
    test 446 pygeodesy.m2ft() function (pygeodesy.utily): True
    test 447 pygeodesy.m2km() function (pygeodesy.utily): True
    test 448 pygeodesy.map1() function (pygeodesy.basics): True
    test 449 pygeodesy.map2() function (pygeodesy.basics): True
    test 450 pygeodesy.mgrs module: True
    test 451 pygeodesy.modulename() function (pygeodesy.named): True
    test 452 pygeodesy.n2e2() function (pygeodesy.ellipsoids): True
    test 453 pygeodesy.n2f() function (pygeodesy.ellipsoids): True
    test 454 pygeodesy.n_xyz2latlon() function (pygeodesy.formy): True
    test 455 pygeodesy.n_xyz2philam() function (pygeodesy.formy): True
    test 456 pygeodesy.named module: True
    test 457 pygeodesy.namedTuples module: True
    test 458 pygeodesy.nameof() function (pygeodesy.named): True
    test 459 pygeodesy.nearestOn3() function (pygeodesy.deprecated): True
    test 460 pygeodesy.nearestOn4() function (pygeodesy.deprecated): True
    test 461 pygeodesy.nearestOn5() function (pygeodesy.points): True
    test 462 pygeodesy.normDMS() function (pygeodesy.dms): True
    test 463 pygeodesy.notImplemented() function (pygeodesy.named): True
    test 464 pygeodesy.notOverloaded() function (pygeodesy.named): True
    test 465 pygeodesy.nvector module: True
    test 466 pygeodesy.osgr module: True
    test 467 pygeodesy.pairs() function (pygeodesy.streprs): True
    test 468 pygeodesy.parse3d() function (pygeodesy.vector3d): True
    test 469 pygeodesy.parse3llh() function (pygeodesy.dms): True
    test 470 pygeodesy.parseDDDMMSS() function (pygeodesy.dms): True
    test 471 pygeodesy.parseDMS() function (pygeodesy.dms): True
    test 472 pygeodesy.parseDMS2() function (pygeodesy.dms): True
    test 473 pygeodesy.parseETM5() function (pygeodesy.etm): True
    test 474 pygeodesy.parseMGRS() function (pygeodesy.mgrs): True
    test 475 pygeodesy.parseOSGR() function (pygeodesy.osgr): True
    test 476 pygeodesy.parseRad() function (pygeodesy.dms): True
    test 477 pygeodesy.parseUPS5() function (pygeodesy.ups): True
    test 478 pygeodesy.parseUTM() function (pygeodesy.deprecated): True
    test 479 pygeodesy.parseUTM5() function (pygeodesy.utm): True
    test 480 pygeodesy.parseUTMUPS5() function (pygeodesy.utmups): True
    test 481 pygeodesy.parseWM() function (pygeodesy.webmercator): True
    test 482 pygeodesy.perimeterOf() function (pygeodesy.points): True
    test 483 pygeodesy.perimeterof() function (pygeodesy.deprecated): True
    test 484 pygeodesy.philam2n_xyz() function (pygeodesy.formy): True
    test 485 pygeodesy.points module: True
    test 486 pygeodesy.points2() function (pygeodesy.formy): True
    test 487 pygeodesy.polygon() function (pygeodesy.deprecated): True
    test 488 pygeodesy.precision() function (pygeodesy.dms): True
    test 489 pygeodesy.property_RO() class (pygeodesy.basics): True
    test 490 pygeodesy.property_doc_() function (pygeodesy.basics): True
    test 491 pygeodesy.pygeodesy_abspath str: True
    test 492 pygeodesy.quadOf() function (pygeodesy.points): True
    test 493 pygeodesy.radians type builtin_function_or_method (math): True
    test 494 pygeodesy.radiansPI() function (pygeodesy.utily): True
    test 495 pygeodesy.radiansPI2() function (pygeodesy.utily): True
    test 496 pygeodesy.radiansPI_2() function (pygeodesy.utily): True
    test 497 pygeodesy.radical2() function (pygeodesy.formy): True
    test 498 pygeodesy.randomrangenerator() function (pygeodesy.hausdorff): True
    test 499 pygeodesy.rangerrors() function (pygeodesy.errors): True
    test 500 pygeodesy.reprs() function (pygeodesy.streprs): True
    test 501 pygeodesy.scalar() function (pygeodesy.deprecated): True
    test 502 pygeodesy.simplify module: True
    test 503 pygeodesy.simplify1() function (pygeodesy.simplify): True
    test 504 pygeodesy.simplify2() function (pygeodesy.deprecated): True
    test 505 pygeodesy.simplifyRDP() function (pygeodesy.simplify): True
    test 506 pygeodesy.simplifyRDPm() function (pygeodesy.simplify): True
    test 507 pygeodesy.simplifyRW() function (pygeodesy.simplify): True
    test 508 pygeodesy.simplifyVW() function (pygeodesy.simplify): True
    test 509 pygeodesy.simplifyVWm() function (pygeodesy.simplify): True
    test 510 pygeodesy.sincos2() function (pygeodesy.utily): True
    test 511 pygeodesy.sincos2d() function (pygeodesy.utily): True
    test 512 pygeodesy.sphericalNvector module: True
    test 513 pygeodesy.sphericalTrigonometry module: True
    test 514 pygeodesy.splice() function (pygeodesy.utily): True
    test 515 pygeodesy.sqrt3() function (pygeodesy.fmath): True
    test 516 pygeodesy.streprs module: True
    test 517 pygeodesy.strs() function (pygeodesy.streprs): True
    test 518 pygeodesy.tanPI_2_2() function (pygeodesy.utily): True
    test 519 pygeodesy.tan_2() function (pygeodesy.utily): True
    test 520 pygeodesy.thomas() function (pygeodesy.formy): True
    test 521 pygeodesy.thomas_() function (pygeodesy.formy): True
    test 522 pygeodesy.toCss() function (pygeodesy.css): True
    test 523 pygeodesy.toDMS() function (pygeodesy.dms): True
    test 524 pygeodesy.toEtm8() function (pygeodesy.etm): True
    test 525 pygeodesy.toLcc() function (pygeodesy.lcc): True
    test 526 pygeodesy.toMgrs() function (pygeodesy.mgrs): True
    test 527 pygeodesy.toOsgr() function (pygeodesy.osgr): True
    test 528 pygeodesy.toUps8() function (pygeodesy.ups): True
    test 529 pygeodesy.toUtm() function (pygeodesy.deprecated): True
    test 530 pygeodesy.toUtm8() function (pygeodesy.utm): True
    test 531 pygeodesy.toUtmUps8() function (pygeodesy.utmups): True
    test 532 pygeodesy.toWm() function (pygeodesy.webmercator): True
    test 533 pygeodesy.trf module: True
    test 534 pygeodesy.trilaterate3d2() function (pygeodesy.vector3d): True
    test 535 pygeodesy.ub2str() function (pygeodesy.basics): True
    test 536 pygeodesy.unStr() function (pygeodesy.deprecated): True
    test 537 pygeodesy.units module: True
    test 538 pygeodesy.unroll180() function (pygeodesy.utily): True
    test 539 pygeodesy.unrollPI() function (pygeodesy.utily): True
    test 540 pygeodesy.unstr() function (pygeodesy.streprs): True
    test 541 pygeodesy.ups module: True
    test 542 pygeodesy.upsZoneBand5() function (pygeodesy.ups): True
    test 543 pygeodesy.utily module: True
    test 544 pygeodesy.utm module: True
    test 545 pygeodesy.utmZoneBand2() function (pygeodesy.deprecated): True
    test 546 pygeodesy.utmZoneBand5() function (pygeodesy.utm): True
    test 547 pygeodesy.utmups module: True
    test 548 pygeodesy.utmupsValidate() function (pygeodesy.utmups): True
    test 549 pygeodesy.utmupsValidateOK() function (pygeodesy.utmups): True
    test 550 pygeodesy.utmupsZoneBand5() function (pygeodesy.utmups): True
    test 551 pygeodesy.vector3d module: True
    test 552 pygeodesy.version str: True
    test 553 pygeodesy.vincentys() function (pygeodesy.formy): True
    test 554 pygeodesy.vincentys_() function (pygeodesy.formy): True
    test 555 pygeodesy.webmercator module: True
    test 556 pygeodesy.wgrs module: True
    test 557 pygeodesy.wrap180() function (pygeodesy.utily): True
    test 558 pygeodesy.wrap360() function (pygeodesy.utily): True
    test 559 pygeodesy.wrap90() function (pygeodesy.utily): True
    test 560 pygeodesy.wrapPI() function (pygeodesy.utily): True
    test 561 pygeodesy.wrapPI2() function (pygeodesy.utily): True
    test 562 pygeodesy.wrapPI_2() function (pygeodesy.utily): True

    testModule(pygeodesy.albers, 20.10.02)
    test 563 albers.AlbersEqualArea() class: True
    test 564 albers.AlbersEqualArea2() class: True
    test 565 albers.AlbersEqualArea4() class: True
    test 566 albers.AlbersEqualAreaCylindrical() class: True
    test 567 albers.AlbersEqualAreaNorth() class: True
    test 568 albers.AlbersEqualAreaSouth() class: True
    test 569 albers.AlbersError() class: True

    testModule(pygeodesy.azimuthal, 20.10.05)
    test 570 azimuthal.AzimuthalError() class: True
    test 571 azimuthal.Equidistant() class: True
    test 572 azimuthal.EquidistantKarney() class: True
    test 573 azimuthal.Gnomonic() class: True
    test 574 azimuthal.GnomonicKarney() class: True
    test 575 azimuthal.LambertEqualArea() class: True
    test 576 azimuthal.Orthographic() class: True
    test 577 azimuthal.Stereographic() class: True
    test 578 azimuthal.equidistant() function: True
    test 579 azimuthal.gnomonic() function: True

    testModule(pygeodesy.deprecated.bases, 20.07.08)

    testModule(pygeodesy.basics, 20.10.08)
    test 580 basics.clips() function: True
    test 581 basics.halfs2() function: True
    test 582 basics.isclass() function (inspect): True
    test 583 basics.isfinite() function: True
    test 584 basics.isidentifier() function: True
    test 585 basics.isinf type builtin_function_or_method (math): True
    test 586 basics.isint() function: True
    test 587 basics.iskeyword type builtin_function_or_method: True
    test 588 basics.isnan type builtin_function_or_method (math): True
    test 589 basics.isneg0() function: True
    test 590 basics.isscalar() function: True
    test 591 basics.issequence() function: True
    test 592 basics.isstr() function: True
    test 593 basics.issubclassof() function: True
    test 594 basics.len2() function: True
    test 595 basics.map1() function: True
    test 596 basics.map2() function: True
    test 597 basics.property_RO() class: True
    test 598 basics.property_doc_() function: True
    test 599 basics.ub2str() function: True

    testModule(pygeodesy.clipy, 20.09.15)
    test 600 clipy.ClipError() class: True
    test 601 clipy.clipCS3() function: True
    test 602 clipy.clipSH() function: True
    test 603 clipy.clipSH3() function: True

    testModule(pygeodesy.css, 20.10.02)
    test 604 css.CSSError() class: True
    test 605 css.CassiniSoldner() class: True
    test 606 css.Css() class: True
    test 607 css.toCss() function: True

    testModule(pygeodesy.deprecated.datum, 20.09.27)
    test 608 datum.Curvature2Tuple() class (pygeodesy.ellipsoids): True
    test 609 datum.Datum() class (pygeodesy.datums): True
    test 610 datum.Datums class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 611 datum.Ellipsoid() class (pygeodesy.ellipsoids): True
    test 612 datum.Ellipsoids class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 613 datum.R_FM float (pygeodesy.units): True
    test 614 datum.R_KM float (pygeodesy.units): True
    test 615 datum.R_M float (pygeodesy.units): True
    test 616 datum.R_MA float (pygeodesy.units): True
    test 617 datum.R_MB float (pygeodesy.units): True
    test 618 datum.R_NM float (pygeodesy.units): True
    test 619 datum.R_SM float (pygeodesy.units): True
    test 620 datum.R_VM float (pygeodesy.units): True
    test 621 datum.Transform() class (pygeodesy.datums): True
    test 622 datum.Transforms class pygeodesy.named._NamedEnum (pygeodesy.named): True

    testModule(pygeodesy.datums, 20.09.27)
    test 623 datums.Datum() class: True
    test 624 datums.Datums class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 625 datums.Transform() class: True
    test 626 datums.Transforms class pygeodesy.named._NamedEnum (pygeodesy.named): True

    testModule(pygeodesy.deprecated, 20.10.09)
    test 627 deprecated.HeightIDW() class: True
    test 628 deprecated.HeightIDW2() class: True
    test 629 deprecated.HeightIDW3() class: True
    test 630 deprecated.OK str: True
    test 631 deprecated.RefFrameError() class: True
    test 632 deprecated.anStr() function: True
    test 633 deprecated.areaof() function: True
    test 634 deprecated.bases module: True
    test 635 deprecated.bounds() function: True
    test 636 deprecated.clipDMS() function: True
    test 637 deprecated.clipStr() function: True
    test 638 deprecated.datum module: True
    test 639 deprecated.decodeEPSG2() function: True
    test 640 deprecated.enStr2() function: True
    test 641 deprecated.encodeEPSG() function: True
    test 642 deprecated.equirectangular3() function: True
    test 643 deprecated.fStr() function: True
    test 644 deprecated.fStrzs() function: True
    test 645 deprecated.false2f() function: True
    test 646 deprecated.falsed2f() function: True
    test 647 deprecated.hypot3() function: True
    test 648 deprecated.inStr() function: True
    test 649 deprecated.isenclosedby() function: True
    test 650 deprecated.nearestOn3() function: True
    test 651 deprecated.nearestOn4() function: True
    test 652 deprecated.nvector module: True
    test 653 deprecated.parseUTM() function: True
    test 654 deprecated.perimeterof() function: True
    test 655 deprecated.polygon() function: True
    test 656 deprecated.scalar() function: True
    test 657 deprecated.simplify2() function: True
    test 658 deprecated.toUtm() function: True
    test 659 deprecated.unStr() function: True
    test 660 deprecated.utmZoneBand2() function: True

    testModule(pygeodesy.dms, 20.10.08)
    test 661 dms.F_D str: True
    test 662 dms.F_DEG str: True
    test 663 dms.F_DEG_ str: True
    test 664 dms.F_DEG__ str: True
    test 665 dms.F_DM str: True
    test 666 dms.F_DMS str: True
    test 667 dms.F_DMS_ str: True
    test 668 dms.F_DMS__ str: True
    test 669 dms.F_DM_ str: True
    test 670 dms.F_DM__ str: True
    test 671 dms.F_D_ str: True
    test 672 dms.F_D__ str: True
    test 673 dms.F_MIN str: True
    test 674 dms.F_MIN_ str: True
    test 675 dms.F_MIN__ str: True
    test 676 dms.F_RAD str: True
    test 677 dms.F_RAD_ str: True
    test 678 dms.F_RAD__ str: True
    test 679 dms.F_SEC str: True
    test 680 dms.F_SEC_ str: True
    test 681 dms.F_SEC__ str: True
    test 682 dms.F__E str: True
    test 683 dms.F__E_ str: True
    test 684 dms.F__E__ str: True
    test 685 dms.F__F str: True
    test 686 dms.F__F_ str: True
    test 687 dms.F__F__ str: True
    test 688 dms.F__G str: True
    test 689 dms.F__G_ str: True
    test 690 dms.F__G__ str: True
    test 691 dms.ParseError() class (pygeodesy.errors): True
    test 692 dms.S_DEG str: True
    test 693 dms.S_MIN str: True
    test 694 dms.S_RAD str: True
    test 695 dms.S_SEC str: True
    test 696 dms.S_SEP str: True
    test 697 dms.bearingDMS() function: True
    test 698 dms.clipDegrees() function: True
    test 699 dms.clipRadians() function: True
    test 700 dms.compassDMS() function: True
    test 701 dms.compassPoint() function: True
    test 702 dms.degDMS() function: True
    test 703 dms.latDMS() function: True
    test 704 dms.latlonDMS() function: True
    test 705 dms.lonDMS() function: True
    test 706 dms.normDMS() function: True
    test 707 dms.parse3llh() function: True
    test 708 dms.parseDDDMMSS() function: True
    test 709 dms.parseDMS() function: True
    test 710 dms.parseDMS2() function: True
    test 711 dms.parseRad() function: True
    test 712 dms.precision() function: True
    test 713 dms.toDMS() function: True

    testModule(pygeodesy.ecef, 20.10.02)
    test 714 ecef.EcefCartesian() class: True
    test 715 ecef.EcefError() class: True
    test 716 ecef.EcefKarney() class: True
    test 717 ecef.EcefMatrix() class: True
    test 718 ecef.EcefSudano() class: True
    test 719 ecef.EcefVeness() class: True
    test 720 ecef.EcefYou() class: True

    testModule(pygeodesy.elevations, 20.09.27)
    test 721 elevations.elevation2() function: True
    test 722 elevations.geoidHeight2() function: True

    testModule(pygeodesy.ellipsoidalKarney, 20.10.08)
    test 723 ellipsoidalKarney.Cartesian() class: True
    test 724 ellipsoidalKarney.LatLon() class: True
    test 725 ellipsoidalKarney.areaOf() function: True
    test 726 ellipsoidalKarney.intersections2() function: True
    test 727 ellipsoidalKarney.isclockwise() function: True
    test 728 ellipsoidalKarney.ispolar() function (pygeodesy.points): True
    test 729 ellipsoidalKarney.nearestOn() function: True
    test 730 ellipsoidalKarney.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 731 ellipsoidalNvector.Cartesian() class: True
    test 732 ellipsoidalNvector.LatLon() class: True
    test 733 ellipsoidalNvector.Ned() class: True
    test 734 ellipsoidalNvector.Nvector() class: True
    test 735 ellipsoidalNvector.meanOf() function: True
    test 736 ellipsoidalNvector.sumOf() function: True
    test 737 ellipsoidalNvector.toNed() function: True

    testModule(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 738 ellipsoidalVincenty.Cartesian() class: True
    test 739 ellipsoidalVincenty.LatLon() class: True
    test 740 ellipsoidalVincenty.VincentyError() class: True
    test 741 ellipsoidalVincenty.intersections2() function: True
    test 742 ellipsoidalVincenty.ispolar() function (pygeodesy.points): True
    test 743 ellipsoidalVincenty.nearestOn() function: True

    testModule(pygeodesy.ellipsoids, 20.10.05)
    test 744 ellipsoids.Ellipsoid() class: True
    test 745 ellipsoids.Ellipsoid2() class: True
    test 746 ellipsoids.Ellipsoids class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 747 ellipsoids.R_FM float (pygeodesy.units): True
    test 748 ellipsoids.R_KM float (pygeodesy.units): True
    test 749 ellipsoids.R_MA float (pygeodesy.units): True
    test 750 ellipsoids.R_MB float (pygeodesy.units): True
    test 751 ellipsoids.R_NM float (pygeodesy.units): True
    test 752 ellipsoids.R_SM float (pygeodesy.units): True
    test 753 ellipsoids.R_VM float (pygeodesy.units): True
    test 754 ellipsoids.a_b2e() function: True
    test 755 ellipsoids.a_b2e2() function: True
    test 756 ellipsoids.a_b2e22() function: True
    test 757 ellipsoids.a_b2e32() function: True
    test 758 ellipsoids.a_b2f() function: True
    test 759 ellipsoids.a_b2f2() function: True
    test 760 ellipsoids.a_b2f_() function: True
    test 761 ellipsoids.a_b2n() function: True
    test 762 ellipsoids.a_f2Tuple() class: True
    test 763 ellipsoids.a_f2b() function: True
    test 764 ellipsoids.a_f_2b() function: True
    test 765 ellipsoids.b_f2a() function: True
    test 766 ellipsoids.b_f_2a() function: True
    test 767 ellipsoids.f2e2() function: True
    test 768 ellipsoids.f2e22() function: True
    test 769 ellipsoids.f2e32() function: True
    test 770 ellipsoids.f2f2() function: True
    test 771 ellipsoids.f2f_() function: True
    test 772 ellipsoids.f2n() function: True
    test 773 ellipsoids.f_2f() function: True
    test 774 ellipsoids.n2e2() function: True
    test 775 ellipsoids.n2f() function: True

    testModule(pygeodesy.elliptic, 20.10.05)
    test 776 elliptic.Elliptic() class: True
    test 777 elliptic.EllipticError() class: True

    testModule(pygeodesy.epsg, 20.09.29)
    test 778 epsg.EPSGError() class: True
    test 779 epsg.Epsg() class: True
    test 780 epsg.decode2() function: True
    test 781 epsg.encode() function: True

    testModule(pygeodesy.errors, 20.10.09)
    test 782 errors.CrossError() class: True
    test 783 errors.IntersectionError() class: True
    test 784 errors.LenError() class: True
    test 785 errors.LimitError() class: True
    test 786 errors.PointsError() class: True
    test 787 errors.RangeError() class: True
    test 788 errors.SciPyError() class: True
    test 789 errors.SciPyWarning() class: True
    test 790 errors.TRFError() class: True
    test 791 errors.UnitError() class: True
    test 792 errors.crosserrors() function: True
    test 793 errors.exception_chaining() function: True
    test 794 errors.limiterrors() function: True
    test 795 errors.rangerrors() function: True

    testModule(pygeodesy.etm, 20.09.27)
    test 796 etm.ETMError() class: True
    test 797 etm.Etm() class: True
    test 798 etm.ExactTransverseMercator() class: True
    test 799 etm.parseETM5() function: True
    test 800 etm.toEtm8() function: True

    testModule(pygeodesy.fmath, 20.10.08)
    test 801 fmath.Fdot() class: True
    test 802 fmath.Fhorner() class: True
    test 803 fmath.Fpolynomial() class: True
    test 804 fmath.Fsum() class: True
    test 805 fmath.cbrt() function: True
    test 806 fmath.cbrt2() function: True
    test 807 fmath.euclid() function: True
    test 808 fmath.euclid_() function: True
    test 809 fmath.favg() function: True
    test 810 fmath.fdot() function: True
    test 811 fmath.fdot3() function: True
    test 812 fmath.fhorner() function: True
    test 813 fmath.fidw() function: True
    test 814 fmath.fmean() function: True
    test 815 fmath.fpolynomial() function: True
    test 816 fmath.fpowers() function: True
    test 817 fmath.fprod() function: True
    test 818 fmath.frange() function: True
    test 819 fmath.freduce type builtin_function_or_method (_functools): True
    test 820 fmath.fsum type builtin_function_or_method (math): True
    test 821 fmath.fsum_() function: True
    test 822 fmath.hypot type builtin_function_or_method (math): True
    test 823 fmath.hypot1() function: True
    test 824 fmath.hypot2() function: True
    test 825 fmath.hypot2_() function: True
    test 826 fmath.hypot_() function: True
    test 827 fmath.sqrt3() function: True

    testModule(pygeodesy.formy, 20.10.03)
    test 828 formy.Radical2Tuple() class: True
    test 829 formy.antipode() function: True
    test 830 formy.antipode_() function: True
    test 831 formy.bearing() function: True
    test 832 formy.bearing_() function: True
    test 833 formy.compassAngle() function: True
    test 834 formy.cosineAndoyerLambert() function: True
    test 835 formy.cosineAndoyerLambert_() function: True
    test 836 formy.cosineForsytheAndoyerLambert() function: True
    test 837 formy.cosineForsytheAndoyerLambert_() function: True
    test 838 formy.cosineLaw() function: True
    test 839 formy.cosineLaw_() function: True
    test 840 formy.equirectangular() function: True
    test 841 formy.equirectangular_() function: True
    test 842 formy.euclidean() function: True
    test 843 formy.euclidean_() function: True
    test 844 formy.flatLocal() function: True
    test 845 formy.flatLocal_() function: True
    test 846 formy.flatPolar() function: True
    test 847 formy.flatPolar_() function: True
    test 848 formy.haversine() function: True
    test 849 formy.haversine_() function: True
    test 850 formy.heightOf() function: True
    test 851 formy.horizon() function: True
    test 852 formy.hubeny() function: True
    test 853 formy.hubeny_() function: True
    test 854 formy.intersections2() function: True
    test 855 formy.isantipode() function: True
    test 856 formy.isantipode_() function: True
    test 857 formy.latlon2n_xyz() function: True
    test 858 formy.n_xyz2latlon() function: True
    test 859 formy.n_xyz2philam() function: True
    test 860 formy.philam2n_xyz() function: True
    test 861 formy.points2() function: True
    test 862 formy.radical2() function: True
    test 863 formy.thomas() function: True
    test 864 formy.thomas_() function: True
    test 865 formy.vincentys() function: True
    test 866 formy.vincentys_() function: True

    testModule(pygeodesy.frechet, 20.10.02)
    test 867 frechet.Frechet() class: True
    test 868 frechet.FrechetCosineAndoyerLambert() class: True
    test 869 frechet.FrechetCosineForsytheAndoyerLambert() class: True
    test 870 frechet.FrechetCosineLaw() class: True
    test 871 frechet.FrechetDegrees() class: True
    test 872 frechet.FrechetDistanceTo() class: True
    test 873 frechet.FrechetEquirectangular() class: True
    test 874 frechet.FrechetError() class: True
    test 875 frechet.FrechetEuclidean() class: True
    test 876 frechet.FrechetFlatLocal() class: True
    test 877 frechet.FrechetFlatPolar() class: True
    test 878 frechet.FrechetHaversine() class: True
    test 879 frechet.FrechetHubeny() class: True
    test 880 frechet.FrechetKarney() class: True
    test 881 frechet.FrechetRadians() class: True
    test 882 frechet.FrechetThomas() class: True
    test 883 frechet.FrechetVincentys() class: True
    test 884 frechet.fractional() function: True
    test 885 frechet.frechet_() function: True

    testModule(pygeodesy.gars, 20.09.27)
    test 886 gars.GARSError() class: True
    test 887 gars.Garef() class: True
    test 888 gars.decode3() function: True
    test 889 gars.encode() function: True
    test 890 gars.precision() function: True
    test 891 gars.resolution() function: True

    testModule(pygeodesy.geohash, 20.10.02)
    test 892 geohash.Geohash() class: True
    test 893 geohash.GeohashError() class: True
    test 894 geohash.bounds() function: True
    test 895 geohash.decode() function: True
    test 896 geohash.decode_error() function: True
    test 897 geohash.distance1() function: True
    test 898 geohash.distance2() function: True
    test 899 geohash.distance3() function: True
    test 900 geohash.encode() function: True
    test 901 geohash.neighbors() function: True
    test 902 geohash.precision() function: True
    test 903 geohash.resolution2() function: True
    test 904 geohash.sizes() function: True

    testModule(pygeodesy.geoids, 20.10.06)
    test 905 geoids.GeoidError() class: True
    test 906 geoids.GeoidG2012B() class: True
    test 907 geoids.GeoidKarney() class: True
    test 908 geoids.GeoidPGM() class: True
    test 909 geoids.PGMError() class: True
    test 910 geoids.egmGeoidHeights() function: True

    testModule(pygeodesy.hausdorff, 20.09.22)
    test 911 hausdorff.Hausdorff() class: True
    test 912 hausdorff.HausdorffCosineAndoyerLambert() class: True
    test 913 hausdorff.HausdorffCosineForsytheAndoyerLambert() class: True
    test 914 hausdorff.HausdorffCosineLaw() class: True
    test 915 hausdorff.HausdorffDegrees() class: True
    test 916 hausdorff.HausdorffDistanceTo() class: True
    test 917 hausdorff.HausdorffEquirectangular() class: True
    test 918 hausdorff.HausdorffError() class: True
    test 919 hausdorff.HausdorffEuclidean() class: True
    test 920 hausdorff.HausdorffFlatLocal() class: True
    test 921 hausdorff.HausdorffFlatPolar() class: True
    test 922 hausdorff.HausdorffHaversine() class: True
    test 923 hausdorff.HausdorffHubeny() class: True
    test 924 hausdorff.HausdorffKarney() class: True
    test 925 hausdorff.HausdorffRadians() class: True
    test 926 hausdorff.HausdorffThomas() class: True
    test 927 hausdorff.HausdorffVincentys() class: True
    test 928 hausdorff.hausdorff_() function: True
    test 929 hausdorff.randomrangenerator() function: True

    testModule(pygeodesy.heights, 20.09.27)
    test 930 heights.HeightCubic() class: True
    test 931 heights.HeightError() class: True
    test 932 heights.HeightIDWcosineAndoyerLambert() class: True
    test 933 heights.HeightIDWcosineForsytheAndoyerLambert() class: True
    test 934 heights.HeightIDWcosineLaw() class: True
    test 935 heights.HeightIDWdistanceTo() class: True
    test 936 heights.HeightIDWequirectangular() class: True
    test 937 heights.HeightIDWeuclidean() class: True
    test 938 heights.HeightIDWflatLocal() class: True
    test 939 heights.HeightIDWflatPolar() class: True
    test 940 heights.HeightIDWhaversine() class: True
    test 941 heights.HeightIDWhubeny() class: True
    test 942 heights.HeightIDWkarney() class: True
    test 943 heights.HeightIDWthomas() class: True
    test 944 heights.HeightIDWvincentys() class: True
    test 945 heights.HeightLSQBiSpline() class: True
    test 946 heights.HeightLinear() class: True
    test 947 heights.HeightSmoothBiSpline() class: True

    testModule(pygeodesy.interns, 20.10.09)
    test 948 interns.EPS float: True
    test 949 interns.EPS1 float: True
    test 950 interns.EPS1_2 float: True
    test 951 interns.EPS_2 float: True
    test 952 interns.INF float: True
    test 953 interns.MANTIS int: True
    test 954 interns.MAX float: True
    test 955 interns.MIN float: True
    test 956 interns.NAN float: True
    test 957 interns.NEG0 float: True
    test 958 interns.NN str: True
    test 959 interns.PI float: True
    test 960 interns.PI2 float: True
    test 961 interns.PI4 float: True
    test 962 interns.PI_2 float: True
    test 963 interns.PI_4 float: True
    test 964 interns.R_M float: True
    test 965 interns.joined() function: True
    test 966 interns.joined_() function: True

    testModule(pygeodesy.karney, 20.09.12)

    testModule(pygeodesy.lazily, 20.10.09)
    test 967 lazily.LazyImportError() class: True
    test 968 lazily.isLazy type NoneType: True

    testModule(pygeodesy.lcc, 20.09.27)
    test 969 lcc.Conic() class: True
    test 970 lcc.Conics class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 971 lcc.LCCError() class: True
    test 972 lcc.Lcc() class: True
    test 973 lcc.toLcc() function: True

    testModule(pygeodesy.mgrs, 20.09.22)
    test 974 mgrs.MGRSError() class: True
    test 975 mgrs.Mgrs() class: True
    test 976 mgrs.parseMGRS() function: True
    test 977 mgrs.toMgrs() function: True

    testModule(pygeodesy.named, 20.10.08)
    test 978 named.callername() function: True
    test 979 named.classname() function: True
    test 980 named.classnaming() function: True
    test 981 named.modulename() function: True
    test 982 named.nameof() function: True
    test 983 named.notImplemented() function: True
    test 984 named.notOverloaded() function: True

    testModule(pygeodesy.namedTuples, 20.09.27)

    testModule(pygeodesy.deprecated.nvector, 20.10.08)
    test 985 nvector.NorthPole class pygeodesy.nvectorBase.NvectorBase (pygeodesy.nvectorBase): True
    test 986 nvector.SouthPole class pygeodesy.nvectorBase.NvectorBase (pygeodesy.nvectorBase): True

    testModule(pygeodesy.osgr, 20.09.22)
    test 987 osgr.OSGRError() class: True
    test 988 osgr.Osgr() class: True
    test 989 osgr.parseOSGR() function: True
    test 990 osgr.toOsgr() function: True

    testModule(pygeodesy.points, 20.09.26)
    test 991 points.LatLon2psxy() class: True
    test 992 points.LatLon_() class: True
    test 993 points.Numpy2LatLon() class: True
    test 994 points.Tuple2LatLon() class: True
    test 995 points.areaOf() function: True
    test 996 points.boundsOf() function: True
    test 997 points.centroidOf() function: True
    test 998 points.isclockwise() function: True
    test 999 points.isconvex() function: True
    test 1000 points.isconvex_() function: True
    test 1001 points.isenclosedBy() function: True
    test 1002 points.ispolar() function: True
    test 1003 points.luneOf() function: True
    test 1004 points.nearestOn5() function: True
    test 1005 points.perimeterOf() function: True
    test 1006 points.quadOf() function: True

    testModule(pygeodesy.simplify, 20.09.10)
    test 1007 simplify.simplify1() function: True
    test 1008 simplify.simplifyRDP() function: True
    test 1009 simplify.simplifyRDPm() function: True
    test 1010 simplify.simplifyRW() function: True
    test 1011 simplify.simplifyVW() function: True
    test 1012 simplify.simplifyVWm() function: True

    testModule(pygeodesy.sphericalNvector, 20.10.02)
    test 1013 sphericalNvector.Cartesian() class: True
    test 1014 sphericalNvector.LatLon() class: True
    test 1015 sphericalNvector.Nvector() class: True
    test 1016 sphericalNvector.areaOf() function: True
    test 1017 sphericalNvector.intersection() function: True
    test 1018 sphericalNvector.ispolar() function (pygeodesy.points): True
    test 1019 sphericalNvector.meanOf() function: True
    test 1020 sphericalNvector.nearestOn2() function: True
    test 1021 sphericalNvector.perimeterOf() function: True
    test 1022 sphericalNvector.sumOf() function: True
    test 1023 sphericalNvector.triangulate() function: True
    test 1024 sphericalNvector.trilaterate() function: True

    testModule(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 1025 sphericalTrigonometry.Cartesian() class: True
    test 1026 sphericalTrigonometry.LatLon() class: True
    test 1027 sphericalTrigonometry.areaOf() function: True
    test 1028 sphericalTrigonometry.intersection() function: True
    test 1029 sphericalTrigonometry.intersections2() function: True
    test 1030 sphericalTrigonometry.isPoleEnclosedBy() function: True
    test 1031 sphericalTrigonometry.ispolar() function (pygeodesy.points): True
    test 1032 sphericalTrigonometry.meanOf() function: True
    test 1033 sphericalTrigonometry.nearestOn2() function: True
    test 1034 sphericalTrigonometry.nearestOn3() function: True
    test 1035 sphericalTrigonometry.perimeterOf() function: True
    test 1036 sphericalTrigonometry.sumOf() function (pygeodesy.vector3d): True

    testModule(pygeodesy.streprs, 20.10.08)
    test 1037 streprs.anstr() function: True
    test 1038 streprs.attrs() function: True
    test 1039 streprs.enstr2() function: True
    test 1040 streprs.fstr() function: True
    test 1041 streprs.fstrzs() function: True
    test 1042 streprs.hstr() function: True
    test 1043 streprs.instr() function: True
    test 1044 streprs.pairs() function: True
    test 1045 streprs.reprs() function: True
    test 1046 streprs.strs() function: True
    test 1047 streprs.unstr() function: True

    testModule(pygeodesy.trf, 20.09.27)
    test 1048 trf.RefFrame() class: True
    test 1049 trf.RefFrames class pygeodesy.named._NamedEnum (pygeodesy.named): True
    test 1050 trf.date2epoch() function: True
    test 1051 trf.epoch2date() function: True

    testModule(pygeodesy.units, 20.10.05)
    test 1052 units.Band() class: True
    test 1053 units.Bearing() class: True
    test 1054 units.Bearing_() class: True
    test 1055 units.Bool() class: True
    test 1056 units.Degrees() class: True
    test 1057 units.Degrees2() class: True
    test 1058 units.Degrees_() class: True
    test 1059 units.Distance() class: True
    test 1060 units.Distance_() class: True
    test 1061 units.Easting() class: True
    test 1062 units.Epoch() class: True
    test 1063 units.Feet() class: True
    test 1064 units.Float() class: True
    test 1065 units.Float_() class: True
    test 1066 units.Height() class: True
    test 1067 units.Int() class: True
    test 1068 units.Int_() class: True
    test 1069 units.Lam() class: True
    test 1070 units.Lam_() class: True
    test 1071 units.Lat() class: True
    test 1072 units.Lat_() class: True
    test 1073 units.Lon() class: True
    test 1074 units.Lon_() class: True
    test 1075 units.Meter() class: True
    test 1076 units.Northing() class: True
    test 1077 units.Number_() class: True
    test 1078 units.Phi() class: True
    test 1079 units.Phi_() class: True
    test 1080 units.Precision_() class: True
    test 1081 units.Radians() class: True
    test 1082 units.Radians2() class: True
    test 1083 units.Radius() class: True
    test 1084 units.Radius_() class: True
    test 1085 units.Scalar() class: True
    test 1086 units.Scalar_() class: True
    test 1087 units.Str() class: True
    test 1088 units.Zone() class: True

    testModule(pygeodesy.ups, 20.10.08)
    test 1089 ups.UPSError() class: True
    test 1090 ups.Ups() class: True
    test 1091 ups.parseUPS5() function: True
    test 1092 ups.toUps8() function: True
    test 1093 ups.upsZoneBand5() function: True

    testModule(pygeodesy.utily, 20.10.02)
    test 1094 utily.acos1() function: True
    test 1095 utily.asin1() function: True
    test 1096 utily.atan2b() function: True
    test 1097 utily.atan2d() function: True
    test 1098 utily.degrees type builtin_function_or_method (math): True
    test 1099 utily.degrees180() function: True
    test 1100 utily.degrees2m() function: True
    test 1101 utily.degrees360() function: True
    test 1102 utily.degrees90() function: True
    test 1103 utily.ft2m() function: True
    test 1104 utily.isNumpy2() function: True
    test 1105 utily.isPoints2() function: True
    test 1106 utily.isTuple2() function: True
    test 1107 utily.iterNumpy2() function: True
    test 1108 utily.iterNumpy2over() function: True
    test 1109 utily.m2NM() function: True
    test 1110 utily.m2SM() function: True
    test 1111 utily.m2degrees() function: True
    test 1112 utily.m2ft() function: True
    test 1113 utily.m2km() function: True
    test 1114 utily.radians type builtin_function_or_method (math): True
    test 1115 utily.radiansPI() function: True
    test 1116 utily.radiansPI2() function: True
    test 1117 utily.radiansPI_2() function: True
    test 1118 utily.sincos2() function: True
    test 1119 utily.sincos2d() function: True
    test 1120 utily.splice() function: True
    test 1121 utily.tanPI_2_2() function: True
    test 1122 utily.tan_2() function: True
    test 1123 utily.unroll180() function: True
    test 1124 utily.unrollPI() function: True
    test 1125 utily.wrap180() function: True
    test 1126 utily.wrap360() function: True
    test 1127 utily.wrap90() function: True
    test 1128 utily.wrapPI() function: True
    test 1129 utily.wrapPI2() function: True
    test 1130 utily.wrapPI_2() function: True

    testModule(pygeodesy.utm, 20.10.08)
    test 1131 utm.UTMError() class: True
    test 1132 utm.Utm() class: True
    test 1133 utm.parseUTM5() function: True
    test 1134 utm.toUtm8() function: True
    test 1135 utm.utmZoneBand5() function: True

    testModule(pygeodesy.utmups, 20.10.08)
    test 1136 utmups.UTMUPSError() class: True
    test 1137 utmups.UtmUps() function: True
    test 1138 utmups.parseUTMUPS5() function: True
    test 1139 utmups.toUtmUps8() function: True
    test 1140 utmups.utmupsValidate() function: True
    test 1141 utmups.utmupsValidateOK() function: True
    test 1142 utmups.utmupsZoneBand5() function: True

    testModule(pygeodesy.vector3d, 20.10.08)
    test 1143 vector3d.Vector3d() class: True
    test 1144 vector3d.VectorError() class: True
    test 1145 vector3d.iscolinearWith() function: True
    test 1146 vector3d.parse3d() function: True
    test 1147 vector3d.trilaterate3d2() function: True

    testModule(pygeodesy.webmercator, 20.09.27)
    test 1148 webmercator.WebMercatorError() class: True
    test 1149 webmercator.Wm() class: True
    test 1150 webmercator.parseWM() function: True
    test 1151 webmercator.toWm() function: True

    testModule(pygeodesy.wgrs, 20.10.02)
    test 1152 wgrs.Georef() class: True
    test 1153 wgrs.WGRSError() class: True
    test 1154 wgrs.decode3() function: True
    test 1155 wgrs.decode5() function: True
    test 1156 wgrs.encode() function: True
    test 1157 wgrs.precision() function: True
    test 1158 wgrs.resolution() function: True

    testPublic(pygeodesy, 20.10.09)
    test 1159 AlbersEqualArea() class: True
    test 1160 AlbersEqualArea2() class: True
    test 1161 AlbersEqualArea4() class: True
    test 1162 AlbersEqualAreaCylindrical() class: True
    test 1163 AlbersEqualAreaNorth() class: True
    test 1164 AlbersEqualAreaSouth() class: True
    test 1165 AlbersError() class: True
    test 1166 AzimuthalError() class: True
    test 1167 Band() class: True
    test 1168 Bearing() class: True
    test 1169 Bearing_() class: True
    test 1170 Bool() class: True
    test 1171 CSSError() class: True
    test 1172 CassiniSoldner() class: True
    test 1173 ClipError() class: True
    test 1174 Conic() class: True
    test 1175 Conics class pygeodesy.named._NamedEnum: True
    test 1176 CrossError() class: True
    test 1177 Css() class: True
    test 1178 Datum() class: True
    test 1179 Datums class pygeodesy.named._NamedEnum: True
    test 1180 Degrees() class: True
    test 1181 Degrees2() class: True
    test 1182 Degrees_() class: True
    test 1183 Distance() class: True
    test 1184 Distance_() class: True
    test 1185 EPSGError() class: True
    test 1186 ETMError() class: True
    test 1187 Easting() class: True
    test 1188 EcefCartesian() class: True
    test 1189 EcefError() class: True
    test 1190 EcefKarney() class: True
    test 1191 EcefMatrix() class: True
    test 1192 EcefSudano() class: True
    test 1193 EcefVeness() class: True
    test 1194 EcefYou() class: True
    test 1195 Ellipsoid() class: True
    test 1196 Ellipsoid2() class: True
    test 1197 Ellipsoids class pygeodesy.named._NamedEnum: True
    test 1198 Elliptic() class: True
    test 1199 EllipticError() class: True
    test 1200 Epoch() class: True
    test 1201 Epsg() class: True
    test 1202 Equidistant() class: True
    test 1203 EquidistantKarney() class: True
    test 1204 Etm() class: True
    test 1205 ExactTransverseMercator() class: True
    test 1206 Fdot() class: True
    test 1207 Feet() class: True
    test 1208 Fhorner() class: True
    test 1209 Float() class: True
    test 1210 Float_() class: True
    test 1211 Fpolynomial() class: True
    test 1212 Frechet() class: True
    test 1213 FrechetCosineAndoyerLambert() class: True
    test 1214 FrechetCosineForsytheAndoyerLambert() class: True
    test 1215 FrechetCosineLaw() class: True
    test 1216 FrechetDegrees() class: True
    test 1217 FrechetDistanceTo() class: True
    test 1218 FrechetEquirectangular() class: True
    test 1219 FrechetError() class: True
    test 1220 FrechetEuclidean() class: True
    test 1221 FrechetFlatLocal() class: True
    test 1222 FrechetFlatPolar() class: True
    test 1223 FrechetHaversine() class: True
    test 1224 FrechetHubeny() class: True
    test 1225 FrechetKarney() class: True
    test 1226 FrechetRadians() class: True
    test 1227 FrechetThomas() class: True
    test 1228 FrechetVincentys() class: True
    test 1229 Fsum() class: True
    test 1230 GARSError() class: True
    test 1231 Garef() class: True
    test 1232 Geohash() class: True
    test 1233 GeohashError() class: True
    test 1234 GeoidError() class: True
    test 1235 GeoidG2012B() class: True
    test 1236 GeoidKarney() class: True
    test 1237 GeoidPGM() class: True
    test 1238 Georef() class: True
    test 1239 Gnomonic() class: True
    test 1240 GnomonicKarney() class: True
    test 1241 Hausdorff() class: True
    test 1242 HausdorffCosineAndoyerLambert() class: True
    test 1243 HausdorffCosineForsytheAndoyerLambert() class: True
    test 1244 HausdorffCosineLaw() class: True
    test 1245 HausdorffDegrees() class: True
    test 1246 HausdorffDistanceTo() class: True
    test 1247 HausdorffEquirectangular() class: True
    test 1248 HausdorffError() class: True
    test 1249 HausdorffEuclidean() class: True
    test 1250 HausdorffFlatLocal() class: True
    test 1251 HausdorffFlatPolar() class: True
    test 1252 HausdorffHaversine() class: True
    test 1253 HausdorffHubeny() class: True
    test 1254 HausdorffKarney() class: True
    test 1255 HausdorffRadians() class: True
    test 1256 HausdorffThomas() class: True
    test 1257 HausdorffVincentys() class: True
    test 1258 Height() class: True
    test 1259 HeightCubic() class: True
    test 1260 HeightError() class: True
    test 1261 HeightIDW() class: True
    test 1262 HeightIDW2() class: True
    test 1263 HeightIDW3() class: True
    test 1264 HeightIDWcosineAndoyerLambert() class: True
    test 1265 HeightIDWcosineForsytheAndoyerLambert() class: True
    test 1266 HeightIDWcosineLaw() class: True
    test 1267 HeightIDWdistanceTo() class: True
    test 1268 HeightIDWequirectangular() class: True
    test 1269 HeightIDWeuclidean() class: True
    test 1270 HeightIDWflatLocal() class: True
    test 1271 HeightIDWflatPolar() class: True
    test 1272 HeightIDWhaversine() class: True
    test 1273 HeightIDWhubeny() class: True
    test 1274 HeightIDWkarney() class: True
    test 1275 HeightIDWthomas() class: True
    test 1276 HeightIDWvincentys() class: True
    test 1277 HeightLSQBiSpline() class: True
    test 1278 HeightLinear() class: True
    test 1279 HeightSmoothBiSpline() class: True
    test 1280 Int() class: True
    test 1281 Int_() class: True
    test 1282 IntersectionError() class: True
    test 1283 LCCError() class: True
    test 1284 Lam() class: True
    test 1285 Lam_() class: True
    test 1286 LambertEqualArea() class: True
    test 1287 Lat() class: True
    test 1288 LatLon2psxy() class: True
    test 1289 LatLon_() class: True
    test 1290 Lat_() class: True
    test 1291 LazyImportError() class: True
    test 1292 Lcc() class: True
    test 1293 LenError() class: True
    test 1294 LimitError() class: True
    test 1295 Lon() class: True
    test 1296 Lon_() class: True
    test 1297 MGRSError() class: True
    test 1298 Meter() class: True
    test 1299 Mgrs() class: True
    test 1300 Northing() class: True
    test 1301 Number_() class: True
    test 1302 Numpy2LatLon() class: True
    test 1303 OSGRError() class: True
    test 1304 Orthographic() class: True
    test 1305 Osgr() class: True
    test 1306 PGMError() class: True
    test 1307 ParseError() class: True
    test 1308 Phi() class: True
    test 1309 Phi_() class: True
    test 1310 PointsError() class: True
    test 1311 Precision_() class: True
    test 1312 R_FM float: True
    test 1313 R_KM float: True
    test 1314 R_MA float: True
    test 1315 R_MB float: True
    test 1316 R_NM float: True
    test 1317 R_SM float: True
    test 1318 R_VM float: True
    test 1319 Radians() class: True
    test 1320 Radians2() class: True
    test 1321 Radius() class: True
    test 1322 Radius_() class: True
    test 1323 RangeError() class: True
    test 1324 RefFrame() class: True
    test 1325 RefFrameError() class: True
    test 1326 RefFrames class pygeodesy.named._NamedEnum: True
    test 1327 Scalar() class: True
    test 1328 Scalar_() class: True
    test 1329 SciPyError() class: True
    test 1330 SciPyWarning() class: True
    test 1331 Stereographic() class: True
    test 1332 Str() class: True
    test 1333 TRFError() class: True
    test 1334 Transform() class: True
    test 1335 Transforms class pygeodesy.named._NamedEnum: True
    test 1336 Tuple2LatLon() class: True
    test 1337 UPSError() class: True
    test 1338 UTMError() class: True
    test 1339 UTMUPSError() class: True
    test 1340 UnitError() class: True
    test 1341 Ups() class: True
    test 1342 Utm() class: True
    test 1343 UtmUps() function: True
    test 1344 Vector3d() class: True
    test 1345 VectorError() class: True
    test 1346 VincentyError() class: True
    test 1347 WGRSError() class: True
    test 1348 WebMercatorError() class: True
    test 1349 Wm() class: True
    test 1350 Zone() class: True
    test 1351 a_b2e() function: True
    test 1352 a_b2e2() function: True
    test 1353 a_b2e22() function: True
    test 1354 a_b2e32() function: True
    test 1355 a_b2f() function: True
    test 1356 a_b2f2() function: True
    test 1357 a_b2f_() function: True
    test 1358 a_b2n() function: True
    test 1359 a_f2Tuple() class: True
    test 1360 a_f2b() function: True
    test 1361 a_f_2b() function: True
    test 1362 acos1() function: True
    test 1363 anStr() function: True
    test 1364 anstr() function: True
    test 1365 antipode() function: True
    test 1366 antipode_() function: True
    test 1367 areaOf() function: True
    test 1368 areaof() function: True
    test 1369 asin1() function: True
    test 1370 atan2b() function: True
    test 1371 atan2d() function: True
    test 1372 attrs() function: True
    test 1373 b_f2a() function: True
    test 1374 b_f_2a() function: True
    test 1375 bearing() function: True
    test 1376 bearingDMS() function: True
    test 1377 bearing_() function: True
    test 1378 bounds() function: True
    test 1379 boundsOf() function: True
    test 1380 callername() function: True
    test 1381 cbrt() function: True
    test 1382 cbrt2() function: True
    test 1383 centroidOf() function: True
    test 1384 classname() function: True
    test 1385 classnaming() function: True
    test 1386 clipCS3() function: True
    test 1387 clipDMS() function: True
    test 1388 clipDegrees() function: True
    test 1389 clipRadians() function: True
    test 1390 clipSH() function: True
    test 1391 clipSH3() function: True
    test 1392 clipStr() function: True
    test 1393 clips() function: True
    test 1394 compassAngle() function: True
    test 1395 compassDMS() function: True
    test 1396 compassPoint() function: True
    test 1397 cosineAndoyerLambert() function: True
    test 1398 cosineAndoyerLambert_() function: True
    test 1399 cosineForsytheAndoyerLambert() function: True
    test 1400 cosineForsytheAndoyerLambert_() function: True
    test 1401 cosineLaw() function: True
    test 1402 cosineLaw_() function: True
    test 1403 crosserrors() function: True
    test 1404 date2epoch() function: True
    test 1405 decodeEPSG2() function: True
    test 1406 degDMS() function: True
    test 1407 degrees180() function: True
    test 1408 degrees2m() function: True
    test 1409 degrees360() function: True
    test 1410 degrees90() function: True
    test 1411 egmGeoidHeights() function: True
    test 1412 elevation2() function: True
    test 1413 enStr2() function: True
    test 1414 encodeEPSG() function: True
    test 1415 enstr2() function: True
    test 1416 epoch2date() function: True
    test 1417 equidistant() function: True
    test 1418 equirectangular() function: True
    test 1419 equirectangular3() function: True
    test 1420 equirectangular_() function: True
    test 1421 euclid() function: True
    test 1422 euclid_() function: True
    test 1423 euclidean() function: True
    test 1424 euclidean_() function: True
    test 1425 exception_chaining() function: True
    test 1426 f2e2() function: True
    test 1427 f2e22() function: True
    test 1428 f2e32() function: True
    test 1429 f2f2() function: True
    test 1430 f2f_() function: True
    test 1431 f2n() function: True
    test 1432 fStr() function: True
    test 1433 fStrzs() function: True
    test 1434 f_2f() function: True
    test 1435 false2f() function: True
    test 1436 falsed2f() function: True
    test 1437 favg() function: True
    test 1438 fdot() function: True
    test 1439 fdot3() function: True
    test 1440 fhorner() function: True
    test 1441 fidw() function: True
    test 1442 flatLocal() function: True
    test 1443 flatLocal_() function: True
    test 1444 flatPolar() function: True
    test 1445 flatPolar_() function: True
    test 1446 fmean() function: True
    test 1447 fpolynomial() function: True
    test 1448 fpowers() function: True
    test 1449 fprod() function: True
    test 1450 fractional() function: True
    test 1451 frange() function: True
    test 1452 frechet_() function: True
    test 1453 freduce type builtin_function_or_method: True
    test 1454 fstr() function: True
    test 1455 fstrzs() function: True
    test 1456 fsum_() function: True
    test 1457 ft2m() function: True
    test 1458 geoidHeight2() function: True
    test 1459 gnomonic() function: True
    test 1460 halfs2() function: True
    test 1461 hausdorff_() function: True
    test 1462 haversine() function: True
    test 1463 haversine_() function: True
    test 1464 heightOf() function: True
    test 1465 horizon() function: True
    test 1466 hstr() function: True
    test 1467 hubeny() function: True
    test 1468 hubeny_() function: True
    test 1469 hypot1() function: True
    test 1470 hypot2() function: True
    test 1471 hypot2_() function: True
    test 1472 hypot3() function: True
    test 1473 hypot_() function: True
    test 1474 inStr() function: True
    test 1475 instr() function: True
    test 1476 intersections2() function: True
    test 1477 isNumpy2() function: True
    test 1478 isPoints2() function: True
    test 1479 isTuple2() function: True
    test 1480 isantipode() function: True
    test 1481 isantipode_() function: True
    test 1482 isclass() function: True
    test 1483 isclockwise() function: True
    test 1484 iscolinearWith() function: True
    test 1485 isconvex() function: True
    test 1486 isconvex_() function: True
    test 1487 isenclosedBy() function: True
    test 1488 isenclosedby() function: True
    test 1489 isfinite() function: True
    test 1490 isidentifier() function: True
    test 1491 isint() function: True
    test 1492 iskeyword type builtin_function_or_method: True
    test 1493 isneg0() function: True
    test 1494 ispolar() function: True
    test 1495 isscalar() function: True
    test 1496 issequence() function: True
    test 1497 isstr() function: True
    test 1498 issubclassof() function: True
    test 1499 iterNumpy2() function: True
    test 1500 iterNumpy2over() function: True
    test 1501 joined() function: True
    test 1502 joined_() function: True
    test 1503 latDMS() function: True
    test 1504 latlon2n_xyz() function: True
    test 1505 latlonDMS() function: True
    test 1506 len2() function: True
    test 1507 limiterrors() function: True
    test 1508 lonDMS() function: True
    test 1509 luneOf() function: True
    test 1510 m2NM() function: True
    test 1511 m2SM() function: True
    test 1512 m2degrees() function: True
    test 1513 m2ft() function: True
    test 1514 m2km() function: True
    test 1515 map1() function: True
    test 1516 map2() function: True
    test 1517 modulename() function: True
    test 1518 n2e2() function: True
    test 1519 n2f() function: True
    test 1520 n_xyz2latlon() function: True
    test 1521 n_xyz2philam() function: True
    test 1522 nameof() function: True
    test 1523 nearestOn3() function: True
    test 1524 nearestOn4() function: True
    test 1525 nearestOn5() function: True
    test 1526 normDMS() function: True
    test 1527 notImplemented() function: True
    test 1528 notOverloaded() function: True
    test 1529 pairs() function: True
    test 1530 parse3d() function: True
    test 1531 parse3llh() function: True
    test 1532 parseDDDMMSS() function: True
    test 1533 parseDMS() function: True
    test 1534 parseDMS2() function: True
    test 1535 parseETM5() function: True
    test 1536 parseMGRS() function: True
    test 1537 parseOSGR() function: True
    test 1538 parseRad() function: True
    test 1539 parseUPS5() function: True
    test 1540 parseUTM() function: True
    test 1541 parseUTM5() function: True
    test 1542 parseUTMUPS5() function: True
    test 1543 parseWM() function: True
    test 1544 perimeterOf() function: True
    test 1545 perimeterof() function: True
    test 1546 philam2n_xyz() function: True
    test 1547 points2() function: True
    test 1548 polygon() function: True
    test 1549 precision() function: True
    test 1550 property_RO() class: True
    test 1551 property_doc_() function: True
    test 1552 quadOf() function: True
    test 1553 radiansPI() function: True
    test 1554 radiansPI2() function: True
    test 1555 radiansPI_2() function: True
    test 1556 radical2() function: True
    test 1557 randomrangenerator() function: True
    test 1558 rangerrors() function: True
    test 1559 reprs() function: True
    test 1560 scalar() function: True
    test 1561 simplify1() function: True
    test 1562 simplify2() function: True
    test 1563 simplifyRDP() function: True
    test 1564 simplifyRDPm() function: True
    test 1565 simplifyRW() function: True
    test 1566 simplifyVW() function: True
    test 1567 simplifyVWm() function: True
    test 1568 sincos2() function: True
    test 1569 sincos2d() function: True
    test 1570 splice() function: True
    test 1571 sqrt3() function: True
    test 1572 strs() function: True
    test 1573 tanPI_2_2() function: True
    test 1574 tan_2() function: True
    test 1575 thomas() function: True
    test 1576 thomas_() function: True
    test 1577 toCss() function: True
    test 1578 toDMS() function: True
    test 1579 toEtm8() function: True
    test 1580 toLcc() function: True
    test 1581 toMgrs() function: True
    test 1582 toOsgr() function: True
    test 1583 toUps8() function: True
    test 1584 toUtm() function: True
    test 1585 toUtm8() function: True
    test 1586 toUtmUps8() function: True
    test 1587 toWm() function: True
    test 1588 trilaterate3d2() function: True
    test 1589 ub2str() function: True
    test 1590 unStr() function: True
    test 1591 unroll180() function: True
    test 1592 unrollPI() function: True
    test 1593 unstr() function: True
    test 1594 upsZoneBand5() function: True
    test 1595 utmZoneBand2() function: True
    test 1596 utmZoneBand5() function: True
    test 1597 utmupsValidate() function: True
    test 1598 utmupsValidateOK() function: True
    test 1599 utmupsZoneBand5() function: True
    test 1600 vincentys() function: True
    test 1601 vincentys_() function: True
    test 1602 wrap180() function: True
    test 1603 wrap360() function: True
    test 1604 wrap90() function: True
    test 1605 wrapPI() function: True
    test 1606 wrapPI2() function: True
    test 1607 wrapPI_2() function: True

    all 1607 testModules.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 20.614 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testNamed.py

    testing testNamed.py 20.09.14

    testing _Named() (pygeodesy.named, 20.10.08)
    test 1 _Named: _Named
    test 2 _Named: True
    test 3 _Named: ''
    test 4 Test: Test
    test 5 _Named 'Test': _Named 'Test'
    test 6 _Named 'Test': Test
    test 7 _Named 'Test': Test
    test 8 _Named 'Test': _Named 'Test'
    test 9 _Named 'Test': <_Named 'Test' at 0x10f05d310>  FAILED, KNOWN, expected _Named 'Test'
    test 10 _Named: 

    testing _NamedBase() (pygeodesy.named, 20.10.08)
    test 11 _NamedBase: _NamedBase
    test 12 _NamedBase: True
    test 13 _NamedBase: ''
    test 14 Test: Test
    test 15 _NamedBase 'Test': _NamedBase 'Test'
    test 16 _NamedBase 'Test': Test
    test 17 _NamedBase 'Test': Test
    test 18 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 19 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 20 _NamedBase: 

    testing _NamedDict() (pygeodesy.named, 20.10.08)
    test 21 _NamedDict: _NamedDict
    test 22 _NamedDict: True
    test 23 _NamedDict: ''
    test 24 Test: Test
    test 25 _NamedDict 'Test': _NamedDict 'Test'
    test 26 _NamedDict 'Test': Test
    test 27 _NamedDict 'Test': Test
    test 28 _NamedDict 'Test': {}
    test 29 _NamedDict 'Test': Test()  FAILED, KNOWN, expected {}
    test 30 _NamedDict: 

    testing _NamedEnum('Test',) (pygeodesy.named, 20.10.08)
    test 31 Test: _NamedEnum
    test 32 Test: True
    test 33 Test: 'Test'  FAILED, KNOWN, expected ''
    test 34 Test: Test
    test 35 _NamedEnum 'Test': _NamedEnum 'Test'
    test 36 _NamedEnum 'Test': Test
    test 37 _NamedEnum 'Test': Test
    test 38 _NamedEnum 'Test': Test.
    test 39 _NamedEnum 'Test':   FAILED, KNOWN, expected Test.
    test 40 _NamedEnum: 

    testing _NamedEnumItem() (pygeodesy.named, 20.10.08)
    test 41 _NamedEnumItem: _NamedEnumItem
    test 42 _NamedEnumItem: True
    test 43 _NamedEnumItem: ''
    test 44 Test: Test
    test 45 _NamedEnumItem 'Test': _NamedEnumItem 'Test'
    test 46 _NamedEnumItem 'Test': Test
    test 47 _NamedEnumItem 'Test': Test
    test 48 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 49 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 50 _NamedEnumItem: 

    testing LatLon2Tuple(0, 0) (pygeodesy.named, 20.10.08)
    test 51 LatLon2Tuple: LatLon2Tuple
    test 52 LatLon2Tuple: True
    test 53 LatLon2Tuple: ''
    test 54 Test: Test
    test 55 LatLon2Tuple 'Test': LatLon2Tuple 'Test'
    test 56 LatLon2Tuple 'Test': Test
    test 57 LatLon2Tuple 'Test': Test
    test 58 LatLon2Tuple 'Test': (0, 0)
    test 59 LatLon2Tuple 'Test': Test(lat=0, lon=0)  FAILED, KNOWN, expected (0, 0)
    test 60 LatLon2Tuple: 

    testing NamedDicts (pygeodesy.named, 20.10.08)
    test 61 Neighbors8Dict: Neighbors8Dict
    test 62 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 63 Neighbors8Dict: 8

    testing NamedDicts (pygeodesy.named, 20.10.08)
    test 64 Neighbors8Dict: Neighbors8Dict
    test 65 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 66 Neighbors8Dict: 8

    testing NamedTuples (pygeodesy.namedTuples, 20.09.27)
    test 67 Albers7Tuple: Albers7Tuple
    test 68 Albers7Tuple: 7-Tuple C{(x, y, lat, lon, gamma, scale, datum)}
    test 69 Albers7Tuple: 7
    test 70 Azimuthal7Tuple: Azimuthal7Tuple
    test 71 Azimuthal7Tuple: 7-Tuple C{(x, y, lat, lon, azimuth, scale, datum)}
    test 72 Azimuthal7Tuple: 7
    test 73 ClipCS3Tuple: ClipCS3Tuple
    test 74 ClipCS3Tuple: 3-Tuple C{(start, end, index)}
    test 75 ClipCS3Tuple: 3
    test 76 ClipSH3Tuple: ClipSH3Tuple
    test 77 ClipSH3Tuple: 3-Tuple C{(start, end, original)}
    test 78 ClipSH3Tuple: 3
    test 79 EasNorAziRk4Tuple: EasNorAziRk4Tuple
    test 80 EasNorAziRk4Tuple: 4-Tuple C{(easting, northing, azimuth, reciprocal)}
    test 81 EasNorAziRk4Tuple: 4
    test 82 LatLonAziRk4Tuple: LatLonAziRk4Tuple
    test 83 LatLonAziRk4Tuple: 4-Tuple C{(lat, lon, azimuth, reciprocal)}
    test 84 LatLonAziRk4Tuple: 4
    test 85 Ecef9Tuple: Ecef9Tuple
    test 86 Ecef9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, C, M, datum)}
    test 87 Ecef9Tuple: 9
    test 88 Elevation2Tuple: Elevation2Tuple
    test 89 Elevation2Tuple: 2-Tuple C{(elevation, data_source)}
    test 90 Elevation2Tuple: 2
    test 91 GeoidHeight2Tuple: GeoidHeight2Tuple
    test 92 GeoidHeight2Tuple: 2-Tuple C{(height, model_name)}
    test 93 GeoidHeight2Tuple: 2
    test 94 Ned3Tuple: Ned3Tuple
    test 95 Ned3Tuple: 3-Tuple C{(north, east, down)}
    test 96 Ned3Tuple: 3
    test 97 Curvature2Tuple: Curvature2Tuple
    test 98 Curvature2Tuple: 2-Tuple C{(meridional, prime_vertical)}
    test 99 Curvature2Tuple: 2
    test 100 a_f2Tuple: a_f2Tuple
    test 101 a_f2Tuple: 2-Tuple C{(a, f)}
    test 102 a_f2Tuple: 2
    test 103 Elliptic3Tuple: Elliptic3Tuple
    test 104 Elliptic3Tuple: 3-Tuple C{(sn, cn, dn)}
    test 105 Elliptic3Tuple: 3
    test 106 EasNorExact4Tuple: EasNorExact4Tuple
    test 107 EasNorExact4Tuple: 4-Tuple C{(easting, northing, convergence, scale)}
    test 108 EasNorExact4Tuple: 4
    test 109 LatLonExact4Tuple: LatLonExact4Tuple
    test 110 LatLonExact4Tuple: 4-Tuple C{(lat, lon, convergence, scale)}
    test 111 LatLonExact4Tuple: 4
    test 112 Radical2Tuple: Radical2Tuple
    test 113 Radical2Tuple: 2-Tuple C{(ratio, xline)}
    test 114 Radical2Tuple: 2
    test 115 Frechet6Tuple: Frechet6Tuple
    test 116 Frechet6Tuple: 6-Tuple C{(fd, fi1, fi2, r, n, units)}
    test 117 Frechet6Tuple: 6
    test 118 GeoidHeight5Tuple: GeoidHeight5Tuple
    test 119 GeoidHeight5Tuple: 5-Tuple C{(lat, lon, egm84, egm96, egm2008)}
    test 120 GeoidHeight5Tuple: 5
    test 121 Hausdorff6Tuple: Hausdorff6Tuple
    test 122 Hausdorff6Tuple: 6-Tuple C{(hd, i, j, mn, md, units)}
    test 123 Hausdorff6Tuple: 6
    test 124 Mgrs4Tuple: Mgrs4Tuple
    test 125 Mgrs4Tuple: 4-Tuple C{(zone, digraph, easting, northing)}
    test 126 Mgrs4Tuple: 4
    test 127 Mgrs6Tuple: Mgrs6Tuple
    test 128 Mgrs6Tuple: 6-Tuple C{(zone, digraph, easting, northing, band, datum)}
    test 129 Mgrs6Tuple: 6
    test 130 Bearing2Tuple: Bearing2Tuple
    test 131 Bearing2Tuple: 2-Tuple C{(initial, final)}
    test 132 Bearing2Tuple: 2
    test 133 Bounds2Tuple: Bounds2Tuple
    test 134 Bounds2Tuple: 2-Tuple C{(latlonSW, latlonNE)}
    test 135 Bounds2Tuple: 2
    test 136 Bounds4Tuple: Bounds4Tuple
    test 137 Bounds4Tuple: 4-Tuple C{(latS, lonW, latN, lonE)}
    test 138 Bounds4Tuple: 4
    test 139 Destination2Tuple: Destination2Tuple
    test 140 Destination2Tuple: 2-Tuple C{(destination, final)}
    test 141 Destination2Tuple: 2
    test 142 Destination3Tuple: Destination3Tuple
    test 143 Destination3Tuple: 3-Tuple C{(lat, lon, final)}
    test 144 Destination3Tuple: 3
    test 145 Distance2Tuple: Distance2Tuple
    test 146 Distance2Tuple: 2-Tuple C{(distance, initial)}
    test 147 Distance2Tuple: 2
    test 148 Distance3Tuple: Distance3Tuple
    test 149 Distance3Tuple: 3-Tuple C{(distance, initial, final)}
    test 150 Distance3Tuple: 3
    test 151 Distance4Tuple: Distance4Tuple
    test 152 Distance4Tuple: 4-Tuple C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 153 Distance4Tuple: 4
    test 154 EasNor2Tuple: EasNor2Tuple
    test 155 EasNor2Tuple: 2-Tuple C{(easting, northing)}
    test 156 EasNor2Tuple: 2
    test 157 EasNor3Tuple: EasNor3Tuple
    test 158 EasNor3Tuple: 3-Tuple C{(easting, northing, height)}
    test 159 EasNor3Tuple: 3
    test 160 LatLon2Tuple: LatLon2Tuple
    test 161 LatLon2Tuple: 2-Tuple C{(lat, lon)}
    test 162 LatLon2Tuple: 2
    test 163 LatLon3Tuple: LatLon3Tuple
    test 164 LatLon3Tuple: 3-Tuple C{(lat, lon, height)}
    test 165 LatLon3Tuple: 3
    test 166 LatLon4Tuple: LatLon4Tuple
    test 167 LatLon4Tuple: 4-Tuple C{(lat, lon, height, datum)}
    test 168 LatLon4Tuple: 4
    test 169 LatLonDatum3Tuple: LatLonDatum3Tuple
    test 170 LatLonDatum3Tuple: 3-Tuple C{(lat, lon, datum)}
    test 171 LatLonDatum3Tuple: 3
    test 172 LatLonPrec3Tuple: LatLonPrec3Tuple
    test 173 LatLonPrec3Tuple: 3-Tuple C{(lat, lon, precision)}
    test 174 LatLonPrec3Tuple: 3
    test 175 LatLonPrec5Tuple: LatLonPrec5Tuple
    test 176 LatLonPrec5Tuple: 5-Tuple C{(lat, lon, precision, height, radius)}
    test 177 LatLonPrec5Tuple: 5
    test 178 NearestOn3Tuple: NearestOn3Tuple
    test 179 NearestOn3Tuple: 3-Tuple C{(closest, distance, angle)}
    test 180 NearestOn3Tuple: 3
    test 181 PhiLam2Tuple: PhiLam2Tuple
    test 182 PhiLam2Tuple: 2-Tuple C{(phi, lam)}
    test 183 PhiLam2Tuple: 2
    test 184 PhiLam3Tuple: PhiLam3Tuple
    test 185 PhiLam3Tuple: 3-Tuple C{(phi, lam, height)}
    test 186 PhiLam3Tuple: 3
    test 187 PhiLam4Tuple: PhiLam4Tuple
    test 188 PhiLam4Tuple: 4-Tuple C{(phi, lam, height, datum)}
    test 189 PhiLam4Tuple: 4
    test 190 Points2Tuple: Points2Tuple
    test 191 Points2Tuple: 2-Tuple C{(number, points)}
    test 192 Points2Tuple: 2
    test 193 Trilaterate5Tuple: Trilaterate5Tuple
    test 194 Trilaterate5Tuple: 5-Tuple C{(min, minPoint, max, maxPoint, n)}
    test 195 Trilaterate5Tuple: 5
    test 196 Vector3Tuple: Vector3Tuple
    test 197 Vector3Tuple: 3-Tuple C{(x, y, z)}
    test 198 Vector3Tuple: 3
    test 199 Vector4Tuple: Vector4Tuple
    test 200 Vector4Tuple: 4-Tuple C{(x, y, z, h)}
    test 201 Vector4Tuple: 4
    test 202 NearestOn5Tuple: NearestOn5Tuple
    test 203 NearestOn5Tuple: 5-Tuple C{(lat, lon, distance, angle, height)}
    test 204 NearestOn5Tuple: 5
    test 205 Point3Tuple: Point3Tuple
    test 206 Point3Tuple: 3-Tuple C{(x, y, ll)}
    test 207 Point3Tuple: 3
    test 208 Shape2Tuple: Shape2Tuple
    test 209 Shape2Tuple: 2-Tuple C{(nrows, ncols)}
    test 210 Shape2Tuple: 2
    test 211 LatLonDatum5Tuple: LatLonDatum5Tuple
    test 212 LatLonDatum5Tuple: 5-Tuple C{(lat, lon, datum, convergence, scale)}
    test 213 LatLonDatum5Tuple: 5
    test 214 UtmUps2Tuple: UtmUps2Tuple
    test 215 UtmUps2Tuple: 2-Tuple C{(zone, hemipole)}
    test 216 UtmUps2Tuple: 2
    test 217 UtmUps5Tuple: UtmUps5Tuple
    test 218 UtmUps5Tuple: 5-Tuple C{(zone, hemipole, easting, northing, band)}
    test 219 UtmUps5Tuple: 5
    test 220 UtmUps8Tuple: UtmUps8Tuple
    test 221 UtmUps8Tuple: 8-Tuple C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 222 UtmUps8Tuple: 8
    test 223 UtmUpsLatLon5Tuple: UtmUpsLatLon5Tuple
    test 224 UtmUpsLatLon5Tuple: 5-Tuple C{(zone, band, hemipole, lat, lon)}
    test 225 UtmUpsLatLon5Tuple: 5
    test 226 EasNorRadius3Tuple: EasNorRadius3Tuple
    test 227 EasNorRadius3Tuple: 3-Tuple C{(easting, northing, radius)}
    test 228 EasNorRadius3Tuple: 3

    testing albers.py (pygeodesy.named, 20.10.08)
    test 229 albers.py:295: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}
    test 230 albers.py:402: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}

    testing azimuthal.py (pygeodesy.named, 20.10.08)
    test 231 azimuthal.py:147: L{LatLon2Tuple}C{(lat, lon)}
    test 232 azimuthal.py:292: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 233 azimuthal.py:325: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 234 azimuthal.py:427: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 235 azimuthal.py:455: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 236 azimuthal.py:495: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 237 azimuthal.py:524: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 238 azimuthal.py:599: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 239 azimuthal.py:638: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 240 azimuthal.py:697: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 241 azimuthal.py:727: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 242 azimuthal.py:760: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 243 azimuthal.py:784: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 244 azimuthal.py:818: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 245 azimuthal.py:861: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}

    testing basics.py (pygeodesy.named, 20.10.08)

    testing cartesianBase.py (pygeodesy.named, 20.10.08)
    test 246 cartesianBase.py:173: L{LatLon2Tuple}C{(lat, lon)}
    test 247 cartesianBase.py:179: L{LatLon3Tuple}C{(lat, lon, height)}
    test 248 cartesianBase.py:185: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 249 cartesianBase.py:199: L{PhiLam2Tuple}C{(phi, lam)}
    test 250 cartesianBase.py:205: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 251 cartesianBase.py:211: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 252 cartesianBase.py:218: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 253 cartesianBase.py:241: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 254 cartesianBase.py:263: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 255 cartesianBase.py:293: L{Vector4Tuple}C{(x, y, z, h)}
    test 256 cartesianBase.py:362: L{Vector3Tuple}C{(x, y, z)}
    test 257 cartesianBase.py:374: L{Vector3Tuple}C{(x, y, z)}

    testing clipy.py (pygeodesy.named, 20.10.08)
    test 258 clipy.py:180: L{ClipCS3Tuple}C{(start, end, index)}
    test 259 clipy.py:439: L{ClipSH3Tuple}C{(start, end, original)}

    testing css.py (pygeodesy.named, 20.10.08)
    test 260 css.py:130: L{EasNor2Tuple}C{(easting, northing)}
    test 261 css.py:148: L{EasNorAziRk4Tuple}C{(easting, northing, azimuth, reciprocal)}
    test 262 css.py:205: L{LatLon2Tuple}C{(lat, lon)}
    test 263 css.py:256: L{LatLon2Tuple}C{(lat, lon)}
    test 264 css.py:284: L{LatLonAziRk4Tuple}C{(lat, lon, azimuth, reciprocal)}
    test 265 css.py:432: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 266 css.py:527: L{EasNor3Tuple}C{(easting, northing, height)}

    testing datums.py (pygeodesy.named, 20.10.08)
    test 267 datums.py:201: L{Vector3Tuple}C{(x, y, z)}

    testing dms.py (pygeodesy.named, 20.10.08)
    test 268 dms.py:619: L{LatLon2Tuple}C{(lat, lon)}
    test 269 dms.py:653: L{LatLon3Tuple}C{(lat, lon, height)}

    testing ecef.py (pygeodesy.named, 20.10.08)
    test 270 ecef.py:212: L{Vector3Tuple}C{(x, y, z)}
    test 271 ecef.py:279: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 272 ecef.py:323: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 273 ecef.py:499: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 274 ecef.py:573: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 275 ecef.py:785: L{LatLon2Tuple}C{(lat, lon)}
    test 276 ecef.py:791: L{LatLon3Tuple}C{(lat, lon, height)}
    test 277 ecef.py:797: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 278 ecef.py:818: L{PhiLam2Tuple}C{(phi, lam)}
    test 279 ecef.py:824: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 280 ecef.py:830: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 281 ecef.py:863: L{LatLon3Tuple}C{(lat, lon, height)}
    test 282 ecef.py:864: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 283 ecef.py:891: L{Vector3Tuple}C{(x, y, z)}
    test 284 ecef.py:900: L{Vector3Tuple}C{(x, y, z)}
    test 285 ecef.py:906: L{Vector4Tuple}C{(x, y, z, h)}
    test 286 ecef.py:952: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 287 ecef.py:993: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 288 ecef.py:1068: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 289 ecef.py:1163: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 290 ecef.py:1196: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}

    testing elevations.py (pygeodesy.named, 20.10.08)
    test 291 elevations.py:143: L{Elevation2Tuple}C{(elevation, data_source)}
    test 292 elevations.py:201: L{GeoidHeight2Tuple}C{(height, model_name)}

    testing ellipsoidalBase.py (pygeodesy.named, 20.10.08)
    test 293 ellipsoidalBase.py:262: L{Distance2Tuple}C{(distance, initial)}
    test 294 ellipsoidalBase.py:284: L{Elevation2Tuple}C{(elevation, data_source)}
    test 295 ellipsoidalBase.py:364: L{GeoidHeight2Tuple}C{(height, model_name)}
    test 296 ellipsoidalBase.py:518: L{Vector3Tuple}C{(x, y, z)}
    test 297 ellipsoidalBase.py:651: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}

    testing ellipsoidalKarney.py (pygeodesy.named, 20.10.08)
    test 298 ellipsoidalKarney.py:65: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 299 ellipsoidalKarney.py:102: L{Bearing2Tuple}C{(initial, final)}
    test 300 ellipsoidalKarney.py:164: L{Destination2Tuple}C{(destination, final)}
    test 301 ellipsoidalKarney.py:224: L{Distance3Tuple}C{(distance, initial, final)}
    test 302 ellipsoidalKarney.py:405: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 303 ellipsoidalKarney.py:419: L{Destination2Tuple}C{(destination, final)}
    test 304 ellipsoidalKarney.py:420: L{Destination3Tuple}C{(lat, lon, final)}
    test 305 ellipsoidalKarney.py:434: L{Distance3Tuple}C{(distance, initial, final)}
    test 306 ellipsoidalKarney.py:521: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalNvector.py (pygeodesy.named, 20.10.08)
    test 307 ellipsoidalNvector.py:70: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 308 ellipsoidalNvector.py:91: L{Vector4Tuple}C{(x, y, z, h)}
    test 309 ellipsoidalNvector.py:434: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 310 ellipsoidalNvector.py:455: L{Vector4Tuple}C{(x, y, z, h)}
    test 311 ellipsoidalNvector.py:561: L{Ned3Tuple}C{(north, east, down)}
    test 312 ellipsoidalNvector.py:671: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 313 ellipsoidalNvector.py:696: L{LatLon3Tuple}C{(lat, lon, height)}
    test 314 ellipsoidalNvector.py:742: L{LatLon3Tuple}C{(lat, lon, height)}
    test 315 ellipsoidalNvector.py:792: L{Ned3Tuple}C{(north, east, down)}

    testing ellipsoidalVincenty.py (pygeodesy.named, 20.10.08)
    test 316 ellipsoidalVincenty.py:111: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 317 ellipsoidalVincenty.py:157: L{Bearing2Tuple}C{(initial, final)}
    test 318 ellipsoidalVincenty.py:220: L{Destination2Tuple}C{(destination, final)}
    test 319 ellipsoidalVincenty.py:284: L{Distance3Tuple}C{(distance, initial, final)}
    test 320 ellipsoidalVincenty.py:442: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 321 ellipsoidalVincenty.py:648: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoids.py (pygeodesy.named, 20.10.08)
    test 322 ellipsoids.py:152: L{a_f2Tuple}C{(a, f)}
    test 323 ellipsoids.py:667: L{Distance2Tuple}C{(distance, initial)}
    test 324 ellipsoids.py:1189: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 325 ellipsoids.py:1208: L{Curvature2Tuple}C{(meridional, prime_vertical)}

    testing elliptic.py (pygeodesy.named, 20.10.08)
    test 326 elliptic.py:671: L{Elliptic3Tuple}C{(sn, cn, dn)}

    testing epsg.py (pygeodesy.named, 20.10.08)
    test 327 epsg.py:144: L{UtmUps2Tuple}C{(zone, hemipole)}

    testing errors.py (pygeodesy.named, 20.10.08)

    testing etm.py (pygeodesy.named, 20.10.08)
    test 328 etm.py:219: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 329 etm.py:406: L{EasNorExact4Tuple}C{(easting, northing, convergence, scale)}
    test 330 etm.py:548: L{LatLonExact4Tuple}C{(lat, lon, convergence, scale)}
    test 331 etm.py:962: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 332 etm.py:1000: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}

    testing fmath.py (pygeodesy.named, 20.10.08)

    testing formy.py (pygeodesy.named, 20.10.08)
    test 333 formy.py:55: L{LatLon2Tuple}C{(lat, lon)}
    test 334 formy.py:69: L{PhiLam2Tuple}C{(phi, lam)}
    test 335 formy.py:406: L{Distance4Tuple}C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 336 formy.py:769: L{LatLon2Tuple}C{(lat, lon)}
    test 337 formy.py:864: L{Vector3Tuple}C{(x, y, z)}
    test 338 formy.py:881: L{LatLon2Tuple}C{(lat, lon)}
    test 339 formy.py:896: L{PhiLam2Tuple}C{(phi, lam)}
    test 340 formy.py:910: L{Vector3Tuple}C{(x, y, z)}
    test 341 formy.py:934: L{Points2Tuple}C{(number, points)}
    test 342 formy.py:980: L{Radical2Tuple}C{(ratio, xline)}

    testing frechet.py (pygeodesy.named, 20.10.08)
    test 343 frechet.py:197: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}
    test 344 frechet.py:332: L{PhiLam2Tuple}C{(phi, lam)}
    test 345 frechet.py:915: L{LatLon2Tuple}C{(lat, lon)}
    test 346 frechet.py:1000: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}

    testing gars.py (pygeodesy.named, 20.10.08)
    test 347 gars.py:217: L{LatLonPrec3Tuple}C{(lat, lon, precision)}

    testing geohash.py (pygeodesy.named, 20.10.08)
    test 348 geohash.py:341: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 349 geohash.py:710: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 350 geohash.py:224: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 351 geohash.py:225: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 352 geohash.py:326: L{LatLon2Tuple}C{(lat, lon)}
    test 353 geohash.py:359: L{LatLon2Tuple}C{(lat, lon)}
    test 354 geohash.py:475: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 355 geohash.py:476: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 356 geohash.py:556: L{LatLon2Tuple}C{(lat, lon)}
    test 357 geohash.py:780: L{LatLon2Tuple}C{(lat, lon)}

    testing geoids.py (pygeodesy.named, 20.10.08)
    test 358 geoids.py:351: L{LatLon3Tuple}C{(lat, lon, height)}
    test 359 geoids.py:411: L{LatLon3Tuple}C{(lat, lon, height)}
    test 360 geoids.py:444: L{LatLon3Tuple}C{(lat, lon, height)}
    test 361 geoids.py:459: L{LatLon3Tuple}C{(lat, lon, height)}
    test 362 geoids.py:474: L{LatLon3Tuple}C{(lat, lon, height)}
    test 363 geoids.py:584: L{LatLon3Tuple}C{(lat, lon, height)}
    test 364 geoids.py:599: L{LatLon3Tuple}C{(lat, lon, height)}
    test 365 geoids.py:1096: L{LatLon3Tuple}C{(lat, lon, height)}
    test 366 geoids.py:1113: L{LatLon3Tuple}C{(lat, lon, height)}
    test 367 geoids.py:1555: L{GeoidHeight5Tuple}C{(lat, lon, egm84, egm96, egm2008)}

    testing hausdorff.py (pygeodesy.named, 20.10.08)
    test 368 hausdorff.py:167: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 369 hausdorff.py:226: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 370 hausdorff.py:287: L{PhiLam2Tuple}C{(phi, lam)}
    test 371 hausdorff.py:932: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}

    testing heights.py (pygeodesy.named, 20.10.08)

    testing interns.py (pygeodesy.named, 20.10.08)

    testing karney.py (pygeodesy.named, 20.10.08)

    testing latlonBase.py (pygeodesy.named, 20.10.08)
    test 372 latlonBase.py:142: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 373 latlonBase.py:572: L{LatLon2Tuple}C{(lat, lon)}
    test 374 latlonBase.py:618: L{LatLon2Tuple}C{(lat, lon)}
    test 375 latlonBase.py:635: L{LatLon3Tuple}C{(lat, lon, height)}
    test 376 latlonBase.py:673: L{PhiLam2Tuple}C{(phi, lam)}
    test 377 latlonBase.py:685: L{PhiLam2Tuple}C{(phi, lam)}
    test 378 latlonBase.py:697: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 379 latlonBase.py:714: L{Points2Tuple}C{(number, points)}
    test 380 latlonBase.py:746: L{PhiLam2Tuple}C{(phi, lam)}
    test 381 latlonBase.py:753: L{LatLon3Tuple}C{(lat, lon, height)}
    test 382 latlonBase.py:762: L{Vector3Tuple}C{(x, y, z)}
    test 383 latlonBase.py:776: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 384 latlonBase.py:793: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 385 latlonBase.py:815: L{Vector4Tuple}C{(x, y, z, h)}
    test 386 latlonBase.py:859: L{Vector3Tuple}C{(x, y, z)}
    test 387 latlonBase.py:910: L{Vector3Tuple}C{(x, y, z)}
    test 388 latlonBase.py:921: L{Vector4Tuple}C{(x, y, z, h)}

    testing lazily.py (pygeodesy.named, 20.10.08)

    testing lcc.py (pygeodesy.named, 20.10.08)
    test 389 lcc.py:159: L{LatLon2Tuple}C{(lat, lon)}
    test 390 lcc.py:213: L{PhiLam2Tuple}C{(phi, lam)}
    test 391 lcc.py:454: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 392 lcc.py:479: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 393 lcc.py:571: L{EasNor3Tuple}C{(easting, northing, height)}

    testing mgrs.py (pygeodesy.named, 20.10.08)
    test 394 mgrs.py:225: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 395 mgrs.py:280: L{Mgrs6Tuple}C{(zone, digraph, easting, northing, band, datum)}
    test 396 mgrs.py:306: L{Mgrs4Tuple}C{(zone, digraph, easting, northing)}
    test 397 mgrs.py:366: L{Mgrs6Tuple}C{(zone, digraph, easting, northing, band, datum)}

    testing named.py (pygeodesy.named, 20.10.08)

    testing namedTuples.py (pygeodesy.named, 20.10.08)
    test 398 namedTuples.py:136: L{LatLon3Tuple}C{(lat, lon, height)}
    test 399 namedTuples.py:148: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 400 namedTuples.py:169: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 401 namedTuples.py:207: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}
    test 402 namedTuples.py:225: L{LatLon3Tuple}C{(lat, lon, height)}
    test 403 namedTuples.py:249: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 404 namedTuples.py:261: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 405 namedTuples.py:287: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 406 namedTuples.py:348: L{Vector4Tuple}C{(x, y, z, h)}

    testing nvectorBase.py (pygeodesy.named, 20.10.08)
    test 407 nvectorBase.py:175: L{LatLon2Tuple}C{(lat, lon)}
    test 408 nvectorBase.py:183: L{LatLon3Tuple}C{(lat, lon, height)}
    test 409 nvectorBase.py:201: L{PhiLam2Tuple}C{(phi, lam)}
    test 410 nvectorBase.py:209: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 411 nvectorBase.py:216: L{PhiLam2Tuple}C{(phi, lam)}
    test 412 nvectorBase.py:226: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 413 nvectorBase.py:246: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 414 nvectorBase.py:278: L{LatLon2Tuple}C{(lat, lon)}
    test 415 nvectorBase.py:288: L{LatLon3Tuple}C{(lat, lon, height)}
    test 416 nvectorBase.py:307: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 417 nvectorBase.py:381: L{Vector4Tuple}C{(x, y, z, h)}
    test 418 nvectorBase.py:461: L{Vector4Tuple}C{(x, y, z, h)}
    test 419 nvectorBase.py:535: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 420 nvectorBase.py:579: L{Vector4Tuple}C{(x, y, z, h)}

    testing osgr.py (pygeodesy.named, 20.10.08)
    test 421 osgr.py:203: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 422 osgr.py:373: L{EasNor2Tuple}C{(easting, northing)}
    test 423 osgr.py:457: L{EasNor2Tuple}C{(easting, northing)}

    testing points.py (pygeodesy.named, 20.10.08)
    test 424 points.py:149: L{LatLon2Tuple}C{(lat, lon)}
    test 425 points.py:155: L{LatLon3Tuple}C{(lat, lon, height)}
    test 426 points.py:184: L{PhiLam2Tuple}C{(phi, lam)}
    test 427 points.py:190: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 428 points.py:209: L{Points2Tuple}C{(number, points)}
    test 429 points.py:221: L{PhiLam2Tuple}C{(phi, lam)}
    test 430 points.py:237: L{Vector4Tuple}C{(x, y, z, h)}
    test 431 points.py:639: L{Shape2Tuple}C{(nrows, ncols)}
    test 432 points.py:841: L{Point3Tuple}C{(x, y, ll)}
    test 433 points.py:1080: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 434 points.py:1082: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 435 points.py:1123: L{LatLon2Tuple}C{(lat, lon)}
    test 436 points.py:1464: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 437 points.py:1466: L{NearestOn5Tuple}C{(lat, lon, distance, angle, height)}

    testing simplify.py (pygeodesy.named, 20.10.08)

    testing sphericalBase.py (pygeodesy.named, 20.10.08)
    test 438 sphericalBase.py:172: L{Bearing2Tuple}C{(initial, final)}
    test 439 sphericalBase.py:448: L{Vector4Tuple}C{(x, y, z, h)}

    testing sphericalNvector.py (pygeodesy.named, 20.10.08)
    test 440 sphericalNvector.py:72: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 441 sphericalNvector.py:90: L{Vector4Tuple}C{(x, y, z, h)}
    test 442 sphericalNvector.py:665: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 443 sphericalNvector.py:701: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 444 sphericalNvector.py:721: L{Vector4Tuple}C{(x, y, z, h)}
    test 445 sphericalNvector.py:767: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 446 sphericalNvector.py:787: L{LatLon3Tuple}C{(lat, lon, height)}
    test 447 sphericalNvector.py:1032: L{NearestOn3Tuple}C{(closest, distance, angle)}

    testing sphericalTrigonometry.py (pygeodesy.named, 20.10.08)
    test 448 sphericalTrigonometry.py:87: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 449 sphericalTrigonometry.py:683: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 450 sphericalTrigonometry.py:721: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 451 sphericalTrigonometry.py:750: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 452 sphericalTrigonometry.py:911: L{LatLon3Tuple}C{(lat, lon, height)}
    test 453 sphericalTrigonometry.py:1025: L{LatLon3Tuple}C{(lat, lon, height)}
    test 454 sphericalTrigonometry.py:1135: L{LatLon3Tuple}C{(lat, lon, height)}
    test 455 sphericalTrigonometry.py:1161: L{LatLon2Tuple}C{(lat, lon)}
    test 456 sphericalTrigonometry.py:1186: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 457 sphericalTrigonometry.py:1187: L{LatLon3Tuple}C{(lat, lon, height)}

    testing streprs.py (pygeodesy.named, 20.10.08)

    testing trf.py (pygeodesy.named, 20.10.08)

    testing units.py (pygeodesy.named, 20.10.08)

    testing ups.py (pygeodesy.named, 20.10.08)
    test 458 ups.py:140: L{EasNor2Tuple}C{(easting, northing)}
    test 459 ups.py:211: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 460 ups.py:374: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 461 ups.py:409: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 462 ups.py:484: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utily.py (pygeodesy.named, 20.10.08)

    testing utm.py (pygeodesy.named, 20.10.08)
    test 463 utm.py:331: L{EasNor2Tuple}C{(easting, northing)}
    test 464 utm.py:389: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 465 utm.py:606: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 466 utm.py:644: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 467 utm.py:735: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmups.py (pygeodesy.named, 20.10.08)
    test 468 utmups.py:84: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 469 utmups.py:125: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 470 utmups.py:276: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmupsBase.py (pygeodesy.named, 20.10.08)
    test 471 utmupsBase.py:225: L{EasNor2Tuple}C{(easting, northing)}
    test 472 utmupsBase.py:235: L{EasNor2Tuple}C{(easting, northing)}
    test 473 utmupsBase.py:300: L{EasNor2Tuple}C{(easting, northing)}

    testing vector3d.py (pygeodesy.named, 20.10.08)
    test 474 vector3d.py:649: L{PhiLam2Tuple}C{(phi, lam)}
    test 475 vector3d.py:656: L{LatLon2Tuple}C{(lat, lon)}
    test 476 vector3d.py:663: L{Vector3Tuple}C{(x, y, z)}
    test 477 vector3d.py:756: L{Vector3Tuple}C{(x, y, z)}
    test 478 vector3d.py:1022: L{Vector3Tuple}C{(x, y, z)}
    test 479 vector3d.py:1045: L{Vector3Tuple}C{(x, y, z)}

    testing webmercator.py (pygeodesy.named, 20.10.08)
    test 480 webmercator.py:95: L{LatLon2Tuple}C{(lat, lon)}
    test 481 webmercator.py:108: L{LatLon2Tuple}C{(lat, lon)}
    test 482 webmercator.py:154: L{PhiLam2Tuple}C{(phi, lam)}
    test 483 webmercator.py:170: L{LatLon2Tuple}C{(lat, lon)}
    test 484 webmercator.py:284: L{EasNorRadius3Tuple}C{(easting, northing, radius)}
    test 485 webmercator.py:325: L{EasNorRadius3Tuple}C{(easting, northing, radius)}

    testing wgrs.py (pygeodesy.named, 20.10.08)
    test 486 wgrs.py:220: L{LatLon3Tuple}C{(lat, lon, height)}
    test 487 wgrs.py:237: L{LatLonPrec3Tuple}C{(lat, lon, precision)}
    test 488 wgrs.py:290: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}

    testing xtend (pygeodesy.namedTuples, 20.09.27)
    test 489 LatLon2Tuple(lat=0, lon=1): (0, 1, 2)
    test 490 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 491 LatLon2Tuple(lat=0, lon=1): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 492 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 493 LatLon3Tuple(lat=0, lon=1, height=2): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 494 LatLon3Tuple(lat=0, lon=1, height=2): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 495 PhiLam2Tuple(phi=0, lam=1): (0, 1, 2)
    test 496 PhiLam2Tuple(phi=0, lam=1): <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 497 Vector3Tuple(x=0, y=1, z=2): (0, 1, 2, 4)
    test 498 Vector3Tuple(x=0, y=1, z=2): <class 'pygeodesy.namedTuples.Vector4Tuple'>

    testing bases (pygeodesy.named, 20.10.08)
    test 499 nd.dict: test(1=1, 2=2)
    test 500 nd.name: test
    test 501 nd.dict: test(1=1, 2=2)
    test 502 nd.name: test
    test 503 nd.kwds: test(one=1, two=2)
    test 504 nd.name: test
    test 505 nd.dict: test(1=1, 2=2)
    test 506 nd.name: test
    test 507 nd.list: test(1=1, 2=2)
    test 508 nd.name: test
    test 509 nd.updated: test(1=1, 2=2, name='kwds')
    test 510 nd.name: test

    testing coverage (pygeodesy.named, 20.10.08)
    test 511 nd.name: name
    test 512 nd.named: name
    test 513 nd.named: Neighbors8Dict
    test 514 nd.name: test
    test 515 nd.test: test
    test 516 nd.test: None
    test 517 nd.classnaming: False
    test 518 nd.classname: Neighbors8Dict
    test 519 nd.named2: Neighbors8Dict 'test'
    test 520 nd.classnaming: True
    test 521 nd.classname: geohash.Neighbors8Dict
    test 522 nd.named2: geohash.Neighbors8Dict 'test'
    test 523 classnaming: False
    test 524 classnaming: True

    testing unregister (pygeodesy.named, 20.10.08)
    test 525 Conics: 8
    test 526 Conics.Fr93Lb.unregister: None
    test 527 Conics.PyT_Lb.unregister: None
    test 528 Conics.WRF_Lb.unregister: None
    test 529 Conics.MaNLb.unregister: None
    test 530 Conics.USA_Lb.unregister: None
    test 531 Conics.MxLb.unregister: None
    test 532 Conics.Be72Lb.unregister: None
    test 533 Conics.Be08Lb.unregister: None
    test 534 Conics: 0
    test 535 Datums: 18
    test 536 Datums.unregister(WGS84): None
    test 537 Datums.unregister(BD72): None
    test 538 Datums.unregister(NAD27): None
    test 539 Datums.unregister(ED50): None
    test 540 Datums.unregister(MGI): None
    test 541 Datums.unregister(GRS80): None
    test 542 Datums.unregister(Krassovski1940): None
    test 543 Datums.unregister(WGS72): None
    test 544 Datums.unregister(TokyoJapan): None
    test 545 Datums.unregister(Sphere): None
    test 546 Datums.unregister(DHDN): None
    test 547 Datums.unregister(NAD83): None
    test 548 Datums.unregister(OSGB36): None
    test 549 Datums.unregister(Potsdam): None
    test 550 Datums.unregister(Irl1975): None
    test 551 Datums.unregister(Krassowsky1940): None
    test 552 Datums.unregister(NTF): None
    test 553 Datums.unregister(GDA2020): None
    test 554 Datums: 0
    test 555 Ellipsoids: 41
    test 556 Ellipsoids.AiryModified.unregister: None
    test 557 Ellipsoids.OSU91A.unregister: None
    test 558 Ellipsoids.Everest1969.unregister: None
    test 559 Ellipsoids.Maupertuis1738.unregister: None
    test 560 Ellipsoids.Bessel1841.unregister: None
    test 561 Ellipsoids.GRS80.unregister: None
    test 562 Ellipsoids.Struve1860.unregister: None
    test 563 Ellipsoids.SoAmerican1969.unregister: None
    test 564 Ellipsoids.Intl1924.unregister: None
    test 565 Ellipsoids.IERS1989.unregister: None
    test 566 Ellipsoids.IERS1992TOPEX.unregister: None
    test 567 Ellipsoids.Intl1967.unregister: None
    test 568 Ellipsoids.Mercury1960.unregister: None
    test 569 Ellipsoids.Krassowsky1940.unregister: None
    test 570 Ellipsoids.Australia1966.unregister: None
    test 571 Ellipsoids.Clarke1880Mod.unregister: None
    test 572 Ellipsoids.WGS72.unregister: None
    test 573 Ellipsoids.GRS67.unregister: None
    test 574 Ellipsoids.SpherePopular.unregister: None
    test 575 Ellipsoids.IERS2003.unregister: None
    test 576 Ellipsoids.Plessis1817.unregister: None
    test 577 Ellipsoids.Clarke1880IGN.unregister: None
    test 578 Ellipsoids.Airy1830.unregister: None
    test 579 Ellipsoids.Helmert1906.unregister: None
    test 580 Ellipsoids.Delambre1810.unregister: None
    test 581 Ellipsoids.SphereAuthalic.unregister: None
    test 582 Ellipsoids.Fisher1968.unregister: None
    test 583 Ellipsoids.Mercury1968Mod.unregister: None
    test 584 Ellipsoids.CPM1799.unregister: None
    test 585 Ellipsoids.Engelis1985.unregister: None
    test 586 Ellipsoids.NWL1965.unregister: None
    test 587 Ellipsoids.GEM10C.unregister: None
    test 588 Ellipsoids.WGS84.unregister: None
    test 589 Ellipsoids.WGS66.unregister: None
    test 590 Ellipsoids.Krassovski1940.unregister: None
    test 591 Ellipsoids.WGS60.unregister: None
    test 592 Ellipsoids.Sphere.unregister: None
    test 593 Ellipsoids.SGS85.unregister: None
    test 594 Ellipsoids.OSU86F.unregister: None
    test 595 Ellipsoids.Clarke1880.unregister: None
    test 596 Ellipsoids.Clarke1866.unregister: None
    test 597 Ellipsoids: 0
    test 598 RefFrames: 12
    test 599 RefFrames.ITRF2008.unregister: None
    test 600 RefFrames.WGS84g1674.unregister: None
    test 601 RefFrames.ITRF2000.unregister: None
    test 602 RefFrames.ITRF2005.unregister: None
    test 603 RefFrames.ITRF93.unregister: None
    test 604 RefFrames.ITRF91.unregister: None
    test 605 RefFrames.ITRF2014.unregister: None
    test 606 RefFrames.NAD83.unregister: None
    test 607 RefFrames.WGS84g1762.unregister: None
    test 608 RefFrames.WGS84g1150.unregister: None
    test 609 RefFrames.GDA94.unregister: None
    test 610 RefFrames.ETRF2000.unregister: None
    test 611 RefFrames: 0
    test 612 Transforms: 18
    test 613 Transforms.NTF.unregister: None
    test 614 Transforms.WGS84.unregister: None
    test 615 Transforms.BD72.unregister: None
    test 616 Transforms.ED50.unregister: None
    test 617 Transforms.Bessel1841.unregister: None
    test 618 Transforms.Krassovski1940.unregister: None
    test 619 Transforms.WGS72.unregister: None
    test 620 Transforms.TokyoJapan.unregister: None
    test 621 Transforms.DHDN.unregister: None
    test 622 Transforms.NAD83.unregister: None
    test 623 Transforms.OSGB36.unregister: None
    test 624 Transforms.Clarke1866.unregister: None
    test 625 Transforms.Irl1965.unregister: None
    test 626 Transforms.Irl1975.unregister: None
    test 627 Transforms.Krassowsky1940.unregister: None
    test 628 Transforms.MGI.unregister: None
    test 629 Transforms.Identity.unregister: None
    test 630 Transforms.NAD27.unregister: None
    test 631 Transforms: 0

    5 of 631 testNamed.py tests (0.8%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 41.742 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testNamedTuples.py

    testing testNamedTuples.py 20.09.16
    test 1 pygeodesy.albers: Albers7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, gamma=0.5, scale=0.5, datum=0.5)
    test 2 pygeodesy.albers: Albers7Tuple(x=Meter, y=Meter, lat=Lat, lon=Lon, gamma=Bearing, scale=_Ks, datum=_Pass)
    test 3 pygeodesy.albers: Albers7Tuple._validated: True
    test 4 pygeodesy.albers: Albers7Tuple._validated: True
    test 5 pygeodesy.azimuthal: Azimuthal7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, azimuth=0.5, scale=0.5, datum=0.5)
    test 6 pygeodesy.azimuthal: Azimuthal7Tuple(x=Meter, y=Meter, lat=Lat_, lon=Lon_, azimuth=Bearing, scale=Scalar, datum=_Pass)
    test 7 pygeodesy.azimuthal: Azimuthal7Tuple._validated: True
    test 8 pygeodesy.azimuthal: Azimuthal7Tuple._validated: True
    test 9 pygeodesy.clipy: ClipCS3Tuple(start=0.5, end=0.5, index=0)
    test 10 pygeodesy.clipy: ClipCS3Tuple(start=_Pass, end=_Pass, index=Number_)
    test 11 pygeodesy.clipy: ClipCS3Tuple._validated: True
    test 12 pygeodesy.clipy: ClipCS3Tuple._validated: True
    test 13 pygeodesy.clipy: ClipSH3Tuple(start=0.5, end=0.5, original=True)
    test 14 pygeodesy.clipy: ClipSH3Tuple(start=_Pass, end=_Pass, original=Bool)
    test 15 pygeodesy.clipy: ClipSH3Tuple._validated: True
    test 16 pygeodesy.clipy: ClipSH3Tuple._validated: True
    test 17 pygeodesy.css: EasNorAziRk4Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5)
    test 18 pygeodesy.css: EasNorAziRk4Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar)
    test 19 pygeodesy.css: EasNorAziRk4Tuple._validated: True
    test 20 pygeodesy.css: EasNorAziRk4Tuple._validated: True
    test 21 pygeodesy.css: LatLonAziRk4Tuple(lat=0.5, lon=0.5, azimuth=0.5, reciprocal=0.5)
    test 22 pygeodesy.css: LatLonAziRk4Tuple(lat=Lat_, lon=Lon_, azimuth=Bearing, reciprocal=Scalar)
    test 23 pygeodesy.css: LatLonAziRk4Tuple._validated: True
    test 24 pygeodesy.css: LatLonAziRk4Tuple._validated: True
    test 25 pygeodesy.ecef: Ecef9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, C=0, M=0.5, datum=0.5)
    test 26 pygeodesy.ecef: Ecef9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, C=Int, M=_Pass, datum=_Pass)
    test 27 pygeodesy.ecef: Ecef9Tuple._validated: True
    test 28 pygeodesy.ecef: Ecef9Tuple._validated: True
    test 29 pygeodesy.ecef: EcefMatrix(_0_0_=0.5, _0_1_=0.5, _0_2_=0.5, _1_0_=0.5, _1_1_=0.5, _1_2_=0.5, _2_0_=0.5, _2_1_=0.5, _2_2_=0.5)
    test 30 pygeodesy.ecef: EcefMatrix(_0_0_=Scalar, _0_1_=Scalar, _0_2_=Scalar, _1_0_=Scalar, _1_1_=Scalar, _1_2_=Scalar, _2_0_=Scalar, _2_1_=Scalar, _2_2_=Scalar)
    test 31 pygeodesy.ecef: EcefMatrix._validated: True
    test 32 pygeodesy.ecef: EcefMatrix._validated: True
    test 33 pygeodesy.elevations: Elevation2Tuple(elevation=0.5, data_source='0.5')
    test 34 pygeodesy.elevations: Elevation2Tuple(elevation=Meter, data_source=Str)
    test 35 pygeodesy.elevations: Elevation2Tuple._validated: True
    test 36 pygeodesy.elevations: Elevation2Tuple._validated: True
    test 37 pygeodesy.elevations: GeoidHeight2Tuple(height=0.5, model_name='0.5')
    test 38 pygeodesy.elevations: GeoidHeight2Tuple(height=Meter, model_name=Str)
    test 39 pygeodesy.elevations: GeoidHeight2Tuple._validated: True
    test 40 pygeodesy.elevations: GeoidHeight2Tuple._validated: True
    test 41 pygeodesy.ellipsoidalNvector: Ned3Tuple(north=0.5, east=0.5, down=0.5)
    test 42 pygeodesy.ellipsoidalNvector: Ned3Tuple(north=Degrees, east=Degrees, down=Degrees)
    test 43 pygeodesy.ellipsoidalNvector: Ned3Tuple._validated: True
    test 44 pygeodesy.ellipsoidalNvector: Ned3Tuple._validated: True
    test 45 pygeodesy.ellipsoids: Curvature2Tuple(meridional=0.5, prime_vertical=0.5)
    test 46 pygeodesy.ellipsoids: Curvature2Tuple(meridional=Meter, prime_vertical=Meter)
    test 47 pygeodesy.ellipsoids: Curvature2Tuple._validated: True
    test 48 pygeodesy.ellipsoids: Curvature2Tuple._validated: True
    test 49 pygeodesy.ellipsoids: a_f2Tuple(a=0.5, f=0.5)
    test 50 pygeodesy.ellipsoids: a_f2Tuple(a=_Pass, f=_Pass)
    test 51 pygeodesy.ellipsoids: a_f2Tuple._validated: True
    test 52 pygeodesy.ellipsoids: a_f2Tuple._validated: True
    test 53 pygeodesy.elliptic: Elliptic3Tuple(sn=0.5, cn=0.5, dn=0.5)
    test 54 pygeodesy.elliptic: Elliptic3Tuple(sn=Scalar, cn=Scalar, dn=Scalar)
    test 55 pygeodesy.elliptic: Elliptic3Tuple._validated: True
    test 56 pygeodesy.elliptic: Elliptic3Tuple._validated: True
    test 57 pygeodesy.etm: EasNorExact4Tuple(easting=0.5, northing=0.5, convergence=0.5, scale=0.5)
    test 58 pygeodesy.etm: EasNorExact4Tuple(easting=Easting, northing=Northing, convergence=Degrees, scale=Scalar)
    test 59 pygeodesy.etm: EasNorExact4Tuple._validated: True
    test 60 pygeodesy.etm: EasNorExact4Tuple._validated: True
    test 61 pygeodesy.etm: LatLonExact4Tuple(lat=0.5, lon=0.5, convergence=0.5, scale=0.5)
    test 62 pygeodesy.etm: LatLonExact4Tuple(lat=Lat, lon=Lon, convergence=Degrees, scale=Scalar)
    test 63 pygeodesy.etm: LatLonExact4Tuple._validated: True
    test 64 pygeodesy.etm: LatLonExact4Tuple._validated: True
    test 65 pygeodesy.formy: Radical2Tuple(ratio=0.5, xline=0.5)
    test 66 pygeodesy.formy: Radical2Tuple(ratio=Scalar, xline=Scalar)
    test 67 pygeodesy.formy: Radical2Tuple._validated: True
    test 68 pygeodesy.formy: Radical2Tuple._validated: True
    test 69 pygeodesy.frechet: Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0, n=0, units='test')
    test 70 pygeodesy.frechet: Frechet6Tuple(fd=_Pass, fi1=_FIx, fi2=_FIx, r=Number_, n=Number_, units=_Pass)
    test 71 pygeodesy.frechet: Frechet6Tuple._validated: True
    test 72 pygeodesy.frechet: Frechet6Tuple._validated: True
    test 73 pygeodesy.geoids: GeoidHeight5Tuple(lat=0.5, lon=0.5, egm84=0.5, egm96=0.5, egm2008=0.5)
    test 74 pygeodesy.geoids: GeoidHeight5Tuple(lat=Lat, lon=Lon, egm84=Height, egm96=Height, egm2008=Height)
    test 75 pygeodesy.geoids: GeoidHeight5Tuple._validated: True
    test 76 pygeodesy.geoids: GeoidHeight5Tuple._validated: True
    test 77 pygeodesy.hausdorff: Hausdorff6Tuple(hd=0.5, i=0, j=0, mn=0, md=0.5, units='test')
    test 78 pygeodesy.hausdorff: Hausdorff6Tuple(hd=_Pass, i=Number_, j=Number_, mn=Number_, md=_Pass, units=_Pass)
    test 79 pygeodesy.hausdorff: Hausdorff6Tuple._validated: True
    test 80 pygeodesy.hausdorff: Hausdorff6Tuple._validated: True
    test 81 pygeodesy.mgrs: Mgrs4Tuple(zone='0.5', digraph='0.5', easting=0.5, northing=0.5)
    test 82 pygeodesy.mgrs: Mgrs4Tuple(zone=Str, digraph=Str, easting=Easting, northing=Northing)
    test 83 pygeodesy.mgrs: Mgrs4Tuple._validated: True
    test 84 pygeodesy.mgrs: Mgrs4Tuple._validated: True
    test 85 pygeodesy.mgrs: Mgrs6Tuple(zone='0.5', digraph='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5)
    test 86 pygeodesy.mgrs: Mgrs6Tuple(zone=Str, digraph=Str, easting=Easting, northing=Northing, band=Str, datum=_Pass)
    test 87 pygeodesy.mgrs: Mgrs6Tuple._validated: True
    test 88 pygeodesy.mgrs: Mgrs6Tuple._validated: True
    test 89 pygeodesy.namedTuples: Bearing2Tuple(initial=0.5, final=0.5)
    test 90 pygeodesy.namedTuples: Bearing2Tuple(initial=Bearing, final=Bearing)
    test 91 pygeodesy.namedTuples: Bearing2Tuple._validated: True
    test 92 pygeodesy.namedTuples: Bearing2Tuple._validated: True
    test 93 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=0.5, latlonNE=0.5)
    test 94 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=_Pass, latlonNE=_Pass)
    test 95 pygeodesy.namedTuples: Bounds2Tuple._validated: True
    test 96 pygeodesy.namedTuples: Bounds2Tuple._validated: True
    test 97 pygeodesy.namedTuples: Bounds4Tuple(latS=0.5, lonW=0.5, latN=0.5, lonE=0.5)
    test 98 pygeodesy.namedTuples: Bounds4Tuple(latS=Lat, lonW=Lon, latN=Lat, lonE=Lon)
    test 99 pygeodesy.namedTuples: Bounds4Tuple._validated: True
    test 100 pygeodesy.namedTuples: Bounds4Tuple._validated: True
    test 101 pygeodesy.namedTuples: Destination2Tuple(destination=0.5, final=0.5)
    test 102 pygeodesy.namedTuples: Destination2Tuple(destination=_Pass, final=Bearing)
    test 103 pygeodesy.namedTuples: Destination2Tuple._validated: True
    test 104 pygeodesy.namedTuples: Destination2Tuple._validated: True
    test 105 pygeodesy.namedTuples: Destination3Tuple(lat=0.5, lon=0.5, final=0.5)
    test 106 pygeodesy.namedTuples: Destination3Tuple(lat=Lat, lon=Lon, final=Bearing)
    test 107 pygeodesy.namedTuples: Destination3Tuple._validated: True
    test 108 pygeodesy.namedTuples: Destination3Tuple._validated: True
    test 109 pygeodesy.namedTuples: Distance2Tuple(distance=0.5, initial=0.5)
    test 110 pygeodesy.namedTuples: Distance2Tuple(distance=Meter, initial=Bearing)
    test 111 pygeodesy.namedTuples: Distance2Tuple._validated: True
    test 112 pygeodesy.namedTuples: Distance2Tuple._validated: True
    test 113 pygeodesy.namedTuples: Distance3Tuple(distance=0.5, initial=0.5, final=0.5)
    test 114 pygeodesy.namedTuples: Distance3Tuple(distance=Meter, initial=Bearing, final=Bearing)
    test 115 pygeodesy.namedTuples: Distance3Tuple._validated: True
    test 116 pygeodesy.namedTuples: Distance3Tuple._validated: True
    test 117 pygeodesy.namedTuples: Distance4Tuple(distance2=0.5, delta_lat=0.5, delta_lon=0.5, unroll_lon2=0.5)
    test 118 pygeodesy.namedTuples: Distance4Tuple(distance2=Degrees2, delta_lat=Degrees, delta_lon=Degrees, unroll_lon2=Degrees)
    test 119 pygeodesy.namedTuples: Distance4Tuple._validated: True
    test 120 pygeodesy.namedTuples: Distance4Tuple._validated: True
    test 121 pygeodesy.namedTuples: EasNor2Tuple(easting=0.5, northing=0.5)
    test 122 pygeodesy.namedTuples: EasNor2Tuple(easting=Easting, northing=Northing)
    test 123 pygeodesy.namedTuples: EasNor2Tuple._validated: True
    test 124 pygeodesy.namedTuples: EasNor2Tuple._validated: True
    test 125 pygeodesy.namedTuples: EasNor3Tuple(easting=0.5, northing=0.5, height=0.5)
    test 126 pygeodesy.namedTuples: EasNor3Tuple(easting=Easting, northing=Northing, height=Height)
    test 127 pygeodesy.namedTuples: EasNor3Tuple._validated: True
    test 128 pygeodesy.namedTuples: EasNor3Tuple._validated: True
    test 129 pygeodesy.namedTuples: LatLon2Tuple(lat=0.5, lon=0.5)
    test 130 pygeodesy.namedTuples: LatLon2Tuple(lat=Lat, lon=Lon)
    test 131 pygeodesy.namedTuples: LatLon2Tuple._validated: True
    test 132 pygeodesy.namedTuples: LatLon2Tuple._validated: True
    test 133 pygeodesy.namedTuples: LatLon3Tuple(lat=0.5, lon=0.5, height=0.5)
    test 134 pygeodesy.namedTuples: LatLon3Tuple(lat=Lat, lon=Lon, height=Height)
    test 135 pygeodesy.namedTuples: LatLon3Tuple._validated: True
    test 136 pygeodesy.namedTuples: LatLon3Tuple._validated: True
    test 137 pygeodesy.namedTuples: LatLon4Tuple(lat=0.5, lon=0.5, height=0.5, datum=0.5)
    test 138 pygeodesy.namedTuples: LatLon4Tuple(lat=Lat, lon=Lon, height=Height, datum=_Pass)
    test 139 pygeodesy.namedTuples: LatLon4Tuple._validated: True
    test 140 pygeodesy.namedTuples: LatLon4Tuple._validated: True
    test 141 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=0.5, lon=0.5, datum=0.5)
    test 142 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=Lat, lon=Lon, datum=_Pass)
    test 143 pygeodesy.namedTuples: LatLonDatum3Tuple._validated: True
    test 144 pygeodesy.namedTuples: LatLonDatum3Tuple._validated: True
    test 145 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=0.5, lon=0.5, precision=0)
    test 146 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=Lat, lon=Lon, precision=Precision_)
    test 147 pygeodesy.namedTuples: LatLonPrec3Tuple._validated: True
    test 148 pygeodesy.namedTuples: LatLonPrec3Tuple._validated: True
    test 149 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=0.5, lon=0.5, precision=0, height=0.5, radius=0.5)
    test 150 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=Lat, lon=Lon, precision=Precision_, height=Height, radius=Radius)
    test 151 pygeodesy.namedTuples: LatLonPrec5Tuple._validated: True
    test 152 pygeodesy.namedTuples: LatLonPrec5Tuple._validated: True
    test 153 pygeodesy.namedTuples: NearestOn3Tuple(closest=0.5, distance=0.5, angle=0.5)
    test 154 pygeodesy.namedTuples: NearestOn3Tuple(closest=_Pass, distance=Meter, angle=Degrees)
    test 155 pygeodesy.namedTuples: NearestOn3Tuple._validated: True
    test 156 pygeodesy.namedTuples: NearestOn3Tuple._validated: True
    test 157 pygeodesy.namedTuples: PhiLam2Tuple(phi=0.5, lam=0.5)
    test 158 pygeodesy.namedTuples: PhiLam2Tuple(phi=Phi, lam=Lam)
    test 159 pygeodesy.namedTuples: PhiLam2Tuple._validated: True
    test 160 pygeodesy.namedTuples: PhiLam2Tuple._validated: True
    test 161 pygeodesy.namedTuples: PhiLam3Tuple(phi=0.5, lam=0.5, height=0.5)
    test 162 pygeodesy.namedTuples: PhiLam3Tuple(phi=Phi, lam=Lam, height=Height)
    test 163 pygeodesy.namedTuples: PhiLam3Tuple._validated: True
    test 164 pygeodesy.namedTuples: PhiLam3Tuple._validated: True
    test 165 pygeodesy.namedTuples: PhiLam4Tuple(phi=0.5, lam=0.5, height=0.5, datum=0.5)
    test 166 pygeodesy.namedTuples: PhiLam4Tuple(phi=Phi, lam=Lam, height=Height, datum=_Pass)
    test 167 pygeodesy.namedTuples: PhiLam4Tuple._validated: True
    test 168 pygeodesy.namedTuples: PhiLam4Tuple._validated: True
    test 169 pygeodesy.namedTuples: Points2Tuple(number=0, points=0.5)
    test 170 pygeodesy.namedTuples: Points2Tuple(number=Number_, points=_Pass)
    test 171 pygeodesy.namedTuples: Points2Tuple._validated: True
    test 172 pygeodesy.namedTuples: Points2Tuple._validated: True
    test 173 pygeodesy.namedTuples: Trilaterate5Tuple(min=0.5, minPoint=0.5, max=0.5, maxPoint=0.5, n=0)
    test 174 pygeodesy.namedTuples: Trilaterate5Tuple(min=Meter, minPoint=_Pass, max=Meter, maxPoint=_Pass, n=Number_)
    test 175 pygeodesy.namedTuples: Trilaterate5Tuple._validated: True
    test 176 pygeodesy.namedTuples: Trilaterate5Tuple._validated: True
    test 177 pygeodesy.namedTuples: Vector3Tuple(x=0.5, y=0.5, z=0.5)
    test 178 pygeodesy.namedTuples: Vector3Tuple(x=Scalar, y=Scalar, z=Scalar)
    test 179 pygeodesy.namedTuples: Vector3Tuple._validated: True
    test 180 pygeodesy.namedTuples: Vector3Tuple._validated: True
    test 181 pygeodesy.namedTuples: Vector4Tuple(x=0.5, y=0.5, z=0.5, h=0.5)
    test 182 pygeodesy.namedTuples: Vector4Tuple(x=Scalar, y=Scalar, z=Scalar, h=Height)
    test 183 pygeodesy.namedTuples: Vector4Tuple._validated: True
    test 184 pygeodesy.namedTuples: Vector4Tuple._validated: True
    test 185 pygeodesy.points: NearestOn5Tuple(lat=0.5, lon=0.5, distance=0.5, angle=0.5, height=0.5)
    test 186 pygeodesy.points: NearestOn5Tuple(lat=Lat, lon=Lon, distance=Degrees, angle=Degrees, height=Degrees)
    test 187 pygeodesy.points: NearestOn5Tuple._validated: True
    test 188 pygeodesy.points: NearestOn5Tuple._validated: True
    test 189 pygeodesy.points: Point3Tuple(x=0.5, y=0.5, ll=0.5)
    test 190 pygeodesy.points: Point3Tuple(x=Meter, y=Meter, ll=_Pass)
    test 191 pygeodesy.points: Point3Tuple._validated: True
    test 192 pygeodesy.points: Point3Tuple._validated: True
    test 193 pygeodesy.points: Shape2Tuple(nrows=0, ncols=0)
    test 194 pygeodesy.points: Shape2Tuple(nrows=Number_, ncols=Number_)
    test 195 pygeodesy.points: Shape2Tuple._validated: True
    test 196 pygeodesy.points: Shape2Tuple._validated: True
    test 197 pygeodesy.utmupsBase: LatLonDatum5Tuple(lat=0.5, lon=0.5, datum=0.5, convergence=0.5, scale=0.5)
    test 198 pygeodesy.utmupsBase: LatLonDatum5Tuple(lat=Lat, lon=Lon, datum=_Pass, convergence=Degrees, scale=Scalar)
    test 199 pygeodesy.utmupsBase: LatLonDatum5Tuple._validated: True
    test 200 pygeodesy.utmupsBase: LatLonDatum5Tuple._validated: True
    test 201 pygeodesy.utmupsBase: UtmUps2Tuple(zone=0, hemipole='0.5')
    test 202 pygeodesy.utmupsBase: UtmUps2Tuple(zone=Number_, hemipole=Str)
    test 203 pygeodesy.utmupsBase: UtmUps2Tuple._validated: True
    test 204 pygeodesy.utmupsBase: UtmUps2Tuple._validated: True
    test 205 pygeodesy.utmupsBase: UtmUps5Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5')
    test 206 pygeodesy.utmupsBase: UtmUps5Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band)
    test 207 pygeodesy.utmupsBase: UtmUps5Tuple._validated: True
    test 208 pygeodesy.utmupsBase: UtmUps5Tuple._validated: True
    test 209 pygeodesy.utmupsBase: UtmUps8Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5, convergence=0.5, scale=0.5)
    test 210 pygeodesy.utmupsBase: UtmUps8Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band, datum=_Pass, convergence=Degrees, scale=Scalar)
    test 211 pygeodesy.utmupsBase: UtmUps8Tuple._validated: True
    test 212 pygeodesy.utmupsBase: UtmUps8Tuple._validated: True
    test 213 pygeodesy.utmupsBase: UtmUpsLatLon5Tuple(zone=0, band='0.5', hemipole='0.5', lat=0.5, lon=0.5)
    test 214 pygeodesy.utmupsBase: UtmUpsLatLon5Tuple(zone=Number_, band=Band, hemipole=Str, lat=Lat, lon=Lon)
    test 215 pygeodesy.utmupsBase: UtmUpsLatLon5Tuple._validated: True
    test 216 pygeodesy.utmupsBase: UtmUpsLatLon5Tuple._validated: True
    test 217 pygeodesy.webmercator: EasNorRadius3Tuple(easting=0.5, northing=0.5, radius=0.5)
    test 218 pygeodesy.webmercator: EasNorRadius3Tuple(easting=Easting, northing=Northing, radius=Radius)
    test 219 pygeodesy.webmercator: EasNorRadius3Tuple._validated: True
    test 220 pygeodesy.webmercator: EasNorRadius3Tuple._validated: True
    test 221 pygeodesy.named: _NamedTuple._validated: False

    all 221 testNamedTuples.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 18.006 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testNavlabExamples.py

    testing testNavlabExamples.py 20.04.06
    test 1 Example 1 delta: [N:331730.863, E:332998.501, D:17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384
    test 6 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 7 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 8 Example 2 delta: [N:3000.0, E:2000.0, D:100.0]
    test 9 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
    test 10 Example 2 destinationNed: 53.327702°N, 063.465119°E, +296.01m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 11 Example 2 delta: [N:-86126, E:-78900, D:1069]
    test 12 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 13 Example 2 destinationNed: 48.88667°N, 002.37472°E, +0.00m  FAILED, KNOWN, expected 48.88667°N, 002.37472°E
    test 14 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m
    test 15 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]
    test 16 Example 5 distanceTo: 332457
    test 17 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 18 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 19 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 20 Example 6 intermediateTo: 51.372084°N, 000.707337°E
    test 21 Example 7 meanOf: 67.2362°N, 006.9175°W
    test 22 Example 8 destination(sphNv): 79.991549°N, 090.017698°W
    test 23 Example 8 destination(sphTy): 79.991549°N, 090.017698°W
    test 24 Example 8 destination(ellVincenty): 79.991584°N, 090.017621°W
    test 25 Example 9 intersection: 40.318643°N, 055.901868°E
    test 26 Example 10 crossTrackDistance: 11118
    test 27 toNed: [N:-86126.6, E:-78901.1, D:1104.1]
    test 28 bearing: 222.493
    test 29 elevation: -0.5416
    test 30 length: 116809.178
    test 31 toVector3d: (-86126.6, -78901.1, 1104.1)

    2 of 31 testNavlabExamples.py tests (6.5%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 10.732 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testOsgr.py

    testing testOsgr.py 20.08.11 (module pygeodesy.osgr 20.09.22)

    testing(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 1 WGS84: 51.4778°N, 000.0016°W
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 iteration: 0
    test 7 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 8 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 9 iteration: 4
    test 10 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 11 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 12 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 13 iteration: 4
    test 14 toOsgr2: 651409,313177
    test 15 toOsgr3: TG 51409 13177
    test 16 toOsgr4: TG 51409 13177
    test 17 OSGR1: TG 48251 11932
    test 18 OSGR1: [G:TG, E:48251, N:11932]
    test 19 OSGR2: TG 51409 13177
    test 20 OSGR2: [G:TG, E:51409, N:13177]
    test 21 OSGR3: TG 51409 13177
    test 22 OSGR3: [G:TG, E:51409, N:13177]
    test 23 OSGR4: TG 51409 13177
    test 24 OSGR4: [G:TG, E:51409, N:13177]
    test 25 OSGR5: 651409,313177
    test 26 OSGR5: [OSGR:651409.000,313177.000]
    test 27 OSGR5: [OSGR:651409.000,313177.000]
    test 28 OSGR6: 651409,313177
    test 29 OSGR6: (651409, 313177)
    test 30 OSGR6: 651409,313177
    test 31 issue: 38
    test 32 toOsgr: [G:TL, E:29158, N:35174]
    test 33 toOsgr: 529158.072, 235174.785
    test 34 toOsgr: OSGB36
    test 35 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 36 toLatLonOSGB36: OSGB36
    test 37 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 38 toLatLonWGS84 : WGS84
    test 39 Osgr: [G:TQ, E:32014, N:23971]
    test 40 Osgr: 532014.0, 123971.0
    test 41 Osgr: OSGB36
    test 42 toLatLonOSGB36: 50.999425N, 000.118417W
    test 43 toLatLonOSGB36: OSGB36
    test 44 toLatLonWGS84 : 50.999995N, 000.120004W
    test 45 toLatLonWGS84 : WGS84
    test 46 parseOSGR: [G:TQ, E:32014, N:23971]
    test 47 parseOSGR: 532014.0, 123971.0
    test 48 parseOSGR: OSGB36
    test 49 toLatLonOSGB36: 50.999425N, 000.118417W
    test 50 toLatLonOSGB36: OSGB36
    test 51 toLatLonWGS84: 50.999995N, 000.120004W
    test 52 toLatLonWGS84: WGS84
    test 53 toOsgr: [G:TQ, E:32013, N:23971]
    test 54 toOsgr: 532013.969, 123971.046
    test 55 toOsgr: OSGB36
    test 56 toLatLonOSGB36: 50.999426N, 000.118417W
    test 57 toLatLonOSGB36: OSGB36
    test 58 toLatLonWGS84 : 50.999995N, 000.120004W
    test 59 toLatLonWGS84 : WGS84
    test 60 toOsgr: [G:TQ, E:48853, N:24427]
    test 61 toOsgr: 548853.602, 124427.985
    test 62 toOsgr: OSGB36
    test 63 toLatLonOSGB36: 50.999422N, 000.121618E
    test 64 toLatLonOSGB36: OSGB36
    test 65 toLatLonWGS84 : 50.999995N, 000.120004E
    test 66 toLatLonWGS84 : WGS84
    test 67 toLatLon: 52.0N, 000.12W
    test 68 toLatLon: 52.0N, 000.12W
    test 69 toLatLon: 52.0N, 000.12W
    test 70 toLatLon: 52.0N, 000.12W
    test 71 toLatLon: 52.0N, 000.12W
    test 72 toLatLon: 52.0N, 000.12W
    test 73 toLatLon: 52.0N, 000.12W
    test 74 toLatLon: 52.0N, 000.12W
    test 75 LatLon: 49.926244°N, 006.297934°W
    test 76 datum: WGS84
    test 77 datum: OSGB36
    test 78 toOsgr: [G:SV, E:91645, N:11753]
    test 79 datum: OSGB36
    test 80 LatLon: 49.926244°N, 006.297934°W
    test 81 datum: WGS84
    test 82 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testing(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 83 WGS84: 51.4778°N, 000.0016°W
    test 84 OSGB36: 51.477284°N, 000.00002°E
    test 85 WGS84: 51.4778°N, 000.0016°W
    test 86 OSgr1: TG 51409 13177
    test 87 OSgr1: [G:TG, E:51409, N:13177]
    test 88 iteration: 0
    test 89 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 90 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 91 iteration: 4
    test 92 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 93 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 94 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 95 iteration: 4
    test 96 toOsgr2: 651409,313177
    test 97 toOsgr3: TG 51409 13177
    test 98 toOsgr4: TG 51409 13177
    test 99 OSGR1: TG 48251 11932
    test 100 OSGR1: [G:TG, E:48251, N:11932]
    test 101 OSGR2: TG 51409 13177
    test 102 OSGR2: [G:TG, E:51409, N:13177]
    test 103 OSGR3: TG 51409 13177
    test 104 OSGR3: [G:TG, E:51409, N:13177]
    test 105 OSGR4: TG 51409 13177
    test 106 OSGR4: [G:TG, E:51409, N:13177]
    test 107 OSGR5: 651409,313177
    test 108 OSGR5: [OSGR:651409.000,313177.000]
    test 109 OSGR5: [OSGR:651409.000,313177.000]
    test 110 OSGR6: 651409,313177
    test 111 OSGR6: (651409, 313177)
    test 112 OSGR6: 651409,313177
    test 113 issue: 38
    test 114 toOsgr: [G:TL, E:29158, N:35174]
    test 115 toOsgr: 529158.072, 235174.785
    test 116 toOsgr: OSGB36
    test 117 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 118 toLatLonOSGB36: OSGB36
    test 119 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 120 toLatLonWGS84 : WGS84
    test 121 Osgr: [G:TQ, E:32014, N:23971]
    test 122 Osgr: 532014.0, 123971.0
    test 123 Osgr: OSGB36
    test 124 toLatLonOSGB36: 50.999425N, 000.118417W
    test 125 toLatLonOSGB36: OSGB36
    test 126 toLatLonWGS84 : 50.999995N, 000.120004W
    test 127 toLatLonWGS84 : WGS84
    test 128 parseOSGR: [G:TQ, E:32014, N:23971]
    test 129 parseOSGR: 532014.0, 123971.0
    test 130 parseOSGR: OSGB36
    test 131 toLatLonOSGB36: 50.999425N, 000.118417W
    test 132 toLatLonOSGB36: OSGB36
    test 133 toLatLonWGS84: 50.999995N, 000.120004W
    test 134 toLatLonWGS84: WGS84
    test 135 toOsgr: [G:TQ, E:32013, N:23971]
    test 136 toOsgr: 532013.969, 123971.046
    test 137 toOsgr: OSGB36
    test 138 toLatLonOSGB36: 50.999426N, 000.118417W
    test 139 toLatLonOSGB36: OSGB36
    test 140 toLatLonWGS84 : 50.999995N, 000.120004W
    test 141 toLatLonWGS84 : WGS84
    test 142 toOsgr: [G:TQ, E:48853, N:24427]
    test 143 toOsgr: 548853.602, 124427.985
    test 144 toOsgr: OSGB36
    test 145 toLatLonOSGB36: 50.999422N, 000.121618E
    test 146 toLatLonOSGB36: OSGB36
    test 147 toLatLonWGS84 : 50.999995N, 000.120004E
    test 148 toLatLonWGS84 : WGS84
    test 149 toLatLon: 52.0N, 000.12W
    test 150 toLatLon: 52.0N, 000.12W
    test 151 toLatLon: 52.0N, 000.12W
    test 152 toLatLon: 52.0N, 000.12W
    test 153 toLatLon: 52.0N, 000.12W
    test 154 toLatLon: 52.0N, 000.12W
    test 155 toLatLon: 52.0N, 000.12W
    test 156 toLatLon: 52.0N, 000.12W
    test 157 LatLon: 49.926244°N, 006.297934°W
    test 158 datum: WGS84
    test 159 datum: OSGB36
    test 160 toOsgr: [G:SV, E:91645, N:11753]
    test 161 datum: OSGB36
    test 162 LatLon: 49.926244°N, 006.297934°W
    test 163 datum: WGS84
    test 164 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    12 of 164 testOsgr.py tests (7.3%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 28.659 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testPoints.py

    testing testPoints.py 20.08.30 (module pygeodesy.points 20.09.26)
    test 1 LatLon_: 'LatLon_' object has no attribute '__dict__'
    test 2 LatLon2psxy.ABC: True
    test 3 LatLon2psxy.epsilon: 2.22044604925e-16
    test 4 LatLon2psxy.epsilon: 0.0
    test 5 LatLon2psxy.len: 69
    test 6 LatLon2psxy.iter: 69
    test 7 LatLon2psxy.slice1: 11
    test 8 LatLon2psxy.slice2: <class 'pygeodesy.points.LatLon2psxy'>
    test 9 LatLon2psxy.slice3: (-0.701418, 52.220485, LatLon_(52.220485°N, 000.701418°W))
    test 10 LatLon2psxy.str/repr: LatLon2psxy('[LatLon_(52.220489\xc2\xb0N, 000.701206\xc2\xb0W) ... ][69]', closed=False, radius=None, wrap=False)
    test 11 LatLon2psxy.find LL: 10
    test 12 LatLon2psxy.find LL: -1
    test 13 LatLon2psxy.count: 1
    test 14 LatLon2psxy.index: 10
    test 15 LatLon2psxy.rfind: 10
    test 16 LatLon2psxy.in: True
    test 17 LatLon2psxy.count: 0
    test 18 LatLon2psxy.find: -1
    test 19 LatLon2psxy.rfind: -1
    test 20 LatLon2psxy.not in: True
    test 21 LatLon2psxy.find LL: 20
    test 22 LatLon2psxy.find LL: -1
    test 23 LatLon2psxy.count: 1
    test 24 LatLon2psxy.index: 20
    test 25 LatLon2psxy.rfind: 20
    test 26 LatLon2psxy.in: True
    test 27 LatLon2psxy.count: 0
    test 28 LatLon2psxy.find: -1
    test 29 LatLon2psxy.rfind: -1
    test 30 LatLon2psxy.not in: True
    test 31 LatLon2psxy.find LL: 30
    test 32 LatLon2psxy.find LL: -1
    test 33 LatLon2psxy.count: 1
    test 34 LatLon2psxy.index: 30
    test 35 LatLon2psxy.rfind: 30
    test 36 LatLon2psxy.in: True
    test 37 LatLon2psxy.count: 0
    test 38 LatLon2psxy.find: -1
    test 39 LatLon2psxy.rfind: -1
    test 40 LatLon2psxy.not in: True
    test 41 LatLon2psxy.find LL: 40
    test 42 LatLon2psxy.find LL: -1
    test 43 LatLon2psxy.count: 1
    test 44 LatLon2psxy.index: 40
    test 45 LatLon2psxy.rfind: 40
    test 46 LatLon2psxy.in: True
    test 47 LatLon2psxy.count: 0
    test 48 LatLon2psxy.find: -1
    test 49 LatLon2psxy.rfind: -1
    test 50 LatLon2psxy.not in: True
    test 51 LatLon2psxy.find LL: 50
    test 52 LatLon2psxy.find LL: -1
    test 53 LatLon2psxy.count: 1
    test 54 LatLon2psxy.index: 50
    test 55 LatLon2psxy.rfind: 50
    test 56 LatLon2psxy.in: True
    test 57 LatLon2psxy.count: 0
    test 58 LatLon2psxy.find: -1
    test 59 LatLon2psxy.rfind: -1
    test 60 LatLon2psxy.not in: True
    test 61 LatLon2psxy.find LL: 60
    test 62 LatLon2psxy.find LL: -1
    test 63 LatLon2psxy.count: 1
    test 64 LatLon2psxy.index: 60
    test 65 LatLon2psxy.rfind: 60
    test 66 LatLon2psxy.in: True
    test 67 LatLon2psxy.count: 0
    test 68 LatLon2psxy.find: -1
    test 69 LatLon2psxy.rfind: -1
    test 70 LatLon2psxy.not in: True
    test 71 LatLon2psxy.enumerate[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 72 LatLon2psxy.enumerate[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 73 LatLon2psxy.enumerate[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 74 LatLon2psxy.enumerate[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 75 LatLon2psxy.enumerate[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 76 LatLon2psxy.enumerate[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 77 LatLon2psxy.enumerate[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 78 LatLon2psxy.enumerate[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 79 LatLon2psxy.enumerate[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 80 LatLon2psxy.enumerate[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 81 LatLon2psxy.enumerate[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 82 LatLon2psxy.enumerate[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 83 LatLon2psxy.enumerate[*]: 11
    test 84 LatLon2psxy.reversed[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 85 LatLon2psxy.reversed[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 86 LatLon2psxy.reversed[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 87 LatLon2psxy.reversed[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 88 LatLon2psxy.reversed[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 89 LatLon2psxy.reversed[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 90 LatLon2psxy.reversed[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 91 LatLon2psxy.reversed[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 92 LatLon2psxy.reversed[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 93 LatLon2psxy.reversed[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 94 LatLon2psxy.reversed[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 95 LatLon2psxy.reversed[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 96 LatLon2psxy.findall[0]: (0,)
    test 97 LatLon2psxy.findall[1]: (1,)
    test 98 LatLon2psxy.findall[2]: (2,)
    test 99 LatLon2psxy.findall[3]: (3,)
    test 100 LatLon2psxy.findall[4]: (4,)
    test 101 LatLon2psxy.findall[5]: (5,)
    test 102 LatLon2psxy.findall[6]: (6,)
    test 103 LatLon2psxy.findall[7]: (7,)
    test 104 LatLon2psxy.findall[8]: (8,)
    test 105 LatLon2psxy.findall[9]: (9,)
    test 106 LatLon2psxy.findall[10]: (10,)
    test 107 LatLon2psxy.findall[11]: (11,)
    test 108 LatLon2psxy.findall[*]: 11
    test 109 LatLon2psxy.isNumpy2: False
    test 110 LatLon2psxy.isPoints2: True
    test 111 LatLon2psxy.isTuple2: False
    test 112 numpy.__version__: 1.16.6
    test 113 Numpy2LatLon.ABC: True
    test 114 Numpy2LatLon.epsilon: 2.22044604925e-16
    test 115 Numpy2LatLon.epsilon: 0.0
    test 116 Numpy2LatLon.len: 69
    test 117 Numpy2LatLon.iter: 69
    test 118 Numpy2LatLon.shape: (69, 4)
    test 119 Numpy2LatLon.slice1: 11
    test 120 Numpy2LatLon.slice2: <class 'pygeodesy.points.Numpy2LatLon'>
    test 121 Numpy2LatLon.slice3: 52.220485°N, 000.701418°W
    test 122 Numpy2LatLon.str/repr: Numpy2LatLon('array([[-0.701206, 0. , 52.220489, 0. ]] ... )[69]', ilat=2, ilon=0)
    test 123 Numpy2LatLon.subset: <type 'numpy.ndarray'>
    test 124 Numpy2LatLon.count: 1
    test 125 Numpy2LatLon.index: 10
    test 126 Numpy2LatLon.rfind: 10
    test 127 Numpy2LatLon.in: True
    test 128 Numpy2LatLon.count: 0
    test 129 Numpy2LatLon.find: -1
    test 130 Numpy2LatLon.rfind: -1
    test 131 Numpy2LatLon.not in: True
    test 132 Numpy2LatLon.count: 1
    test 133 Numpy2LatLon.index: 20
    test 134 Numpy2LatLon.rfind: 20
    test 135 Numpy2LatLon.in: True
    test 136 Numpy2LatLon.count: 0
    test 137 Numpy2LatLon.find: -1
    test 138 Numpy2LatLon.rfind: -1
    test 139 Numpy2LatLon.not in: True
    test 140 Numpy2LatLon.count: 1
    test 141 Numpy2LatLon.index: 30
    test 142 Numpy2LatLon.rfind: 30
    test 143 Numpy2LatLon.in: True
    test 144 Numpy2LatLon.count: 0
    test 145 Numpy2LatLon.find: -1
    test 146 Numpy2LatLon.rfind: -1
    test 147 Numpy2LatLon.not in: True
    test 148 Numpy2LatLon.count: 1
    test 149 Numpy2LatLon.index: 40
    test 150 Numpy2LatLon.rfind: 40
    test 151 Numpy2LatLon.in: True
    test 152 Numpy2LatLon.count: 0
    test 153 Numpy2LatLon.find: -1
    test 154 Numpy2LatLon.rfind: -1
    test 155 Numpy2LatLon.not in: True
    test 156 Numpy2LatLon.count: 1
    test 157 Numpy2LatLon.index: 50
    test 158 Numpy2LatLon.rfind: 50
    test 159 Numpy2LatLon.in: True
    test 160 Numpy2LatLon.count: 0
    test 161 Numpy2LatLon.find: -1
    test 162 Numpy2LatLon.rfind: -1
    test 163 Numpy2LatLon.not in: True
    test 164 Numpy2LatLon.count: 1
    test 165 Numpy2LatLon.index: 60
    test 166 Numpy2LatLon.rfind: 60
    test 167 Numpy2LatLon.in: True
    test 168 Numpy2LatLon.count: 0
    test 169 Numpy2LatLon.find: -1
    test 170 Numpy2LatLon.rfind: -1
    test 171 Numpy2LatLon.not in: True
    test 172 Numpy2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 173 Numpy2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 174 Numpy2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 175 Numpy2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 176 Numpy2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 177 Numpy2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 178 Numpy2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 179 Numpy2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 180 Numpy2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 181 Numpy2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 182 Numpy2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 183 Numpy2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 184 Numpy2LatLon.enumerate[*]: 11
    test 185 Numpy2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 186 Numpy2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 187 Numpy2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 188 Numpy2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 189 Numpy2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 190 Numpy2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 191 Numpy2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 192 Numpy2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 193 Numpy2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 194 Numpy2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 195 Numpy2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 196 Numpy2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 197 Numpy2LatLon.findall[0]: (0,)
    test 198 Numpy2LatLon.findall[1]: (1,)
    test 199 Numpy2LatLon.findall[2]: (2,)
    test 200 Numpy2LatLon.findall[3]: (3,)
    test 201 Numpy2LatLon.findall[4]: (4,)
    test 202 Numpy2LatLon.findall[5]: (5,)
    test 203 Numpy2LatLon.findall[6]: (6,)
    test 204 Numpy2LatLon.findall[7]: (7,)
    test 205 Numpy2LatLon.findall[8]: (8,)
    test 206 Numpy2LatLon.findall[9]: (9,)
    test 207 Numpy2LatLon.findall[10]: (10,)
    test 208 Numpy2LatLon.findall[11]: (11,)
    test 209 Numpy2LatLon.findall[*]: 11
    test 210 Numpy2LatLon.isNumpy2: True
    test 211 Numpy2LatLon.isPoints2: False
    test 212 Numpy2LatLon.isTuple2: False
    test 213 Tuple2LatLon.ABC: True
    test 214 Tuple2LatLon.epsilon: 2.22044604925e-16
    test 215 Tuple2LatLon.epsilon: 0.0
    test 216 Tuple2LatLon.len: 69
    test 217 Tuple2LatLon.iter: 69
    test 218 Tuple2LatLon.slice1: 11
    test 219 Tuple2LatLon.slice2: <class 'pygeodesy.points.Tuple2LatLon'>
    test 220 Tuple2LatLon.slice3: 52.220485°N, 000.701418°W
    test 221 Tuple2LatLon.str/repr: Tuple2LatLon('[(0, -0.701206, 0, 52.220489) ... ][69]', ilat=3, ilon=1)
    test 222 Tuple2LatLon.subset: <type 'list'>
    test 223 Tuple2LatLon.count: 1
    test 224 Tuple2LatLon.index: 10
    test 225 Tuple2LatLon.rfind: 10
    test 226 Tuple2LatLon.in: True
    test 227 Tuple2LatLon.count: 0
    test 228 Tuple2LatLon.find: -1
    test 229 Tuple2LatLon.rfind: -1
    test 230 Tuple2LatLon.not in: True
    test 231 Tuple2LatLon.count: 1
    test 232 Tuple2LatLon.index: 20
    test 233 Tuple2LatLon.rfind: 20
    test 234 Tuple2LatLon.in: True
    test 235 Tuple2LatLon.count: 0
    test 236 Tuple2LatLon.find: -1
    test 237 Tuple2LatLon.rfind: -1
    test 238 Tuple2LatLon.not in: True
    test 239 Tuple2LatLon.count: 1
    test 240 Tuple2LatLon.index: 30
    test 241 Tuple2LatLon.rfind: 30
    test 242 Tuple2LatLon.in: True
    test 243 Tuple2LatLon.count: 0
    test 244 Tuple2LatLon.find: -1
    test 245 Tuple2LatLon.rfind: -1
    test 246 Tuple2LatLon.not in: True
    test 247 Tuple2LatLon.count: 1
    test 248 Tuple2LatLon.index: 40
    test 249 Tuple2LatLon.rfind: 40
    test 250 Tuple2LatLon.in: True
    test 251 Tuple2LatLon.count: 0
    test 252 Tuple2LatLon.find: -1
    test 253 Tuple2LatLon.rfind: -1
    test 254 Tuple2LatLon.not in: True
    test 255 Tuple2LatLon.count: 1
    test 256 Tuple2LatLon.index: 50
    test 257 Tuple2LatLon.rfind: 50
    test 258 Tuple2LatLon.in: True
    test 259 Tuple2LatLon.count: 0
    test 260 Tuple2LatLon.find: -1
    test 261 Tuple2LatLon.rfind: -1
    test 262 Tuple2LatLon.not in: True
    test 263 Tuple2LatLon.count: 1
    test 264 Tuple2LatLon.index: 60
    test 265 Tuple2LatLon.rfind: 60
    test 266 Tuple2LatLon.in: True
    test 267 Tuple2LatLon.count: 0
    test 268 Tuple2LatLon.find: -1
    test 269 Tuple2LatLon.rfind: -1
    test 270 Tuple2LatLon.not in: True
    test 271 Tuple2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 272 Tuple2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 273 Tuple2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 274 Tuple2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 275 Tuple2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 276 Tuple2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 277 Tuple2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 278 Tuple2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 279 Tuple2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 280 Tuple2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 281 Tuple2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 282 Tuple2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 283 Tuple2LatLon.enumerate[*]: 11
    test 284 Tuple2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 285 Tuple2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 286 Tuple2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 287 Tuple2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 288 Tuple2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 289 Tuple2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 290 Tuple2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 291 Tuple2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 292 Tuple2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 293 Tuple2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 294 Tuple2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 295 Tuple2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 296 Tuple2LatLon.findall[0]: (0,)
    test 297 Tuple2LatLon.findall[1]: (1,)
    test 298 Tuple2LatLon.findall[2]: (2,)
    test 299 Tuple2LatLon.findall[3]: (3,)
    test 300 Tuple2LatLon.findall[4]: (4,)
    test 301 Tuple2LatLon.findall[5]: (5,)
    test 302 Tuple2LatLon.findall[6]: (6,)
    test 303 Tuple2LatLon.findall[7]: (7,)
    test 304 Tuple2LatLon.findall[8]: (8,)
    test 305 Tuple2LatLon.findall[9]: (9,)
    test 306 Tuple2LatLon.findall[10]: (10,)
    test 307 Tuple2LatLon.findall[11]: (11,)
    test 308 Tuple2LatLon.findall[*]: 11
    test 309 Tuple2LatLon.isNumpy2: False
    test 310 Tuple2LatLon.isPoints2: False
    test 311 Tuple2LatLon.isTuple2: True

    testing(pygeodesy.points, 20.09.26, LatLon=<class 'pygeodesy.points.LatLon_'>)
    test 312 areaOf: 8.811228e+09
    test 313 centroidOf: 45.5, 1.5
    test 314 perimeterOf: 2.673633e+05
    test 315 isclockwise: False
    test 316 areaOf: 7.086883e+09
    test 317 perimeterOf: 2.687460e+05
    test 318 centroidOf: 0.333333, 0.333333
    test 319 isclockwise: True
    test 320 areaOf: 2.827856e+10
    test 321 perimeterOf: 4.717039e+05
    test 322 centroidOf: 1.0, 1.0
    test 323 isclockwise: False
    test 324 areaOf: 1.047657e+12
    test 325 perimeterOf: 2.332643e+07
    test 326 centroidOf: 22.536, -164.928
    test 327 isclockwise: True
    test 328 areaOf: 8.482014e+10
    test 329 perimeterOf: 1.334104e+06
    test 330 centroidOf: 1.167, 1.667
    test 331 isclockwise: False
    test 332 areaOf: 5.151974e+13
    test 333 perimeterOf: 2.638608e+07
    test 334 centroidOf: -19.444, -133.333
    test 335 isclockwise: True
    test 336 areaOf: 4.469277e+12  FAILED, KNOWN, expected 1.366270e+13
    test 337 perimeterOf: 1.562029e+07  FAILED, KNOWN, expected 1.366270e+13
    test 338 centroidOf: -72.112, 92.032
    test 339 isclockwise: False
    test 340 points2: 18
    test 341 latlon: -66.6, -88.0
    test 342 philam: -1.162389, -1.53589
    test 343 to2ab: -1.162389, -1.53589
    test 344 toStr: 66.6°S, 088.0°W, kwds='test'
    test 345 __ne__: False
    test 346 latlonheight: -66.6, -88.0, 0.0
    test 347 philamheight: -1.162389, -1.53589, 0.0
    test 348 _N_vector: (0.01386, -0.39691, -0.91775)
    test 349 toNvector: (0.01386, -0.39691, -0.91775)
    test 350 toNvector: (0.01386, -0.396906, -0.917755, 0)  FAILED, KNOWN, expected (0.01386, -0.396906, -0.917755)
    test 351 classof: 66.6°S, 088.0°W
    test 352 others: 66.6°S, 088.0°W
    test 353 copy(LatLon_): (<class 'pygeodesy.points.LatLon_'>, True)
    test 354 LatLon_.copy(): (<class 'pygeodesy.points.LatLon_'>, True)

    testing(pygeodesy.points, 20.09.26, LatLon=<class 'pygeodesy.ellipsoidalKarney.LatLon'>)
    test 355 areaOf: 8.811228e+09
    test 356 centroidOf: 45.5, 1.5
    test 357 perimeterOf: 2.673633e+05
    test 358 isclockwise: False
    test 359 areaOf: 7.086883e+09
    test 360 perimeterOf: 2.687460e+05
    test 361 centroidOf: 0.333333, 0.333333
    test 362 isclockwise: True
    test 363 areaOf: 2.827856e+10
    test 364 perimeterOf: 4.717039e+05
    test 365 centroidOf: 1.0, 1.0
    test 366 isclockwise: False
    test 367 areaOf: 1.047657e+12
    test 368 perimeterOf: 2.332643e+07
    test 369 centroidOf: 22.536, -164.928
    test 370 isclockwise: True
    test 371 areaOf: 8.482014e+10
    test 372 perimeterOf: 1.334104e+06
    test 373 centroidOf: 1.167, 1.667
    test 374 isclockwise: False
    test 375 areaOf: 5.151974e+13
    test 376 perimeterOf: 2.638608e+07
    test 377 centroidOf: -19.444, -133.333
    test 378 isclockwise: True
    test 379 areaOf: 4.469277e+12  FAILED, KNOWN, expected 1.366270e+13
    test 380 perimeterOf: 1.562029e+07  FAILED, KNOWN, expected 1.366270e+13
    test 381 centroidOf: -72.112, 92.032
    test 382 isclockwise: False
    test 383 points2: 18
    test 384 latlon: -66.6, -88.0
    test 385 philam: -1.162389, -1.53589
    test 386 to2ab: -1.162389, -1.53589
    test 387 latlonheight: -66.6, -88.0, 0.0
    test 388 philamheight: -1.162389, -1.53589, 0.0
    test 389 _N_vector: (0.01386, -0.39691, -0.91775)
    test 390 toNvector: (0.01386, -0.39691, -0.91775)
    test 391 toNvector: (0.01386, -0.396906, -0.917755)
    test 392 classof: 66.6°S, 088.0°W
    test 393 others: 66.6°S, 088.0°W
    test 394 copy(LatLon): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)
    test 395 LatLon.copy(): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)

    testing(pygeodesy.points, 20.09.26, LatLon=<class 'pygeodesy.ellipsoidalVincenty.LatLon'>)
    test 396 areaOf: 8.811228e+09
    test 397 centroidOf: 45.5, 1.5
    test 398 perimeterOf: 2.673633e+05
    test 399 isclockwise: False
    test 400 areaOf: 7.086883e+09
    test 401 perimeterOf: 2.687460e+05
    test 402 centroidOf: 0.333333, 0.333333
    test 403 isclockwise: True
    test 404 areaOf: 2.827856e+10
    test 405 perimeterOf: 4.717039e+05
    test 406 centroidOf: 1.0, 1.0
    test 407 isclockwise: False
    test 408 areaOf: 1.047657e+12
    test 409 perimeterOf: 2.332643e+07
    test 410 centroidOf: 22.536, -164.928
    test 411 isclockwise: True
    test 412 areaOf: 8.482014e+10
    test 413 perimeterOf: 1.334104e+06
    test 414 centroidOf: 1.167, 1.667
    test 415 isclockwise: False
    test 416 areaOf: 5.151974e+13
    test 417 perimeterOf: 2.638608e+07
    test 418 centroidOf: -19.444, -133.333
    test 419 isclockwise: True
    test 420 areaOf: 4.469277e+12  FAILED, KNOWN, expected 1.366270e+13
    test 421 perimeterOf: 1.562029e+07  FAILED, KNOWN, expected 1.366270e+13
    test 422 centroidOf: -72.112, 92.032
    test 423 isclockwise: False
    test 424 points2: 18
    test 425 latlon: -66.6, -88.0
    test 426 philam: -1.162389, -1.53589
    test 427 to2ab: -1.162389, -1.53589
    test 428 latlonheight: -66.6, -88.0, 0.0
    test 429 philamheight: -1.162389, -1.53589, 0.0
    test 430 _N_vector: (0.01386, -0.39691, -0.91775)
    test 431 toNvector: (0.01386, -0.39691, -0.91775)
    test 432 toNvector: (0.01386, -0.396906, -0.917755)
    test 433 classof: 66.6°S, 088.0°W
    test 434 others: 66.6°S, 088.0°W
    test 435 copy(LatLon): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)
    test 436 LatLon.copy(): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)

    testing(pygeodesy.points, 20.09.26, LatLon=<class 'pygeodesy.sphericalTrigonometry.LatLon'>)
    test 437 areaOf: 8.811228e+09
    test 438 centroidOf: 45.5, 1.5
    test 439 perimeterOf: 2.673633e+05
    test 440 isclockwise: False
    test 441 areaOf: 7.086883e+09
    test 442 perimeterOf: 2.687460e+05
    test 443 centroidOf: 0.333333, 0.333333
    test 444 isclockwise: True
    test 445 areaOf: 2.827856e+10
    test 446 perimeterOf: 4.717039e+05
    test 447 centroidOf: 1.0, 1.0
    test 448 isclockwise: False
    test 449 areaOf: 1.047657e+12
    test 450 perimeterOf: 2.332643e+07
    test 451 centroidOf: 22.536, -164.928
    test 452 isclockwise: True
    test 453 areaOf: 8.482014e+10
    test 454 perimeterOf: 1.334104e+06
    test 455 centroidOf: 1.167, 1.667
    test 456 isclockwise: False
    test 457 areaOf: 5.151974e+13
    test 458 perimeterOf: 2.638608e+07
    test 459 centroidOf: -19.444, -133.333
    test 460 isclockwise: True
    test 461 areaOf: 4.469277e+12  FAILED, KNOWN, expected 1.366270e+13
    test 462 perimeterOf: 1.562029e+07  FAILED, KNOWN, expected 1.366270e+13
    test 463 centroidOf: -72.112, 92.032
    test 464 isclockwise: False
    test 465 points2: 18
    test 466 latlon: -66.6, -88.0
    test 467 philam: -1.162389, -1.53589
    test 468 to2ab: -1.162389, -1.53589
    test 469 latlonheight: -66.6, -88.0, 0.0
    test 470 philamheight: -1.162389, -1.53589, 0.0
    test 471 _N_vector: (0.01386, -0.39691, -0.91775)
    test 472 toNvector: (0.01386, -0.39691, -0.91775)
    test 473 toNvector: (0.01386, -0.396906, -0.917755)
    test 474 classof: 66.6°S, 088.0°W
    test 475 others: 66.6°S, 088.0°W
    test 476 copy(LatLon): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)
    test 477 LatLon.copy(): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)

    testing(pygeodesy.points, 20.09.26, LatLon=<class 'pygeodesy.ellipsoidalNvector.LatLon'>)
    test 478 areaOf: 8.811228e+09
    test 479 centroidOf: 45.5, 1.5
    test 480 perimeterOf: 2.673633e+05
    test 481 isclockwise: False
    test 482 areaOf: 7.086883e+09
    test 483 perimeterOf: 2.687460e+05
    test 484 centroidOf: 0.333333, 0.333333
    test 485 isclockwise: True
    test 486 areaOf: 2.827856e+10
    test 487 perimeterOf: 4.717039e+05
    test 488 centroidOf: 1.0, 1.0
    test 489 isclockwise: False
    test 490 areaOf: 1.047657e+12
    test 491 perimeterOf: 2.332643e+07
    test 492 centroidOf: 22.536, -164.928
    test 493 isclockwise: True
    test 494 areaOf: 8.482014e+10
    test 495 perimeterOf: 1.334104e+06
    test 496 centroidOf: 1.167, 1.667
    test 497 isclockwise: False
    test 498 areaOf: 5.151974e+13
    test 499 perimeterOf: 2.638608e+07
    test 500 centroidOf: -19.444, -133.333
    test 501 isclockwise: True
    test 502 areaOf: 4.469277e+12  FAILED, KNOWN, expected 1.366270e+13
    test 503 perimeterOf: 1.562029e+07  FAILED, KNOWN, expected 1.366270e+13
    test 504 centroidOf: -72.112, 92.032
    test 505 isclockwise: False
    test 506 points2: 18
    test 507 latlon: -66.6, -88.0
    test 508 philam: -1.162389, -1.53589
    test 509 to2ab: -1.162389, -1.53589
    test 510 latlonheight: -66.6, -88.0, 0.0
    test 511 philamheight: -1.162389, -1.53589, 0.0
    test 512 _N_vector: (0.01386, -0.39691, -0.91775)
    test 513 toNvector: (0.01386, -0.39691, -0.91775)
    test 514 toNvector: (0.01386, -0.396906, -0.917755)
    test 515 classof: 66.6°S, 088.0°W
    test 516 others: 66.6°S, 088.0°W
    test 517 copy(LatLon): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)
    test 518 LatLon.copy(): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)

    testing(pygeodesy.points, 20.09.26, LatLon=<class 'pygeodesy.sphericalNvector.LatLon'>)
    test 519 areaOf: 8.811228e+09
    test 520 centroidOf: 45.5, 1.5
    test 521 perimeterOf: 2.673633e+05
    test 522 isclockwise: False
    test 523 areaOf: 7.086883e+09
    test 524 perimeterOf: 2.687460e+05
    test 525 centroidOf: 0.333333, 0.333333
    test 526 isclockwise: True
    test 527 areaOf: 2.827856e+10
    test 528 perimeterOf: 4.717039e+05
    test 529 centroidOf: 1.0, 1.0
    test 530 isclockwise: False
    test 531 areaOf: 1.047657e+12
    test 532 perimeterOf: 2.332643e+07
    test 533 centroidOf: 22.536, -164.928
    test 534 isclockwise: True
    test 535 areaOf: 8.482014e+10
    test 536 perimeterOf: 1.334104e+06
    test 537 centroidOf: 1.167, 1.667
    test 538 isclockwise: False
    test 539 areaOf: 5.151974e+13
    test 540 perimeterOf: 2.638608e+07
    test 541 centroidOf: -19.444, -133.333
    test 542 isclockwise: True
    test 543 areaOf: 4.469277e+12  FAILED, KNOWN, expected 1.366270e+13
    test 544 perimeterOf: 1.562029e+07  FAILED, KNOWN, expected 1.366270e+13
    test 545 centroidOf: -72.112, 92.032
    test 546 isclockwise: False
    test 547 points2: 18
    test 548 latlon: -66.6, -88.0
    test 549 philam: -1.162389, -1.53589
    test 550 to2ab: -1.162389, -1.53589
    test 551 latlonheight: -66.6, -88.0, 0.0
    test 552 philamheight: -1.162389, -1.53589, 0.0
    test 553 _N_vector: (0.01386, -0.39691, -0.91775)
    test 554 toNvector: (0.01386, -0.39691, -0.91775)
    test 555 toNvector: (0.01386, -0.396906, -0.917755)
    test 556 classof: 66.6°S, 088.0°W
    test 557 others: 66.6°S, 088.0°W
    test 558 copy(LatLon): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)
    test 559 LatLon.copy(): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)

    13 of 559 testPoints.py tests (2.3%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 93.623 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testRoutes.py

    testing testRoutes.py 18.10.12
    test 1 points.areaOf('Antarctica', adjust=True, radius=6371.008771, wrap=True): 4469277.057  FAILED, KNOWN, expected 13552524.800
    test 2 points.areaOf('PtsFFI', adjust=True, radius=6371.008771, wrap=True): 1.288
    test 3 points.areaOf('RdpFFI', adjust=True, radius=6371.008771, wrap=True): 1.241
    test 4 points.areaOf('Pts', adjust=True, radius=6371.008771, wrap=True): 131184.240
    test 5 points.areaOf('VwPts', adjust=True, radius=6371.008771, wrap=True): 140310.144
    test 6 points.areaOf('_JFK_LHR1', adjust=True, radius=6371.008771, wrap=True): 41383852.921  FAILED, KNOWN, expected 40041368.849
    test 7 points.areaOf('_JFK_LHR2', adjust=True, radius=6371.008771, wrap=True): 82767705.842  FAILED, KNOWN, expected 80082737.697
    test 8 points.areaOf('Antarctica', adjust=False, radius=6371.008771, wrap=True): 22491981.367  FAILED, KNOWN, expected 13552524.800
    test 9 points.areaOf('PtsFFI', adjust=False, radius=6371.008771, wrap=True): 2.185  FAILED, KNOWN, expected 1.288
    test 10 points.areaOf('RdpFFI', adjust=False, radius=6371.008771, wrap=True): 2.105  FAILED, KNOWN, expected 1.241
    test 11 points.areaOf('Pts', adjust=False, radius=6371.008771, wrap=True): 233595.011  FAILED, KNOWN, expected 131184.240
    test 12 points.areaOf('VwPts', adjust=False, radius=6371.008771, wrap=True): 258465.911  FAILED, KNOWN, expected 140310.144
    test 13 points.areaOf('_JFK_LHR1', adjust=False, radius=6371.008771, wrap=True): 41780731.678  FAILED, KNOWN, expected 40041368.849
    test 14 points.areaOf('_JFK_LHR2', adjust=False, radius=6371.008771, wrap=True): 83561463.357  FAILED, KNOWN, expected 80082737.697
    test 15 sphericalTrigonometry.areaOf('Antarctica', radius=6371.008771, wrap=True): 13552524.810
    test 16 sphericalTrigonometry.areaOf('PtsFFI', radius=6371.008771, wrap=True): 1.338
    test 17 sphericalTrigonometry.areaOf('RdpFFI', radius=6371.008771, wrap=True): 1.289
    test 18 sphericalTrigonometry.areaOf('Pts', radius=6371.008771, wrap=True): 125942.444
    test 19 sphericalTrigonometry.areaOf('VwPts', radius=6371.008771, wrap=True): 118897.757
    test 20 sphericalTrigonometry.areaOf('_JFK_LHR1', radius=6371.008771, wrap=True): 40105639.197
    test 21 sphericalTrigonometry.areaOf('_JFK_LHR2', radius=6371.008771, wrap=True): 80211278.393
    test 22 ellipsoidalVincenty.areaOf: No module named geographiclib.geodesic
    test 23 points.perimeterOf('Antarctica', closed=False, radius=6371008.771415, wrap=True): 15620294.792  FAILED, KNOWN, expected 16765661.499
    test 24 points.perimeterOf('PtsFFI', closed=False, radius=6371008.771415, wrap=True): 3224.123
    test 25 points.perimeterOf('RdpFFI', closed=False, radius=6371008.771415, wrap=True): 3185.467
    test 26 points.perimeterOf('Pts', closed=False, radius=6371008.771415, wrap=True): 2762313.129
    test 27 points.perimeterOf('VwPts', closed=False, radius=6371008.771415, wrap=True): 2672557.850
    test 28 points.perimeterOf('_JFK_LHR1', closed=False, radius=6371008.771415, wrap=True): 16034670.768  FAILED, KNOWN, expected 15766750.804
    test 29 points.perimeterOf('_JFK_LHR2', closed=False, radius=6371008.771415, wrap=True): 26286857.120  FAILED, KNOWN, expected 25981742.208
    test 30 sphericalTrigonometry.perimeterOf('Antarctica', closed=False, radius=6371008.771415, wrap=True): 15470624.834
    test 31 sphericalTrigonometry.perimeterOf('PtsFFI', closed=False, radius=6371008.771415, wrap=True): 3224.123
    test 32 sphericalTrigonometry.perimeterOf('RdpFFI', closed=False, radius=6371008.771415, wrap=True): 3185.467
    test 33 sphericalTrigonometry.perimeterOf('Pts', closed=False, radius=6371008.771415, wrap=True): 2762313.116
    test 34 sphericalTrigonometry.perimeterOf('VwPts', closed=False, radius=6371008.771415, wrap=True): 2672556.441
    test 35 sphericalTrigonometry.perimeterOf('_JFK_LHR1', closed=False, radius=6371008.771415, wrap=True): 15789078.314
    test 36 sphericalTrigonometry.perimeterOf('_JFK_LHR2', closed=False, radius=6371008.771415, wrap=True): 26041264.665
    test 37 ellipsoidalVincenty.perimeterOf: No module named geographiclib.geodesic
    test 38 no module: geographiclib.Geodesic
    test 39 isclockwise('Antarctica', adjust=False, wrap=True): 0.000
    test 40 isclockwise('PtsFFI', adjust=False, wrap=True): 1.000
    test 41 isclockwise('RdpFFI', adjust=False, wrap=True): 1.000
    test 42 isclockwise('Pts', adjust=False, wrap=True): 1.000
    test 43 isclockwise('VwPts', adjust=False, wrap=True): 1.000
    test 44 isclockwise('_JFK_LHR1', adjust=False, wrap=True): 0.000
    test 45 isclockwise('_JFK_LHR2', adjust=False, wrap=True): 0.000

    13 of 45 testRoutes.py tests (28.9%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 2.806 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testSimplify.py

    testing testSimplify.py 20.04.06 (module pygeodesy.simplify 20.09.10)
    test 1 simplify1(16614, adjust=True) 1m (147.635 ms): 16597
    test 2 simplifyRW(16614, indices=True, adjust=True, shortest=False) 1m (633.591 ms): 7095
    test 3 simplifyRW(16614, adjust=True, shortest=False) 1m (660.630 ms): 7095
    test 4 simplifyRW(16614, adjust=True, shortest=True) 1m (789.420 ms): 8302
    test 5 simplifyVWm(16614, indices=True, adjust=True) 1m (361.353 ms): 16328
    test 6 simplifyVWm(16614, adjust=True) 1m (330.637 ms): 16328
    test 7 simplifyVWm(16614, adjust=False) 1m (295.788 ms): 16373
    test 8 simplifyRDPm(16614, adjust=True, shortest=False) 1m (1.393 sec): 15864
    test 9 simplifyRDPm(16614, adjust=True, shortest=True) 1m (1.393 sec): 15867
    test 10 simplifyRDPgr(16614, adjust=True, modified=True, shortest=True) 1m (1.247 sec): 15867
    test 11 simplifyRDPm(16614, adjust=False, shortest=False) 1m (1.518 sec): 15869
    test 12 simplifyRDPfw(16614, adjust=False, modified=True, shortest=False) 1m (1.059 sec): 15869
    test 13 simplifyRDP(16614, indices=True, adjust=True, shortest=True) 1m (2.459 sec): 10960
    test 14 simplifyRDP(16614, adjust=True, shortest=True) 1m (2.407 sec): 10960
    test 15 simplifyRDPgr(16614, adjust=True, modified=False, shortest=True) 1m (1.233 sec): 10960
    test 16 simplifyRDP(16614, indices=True, adjust=False, shortest=False) 1m (1.924 sec): 11248
    test 17 simplifyRDP(16614, adjust=False, shortest=False) 1m (1.946 sec): 11248
    test 18 simplifyRDPfw(16614, adjust=False, modified=False, shortest=False) 1m (776.635 ms): 11248
    test 19 simplifyVW(1661, adjust=True) 1m (47.006 ms): 1641
    test 20 simplifyVW(1661, adjust=False) 1m (40.654 ms): 1646
    test 21 simplifyRDP(1661, adjust=True, shortest=False) 1m (207.600 ms): 1231
    test 22 simplifyRDP(1661, adjust=True, shortest=True) 1m (177.211 ms): 1231
    test 23 simplifyRDPgr(1661, adjust=True, shortest=True) 1m (101.152 ms): 1231
    test 24 simplifyRDP(1661, adjust=False, shortest=False) 1m (184.245 ms): 1267
    test 25 simplifyRDPfw(1661, adjust=False, shortest=False) 1m (56.495 ms): 1267
    test 26 simplifyRDPgr(1661, adjust=False, shortest=True) 1m (94.635 ms): 1267
    test 27 simplifyVW(69, adjust=False) 1m (1.728 ms): 69
    test 28 simplifyRDP(69, adjust=False, shortest=False) 1m (4.489 ms): 50
    test 29 simplifyRDPfw(69, adjust=False, shortest=False) 1m (1.869 ms): 50
    test 30 simplifyRDPgr(69, adjust=False, shortest=True) 1m (2.269 ms): 50
    test 31 simplifyRDPgr(69, adjust=True, shortest=True) 1m (2.990 ms): 45
    test 32 simplifyRDP(5, adjust=False, shortest=True) 1m (174.046 us): 5
    test 33 simplifyVW(5, adjust=False, attr='name') 30m (148.058 us): 5
    test 34 numpy.__version__: 1.16.6
    test 35 simplify1(69, adjust=False) 1m (3.061 ms): 69
    test 36 simplify1(69, adjust=False) result: <type 'numpy.ndarray'>
    test 37 simplifyRW(69, adjust=False) 1m (3.311 ms): 33
    test 38 simplifyRW(69, adjust=False) result: <type 'numpy.ndarray'>
    test 39 simplifyRDP(69, adjust=False) 1m (10.938 ms): 50
    test 40 simplifyRDP(69, adjust=False) result: <type 'numpy.ndarray'>
    test 41 simplifyRDPm(69, adjust=False) 1m (2.936 ms): 67
    test 42 simplifyRDPm(69, adjust=False) result: <type 'numpy.ndarray'>
    test 43 simplifyRDPfw(69, adjust=False) 1m (6.252 ms): 50
    test 44 simplifyRDPgr(69, adjust=False) 1m (9.463 ms): 50
    test 45 simplifyVW(69, adjust=False) 1m (2.597 ms): 69
    test 46 simplifyVW(69, adjust=False) result: <type 'numpy.ndarray'>
    test 47 simplifyVWm(69, adjust=False) 1m (2.541 ms): 69
    test 48 simplifyVWm(69, adjust=False) result: <type 'numpy.ndarray'>
    test 49 simplify1(69, adjust=True) 1m (1.366 ms): 69
    test 50 simplify1(69, adjust=True) result: <type 'numpy.ndarray'>
    test 51 simplifyRW(69, adjust=True) 1m (1.408 ms): 31
    test 52 simplifyRW(69, adjust=True) result: <type 'numpy.ndarray'>
    test 53 simplifyRDP(69, adjust=True) 1m (8.482 ms): 45
    test 54 simplifyRDP(69, adjust=True) result: <type 'numpy.ndarray'>
    test 55 simplifyRDPm(69, adjust=True) 1m (2.821 ms): 67
    test 56 simplifyRDPm(69, adjust=True) result: <type 'numpy.ndarray'>
    test 57 simplifyRDPfw(69, adjust=True) 1m (5.284 ms): 45
    test 58 simplifyRDPgr(69, adjust=True) 1m (9.078 ms): 45
    test 59 simplifyVW(69, adjust=True) 1m (2.721 ms): 69
    test 60 simplifyVW(69, adjust=True) result: <type 'numpy.ndarray'>
    test 61 simplifyVWm(69, adjust=True) 1m (2.653 ms): 69
    test 62 simplifyVWm(69, adjust=True) result: <type 'numpy.ndarray'>
    test 63 simplify1(69, indices=True, adjust=False) 1m (1.085 ms): 69
    test 64 simplify1(69, indices=True, adjust=False) result: <type 'list'>
    test 65 simplifyRW(69, indices=True, adjust=False) 1m (1.222 ms): 33
    test 66 simplifyRW(69, indices=True, adjust=False) result: <type 'list'>
    test 67 simplifyRDP(69, indices=True, adjust=False) 1m (7.652 ms): 50
    test 68 simplifyRDP(69, indices=True, adjust=False) result: <type 'list'>
    test 69 simplifyRDPm(69, indices=True, adjust=False) 1m (2.856 ms): 67
    test 70 simplifyRDPm(69, indices=True, adjust=False) result: <type 'list'>
    test 71 simplifyRDPfw(69, indices=True, adjust=True) 1m (5.869 ms): 45
    test 72 simplifyRDPgr(69, indices=True, adjust=True) 1m (10.516 ms): 45
    test 73 simplifyVW(69, indices=True, adjust=False) 1m (2.962 ms): 69
    test 74 simplifyVW(69, indices=True, adjust=False) result: <type 'list'>
    test 75 simplifyVWm(69, indices=True, adjust=False) 1m (2.491 ms): 69
    test 76 simplifyVWm(69, indices=True, adjust=False) result: <type 'list'>

    all 76 testSimplify.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 21.614 sec

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testSpherical.py

    testing testSpherical.py 20.09.22

    testLatLon(pygeodesy.sphericalNvector, 20.10.02)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 isequalTo: False
    test 18 antipode1: 52.205°S, 179.881°W
    test 19 antipode2: True
    test 20 antipode3: 52.205°N, 000.119°E
    test 21 antipode4: True
    test 22 antipode5: 52.205°N, 000.119°E
    test 23 initialBearingTo: 156.1666
    test 24 finalBearingTo: 157.8904
    test 25 initialBearingTo: 65.8921
    test 26 finalBearingTo: 93.8581
    test 27 bearingTo2: 156.1666, 157.8904
    test 28 ispolar: True
    test 29 copy: True
    test 30 __eq__: True
    test 31 __ne__: False
    test 32 equirectangularTo: 404329.56
    test 33 distanceTo: 404279.720589
    test 34 distanceTo: 404279.720589
    test 35 distanceTo: 2145
    test 36 distanceTo: 18013602.92
    test 37 distanceTo: 0.00  FAILED, KNOWN, expected 20015114.35
    test 38 intermediateTo: 51.372084°N, 000.707337°E
    test 39 intermediateTo: True
    test 40 intermediateTo: 404279.721
    test 41 intermediateTo+5: 35.160975°N, 008.989542°E
    test 42 intermediateTo+5: 5.000
    test 43 intermediateTo-4: 64.911647°N, 013.726301°W
    test 44 intermediateTo-4: 4.000
    test 45 intermediateTo-h: 125.000
    test 46 intermediateChordTo: 51.372294°N, 000.707192°E
    test 47 intermediateChordTo: True
    test 48 intermediateChordTo-h: 125.000
    test 49 midpointTo: 50.536327°N, 001.274614°E
    test 50 destination: 51.513546°N, 000.098345°W
    test 51 destination: 51°30′49″N, 000°05′54″W
    test 52 destination: 34°37′N, 116°33′W
    test 53 destination: 34.613647°N, 116.55116°W
    test 54 destination: 0.604122N, 2.034201W
    test 55 destination: 31.96383509°N, 064.37329146°E
    test 56 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 57 alongTrackDistanceTo: 62331.58
    test 58 alongTrackDistanceTo: 99.588
    test 59 alongTrackDistanceTo: -7702.7
    test 60 alongTrackDistanceTo: 7587.6
    test 61 crossTrackDistanceTo: -305.665281606  FAILED, KNOWN, expected TypeError
    test 62 crossTrackDistanceTo: -307.55
    test 63 crossTrackDistanceTo: 7.4524
    test 64 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 65 cosineAndoyerLambertTo: 124801.098
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineForsyheAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineLawTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 equirectangularTo: 124804.754
    test 72 equirectangularTo: 124804.754
    test 73 euclideanTo: 130015.089
    test 74 euclideanTo: 130015.089
    test 75 flatLocalTo: 124804.754
    test 76 flatLocalTo: 124804.754
    test 77 flatPolarTo: 133663.257
    test 78 flatPolarTo: 133663.257
    test 79 haversineTo: 124801.098
    test 80 haversineTo: 124801.098
    test 81 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 82 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 83 thomasTo: 124801.098
    test 84 thomasTo: 124801.098
    test 85 vincentysTo: 124801.098
    test 86 vincentysTo: 124801.098
    test 87 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 88 isclockwise: False
    test 89 isclockwise*: False
    test 90 isclockwise: True
    test 91 isclockwise*: True
    test 92 isclockwise: points (2): too few
    test 93 isclockwise*: points (2): too few
    test 94 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 95 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 96 isconvex: False
    test 97 isconvex*: False
    test 98 isconvex: True
    test 99 isconvex*: True
    test 100 isconvex: points (2): too few
    test 101 isconvex*: points (2): too few
    test 102 isenclosedBy1: True
    test 103 isenclosedBy1*: True
    test 104 isenclosedBy2: False
    test 105 isenclosedBy2*: False
    test 106 isenclosedBy3: False
    test 107 isenclosedBy3*: False
    test 108 isenclosedBy4: False
    test 109 isenclosedBy4*: False
    test 110 isenclosedBy5: False
    test 111 isenclosedBy5*: False
    test 112 isenclosedBy6: True
    test 113 isenclosedBy6*: True
    test 114 isenclosedBy7: True
    test 115 isenclosedBy7*: True
    test 116 initialBearingTo: 102.432182
    test 117 compassAngleTo: 100.017
    test 118 compassAngleTo: 105.599
    test 119 initialBearingTo: 288.715918
    test 120 compassAngleTo: 280.017
    test 121 compassAngleTo: 285.599
    test 122 equirectangularTo: 592.185
    test 123 distanceTo: 591.831
    test 124 compassAngleTo: 0.0
    test 125 compassAngleTo: 45.0
    test 126 compassAngleTo: 90.0
    test 127 compassAngleTo: 180.0
    test 128 compassAngleTo: 225.0
    test 129 compassAngleTo: 315.0
    test 130 compassAngleTo: 270.0
    test 131 compassAngleTo: 359.4
    test 132 latlon2: (53.0, 1.0)
    test 133 philam2: (0.93, 0.02)
    test 134 compassAngleTo: 31
    test 135 compassAngleTo: 45
    test 136 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 137 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 138 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 139 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 140 isequalTo: <type 'bool'>
    test 141 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 142 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 143 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 144 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 145 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 146 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 147 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 148 compassAngleTo: <type 'float'>
    test 149 cosineLawTo: <type 'float'>
    test 150 euclideanTo: <type 'float'>
    test 151 flatLocalTo: <type 'float'>
    test 152 flatPolarTo: <type 'float'>
    test 153 haversineTo: <type 'float'>
    test 154 hubenyTo: <type 'float'>
    test 155 vincentysTo: <type 'float'>
    test 156 toVector: (0.615661, 0.0, 0.788011)
    test 157 toVector3d: (0.61566, 0.0, 0.78801)
    test 158 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 159 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 160 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 161 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 162 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testVectorial(pygeodesy.sphericalNvector, 20.10.02)
    test 163 crossTrackDistanceTo: -305.67
    test 164 crossTrackDistanceTo: -307.55
    test 165 toLatLon: 44.995674°N, 045.0°E
    test 166 toNvector: (0.50004, 0.50004, 0.70705)
    test 167 isequalTo: False
    test 168 isequalTo: True
    test 169 length: 0.99992449715
    test 170 euclid: 0.99995577
    test 171 length: 1.00
    test 172 euclid: 1.0000
    test 173 meanOf: 44.995674°N, 045.0°E
    test 174 meanOf: LatLon
    test 175 sumOf: (52.70504, 0.61904, 0.70705)
    test 176 sumOf: Nv
    test 177 sumOf: sumOf
    test 178 length: 52.7134151513
    test 179 copy: True
    test 180 length: 52.2051356286
    test 181 length: 52.2051356286
    test 182 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 183 toLatLon: 44.995674°N, 045.0°E, -0.00m  FAILED, KNOWN, expected 44.995674°N, 045.0°E
    test 184 toNvector: (0.50004, 0.50004, 0.70705, -0.00)
    test 185 intersection: 02.499372°N, 002.5°E
    test 186 isEnclosedBy: True
    test 187 isEnclosedBy*: True
    test 188 isEnclosedBy: True
    test 189 isEnclosedBy*: True
    test 190 isWithin: False
    test 191 isWithin: True
    test 192 nearestOn: 51.0°N, 001.0°E
    test 193 nearestOn: 50.987°N, 000.298°W
    test 194 nearestOn: 51.0°N, 002.0°E
    test 195 nearestOn: 50.995°N, 002.655°E
    test 196 nearestOn: 51.0°N, 001.9°E
    test 197 nearestOn: True
    test 198 distanceTo: 42.712
    test 199 nearestOn: 51.0°N, 002.0°E
    test 200 nearestOn: True
    test 201 nearestOn: 00.0°N, 000.0°E
    test 202 nearestOn: True
    test 203 nearestOn: 00.0°N, 020.0°E
    test 204 nearestOn: True
    test 205 nearestOn: 02.0°N, 002.0°E
    test 206 nearestOn: 02.0°N, 002.0°E
    test 207 BasseC: 47.3038°N, 002.5721°W
    test 208 BasseH: 47.311067°N, 002.528617°W
    test 209 triangulate: 47.323667°N, 002.568501°W
    test 210 triangulate: True
    test 211 trilaterate: 37.419078°N, 121.960579°W
    test 212 trilaterate: True
    test 213 trilaterate: 08.068912°S, 034.888699°W
    test 214 trilaterate: True
    test 215 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 216 trilaterate: True
    test 217 trilaterate: 42.67456065°N, 002.49539502°E
    test 218 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.sphericalNvector, 20.10.02)
    test 219 sumOf: Nvector
    test 220 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 221 ecef.lat, .lon: 44.995674, 45.0
    test 222 ecef.height: 0.0
    test 223 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 224 .isEllipsoidal: False
    test 225 .isSpherical: True
    test 226 .latlon: (44.995674, 45.0)
    test 227 .philam: (0.785323, 0.785398)
    test 228 .latlonheight: (44.995674, 45.0, 0)
    test 229 .philamheight: (0.785323, 0.785398, 0)
    test 230 parse: (0.5, 0.5, 0.707)
    test 231 cmp: 0
    test 232 eq: True
    test 233 ge: True
    test 234 gt: False
    test 235 le: True
    test 236 lt: False
    test 237 ne: False
    test 238 *: (1.0, 1.0, 1.414)
    test 239 +: (1.0, 1.0, 1.414)
    test 240 /: (0.5, 0.5, 0.707)
    test 241 -: (0.5, 0.5, 0.707)
    test 242 @: (0.0, 0.0, 0.0)
    test 243 @: (0.0, 0.0, 0.0)
    test 244 rotate: (0.26268, 0.26268, 0.37143)
    test 245 crosserrors: True
    test 246 0: factor (0): float division by zero
    test 247 intersections2: (500.0, 0.0, 0.0)
    test 248 nearestOn: (0.0, 0.0, 0.0)
    test 249 nearestOn: True
    test 250 nearestOn: (100.0, 100.0, 100.0)
    test 251 nearestOn: True
    test 252 iscolinearWith: False
    test 253 iscolinearWith: True

    testSpherical(pygeodesy.sphericalNvector, 20.10.02)
    test 254 isSpherical: True
    test 255 isEllipsoidal: False
    test 256 isSpherical: True
    test 257 isEllipsoidal: False
    test 258 intersection1: 50.907608°N, 004.508575°E
    test 259 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 260 intersection1: True
    test 261 intersection2: True
    test 262 intersection2: 43.5719°N, 116.188757°W
    test 263 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 264 intersection3: 51.882166°N, 000.267801°E
    test 265 intersection4: 00.0°N, 026.565051°E
    test 266 intersection5: 26.565051°N, 000.0°W
    test 267 intersection6: 50.907809°N, 004.50841°E
    test 268 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 269 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 270 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 271 toward/away 1,1 N,W antipodal: 00.999848°S, 179.0°W
    test 272 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 273 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 274 toward/away 1,1 E,S antipodal: 00.999848°S, 179.0°W
    test 275 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 276 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 277 1E/90E N,E antipodal: 00.017454°S, 179.0°W
    test 278 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 279 brng+end 1a: 01.000305°N, 002.0°E
    test 280 brng+end 1b: 01.000305°N, 002.0°E
    test 281 brng+end 2a: 01.000305°S, 178.0°W
    test 282 brng+end 2b: 01.000305°S, 178.0°W
    test 283 intersection7: 02.499372°N, 002.5°E
    test 284 maxLat0: 90.0
    test 285 maxLat1: 89.0
    test 286 maxLat90: 0.0
    test 287 minLat0: -90.0
    test 288 minLat1: -89.0
    test 289 minLat90: -0.0
    test 290 parse: 00.0°N, 000.0°E
    test 291 isenclosedBy: True
    test 292 isenclosedBy*: True
    test 293 isenclosedBy: True
    test 294 isenclosedBy*: True
    test 295 rhumbBearingTo: 116.722
    test 296 rhumbDestination: 50.964155°N, 001.853°E
    test 297 rhumbDestination: True
    test 298 rhumbDistanceTo: 40307.8
    test 299 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 300 rhumbMidpointo: True
    test 301 areaOf: 8.66605875e+09
    test 302 perimeterOf: 3.78258541e+05
    test 303 perimeterOf: 2.67063461e+05
    test 304 areaOf: 6.18e+09
    test 305 perimeterOf: 3.79639757e+05
    test 306 perimeterOf: 2.68444678e+05
    test 307 nearestOn2: 46.000996°N, 001.353049°E
    test 308 nearestOn2: 569987.49
    test 309 distanceTo: 569987.49
    test 310 nearestOn2: 46.0°N, 002.0°E
    test 311 nearestOn2: 134989.80
    test 312 distanceTo: 134989.80
    test 313 nearestOn2: 45.330691°N, 001.318551°E
    test 314 distance: 64856.28
    test 315 distanceTo: 64856.28
    test 316 compassAngleTo: 304.54
    test 317 difference: 1000.53
    test 318 ispolar: True
    test 319 ispolar*: True
    test 320 ispolar: False  FAILED, KNOWN, expected True
    test 321 ispolar*: False  FAILED, KNOWN, expected True
    test 322 ispolar: False  FAILED, KNOWN, expected True
    test 323 ispolar*: False  FAILED, KNOWN, expected True
    test 324 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 325 nearestOn2: 01.5°N, 001.5°E, +149.99m
    test 326 midpointTo: 01.5°N, 001.5°E, +150.00m

    testLatLon(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 327 isEllipsoidal: False
    test 328 isSpherical: True
    test 329 lat/lonDMS: 52.20472°N, 000.14056°E
    test 330 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 331 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 332 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 333 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 334 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 335 isequalTo: True
    test 336 isequalTo: True
    test 337 latlon2: 52.20472, 0.14056
    test 338 latlon2: 52.2047, 0.1406
    test 339 latlon2: 52.205, 0.141
    test 340 latlon2: 52.2, 0.14
    test 341 latlon2: 52.2, 0.1
    test 342 latlon2: 52.0, 0.0
    test 343 isequalTo: False
    test 344 antipode1: 52.205°S, 179.881°W
    test 345 antipode2: True
    test 346 antipode3: 52.205°N, 000.119°E
    test 347 antipode4: True
    test 348 antipode5: 52.205°N, 000.119°E
    test 349 initialBearingTo: 156.1666
    test 350 finalBearingTo: 157.8904
    test 351 initialBearingTo: 65.8921
    test 352 finalBearingTo: 93.8581
    test 353 bearingTo2: 156.1666, 157.8904
    test 354 ispolar: True
    test 355 copy: True
    test 356 __eq__: True
    test 357 __ne__: False
    test 358 equirectangularTo: 404329.56
    test 359 distanceTo: 404279.720589
    test 360 distanceTo: 404279.720589
    test 361 distanceTo: 2145
    test 362 distanceTo: 18013602.92
    test 363 distanceTo: 20015114.35
    test 364 intermediateTo: 51.372084°N, 000.707337°E
    test 365 intermediateTo: True
    test 366 intermediateTo: 404279.721
    test 367 intermediateTo+5: 35.160975°N, 008.989542°E
    test 368 intermediateTo+5: 5.000
    test 369 intermediateTo-4: 64.911647°N, 013.726301°W
    test 370 intermediateTo-4: 4.000
    test 371 intermediateTo-h: 125.000
    test 372 midpointTo: 50.536327°N, 001.274614°E
    test 373 destination: 51.513546°N, 000.098345°W
    test 374 destination: 51°30′49″N, 000°05′54″W
    test 375 destination: 34°37′N, 116°33′W
    test 376 destination: 34.613647°N, 116.55116°W
    test 377 destination: 0.604122N, 2.034201W
    test 378 destination: 31.96383509°N, 064.37329146°E
    test 379 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 380 alongTrackDistanceTo: 62331.58
    test 381 alongTrackDistanceTo: 99.588
    test 382 alongTrackDistanceTo: -7702.7
    test 383 alongTrackDistanceTo: 7587.6
    test 384 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 385 crossTrackDistanceTo: -307.55
    test 386 crossTrackDistanceTo: 7.4524
    test 387 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 388 cosineAndoyerLambertTo: 124801.098
    test 389 cosineAndoyerLambertTo: 124801.098
    test 390 cosineForsyheAndoyerLambertTo: 124801.098
    test 391 cosineForsyheAndoyerLambertTo: 124801.098
    test 392 cosineLawTo: 124801.098
    test 393 cosineLawTo: 124801.098
    test 394 equirectangularTo: 124804.754
    test 395 equirectangularTo: 124804.754
    test 396 euclideanTo: 130015.089
    test 397 euclideanTo: 130015.089
    test 398 flatLocalTo: 124804.754
    test 399 flatLocalTo: 124804.754
    test 400 flatPolarTo: 133663.257
    test 401 flatPolarTo: 133663.257
    test 402 haversineTo: 124801.098
    test 403 haversineTo: 124801.098
    test 404 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 405 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 406 thomasTo: 124801.098
    test 407 thomasTo: 124801.098
    test 408 vincentysTo: 124801.098
    test 409 vincentysTo: 124801.098
    test 410 isclockwise: False
    test 411 isclockwise*: False
    test 412 isclockwise: True
    test 413 isclockwise*: True
    test 414 isclockwise: points (2): too few
    test 415 isclockwise*: points (2): too few
    test 416 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 417 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E)) ...  FAILED, KNOWN, expected zero or polar area
    test 418 isconvex: False
    test 419 isconvex*: False
    test 420 isconvex: True
    test 421 isconvex*: True
    test 422 isconvex: points (2): too few
    test 423 isconvex*: points (2): too few
    test 424 isenclosedBy1: True
    test 425 isenclosedBy1*: True
    test 426 isenclosedBy2: False
    test 427 isenclosedBy2*: False
    test 428 isenclosedBy3: False
    test 429 isenclosedBy3*: False
    test 430 isenclosedBy4: False
    test 431 isenclosedBy4*: False
    test 432 isenclosedBy5: False
    test 433 isenclosedBy5*: False
    test 434 isenclosedBy6: True
    test 435 isenclosedBy6*: True
    test 436 isenclosedBy7: True
    test 437 isenclosedBy7*: True
    test 438 initialBearingTo: 102.432182
    test 439 compassAngleTo: 100.017
    test 440 compassAngleTo: 105.599
    test 441 initialBearingTo: 288.715918
    test 442 compassAngleTo: 280.017
    test 443 compassAngleTo: 285.599
    test 444 equirectangularTo: 592.185
    test 445 distanceTo: 591.831
    test 446 compassAngleTo: 0.0
    test 447 compassAngleTo: 45.0
    test 448 compassAngleTo: 90.0
    test 449 compassAngleTo: 180.0
    test 450 compassAngleTo: 225.0
    test 451 compassAngleTo: 315.0
    test 452 compassAngleTo: 270.0
    test 453 compassAngleTo: 359.4
    test 454 latlon2: (53.0, 1.0)
    test 455 philam2: (0.93, 0.02)
    test 456 compassAngleTo: 31
    test 457 compassAngleTo: 45
    test 458 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 459 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 460 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 461 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 462 isequalTo: <type 'bool'>
    test 463 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 464 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 465 to2ab: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 466 to3llh: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 467 to3xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 468 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 469 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 470 compassAngleTo: <type 'float'>
    test 471 cosineLawTo: <type 'float'>
    test 472 euclideanTo: <type 'float'>
    test 473 flatLocalTo: <type 'float'>
    test 474 flatPolarTo: <type 'float'>
    test 475 haversineTo: <type 'float'>
    test 476 hubenyTo: <type 'float'>
    test 477 vincentysTo: <type 'float'>
    test 478 toVector: (0.615661, 0.0, 0.788011)
    test 479 toVector3d: (0.61566, 0.0, 0.78801)
    test 480 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815  FAILED, KNOWN, expected 223.305
    test 481 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E  FAILED, KNOWN, expected 42.67456065°N, 002.49539502°E
    test 482 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: False  FAILED, KNOWN, expected True
    test 483 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 484 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 485 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 486 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 487 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 488 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 489 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 490 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 491 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 492 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 493 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 494 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 495 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 496 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 497 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 498 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 499 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 500 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 501 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 502 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3

    testSpherical(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 503 isSpherical: True
    test 504 isEllipsoidal: False
    test 505 isSpherical: True
    test 506 isEllipsoidal: False
    test 507 intersection1: 50.907608°N, 004.508575°E
    test 508 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 509 intersection1: True
    test 510 intersection2: True
    test 511 intersection2: 43.5719°N, 116.188757°W
    test 512 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 513 intersection3: 51.882166°N, 000.267801°E
    test 514 intersection4: 00.0°N, 026.565051°E
    test 515 intersection5: 26.565051°N, 000.0°W
    test 516 intersection6: 50.907809°N, 004.50841°E
    test 517 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 518 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 519 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 520 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E  FAILED, KNOWN, expected 00.999848°S, 179.0°W
    test 521 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 522 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 523 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E  FAILED, KNOWN, expected 00.999848°S, 179.0°W
    test 524 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 525 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 526 1E/90E N,E antipodal: 00.017454°N, 001.0°E  FAILED, KNOWN, expected 00.017454°S, 179.0°W
    test 527 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 528 brng+end 1a: 01.000305°N, 002.0°E
    test 529 brng+end 1b: 01.000305°N, 002.0°E
    test 530 brng+end 2a: 01.000305°S, 178.0°W
    test 531 brng+end 2b: 01.000305°S, 178.0°W
    test 532 intersection7: 02.499372°N, 002.5°E
    test 533 maxLat0: 90.0
    test 534 maxLat1: 89.0
    test 535 maxLat90: 0.0
    test 536 minLat0: -90.0
    test 537 minLat1: -89.0
    test 538 minLat90: -0.0
    test 539 parse: 00.0°N, 000.0°E
    test 540 crossingParallels: 009°35′38.65″E, 170°24′21.35″E
    test 541 intersections2 (pygeodesy.sphericalTrigonometry): 36.98931°N, 088.151425°W, 38.23838°N, 092.390487°W
    test 542 intersections2 (pygeodesy.sphericalTrigonometry): 00.0°N, 035.26439°W, 00.0°N, 035.26439°E
    test 543 intersections2 (pygeodesy.sphericalTrigonometry): 22.622036°N, 000.0°E, 22.622036°S, 000.0°E
    test 544 intersections2 (pygeodesy.sphericalTrigonometry): 14.612841°N, 026.110934°W, 14.612841°S, 026.110934°E
    test 545 intersections2 (pygeodesy.sphericalTrigonometry): 00.000001°S, 045.0°E, 00.000001°N, 045.0°E
    test 546 intersections2 (pygeodesy.sphericalTrigonometry) 5: 04.999927°S, 005.038296°W, 04.999927°N, 005.038296°E
    test 547 intersections2 (pygeodesy.sphericalTrigonometry) 5: 8.37557e-16 (% of radius)
    test 548 intersections2 (pygeodesy.sphericalTrigonometry) 10: 09.997596°S, 010.311703°W, 09.997596°N, 010.311703°E
    test 549 intersections2 (pygeodesy.sphericalTrigonometry) 10: 8.37557e-16 (% of radius)
    test 550 intersections2 (pygeodesy.sphericalTrigonometry) 15: 14.98089°S, 016.083107°W, 14.98089°N, 016.083107°E
    test 551 intersections2 (pygeodesy.sphericalTrigonometry) 15: 4.18779e-16 (% of radius)
    test 552 intersections2 (pygeodesy.sphericalTrigonometry) 20: 19.914036°S, 022.676142°W, 19.914036°N, 022.676142°E
    test 553 intersections2 (pygeodesy.sphericalTrigonometry) 20: 6.28168e-16 (% of radius)
    test 554 intersections2 (pygeodesy.sphericalTrigonometry) 25: 24.713956°S, 030.518915°W, 24.713956°N, 030.518915°E
    test 555 intersections2 (pygeodesy.sphericalTrigonometry) 25: 5.02534e-16 (% of radius)
    test 556 intersections2 (pygeodesy.sphericalTrigonometry) 30: 29.205932°S, 040.202966°W, 29.205932°N, 040.202966°E
    test 557 intersections2 (pygeodesy.sphericalTrigonometry) 30: 8.37557e-16 (% of radius)
    test 558 intersections2 (pygeodesy.sphericalTrigonometry) 35: 33.037697°S, 052.55362°W, 33.037697°N, 052.55362°E
    test 559 intersections2 (pygeodesy.sphericalTrigonometry) 35: 7.17906e-16 (% of radius)
    test 560 intersections2 (pygeodesy.sphericalTrigonometry) 40: 35.512876°S, 068.682565°W, 35.512876°N, 068.682565°E
    test 561 intersections2 (pygeodesy.sphericalTrigonometry) 40: 4.18779e-16 (% of radius)
    test 562 intersections2 (pygeodesy.sphericalTrigonometry) 45: 35.26439°S, 090.0°W, 35.26439°N, 090.0°E
    test 563 intersections2 (pygeodesy.sphericalTrigonometry) 45: 3.72248e-16 (% of radius)
    test 564 intersections2 (pygeodesy.sphericalTrigonometry) 50: 29.382901°S, 118.837195°W, 29.382901°N, 118.837195°E
    test 565 intersections2 (pygeodesy.sphericalTrigonometry) 50: 5.02534e-16 (% of radius)
    test 566 intersections2 (pygeodesy.sphericalTrigonometry) 55: 00.687458°S, 179.605668°E abutting
    test 567 intersections2 (pygeodesy.sphericalTrigonometry) 55: 0.0144095 (% of radius)
    test 568 intersections2 (pygeodesy.sphericalTrigonometry) 60: 13.848979°S, 172.919423°E abutting
    test 569 intersections2 (pygeodesy.sphericalTrigonometry) 60: 0.258708 (% of radius)
    test 570 intersections2 (pygeodesy.sphericalTrigonometry) 65: 27.163786°S, 167.475402°E abutting
    test 571 intersections2 (pygeodesy.sphericalTrigonometry) 65: 0.457099 (% of radius)
    test 572 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W Random +/- 89
    test 573 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 29.464652°N, 155.491472°W  d 0 meter
    test 574 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 68.12584°N, 140.963523°E  d 6.93377e-09 meter
    test 575 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 69.872649°N, 055.469691°W  d 1.03245e-08 meter
    test 576 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 26.558317°N, 080.194365°W  d 8.32416e-09 meter
    test 577 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 30.053466°N, 008.71595°W  d 6.88569e-10 meter
    test 578 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 29.256505°N, 023.621941°E  d 3.37313e-08 meter
    test 579 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 15.593242°N, 148.911018°W  d 1.41465e-09 meter
    test 580 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 69.682716°N, 067.901264°W  d 1.17298e-08 meter
    test 581 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 14.688735°S, 077.653096°W  d 1.2283e-09 meter
    test 582 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 09.077587°N, 088.452577°W  d 2.7636e-09 meter
    test 583 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 69.469197°N, 086.053393°W  d 2.25665e-08 meter
    test 584 intersections2 (pygeodesy.sphericalTrigonometry): 67.571554°N, 074.008027°W, 80.311924°N, 076.505789°W  d 3.89028e-09 meter
    test 585 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 586 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 587 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 588 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 589 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 590 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 591 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: 42.6767291°N, 002.49916157°E
    test 592 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 593 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 594 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 595 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 596 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 597 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 598 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: area (False), eps (1000) or wrap (False): no intersection (min 1340.608)
    test 599 isenclosedBy: True
    test 600 isenclosedBy*: True
    test 601 isenclosedBy: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 602 isenclosedBy*: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 603 rhumbBearingTo: 116.722
    test 604 rhumbDestination: 50.964155°N, 001.853°E
    test 605 rhumbDestination: True
    test 606 rhumbDistanceTo: 40307.8
    test 607 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 608 rhumbMidpointo: True
    test 609 areaOf: 8.66605875e+09
    test 610 perimeterOf: 3.78258541e+05
    test 611 perimeterOf: 2.67063461e+05
    test 612 areaOf: 6.18e+09
    test 613 perimeterOf: 3.79639757e+05
    test 614 perimeterOf: 2.68444678e+05
    test 615 nearestOn2: 46.0°N, 001.369324°E
    test 616 nearestOn2: 570101.83
    test 617 distanceTo: 570101.82
    test 618 nearestOn2: 46.0°N, 002.0°E
    test 619 nearestOn2: 134992.48
    test 620 distanceTo: 134989.80
    test 621 nearestOn3: 45.5°N, 001.5°E
    test 622 distance: 78626.79
    test 623 angle: 315.00
    test 624 compassAngleTo: 315.00
    test 625 nearestOn3: 45.331319°N, 001.331319°E
    test 626 distance: 64074.48
    test 627 angle: 305.10
    test 628 distanceTo: 64074.12
    test 629 compassAngleTo: 305.10
    test 630 difference: 1000.53
    test 631 nearestOn3: 00.5°N, 001.5°E
    test 632 distance: 235880.385
    test 633 angle: 135.00
    test 634 nearestOn3: 01.5°N, 002.5°E
    test 635 distance: 235880.385
    test 636 angle: 135.00
    test 637 nearestOn3: 02.5°N, 003.5°E
    test 638 distance: 235880.385
    test 639 angle: 135.00
    test 640 nearestOn3: 03.5°N, 004.5°E
    test 641 distance: 235880.385
    test 642 angle: 135.00
    test 643 nearestOn3: 04.5°N, 005.5°E
    test 644 distance: 235880.385
    test 645 angle: 135.00
    test 646 nearestOn3: 05.5°N, 006.5°E
    test 647 distance: 235880.385
    test 648 angle: 135.00
    test 649 nearestOn3: 06.5°N, 007.5°E
    test 650 distance: 235880.385
    test 651 angle: 135.00
    test 652 nearestOn3: 07.5°N, 008.5°E
    test 653 distance: 235880.385
    test 654 angle: 135.00
    test 655 meanOf: 04.004858°N, 004.990226°E
    test 656 nearestOn3: 07.5°N, 008.5°E
    test 657 toCartesian: [6245667.211, 766871.506, 996645.349]
    test 658 ispolar: True
    test 659 ispolar*: True
    test 660 ispolar: False  FAILED, KNOWN, expected True
    test 661 ispolar*: False  FAILED, KNOWN, expected True
    test 662 ispolar: True
    test 663 ispolar*: True
    test 664 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 665 nearestOn2: 01.5°N, 001.5°E, +149.99m
    test 666 midpointTo: 01.5°N, 001.5°E, +150.00m

    23 of 666 testSpherical.py tests (3.5%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 201.788 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testStreprs.py

    testing testStreprs.py 20.05.03 (module pygeodesy.streprs 20.10.08)
    test 1 anstr: a-b__
    test 2 fstr: 0.123000
    test 3 fstr: 0.123
    test 4 fstr: 0.123, 456.789
    test 5 fstr: 1.23000e-01
    test 6 fstr: 1.23e-01
    test 7 fstr: fmt ('X'): not '[%.*]F|f|E|e|G|g'
    test 8 fstr(1.000000): 1.0
    test 9 fstr(1.000000): 1.0
    test 10 fstr(-1.000000): -1.0
    test 11 fstr(INF): INF
    test 12 fstr(INF): INF
    test 13 fstr(NAN): NAN
    test 14 fstr(-0.000000): -0.0
    test 15 fstr(0.000000): 0.0
    test 16 fstrzs(0.0): 0.0
    test 17 fstrzs(0.00): 0.0
    test 18 fstrzs(0.000): 0.0
    test 19 fstrzs(00.0): 00.0
    test 20 fstrzs(000.00): 000.0
    test 21 fstrzs(0.000): 0.0
    test 22 fstrzs(0.010): 0.01
    test 23 fstrzs(0.0200): 0.02
    test 24 fstrzs(0.0e+01): 0.0e+01
    test 25 fstrzs(0.00e+02): 0.0e+02
    test 26 fstrzs(0.000e+03): 0.0e+03
    test 27 fstrzs(00.0e+00): 00.0e+00
    test 28 fstrzs(000.00e+01): 000.0e+01
    test 29 fstrzs(0.000e+02): 0.0e+02
    test 30 fstrzs(0.010e+03): 0.01e+03
    test 31 fstrzs(0.0200e+00): 0.02e+00
    test 32 fstrzs(0, ap1z=True): 0.0
    test 33 fstrzs(0.0, ap1z=True): 0.0
    test 34 fstrzs(0., ap1z=True): 0.
    test 35 fstrzs(1e10, ap1z=True): 1.0e10
    test 36 fstrzs(2E+2, ap1z=True): 2.0E+2
    test 37 fstrzs(3.E3, ap1z=True): 3.E3
    test 38 instr: LatLon_(45.0°N, 090.0°E, +1.20)
    test 39 instr: LatLon_(45, 90, h=1.2)
    test 40 unstr: f(1.1, 2.2)
    test 41 unstr: f(x=1.1, y=2.2)

    all 41 testStreprs.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 1.328 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testTMcoords.py

    testing testTMcoords.py 19.05.23
    test 1 TMcoords: 258

    all 1 testTMcoords.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 663.996 us

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testTrf.py

    testing testTrf.py 20.09.27 (module pygeodesy.trf 20.09.27)
    test 1 ellipsoidalKarney: ...
    test 2 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 3 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 4 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 5 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 6 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 7 Nil: True
    test 8 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 9 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 10 Nil: True
    test 11 reframe: True
    test 12 Roundtrip: True
    test 13 reframe: True
    test 14 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 15 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 16 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 17 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 18 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 19 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 20 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 21 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 22 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 23 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 24 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 25 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 26 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 27 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 28 TRFError: epoch (1899): below 1900 limit
    test 29 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 30 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 31 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 32 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 33 ellipsoidalNvector: ...
    test 34 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 35 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 36 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 37 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 38 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 39 Nil: True
    test 40 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 41 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 42 Nil: True
    test 43 reframe: True
    test 44 Roundtrip: True
    test 45 reframe: True
    test 46 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 47 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 48 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 49 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 50 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 51 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 52 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 53 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 54 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 55 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 56 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 57 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 58 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 59 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 60 TRFError: epoch (1899): below 1900 limit
    test 61 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 62 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 63 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 64 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 65 ellipsoidalVincenty: ...
    test 66 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 67 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 68 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 69 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 70 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 71 Nil: True
    test 72 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 73 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 74 Nil: True
    test 75 reframe: True
    test 76 Roundtrip: True
    test 77 reframe: True
    test 78 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 79 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 80 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 81 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 82 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 83 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 84 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 85 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 86 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 87 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 88 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 89 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 90 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 91 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 92 TRFError: epoch (1899): below 1900 limit
    test 93 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 94 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 95 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 96 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 97 TRFError: day (2), month (1) or year (None): int() argument must be a string or a number, not 'NoneType'
    test 98 toStr: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 99 str: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 100 toStr2: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 101 repr: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 102 epoch: 2020.003
    test 103 y-m-d: (2020, 1, 1)
    test 104 epoch: 2020.251
    test 105 y-m-d: (2020, 4, 1)
    test 106 epoch: 2020.500
    test 107 y-m-d: (2020, 7, 1)
    test 108 epoch: 2020.751
    test 109 y-m-d: (2020, 10, 1)
    test 110 epoch: 2021.000
    test 111 y-m-d: (2021, 1, 1)  FAILED, KNOWN, expected (2020, 12, 31)
    test 112 Epoch (2020).std_repr: False
    test 113 Epoch (2020.001): (2020, 1, 1)
    test 114 Epoch (2020.086): (2020, 2, 1)
    test 115 Epoch (2020.165): (2020, 3, 1)
    test 116 Epoch (2020.250): (2020, 4, 1)
    test 117 Epoch (2020.332): (2020, 5, 1)
    test 118 Epoch (2020.416): (2020, 6, 1)
    test 119 Epoch (2020.498): (2020, 7, 1)
    test 120 Epoch (2020.583): (2020, 8, 1)
    test 121 Epoch (2020.668): (2020, 9, 1)
    test 122 Epoch (2020.750): (2020, 10, 1)
    test 123 Epoch (2020.834): (2020, 11, 1)
    test 124 Epoch (2020.916): (2020, 12, 1)
    test 125 Epoch (2021.001): (2021, 1, 1)  FAILED, KNOWN, expected (2020, 13, 1)

    5 of 125 testTrf.py tests (4.0%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 15.148 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUnits.py

    testing testUnits.py 20.09.27

    testing Bearing(1.0,) (pygeodesy.units, 20.10.05)
    test 1 .classname: Bearing
    test 2 isinstance: True
    test 3 .name: bearing
    test 4 .named: bearing
    test 5 .named2: Bearing 'bearing'
    test 6 .str: 1.0
    test 7 .toStr: 1.0
    test 8 .std_repr: True
    test 9 .repr: 1.0
    test 10 .toRepr: bearing (1.0)
    test 11 .units: bearing
    test 12 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: X
    test 13 bearing: U ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: X
    test 14 bearing: TypeError
    test 15 .named: Test
    test 16 .named2: Bearing 'Test'
    test 17 .str: 1.0
    test 18 .toStr: 1.0
    test 19 .repr: 1.0
    test 20 .toRepr: Test (1.0)
    test 21 .units: bearing
    test 22 .name: Test
    test 23 ._name: Test
    test 24 .str: 1.0
    test 25 .repr: 1.0
    test 26 delattr: ''

    testing Degrees(1.0,) (pygeodesy.units, 20.10.05)
    test 27 .classname: Degrees
    test 28 isinstance: True
    test 29 .name: degrees
    test 30 .named: degrees
    test 31 .named2: Degrees 'degrees'
    test 32 .str: 1.0
    test 33 .toStr: 1.0
    test 34 .std_repr: True
    test 35 .repr: 1.0
    test 36 .toRepr: degrees (1.0)
    test 37 .units: degrees
    test 38 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 39 degrees: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 40 degrees: TypeError
    test 41 .named: Test
    test 42 .named2: Degrees 'Test'
    test 43 .str: 1.0
    test 44 .toStr: 1.0
    test 45 .repr: 1.0
    test 46 .toRepr: Test (1.0)
    test 47 .units: degrees
    test 48 .name: Test
    test 49 ._name: Test
    test 50 .str: 1.0
    test 51 .repr: 1.0
    test 52 delattr: ''

    testing Degrees2(1.0,) (pygeodesy.units, 20.10.05)
    test 53 .classname: Degrees2
    test 54 isinstance: True
    test 55 .name: degrees2
    test 56 .named: degrees2
    test 57 .named2: Degrees2 'degrees2'
    test 58 .str: 1.0
    test 59 .toStr: 1.0
    test 60 .std_repr: True
    test 61 .repr: 1.0
    test 62 .toRepr: degrees2 (1.0)
    test 63 .units: degrees2
    test 64 degrees2: degrees2 ('X'): could not convert string to float: X
    test 65 degrees2: U ('X'): could not convert string to float: X
    test 66 degrees2: TypeError
    test 67 .named: Test
    test 68 .named2: Degrees2 'Test'
    test 69 .str: 1.0
    test 70 .toStr: 1.0
    test 71 .repr: 1.0
    test 72 .toRepr: Test (1.0)
    test 73 .units: degrees2
    test 74 .name: Test
    test 75 ._name: Test
    test 76 .str: 1.0
    test 77 .repr: 1.0
    test 78 delattr: ''

    testing Degrees_(1.0,) (pygeodesy.units, 20.10.05)
    test 79 .classname: Degrees_
    test 80 isinstance: True
    test 81 .name: degrees_
    test 82 .named: degrees_
    test 83 .named2: Degrees_ 'degrees_'
    test 84 .str: 1.0
    test 85 .toStr: 1.0
    test 86 .std_repr: True
    test 87 .repr: 1.0
    test 88 .toRepr: degrees_ (1.0)
    test 89 .units: degrees_
    test 90 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 91 degrees_: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 92 degrees_: TypeError
    test 93 .named: Test
    test 94 .named2: Degrees_ 'Test'
    test 95 .str: 1.0
    test 96 .toStr: 1.0
    test 97 .repr: 1.0
    test 98 .toRepr: Test (1.0)
    test 99 .units: degrees_
    test 100 .name: Test
    test 101 ._name: Test
    test 102 .str: 1.0
    test 103 .repr: 1.0
    test 104 delattr: ''

    testing Distance(1.0,) (pygeodesy.units, 20.10.05)
    test 105 .classname: Distance
    test 106 isinstance: True
    test 107 .name: distance
    test 108 .named: distance
    test 109 .named2: Distance 'distance'
    test 110 .str: 1.0
    test 111 .toStr: 1.0
    test 112 .std_repr: True
    test 113 .repr: 1.0
    test 114 .toRepr: distance (1.0)
    test 115 .units: distance
    test 116 distance: distance ('X'): could not convert string to float: X
    test 117 distance: U ('X'): could not convert string to float: X
    test 118 distance: TypeError
    test 119 .named: Test
    test 120 .named2: Distance 'Test'
    test 121 .str: 1.0
    test 122 .toStr: 1.0
    test 123 .repr: 1.0
    test 124 .toRepr: Test (1.0)
    test 125 .units: distance
    test 126 .name: Test
    test 127 ._name: Test
    test 128 .str: 1.0
    test 129 .repr: 1.0
    test 130 delattr: ''

    testing Distance_(1.0,) (pygeodesy.units, 20.10.05)
    test 131 .classname: Distance_
    test 132 isinstance: True
    test 133 .name: distance_
    test 134 .named: distance_
    test 135 .named2: Distance_ 'distance_'
    test 136 .str: 1.0
    test 137 .toStr: 1.0
    test 138 .std_repr: True
    test 139 .repr: 1.0
    test 140 .toRepr: distance_ (1.0)
    test 141 .units: distance_
    test 142 distance_: distance ('X'): could not convert string to float: X
    test 143 distance_: U ('X'): could not convert string to float: X
    test 144 distance_: TypeError
    test 145 .named: Test
    test 146 .named2: Distance_ 'Test'
    test 147 .str: 1.0
    test 148 .toStr: 1.0
    test 149 .repr: 1.0
    test 150 .toRepr: Test (1.0)
    test 151 .units: distance_
    test 152 .name: Test
    test 153 ._name: Test
    test 154 .str: 1.0
    test 155 .repr: 1.0
    test 156 delattr: ''

    testing Easting(1.0,) (pygeodesy.units, 20.10.05)
    test 157 .classname: Easting
    test 158 isinstance: True
    test 159 .name: easting
    test 160 .named: easting
    test 161 .named2: Easting 'easting'
    test 162 .str: 1.0
    test 163 .toStr: 1.0
    test 164 .std_repr: True
    test 165 .repr: 1.0
    test 166 .toRepr: easting (1.0)
    test 167 .units: easting
    test 168 easting: easting ('X'): could not convert string to float: X
    test 169 easting: U ('X'): could not convert string to float: X
    test 170 easting: TypeError
    test 171 .named: Test
    test 172 .named2: Easting 'Test'
    test 173 .str: 1.0
    test 174 .toStr: 1.0
    test 175 .repr: 1.0
    test 176 .toRepr: Test (1.0)
    test 177 .units: easting
    test 178 .name: Test
    test 179 ._name: Test
    test 180 .str: 1.0
    test 181 .repr: 1.0
    test 182 delattr: ''

    testing Feet(1.0,) (pygeodesy.units, 20.10.05)
    test 183 .classname: Feet
    test 184 isinstance: True
    test 185 .name: feet
    test 186 .named: feet
    test 187 .named2: Feet 'feet'
    test 188 .str: 1.0
    test 189 .toStr: 1.0
    test 190 .std_repr: True
    test 191 .repr: 1.0
    test 192 .toRepr: feet (1.0)
    test 193 .units: feet
    test 194 feet: feet ('X'): could not convert string to float: X
    test 195 feet: U ('X'): could not convert string to float: X
    test 196 feet: TypeError
    test 197 .named: Test
    test 198 .named2: Feet 'Test'
    test 199 .str: 1.0
    test 200 .toStr: 1.0
    test 201 .repr: 1.0
    test 202 .toRepr: Test (1.0)
    test 203 .units: feet
    test 204 .name: Test
    test 205 ._name: Test
    test 206 .str: 1.0
    test 207 .repr: 1.0
    test 208 delattr: ''

    testing Float(1.0,) (pygeodesy.units, 20.10.05)
    test 209 .classname: Float
    test 210 isinstance: True
    test 211 .name: float
    test 212 .named: float
    test 213 .named2: Float 'float'
    test 214 .str: 1.0
    test 215 .toStr: 1.0
    test 216 .std_repr: True
    test 217 .repr: 1.0
    test 218 .toRepr: float (1.0)
    test 219 .units: float
    test 220 float: Float ('X'): could not convert string to float: X
    test 221 float: U ('X'): could not convert string to float: X
    test 222 float: TypeError
    test 223 .named: Test
    test 224 .named2: Float 'Test'
    test 225 .str: 1.0
    test 226 .toStr: 1.0
    test 227 .repr: 1.0
    test 228 .toRepr: Test (1.0)
    test 229 .units: float
    test 230 .name: Test
    test 231 ._name: Test
    test 232 .str: 1.0
    test 233 .repr: 1.0
    test 234 delattr: ''

    testing Float_(1.0,) (pygeodesy.units, 20.10.05)
    test 235 .classname: Float_
    test 236 isinstance: True
    test 237 .name: float_
    test 238 .named: float_
    test 239 .named2: Float_ 'float_'
    test 240 .str: 1.0
    test 241 .toStr: 1.0
    test 242 .std_repr: True
    test 243 .repr: 1.0
    test 244 .toRepr: float_ (1.0)
    test 245 .units: float_
    test 246 float_: Float_ ('X'): could not convert string to float: X
    test 247 float_: U ('X'): could not convert string to float: X
    test 248 float_: TypeError
    test 249 .named: Test
    test 250 .named2: Float_ 'Test'
    test 251 .str: 1.0
    test 252 .toStr: 1.0
    test 253 .repr: 1.0
    test 254 .toRepr: Test (1.0)
    test 255 .units: float_
    test 256 .name: Test
    test 257 ._name: Test
    test 258 .str: 1.0
    test 259 .repr: 1.0
    test 260 delattr: ''

    testing Height(1.0,) (pygeodesy.units, 20.10.05)
    test 261 .classname: Height
    test 262 isinstance: True
    test 263 .name: height
    test 264 .named: height
    test 265 .named2: Height 'height'
    test 266 .str: 1.0
    test 267 .toStr: 1.0
    test 268 .std_repr: True
    test 269 .repr: 1.0
    test 270 .toRepr: height (1.0)
    test 271 .units: height
    test 272 height: height ('X'): could not convert string to float: X
    test 273 height: U ('X'): could not convert string to float: X
    test 274 height: TypeError
    test 275 .named: Test
    test 276 .named2: Height 'Test'
    test 277 .str: 1.0
    test 278 .toStr: 1.0
    test 279 .repr: 1.0
    test 280 .toRepr: Test (1.0)
    test 281 .units: height
    test 282 .name: Test
    test 283 ._name: Test
    test 284 .str: 1.0
    test 285 .repr: 1.0
    test 286 delattr: ''

    testing Lam(1.0,) (pygeodesy.units, 20.10.05)
    test 287 .classname: Lam
    test 288 isinstance: True
    test 289 .name: lam
    test 290 .named: lam
    test 291 .named2: Lam 'lam'
    test 292 .str: 1.0
    test 293 .toStr: 1.0
    test 294 .std_repr: True
    test 295 .repr: 1.0
    test 296 .toRepr: lam (1.0)
    test 297 .units: lam
    test 298 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: X
    test 299 lam: U ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: X
    test 300 lam: TypeError
    test 301 .named: Test
    test 302 .named2: Lam 'Test'
    test 303 .str: 1.0
    test 304 .toStr: 1.0
    test 305 .repr: 1.0
    test 306 .toRepr: Test (1.0)
    test 307 .units: lam
    test 308 .name: Test
    test 309 ._name: Test
    test 310 .str: 1.0
    test 311 .repr: 1.0
    test 312 delattr: ''

    testing Lat(1.0,) (pygeodesy.units, 20.10.05)
    test 313 .classname: Lat
    test 314 isinstance: True
    test 315 .name: lat
    test 316 .named: lat
    test 317 .named2: Lat 'lat'
    test 318 .str: 1.0
    test 319 .toStr: 1.0
    test 320 .std_repr: True
    test 321 .repr: 1.0
    test 322 .toRepr: lat (1.0)
    test 323 .units: lat
    test 324 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 325 lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 326 lat: TypeError
    test 327 .named: Test
    test 328 .named2: Lat 'Test'
    test 329 .str: 1.0
    test 330 .toStr: 1.0
    test 331 .repr: 1.0
    test 332 .toRepr: Test (1.0)
    test 333 .units: lat
    test 334 .name: Test
    test 335 ._name: Test
    test 336 .str: 1.0
    test 337 .repr: 1.0
    test 338 delattr: ''

    testing Lat_(1.0,) (pygeodesy.units, 20.10.05)
    test 339 .classname: Lat_
    test 340 isinstance: True
    test 341 .name: lat_
    test 342 .named: lat_
    test 343 .named2: Lat_ 'lat_'
    test 344 .str: 1.0
    test 345 .toStr: 1.0
    test 346 .std_repr: True
    test 347 .repr: 1.0
    test 348 .toRepr: lat_ (1.0)
    test 349 .units: lat_
    test 350 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 351 lat_: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 352 lat_: TypeError
    test 353 .named: Test
    test 354 .named2: Lat_ 'Test'
    test 355 .str: 1.0
    test 356 .toStr: 1.0
    test 357 .repr: 1.0
    test 358 .toRepr: Test (1.0)
    test 359 .units: lat_
    test 360 .name: Test
    test 361 ._name: Test
    test 362 .str: 1.0
    test 363 .repr: 1.0
    test 364 delattr: ''

    testing Lon(1.0,) (pygeodesy.units, 20.10.05)
    test 365 .classname: Lon
    test 366 isinstance: True
    test 367 .name: lon
    test 368 .named: lon
    test 369 .named2: Lon 'lon'
    test 370 .str: 1.0
    test 371 .toStr: 1.0
    test 372 .std_repr: True
    test 373 .repr: 1.0
    test 374 .toRepr: lon (1.0)
    test 375 .units: lon
    test 376 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 377 lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 378 lon: TypeError
    test 379 .named: Test
    test 380 .named2: Lon 'Test'
    test 381 .str: 1.0
    test 382 .toStr: 1.0
    test 383 .repr: 1.0
    test 384 .toRepr: Test (1.0)
    test 385 .units: lon
    test 386 .name: Test
    test 387 ._name: Test
    test 388 .str: 1.0
    test 389 .repr: 1.0
    test 390 delattr: ''

    testing Lon_(1.0,) (pygeodesy.units, 20.10.05)
    test 391 .classname: Lon_
    test 392 isinstance: True
    test 393 .name: lon_
    test 394 .named: lon_
    test 395 .named2: Lon_ 'lon_'
    test 396 .str: 1.0
    test 397 .toStr: 1.0
    test 398 .std_repr: True
    test 399 .repr: 1.0
    test 400 .toRepr: lon_ (1.0)
    test 401 .units: lon_
    test 402 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 403 lon_: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 404 lon_: TypeError
    test 405 .named: Test
    test 406 .named2: Lon_ 'Test'
    test 407 .str: 1.0
    test 408 .toStr: 1.0
    test 409 .repr: 1.0
    test 410 .toRepr: Test (1.0)
    test 411 .units: lon_
    test 412 .name: Test
    test 413 ._name: Test
    test 414 .str: 1.0
    test 415 .repr: 1.0
    test 416 delattr: ''

    testing Meter(1.0,) (pygeodesy.units, 20.10.05)
    test 417 .classname: Meter
    test 418 isinstance: True
    test 419 .name: meter
    test 420 .named: meter
    test 421 .named2: Meter 'meter'
    test 422 .str: 1.0
    test 423 .toStr: 1.0
    test 424 .std_repr: True
    test 425 .repr: 1.0
    test 426 .toRepr: meter (1.0)
    test 427 .units: meter
    test 428 meter: meter ('X'): could not convert string to float: X
    test 429 meter: U ('X'): could not convert string to float: X
    test 430 meter: TypeError
    test 431 .named: Test
    test 432 .named2: Meter 'Test'
    test 433 .str: 1.0
    test 434 .toStr: 1.0
    test 435 .repr: 1.0
    test 436 .toRepr: Test (1.0)
    test 437 .units: meter
    test 438 .name: Test
    test 439 ._name: Test
    test 440 .str: 1.0
    test 441 .repr: 1.0
    test 442 delattr: ''

    testing Northing(1.0,) (pygeodesy.units, 20.10.05)
    test 443 .classname: Northing
    test 444 isinstance: True
    test 445 .name: northing
    test 446 .named: northing
    test 447 .named2: Northing 'northing'
    test 448 .str: 1.0
    test 449 .toStr: 1.0
    test 450 .std_repr: True
    test 451 .repr: 1.0
    test 452 .toRepr: northing (1.0)
    test 453 .units: northing
    test 454 northing: northing ('X'): could not convert string to float: X
    test 455 northing: U ('X'): could not convert string to float: X
    test 456 northing: TypeError
    test 457 .named: Test
    test 458 .named2: Northing 'Test'
    test 459 .str: 1.0
    test 460 .toStr: 1.0
    test 461 .repr: 1.0
    test 462 .toRepr: Test (1.0)
    test 463 .units: northing
    test 464 .name: Test
    test 465 ._name: Test
    test 466 .str: 1.0
    test 467 .repr: 1.0
    test 468 delattr: ''

    testing Phi(1.0,) (pygeodesy.units, 20.10.05)
    test 469 .classname: Phi
    test 470 isinstance: True
    test 471 .name: phi
    test 472 .named: phi
    test 473 .named2: Phi 'phi'
    test 474 .str: 1.0
    test 475 .toStr: 1.0
    test 476 .std_repr: True
    test 477 .repr: 1.0
    test 478 .toRepr: phi (1.0)
    test 479 .units: phi
    test 480 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: X
    test 481 phi: U ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: X
    test 482 phi: TypeError
    test 483 .named: Test
    test 484 .named2: Phi 'Test'
    test 485 .str: 1.0
    test 486 .toStr: 1.0
    test 487 .repr: 1.0
    test 488 .toRepr: Test (1.0)
    test 489 .units: phi
    test 490 .name: Test
    test 491 ._name: Test
    test 492 .str: 1.0
    test 493 .repr: 1.0
    test 494 delattr: ''

    testing Radians(1.0,) (pygeodesy.units, 20.10.05)
    test 495 .classname: Radians
    test 496 isinstance: True
    test 497 .name: radians
    test 498 .named: radians
    test 499 .named2: Radians 'radians'
    test 500 .str: 1.0
    test 501 .toStr: 1.0
    test 502 .std_repr: True
    test 503 .repr: 1.0
    test 504 .toRepr: radians (1.0)
    test 505 .units: radians
    test 506 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: X
    test 507 radians: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: X
    test 508 radians: TypeError
    test 509 .named: Test
    test 510 .named2: Radians 'Test'
    test 511 .str: 1.0
    test 512 .toStr: 1.0
    test 513 .repr: 1.0
    test 514 .toRepr: Test (1.0)
    test 515 .units: radians
    test 516 .name: Test
    test 517 ._name: Test
    test 518 .str: 1.0
    test 519 .repr: 1.0
    test 520 delattr: ''

    testing Radians2(1.0,) (pygeodesy.units, 20.10.05)
    test 521 .classname: Radians2
    test 522 isinstance: True
    test 523 .name: radians2
    test 524 .named: radians2
    test 525 .named2: Radians2 'radians2'
    test 526 .str: 1.0
    test 527 .toStr: 1.0
    test 528 .std_repr: True
    test 529 .repr: 1.0
    test 530 .toRepr: radians2 (1.0)
    test 531 .units: radians2
    test 532 radians2: radians2 ('X'): could not convert string to float: X
    test 533 radians2: U ('X'): could not convert string to float: X
    test 534 radians2: TypeError
    test 535 .named: Test
    test 536 .named2: Radians2 'Test'
    test 537 .str: 1.0
    test 538 .toStr: 1.0
    test 539 .repr: 1.0
    test 540 .toRepr: Test (1.0)
    test 541 .units: radians2
    test 542 .name: Test
    test 543 ._name: Test
    test 544 .str: 1.0
    test 545 .repr: 1.0
    test 546 delattr: ''

    testing Radius(1.0,) (pygeodesy.units, 20.10.05)
    test 547 .classname: Radius
    test 548 isinstance: True
    test 549 .name: radius
    test 550 .named: radius
    test 551 .named2: Radius 'radius'
    test 552 .str: 1.0
    test 553 .toStr: 1.0
    test 554 .std_repr: True
    test 555 .repr: 1.0
    test 556 .toRepr: radius (1.0)
    test 557 .units: radius
    test 558 radius: radius ('X'): could not convert string to float: X
    test 559 radius: U ('X'): could not convert string to float: X
    test 560 radius: TypeError
    test 561 .named: Test
    test 562 .named2: Radius 'Test'
    test 563 .str: 1.0
    test 564 .toStr: 1.0
    test 565 .repr: 1.0
    test 566 .toRepr: Test (1.0)
    test 567 .units: radius
    test 568 .name: Test
    test 569 ._name: Test
    test 570 .str: 1.0
    test 571 .repr: 1.0
    test 572 delattr: ''

    testing Radius_(1.0,) (pygeodesy.units, 20.10.05)
    test 573 .classname: Radius_
    test 574 isinstance: True
    test 575 .name: radius_
    test 576 .named: radius_
    test 577 .named2: Radius_ 'radius_'
    test 578 .str: 1.0
    test 579 .toStr: 1.0
    test 580 .std_repr: True
    test 581 .repr: 1.0
    test 582 .toRepr: radius_ (1.0)
    test 583 .units: radius_
    test 584 radius_: radius ('X'): could not convert string to float: X
    test 585 radius_: U ('X'): could not convert string to float: X
    test 586 radius_: TypeError
    test 587 .named: Test
    test 588 .named2: Radius_ 'Test'
    test 589 .str: 1.0
    test 590 .toStr: 1.0
    test 591 .repr: 1.0
    test 592 .toRepr: Test (1.0)
    test 593 .units: radius_
    test 594 .name: Test
    test 595 ._name: Test
    test 596 .str: 1.0
    test 597 .repr: 1.0
    test 598 delattr: ''

    testing Scalar(1.0,) (pygeodesy.units, 20.10.05)
    test 599 .classname: Scalar
    test 600 isinstance: True
    test 601 .name: scalar
    test 602 .named: scalar
    test 603 .named2: Scalar 'scalar'
    test 604 .str: 1.0
    test 605 .toStr: 1.0
    test 606 .std_repr: True
    test 607 .repr: 1.0
    test 608 .toRepr: scalar (1.0)
    test 609 .units: scalar
    test 610 scalar: scalar ('X'): could not convert string to float: X
    test 611 scalar: U ('X'): could not convert string to float: X
    test 612 scalar: TypeError
    test 613 .named: Test
    test 614 .named2: Scalar 'Test'
    test 615 .str: 1.0
    test 616 .toStr: 1.0
    test 617 .repr: 1.0
    test 618 .toRepr: Test (1.0)
    test 619 .units: scalar
    test 620 .name: Test
    test 621 ._name: Test
    test 622 .str: 1.0
    test 623 .repr: 1.0
    test 624 delattr: ''

    testing Scalar_(1.0,) (pygeodesy.units, 20.10.05)
    test 625 .classname: Scalar_
    test 626 isinstance: True
    test 627 .name: scalar_
    test 628 .named: scalar_
    test 629 .named2: Scalar_ 'scalar_'
    test 630 .str: 1.0
    test 631 .toStr: 1.0
    test 632 .std_repr: True
    test 633 .repr: 1.0
    test 634 .toRepr: scalar_ (1.0)
    test 635 .units: scalar_
    test 636 scalar_: scalar ('X'): could not convert string to float: X
    test 637 scalar_: U ('X'): could not convert string to float: X
    test 638 scalar_: TypeError
    test 639 .named: Test
    test 640 .named2: Scalar_ 'Test'
    test 641 .str: 1.0
    test 642 .toStr: 1.0
    test 643 .repr: 1.0
    test 644 .toRepr: Test (1.0)
    test 645 .units: scalar_
    test 646 .name: Test
    test 647 ._name: Test
    test 648 .str: 1.0
    test 649 .repr: 1.0
    test 650 delattr: ''

    testing Band('U',) (pygeodesy.units, 20.10.05)
    test 651 .classname: Band
    test 652 isinstance: True
    test 653 .name: band
    test 654 .named: band
    test 655 .named2: Band 'band'
    test 656 .str: U
    test 657 .toStr: U
    test 658 .std_repr: True
    test 659 .repr: 'U'
    test 660 .toRepr: band ('U')
    test 661 .units: band
    test 662 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 663 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 664 Error: X  FAILED, KNOWN, expected <type 'exceptions.TypeError'>
    test 665 .named: Test
    test 666 .named2: Band 'Test'
    test 667 .str: U
    test 668 .toStr: U
    test 669 .repr: 'U'
    test 670 .toRepr: Test ('U')
    test 671 .units: band
    test 672 .name: Test
    test 673 ._name: Test
    test 674 .str: U
    test 675 .repr: 'U'
    test 676 delattr: ''

    testing Str('U',) (pygeodesy.units, 20.10.05)
    test 677 .classname: Str
    test 678 isinstance: True
    test 679 .name: str
    test 680 .named: str
    test 681 .named2: Str 'str'
    test 682 .str: U
    test 683 .toStr: U
    test 684 .std_repr: True
    test 685 .repr: 'U'
    test 686 .toRepr: str ('U')
    test 687 .units: str
    test 688 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 689 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 690 Error: X  FAILED, KNOWN, expected <type 'exceptions.TypeError'>
    test 691 .named: Test
    test 692 .named2: Str 'Test'
    test 693 .str: U
    test 694 .toStr: U
    test 695 .repr: 'U'
    test 696 .toRepr: Test ('U')
    test 697 .units: str
    test 698 .name: Test
    test 699 ._name: Test
    test 700 .str: U
    test 701 .repr: 'U'
    test 702 delattr: ''

    testing Bool(True,) (pygeodesy.units, 20.10.05)
    test 703 .classname: Bool
    test 704 isinstance: True
    test 705 .name: bool
    test 706 .named: bool
    test 707 .named2: Bool 'bool'
    test 708 .str: True
    test 709 .toStr: True
    test 710 .std_repr: True
    test 711 .repr: True
    test 712 .toRepr: bool (True)
    test 713 .units: bool
    test 714 error: True  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 715 error: True  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 716 Error: True  FAILED, KNOWN, expected <type 'exceptions.TypeError'>
    test 717 .named: Test
    test 718 .named2: Bool 'Test'
    test 719 .str: True
    test 720 .toStr: True
    test 721 .repr: True
    test 722 .toRepr: Test (True)
    test 723 .units: bool
    test 724 .name: Test
    test 725 ._name: Test
    test 726 .str: True
    test 727 .repr: True
    test 728 delattr: ''

    testing Int(2,) (pygeodesy.units, 20.10.05)
    test 729 .classname: Int
    test 730 isinstance: True
    test 731 .name: int
    test 732 .named: int
    test 733 .named2: Int 'int'
    test 734 .str: 2
    test 735 .toStr: 2
    test 736 .std_repr: True
    test 737 .repr: 2
    test 738 .toRepr: int (2)
    test 739 .units: int
    test 740 int: Int ('X'): invalid literal for int() with base 10: 'X'
    test 741 int: U ('X'): invalid literal for int() with base 10: 'X'
    test 742 int: TypeError
    test 743 .named: Test
    test 744 .named2: Int 'Test'
    test 745 .str: 2
    test 746 .toStr: 2
    test 747 .repr: 2
    test 748 .toRepr: Test (2)
    test 749 .units: int
    test 750 .name: Test
    test 751 ._name: Test
    test 752 .str: 2
    test 753 .repr: 2
    test 754 delattr: ''

    testing Int_(2,) (pygeodesy.units, 20.10.05)
    test 755 .classname: Int_
    test 756 isinstance: True
    test 757 .name: int_
    test 758 .named: int_
    test 759 .named2: Int_ 'int_'
    test 760 .str: 2
    test 761 .toStr: 2
    test 762 .std_repr: True
    test 763 .repr: 2
    test 764 .toRepr: int_ (2)
    test 765 .units: int_
    test 766 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'
    test 767 int_: U ('X'): invalid literal for int() with base 10: 'X'
    test 768 int_: TypeError
    test 769 .named: Test
    test 770 .named2: Int_ 'Test'
    test 771 .str: 2
    test 772 .toStr: 2
    test 773 .repr: 2
    test 774 .toRepr: Test (2)
    test 775 .units: int_
    test 776 .name: Test
    test 777 ._name: Test
    test 778 .str: 2
    test 779 .repr: 2
    test 780 delattr: ''

    testing Number_(2,) (pygeodesy.units, 20.10.05)
    test 781 .classname: Number_
    test 782 isinstance: True
    test 783 .name: number_
    test 784 .named: number_
    test 785 .named2: Number_ 'number_'
    test 786 .str: 2
    test 787 .toStr: 2
    test 788 .std_repr: True
    test 789 .repr: 2
    test 790 .toRepr: number_ (2)
    test 791 .units: number_
    test 792 number_: number ('X'): invalid literal for int() with base 10: 'X'
    test 793 number_: U ('X'): invalid literal for int() with base 10: 'X'
    test 794 number_: TypeError
    test 795 .named: Test
    test 796 .named2: Number_ 'Test'
    test 797 .str: 2
    test 798 .toStr: 2
    test 799 .repr: 2
    test 800 .toRepr: Test (2)
    test 801 .units: number_
    test 802 .name: Test
    test 803 ._name: Test
    test 804 .str: 2
    test 805 .repr: 2
    test 806 delattr: ''

    testing Precision_(2,) (pygeodesy.units, 20.10.05)
    test 807 .classname: Precision_
    test 808 isinstance: True
    test 809 .name: precision_
    test 810 .named: precision_
    test 811 .named2: Precision_ 'precision_'
    test 812 .str: 2
    test 813 .toStr: 2
    test 814 .std_repr: True
    test 815 .repr: 2
    test 816 .toRepr: precision_ (2)
    test 817 .units: precision_
    test 818 precision_: precision ('X'): invalid literal for int() with base 10: 'X'
    test 819 precision_: U ('X'): invalid literal for int() with base 10: 'X'
    test 820 precision_: TypeError
    test 821 .named: Test
    test 822 .named2: Precision_ 'Test'
    test 823 .str: 2
    test 824 .toStr: 2
    test 825 .repr: 2
    test 826 .toRepr: Test (2)
    test 827 .units: precision_
    test 828 .name: Test
    test 829 ._name: Test
    test 830 .str: 2
    test 831 .repr: 2
    test 832 delattr: ''

    testing Zone(2,) (pygeodesy.units, 20.10.05)
    test 833 .classname: Zone
    test 834 isinstance: True
    test 835 .name: zone
    test 836 .named: zone
    test 837 .named2: Zone 'zone'
    test 838 .str: 2
    test 839 .toStr: 2
    test 840 .std_repr: True
    test 841 .repr: 2
    test 842 .toRepr: zone (2)
    test 843 .units: zone
    test 844 zone: zone ('X'): invalid literal for int() with base 10: 'X'
    test 845 zone: U ('X'): invalid literal for int() with base 10: 'X'
    test 846 zone: TypeError
    test 847 .named: Test
    test 848 .named2: Zone 'Test'
    test 849 .str: 2
    test 850 .toStr: 2
    test 851 .repr: 2
    test 852 .toRepr: Test (2)
    test 853 .units: zone
    test 854 .name: Test
    test 855 ._name: Test
    test 856 .str: 2
    test 857 .repr: 2
    test 858 delattr: ''

    testing Epoch(1901,) (pygeodesy.units, 20.10.05)
    test 859 .classname: Epoch
    test 860 isinstance: True
    test 861 .name: epoch
    test 862 .named: epoch
    test 863 .named2: Epoch 'epoch'
    test 864 .str: 1901
    test 865 .toStr: 1901
    test 866 .std_repr: False
    test 867 .repr: epoch (1901)
    test 868 .toRepr: epoch (1901)
    test 869 .units: epoch
    test 870 epoch: epoch ('X'): could not convert string to float: X
    test 871 epoch: U ('X'): could not convert string to float: X
    test 872 epoch: TypeError
    test 873 .named: Test
    test 874 .named2: Epoch 'Test'
    test 875 .str: 1901
    test 876 .toStr: 1901
    test 877 .repr: Test (1901)
    test 878 .toRepr: Test (1901)
    test 879 .units: epoch
    test 880 .name: Test
    test 881 ._name: Test
    test 882 .str: 1901
    test 883 .repr: Test (1901)
    test 884 delattr: ''

    testing(pygeodesy.units, 20.10.05)
    test 885 Bearing: 1.0
    test 886 Bearing_: 0.01745
    test 887 Lam_: 6.30
    test 888 Phi_: 6.30
    test 889 _FIx: 1
    test 890 _FIx: 1.5

    9 of 890 testUnits.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 29.397 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUps.py

    testing testUps.py 20.04.22 (module pygeodesy.ups 20.10.08)
    test 1 Ups: 00 N 448251.0 5411932.0001
    test 2 Ups: 00 N 448252 5411933
    test 3 Ups: 00 N 448251.795 5411932.678
    test 4 Ups: 00Z N 448251.8 5411932.7 n/a n/a
    test 5 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 6 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 7 Ups.toLatLon: 43.684097°N, 175.265195°E
    test 8 Ups.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 Ups.toMgrs: 60T UP 60176 38249
    test 10 Ups.toUps: 00 N 448252 5411933
    test 11 Ups.toUtm: 60 N 360177 4838249
    test 12 toUpsID1: 00 N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 13 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 14 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 15 toUpsID3: 00 S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 16 Ups.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 17 Ups.toLatLonID4: 84.287234°N, 132.247989°W
    test 18 Ups.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 19 Ups.toLatLonID5: 73.0°N, 044.0°E
    test 20 Ups.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 21 Ups.toLatLonID6: 87.287333°S, 132.247861°E
    test 22 latlon: 84.0°N, 084.0°E
    test 23 toUps: 00 N 2663075 1930308
    test 24 toUps: 00 N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 25 toUps(None): (0, 'N', 2663075.299562, 1930307.977716, 'Z', ...)
    test 26 .scale0: 0.994000
    test 27 rescale0: 0.997261
    test 28 NGA-10.2-1: 00 N 2000000.0 2000000.0 +0.0″ 0.994
    test 29 NGA-10.2-2: 00 N 1998062.320046 2111009.610243 -179.0° 0.994076
    test 30 NGA-10.2-3: 00 N 1777930.731071 2000000.0 -90.0° 0.994303
    test 31 NGA-10.2-4: 00 N 1994185.827038 1666906.254073 -1.0° 0.994682
    test 32 NGA-10.2-5: 00 N 2000000.0 1555731.570643 +0.0″ 0.995212
    test 33 NGA-10.2-6: 00 N 2009694.068153 1444627.207468 +1.0° 0.995895
    test 34 NGA-10.2-7: 00 N 2666626.157825 1988363.997132 +89.0° 0.996730
    test 35 NGA-10.2-8: 46 N 459200.256323 9217519.441609 -2.97767886° 0.997718
    test 36 NGA-10.2-9: 46 N 468930.934996 9105366.008486 -1.98055172° 0.998860
    test 37 NGA-10.2-10: 60 N 534921.971582 8993806.415149 +1.97539632° 1.000156
    test 38 NGA-10.2-11: 01 N 441867.784867 8883084.955948 -2.95450468° 1.001608
    test 39 NGA-10.2-12: 31 N 243900.35203 4432069.056899 -1.92940969° 1.0004075
    test 40 NGA-10.2-13: 01 N 277707.830749 331796.291679 -6.28291137′ 1.00021172
    test 41 NGA-10.2-14: 16 N 166223.907623 221366.16603 -6.28776606′ 1.00097936
    test 42 NGA-10.2-15: 30 N 722561.736479 110597.972524 +2.09515682′ 1.00021322
    test 43 NGA-10.2-16: 31 N 166021.443081 0.0 +0.0″ 1.00098106
    test 44 NGA-10.2-17: 31 S 277438.263521 9889402.027476 +2.09515682′ 1.00021322
    test 45 NGA-10.2-18: 46 S 166223.907623 9778633.83397 +6.28776606′ 1.00097936
    test 46 NGA-10.2-19: 60 S 722292.169251 9668203.708321 -6.28291137′ 1.00021172
    test 47 NGA-10.2-20: 01 S 166831.065275 9557263.747314 +12.56782777′ 1.00097428
    test 48 NGA-10.3-1: -64.9164123332 -135.0
    test 49 NGA-10.3-2: -70.0552944014 -153.4349488229
    test 50 NGA-10.3-3: -72.1263610163 180.0  FAILED, KNOWN, expected -72.1263610163 -180.0
    test 51 NGA-10.3-4: -70.0552944014 153.4349488229
    test 52 NGA-10.3-5: -64.9164123332 135.0
    test 53 NGA-10.3-6: -70.0552944014 -116.5650511771
    test 54 NGA-10.3-7: -77.3120791908 -135.0
    test 55 NGA-10.3-8: -81.0106632645 180.0
    test 56 NGA-10.3-9: -77.3120791908 135.0
    test 57 NGA-10.3-10: -70.0552944014 116.5650511771
    test 58 NGA-10.3-11: -72.1263610163 -90.0
    test 59 NGA-10.3-12: -81.0106632645 -90.0
    test 60 NGA-10.3-13: -90.0 0.0
    test 61 NGA-10.3-14: -81.0106632645 90.0
    test 62 NGA-10.3-15: -72.1263610163 90.0
    test 63 NGA-10.3-16: -70.0552944014 -63.4349488229
    test 64 NGA-10.3-17: -77.3120791908 -45.0
    test 65 NGA-10.3-18: -81.0106632645 0.0
    test 66 NGA-10.3-19: -77.3120791908 45.0
    test 67 NGA-10.3-20: -70.0552944014 63.4349488229
    test 68 NGA-10.3-21: -64.9164123332 -45.0
    test 69 NGA-10.3-22: -70.0552944014 -26.5650511771
    test 70 NGA-10.3-23: -72.1263610163 0.0
    test 71 NGA-10.3-24: -70.0552944014 26.5650511771
    test 72 NGA-10.3-25: -64.9164123332 45.0

    2 of 72 testUps.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 26.777 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUtily.py

    testing testUtily.py 20.09.08 (module pygeodesy.utily 20.10.02)
    test 1 degrees90(PI_2): 90.0
    test 2 degrees90(PI): -180.0
    test 3 degrees90(PI2): 0.0
    test 4 degrees90(-PI_2): -90.0
    test 5 degrees90(-PI): -180.0
    test 6 degrees90(-PI2): 0.0
    test 7 degrees180(PI_2): 90.0
    test 8 degrees180(PI): 180.0
    test 9 degrees180(PI2): 0.0
    test 10 degrees180(-PI_2): -90.0
    test 11 degrees180(-PI): -180.0
    test 12 degrees180(-PI2): 0.0
    test 13 degrees360(PI_2): 90.0
    test 14 degrees360(PI): 180.0
    test 15 degrees360(PI2): 0.0
    test 16 degrees360(-PI_2): 270.0
    test 17 degrees360(-PI): 180.0
    test 18 degrees360(-PI2): 0.0
    test 19 radiansPI_2(90): 1.57079632679
    test 20 radiansPI_2(180): -3.14159265359
    test 21 radiansPI_2(360): 0.0
    test 22 radiansPI_2(-90): -1.57079632679
    test 23 radiansPI_2(-180): -3.14159265359
    test 24 radiansPI_2(-360): 0.0
    test 25 radiansPI(90): 1.57079632679
    test 26 radiansPI(180): 3.14159265359
    test 27 radiansPI(360): 0.0
    test 28 radiansPI(-90): -1.57079632679
    test 29 radiansPI(-180): -3.14159265359
    test 30 radiansPI(-360): 0.0
    test 31 radiansPI2(90): 1.57079632679
    test 32 radiansPI2(180): 3.14159265359
    test 33 radiansPI2(360): 0.0
    test 34 radiansPI2(-90): 4.71238898038
    test 35 radiansPI2(-180): 3.14159265359
    test 36 radiansPI2(-360): 0.0
    test 37 wrap90(90): 90.0
    test 38 wrap90(180): -180.0
    test 39 wrap90(360): 0.0
    test 40 wrap90(-90): -90.0
    test 41 wrap90(-180): -180.0
    test 42 wrap90(-360): 0.0
    test 43 wrap180(90): 90.0
    test 44 wrap180(180): 180.0
    test 45 wrap180(360): 0.0
    test 46 wrap180(-90): -90.0
    test 47 wrap180(-180): -180.0
    test 48 wrap180(-360): 0.0
    test 49 wrap360(90): 90.0
    test 50 wrap360(180): 180.0
    test 51 wrap360(360): 0.0
    test 52 wrap360(-90): 270.0
    test 53 wrap360(-180): 180.0
    test 54 wrap360(-360): 0.0
    test 55 wrapPI_2(PI_2): 1.57079632679
    test 56 wrapPI_2(PI): -3.14159265359
    test 57 wrapPI_2(PI2): 0.0
    test 58 wrapPI_2(-PI_2): -1.57079632679
    test 59 wrapPI_2(-PI): -3.14159265359
    test 60 wrapPI_2(-PI2): 0.0
    test 61 wrapPI(PI_2): 1.57079632679
    test 62 wrapPI(PI): 3.14159265359
    test 63 wrapPI(PI2): 0.0
    test 64 wrapPI(-PI_2): -1.57079632679
    test 65 wrapPI(-PI): -3.14159265359
    test 66 wrapPI(-PI2): 0.0
    test 67 wrapPI2(PI_2): 1.57079632679
    test 68 wrapPI2(PI): 3.14159265359
    test 69 wrapPI2(PI2): 0.0
    test 70 wrapPI2(-PI_2): 4.71238898038
    test 71 wrapPI2(-PI): 3.14159265359
    test 72 wrapPI2(-PI2): 0.0
    test 73 unroll180: -160.0, -250.0
    test 74 unroll180: 200.0, 110.0
    test 75 unroll180: -160.0, -250.0
    test 76 unroll180: 920.0, 830.0
    test 77 unroll180: -160.0, -270.0
    test 78 unroll180: 200.0, 90.0
    test 79 unroll180: -160.0, -990.0
    test 80 unroll180: 920.0, 90.0
    test 81 sincos2: 3.88578058619e-16  FAILED, KNOWN, expected 1.7763568394e-15
    test 82 sincos2d: 9.99200722163e-16  FAILED, KNOWN, expected 1.7763568394e-15
    test 83 iFt2m: 187441
    test 84 iFt2m: 757050
    test 85 sFt2m: 187441
    test 86 sFt2m: 757050
    test 87 m2iFt: 614964
    test 88 m2iFt: 2483760
    test 89 m2sFt: 614963
    test 90 m2sFt: 2483755
    test 91 degrees2m: 10007557.1761
    test 92 degrees2m: 8666798.7443
    test 93 m2degrees: 90.0
    test 94 degrees2m: 20015114.3522
    test 95 degrees2m: 19987684.3336
    test 96 m2degrees: 180.0
    test 97 m2-degrees-2m(45, lat=0): 45.00
    test 98 m2-degrees-2m(45, lat=7): 45.00
    test 99 m2-degrees-2m(45, lat=14): 45.00
    test 100 m2-degrees-2m(45, lat=21): 45.00
    test 101 m2-degrees-2m(45, lat=28): 45.00
    test 102 m2-degrees-2m(45, lat=35): 45.00
    test 103 m2-degrees-2m(45, lat=42): 45.00
    test 104 m2-degrees-2m(45, lat=49): 45.00
    test 105 m2-degrees-2m(45, lat=56): 45.00
    test 106 m2-degrees-2m(45, lat=63): 45.00
    test 107 m2-degrees-2m(45, lat=70): 45.00
    test 108 m2-degrees-2m(45, lat=77): 45.00
    test 109 m2-degrees-2m(45, lat=84): 45.00
    test 110 isPoints2: False

    2 of 110 testUtily.py tests (1.8%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 12.595 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUtm.py

    testing testUtm.py 20.04.27 (module pygeodesy.utm 20.10.08)
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 10 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 11 toUtm4: 48 N 377302 1483035
    test 12 toUtm5: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 13 toUtm6: 13 S 622698 8516965
    test 14 toUtm7: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 15 toEtm: 13 S 622698 8516965
    test 16 toMgrs1: 13L FF 22697 16965
    test 17 toMgrs2: 31U DQ 48251 11932
    test 18 toUps: 00 S -7702368 -395110
    test 19 toUtm14: 14 S -27436 8512042
    test 20 Utm8: 18 N 516620 4574500
    test 21 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 22 Utm8.toLatLon: 41.321801N, 074.801413W
    test 23 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 24 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 25 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 26 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 27 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 28 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 29 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 30 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 31 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 32 toUtm(80.5434°S, 170.654°W): lat ('-80.5434\xc2\xb0'): outside UTM range [-80.0, 84.0)
    test 33 toUtm(90.0°N, 177.0°E): lat ('90.0\xc2\xb0'): outside UTM range [-80.0, 84.0)
    test 34 toUtm(90.0°S, 177.0°W): lat ('-90.0\xc2\xb0'): outside UTM range [-80.0, 84.0)
    test 35 toUtm(90.0°N, 003.0°E): lat ('90.0\xc2\xb0'): outside UTM range [-80.0, 84.0)
    test 36 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 37 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 38 toUtm(89.3454°S, 048.9306°W): lat ('-89.3454\xc2\xb0'): outside UTM range [-80.0, 84.0)
    test 39 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 40 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 41 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 42 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 43 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 44 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 45 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 46 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 47 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 48 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 49 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 50 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    test 51 toUtm(50.77535°N, 006.08389°E): 32U N 294409 5628898
    test 52 toUtm(40.71435°N, 074.00597°W): 18T N 583960 4507523
    test 53 toUtm(41.28646°S, 174.77624°E): 60G S 313784 5427057
    test 54 toUtm(33.92487°S, 018.42406°E): 34H S 261878 6243186
    test 55 toUtm(32.89018°S, 068.84405°W): 19H S 514586 6360877
    test 56 toUtm(64.83778°N, 147.71639°W): 06W N 466013 7190568
    test 57 toUtm(56.7968°N, 005.00601°W): 30V N 377486 6296562
    test 58 toUtm(84.0°N, 005.00601°W): lat ('84.0\xc2\xb0'): outside UTM range [-80.0, 84.0)
    test 59 toUtm('Mt Assiniboine'): [Z:11U, H:N, E:594934, N:5636174]
    test 60 Utm9: 55 S 321441 5810117
    test 61 Utm9.toLatLon(eps=2.2204e-12): -37.83891644, 144.97077387
    test 62 Utm9.toLatLon(eps=2.2204e-13): -37.83891644, 144.97077387
    test 63 Utm9.toLatLon(eps=2.2204e-14): -37.83891644, 144.97077387
    test 64 Utm9.toLatLon(eps=2.2204e-15): -37.83891644, 144.97077387
    test 65 Utm9.toLatLon(eps=2.2204e-16): -37.83891644, 144.97077387
    test 66 Utm9.toLatLon(eps=2.2204e-17): -37.83891644, 144.97077387
    test 67 Utm9.toLatLon(eps=2.2204e-18): -37.83891644, 144.97077387
    test 68 Utm9.toLatLon(eps=2.2204e-19): -37.83891644, 144.97077387
    test 69 Utm9.toLatLon(eps=2.2204e-20): -37.83891644, 144.97077387
    test 70 Utm10: 31 N 400000 5000000
    test 71 Utm10.toLatLon(eps=2.2204e-12): 45.14639288, 1.72796704
    test 72 Utm10.toLatLon(eps=2.2204e-13): 45.14639288, 1.72796704
    test 73 Utm10.toLatLon(eps=2.2204e-14): 45.14639288, 1.72796704
    test 74 Utm10.toLatLon(eps=2.2204e-15): 45.14639288, 1.72796704
    test 75 Utm10.toLatLon(eps=2.2204e-16): 45.14639288, 1.72796704
    test 76 Utm10.toLatLon(eps=2.2204e-17): 45.14639288, 1.72796704
    test 77 Utm10.toLatLon(eps=2.2204e-18): 45.14639288, 1.72796704
    test 78 Utm10.toLatLon(eps=2.2204e-19): 45.14639288, 1.72796704
    test 79 Utm10.toLatLon(eps=2.2204e-20): 45.14639288, 1.72796704
    test 80 Utm111: 37 N 1399093 8314607
    test 81 Utm111.toLatLon(eps=2.2204e-12): 70.54298527, 40.28205459
    test 82 Utm111.toLatLon(eps=2.2204e-13): 70.54298527, 40.28205459
    test 83 Utm111.toLatLon(eps=2.2204e-14): 70.54298527, 40.28205459
    test 84 Utm111.toLatLon(eps=2.2204e-15): 70.54298527, 40.28205459
    test 85 Utm111.toLatLon(eps=2.2204e-16): 70.54298527, 40.28205459
    test 86 Utm111.toLatLon(eps=2.2204e-17): 70.54298527, 40.28205459
    test 87 Utm111.toLatLon(eps=2.2204e-18): 70.54298527, 40.28205459
    test 88 Utm111.toLatLon(eps=2.2204e-19): 70.54298527, 40.28205459
    test 89 Utm111.toLatLon(eps=2.2204e-20): 70.54298527, 40.28205459

    all 89 testUtm.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 39.634 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUtmTMcoords.py

    testing testUtmTMcoords.py 19.05.23 (module pygeodesy.utm 20.10.08)
    test 1 line 1 toUtm8.easting: 1548706.791619
    test 2 line 1 toUtm8.northing: 8451449.198772
    test 3 line 1 toUtm8.convergence: 43.922790
    test 4 line 1 toUtm8.scale: 1.029060
    test 5 line 1 toUtm8.lat: 70.579277
    test 6 line 1 toUtm8.lon: 45.599420
    test 7 line 2 toUtm8.easting: 2624150.740929
    test 8 line 2 toUtm8.northing: 1204434.041605
    test 9 line 2 toUtm8.convergence: 4.292619
    test 10 line 2 toUtm8.scale: 1.086051
    test 11 line 2 toUtm8.lat: 10.018894
    test 12 line 2 toUtm8.lon: 23.313324
    test 13 line 3 toUtm8.easting: 9855841.232935
    test 14 line 3 toUtm8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtm8.convergence: 53.348315
    test 16 line 3 toUtm8.scale: 2.445098
    test 17 line 3 toUtm8.lat: 19.479896
    test 18 line 3 toUtm8.lon: 75.662049
    test 19 line 4 toUtm8.easting: 3206390.691996
    test 20 line 4 toUtm8.northing: 2650745.400406
    test 21 line 4 toUtm8.convergence: 11.666950
    test 22 line 4 toUtm8.scale: 1.129359
    test 23 line 4 toUtm8.lat: 21.072465
    test 24 line 4 toUtm8.lon: 29.828684
    test 25 line 5 toUtm8.easting: 4328154.083501
    test 26 line 5 toUtm8.northing: 749647.623690
    test 27 line 5 toUtm8.convergence: 4.024317
    test 28 line 5 toUtm8.scale: 1.240829
    test 29 line 5 toUtm8.lat: 5.458957
    test 30 line 5 toUtm8.lon: 36.385237
    test 31 line 6 toUtm8.easting: 847598.266514
    test 32 line 6 toUtm8.northing: 7947180.962440
    test 33 line 6 toUtm8.convergence: 21.639091
    test 34 line 6 toUtm8.scale: 1.008399
    test 35 line 6 toUtm8.lat: 70.175454
    test 36 line 6 toUtm8.lon: 22.865350
    test 37 line 7 toUtm8.easting: 2727657.337974
    test 38 line 7 toUtm8.northing: 8283916.696410
    test 39 line 7 toUtm8.convergence: 55.690909
    test 40 line 7 toUtm8.scale: 1.091942
    test 41 line 7 toUtm8.lat: 61.965605
    test 42 line 7 toUtm8.lon: 58.931371
    test 43 line 8 toUtm8.easting: 2331001.751890
    test 44 line 8 toUtm8.northing: 1313608.224751
    test 45 line 8 toUtm8.convergence: 4.214690
    test 46 line 8 toUtm8.scale: 1.067599
    test 47 line 8 toUtm8.lat: 11.116050
    test 48 line 8 toUtm8.lon: 20.901069
    test 49 line 9 toUtm8.easting: 6035557.239480
    test 50 line 9 toUtm8.northing: 5791770.791879
    test 51 line 9 toUtm8.convergence: 43.698170
    test 52 line 9 toUtm8.scale: 1.481260
    test 53 line 9 toUtm8.lat: 32.210543
    test 54 line 9 toUtm8.lon: 60.705849
    test 55 line 10 toUtm8.easting: 1064553.125852
    test 56 line 10 toUtm8.northing: 9417273.737208
    test 57 line 10 toUtm8.convergence: 61.100380
    test 58 line 10 toUtm8.scale: 1.013475
    test 59 line 10 toUtm8.lat: 79.187451
    test 60 line 10 toUtm8.lon: 61.532382
    test 61 line 11 toUtm8.easting: 1400137.116164
    test 62 line 11 toUtm8.northing: 9616907.017686
    test 63 line 11 toUtm8.convergence: 74.527087
    test 64 line 11 toUtm8.scale: 1.023640
    test 65 line 11 toUtm8.lat: 77.103759
    test 66 line 11 toUtm8.lon: 74.899105
    test skipped (1): line 12 toUtm8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'
    test skipped (2): line 13 toUtm8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtm8.easting: 3335099.866623
    test 68 line 14 toUtm8.northing: 6740519.084015
    test 69 line 14 toUtm8.convergence: 40.611821
    test 70 line 14 toUtm8.scale: 1.139021
    test 71 line 14 toUtm8.lat: 49.990485
    test 72 line 14 toUtm8.lon: 48.203179
    test skipped (3): line 15 toUtm8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtm8.easting: 5387578.735298
    test 74 line 16 toUtm8.northing: 4111216.907168
    test 75 line 16 toUtm8.convergence: 27.574337
    test 76 line 16 toUtm8.scale: 1.379357
    test 77 line 16 toUtm8.lat: 25.936824
    test 78 line 16 toUtm8.lon: 49.913598
    test 79 line 17 toUtm8.easting: 2622214.380233
    test 80 line 17 toUtm8.northing: 8678923.984567
    test 81 line 17 toUtm8.convergence: 61.697275
    test 82 line 17 toUtm8.scale: 1.084810
    test 83 line 17 toUtm8.lat: 64.402196
    test 84 line 17 toUtm8.lon: 64.091395
    test skipped (4): line 18 toUtm8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtm8.easting: 738062.047779
    test 86 line 19 toUtm8.northing: 3031007.074116
    test 87 line 19 toUtm8.convergence: 3.416802
    test 88 line 19 toUtm8.scale: 1.006332
    test 89 line 19 toUtm8.lat: 27.203895
    test 90 line 19 toUtm8.lon: 7.440229
    test 91 line 20 toUtm8.easting: 1944413.834565
    test 92 line 20 toUtm8.northing: 9613299.224493
    test 93 line 20 toUtm8.convergence: 78.462831
    test 94 line 20 toUtm8.scale: 1.046134
    test 95 line 20 toUtm8.lat: 72.509000
    test 96 line 20 toUtm8.lon: 78.982283
    test 97 line 21 toUtm8.easting: 2114521.418406
    test 98 line 21 toUtm8.northing: 4954077.440098
    test 99 line 21 toUtm8.convergence: 17.571878
    test 100 line 21 toUtm8.scale: 1.055093
    test 101 line 21 toUtm8.lat: 41.824954
    test 102 line 21 toUtm8.lon: 25.392744
    test 103 line 22 toUtm8.easting: 620365.905090
    test 104 line 22 toUtm8.northing: 4755542.026562
    test 105 line 22 toUtm8.convergence: 5.152022
    test 106 line 22 toUtm8.scale: 1.004338
    test 107 line 22 toUtm8.lat: 42.701376
    test 108 line 22 toUtm8.lon: 7.572738
    test 109 line 23 toUtm8.easting: 263004.770989
    test 110 line 23 toUtm8.northing: 4493669.762451
    test 111 line 23 toUtm8.convergence: 2.020523
    test 112 line 23 toUtm8.scale: 1.000452
    test 113 line 23 toUtm8.lat: 40.552052
    test 114 line 23 toUtm8.lon: 3.106056
    test 115 line 24 toUtm8.easting: 3217221.739462
    test 116 line 24 toUtm8.northing: 437776.119161
    test 117 line 24 toUtm8.convergence: 1.848169
    test 118 line 24 toUtm8.scale: 1.130558
    test 119 line 24 toUtm8.lat: 3.501242
    test 120 line 24 toUtm8.lon: 27.806507
    test skipped (5): line 25 toUtm8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtm8.easting: 967777.158554
    test 122 line 26 toUtm8.northing: 6615684.266592
    test 123 line 26 toUtm8.convergence: 14.410044
    test 124 line 26 toUtm8.scale: 1.011100
    test 125 line 26 toUtm8.lat: 58.582623
    test 126 line 26 toUtm8.lon: 16.755558
    test 127 line 27 toUtm8.easting: 7558840.728461
    test 128 line 27 toUtm8.northing: 4144728.130764
    test 129 line 27 toUtm8.convergence: 32.557264
    test 130 line 27 toUtm8.scale: 1.791490
    test 131 line 27 toUtm8.lat: 19.793004
    test 132 line 27 toUtm8.lon: 61.746763
    test 133 line 28 toUtm8.easting: 1056008.314161
    test 134 line 28 toUtm8.northing: 9290799.692669
    test 135 line 28 toUtm8.convergence: 55.843278
    test 136 line 28 toUtm8.scale: 1.013253
    test 137 line 28 toUtm8.lat: 78.666776
    test 138 line 28 toUtm8.lon: 56.365355
    test 139 line 29 toUtm8.easting: 1943965.134687
    test 140 line 29 toUtm8.northing: 1389972.228690
    test 141 line 29 toUtm8.convergence: 3.774869
    test 142 line 29 toUtm8.scale: 1.046724
    test 143 line 29 toUtm8.lat: 11.998788
    test 144 line 29 toUtm8.lon: 17.597873
    test 145 line 30 toUtm8.easting: 5803077.072902
    test 146 line 30 toUtm8.northing: 5649957.943659
    test 147 line 30 toUtm8.convergence: 41.717943
    test 148 line 30 toUtm8.scale: 1.442572
    test 149 line 30 toUtm8.lat: 32.540378
    test 150 line 30 toUtm8.lon: 58.764613
    test 151 line 31 toUtm8.easting: 2928716.986009
    test 152 line 31 toUtm8.northing: 5731835.058317
    test 153 line 31 toUtm8.convergence: 28.538550
    test 154 line 31 toUtm8.scale: 1.106780
    test 155 line 31 toUtm8.lat: 45.160356
    test 156 line 31 toUtm8.lon: 37.465285
    test 157 line 32 toUtm8.easting: 326141.975756
    test 158 line 32 toUtm8.northing: 8881325.164543
    test 159 line 32 toUtm8.convergence: 16.111415
    test 160 line 32 toUtm8.scale: 1.000900
    test 161 line 32 toUtm8.lat: 79.584190
    test 162 line 32 toUtm8.lon: 16.367006
    test 163 line 33 toUtm8.easting: 3933015.267450
    test 164 line 33 toUtm8.northing: 7932373.909512
    test 165 line 33 toUtm8.convergence: 58.577424
    test 166 line 33 toUtm8.scale: 1.194811
    test 167 line 33 toUtm8.lat: 52.470664
    test 168 line 33 toUtm8.lon: 64.125580
    test 169 line 34 toUtm8.easting: 8598926.983213
    test 170 line 34 toUtm8.northing: 6214135.167503
    test 171 line 34 toUtm8.convergence: 52.612878
    test 172 line 34 toUtm8.scale: 2.051367
    test 173 line 34 toUtm8.lat: 23.702673
    test 174 line 34 toUtm8.lon: 72.630363
    test 175 line 35 toUtm8.easting: 6620553.333772
    test 176 line 35 toUtm8.northing: 6540527.122948
    test 177 line 35 toUtm8.convergence: 52.350140
    test 178 line 35 toUtm8.scale: 1.586614
    test 179 line 35 toUtm8.lat: 32.603520
    test 180 line 35 toUtm8.lon: 67.280123
    test 181 line 36 toUtm8.easting: 1515136.758292
    test 182 line 36 toUtm8.northing: 3858996.087537
    test 183 line 36 toUtm8.convergence: 9.225127
    test 184 line 36 toUtm8.scale: 1.028029
    test 185 line 36 toUtm8.lat: 33.776224
    test 186 line 36 toUtm8.lon: 16.280993
    test 187 line 37 toUtm8.easting: 479854.373445
    test 188 line 37 toUtm8.northing: 8980501.389896
    test 189 line 37 toUtm8.convergence: 25.021222
    test 190 line 37 toUtm8.scale: 1.002415
    test 191 line 37 toUtm8.lat: 79.932747
    test 192 line 37 toUtm8.lon: 25.363622
    test 193 line 38 toUtm8.easting: 5243446.564940
    test 194 line 38 toUtm8.northing: 140657.213960
    test 195 line 38 toUtm8.convergence: 0.862817
    test 196 line 38 toUtm8.scale: 1.360358
    test 197 line 38 toUtm8.lat: 0.935056
    test 198 line 38 toUtm8.lon: 42.538824
    test skipped (6): line 39 toUtm8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtm8.easting: 1202993.459158
    test 200 line 40 toUtm8.northing: 5557316.053599
    test 201 line 40 toUtm8.convergence: 12.579061
    test 202 line 40 toUtm8.scale: 1.017426
    test 203 line 40 toUtm8.lat: 48.979057
    test 204 line 40 toUtm8.lon: 16.474542
    test 205 line 41 toUtm8.easting: 1729088.710196
    test 206 line 41 toUtm8.northing: 7770874.289954
    test 207 line 41 toUtm8.convergence: 36.021783
    test 208 line 41 toUtm8.scale: 1.036397
    test 209 line 41 toUtm8.lat: 65.036016
    test 210 line 41 toUtm8.lon: 38.729091
    test 211 line 42 toUtm8.easting: 2437301.517425
    test 212 line 42 toUtm8.northing: 5539327.748318
    test 213 line 42 toUtm8.convergence: 23.461879
    test 214 line 42 toUtm8.scale: 1.073459
    test 215 line 42 toUtm8.lat: 45.510091
    test 216 line 42 toUtm8.lon: 31.303729
    test 217 line 43 toUtm8.easting: 3647186.135066
    test 218 line 43 toUtm8.northing: 2086412.330983
    test 219 line 43 toUtm8.convergence: 10.023991
    test 220 line 43 toUtm8.scale: 1.168707
    test 221 line 43 toUtm8.lat: 16.058010
    test 222 line 43 toUtm8.lon: 32.520026
    test 223 line 44 toUtm8.easting: 1818497.243556
    test 224 line 44 toUtm8.northing: 4275471.745057
    test 225 line 44 toUtm8.convergence: 12.499656
    test 226 line 44 toUtm8.scale: 1.040604
    test 227 line 44 toUtm8.lat: 36.845200
    test 228 line 44 toUtm8.lon: 20.282283
    test 229 line 45 toUtm8.easting: 3751304.113783
    test 230 line 45 toUtm8.northing: 5130454.001592
    test 231 line 45 toUtm8.convergence: 28.959707
    test 232 line 45 toUtm8.scale: 1.177681
    test 233 line 45 toUtm8.lat: 37.865481
    test 234 line 45 toUtm8.lon: 41.990402
    test 235 line 46 toUtm8.easting: 2616733.138544
    test 236 line 46 toUtm8.northing: 394644.463815
    test 237 line 46 toUtm8.convergence: 1.390425
    test 238 line 46 toUtm8.scale: 1.085595
    test 239 line 46 toUtm8.lat: 3.287272
    test 240 line 46 toUtm8.lon: 22.917604
    test 241 line 47 toUtm8.easting: 1756506.573942
    test 242 line 47 toUtm8.northing: 5570393.986394
    test 243 line 47 toUtm8.convergence: 17.897894
    test 244 line 47 toUtm8.scale: 1.037732
    test 245 line 47 toUtm8.lat: 47.813686
    test 246 line 47 toUtm8.lon: 23.545092
    test 247 line 48 toUtm8.easting: 8752461.894711
    test 248 line 48 toUtm8.northing: 6087728.152284
    test 249 line 48 toUtm8.convergence: 51.628465
    test 250 line 48 toUtm8.scale: 2.095465
    test 251 line 48 toUtm8.lat: 22.836853
    test 252 line 48 toUtm8.lon: 72.604385
    test 253 line 49 toUtm8.easting: 1309272.216432
    test 254 line 49 toUtm8.northing: 59520.028899
    test 255 line 49 toUtm8.convergence: 0.109069
    test 256 line 49 toUtm8.scale: 1.020897
    test 257 line 49 toUtm8.lat: 0.527262
    test 258 line 49 toUtm8.lon: 11.684209
    test 259 line 50 toUtm8.easting: 328652.277129
    test 260 line 50 toUtm8.northing: 2233043.958874
    test 261 line 50 toUtm8.convergence: 1.084863
    test 262 line 50 toUtm8.scale: 1.000935
    test 263 line 50 toUtm8.lat: 20.166742
    test 264 line 50 toUtm8.lon: 3.143948
    test skipped (7): line 51 toUtm8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'
    test skipped (8): line 52 toUtm8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtm8.easting: 796987.281104
    test 266 line 53 toUtm8.northing: 7677446.357675
    test 267 line 53 toUtm8.convergence: 18.084472
    test 268 line 53 toUtm8.scale: 1.007381
    test 269 line 53 toUtm8.lat: 68.071020
    test 270 line 53 toUtm8.lon: 19.392823
    test skipped (9): line 54 toUtm8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtm8.easting: 7087225.330906
    test 272 line 55 toUtm8.northing: 8382823.855822
    test 273 line 55 toUtm8.convergence: 72.253756
    test 274 line 55 toUtm8.scale: 1.678070
    test 275 line 55 toUtm8.lat: 35.074753
    test 276 line 55 toUtm8.lon: 79.496003
    test 277 line 56 toUtm8.easting: 5090358.125724
    test 278 line 56 toUtm8.northing: 4318294.133489
    test 279 line 56 toUtm8.convergence: 28.266280
    test 280 line 56 toUtm8.scale: 1.336264
    test 281 line 56 toUtm8.lat: 28.078790
    test 282 line 56 toUtm8.lon: 48.684350
    test skipped (10): line 57 toUtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtm8.easting: 3447670.550785
    test 284 line 58 toUtm8.northing: 3680238.888223
    test 285 line 58 toUtm8.convergence: 17.934948
    test 286 line 58 toUtm8.scale: 1.149831
    test 287 line 58 toUtm8.lat: 28.473948
    test 288 line 58 toUtm8.lon: 34.127306
    test 289 line 59 toUtm8.easting: 3396522.906798
    test 290 line 59 toUtm8.northing: 8093659.687593
    test 291 line 59 toUtm8.convergence: 57.747117
    test 292 line 59 toUtm8.scale: 1.144006
    test 293 line 59 toUtm8.lat: 56.629354
    test 294 line 59 toUtm8.lon: 62.196474
    test 295 line 60 toUtm8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtm8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtm8.convergence: 14.210358
    test 298 line 60 toUtm8.scale: 3.048347
    test 299 line 60 toUtm8.lat: 4.747762
    test 300 line 60 toUtm8.lon: 70.932555
    test 301 line 61 toUtm8.easting: 6808805.230950
    test 302 line 61 toUtm8.northing: 8044779.777369
    test 303 line 61 toUtm8.convergence: 68.242008
    test 304 line 61 toUtm8.scale: 1.621464
    test 305 line 61 toUtm8.lat: 35.882113
    test 306 line 61 toUtm8.lon: 76.741849
    test 307 line 62 toUtm8.easting: 2306021.556506
    test 308 line 62 toUtm8.northing: 757191.592866
    test 309 line 62 toUtm8.convergence: 2.385686
    test 310 line 62 toUtm8.scale: 1.066159
    test 311 line 62 toUtm8.lat: 6.420705
    test 312 line 62 toUtm8.lon: 20.416028
    test 313 line 63 toUtm8.easting: 1547406.313862
    test 314 line 63 toUtm8.northing: 6048712.751824
    test 315 line 63 toUtm8.convergence: 18.474372
    test 316 line 63 toUtm8.scale: 1.029123
    test 317 line 63 toUtm8.lat: 52.335248
    test 318 line 63 toUtm8.lon: 22.879294
    test 319 line 64 toUtm8.easting: 2430467.650383
    test 320 line 64 toUtm8.northing: 7557167.613972
    test 321 line 64 toUtm8.convergence: 42.110021
    test 322 line 64 toUtm8.scale: 1.072759
    test 323 line 64 toUtm8.lat: 59.846391
    test 324 line 64 toUtm8.lon: 46.262536
    test 325 line 65 toUtm8.easting: 2334053.905830
    test 326 line 65 toUtm8.northing: 1948076.966582
    test 327 line 65 toUtm8.convergence: 6.353185
    test 328 line 65 toUtm8.scale: 1.067733
    test 329 line 65 toUtm8.lat: 16.461790
    test 330 line 65 toUtm8.lon: 21.433269
    test 331 line 66 toUtm8.easting: 5564175.186737
    test 332 line 66 toUtm8.northing: 1836851.660412
    test 333 line 66 toUtm8.convergence: 11.870682
    test 334 line 66 toUtm8.scale: 1.408265
    test 335 line 66 toUtm8.lat: 11.707905
    test 336 line 66 toUtm8.lon: 45.827075
    test 337 line 67 toUtm8.easting: 6118505.590359
    test 338 line 67 toUtm8.northing: 7631684.552421
    test 339 line 67 toUtm8.convergence: 62.477323
    test 340 line 67 toUtm8.scale: 1.493420
    test 341 line 67 toUtm8.lat: 38.519075
    test 342 line 67 toUtm8.lon: 71.935918
    test skipped (11): line 68 toUtm8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtm8.easting: 36187.342415
    test 344 line 69 toUtm8.northing: 2142565.324802
    test 345 line 69 toUtm8.convergence: 0.114334
    test 346 line 69 toUtm8.scale: 0.999616
    test 347 line 69 toUtm8.lat: 19.376880
    test 348 line 69 toUtm8.lon: 0.344605
    test 349 line 70 toUtm8.easting: 2380328.546851
    test 350 line 70 toUtm8.northing: 8440109.872384
    test 351 line 70 toUtm8.convergence: 55.076067
    test 352 line 70 toUtm8.scale: 1.069658
    test 353 line 70 toUtm8.lat: 65.075805
    test 354 line 70 toUtm8.lon: 57.653438
    test 355 line 71 toUtm8.easting: 582511.608826
    test 356 line 71 toUtm8.northing: 8876047.217071
    test 357 line 71 toUtm8.convergence: 27.133300
    test 358 line 71 toUtm8.scale: 1.003749
    test 359 line 71 toUtm8.lat: 78.691870
    test 360 line 71 toUtm8.lon: 27.591736
    test 361 line 72 toUtm8.easting: 899441.350477
    test 362 line 72 toUtm8.northing: 4582046.430516
    test 363 line 72 toUtm8.convergence: 7.031211
    test 364 line 72 toUtm8.scale: 1.009573
    test 365 line 72 toUtm8.lat: 40.893022
    test 366 line 72 toUtm8.lon: 10.668804
    test skipped (12): line 73 toUtm8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtm8.easting: 6701004.587204
    test 368 line 74 toUtm8.northing: 2954368.258231
    test 369 line 74 toUtm8.convergence: 21.560153
    test 370 line 74 toUtm8.scale: 1.608554
    test 371 line 74 toUtm8.lat: 16.208377
    test 372 line 74 toUtm8.lon: 54.494282
    test 373 line 75 toUtm8.easting: 454986.218897
    test 374 line 75 toUtm8.northing: 4885087.887884
    test 375 line 75 toUtm8.convergence: 3.945648
    test 376 line 75 toUtm8.scale: 1.002147
    test 377 line 75 toUtm8.lat: 43.977936
    test 378 line 75 toUtm8.lon: 5.672541
    test skipped (13): line 76 toUtm8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtm8.easting: 1547627.594741
    test 380 line 77 toUtm8.northing: 6036584.538347
    test 381 line 77 toUtm8.convergence: 18.407629
    test 382 line 77 toUtm8.scale: 1.029132
    test 383 line 77 toUtm8.lat: 52.234165
    test 384 line 77 toUtm8.lon: 22.827655
    test 385 line 78 toUtm8.easting: 5221488.778597
    test 386 line 78 toUtm8.northing: 1762592.044392
    test 387 line 78 toUtm8.convergence: 10.927880
    test 388 line 78 toUtm8.scale: 1.356721
    test 389 line 78 toUtm8.lat: 11.674646
    test 390 line 78 toUtm8.lon: 43.500147
    test 391 line 79 toUtm8.easting: 4880570.297161
    test 392 line 79 toUtm8.northing: 3325433.988867
    test 393 line 79 toUtm8.convergence: 20.469862
    test 394 line 79 toUtm8.scale: 1.308476
    test 395 line 79 toUtm8.lat: 22.492753
    test 396 line 79 toUtm8.lon: 44.179153
    test skipped (14): line 80 toUtm8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtm8.easting: 71519.450458
    test 398 line 81 toUtm8.northing: 3654740.444852
    test 399 line 81 toUtm8.convergence: 0.417448
    test 400 line 81 toUtm8.scale: 0.999663
    test 401 line 81 toUtm8.lat: 33.028802
    test 402 line 81 toUtm8.lon: 0.765843
    test 403 line 82 toUtm8.easting: 4152797.795220
    test 404 line 82 toUtm8.northing: 7823098.502751
    test 405 line 82 toUtm8.convergence: 58.238901
    test 406 line 82 toUtm8.scale: 1.218052
    test 407 line 82 toUtm8.lat: 50.649195
    test 408 line 82 toUtm8.lon: 64.389076
    test 409 line 83 toUtm8.easting: 2926725.707639
    test 410 line 83 toUtm8.northing: 7904918.072844
    test 411 line 83 toUtm8.convergence: 51.592748
    test 412 line 83 toUtm8.scale: 1.106206
    test 413 line 83 toUtm8.lat: 58.820640
    test 414 line 83 toUtm8.lon: 55.841048
    test 415 line 84 toUtm8.easting: 1325509.113869
    test 416 line 84 toUtm8.northing: 9675214.948213
    test 417 line 84 toUtm8.convergence: 76.116213
    test 418 line 84 toUtm8.scale: 1.021136
    test 419 line 84 toUtm8.lat: 77.865762
    test 420 line 84 toUtm8.lon: 76.414618
    test 421 line 85 toUtm8.easting: 3045296.448926
    test 422 line 85 toUtm8.northing: 542153.443280
    test 423 line 85 toUtm8.convergence: 2.185095
    test 424 line 85 toUtm8.scale: 1.116664
    test 425 line 85 toUtm8.lat: 4.389639
    test 426 line 85 toUtm8.lon: 26.458976
    test 427 line 86 toUtm8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtm8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtm8.convergence: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtm8.scale: 3.267256
    test 431 line 86 toUtm8.lat: 13.924448
    test 432 line 86 toUtm8.lon: 79.017873
    test 433 line 87 toUtm8.easting: 8891099.704936
    test 434 line 87 toUtm8.northing: 162160.142227
    test 435 line 87 toUtm8.convergence: 1.312094
    test 436 line 87 toUtm8.scale: 2.157363
    test 437 line 87 toUtm8.lat: 0.679713
    test 438 line 87 toUtm8.lon: 62.036792
    test 439 line 88 toUtm8.easting: 4784814.214449
    test 440 line 88 toUtm8.northing: 2984497.432580
    test 441 line 88 toUtm8.convergence: 17.946545
    test 442 line 88 toUtm8.scale: 1.296116
    test 443 line 88 toUtm8.lat: 20.478281
    test 444 line 88 toUtm8.lon: 42.678234
    test 445 line 89 toUtm8.easting: 1772074.682154
    test 446 line 89 toUtm8.northing: 9491552.560143
    test 447 line 89 toUtm8.convergence: 73.634830
    test 448 line 89 toUtm8.scale: 1.038202
    test 449 line 89 toUtm8.lat: 73.695703
    test 450 line 89 toUtm8.lon: 74.259097
    test 451 line 90 toUtm8.easting: 1907649.782106
    test 452 line 90 toUtm8.northing: 6994232.429379
    test 453 line 90 toUtm8.convergence: 29.718929
    test 454 line 90 toUtm8.scale: 1.044503
    test 455 line 90 toUtm8.lat: 58.569370
    test 456 line 90 toUtm8.lon: 33.777549
    test 457 line 91 toUtm8.easting: 2084423.818962
    test 458 line 91 toUtm8.northing: 2211816.035619
    test 459 line 91 toUtm8.convergence: 6.556448
    test 460 line 91 toUtm8.scale: 1.053793
    test 461 line 91 toUtm8.lat: 18.933881
    test 462 line 91 toUtm8.lon: 19.492695
    test 463 line 92 toUtm8.easting: 1064373.671729
    test 464 line 92 toUtm8.northing: 7812482.547461
    test 465 line 92 toUtm8.convergence: 24.874124
    test 466 line 92 toUtm8.scale: 1.013490
    test 467 line 92 toUtm8.lat: 68.317934
    test 468 line 92 toUtm8.lon: 26.515687
    test skipped (15): line 93 toUtm8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtm8.easting: 6398096.677297
    test 470 line 94 toUtm8.northing: 4410894.752104
    test 471 line 94 toUtm8.convergence: 32.558023
    test 472 line 94 toUtm8.scale: 1.548004
    test 473 line 94 toUtm8.lat: 24.411298
    test 474 line 94 toUtm8.lon: 56.881823
    test 475 line 95 toUtm8.easting: 3138623.300415
    test 476 line 95 toUtm8.northing: 3082960.600798
    test 477 line 95 toUtm8.convergence: 13.557672
    test 478 line 95 toUtm8.scale: 1.123724
    test 479 line 95 toUtm8.lat: 24.571871
    test 480 line 95 toUtm8.lon: 30.073097
    test 481 line 96 toUtm8.easting: 2748325.794651
    test 482 line 96 toUtm8.northing: 4202811.912668
    test 483 line 96 toUtm8.convergence: 17.578706
    test 484 line 96 toUtm8.scale: 1.094102
    test 485 line 96 toUtm8.lat: 34.202576
    test 486 line 96 toUtm8.lon: 29.383166
    test 487 line 97 toUtm8.easting: 6677830.630367
    test 488 line 97 toUtm8.northing: 5350071.837395
    test 489 line 97 toUtm8.convergence: 41.306641
    test 490 line 97 toUtm8.scale: 1.599774
    test 491 line 97 toUtm8.lat: 27.756285
    test 492 line 97 toUtm8.lon: 61.881905
    test 493 line 98 toUtm8.easting: 5941536.667431
    test 494 line 98 toUtm8.northing: 3293112.175140
    test 495 line 98 toUtm8.convergence: 22.752845
    test 496 line 98 toUtm8.scale: 1.468473
    test 497 line 98 toUtm8.lat: 19.742270
    test 498 line 98 toUtm8.lon: 50.957821
    test 499 line 99 toUtm8.easting: 3152481.792567
    test 500 line 99 toUtm8.northing: 5903048.837978
    test 501 line 99 toUtm8.convergence: 31.494606
    test 502 line 99 toUtm8.scale: 1.124085
    test 503 line 99 toUtm8.lat: 45.453582
    test 504 line 99 toUtm8.lon: 40.659833
    test 505 line 100 toUtm8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtm8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtm8.convergence: 21.965869
    test 508 line 100 toUtm8.scale: 2.700296
    test 509 line 100 toUtm8.lat: 8.322144
    test 510 line 100 toUtm8.lon: 69.488157
    test 511 line 101 toUtm8.easting: 1964010.778021
    test 512 line 101 toUtm8.northing: 5634042.923056
    test 513 line 101 toUtm8.convergence: 20.117800
    test 514 line 101 toUtm8.scale: 1.047344
    test 515 line 101 toUtm8.lat: 47.749831
    test 516 line 101 toUtm8.lon: 26.322002
    test 517 line 102 toUtm8.easting: 2065306.424934
    test 518 line 102 toUtm8.northing: 2135008.468651
    test 519 line 102 toUtm8.convergence: 6.258981
    test 520 line 102 toUtm8.scale: 1.052800
    test 521 line 102 toUtm8.lat: 18.297493
    test 522 line 102 toUtm8.lon: 19.244669
    test 523 line 103 toUtm8.easting: 5127738.132976
    test 524 line 103 toUtm8.northing: 6793804.304411
    test 525 line 103 toUtm8.convergence: 50.557915
    test 526 line 103 toUtm8.scale: 1.339412
    test 527 line 103 toUtm8.lat: 40.834541
    test 528 line 103 toUtm8.lon: 61.650750
    test 529 line 104 toUtm8.easting: 8385525.148166
    test 530 line 104 toUtm8.northing: 6924932.344306
    test 531 line 104 toUtm8.convergence: 59.087561
    test 532 line 104 toUtm8.scale: 1.990364
    test 533 line 104 toUtm8.lat: 26.273247
    test 534 line 104 toUtm8.lon: 74.926694
    test 535 line 105 toUtm8.easting: 2297510.791909
    test 536 line 105 toUtm8.northing: 2805666.962834
    test 537 line 105 toUtm8.convergence: 9.301553
    test 538 line 105 toUtm8.scale: 1.065508
    test 539 line 105 toUtm8.lat: 23.698347
    test 540 line 105 toUtm8.lon: 22.155657
    test skipped (16): line 106 toUtm8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtm8.easting: 317518.455546
    test 542 line 107 toUtm8.northing: 1097517.583745
    test 543 line 107 toUtm8.convergence: 0.499004
    test 544 line 107 toUtm8.scale: 1.000848
    test 545 line 107 toUtm8.lat: 9.916091
    test 546 line 107 toUtm8.lon: 2.895277
    test 547 line 108 toUtm8.easting: 3856035.184888
    test 548 line 108 toUtm8.northing: 9141364.450290
    test 549 line 108 toUtm8.convergence: 75.972763
    test 550 line 108 toUtm8.scale: 1.186786
    test 551 line 108 toUtm8.lat: 56.553876
    test 552 line 108 toUtm8.lon: 78.215077
    test 553 line 109 toUtm8.easting: 1457484.942823
    test 554 line 109 toUtm8.northing: 9385297.101973
    test 555 line 109 toUtm8.convergence: 66.784662
    test 556 line 109 toUtm8.scale: 1.025660
    test 557 line 109 toUtm8.lat: 75.957631
    test 558 line 109 toUtm8.lon: 67.407383
    test 559 line 110 toUtm8.easting: 1304934.901841
    test 560 line 110 toUtm8.northing: 3604655.155715
    test 561 line 110 toUtm8.convergence: 7.343989
    test 562 line 110 toUtm8.scale: 1.020672
    test 563 line 110 toUtm8.lat: 31.826531
    test 564 line 110 toUtm8.lon: 13.731050
    test 565 line 111 toUtm8.easting: 1399093.491792
    test 566 line 111 toUtm8.northing: 8314607.120342
    test 567 line 111 toUtm8.convergence: 38.630161
    test 568 line 111 toUtm8.scale: 1.023625
    test 569 line 111 toUtm8.lat: 70.542985
    test 570 line 111 toUtm8.lon: 40.282055
    test 571 line 112 toUtm8.easting: 356983.618540
    test 572 line 112 toUtm8.northing: 4282309.048994
    test 573 line 112 toUtm8.convergence: 2.561485
    test 574 line 112 toUtm8.scale: 1.001170
    test 575 line 112 toUtm8.lat: 38.617487
    test 576 line 112 toUtm8.lon: 4.099838
    test 577 line 113 toUtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtm8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtm8.convergence: 12.752154
    test 580 line 113 toUtm8.scale: 2.511357
    test 581 line 113 toUtm8.lat: 5.389447
    test 582 line 113 toUtm8.lon: 66.729612
    test 583 line 114 toUtm8.easting: 6367592.504007
    test 584 line 114 toUtm8.northing: 1200437.077672
    test 585 line 114 toUtm8.convergence: 8.338041
    test 586 line 114 toUtm8.scale: 1.546210
    test 587 line 114 toUtm8.lat: 6.995168
    test 588 line 114 toUtm8.lon: 50.014763
    test 589 line 115 toUtm8.easting: 4391263.676460
    test 590 line 115 toUtm8.northing: 6325455.989408
    test 591 line 115 toUtm8.convergence: 42.653541
    test 592 line 115 toUtm8.scale: 1.245560
    test 593 line 115 toUtm8.lat: 42.321894
    test 594 line 115 toUtm8.lon: 53.784040
    test 595 line 116 toUtm8.easting: 6209880.527527
    test 596 line 116 toUtm8.northing: 2154754.449747
    test 597 line 116 toUtm8.convergence: 14.919512
    test 598 line 116 toUtm8.scale: 1.516560
    test 599 line 116 toUtm8.lat: 12.698515
    test 600 line 116 toUtm8.lon: 50.242047
    test 601 line 117 toUtm8.easting: 1507053.688772
    test 602 line 117 toUtm8.northing: 6261383.513280
    test 603 line 117 toUtm8.convergence: 19.280373
    test 604 line 117 toUtm8.scale: 1.027584
    test 605 line 117 toUtm8.lat: 54.207636
    test 606 line 117 toUtm8.lon: 23.325731
    test 607 line 118 toUtm8.easting: 8332725.003777
    test 608 line 118 toUtm8.northing: 3002712.329753
    test 609 line 118 toUtm8.convergence: 24.059212
    test 610 line 118 toUtm8.scale: 1.990450
    test 611 line 118 toUtm8.lat: 13.224787
    test 612 line 118 toUtm8.lon: 62.426698
    test 613 line 119 toUtm8.easting: 3958910.085235
    test 614 line 119 toUtm8.northing: 3462284.926102
    test 615 line 119 toUtm8.convergence: 18.546398
    test 616 line 119 toUtm8.scale: 1.199351
    test 617 line 119 toUtm8.lat: 25.650282
    test 618 line 119 toUtm8.lon: 37.710391
    test skipped (17): line 120 toUtm8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtm8.easting: 496148.253731
    test 620 line 121 toUtm8.northing: 6388503.365043
    test 621 line 121 toUtm8.convergence: 6.970955
    test 622 line 121 toUtm8.scale: 1.002620
    test 623 line 121 toUtm8.lat: 57.367533
    test 624 line 121 toUtm8.lon: 8.260866
    test 625 line 122 toUtm8.easting: 7375792.085850
    test 626 line 122 toUtm8.northing: 5544624.072155
    test 627 line 122 toUtm8.convergence: 44.510851
    test 628 line 122 toUtm8.scale: 1.745898
    test 629 line 122 toUtm8.lat: 25.958757
    test 630 line 122 toUtm8.lon: 65.760477
    test 631 line 123 toUtm8.easting: 2826258.041979
    test 632 line 123 toUtm8.northing: 5167759.816959
    test 633 line 123 toUtm8.convergence: 23.783897
    test 634 line 123 toUtm8.scale: 1.099415
    test 635 line 123 toUtm8.lat: 41.395848
    test 636 line 123 toUtm8.lon: 33.661790
    test 637 line 124 toUtm8.easting: 3958563.378851
    test 638 line 124 toUtm8.northing: 8499923.231243
    test 639 line 124 toUtm8.convergence: 66.570945
    test 640 line 124 toUtm8.scale: 1.197296
    test 641 line 124 toUtm8.lat: 54.266617
    test 642 line 124 toUtm8.lon: 70.602199
    test 643 line 125 toUtm8.easting: 4408189.533462
    test 644 line 125 toUtm8.northing: 8046312.003642
    test 645 line 125 toUtm8.convergence: 62.216959
    test 646 line 125 toUtm8.scale: 1.246750
    test 647 line 125 toUtm8.lat: 49.840393
    test 648 line 125 toUtm8.lon: 68.036728
    test 649 line 126 toUtm8.easting: 3629225.627512
    test 650 line 126 toUtm8.northing: 6371258.454645
    test 651 line 126 toUtm8.convergence: 38.881675
    test 652 line 126 toUtm8.scale: 1.165511
    test 653 line 126 toUtm8.lat: 46.306035
    test 654 line 126 toUtm8.lon: 48.085828
    test 655 line 127 toUtm8.easting: 602838.450710
    test 656 line 127 toUtm8.northing: 4851370.637205
    test 657 line 127 toUtm8.convergence: 5.160395
    test 658 line 127 toUtm8.scale: 1.004073
    test 659 line 127 toUtm8.lat: 43.570988
    test 660 line 127 toUtm8.lon: 7.464494
    test 661 line 128 toUtm8.easting: 764616.665051
    test 662 line 128 toUtm8.northing: 2164299.337945
    test 663 line 128 toUtm8.convergence: 2.429300
    test 664 line 128 toUtm8.scale: 1.006835
    test 665 line 128 toUtm8.lat: 19.427290
    test 666 line 128 toUtm8.lon: 7.268247
    test 667 line 129 toUtm8.easting: 5048953.021931
    test 668 line 129 toUtm8.northing: 1885974.057398
    test 669 line 129 toUtm8.convergence: 11.459804
    test 670 line 129 toUtm8.scale: 1.332207
    test 671 line 129 toUtm8.lat: 12.713794
    test 672 line 129 toUtm8.lon: 42.507018
    test 673 line 130 toUtm8.easting: 2293996.601155
    test 674 line 130 toUtm8.northing: 2392408.644221
    test 675 line 130 toUtm8.convergence: 7.791838
    test 676 line 130 toUtm8.scale: 1.065348
    test 677 line 130 toUtm8.lat: 20.238782
    test 678 line 130 toUtm8.lon: 21.566068
    test 679 line 131 toUtm8.easting: 1530603.839418
    test 680 line 131 toUtm8.northing: 7287841.459898
    test 681 line 131 toUtm8.convergence: 27.502921
    test 682 line 131 toUtm8.scale: 1.028416
    test 683 line 131 toUtm8.lat: 62.367847
    test 684 line 131 toUtm8.lon: 30.438849
    test 685 line 132 toUtm8.easting: 2660000.093152
    test 686 line 132 toUtm8.northing: 5161982.213248
    test 687 line 132 toUtm8.convergence: 22.629836
    test 688 line 132 toUtm8.scale: 1.087851
    test 689 line 132 toUtm8.lat: 41.891569
    test 690 line 132 toUtm8.lon: 31.959547
    test 691 line 133 toUtm8.easting: 5037478.329414
    test 692 line 133 toUtm8.northing: 8768172.379908
    test 693 line 133 toUtm8.convergence: 73.511182
    test 694 line 133 toUtm8.scale: 1.325919
    test 695 line 133 toUtm8.lat: 47.664248
    test 696 line 133 toUtm8.lon: 77.630062
    test 697 line 134 toUtm8.easting: 2289650.957799
    test 698 line 134 toUtm8.northing: 8784328.593607
    test 699 line 134 toUtm8.convergence: 60.786067
    test 700 line 134 toUtm8.scale: 1.064346
    test 701 line 134 toUtm8.lat: 67.259559
    test 702 line 134 toUtm8.lon: 62.715293
    test 703 line 135 toUtm8.easting: 647913.889744
    test 704 line 135 toUtm8.northing: 6742382.228217
    test 705 line 135 toUtm8.convergence: 10.252667
    test 706 line 135 toUtm8.scale: 1.004748
    test 707 line 135 toUtm8.lat: 60.295381
    test 708 line 135 toUtm8.lon: 11.763097
    test 709 line 136 toUtm8.easting: 1118372.698566
    test 710 line 136 toUtm8.northing: 9040627.942263
    test 711 line 136 toUtm8.convergence: 48.936803
    test 712 line 136 toUtm8.scale: 1.014920
    test 713 line 136 toUtm8.lat: 76.878914
    test 714 line 136 toUtm8.lon: 49.685773
    test 715 line 137 toUtm8.easting: 440696.510070
    test 716 line 137 toUtm8.northing: 5500355.826297
    test 717 line 137 toUtm8.convergence: 4.636104
    test 718 line 137 toUtm8.scale: 1.001986
    test 719 line 137 toUtm8.lat: 49.495349
    test 720 line 137 toUtm8.lon: 6.087551
    test 721 line 138 toUtm8.easting: 601728.149727
    test 722 line 138 toUtm8.northing: 9095352.048149
    test 723 line 138 toUtm8.convergence: 33.435771
    test 724 line 138 toUtm8.scale: 1.004027
    test 725 line 138 toUtm8.lat: 80.297265
    test 726 line 138 toUtm8.lon: 33.816372
    test 727 line 139 toUtm8.easting: 3481444.777827
    test 728 line 139 toUtm8.northing: 291665.708749
    test 729 line 139 toUtm8.convergence: 1.314726
    test 730 line 139 toUtm8.scale: 1.153534
    test 731 line 139 toUtm8.lat: 2.286437
    test 732 line 139 toUtm8.lon: 29.855149
    test 733 line 140 toUtm8.easting: 3515304.901524
    test 734 line 140 toUtm8.northing: 1443981.882918
    test 735 line 140 toUtm8.convergence: 6.641638
    test 736 line 140 toUtm8.scale: 1.156509
    test 737 line 140 toUtm8.lat: 11.264457
    test 738 line 140 toUtm8.lon: 30.743907
    test 739 line 141 toUtm8.easting: 160012.186959
    test 740 line 141 toUtm8.northing: 3922609.253231
    test 741 line 141 toUtm8.convergence: 1.022225
    test 742 line 141 toUtm8.scale: 0.999916
    test 743 line 141 toUtm8.lat: 35.434073
    test 744 line 141 toUtm8.lon: 1.762795
    test 745 line 142 toUtm8.easting: 4163744.245622
    test 746 line 142 toUtm8.northing: 936884.674804
    test 747 line 142 toUtm8.convergence: 4.892559
    test 748 line 142 toUtm8.scale: 1.222164
    test 749 line 142 toUtm8.lat: 6.923695
    test 750 line 142 toUtm8.lon: 35.289456
    test 751 line 143 toUtm8.easting: 6155200.017926
    test 752 line 143 toUtm8.northing: 6926306.628390
    test 753 line 143 toUtm8.convergence: 55.103258
    test 754 line 143 toUtm8.scale: 1.500556
    test 755 line 143 toUtm8.lat: 36.129672
    test 756 line 143 toUtm8.lon: 67.533176
    test skipped (18): line 144 toUtm8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'
    test skipped (19): line 145 toUtm8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtm8.easting: 3173034.802372
    test 758 line 146 toUtm8.northing: 7263421.942957
    test 759 line 146 toUtm8.convergence: 45.215808
    test 760 line 146 toUtm8.scale: 1.125410
    test 761 line 146 toUtm8.lat: 53.907276
    test 762 line 146 toUtm8.lon: 51.252904
    test skipped (20): line 147 toUtm8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtm8.easting: 2415561.483230
    test 764 line 148 toUtm8.northing: 8813225.217097
    test 765 line 148 toUtm8.convergence: 62.548978
    test 766 line 148 toUtm8.scale: 1.071748
    test 767 line 148 toUtm8.lat: 66.444100
    test 768 line 148 toUtm8.lon: 64.532960
    test 769 line 149 toUtm8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtm8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtm8.convergence: 14.838483
    test 772 line 149 toUtm8.scale: 2.380716
    test 773 line 149 toUtm8.lat: 6.670965
    test 774 line 149 toUtm8.lon: 65.660408
    test 775 line 150 toUtm8.easting: 727939.438391
    test 776 line 150 toUtm8.northing: 3684363.236810
    test 777 line 150 toUtm8.convergence: 4.266227
    test 778 line 150 toUtm8.scale: 1.006140
    test 779 line 150 toUtm8.lat: 33.054057
    test 780 line 150 toUtm8.lon: 7.787458
    test 781 line 151 toUtm8.easting: 1250765.991085
    test 782 line 151 toUtm8.northing: 792869.242719
    test 783 line 151 toUtm8.convergence: 1.396497
    test 784 line 151 toUtm8.scale: 1.019026
    test 785 line 151 toUtm8.lat: 7.035525
    test 786 line 151 toUtm8.lon: 11.253707
    test 787 line 152 toUtm8.easting: 710421.705887
    test 788 line 152 toUtm8.northing: 5019406.075928
    test 789 line 152 toUtm8.convergence: 6.393949
    test 790 line 152 toUtm8.scale: 1.005812
    test 791 line 152 toUtm8.lat: 44.971340
    test 792 line 152 toUtm8.lon: 9.009304
    test 793 line 153 toUtm8.easting: 4600995.074643
    test 794 line 153 toUtm8.northing: 4505712.084593
    test 795 line 153 toUtm8.convergence: 27.997458
    test 796 line 153 toUtm8.scale: 1.271841
    test 797 line 153 toUtm8.lat: 30.821397
    test 798 line 153 toUtm8.lon: 45.970577
    test 799 line 154 toUtm8.easting: 557642.627782
    test 800 line 154 toUtm8.northing: 7006911.251644
    test 801 line 154 toUtm8.convergence: 9.769903
    test 802 line 154 toUtm8.scale: 1.003411
    test 803 line 154 toUtm8.lat: 62.763886
    test 804 line 154 toUtm8.lon: 10.960144
    test 805 line 155 toUtm8.easting: 4635062.294291
    test 806 line 155 toUtm8.northing: 2702556.153311
    test 807 line 155 toUtm8.convergence: 15.779547
    test 808 line 155 toUtm8.scale: 1.277178
    test 809 line 155 toUtm8.lat: 18.888611
    test 810 line 155 toUtm8.lon: 41.009871
    test skipped (21): line 156 toUtm8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtm8.easting: 882126.661736
    test 812 line 157 toUtm8.northing: 7947612.369506
    test 813 line 157 toUtm8.convergence: 22.429487
    test 814 line 157 toUtm8.scale: 1.009132
    test 815 line 157 toUtm8.lat: 70.063902
    test 816 line 157 toUtm8.lon: 23.705255
    test skipped (22): line 158 toUtm8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtm8.easting: 6500508.399850
    test 818 line 159 toUtm8.northing: 6956476.342368
    test 819 line 159 toUtm8.convergence: 56.237116
    test 820 line 159 toUtm8.scale: 1.563162
    test 821 line 159 toUtm8.lat: 34.551257
    test 822 line 159 toUtm8.lon: 69.111091
    test 823 line 160 toUtm8.easting: 3884036.641314
    test 824 line 160 toUtm8.northing: 6890167.411733
    test 825 line 160 toUtm8.convergence: 45.760130
    test 826 line 160 toUtm8.scale: 1.190167
    test 827 line 160 toUtm8.lat: 47.929051
    test 828 line 160 toUtm8.lon: 54.103418
    test 829 line 161 toUtm8.easting: 217855.546078
    test 830 line 161 toUtm8.northing: 6184108.122568
    test 831 line 161 toUtm8.convergence: 2.870993
    test 832 line 161 toUtm8.scale: 1.000182
    test 833 line 161 toUtm8.lat: 55.753536
    test 834 line 161 toUtm8.lon: 3.471798
    test skipped (23): line 162 toUtm8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtm8.easting: 3469855.989805
    test 836 line 163 toUtm8.northing: 7723193.799228
    test 837 line 163 toUtm8.convergence: 53.114700
    test 838 line 163 toUtm8.scale: 1.150540
    test 839 line 163 toUtm8.lat: 54.510125
    test 840 line 163 toUtm8.lon: 58.556056
    test skipped (24): line 164 toUtm8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtm8.easting: 5798639.662224
    test 842 line 165 toUtm8.northing: 5305387.640916
    test 843 line 165 toUtm8.convergence: 38.617257
    test 844 line 165 toUtm8.scale: 1.442263
    test 845 line 165 toUtm8.lat: 30.911943
    test 846 line 165 toUtm8.lon: 57.114102
    test 847 line 166 toUtm8.easting: 9464.934388
    test 848 line 166 toUtm8.northing: 6489121.624944
    test 849 line 166 toUtm8.convergence: 0.138696
    test 850 line 166 toUtm8.scale: 0.999601
    test 851 line 166 toUtm8.lat: 58.542493
    test 852 line 166 toUtm8.lon: 0.162593
    test skipped (25): line 167 toUtm8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtm8.easting: 2719653.543469
    test 854 line 168 toUtm8.northing: 9362389.163495
    test 855 line 168 toUtm8.convergence: 76.049670
    test 856 line 168 toUtm8.scale: 1.091315
    test 857 line 168 toUtm8.lat: 65.692275
    test 858 line 168 toUtm8.lon: 77.241377
    test 859 line 169 toUtm8.easting: 4845341.924698
    test 860 line 169 toUtm8.northing: 8710522.326901
    test 861 line 169 toUtm8.convergence: 72.320942
    test 862 line 169 toUtm8.scale: 1.300382
    test 863 line 169 toUtm8.lat: 48.806211
    test 864 line 169 toUtm8.lon: 76.486365
    test skipped (26): line 170 toUtm8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtm8.easting: 7074299.823000
    test 866 line 171 toUtm8.northing: 1648736.065055
    test 867 line 171 toUtm8.convergence: 12.145925
    test 868 line 171 toUtm8.scale: 1.687551
    test 869 line 171 toUtm8.lat: 8.766053
    test 870 line 171 toUtm8.lon: 54.367539
    test 871 line 172 toUtm8.easting: 3689072.579308
    test 872 line 172 toUtm8.northing: 2230802.665211
    test 873 line 172 toUtm8.convergence: 10.856248
    test 874 line 172 toUtm8.scale: 1.172689
    test 875 line 172 toUtm8.lat: 17.095495
    test 876 line 172 toUtm8.lon: 33.059128
    test 877 line 173 toUtm8.easting: 8102565.885587
    test 878 line 173 toUtm8.northing: 5167396.617580
    test 879 line 173 toUtm8.convergence: 42.324886
    test 880 line 173 toUtm8.scale: 1.921927
    test 881 line 173 toUtm8.lat: 22.142861
    test 882 line 173 toUtm8.lon: 67.200684
    test 883 line 174 toUtm8.easting: 8181271.353564
    test 884 line 174 toUtm8.northing: 4425436.547185
    test 885 line 174 toUtm8.convergence: 35.900845
    test 886 line 174 toUtm8.scale: 1.945017
    test 887 line 174 toUtm8.lat: 19.222623
    test 888 line 174 toUtm8.lon: 65.180785
    test 889 line 175 toUtm8.easting: 767067.394003
    test 890 line 175 toUtm8.northing: 3701745.857296
    test 891 line 175 toUtm8.convergence: 4.519201
    test 892 line 175 toUtm8.scale: 1.006863
    test 893 line 175 toUtm8.lat: 33.182474
    test 894 line 175 toUtm8.lon: 8.216952
    test 895 line 176 toUtm8.easting: 6688114.168572
    test 896 line 176 toUtm8.northing: 2052857.299639
    test 897 line 176 toUtm8.convergence: 14.766191
    test 898 line 176 toUtm8.scale: 1.607200
    test 899 line 176 toUtm8.lat: 11.417963
    test 900 line 176 toUtm8.lon: 52.808691
    test 901 line 177 toUtm8.easting: 5608408.773761
    test 902 line 177 toUtm8.northing: 3859055.659110
    test 903 line 177 toUtm8.convergence: 26.244151
    test 904 line 177 toUtm8.scale: 1.413463
    test 905 line 177 toUtm8.lat: 23.836688
    test 906 line 177 toUtm8.lon: 50.500180
    test 907 line 178 toUtm8.easting: 3836942.765275
    test 908 line 178 toUtm8.northing: 6415467.634326
    test 909 line 178 toUtm8.convergence: 40.575885
    test 910 line 178 toUtm8.scale: 1.185615
    test 911 line 178 toUtm8.lat: 45.550020
    test 912 line 178 toUtm8.lon: 50.148036
    test 913 line 179 toUtm8.easting: 1298730.366025
    test 914 line 179 toUtm8.northing: 6021453.000792
    test 915 line 179 toUtm8.convergence: 15.613320
    test 916 line 179 toUtm8.scale: 1.020367
    test 917 line 179 toUtm8.lat: 52.746079
    test 918 line 179 toUtm8.lon: 19.343926
    test 919 line 180 toUtm8.easting: 416934.289208
    test 920 line 180 toUtm8.northing: 7295683.451705
    test 921 line 180 toUtm8.convergence: 8.238232
    test 922 line 180 toUtm8.scale: 1.001729
    test 923 line 180 toUtm8.lat: 65.513348
    test 924 line 180 toUtm8.lon: 9.039529
    test 925 line 181 toUtm8.easting: 4336076.850889
    test 926 line 181 toUtm8.northing: 7617975.722779
    test 927 line 181 toUtm8.convergence: 56.537088
    test 928 line 181 toUtm8.scale: 1.238582
    test 929 line 181 toUtm8.lat: 48.709795
    test 930 line 181 toUtm8.lon: 63.554005
    test 931 line 182 toUtm8.easting: 168047.336980
    test 932 line 182 toUtm8.northing: 2185000.046530
    test 933 line 182 toUtm8.convergence: 0.542187
    test 934 line 182 toUtm8.scale: 0.999949
    test 935 line 182 toUtm8.lat: 19.753509
    test 936 line 182 toUtm8.lon: 1.603846
    test 937 line 183 toUtm8.easting: 8276281.328790
    test 938 line 183 toUtm8.northing: 263444.350545
    test 939 line 183 toUtm8.convergence: 2.071435
    test 940 line 183 toUtm8.scale: 1.980314
    test 941 line 183 toUtm8.lat: 1.202816
    test 942 line 183 toUtm8.lon: 59.377276
    test 943 line 184 toUtm8.easting: 4772573.810710
    test 944 line 184 toUtm8.northing: 6765710.336002
    test 945 line 184 toUtm8.convergence: 48.857561
    test 946 line 184 toUtm8.scale: 1.291911
    test 947 line 184 toUtm8.lat: 42.564975
    test 948 line 184 toUtm8.lon: 59.356947
    test 949 line 185 toUtm8.easting: 5427755.074639
    test 950 line 185 toUtm8.northing: 1556055.820924
    test 951 line 185 toUtm8.convergence: 9.862178
    test 952 line 185 toUtm8.scale: 1.387394
    test 953 line 185 toUtm8.lat: 10.090572
    test 954 line 185 toUtm8.lon: 44.604132
    test 955 line 186 toUtm8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtm8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtm8.convergence: 50.784827
    test 958 line 186 toUtm8.scale: 3.149567
    test 959 line 186 toUtm8.lat: 14.133028
    test 960 line 186 toUtm8.lon: 78.097533
    test 961 line 187 toUtm8.easting: 7152433.802688
    test 962 line 187 toUtm8.northing: 761390.695844
    test 963 line 187 toUtm8.convergence: 5.607350
    test 964 line 187 toUtm8.scale: 1.705261
    test 965 line 187 toUtm8.lat: 4.031123
    test 966 line 187 toUtm8.lon: 54.048782
    test 967 line 188 toUtm8.easting: 3105651.390901
    test 968 line 188 toUtm8.northing: 9426026.169064
    test 969 line 188 toUtm8.convergence: 78.750206
    test 970 line 188 toUtm8.scale: 1.119737
    test 971 line 188 toUtm8.lat: 62.746603
    test 972 line 188 toUtm8.lon: 79.968641
    test 973 line 189 toUtm8.easting: 2959009.639022
    test 974 line 189 toUtm8.northing: 8339242.269282
    test 975 line 189 toUtm8.convergence: 58.460865
    test 976 line 189 toUtm8.scale: 1.108554
    test 977 line 189 toUtm8.lat: 60.626429
    test 978 line 189 toUtm8.lon: 61.851551
    test 979 line 190 toUtm8.easting: 8640472.267145
    test 980 line 190 toUtm8.northing: 6230320.417931
    test 981 line 190 toUtm8.convergence: 52.816810
    test 982 line 190 toUtm8.scale: 2.062973
    test 983 line 190 toUtm8.lat: 23.600626
    test 984 line 190 toUtm8.lon: 72.811634
    test 985 line 191 toUtm8.easting: 811352.108932
    test 986 line 191 toUtm8.northing: 9816129.813481
    test 987 line 191 toUtm8.convergence: 77.299184
    test 988 line 191 toUtm8.scale: 1.007651
    test 989 line 191 toUtm8.lat: 82.572236
    test 990 line 191 toUtm8.lon: 77.402323
    test 991 line 192 toUtm8.easting: 6521874.973458
    test 992 line 192 toUtm8.northing: 1053612.479744
    test 993 line 192 toUtm8.convergence: 7.407328
    test 994 line 192 toUtm8.scale: 1.575529
    test 995 line 192 toUtm8.lat: 6.030051
    test 996 line 192 toUtm8.lon: 50.783505
    test 997 line 193 toUtm8.easting: 3477983.997875
    test 998 line 193 toUtm8.northing: 5651613.325947
    test 999 line 193 toUtm8.convergence: 31.530673
    test 1000 line 193 toUtm8.scale: 1.151875
    test 1001 line 193 toUtm8.lat: 42.411523
    test 1002 line 193 toUtm8.lon: 42.258009
    test 1003 line 194 toUtm8.easting: 629892.822243
    test 1004 line 194 toUtm8.northing: 3283914.910451
    test 1005 line 194 toUtm8.convergence: 3.210482
    test 1006 line 194 toUtm8.scale: 1.004499
    test 1007 line 194 toUtm8.lat: 29.526120
    test 1008 line 194 toUtm8.lon: 6.493069
    test 1009 line 195 toUtm8.easting: 3381879.687227
    test 1010 line 195 toUtm8.northing: 5103629.325665
    test 1011 line 195 toUtm8.convergence: 26.748108
    test 1012 line 195 toUtm8.scale: 1.143559
    test 1013 line 195 toUtm8.lat: 39.021853
    test 1014 line 195 toUtm8.lon: 38.641779
    test 1015 line 196 toUtm8.easting: 2815986.534177
    test 1016 line 196 toUtm8.northing: 9387029.120718
    test 1017 line 196 toUtm8.convergence: 76.967262
    test 1018 line 196 toUtm8.scale: 1.098032
    test 1019 line 196 toUtm8.lat: 64.971850
    test 1020 line 196 toUtm8.lon: 78.151893
    test 1021 line 197 toUtm8.easting: 3398195.889603
    test 1022 line 197 toUtm8.northing: 9138936.031490
    test 1023 line 197 toUtm8.convergence: 74.477499
    test 1024 line 197 toUtm8.scale: 1.144009
    test 1025 line 197 toUtm8.lat: 59.961819
    test 1026 line 197 toUtm8.lon: 76.473422
    test 1027 line 198 toUtm8.easting: 2421734.754637
    test 1028 line 198 toUtm8.northing: 5002372.094991
    test 1029 line 198 toUtm8.convergence: 20.017082
    test 1030 line 198 toUtm8.scale: 1.072592
    test 1031 line 198 toUtm8.lat: 41.374040
    test 1032 line 198 toUtm8.lon: 28.848343
    test 1033 line 199 toUtm8.easting: 2360869.895525
    test 1034 line 199 toUtm8.northing: 9553298.449536
    test 1035 line 199 toUtm8.convergence: 78.848205
    test 1036 line 199 toUtm8.scale: 1.068453
    test 1037 line 199 toUtm8.lat: 68.946087
    test 1038 line 199 toUtm8.lon: 79.574523
    test skipped (27): line 200 toUtm8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtm8.easting: 1327758.704795
    test 1040 line 201 toUtm8.northing: 2375509.241683
    test 1041 line 201 toUtm8.convergence: 4.617572
    test 1042 line 201 toUtm8.scale: 1.021465
    test 1043 line 201 toUtm8.lat: 21.000252
    test 1044 line 201 toUtm8.lon: 12.697444
    test 1045 line 202 toUtm8.easting: 2070860.327644
    test 1046 line 202 toUtm8.northing: 8604500.719581
    test 1047 line 202 toUtm8.convergence: 54.722761
    test 1048 line 202 toUtm8.scale: 1.052469
    test 1049 line 202 toUtm8.lat: 68.015227
    test 1050 line 202 toUtm8.lon: 56.732419
    test 1051 line 203 toUtm8.easting: 6564776.654864
    test 1052 line 203 toUtm8.northing: 8171207.177379
    test 1053 line 203 toUtm8.convergence: 69.237523
    test 1054 line 203 toUtm8.scale: 1.573894
    test 1055 line 203 toUtm8.lat: 37.423675
    test 1056 line 203 toUtm8.lon: 76.947359
    test 1057 line 204 toUtm8.easting: 592653.553821
    test 1058 line 204 toUtm8.northing: 6125529.810052
    test 1059 line 204 toUtm8.convergence: 7.600785
    test 1060 line 204 toUtm8.scale: 1.003912
    test 1061 line 204 toUtm8.lat: 54.922707
    test 1062 line 204 toUtm8.lon: 9.260818
    test 1063 line 205 toUtm8.easting: 693459.671821
    test 1064 line 205 toUtm8.northing: 6943779.991032
    test 1065 line 205 toUtm8.convergence: 11.787587
    test 1066 line 205 toUtm8.scale: 1.005496
    test 1067 line 205 toUtm8.lat: 61.982810
    test 1068 line 205 toUtm8.lon: 13.299659
    test 1069 line 206 toUtm8.easting: 1838956.187625
    test 1070 line 206 toUtm8.northing: 3511959.612381
    test 1071 line 206 toUtm8.convergence: 9.844313
    test 1072 line 206 toUtm8.scale: 1.041603
    test 1073 line 206 toUtm8.lat: 30.324214
    test 1074 line 206 toUtm8.lon: 18.959769
    test 1075 line 207 toUtm8.easting: 4460690.884597
    test 1076 line 207 toUtm8.northing: 5541873.235403
    test 1077 line 207 toUtm8.convergence: 35.768613
    test 1078 line 207 toUtm8.scale: 1.254179
    test 1079 line 207 toUtm8.lat: 37.629667
    test 1080 line 207 toUtm8.lon: 49.649131
    test 1081 line 208 toUtm8.easting: 2311168.998941
    test 1082 line 208 toUtm8.northing: 9480561.869119
    test 1083 line 208 toUtm8.convergence: 76.828257
    test 1084 line 208 toUtm8.scale: 1.065556
    test 1085 line 208 toUtm8.lat: 69.225574
    test 1086 line 208 toUtm8.lon: 77.656135
    test 1087 line 209 toUtm8.easting: 4111775.114451
    test 1088 line 209 toUtm8.northing: 6509014.348792
    test 1089 line 209 toUtm8.convergence: 43.052130
    test 1090 line 209 toUtm8.scale: 1.214125
    test 1091 line 209 toUtm8.lat: 44.698478
    test 1092 line 209 toUtm8.lon: 52.979304
    test 1093 line 210 toUtm8.easting: 75358.261962
    test 1094 line 210 toUtm8.northing: 7711258.662251
    test 1095 line 210 toUtm8.convergence: 1.806297
    test 1096 line 210 toUtm8.scale: 0.999669
    test 1097 line 210 toUtm8.lat: 69.499594
    test 1098 line 210 toUtm8.lon: 1.928336
    test skipped (28): line 211 toUtm8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtm8.easting: 954378.415174
    test 1100 line 212 toUtm8.northing: 7449110.669807
    test 1101 line 212 toUtm8.convergence: 19.380657
    test 1102 line 212 toUtm8.scale: 1.010768
    test 1103 line 212 toUtm8.lat: 65.699839
    test 1104 line 212 toUtm8.lon: 21.104725
    test 1105 line 213 toUtm8.easting: 720971.793706
    test 1106 line 213 toUtm8.northing: 5265195.121555
    test 1107 line 213 toUtm8.convergence: 7.002995
    test 1108 line 213 toUtm8.scale: 1.005995
    test 1109 line 213 toUtm8.lat: 47.143648
    test 1110 line 213 toUtm8.lon: 9.512189
    test 1111 line 214 toUtm8.easting: 561561.493937
    test 1112 line 214 toUtm8.northing: 989910.236221
    test 1113 line 214 toUtm8.convergence: 0.793118
    test 1114 line 214 toUtm8.scale: 1.003505
    test 1115 line 214 toUtm8.lat: 8.920167
    test 1116 line 214 toUtm8.lon: 5.101513
    test 1117 line 215 toUtm8.easting: 3446829.634468
    test 1118 line 215 toUtm8.northing: 9232868.155664
    test 1119 line 215 toUtm8.convergence: 76.279075
    test 1120 line 215 toUtm8.scale: 1.148263
    test 1121 line 215 toUtm8.lat: 59.778971
    test 1122 line 215 toUtm8.lon: 78.080322
    test skipped (29): line 216 toUtm8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtm8.easting: 8973188.480293
    test 1124 line 217 toUtm8.northing: 7042230.087021
    test 1125 line 217 toUtm8.convergence: 60.872456
    test 1126 line 217 toUtm8.scale: 2.156098
    test 1127 line 217 toUtm8.lat: 24.310973
    test 1128 line 217 toUtm8.lon: 76.823777
    test 1129 line 218 toUtm8.easting: 126314.191618
    test 1130 line 218 toUtm8.northing: 396006.687921
    test 1131 line 218 toUtm8.convergence: 0.071065
    test 1132 line 218 toUtm8.scale: 0.999798
    test 1133 line 218 toUtm8.lat: 3.582041
    test 1134 line 218 toUtm8.lon: 1.137286
    test 1135 line 219 toUtm8.easting: 5247652.345647
    test 1136 line 219 toUtm8.northing: 8670513.359752
    test 1137 line 219 toUtm8.convergence: 72.700498
    test 1138 line 219 toUtm8.scale: 1.355272
    test 1139 line 219 toUtm8.lat: 46.124233
    test 1140 line 219 toUtm8.lon: 77.313118
    test skipped (30): line 220 toUtm8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtm8.easting: 6300112.758236
    test 1142 line 221 toUtm8.northing: 93835.917364
    test 1143 line 221 toUtm8.convergence: 0.644805
    test 1144 line 221 toUtm8.scale: 1.534073
    test 1145 line 221 toUtm8.lat: 0.553171
    test 1146 line 221 toUtm8.lon: 49.117104
    test 1147 line 222 toUtm8.easting: 3894813.593782
    test 1148 line 222 toUtm8.northing: 4833832.341027
    test 1149 line 222 toUtm8.convergence: 27.453298
    test 1150 line 222 toUtm8.scale: 1.192135
    test 1151 line 222 toUtm8.lat: 35.361587
    test 1152 line 222 toUtm8.lon: 41.860599
    test 1153 line 223 toUtm8.easting: 402511.346712
    test 1154 line 223 toUtm8.northing: 3520621.561911
    test 1155 line 223 toUtm8.convergence: 2.238474
    test 1156 line 223 toUtm8.scale: 1.001599
    test 1157 line 223 toUtm8.lat: 31.750314
    test 1158 line 223 toUtm8.lon: 4.248167
    test 1159 line 224 toUtm8.easting: 5357378.503148
    test 1160 line 224 toUtm8.northing: 2772997.602234
    test 1161 line 224 toUtm8.convergence: 17.823560
    test 1162 line 224 toUtm8.scale: 1.376031
    test 1163 line 224 toUtm8.lat: 17.924336
    test 1164 line 224 toUtm8.lon: 46.096402
    test 1165 line 225 toUtm8.easting: 2807553.985866
    test 1166 line 225 toUtm8.northing: 8177847.980275
    test 1167 line 225 toUtm8.convergence: 54.680045
    test 1168 line 225 toUtm8.scale: 1.097531
    test 1169 line 225 toUtm8.lat: 60.931488
    test 1170 line 225 toUtm8.lon: 58.221214
    test skipped (31): line 226 toUtm8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'
    test skipped (32): line 227 toUtm8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtm8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtm8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtm8.convergence: 42.613968
    test 1174 line 228 toUtm8.scale: 3.314412
    test 1175 line 228 toUtm8.lat: 11.709763
    test 1176 line 228 toUtm8.lon: 76.760295
    test 1177 line 229 toUtm8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtm8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtm8.convergence: 33.383025
    test 1180 line 229 toUtm8.scale: 2.724754
    test 1181 line 229 toUtm8.lat: 12.009498
    test 1182 line 229 toUtm8.lon: 71.782351
    test skipped (33): line 230 toUtm8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtm8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtm8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtm8.convergence: 23.145404
    test 1186 line 231 toUtm8.scale: 2.998408
    test 1187 line 231 toUtm8.lat: 7.721128
    test 1188 line 231 toUtm8.lon: 71.662731
    test 1189 line 232 toUtm8.easting: 4411584.447941
    test 1190 line 232 toUtm8.northing: 4956173.694407
    test 1191 line 232 toUtm8.convergence: 30.713919
    test 1192 line 232 toUtm8.scale: 1.248736
    test 1193 line 232 toUtm8.lat: 34.295026
    test 1194 line 232 toUtm8.lon: 46.442191
    test 1195 line 233 toUtm8.easting: 672108.897905
    test 1196 line 233 toUtm8.northing: 4751554.657054
    test 1197 line 233 toUtm8.convergence: 5.569178
    test 1198 line 233 toUtm8.scale: 1.005162
    test 1199 line 233 toUtm8.lat: 42.622496
    test 1200 line 233 toUtm8.lon: 8.193605
    test 1201 line 234 toUtm8.easting: 5022964.290579
    test 1202 line 234 toUtm8.northing: 6860418.199502
    test 1203 line 234 toUtm8.convergence: 50.862230
    test 1204 line 234 toUtm8.scale: 1.324925
    test 1205 line 234 toUtm8.lat: 41.667780
    test 1206 line 234 toUtm8.lon: 61.518288
    test 1207 line 235 toUtm8.easting: 1669655.595207
    test 1208 line 235 toUtm8.northing: 4152086.537021
    test 1209 line 235 toUtm8.convergence: 11.110237
    test 1210 line 235 toUtm8.scale: 1.034138
    test 1211 line 235 toUtm8.lat: 36.060369
    test 1212 line 235 toUtm8.lon: 18.444112
    test 1213 line 236 toUtm8.easting: 6055876.729655
    test 1214 line 236 toUtm8.northing: 4896837.552619
    test 1215 line 236 toUtm8.convergence: 35.799747
    test 1216 line 236 toUtm8.scale: 1.485967
    test 1217 line 236 toUtm8.lat: 27.948091
    test 1218 line 236 toUtm8.lon: 56.816429
    test 1219 line 237 toUtm8.easting: 1209214.164379
    test 1220 line 237 toUtm8.northing: 7266409.859178
    test 1221 line 237 toUtm8.convergence: 22.319633
    test 1222 line 237 toUtm8.scale: 1.017554
    test 1223 line 237 toUtm8.lat: 63.386030
    test 1224 line 237 toUtm8.lon: 24.662716
    test 1225 line 238 toUtm8.easting: 5154564.559584
    test 1226 line 238 toUtm8.northing: 698118.349975
    test 1227 line 238 toUtm8.convergence: 4.242360
    test 1228 line 238 toUtm8.scale: 1.347481
    test 1229 line 238 toUtm8.lat: 4.680922
    test 1230 line 238 toUtm8.lon: 42.114426
    test 1231 line 239 toUtm8.easting: 2695149.806543
    test 1232 line 239 toUtm8.northing: 8208197.765605
    test 1233 line 239 toUtm8.convergence: 54.178615
    test 1234 line 239 toUtm8.scale: 1.089730
    test 1235 line 239 toUtm8.lat: 61.826625
    test 1236 line 239 toUtm8.lon: 57.525096
    test 1237 line 240 toUtm8.easting: 3394792.327820
    test 1238 line 240 toUtm8.northing: 3217583.415552
    test 1239 line 240 toUtm8.convergence: 15.165863
    test 1240 line 240 toUtm8.scale: 1.145285
    test 1241 line 240 toUtm8.lat: 25.104353
    test 1242 line 240 toUtm8.lon: 32.528660
    test 1243 line 241 toUtm8.easting: 1429160.966985
    test 1244 line 241 toUtm8.northing: 8212685.362032
    test 1245 line 241 toUtm8.convergence: 37.484904
    test 1246 line 241 toUtm8.scale: 1.024676
    test 1247 line 241 toUtm8.lat: 69.678351
    test 1248 line 241 toUtm8.lon: 39.275513
    test skipped (34): line 242 toUtm8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtm8.easting: 1990722.928606
    test 1250 line 243 toUtm8.northing: 7569202.065162
    test 1251 line 243 toUtm8.convergence: 37.075276
    test 1252 line 243 toUtm8.scale: 1.048486
    test 1253 line 243 toUtm8.lat: 62.300208
    test 1254 line 243 toUtm8.lon: 40.474051
    test 1255 line 244 toUtm8.easting: 1554980.099559
    test 1256 line 244 toUtm8.northing: 1449423.919586
    test 1257 line 244 toUtm8.convergence: 3.188328
    test 1258 line 244 toUtm8.scale: 1.029664
    test 1259 line 244 toUtm8.lat: 12.721776
    test 1260 line 244 toUtm8.lon: 14.190003
    test 1261 line 245 toUtm8.easting: 785205.450196
    test 1262 line 245 toUtm8.northing: 5575158.423096
    test 1263 line 245 toUtm8.convergence: 8.388417
    test 1264 line 245 toUtm8.scale: 1.007181
    test 1265 line 245 toUtm8.lat: 49.811296
    test 1266 line 245 toUtm8.lon: 10.925011
    test 1267 line 246 toUtm8.easting: 3310405.988313
    test 1268 line 246 toUtm8.northing: 5955022.233881
    test 1269 line 246 toUtm8.convergence: 33.007587
    test 1270 line 246 toUtm8.scale: 1.137141
    test 1271 line 246 toUtm8.lat: 45.132680
    test 1272 line 246 toUtm8.lon: 42.478624
    test 1273 line 247 toUtm8.easting: 4733460.960666
    test 1274 line 247 toUtm8.northing: 129034.889816
    test 1275 line 247 toUtm8.convergence: 0.737551
    test 1276 line 247 toUtm8.scale: 1.290439
    test 1277 line 247 toUtm8.lat: 0.904279
    test 1278 line 247 toUtm8.lon: 39.078412
    test 1279 line 248 toUtm8.easting: 3322708.343909
    test 1280 line 248 toUtm8.northing: 3864738.078742
    test 1281 line 248 toUtm8.convergence: 18.472566
    test 1282 line 248 toUtm8.scale: 1.138838
    test 1283 line 248 toUtm8.lat: 30.163605
    test 1284 line 248 toUtm8.lon: 33.577996
    test skipped (35): line 249 toUtm8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'
    test skipped (36): line 250 toUtm8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'
    test skipped (37): line 251 toUtm8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtm8.easting: 2212701.180192
    test 1286 line 252 toUtm8.northing: 650348.100229
    test 1287 line 252 toUtm8.convergence: 1.970441
    test 1288 line 252 toUtm8.scale: 1.060830
    test 1289 line 252 toUtm8.lat: 5.542998
    test 1290 line 252 toUtm8.lon: 19.589578
    test 1291 line 253 toUtm8.easting: 6890222.326618
    test 1292 line 253 toUtm8.northing: 7506813.499547
    test 1293 line 253 toUtm8.convergence: 62.684825
    test 1294 line 253 toUtm8.scale: 1.638488
    test 1295 line 253 toUtm8.lat: 34.237147
    test 1296 line 253 toUtm8.lon: 73.678164
    test 1297 line 254 toUtm8.easting: 6692260.067325
    test 1298 line 254 toUtm8.northing: 4244174.008110
    test 1299 line 254 toUtm8.convergence: 31.812920
    test 1300 line 254 toUtm8.scale: 1.604640
    test 1301 line 254 toUtm8.lat: 22.704949
    test 1302 line 254 toUtm8.lon: 57.877010
    test 1303 line 255 toUtm8.easting: 1225564.137190
    test 1304 line 255 toUtm8.northing: 4778923.924144
    test 1305 line 255 toUtm8.convergence: 10.083419
    test 1306 line 255 toUtm8.scale: 1.018134
    test 1307 line 255 toUtm8.lat: 42.192424
    test 1308 line 255 toUtm8.lon: 14.828196
    test 1309 line 256 toUtm8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtm8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtm8.convergence: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtm8.scale: 3.535170
    test 1313 line 256 toUtm8.lat: 11.481151
    test 1314 line 256 toUtm8.lon: 78.189236
    test 1315 line 257 toUtm8.easting: 6673845.021771
    test 1316 line 257 toUtm8.northing: 1177587.190565
    test 1317 line 257 toUtm8.convergence: 8.389141
    test 1318 line 257 toUtm8.scale: 1.605171
    test 1319 line 257 toUtm8.lat: 6.609626
    test 1320 line 257 toUtm8.lon: 51.735783
    test 1321 line 258 toUtm8.easting: 6966354.690417
    test 1322 line 258 toUtm8.northing: 3641802.005093
    test 1323 line 258 toUtm8.convergence: 27.409636
    test 1324 line 258 toUtm8.scale: 1.661469
    test 1325 line 258 toUtm8.lat: 19.059369
    test 1326 line 258 toUtm8.lon: 57.526439
    test 1327 max forward error: 1.678807e-03
    test 1328 max reverse error: 3.170454e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 WGS84.KsOrder: 8

    23 of 1332 testUtmTMcoords.py tests (1.7%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 285.911 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUtmUps.py

    testing testUtmUps.py 20.04.22 (module pygeodesy.utmups 20.10.08)
    test 1 UtmUps: 00 N 448251.0 5411932.0001
    test 2 UtmUps.ValidateOK: True
    test 3 UtmUps: 00 N 448252 5411933
    test 4 UtmUps: 00 N 448251.795 5411932.678
    test 5 UtmUps: 00Z N 448251.8 5411932.7 n/a n/a
    test 6 UtmUps.ValidateOK: True
    test 7 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 8 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 LL.toUtmUps: 60 N 360177 4838249
    test 10 LL.toUtmUps: 60 N 360176.686 4838249.416
    test 11 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 12 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 13 LL.toUtmUps.ValidateOK: True
    test 14 toUtmUps8ID1: 00Y N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 15 toUtmUps8ID1.ValidateOK: True
    test 16 toUtmUps8ID1.ValidateOK: True
    test 17 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 18 toUtmUps8ID2.ValidateOK: True
    test 19 toUtmUps8ID2.ValidateOK: True
    test 20 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 21 toUtmUps8ID2.ValidateOK: easting (3320416.7473598532): outside UPS range [1300000 2700000]  FAILED, KNOWN, expected True
    test 22 toUtmUps8ID3: 00B S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 23 toUtmUps8ID3.ValidateOK: True
    test 24 toUtmUps8ID3.ValidateOK: True
    test 25 UtmUps.toLatLonID4.ValidateOK: True
    test 26 UtmUps.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 27 UtmUps.toLatLonID4: 84.287234°N, 132.247989°W
    test 28 UtmUps.ValidateOK: easting (3320416.75): outside UPS range [1300000 2700000]  FAILED, KNOWN, expected True
    test 29 UtmUps.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 30 UtmUps.toLatLonID5: 73.0°N, 044.0°E
    test 31 UtmUps.ValidateOK: True
    test 32 UtmUps.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 33 UtmUps.toLatLonID6: 87.287333°S, 132.247861°E
    test 34 latlon1: 61.2°N, 149.9°W
    test 35 toUtmUps8: 06 N 344174 6788521
    test 36 toUtmUps8: 06V N 344173.864114 6788521.418164 -2.54179531° 0.99989751
    test 37 toUtmUps8.ValidateOK: True
    test 38 toMgrs: 06V UN 44173 88521
    test 39 latlon2: LatLon(83°37′37.2″N, 032°39′50.4″W)
    test 40 toUtmUps8: 25 N 504164 9286466
    test 41 toUtmUps8: [Z:25X, H:N, E:504164, N:9286466]
    test 42 toUtmUps8: 25X N 504163.899383 9286465.664902 +20.03542083′ 0.99960021
    test 43 toUtmUps8.ValidateOK: True
    test 44 toMgrs: 25X EN 04163 86465
    test 45 latlon3: 33.33°N, 044.44°E
    test 46 toUtmUps8: 38 N 447882 3688012
    test 47 toUtmUps8: 38S N 447882.413169 3688011.692733 -18.46228466′ 0.99963349
    test 48 toUtmUps8.ValidateOK: True
    test 49 toMgrs: 38S MB 47882 88011
    test 50 latlon4: 79.0°S, 079.0°W
    test 51 toUtmUps8: 17 S 542594 1229296
    test 52 toUtmUps8: 17C S 542594.134555 1229296.157301 -1.96328341° 0.99962217
    test 53 toUtmUps8.ValidateOK: True
    test 54 toMgrs: 17C NN 42594 29296
    test 55 latlon5: 84.0°N, 084.0°E
    test 56 toUtmUps8: 00 N 2663075 1930308
    test 57 toUtmUps8: 00Z N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 58 toUtmUps8.ValidateOK: True
    test 59 latlon6: 13.4125°N, 103.8667°E
    test 60 toUtmUps8: 48 N 377302 1483035
    test 61 toUtmUps8: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 62 toUtmUps8.ValidateOK: True
    test 63 toMgrs: 48P UV 77302 83034
    test 64 latlon7: 13.4125°S, 103.8667°W
    test 65 LL.toUtmUps: 13 S 622698 8516965
    test 66 LL.toUtmUps: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 67 LL.toUtmUps.ValidateOK: True
    test 68 toMgrs: 13L FF 22697 16965
    test 69 latlon8: 43.684097°N, 175.265195°E
    test 70 LL.toUtmUps: 60 N 360177 4838249
    test 71 LL.toUtmUps: 60 N 360176.691 4838249.422
    test 72 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 73 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 74 LL.toUtmUps.ValidateOK: True
    test 75 toMgrs: 60T UP 60176 38249
    test 76 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 77 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 78 latlon9: 41.321801°N, 074.801413°W
    test 79 LL.toUtmUps: 18 N 516620 4574500
    test 80 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 81 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 82 LL.toUtmUps.ValidateOK: True
    test 83 toMgrs: 18T WL 16619 74500
    test 84 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 85 UtmUps.toLatLon: 41°19′18.48″N, 074°48′05.09″W
    test 86 parseUTMUPS5: 18 N 516620 4574500
    test 87 parseUTMUPS5.ValidateOK: True
    test 88 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 89 UtmUps: 00A S 321441 5810117
    test 90 UtmUps.ValidateOK: easting (321441.0425108216): outside UPS range [800000 3200000]  FAILED, KNOWN, expected True
    test 91 UtmUps.toLatLon: 53.713776°S, 023.77604°W
    test 92 UtmUps.toLatLon: 53°42′49.59″S, 023°46′33.74″W
    test 93 LL.toUtmUps: 27 S 316807 4044745
    test 94 LL.toUtmUps.ValidateOK: True
    test 95 LL.toUtmUps: 27 S 316807.326 4044744.532
    test 96 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 97 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 98 UtmUps: 00Z N 400000 5000000
    test 99 UtmUps.ValidateOK: True
    test 100 parseUTMUPS5: (31, 'N', 446000.0, 8436100.0, 'X')
    test 101 parseUTMUPS5: (0, 'S', 506346.0, 1057743.0, 'A')

    4 of 101 testUtmUps.py tests (4.0%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 27.474 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testUtmUpsTMcoords.py

    testing testUtmUpsTMcoords.py 19.05.23 (module pygeodesy.utmups 20.10.08)
    test 1 line 1 toUtmUps8.easting: 1548706.791619
    test 2 line 1 toUtmUps8.northing: 8451449.198772
    test 3 line 1 toUtmUps8.convergence: 43.922790
    test 4 line 1 toUtmUps8.scale: 1.029060
    test 5 line 1 toUtmUps8.lat: 70.579277
    test 6 line 1 toUtmUps8.lon: 45.599420
    test 7 line 2 toUtmUps8.easting: 2624150.740929
    test 8 line 2 toUtmUps8.northing: 1204434.041605
    test 9 line 2 toUtmUps8.convergence: 4.292619
    test 10 line 2 toUtmUps8.scale: 1.086051
    test 11 line 2 toUtmUps8.lat: 10.018894
    test 12 line 2 toUtmUps8.lon: 23.313324
    test 13 line 3 toUtmUps8.easting: 9855841.232935
    test 14 line 3 toUtmUps8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtmUps8.convergence: 53.348315
    test 16 line 3 toUtmUps8.scale: 2.445098
    test 17 line 3 toUtmUps8.lat: 19.479896
    test 18 line 3 toUtmUps8.lon: 75.662049
    test 19 line 4 toUtmUps8.easting: 3206390.691996
    test 20 line 4 toUtmUps8.northing: 2650745.400406
    test 21 line 4 toUtmUps8.convergence: 11.666950
    test 22 line 4 toUtmUps8.scale: 1.129359
    test 23 line 4 toUtmUps8.lat: 21.072465
    test 24 line 4 toUtmUps8.lon: 29.828684
    test 25 line 5 toUtmUps8.easting: 4328154.083501
    test 26 line 5 toUtmUps8.northing: 749647.623690
    test 27 line 5 toUtmUps8.convergence: 4.024317
    test 28 line 5 toUtmUps8.scale: 1.240829
    test 29 line 5 toUtmUps8.lat: 5.458957
    test 30 line 5 toUtmUps8.lon: 36.385237
    test 31 line 6 toUtmUps8.easting: 847598.266514
    test 32 line 6 toUtmUps8.northing: 7947180.962440
    test 33 line 6 toUtmUps8.convergence: 21.639091
    test 34 line 6 toUtmUps8.scale: 1.008399
    test 35 line 6 toUtmUps8.lat: 70.175454
    test 36 line 6 toUtmUps8.lon: 22.865350
    test 37 line 7 toUtmUps8.easting: 2727657.337974
    test 38 line 7 toUtmUps8.northing: 8283916.696410
    test 39 line 7 toUtmUps8.convergence: 55.690909
    test 40 line 7 toUtmUps8.scale: 1.091942
    test 41 line 7 toUtmUps8.lat: 61.965605
    test 42 line 7 toUtmUps8.lon: 58.931371
    test 43 line 8 toUtmUps8.easting: 2331001.751890
    test 44 line 8 toUtmUps8.northing: 1313608.224751
    test 45 line 8 toUtmUps8.convergence: 4.214690
    test 46 line 8 toUtmUps8.scale: 1.067599
    test 47 line 8 toUtmUps8.lat: 11.116050
    test 48 line 8 toUtmUps8.lon: 20.901069
    test 49 line 9 toUtmUps8.easting: 6035557.239480
    test 50 line 9 toUtmUps8.northing: 5791770.791879
    test 51 line 9 toUtmUps8.convergence: 43.698170
    test 52 line 9 toUtmUps8.scale: 1.481260
    test 53 line 9 toUtmUps8.lat: 32.210543
    test 54 line 9 toUtmUps8.lon: 60.705849
    test 55 line 10 toUtmUps8.easting: 1064553.125852
    test 56 line 10 toUtmUps8.northing: 9417273.737208
    test 57 line 10 toUtmUps8.convergence: 61.100380
    test 58 line 10 toUtmUps8.scale: 1.013475
    test 59 line 10 toUtmUps8.lat: 79.187451
    test 60 line 10 toUtmUps8.lon: 61.532382
    test 61 line 11 toUtmUps8.easting: 1400137.116164
    test 62 line 11 toUtmUps8.northing: 9616907.017686
    test 63 line 11 toUtmUps8.convergence: 74.527087
    test 64 line 11 toUtmUps8.scale: 1.023640
    test 65 line 11 toUtmUps8.lat: 77.103759
    test 66 line 11 toUtmUps8.lon: 74.899105
    test skipped (1): line 12 toUtmUps8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'
    test skipped (2): line 13 toUtmUps8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtmUps8.easting: 3335099.866623
    test 68 line 14 toUtmUps8.northing: 6740519.084015
    test 69 line 14 toUtmUps8.convergence: 40.611821
    test 70 line 14 toUtmUps8.scale: 1.139021
    test 71 line 14 toUtmUps8.lat: 49.990485
    test 72 line 14 toUtmUps8.lon: 48.203179
    test skipped (3): line 15 toUtmUps8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtmUps8.easting: 5387578.735298
    test 74 line 16 toUtmUps8.northing: 4111216.907168
    test 75 line 16 toUtmUps8.convergence: 27.574337
    test 76 line 16 toUtmUps8.scale: 1.379357
    test 77 line 16 toUtmUps8.lat: 25.936824
    test 78 line 16 toUtmUps8.lon: 49.913598
    test 79 line 17 toUtmUps8.easting: 2622214.380233
    test 80 line 17 toUtmUps8.northing: 8678923.984567
    test 81 line 17 toUtmUps8.convergence: 61.697275
    test 82 line 17 toUtmUps8.scale: 1.084810
    test 83 line 17 toUtmUps8.lat: 64.402196
    test 84 line 17 toUtmUps8.lon: 64.091395
    test skipped (4): line 18 toUtmUps8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtmUps8.easting: 738062.047779
    test 86 line 19 toUtmUps8.northing: 3031007.074116
    test 87 line 19 toUtmUps8.convergence: 3.416802
    test 88 line 19 toUtmUps8.scale: 1.006332
    test 89 line 19 toUtmUps8.lat: 27.203895
    test 90 line 19 toUtmUps8.lon: 7.440229
    test 91 line 20 toUtmUps8.easting: 1944413.834565
    test 92 line 20 toUtmUps8.northing: 9613299.224493
    test 93 line 20 toUtmUps8.convergence: 78.462831
    test 94 line 20 toUtmUps8.scale: 1.046134
    test 95 line 20 toUtmUps8.lat: 72.509000
    test 96 line 20 toUtmUps8.lon: 78.982283
    test 97 line 21 toUtmUps8.easting: 2114521.418406
    test 98 line 21 toUtmUps8.northing: 4954077.440098
    test 99 line 21 toUtmUps8.convergence: 17.571878
    test 100 line 21 toUtmUps8.scale: 1.055093
    test 101 line 21 toUtmUps8.lat: 41.824954
    test 102 line 21 toUtmUps8.lon: 25.392744
    test 103 line 22 toUtmUps8.easting: 620365.905090
    test 104 line 22 toUtmUps8.northing: 4755542.026562
    test 105 line 22 toUtmUps8.convergence: 5.152022
    test 106 line 22 toUtmUps8.scale: 1.004338
    test 107 line 22 toUtmUps8.lat: 42.701376
    test 108 line 22 toUtmUps8.lon: 7.572738
    test 109 line 23 toUtmUps8.easting: 263004.770989
    test 110 line 23 toUtmUps8.northing: 4493669.762451
    test 111 line 23 toUtmUps8.convergence: 2.020523
    test 112 line 23 toUtmUps8.scale: 1.000452
    test 113 line 23 toUtmUps8.lat: 40.552052
    test 114 line 23 toUtmUps8.lon: 3.106056
    test 115 line 24 toUtmUps8.easting: 3217221.739462
    test 116 line 24 toUtmUps8.northing: 437776.119161
    test 117 line 24 toUtmUps8.convergence: 1.848169
    test 118 line 24 toUtmUps8.scale: 1.130558
    test 119 line 24 toUtmUps8.lat: 3.501242
    test 120 line 24 toUtmUps8.lon: 27.806507
    test skipped (5): line 25 toUtmUps8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtmUps8.easting: 967777.158554
    test 122 line 26 toUtmUps8.northing: 6615684.266592
    test 123 line 26 toUtmUps8.convergence: 14.410044
    test 124 line 26 toUtmUps8.scale: 1.011100
    test 125 line 26 toUtmUps8.lat: 58.582623
    test 126 line 26 toUtmUps8.lon: 16.755558
    test 127 line 27 toUtmUps8.easting: 7558840.728461
    test 128 line 27 toUtmUps8.northing: 4144728.130764
    test 129 line 27 toUtmUps8.convergence: 32.557264
    test 130 line 27 toUtmUps8.scale: 1.791490
    test 131 line 27 toUtmUps8.lat: 19.793004
    test 132 line 27 toUtmUps8.lon: 61.746763
    test 133 line 28 toUtmUps8.easting: 1056008.314161
    test 134 line 28 toUtmUps8.northing: 9290799.692669
    test 135 line 28 toUtmUps8.convergence: 55.843278
    test 136 line 28 toUtmUps8.scale: 1.013253
    test 137 line 28 toUtmUps8.lat: 78.666776
    test 138 line 28 toUtmUps8.lon: 56.365355
    test 139 line 29 toUtmUps8.easting: 1943965.134687
    test 140 line 29 toUtmUps8.northing: 1389972.228690
    test 141 line 29 toUtmUps8.convergence: 3.774869
    test 142 line 29 toUtmUps8.scale: 1.046724
    test 143 line 29 toUtmUps8.lat: 11.998788
    test 144 line 29 toUtmUps8.lon: 17.597873
    test 145 line 30 toUtmUps8.easting: 5803077.072902
    test 146 line 30 toUtmUps8.northing: 5649957.943659
    test 147 line 30 toUtmUps8.convergence: 41.717943
    test 148 line 30 toUtmUps8.scale: 1.442572
    test 149 line 30 toUtmUps8.lat: 32.540378
    test 150 line 30 toUtmUps8.lon: 58.764613
    test 151 line 31 toUtmUps8.easting: 2928716.986009
    test 152 line 31 toUtmUps8.northing: 5731835.058317
    test 153 line 31 toUtmUps8.convergence: 28.538550
    test 154 line 31 toUtmUps8.scale: 1.106780
    test 155 line 31 toUtmUps8.lat: 45.160356
    test 156 line 31 toUtmUps8.lon: 37.465285
    test 157 line 32 toUtmUps8.easting: 326141.975756
    test 158 line 32 toUtmUps8.northing: 8881325.164543
    test 159 line 32 toUtmUps8.convergence: 16.111415
    test 160 line 32 toUtmUps8.scale: 1.000900
    test 161 line 32 toUtmUps8.lat: 79.584190
    test 162 line 32 toUtmUps8.lon: 16.367006
    test 163 line 33 toUtmUps8.easting: 3933015.267450
    test 164 line 33 toUtmUps8.northing: 7932373.909512
    test 165 line 33 toUtmUps8.convergence: 58.577424
    test 166 line 33 toUtmUps8.scale: 1.194811
    test 167 line 33 toUtmUps8.lat: 52.470664
    test 168 line 33 toUtmUps8.lon: 64.125580
    test 169 line 34 toUtmUps8.easting: 8598926.983213
    test 170 line 34 toUtmUps8.northing: 6214135.167503
    test 171 line 34 toUtmUps8.convergence: 52.612878
    test 172 line 34 toUtmUps8.scale: 2.051367
    test 173 line 34 toUtmUps8.lat: 23.702673
    test 174 line 34 toUtmUps8.lon: 72.630363
    test 175 line 35 toUtmUps8.easting: 6620553.333772
    test 176 line 35 toUtmUps8.northing: 6540527.122948
    test 177 line 35 toUtmUps8.convergence: 52.350140
    test 178 line 35 toUtmUps8.scale: 1.586614
    test 179 line 35 toUtmUps8.lat: 32.603520
    test 180 line 35 toUtmUps8.lon: 67.280123
    test 181 line 36 toUtmUps8.easting: 1515136.758292
    test 182 line 36 toUtmUps8.northing: 3858996.087537
    test 183 line 36 toUtmUps8.convergence: 9.225127
    test 184 line 36 toUtmUps8.scale: 1.028029
    test 185 line 36 toUtmUps8.lat: 33.776224
    test 186 line 36 toUtmUps8.lon: 16.280993
    test 187 line 37 toUtmUps8.easting: 479854.373445
    test 188 line 37 toUtmUps8.northing: 8980501.389896
    test 189 line 37 toUtmUps8.convergence: 25.021222
    test 190 line 37 toUtmUps8.scale: 1.002415
    test 191 line 37 toUtmUps8.lat: 79.932747
    test 192 line 37 toUtmUps8.lon: 25.363622
    test 193 line 38 toUtmUps8.easting: 5243446.564940
    test 194 line 38 toUtmUps8.northing: 140657.213960
    test 195 line 38 toUtmUps8.convergence: 0.862817
    test 196 line 38 toUtmUps8.scale: 1.360358
    test 197 line 38 toUtmUps8.lat: 0.935056
    test 198 line 38 toUtmUps8.lon: 42.538824
    test skipped (6): line 39 toUtmUps8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtmUps8.easting: 1202993.459158
    test 200 line 40 toUtmUps8.northing: 5557316.053599
    test 201 line 40 toUtmUps8.convergence: 12.579061
    test 202 line 40 toUtmUps8.scale: 1.017426
    test 203 line 40 toUtmUps8.lat: 48.979057
    test 204 line 40 toUtmUps8.lon: 16.474542
    test 205 line 41 toUtmUps8.easting: 1729088.710196
    test 206 line 41 toUtmUps8.northing: 7770874.289954
    test 207 line 41 toUtmUps8.convergence: 36.021783
    test 208 line 41 toUtmUps8.scale: 1.036397
    test 209 line 41 toUtmUps8.lat: 65.036016
    test 210 line 41 toUtmUps8.lon: 38.729091
    test 211 line 42 toUtmUps8.easting: 2437301.517425
    test 212 line 42 toUtmUps8.northing: 5539327.748318
    test 213 line 42 toUtmUps8.convergence: 23.461879
    test 214 line 42 toUtmUps8.scale: 1.073459
    test 215 line 42 toUtmUps8.lat: 45.510091
    test 216 line 42 toUtmUps8.lon: 31.303729
    test 217 line 43 toUtmUps8.easting: 3647186.135066
    test 218 line 43 toUtmUps8.northing: 2086412.330983
    test 219 line 43 toUtmUps8.convergence: 10.023991
    test 220 line 43 toUtmUps8.scale: 1.168707
    test 221 line 43 toUtmUps8.lat: 16.058010
    test 222 line 43 toUtmUps8.lon: 32.520026
    test 223 line 44 toUtmUps8.easting: 1818497.243556
    test 224 line 44 toUtmUps8.northing: 4275471.745057
    test 225 line 44 toUtmUps8.convergence: 12.499656
    test 226 line 44 toUtmUps8.scale: 1.040604
    test 227 line 44 toUtmUps8.lat: 36.845200
    test 228 line 44 toUtmUps8.lon: 20.282283
    test 229 line 45 toUtmUps8.easting: 3751304.113783
    test 230 line 45 toUtmUps8.northing: 5130454.001592
    test 231 line 45 toUtmUps8.convergence: 28.959707
    test 232 line 45 toUtmUps8.scale: 1.177681
    test 233 line 45 toUtmUps8.lat: 37.865481
    test 234 line 45 toUtmUps8.lon: 41.990402
    test 235 line 46 toUtmUps8.easting: 2616733.138544
    test 236 line 46 toUtmUps8.northing: 394644.463815
    test 237 line 46 toUtmUps8.convergence: 1.390425
    test 238 line 46 toUtmUps8.scale: 1.085595
    test 239 line 46 toUtmUps8.lat: 3.287272
    test 240 line 46 toUtmUps8.lon: 22.917604
    test 241 line 47 toUtmUps8.easting: 1756506.573942
    test 242 line 47 toUtmUps8.northing: 5570393.986394
    test 243 line 47 toUtmUps8.convergence: 17.897894
    test 244 line 47 toUtmUps8.scale: 1.037732
    test 245 line 47 toUtmUps8.lat: 47.813686
    test 246 line 47 toUtmUps8.lon: 23.545092
    test 247 line 48 toUtmUps8.easting: 8752461.894711
    test 248 line 48 toUtmUps8.northing: 6087728.152284
    test 249 line 48 toUtmUps8.convergence: 51.628465
    test 250 line 48 toUtmUps8.scale: 2.095465
    test 251 line 48 toUtmUps8.lat: 22.836853
    test 252 line 48 toUtmUps8.lon: 72.604385
    test 253 line 49 toUtmUps8.easting: 1309272.216432
    test 254 line 49 toUtmUps8.northing: 59520.028899
    test 255 line 49 toUtmUps8.convergence: 0.109069
    test 256 line 49 toUtmUps8.scale: 1.020897
    test 257 line 49 toUtmUps8.lat: 0.527262
    test 258 line 49 toUtmUps8.lon: 11.684209
    test 259 line 50 toUtmUps8.easting: 328652.277129
    test 260 line 50 toUtmUps8.northing: 2233043.958874
    test 261 line 50 toUtmUps8.convergence: 1.084863
    test 262 line 50 toUtmUps8.scale: 1.000935
    test 263 line 50 toUtmUps8.lat: 20.166742
    test 264 line 50 toUtmUps8.lon: 3.143948
    test skipped (7): line 51 toUtmUps8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'
    test skipped (8): line 52 toUtmUps8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtmUps8.easting: 796987.281104
    test 266 line 53 toUtmUps8.northing: 7677446.357675
    test 267 line 53 toUtmUps8.convergence: 18.084472
    test 268 line 53 toUtmUps8.scale: 1.007381
    test 269 line 53 toUtmUps8.lat: 68.071020
    test 270 line 53 toUtmUps8.lon: 19.392823
    test skipped (9): line 54 toUtmUps8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtmUps8.easting: 7087225.330906
    test 272 line 55 toUtmUps8.northing: 8382823.855822
    test 273 line 55 toUtmUps8.convergence: 72.253756
    test 274 line 55 toUtmUps8.scale: 1.678070
    test 275 line 55 toUtmUps8.lat: 35.074753
    test 276 line 55 toUtmUps8.lon: 79.496003
    test 277 line 56 toUtmUps8.easting: 5090358.125724
    test 278 line 56 toUtmUps8.northing: 4318294.133489
    test 279 line 56 toUtmUps8.convergence: 28.266280
    test 280 line 56 toUtmUps8.scale: 1.336264
    test 281 line 56 toUtmUps8.lat: 28.078790
    test 282 line 56 toUtmUps8.lon: 48.684350
    test skipped (10): line 57 toUtmUps8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtmUps8.easting: 3447670.550785
    test 284 line 58 toUtmUps8.northing: 3680238.888223
    test 285 line 58 toUtmUps8.convergence: 17.934948
    test 286 line 58 toUtmUps8.scale: 1.149831
    test 287 line 58 toUtmUps8.lat: 28.473948
    test 288 line 58 toUtmUps8.lon: 34.127306
    test 289 line 59 toUtmUps8.easting: 3396522.906798
    test 290 line 59 toUtmUps8.northing: 8093659.687593
    test 291 line 59 toUtmUps8.convergence: 57.747117
    test 292 line 59 toUtmUps8.scale: 1.144006
    test 293 line 59 toUtmUps8.lat: 56.629354
    test 294 line 59 toUtmUps8.lon: 62.196474
    test 295 line 60 toUtmUps8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtmUps8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtmUps8.convergence: 14.210358
    test 298 line 60 toUtmUps8.scale: 3.048347
    test 299 line 60 toUtmUps8.lat: 4.747762
    test 300 line 60 toUtmUps8.lon: 70.932555
    test 301 line 61 toUtmUps8.easting: 6808805.230950
    test 302 line 61 toUtmUps8.northing: 8044779.777369
    test 303 line 61 toUtmUps8.convergence: 68.242008
    test 304 line 61 toUtmUps8.scale: 1.621464
    test 305 line 61 toUtmUps8.lat: 35.882113
    test 306 line 61 toUtmUps8.lon: 76.741849
    test 307 line 62 toUtmUps8.easting: 2306021.556506
    test 308 line 62 toUtmUps8.northing: 757191.592866
    test 309 line 62 toUtmUps8.convergence: 2.385686
    test 310 line 62 toUtmUps8.scale: 1.066159
    test 311 line 62 toUtmUps8.lat: 6.420705
    test 312 line 62 toUtmUps8.lon: 20.416028
    test 313 line 63 toUtmUps8.easting: 1547406.313862
    test 314 line 63 toUtmUps8.northing: 6048712.751824
    test 315 line 63 toUtmUps8.convergence: 18.474372
    test 316 line 63 toUtmUps8.scale: 1.029123
    test 317 line 63 toUtmUps8.lat: 52.335248
    test 318 line 63 toUtmUps8.lon: 22.879294
    test 319 line 64 toUtmUps8.easting: 2430467.650383
    test 320 line 64 toUtmUps8.northing: 7557167.613972
    test 321 line 64 toUtmUps8.convergence: 42.110021
    test 322 line 64 toUtmUps8.scale: 1.072759
    test 323 line 64 toUtmUps8.lat: 59.846391
    test 324 line 64 toUtmUps8.lon: 46.262536
    test 325 line 65 toUtmUps8.easting: 2334053.905830
    test 326 line 65 toUtmUps8.northing: 1948076.966582
    test 327 line 65 toUtmUps8.convergence: 6.353185
    test 328 line 65 toUtmUps8.scale: 1.067733
    test 329 line 65 toUtmUps8.lat: 16.461790
    test 330 line 65 toUtmUps8.lon: 21.433269
    test 331 line 66 toUtmUps8.easting: 5564175.186737
    test 332 line 66 toUtmUps8.northing: 1836851.660412
    test 333 line 66 toUtmUps8.convergence: 11.870682
    test 334 line 66 toUtmUps8.scale: 1.408265
    test 335 line 66 toUtmUps8.lat: 11.707905
    test 336 line 66 toUtmUps8.lon: 45.827075
    test 337 line 67 toUtmUps8.easting: 6118505.590359
    test 338 line 67 toUtmUps8.northing: 7631684.552421
    test 339 line 67 toUtmUps8.convergence: 62.477323
    test 340 line 67 toUtmUps8.scale: 1.493420
    test 341 line 67 toUtmUps8.lat: 38.519075
    test 342 line 67 toUtmUps8.lon: 71.935918
    test skipped (11): line 68 toUtmUps8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtmUps8.easting: 36187.342415
    test 344 line 69 toUtmUps8.northing: 2142565.324802
    test 345 line 69 toUtmUps8.convergence: 0.114334
    test 346 line 69 toUtmUps8.scale: 0.999616
    test 347 line 69 toUtmUps8.lat: 19.376880
    test 348 line 69 toUtmUps8.lon: 0.344605
    test 349 line 70 toUtmUps8.easting: 2380328.546851
    test 350 line 70 toUtmUps8.northing: 8440109.872384
    test 351 line 70 toUtmUps8.convergence: 55.076067
    test 352 line 70 toUtmUps8.scale: 1.069658
    test 353 line 70 toUtmUps8.lat: 65.075805
    test 354 line 70 toUtmUps8.lon: 57.653438
    test 355 line 71 toUtmUps8.easting: 582511.608826
    test 356 line 71 toUtmUps8.northing: 8876047.217071
    test 357 line 71 toUtmUps8.convergence: 27.133300
    test 358 line 71 toUtmUps8.scale: 1.003749
    test 359 line 71 toUtmUps8.lat: 78.691870
    test 360 line 71 toUtmUps8.lon: 27.591736
    test 361 line 72 toUtmUps8.easting: 899441.350477
    test 362 line 72 toUtmUps8.northing: 4582046.430516
    test 363 line 72 toUtmUps8.convergence: 7.031211
    test 364 line 72 toUtmUps8.scale: 1.009573
    test 365 line 72 toUtmUps8.lat: 40.893022
    test 366 line 72 toUtmUps8.lon: 10.668804
    test skipped (12): line 73 toUtmUps8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtmUps8.easting: 6701004.587204
    test 368 line 74 toUtmUps8.northing: 2954368.258231
    test 369 line 74 toUtmUps8.convergence: 21.560153
    test 370 line 74 toUtmUps8.scale: 1.608554
    test 371 line 74 toUtmUps8.lat: 16.208377
    test 372 line 74 toUtmUps8.lon: 54.494282
    test 373 line 75 toUtmUps8.easting: 454986.218897
    test 374 line 75 toUtmUps8.northing: 4885087.887884
    test 375 line 75 toUtmUps8.convergence: 3.945648
    test 376 line 75 toUtmUps8.scale: 1.002147
    test 377 line 75 toUtmUps8.lat: 43.977936
    test 378 line 75 toUtmUps8.lon: 5.672541
    test skipped (13): line 76 toUtmUps8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtmUps8.easting: 1547627.594741
    test 380 line 77 toUtmUps8.northing: 6036584.538347
    test 381 line 77 toUtmUps8.convergence: 18.407629
    test 382 line 77 toUtmUps8.scale: 1.029132
    test 383 line 77 toUtmUps8.lat: 52.234165
    test 384 line 77 toUtmUps8.lon: 22.827655
    test 385 line 78 toUtmUps8.easting: 5221488.778597
    test 386 line 78 toUtmUps8.northing: 1762592.044392
    test 387 line 78 toUtmUps8.convergence: 10.927880
    test 388 line 78 toUtmUps8.scale: 1.356721
    test 389 line 78 toUtmUps8.lat: 11.674646
    test 390 line 78 toUtmUps8.lon: 43.500147
    test 391 line 79 toUtmUps8.easting: 4880570.297161
    test 392 line 79 toUtmUps8.northing: 3325433.988867
    test 393 line 79 toUtmUps8.convergence: 20.469862
    test 394 line 79 toUtmUps8.scale: 1.308476
    test 395 line 79 toUtmUps8.lat: 22.492753
    test 396 line 79 toUtmUps8.lon: 44.179153
    test skipped (14): line 80 toUtmUps8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtmUps8.easting: 71519.450458
    test 398 line 81 toUtmUps8.northing: 3654740.444852
    test 399 line 81 toUtmUps8.convergence: 0.417448
    test 400 line 81 toUtmUps8.scale: 0.999663
    test 401 line 81 toUtmUps8.lat: 33.028802
    test 402 line 81 toUtmUps8.lon: 0.765843
    test 403 line 82 toUtmUps8.easting: 4152797.795220
    test 404 line 82 toUtmUps8.northing: 7823098.502751
    test 405 line 82 toUtmUps8.convergence: 58.238901
    test 406 line 82 toUtmUps8.scale: 1.218052
    test 407 line 82 toUtmUps8.lat: 50.649195
    test 408 line 82 toUtmUps8.lon: 64.389076
    test 409 line 83 toUtmUps8.easting: 2926725.707639
    test 410 line 83 toUtmUps8.northing: 7904918.072844
    test 411 line 83 toUtmUps8.convergence: 51.592748
    test 412 line 83 toUtmUps8.scale: 1.106206
    test 413 line 83 toUtmUps8.lat: 58.820640
    test 414 line 83 toUtmUps8.lon: 55.841048
    test 415 line 84 toUtmUps8.easting: 1325509.113869
    test 416 line 84 toUtmUps8.northing: 9675214.948213
    test 417 line 84 toUtmUps8.convergence: 76.116213
    test 418 line 84 toUtmUps8.scale: 1.021136
    test 419 line 84 toUtmUps8.lat: 77.865762
    test 420 line 84 toUtmUps8.lon: 76.414618
    test 421 line 85 toUtmUps8.easting: 3045296.448926
    test 422 line 85 toUtmUps8.northing: 542153.443280
    test 423 line 85 toUtmUps8.convergence: 2.185095
    test 424 line 85 toUtmUps8.scale: 1.116664
    test 425 line 85 toUtmUps8.lat: 4.389639
    test 426 line 85 toUtmUps8.lon: 26.458976
    test 427 line 86 toUtmUps8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtmUps8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtmUps8.convergence: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtmUps8.scale: 3.267256
    test 431 line 86 toUtmUps8.lat: 13.924448
    test 432 line 86 toUtmUps8.lon: 79.017873
    test 433 line 87 toUtmUps8.easting: 8891099.704936
    test 434 line 87 toUtmUps8.northing: 162160.142227
    test 435 line 87 toUtmUps8.convergence: 1.312094
    test 436 line 87 toUtmUps8.scale: 2.157363
    test 437 line 87 toUtmUps8.lat: 0.679713
    test 438 line 87 toUtmUps8.lon: 62.036792
    test 439 line 88 toUtmUps8.easting: 4784814.214449
    test 440 line 88 toUtmUps8.northing: 2984497.432580
    test 441 line 88 toUtmUps8.convergence: 17.946545
    test 442 line 88 toUtmUps8.scale: 1.296116
    test 443 line 88 toUtmUps8.lat: 20.478281
    test 444 line 88 toUtmUps8.lon: 42.678234
    test 445 line 89 toUtmUps8.easting: 1772074.682154
    test 446 line 89 toUtmUps8.northing: 9491552.560143
    test 447 line 89 toUtmUps8.convergence: 73.634830
    test 448 line 89 toUtmUps8.scale: 1.038202
    test 449 line 89 toUtmUps8.lat: 73.695703
    test 450 line 89 toUtmUps8.lon: 74.259097
    test 451 line 90 toUtmUps8.easting: 1907649.782106
    test 452 line 90 toUtmUps8.northing: 6994232.429379
    test 453 line 90 toUtmUps8.convergence: 29.718929
    test 454 line 90 toUtmUps8.scale: 1.044503
    test 455 line 90 toUtmUps8.lat: 58.569370
    test 456 line 90 toUtmUps8.lon: 33.777549
    test 457 line 91 toUtmUps8.easting: 2084423.818962
    test 458 line 91 toUtmUps8.northing: 2211816.035619
    test 459 line 91 toUtmUps8.convergence: 6.556448
    test 460 line 91 toUtmUps8.scale: 1.053793
    test 461 line 91 toUtmUps8.lat: 18.933881
    test 462 line 91 toUtmUps8.lon: 19.492695
    test 463 line 92 toUtmUps8.easting: 1064373.671729
    test 464 line 92 toUtmUps8.northing: 7812482.547461
    test 465 line 92 toUtmUps8.convergence: 24.874124
    test 466 line 92 toUtmUps8.scale: 1.013490
    test 467 line 92 toUtmUps8.lat: 68.317934
    test 468 line 92 toUtmUps8.lon: 26.515687
    test skipped (15): line 93 toUtmUps8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtmUps8.easting: 6398096.677297
    test 470 line 94 toUtmUps8.northing: 4410894.752104
    test 471 line 94 toUtmUps8.convergence: 32.558023
    test 472 line 94 toUtmUps8.scale: 1.548004
    test 473 line 94 toUtmUps8.lat: 24.411298
    test 474 line 94 toUtmUps8.lon: 56.881823
    test 475 line 95 toUtmUps8.easting: 3138623.300415
    test 476 line 95 toUtmUps8.northing: 3082960.600798
    test 477 line 95 toUtmUps8.convergence: 13.557672
    test 478 line 95 toUtmUps8.scale: 1.123724
    test 479 line 95 toUtmUps8.lat: 24.571871
    test 480 line 95 toUtmUps8.lon: 30.073097
    test 481 line 96 toUtmUps8.easting: 2748325.794651
    test 482 line 96 toUtmUps8.northing: 4202811.912668
    test 483 line 96 toUtmUps8.convergence: 17.578706
    test 484 line 96 toUtmUps8.scale: 1.094102
    test 485 line 96 toUtmUps8.lat: 34.202576
    test 486 line 96 toUtmUps8.lon: 29.383166
    test 487 line 97 toUtmUps8.easting: 6677830.630367
    test 488 line 97 toUtmUps8.northing: 5350071.837395
    test 489 line 97 toUtmUps8.convergence: 41.306641
    test 490 line 97 toUtmUps8.scale: 1.599774
    test 491 line 97 toUtmUps8.lat: 27.756285
    test 492 line 97 toUtmUps8.lon: 61.881905
    test 493 line 98 toUtmUps8.easting: 5941536.667431
    test 494 line 98 toUtmUps8.northing: 3293112.175140
    test 495 line 98 toUtmUps8.convergence: 22.752845
    test 496 line 98 toUtmUps8.scale: 1.468473
    test 497 line 98 toUtmUps8.lat: 19.742270
    test 498 line 98 toUtmUps8.lon: 50.957821
    test 499 line 99 toUtmUps8.easting: 3152481.792567
    test 500 line 99 toUtmUps8.northing: 5903048.837978
    test 501 line 99 toUtmUps8.convergence: 31.494606
    test 502 line 99 toUtmUps8.scale: 1.124085
    test 503 line 99 toUtmUps8.lat: 45.453582
    test 504 line 99 toUtmUps8.lon: 40.659833
    test 505 line 100 toUtmUps8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtmUps8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtmUps8.convergence: 21.965869
    test 508 line 100 toUtmUps8.scale: 2.700296
    test 509 line 100 toUtmUps8.lat: 8.322144
    test 510 line 100 toUtmUps8.lon: 69.488157
    test 511 line 101 toUtmUps8.easting: 1964010.778021
    test 512 line 101 toUtmUps8.northing: 5634042.923056
    test 513 line 101 toUtmUps8.convergence: 20.117800
    test 514 line 101 toUtmUps8.scale: 1.047344
    test 515 line 101 toUtmUps8.lat: 47.749831
    test 516 line 101 toUtmUps8.lon: 26.322002
    test 517 line 102 toUtmUps8.easting: 2065306.424934
    test 518 line 102 toUtmUps8.northing: 2135008.468651
    test 519 line 102 toUtmUps8.convergence: 6.258981
    test 520 line 102 toUtmUps8.scale: 1.052800
    test 521 line 102 toUtmUps8.lat: 18.297493
    test 522 line 102 toUtmUps8.lon: 19.244669
    test 523 line 103 toUtmUps8.easting: 5127738.132976
    test 524 line 103 toUtmUps8.northing: 6793804.304411
    test 525 line 103 toUtmUps8.convergence: 50.557915
    test 526 line 103 toUtmUps8.scale: 1.339412
    test 527 line 103 toUtmUps8.lat: 40.834541
    test 528 line 103 toUtmUps8.lon: 61.650750
    test 529 line 104 toUtmUps8.easting: 8385525.148166
    test 530 line 104 toUtmUps8.northing: 6924932.344306
    test 531 line 104 toUtmUps8.convergence: 59.087561
    test 532 line 104 toUtmUps8.scale: 1.990364
    test 533 line 104 toUtmUps8.lat: 26.273247
    test 534 line 104 toUtmUps8.lon: 74.926694
    test 535 line 105 toUtmUps8.easting: 2297510.791909
    test 536 line 105 toUtmUps8.northing: 2805666.962834
    test 537 line 105 toUtmUps8.convergence: 9.301553
    test 538 line 105 toUtmUps8.scale: 1.065508
    test 539 line 105 toUtmUps8.lat: 23.698347
    test 540 line 105 toUtmUps8.lon: 22.155657
    test skipped (16): line 106 toUtmUps8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtmUps8.easting: 317518.455546
    test 542 line 107 toUtmUps8.northing: 1097517.583745
    test 543 line 107 toUtmUps8.convergence: 0.499004
    test 544 line 107 toUtmUps8.scale: 1.000848
    test 545 line 107 toUtmUps8.lat: 9.916091
    test 546 line 107 toUtmUps8.lon: 2.895277
    test 547 line 108 toUtmUps8.easting: 3856035.184888
    test 548 line 108 toUtmUps8.northing: 9141364.450290
    test 549 line 108 toUtmUps8.convergence: 75.972763
    test 550 line 108 toUtmUps8.scale: 1.186786
    test 551 line 108 toUtmUps8.lat: 56.553876
    test 552 line 108 toUtmUps8.lon: 78.215077
    test 553 line 109 toUtmUps8.easting: 1457484.942823
    test 554 line 109 toUtmUps8.northing: 9385297.101973
    test 555 line 109 toUtmUps8.convergence: 66.784662
    test 556 line 109 toUtmUps8.scale: 1.025660
    test 557 line 109 toUtmUps8.lat: 75.957631
    test 558 line 109 toUtmUps8.lon: 67.407383
    test 559 line 110 toUtmUps8.easting: 1304934.901841
    test 560 line 110 toUtmUps8.northing: 3604655.155715
    test 561 line 110 toUtmUps8.convergence: 7.343989
    test 562 line 110 toUtmUps8.scale: 1.020672
    test 563 line 110 toUtmUps8.lat: 31.826531
    test 564 line 110 toUtmUps8.lon: 13.731050
    test 565 line 111 toUtmUps8.easting: 1399093.491792
    test 566 line 111 toUtmUps8.northing: 8314607.120342
    test 567 line 111 toUtmUps8.convergence: 38.630161
    test 568 line 111 toUtmUps8.scale: 1.023625
    test 569 line 111 toUtmUps8.lat: 70.542985
    test 570 line 111 toUtmUps8.lon: 40.282055
    test 571 line 112 toUtmUps8.easting: 356983.618540
    test 572 line 112 toUtmUps8.northing: 4282309.048994
    test 573 line 112 toUtmUps8.convergence: 2.561485
    test 574 line 112 toUtmUps8.scale: 1.001170
    test 575 line 112 toUtmUps8.lat: 38.617487
    test 576 line 112 toUtmUps8.lon: 4.099838
    test 577 line 113 toUtmUps8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtmUps8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtmUps8.convergence: 12.752154
    test 580 line 113 toUtmUps8.scale: 2.511357
    test 581 line 113 toUtmUps8.lat: 5.389447
    test 582 line 113 toUtmUps8.lon: 66.729612
    test 583 line 114 toUtmUps8.easting: 6367592.504007
    test 584 line 114 toUtmUps8.northing: 1200437.077672
    test 585 line 114 toUtmUps8.convergence: 8.338041
    test 586 line 114 toUtmUps8.scale: 1.546210
    test 587 line 114 toUtmUps8.lat: 6.995168
    test 588 line 114 toUtmUps8.lon: 50.014763
    test 589 line 115 toUtmUps8.easting: 4391263.676460
    test 590 line 115 toUtmUps8.northing: 6325455.989408
    test 591 line 115 toUtmUps8.convergence: 42.653541
    test 592 line 115 toUtmUps8.scale: 1.245560
    test 593 line 115 toUtmUps8.lat: 42.321894
    test 594 line 115 toUtmUps8.lon: 53.784040
    test 595 line 116 toUtmUps8.easting: 6209880.527527
    test 596 line 116 toUtmUps8.northing: 2154754.449747
    test 597 line 116 toUtmUps8.convergence: 14.919512
    test 598 line 116 toUtmUps8.scale: 1.516560
    test 599 line 116 toUtmUps8.lat: 12.698515
    test 600 line 116 toUtmUps8.lon: 50.242047
    test 601 line 117 toUtmUps8.easting: 1507053.688772
    test 602 line 117 toUtmUps8.northing: 6261383.513280
    test 603 line 117 toUtmUps8.convergence: 19.280373
    test 604 line 117 toUtmUps8.scale: 1.027584
    test 605 line 117 toUtmUps8.lat: 54.207636
    test 606 line 117 toUtmUps8.lon: 23.325731
    test 607 line 118 toUtmUps8.easting: 8332725.003777
    test 608 line 118 toUtmUps8.northing: 3002712.329753
    test 609 line 118 toUtmUps8.convergence: 24.059212
    test 610 line 118 toUtmUps8.scale: 1.990450
    test 611 line 118 toUtmUps8.lat: 13.224787
    test 612 line 118 toUtmUps8.lon: 62.426698
    test 613 line 119 toUtmUps8.easting: 3958910.085235
    test 614 line 119 toUtmUps8.northing: 3462284.926102
    test 615 line 119 toUtmUps8.convergence: 18.546398
    test 616 line 119 toUtmUps8.scale: 1.199351
    test 617 line 119 toUtmUps8.lat: 25.650282
    test 618 line 119 toUtmUps8.lon: 37.710391
    test skipped (17): line 120 toUtmUps8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtmUps8.easting: 496148.253731
    test 620 line 121 toUtmUps8.northing: 6388503.365043
    test 621 line 121 toUtmUps8.convergence: 6.970955
    test 622 line 121 toUtmUps8.scale: 1.002620
    test 623 line 121 toUtmUps8.lat: 57.367533
    test 624 line 121 toUtmUps8.lon: 8.260866
    test 625 line 122 toUtmUps8.easting: 7375792.085850
    test 626 line 122 toUtmUps8.northing: 5544624.072155
    test 627 line 122 toUtmUps8.convergence: 44.510851
    test 628 line 122 toUtmUps8.scale: 1.745898
    test 629 line 122 toUtmUps8.lat: 25.958757
    test 630 line 122 toUtmUps8.lon: 65.760477
    test 631 line 123 toUtmUps8.easting: 2826258.041979
    test 632 line 123 toUtmUps8.northing: 5167759.816959
    test 633 line 123 toUtmUps8.convergence: 23.783897
    test 634 line 123 toUtmUps8.scale: 1.099415
    test 635 line 123 toUtmUps8.lat: 41.395848
    test 636 line 123 toUtmUps8.lon: 33.661790
    test 637 line 124 toUtmUps8.easting: 3958563.378851
    test 638 line 124 toUtmUps8.northing: 8499923.231243
    test 639 line 124 toUtmUps8.convergence: 66.570945
    test 640 line 124 toUtmUps8.scale: 1.197296
    test 641 line 124 toUtmUps8.lat: 54.266617
    test 642 line 124 toUtmUps8.lon: 70.602199
    test 643 line 125 toUtmUps8.easting: 4408189.533462
    test 644 line 125 toUtmUps8.northing: 8046312.003642
    test 645 line 125 toUtmUps8.convergence: 62.216959
    test 646 line 125 toUtmUps8.scale: 1.246750
    test 647 line 125 toUtmUps8.lat: 49.840393
    test 648 line 125 toUtmUps8.lon: 68.036728
    test 649 line 126 toUtmUps8.easting: 3629225.627512
    test 650 line 126 toUtmUps8.northing: 6371258.454645
    test 651 line 126 toUtmUps8.convergence: 38.881675
    test 652 line 126 toUtmUps8.scale: 1.165511
    test 653 line 126 toUtmUps8.lat: 46.306035
    test 654 line 126 toUtmUps8.lon: 48.085828
    test 655 line 127 toUtmUps8.easting: 602838.450710
    test 656 line 127 toUtmUps8.northing: 4851370.637205
    test 657 line 127 toUtmUps8.convergence: 5.160395
    test 658 line 127 toUtmUps8.scale: 1.004073
    test 659 line 127 toUtmUps8.lat: 43.570988
    test 660 line 127 toUtmUps8.lon: 7.464494
    test 661 line 128 toUtmUps8.easting: 764616.665051
    test 662 line 128 toUtmUps8.northing: 2164299.337945
    test 663 line 128 toUtmUps8.convergence: 2.429300
    test 664 line 128 toUtmUps8.scale: 1.006835
    test 665 line 128 toUtmUps8.lat: 19.427290
    test 666 line 128 toUtmUps8.lon: 7.268247
    test 667 line 129 toUtmUps8.easting: 5048953.021931
    test 668 line 129 toUtmUps8.northing: 1885974.057398
    test 669 line 129 toUtmUps8.convergence: 11.459804
    test 670 line 129 toUtmUps8.scale: 1.332207
    test 671 line 129 toUtmUps8.lat: 12.713794
    test 672 line 129 toUtmUps8.lon: 42.507018
    test 673 line 130 toUtmUps8.easting: 2293996.601155
    test 674 line 130 toUtmUps8.northing: 2392408.644221
    test 675 line 130 toUtmUps8.convergence: 7.791838
    test 676 line 130 toUtmUps8.scale: 1.065348
    test 677 line 130 toUtmUps8.lat: 20.238782
    test 678 line 130 toUtmUps8.lon: 21.566068
    test 679 line 131 toUtmUps8.easting: 1530603.839418
    test 680 line 131 toUtmUps8.northing: 7287841.459898
    test 681 line 131 toUtmUps8.convergence: 27.502921
    test 682 line 131 toUtmUps8.scale: 1.028416
    test 683 line 131 toUtmUps8.lat: 62.367847
    test 684 line 131 toUtmUps8.lon: 30.438849
    test 685 line 132 toUtmUps8.easting: 2660000.093152
    test 686 line 132 toUtmUps8.northing: 5161982.213248
    test 687 line 132 toUtmUps8.convergence: 22.629836
    test 688 line 132 toUtmUps8.scale: 1.087851
    test 689 line 132 toUtmUps8.lat: 41.891569
    test 690 line 132 toUtmUps8.lon: 31.959547
    test 691 line 133 toUtmUps8.easting: 5037478.329414
    test 692 line 133 toUtmUps8.northing: 8768172.379908
    test 693 line 133 toUtmUps8.convergence: 73.511182
    test 694 line 133 toUtmUps8.scale: 1.325919
    test 695 line 133 toUtmUps8.lat: 47.664248
    test 696 line 133 toUtmUps8.lon: 77.630062
    test 697 line 134 toUtmUps8.easting: 2289650.957799
    test 698 line 134 toUtmUps8.northing: 8784328.593607
    test 699 line 134 toUtmUps8.convergence: 60.786067
    test 700 line 134 toUtmUps8.scale: 1.064346
    test 701 line 134 toUtmUps8.lat: 67.259559
    test 702 line 134 toUtmUps8.lon: 62.715293
    test 703 line 135 toUtmUps8.easting: 647913.889744
    test 704 line 135 toUtmUps8.northing: 6742382.228217
    test 705 line 135 toUtmUps8.convergence: 10.252667
    test 706 line 135 toUtmUps8.scale: 1.004748
    test 707 line 135 toUtmUps8.lat: 60.295381
    test 708 line 135 toUtmUps8.lon: 11.763097
    test 709 line 136 toUtmUps8.easting: 1118372.698566
    test 710 line 136 toUtmUps8.northing: 9040627.942263
    test 711 line 136 toUtmUps8.convergence: 48.936803
    test 712 line 136 toUtmUps8.scale: 1.014920
    test 713 line 136 toUtmUps8.lat: 76.878914
    test 714 line 136 toUtmUps8.lon: 49.685773
    test 715 line 137 toUtmUps8.easting: 440696.510070
    test 716 line 137 toUtmUps8.northing: 5500355.826297
    test 717 line 137 toUtmUps8.convergence: 4.636104
    test 718 line 137 toUtmUps8.scale: 1.001986
    test 719 line 137 toUtmUps8.lat: 49.495349
    test 720 line 137 toUtmUps8.lon: 6.087551
    test 721 line 138 toUtmUps8.easting: 601728.149727
    test 722 line 138 toUtmUps8.northing: 9095352.048149
    test 723 line 138 toUtmUps8.convergence: 33.435771
    test 724 line 138 toUtmUps8.scale: 1.004027
    test 725 line 138 toUtmUps8.lat: 80.297265
    test 726 line 138 toUtmUps8.lon: 33.816372
    test 727 line 139 toUtmUps8.easting: 3481444.777827
    test 728 line 139 toUtmUps8.northing: 291665.708749
    test 729 line 139 toUtmUps8.convergence: 1.314726
    test 730 line 139 toUtmUps8.scale: 1.153534
    test 731 line 139 toUtmUps8.lat: 2.286437
    test 732 line 139 toUtmUps8.lon: 29.855149
    test 733 line 140 toUtmUps8.easting: 3515304.901524
    test 734 line 140 toUtmUps8.northing: 1443981.882918
    test 735 line 140 toUtmUps8.convergence: 6.641638
    test 736 line 140 toUtmUps8.scale: 1.156509
    test 737 line 140 toUtmUps8.lat: 11.264457
    test 738 line 140 toUtmUps8.lon: 30.743907
    test 739 line 141 toUtmUps8.easting: 160012.186959
    test 740 line 141 toUtmUps8.northing: 3922609.253231
    test 741 line 141 toUtmUps8.convergence: 1.022225
    test 742 line 141 toUtmUps8.scale: 0.999916
    test 743 line 141 toUtmUps8.lat: 35.434073
    test 744 line 141 toUtmUps8.lon: 1.762795
    test 745 line 142 toUtmUps8.easting: 4163744.245622
    test 746 line 142 toUtmUps8.northing: 936884.674804
    test 747 line 142 toUtmUps8.convergence: 4.892559
    test 748 line 142 toUtmUps8.scale: 1.222164
    test 749 line 142 toUtmUps8.lat: 6.923695
    test 750 line 142 toUtmUps8.lon: 35.289456
    test 751 line 143 toUtmUps8.easting: 6155200.017926
    test 752 line 143 toUtmUps8.northing: 6926306.628390
    test 753 line 143 toUtmUps8.convergence: 55.103258
    test 754 line 143 toUtmUps8.scale: 1.500556
    test 755 line 143 toUtmUps8.lat: 36.129672
    test 756 line 143 toUtmUps8.lon: 67.533176
    test skipped (18): line 144 toUtmUps8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'
    test skipped (19): line 145 toUtmUps8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtmUps8.easting: 3173034.802372
    test 758 line 146 toUtmUps8.northing: 7263421.942957
    test 759 line 146 toUtmUps8.convergence: 45.215808
    test 760 line 146 toUtmUps8.scale: 1.125410
    test 761 line 146 toUtmUps8.lat: 53.907276
    test 762 line 146 toUtmUps8.lon: 51.252904
    test skipped (20): line 147 toUtmUps8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtmUps8.easting: 2415561.483230
    test 764 line 148 toUtmUps8.northing: 8813225.217097
    test 765 line 148 toUtmUps8.convergence: 62.548978
    test 766 line 148 toUtmUps8.scale: 1.071748
    test 767 line 148 toUtmUps8.lat: 66.444100
    test 768 line 148 toUtmUps8.lon: 64.532960
    test 769 line 149 toUtmUps8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtmUps8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtmUps8.convergence: 14.838483
    test 772 line 149 toUtmUps8.scale: 2.380716
    test 773 line 149 toUtmUps8.lat: 6.670965
    test 774 line 149 toUtmUps8.lon: 65.660408
    test 775 line 150 toUtmUps8.easting: 727939.438391
    test 776 line 150 toUtmUps8.northing: 3684363.236810
    test 777 line 150 toUtmUps8.convergence: 4.266227
    test 778 line 150 toUtmUps8.scale: 1.006140
    test 779 line 150 toUtmUps8.lat: 33.054057
    test 780 line 150 toUtmUps8.lon: 7.787458
    test 781 line 151 toUtmUps8.easting: 1250765.991085
    test 782 line 151 toUtmUps8.northing: 792869.242719
    test 783 line 151 toUtmUps8.convergence: 1.396497
    test 784 line 151 toUtmUps8.scale: 1.019026
    test 785 line 151 toUtmUps8.lat: 7.035525
    test 786 line 151 toUtmUps8.lon: 11.253707
    test 787 line 152 toUtmUps8.easting: 710421.705887
    test 788 line 152 toUtmUps8.northing: 5019406.075928
    test 789 line 152 toUtmUps8.convergence: 6.393949
    test 790 line 152 toUtmUps8.scale: 1.005812
    test 791 line 152 toUtmUps8.lat: 44.971340
    test 792 line 152 toUtmUps8.lon: 9.009304
    test 793 line 153 toUtmUps8.easting: 4600995.074643
    test 794 line 153 toUtmUps8.northing: 4505712.084593
    test 795 line 153 toUtmUps8.convergence: 27.997458
    test 796 line 153 toUtmUps8.scale: 1.271841
    test 797 line 153 toUtmUps8.lat: 30.821397
    test 798 line 153 toUtmUps8.lon: 45.970577
    test 799 line 154 toUtmUps8.easting: 557642.627782
    test 800 line 154 toUtmUps8.northing: 7006911.251644
    test 801 line 154 toUtmUps8.convergence: 9.769903
    test 802 line 154 toUtmUps8.scale: 1.003411
    test 803 line 154 toUtmUps8.lat: 62.763886
    test 804 line 154 toUtmUps8.lon: 10.960144
    test 805 line 155 toUtmUps8.easting: 4635062.294291
    test 806 line 155 toUtmUps8.northing: 2702556.153311
    test 807 line 155 toUtmUps8.convergence: 15.779547
    test 808 line 155 toUtmUps8.scale: 1.277178
    test 809 line 155 toUtmUps8.lat: 18.888611
    test 810 line 155 toUtmUps8.lon: 41.009871
    test skipped (21): line 156 toUtmUps8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtmUps8.easting: 882126.661736
    test 812 line 157 toUtmUps8.northing: 7947612.369506
    test 813 line 157 toUtmUps8.convergence: 22.429487
    test 814 line 157 toUtmUps8.scale: 1.009132
    test 815 line 157 toUtmUps8.lat: 70.063902
    test 816 line 157 toUtmUps8.lon: 23.705255
    test skipped (22): line 158 toUtmUps8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtmUps8.easting: 6500508.399850
    test 818 line 159 toUtmUps8.northing: 6956476.342368
    test 819 line 159 toUtmUps8.convergence: 56.237116
    test 820 line 159 toUtmUps8.scale: 1.563162
    test 821 line 159 toUtmUps8.lat: 34.551257
    test 822 line 159 toUtmUps8.lon: 69.111091
    test 823 line 160 toUtmUps8.easting: 3884036.641314
    test 824 line 160 toUtmUps8.northing: 6890167.411733
    test 825 line 160 toUtmUps8.convergence: 45.760130
    test 826 line 160 toUtmUps8.scale: 1.190167
    test 827 line 160 toUtmUps8.lat: 47.929051
    test 828 line 160 toUtmUps8.lon: 54.103418
    test 829 line 161 toUtmUps8.easting: 217855.546078
    test 830 line 161 toUtmUps8.northing: 6184108.122568
    test 831 line 161 toUtmUps8.convergence: 2.870993
    test 832 line 161 toUtmUps8.scale: 1.000182
    test 833 line 161 toUtmUps8.lat: 55.753536
    test 834 line 161 toUtmUps8.lon: 3.471798
    test skipped (23): line 162 toUtmUps8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtmUps8.easting: 3469855.989805
    test 836 line 163 toUtmUps8.northing: 7723193.799228
    test 837 line 163 toUtmUps8.convergence: 53.114700
    test 838 line 163 toUtmUps8.scale: 1.150540
    test 839 line 163 toUtmUps8.lat: 54.510125
    test 840 line 163 toUtmUps8.lon: 58.556056
    test skipped (24): line 164 toUtmUps8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtmUps8.easting: 5798639.662224
    test 842 line 165 toUtmUps8.northing: 5305387.640916
    test 843 line 165 toUtmUps8.convergence: 38.617257
    test 844 line 165 toUtmUps8.scale: 1.442263
    test 845 line 165 toUtmUps8.lat: 30.911943
    test 846 line 165 toUtmUps8.lon: 57.114102
    test 847 line 166 toUtmUps8.easting: 9464.934388
    test 848 line 166 toUtmUps8.northing: 6489121.624944
    test 849 line 166 toUtmUps8.convergence: 0.138696
    test 850 line 166 toUtmUps8.scale: 0.999601
    test 851 line 166 toUtmUps8.lat: 58.542493
    test 852 line 166 toUtmUps8.lon: 0.162593
    test skipped (25): line 167 toUtmUps8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtmUps8.easting: 2719653.543469
    test 854 line 168 toUtmUps8.northing: 9362389.163495
    test 855 line 168 toUtmUps8.convergence: 76.049670
    test 856 line 168 toUtmUps8.scale: 1.091315
    test 857 line 168 toUtmUps8.lat: 65.692275
    test 858 line 168 toUtmUps8.lon: 77.241377
    test 859 line 169 toUtmUps8.easting: 4845341.924698
    test 860 line 169 toUtmUps8.northing: 8710522.326901
    test 861 line 169 toUtmUps8.convergence: 72.320942
    test 862 line 169 toUtmUps8.scale: 1.300382
    test 863 line 169 toUtmUps8.lat: 48.806211
    test 864 line 169 toUtmUps8.lon: 76.486365
    test skipped (26): line 170 toUtmUps8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtmUps8.easting: 7074299.823000
    test 866 line 171 toUtmUps8.northing: 1648736.065055
    test 867 line 171 toUtmUps8.convergence: 12.145925
    test 868 line 171 toUtmUps8.scale: 1.687551
    test 869 line 171 toUtmUps8.lat: 8.766053
    test 870 line 171 toUtmUps8.lon: 54.367539
    test 871 line 172 toUtmUps8.easting: 3689072.579308
    test 872 line 172 toUtmUps8.northing: 2230802.665211
    test 873 line 172 toUtmUps8.convergence: 10.856248
    test 874 line 172 toUtmUps8.scale: 1.172689
    test 875 line 172 toUtmUps8.lat: 17.095495
    test 876 line 172 toUtmUps8.lon: 33.059128
    test 877 line 173 toUtmUps8.easting: 8102565.885587
    test 878 line 173 toUtmUps8.northing: 5167396.617580
    test 879 line 173 toUtmUps8.convergence: 42.324886
    test 880 line 173 toUtmUps8.scale: 1.921927
    test 881 line 173 toUtmUps8.lat: 22.142861
    test 882 line 173 toUtmUps8.lon: 67.200684
    test 883 line 174 toUtmUps8.easting: 8181271.353564
    test 884 line 174 toUtmUps8.northing: 4425436.547185
    test 885 line 174 toUtmUps8.convergence: 35.900845
    test 886 line 174 toUtmUps8.scale: 1.945017
    test 887 line 174 toUtmUps8.lat: 19.222623
    test 888 line 174 toUtmUps8.lon: 65.180785
    test 889 line 175 toUtmUps8.easting: 767067.394003
    test 890 line 175 toUtmUps8.northing: 3701745.857296
    test 891 line 175 toUtmUps8.convergence: 4.519201
    test 892 line 175 toUtmUps8.scale: 1.006863
    test 893 line 175 toUtmUps8.lat: 33.182474
    test 894 line 175 toUtmUps8.lon: 8.216952
    test 895 line 176 toUtmUps8.easting: 6688114.168572
    test 896 line 176 toUtmUps8.northing: 2052857.299639
    test 897 line 176 toUtmUps8.convergence: 14.766191
    test 898 line 176 toUtmUps8.scale: 1.607200
    test 899 line 176 toUtmUps8.lat: 11.417963
    test 900 line 176 toUtmUps8.lon: 52.808691
    test 901 line 177 toUtmUps8.easting: 5608408.773761
    test 902 line 177 toUtmUps8.northing: 3859055.659110
    test 903 line 177 toUtmUps8.convergence: 26.244151
    test 904 line 177 toUtmUps8.scale: 1.413463
    test 905 line 177 toUtmUps8.lat: 23.836688
    test 906 line 177 toUtmUps8.lon: 50.500180
    test 907 line 178 toUtmUps8.easting: 3836942.765275
    test 908 line 178 toUtmUps8.northing: 6415467.634326
    test 909 line 178 toUtmUps8.convergence: 40.575885
    test 910 line 178 toUtmUps8.scale: 1.185615
    test 911 line 178 toUtmUps8.lat: 45.550020
    test 912 line 178 toUtmUps8.lon: 50.148036
    test 913 line 179 toUtmUps8.easting: 1298730.366025
    test 914 line 179 toUtmUps8.northing: 6021453.000792
    test 915 line 179 toUtmUps8.convergence: 15.613320
    test 916 line 179 toUtmUps8.scale: 1.020367
    test 917 line 179 toUtmUps8.lat: 52.746079
    test 918 line 179 toUtmUps8.lon: 19.343926
    test 919 line 180 toUtmUps8.easting: 416934.289208
    test 920 line 180 toUtmUps8.northing: 7295683.451705
    test 921 line 180 toUtmUps8.convergence: 8.238232
    test 922 line 180 toUtmUps8.scale: 1.001729
    test 923 line 180 toUtmUps8.lat: 65.513348
    test 924 line 180 toUtmUps8.lon: 9.039529
    test 925 line 181 toUtmUps8.easting: 4336076.850889
    test 926 line 181 toUtmUps8.northing: 7617975.722779
    test 927 line 181 toUtmUps8.convergence: 56.537088
    test 928 line 181 toUtmUps8.scale: 1.238582
    test 929 line 181 toUtmUps8.lat: 48.709795
    test 930 line 181 toUtmUps8.lon: 63.554005
    test 931 line 182 toUtmUps8.easting: 168047.336980
    test 932 line 182 toUtmUps8.northing: 2185000.046530
    test 933 line 182 toUtmUps8.convergence: 0.542187
    test 934 line 182 toUtmUps8.scale: 0.999949
    test 935 line 182 toUtmUps8.lat: 19.753509
    test 936 line 182 toUtmUps8.lon: 1.603846
    test 937 line 183 toUtmUps8.easting: 8276281.328790
    test 938 line 183 toUtmUps8.northing: 263444.350545
    test 939 line 183 toUtmUps8.convergence: 2.071435
    test 940 line 183 toUtmUps8.scale: 1.980314
    test 941 line 183 toUtmUps8.lat: 1.202816
    test 942 line 183 toUtmUps8.lon: 59.377276
    test 943 line 184 toUtmUps8.easting: 4772573.810710
    test 944 line 184 toUtmUps8.northing: 6765710.336002
    test 945 line 184 toUtmUps8.convergence: 48.857561
    test 946 line 184 toUtmUps8.scale: 1.291911
    test 947 line 184 toUtmUps8.lat: 42.564975
    test 948 line 184 toUtmUps8.lon: 59.356947
    test 949 line 185 toUtmUps8.easting: 5427755.074639
    test 950 line 185 toUtmUps8.northing: 1556055.820924
    test 951 line 185 toUtmUps8.convergence: 9.862178
    test 952 line 185 toUtmUps8.scale: 1.387394
    test 953 line 185 toUtmUps8.lat: 10.090572
    test 954 line 185 toUtmUps8.lon: 44.604132
    test 955 line 186 toUtmUps8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtmUps8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtmUps8.convergence: 50.784827
    test 958 line 186 toUtmUps8.scale: 3.149567
    test 959 line 186 toUtmUps8.lat: 14.133028
    test 960 line 186 toUtmUps8.lon: 78.097533
    test 961 line 187 toUtmUps8.easting: 7152433.802688
    test 962 line 187 toUtmUps8.northing: 761390.695844
    test 963 line 187 toUtmUps8.convergence: 5.607350
    test 964 line 187 toUtmUps8.scale: 1.705261
    test 965 line 187 toUtmUps8.lat: 4.031123
    test 966 line 187 toUtmUps8.lon: 54.048782
    test 967 line 188 toUtmUps8.easting: 3105651.390901
    test 968 line 188 toUtmUps8.northing: 9426026.169064
    test 969 line 188 toUtmUps8.convergence: 78.750206
    test 970 line 188 toUtmUps8.scale: 1.119737
    test 971 line 188 toUtmUps8.lat: 62.746603
    test 972 line 188 toUtmUps8.lon: 79.968641
    test 973 line 189 toUtmUps8.easting: 2959009.639022
    test 974 line 189 toUtmUps8.northing: 8339242.269282
    test 975 line 189 toUtmUps8.convergence: 58.460865
    test 976 line 189 toUtmUps8.scale: 1.108554
    test 977 line 189 toUtmUps8.lat: 60.626429
    test 978 line 189 toUtmUps8.lon: 61.851551
    test 979 line 190 toUtmUps8.easting: 8640472.267145
    test 980 line 190 toUtmUps8.northing: 6230320.417931
    test 981 line 190 toUtmUps8.convergence: 52.816810
    test 982 line 190 toUtmUps8.scale: 2.062973
    test 983 line 190 toUtmUps8.lat: 23.600626
    test 984 line 190 toUtmUps8.lon: 72.811634
    test 985 line 191 toUtmUps8.easting: 811352.108932
    test 986 line 191 toUtmUps8.northing: 9816129.813481
    test 987 line 191 toUtmUps8.convergence: 77.299184
    test 988 line 191 toUtmUps8.scale: 1.007651
    test 989 line 191 toUtmUps8.lat: 82.572236
    test 990 line 191 toUtmUps8.lon: 77.402323
    test 991 line 192 toUtmUps8.easting: 6521874.973458
    test 992 line 192 toUtmUps8.northing: 1053612.479744
    test 993 line 192 toUtmUps8.convergence: 7.407328
    test 994 line 192 toUtmUps8.scale: 1.575529
    test 995 line 192 toUtmUps8.lat: 6.030051
    test 996 line 192 toUtmUps8.lon: 50.783505
    test 997 line 193 toUtmUps8.easting: 3477983.997875
    test 998 line 193 toUtmUps8.northing: 5651613.325947
    test 999 line 193 toUtmUps8.convergence: 31.530673
    test 1000 line 193 toUtmUps8.scale: 1.151875
    test 1001 line 193 toUtmUps8.lat: 42.411523
    test 1002 line 193 toUtmUps8.lon: 42.258009
    test 1003 line 194 toUtmUps8.easting: 629892.822243
    test 1004 line 194 toUtmUps8.northing: 3283914.910451
    test 1005 line 194 toUtmUps8.convergence: 3.210482
    test 1006 line 194 toUtmUps8.scale: 1.004499
    test 1007 line 194 toUtmUps8.lat: 29.526120
    test 1008 line 194 toUtmUps8.lon: 6.493069
    test 1009 line 195 toUtmUps8.easting: 3381879.687227
    test 1010 line 195 toUtmUps8.northing: 5103629.325665
    test 1011 line 195 toUtmUps8.convergence: 26.748108
    test 1012 line 195 toUtmUps8.scale: 1.143559
    test 1013 line 195 toUtmUps8.lat: 39.021853
    test 1014 line 195 toUtmUps8.lon: 38.641779
    test 1015 line 196 toUtmUps8.easting: 2815986.534177
    test 1016 line 196 toUtmUps8.northing: 9387029.120718
    test 1017 line 196 toUtmUps8.convergence: 76.967262
    test 1018 line 196 toUtmUps8.scale: 1.098032
    test 1019 line 196 toUtmUps8.lat: 64.971850
    test 1020 line 196 toUtmUps8.lon: 78.151893
    test 1021 line 197 toUtmUps8.easting: 3398195.889603
    test 1022 line 197 toUtmUps8.northing: 9138936.031490
    test 1023 line 197 toUtmUps8.convergence: 74.477499
    test 1024 line 197 toUtmUps8.scale: 1.144009
    test 1025 line 197 toUtmUps8.lat: 59.961819
    test 1026 line 197 toUtmUps8.lon: 76.473422
    test 1027 line 198 toUtmUps8.easting: 2421734.754637
    test 1028 line 198 toUtmUps8.northing: 5002372.094991
    test 1029 line 198 toUtmUps8.convergence: 20.017082
    test 1030 line 198 toUtmUps8.scale: 1.072592
    test 1031 line 198 toUtmUps8.lat: 41.374040
    test 1032 line 198 toUtmUps8.lon: 28.848343
    test 1033 line 199 toUtmUps8.easting: 2360869.895525
    test 1034 line 199 toUtmUps8.northing: 9553298.449536
    test 1035 line 199 toUtmUps8.convergence: 78.848205
    test 1036 line 199 toUtmUps8.scale: 1.068453
    test 1037 line 199 toUtmUps8.lat: 68.946087
    test 1038 line 199 toUtmUps8.lon: 79.574523
    test skipped (27): line 200 toUtmUps8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtmUps8.easting: 1327758.704795
    test 1040 line 201 toUtmUps8.northing: 2375509.241683
    test 1041 line 201 toUtmUps8.convergence: 4.617572
    test 1042 line 201 toUtmUps8.scale: 1.021465
    test 1043 line 201 toUtmUps8.lat: 21.000252
    test 1044 line 201 toUtmUps8.lon: 12.697444
    test 1045 line 202 toUtmUps8.easting: 2070860.327644
    test 1046 line 202 toUtmUps8.northing: 8604500.719581
    test 1047 line 202 toUtmUps8.convergence: 54.722761
    test 1048 line 202 toUtmUps8.scale: 1.052469
    test 1049 line 202 toUtmUps8.lat: 68.015227
    test 1050 line 202 toUtmUps8.lon: 56.732419
    test 1051 line 203 toUtmUps8.easting: 6564776.654864
    test 1052 line 203 toUtmUps8.northing: 8171207.177379
    test 1053 line 203 toUtmUps8.convergence: 69.237523
    test 1054 line 203 toUtmUps8.scale: 1.573894
    test 1055 line 203 toUtmUps8.lat: 37.423675
    test 1056 line 203 toUtmUps8.lon: 76.947359
    test 1057 line 204 toUtmUps8.easting: 592653.553821
    test 1058 line 204 toUtmUps8.northing: 6125529.810052
    test 1059 line 204 toUtmUps8.convergence: 7.600785
    test 1060 line 204 toUtmUps8.scale: 1.003912
    test 1061 line 204 toUtmUps8.lat: 54.922707
    test 1062 line 204 toUtmUps8.lon: 9.260818
    test 1063 line 205 toUtmUps8.easting: 693459.671821
    test 1064 line 205 toUtmUps8.northing: 6943779.991032
    test 1065 line 205 toUtmUps8.convergence: 11.787587
    test 1066 line 205 toUtmUps8.scale: 1.005496
    test 1067 line 205 toUtmUps8.lat: 61.982810
    test 1068 line 205 toUtmUps8.lon: 13.299659
    test 1069 line 206 toUtmUps8.easting: 1838956.187625
    test 1070 line 206 toUtmUps8.northing: 3511959.612381
    test 1071 line 206 toUtmUps8.convergence: 9.844313
    test 1072 line 206 toUtmUps8.scale: 1.041603
    test 1073 line 206 toUtmUps8.lat: 30.324214
    test 1074 line 206 toUtmUps8.lon: 18.959769
    test 1075 line 207 toUtmUps8.easting: 4460690.884597
    test 1076 line 207 toUtmUps8.northing: 5541873.235403
    test 1077 line 207 toUtmUps8.convergence: 35.768613
    test 1078 line 207 toUtmUps8.scale: 1.254179
    test 1079 line 207 toUtmUps8.lat: 37.629667
    test 1080 line 207 toUtmUps8.lon: 49.649131
    test 1081 line 208 toUtmUps8.easting: 2311168.998941
    test 1082 line 208 toUtmUps8.northing: 9480561.869119
    test 1083 line 208 toUtmUps8.convergence: 76.828257
    test 1084 line 208 toUtmUps8.scale: 1.065556
    test 1085 line 208 toUtmUps8.lat: 69.225574
    test 1086 line 208 toUtmUps8.lon: 77.656135
    test 1087 line 209 toUtmUps8.easting: 4111775.114451
    test 1088 line 209 toUtmUps8.northing: 6509014.348792
    test 1089 line 209 toUtmUps8.convergence: 43.052130
    test 1090 line 209 toUtmUps8.scale: 1.214125
    test 1091 line 209 toUtmUps8.lat: 44.698478
    test 1092 line 209 toUtmUps8.lon: 52.979304
    test 1093 line 210 toUtmUps8.easting: 75358.261962
    test 1094 line 210 toUtmUps8.northing: 7711258.662251
    test 1095 line 210 toUtmUps8.convergence: 1.806297
    test 1096 line 210 toUtmUps8.scale: 0.999669
    test 1097 line 210 toUtmUps8.lat: 69.499594
    test 1098 line 210 toUtmUps8.lon: 1.928336
    test skipped (28): line 211 toUtmUps8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtmUps8.easting: 954378.415174
    test 1100 line 212 toUtmUps8.northing: 7449110.669807
    test 1101 line 212 toUtmUps8.convergence: 19.380657
    test 1102 line 212 toUtmUps8.scale: 1.010768
    test 1103 line 212 toUtmUps8.lat: 65.699839
    test 1104 line 212 toUtmUps8.lon: 21.104725
    test 1105 line 213 toUtmUps8.easting: 720971.793706
    test 1106 line 213 toUtmUps8.northing: 5265195.121555
    test 1107 line 213 toUtmUps8.convergence: 7.002995
    test 1108 line 213 toUtmUps8.scale: 1.005995
    test 1109 line 213 toUtmUps8.lat: 47.143648
    test 1110 line 213 toUtmUps8.lon: 9.512189
    test 1111 line 214 toUtmUps8.easting: 561561.493937
    test 1112 line 214 toUtmUps8.northing: 989910.236221
    test 1113 line 214 toUtmUps8.convergence: 0.793118
    test 1114 line 214 toUtmUps8.scale: 1.003505
    test 1115 line 214 toUtmUps8.lat: 8.920167
    test 1116 line 214 toUtmUps8.lon: 5.101513
    test 1117 line 215 toUtmUps8.easting: 3446829.634468
    test 1118 line 215 toUtmUps8.northing: 9232868.155664
    test 1119 line 215 toUtmUps8.convergence: 76.279075
    test 1120 line 215 toUtmUps8.scale: 1.148263
    test 1121 line 215 toUtmUps8.lat: 59.778971
    test 1122 line 215 toUtmUps8.lon: 78.080322
    test skipped (29): line 216 toUtmUps8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtmUps8.easting: 8973188.480293
    test 1124 line 217 toUtmUps8.northing: 7042230.087021
    test 1125 line 217 toUtmUps8.convergence: 60.872456
    test 1126 line 217 toUtmUps8.scale: 2.156098
    test 1127 line 217 toUtmUps8.lat: 24.310973
    test 1128 line 217 toUtmUps8.lon: 76.823777
    test 1129 line 218 toUtmUps8.easting: 126314.191618
    test 1130 line 218 toUtmUps8.northing: 396006.687921
    test 1131 line 218 toUtmUps8.convergence: 0.071065
    test 1132 line 218 toUtmUps8.scale: 0.999798
    test 1133 line 218 toUtmUps8.lat: 3.582041
    test 1134 line 218 toUtmUps8.lon: 1.137286
    test 1135 line 219 toUtmUps8.easting: 5247652.345647
    test 1136 line 219 toUtmUps8.northing: 8670513.359752
    test 1137 line 219 toUtmUps8.convergence: 72.700498
    test 1138 line 219 toUtmUps8.scale: 1.355272
    test 1139 line 219 toUtmUps8.lat: 46.124233
    test 1140 line 219 toUtmUps8.lon: 77.313118
    test skipped (30): line 220 toUtmUps8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtmUps8.easting: 6300112.758236
    test 1142 line 221 toUtmUps8.northing: 93835.917364
    test 1143 line 221 toUtmUps8.convergence: 0.644805
    test 1144 line 221 toUtmUps8.scale: 1.534073
    test 1145 line 221 toUtmUps8.lat: 0.553171
    test 1146 line 221 toUtmUps8.lon: 49.117104
    test 1147 line 222 toUtmUps8.easting: 3894813.593782
    test 1148 line 222 toUtmUps8.northing: 4833832.341027
    test 1149 line 222 toUtmUps8.convergence: 27.453298
    test 1150 line 222 toUtmUps8.scale: 1.192135
    test 1151 line 222 toUtmUps8.lat: 35.361587
    test 1152 line 222 toUtmUps8.lon: 41.860599
    test 1153 line 223 toUtmUps8.easting: 402511.346712
    test 1154 line 223 toUtmUps8.northing: 3520621.561911
    test 1155 line 223 toUtmUps8.convergence: 2.238474
    test 1156 line 223 toUtmUps8.scale: 1.001599
    test 1157 line 223 toUtmUps8.lat: 31.750314
    test 1158 line 223 toUtmUps8.lon: 4.248167
    test 1159 line 224 toUtmUps8.easting: 5357378.503148
    test 1160 line 224 toUtmUps8.northing: 2772997.602234
    test 1161 line 224 toUtmUps8.convergence: 17.823560
    test 1162 line 224 toUtmUps8.scale: 1.376031
    test 1163 line 224 toUtmUps8.lat: 17.924336
    test 1164 line 224 toUtmUps8.lon: 46.096402
    test 1165 line 225 toUtmUps8.easting: 2807553.985866
    test 1166 line 225 toUtmUps8.northing: 8177847.980275
    test 1167 line 225 toUtmUps8.convergence: 54.680045
    test 1168 line 225 toUtmUps8.scale: 1.097531
    test 1169 line 225 toUtmUps8.lat: 60.931488
    test 1170 line 225 toUtmUps8.lon: 58.221214
    test skipped (31): line 226 toUtmUps8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'
    test skipped (32): line 227 toUtmUps8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtmUps8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtmUps8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtmUps8.convergence: 42.613968
    test 1174 line 228 toUtmUps8.scale: 3.314412
    test 1175 line 228 toUtmUps8.lat: 11.709763
    test 1176 line 228 toUtmUps8.lon: 76.760295
    test 1177 line 229 toUtmUps8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtmUps8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtmUps8.convergence: 33.383025
    test 1180 line 229 toUtmUps8.scale: 2.724754
    test 1181 line 229 toUtmUps8.lat: 12.009498
    test 1182 line 229 toUtmUps8.lon: 71.782351
    test skipped (33): line 230 toUtmUps8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtmUps8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtmUps8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtmUps8.convergence: 23.145404
    test 1186 line 231 toUtmUps8.scale: 2.998408
    test 1187 line 231 toUtmUps8.lat: 7.721128
    test 1188 line 231 toUtmUps8.lon: 71.662731
    test 1189 line 232 toUtmUps8.easting: 4411584.447941
    test 1190 line 232 toUtmUps8.northing: 4956173.694407
    test 1191 line 232 toUtmUps8.convergence: 30.713919
    test 1192 line 232 toUtmUps8.scale: 1.248736
    test 1193 line 232 toUtmUps8.lat: 34.295026
    test 1194 line 232 toUtmUps8.lon: 46.442191
    test 1195 line 233 toUtmUps8.easting: 672108.897905
    test 1196 line 233 toUtmUps8.northing: 4751554.657054
    test 1197 line 233 toUtmUps8.convergence: 5.569178
    test 1198 line 233 toUtmUps8.scale: 1.005162
    test 1199 line 233 toUtmUps8.lat: 42.622496
    test 1200 line 233 toUtmUps8.lon: 8.193605
    test 1201 line 234 toUtmUps8.easting: 5022964.290579
    test 1202 line 234 toUtmUps8.northing: 6860418.199502
    test 1203 line 234 toUtmUps8.convergence: 50.862230
    test 1204 line 234 toUtmUps8.scale: 1.324925
    test 1205 line 234 toUtmUps8.lat: 41.667780
    test 1206 line 234 toUtmUps8.lon: 61.518288
    test 1207 line 235 toUtmUps8.easting: 1669655.595207
    test 1208 line 235 toUtmUps8.northing: 4152086.537021
    test 1209 line 235 toUtmUps8.convergence: 11.110237
    test 1210 line 235 toUtmUps8.scale: 1.034138
    test 1211 line 235 toUtmUps8.lat: 36.060369
    test 1212 line 235 toUtmUps8.lon: 18.444112
    test 1213 line 236 toUtmUps8.easting: 6055876.729655
    test 1214 line 236 toUtmUps8.northing: 4896837.552619
    test 1215 line 236 toUtmUps8.convergence: 35.799747
    test 1216 line 236 toUtmUps8.scale: 1.485967
    test 1217 line 236 toUtmUps8.lat: 27.948091
    test 1218 line 236 toUtmUps8.lon: 56.816429
    test 1219 line 237 toUtmUps8.easting: 1209214.164379
    test 1220 line 237 toUtmUps8.northing: 7266409.859178
    test 1221 line 237 toUtmUps8.convergence: 22.319633
    test 1222 line 237 toUtmUps8.scale: 1.017554
    test 1223 line 237 toUtmUps8.lat: 63.386030
    test 1224 line 237 toUtmUps8.lon: 24.662716
    test 1225 line 238 toUtmUps8.easting: 5154564.559584
    test 1226 line 238 toUtmUps8.northing: 698118.349975
    test 1227 line 238 toUtmUps8.convergence: 4.242360
    test 1228 line 238 toUtmUps8.scale: 1.347481
    test 1229 line 238 toUtmUps8.lat: 4.680922
    test 1230 line 238 toUtmUps8.lon: 42.114426
    test 1231 line 239 toUtmUps8.easting: 2695149.806543
    test 1232 line 239 toUtmUps8.northing: 8208197.765605
    test 1233 line 239 toUtmUps8.convergence: 54.178615
    test 1234 line 239 toUtmUps8.scale: 1.089730
    test 1235 line 239 toUtmUps8.lat: 61.826625
    test 1236 line 239 toUtmUps8.lon: 57.525096
    test 1237 line 240 toUtmUps8.easting: 3394792.327820
    test 1238 line 240 toUtmUps8.northing: 3217583.415552
    test 1239 line 240 toUtmUps8.convergence: 15.165863
    test 1240 line 240 toUtmUps8.scale: 1.145285
    test 1241 line 240 toUtmUps8.lat: 25.104353
    test 1242 line 240 toUtmUps8.lon: 32.528660
    test 1243 line 241 toUtmUps8.easting: 1429160.966985
    test 1244 line 241 toUtmUps8.northing: 8212685.362032
    test 1245 line 241 toUtmUps8.convergence: 37.484904
    test 1246 line 241 toUtmUps8.scale: 1.024676
    test 1247 line 241 toUtmUps8.lat: 69.678351
    test 1248 line 241 toUtmUps8.lon: 39.275513
    test skipped (34): line 242 toUtmUps8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtmUps8.easting: 1990722.928606
    test 1250 line 243 toUtmUps8.northing: 7569202.065162
    test 1251 line 243 toUtmUps8.convergence: 37.075276
    test 1252 line 243 toUtmUps8.scale: 1.048486
    test 1253 line 243 toUtmUps8.lat: 62.300208
    test 1254 line 243 toUtmUps8.lon: 40.474051
    test 1255 line 244 toUtmUps8.easting: 1554980.099559
    test 1256 line 244 toUtmUps8.northing: 1449423.919586
    test 1257 line 244 toUtmUps8.convergence: 3.188328
    test 1258 line 244 toUtmUps8.scale: 1.029664
    test 1259 line 244 toUtmUps8.lat: 12.721776
    test 1260 line 244 toUtmUps8.lon: 14.190003
    test 1261 line 245 toUtmUps8.easting: 785205.450196
    test 1262 line 245 toUtmUps8.northing: 5575158.423096
    test 1263 line 245 toUtmUps8.convergence: 8.388417
    test 1264 line 245 toUtmUps8.scale: 1.007181
    test 1265 line 245 toUtmUps8.lat: 49.811296
    test 1266 line 245 toUtmUps8.lon: 10.925011
    test 1267 line 246 toUtmUps8.easting: 3310405.988313
    test 1268 line 246 toUtmUps8.northing: 5955022.233881
    test 1269 line 246 toUtmUps8.convergence: 33.007587
    test 1270 line 246 toUtmUps8.scale: 1.137141
    test 1271 line 246 toUtmUps8.lat: 45.132680
    test 1272 line 246 toUtmUps8.lon: 42.478624
    test 1273 line 247 toUtmUps8.easting: 4733460.960666
    test 1274 line 247 toUtmUps8.northing: 129034.889816
    test 1275 line 247 toUtmUps8.convergence: 0.737551
    test 1276 line 247 toUtmUps8.scale: 1.290439
    test 1277 line 247 toUtmUps8.lat: 0.904279
    test 1278 line 247 toUtmUps8.lon: 39.078412
    test 1279 line 248 toUtmUps8.easting: 3322708.343909
    test 1280 line 248 toUtmUps8.northing: 3864738.078742
    test 1281 line 248 toUtmUps8.convergence: 18.472566
    test 1282 line 248 toUtmUps8.scale: 1.138838
    test 1283 line 248 toUtmUps8.lat: 30.163605
    test 1284 line 248 toUtmUps8.lon: 33.577996
    test skipped (35): line 249 toUtmUps8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'
    test skipped (36): line 250 toUtmUps8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'
    test skipped (37): line 251 toUtmUps8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtmUps8.easting: 2212701.180192
    test 1286 line 252 toUtmUps8.northing: 650348.100229
    test 1287 line 252 toUtmUps8.convergence: 1.970441
    test 1288 line 252 toUtmUps8.scale: 1.060830
    test 1289 line 252 toUtmUps8.lat: 5.542998
    test 1290 line 252 toUtmUps8.lon: 19.589578
    test 1291 line 253 toUtmUps8.easting: 6890222.326618
    test 1292 line 253 toUtmUps8.northing: 7506813.499547
    test 1293 line 253 toUtmUps8.convergence: 62.684825
    test 1294 line 253 toUtmUps8.scale: 1.638488
    test 1295 line 253 toUtmUps8.lat: 34.237147
    test 1296 line 253 toUtmUps8.lon: 73.678164
    test 1297 line 254 toUtmUps8.easting: 6692260.067325
    test 1298 line 254 toUtmUps8.northing: 4244174.008110
    test 1299 line 254 toUtmUps8.convergence: 31.812920
    test 1300 line 254 toUtmUps8.scale: 1.604640
    test 1301 line 254 toUtmUps8.lat: 22.704949
    test 1302 line 254 toUtmUps8.lon: 57.877010
    test 1303 line 255 toUtmUps8.easting: 1225564.137190
    test 1304 line 255 toUtmUps8.northing: 4778923.924144
    test 1305 line 255 toUtmUps8.convergence: 10.083419
    test 1306 line 255 toUtmUps8.scale: 1.018134
    test 1307 line 255 toUtmUps8.lat: 42.192424
    test 1308 line 255 toUtmUps8.lon: 14.828196
    test 1309 line 256 toUtmUps8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtmUps8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtmUps8.convergence: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtmUps8.scale: 3.535170
    test 1313 line 256 toUtmUps8.lat: 11.481151
    test 1314 line 256 toUtmUps8.lon: 78.189236
    test 1315 line 257 toUtmUps8.easting: 6673845.021771
    test 1316 line 257 toUtmUps8.northing: 1177587.190565
    test 1317 line 257 toUtmUps8.convergence: 8.389141
    test 1318 line 257 toUtmUps8.scale: 1.605171
    test 1319 line 257 toUtmUps8.lat: 6.609626
    test 1320 line 257 toUtmUps8.lon: 51.735783
    test 1321 line 258 toUtmUps8.easting: 6966354.690417
    test 1322 line 258 toUtmUps8.northing: 3641802.005093
    test 1323 line 258 toUtmUps8.convergence: 27.409636
    test 1324 line 258 toUtmUps8.scale: 1.661469
    test 1325 line 258 toUtmUps8.lat: 19.059369
    test 1326 line 258 toUtmUps8.lon: 57.526439
    test 1327 max forward error: 1.678807e-03
    test 1328 max reverse error: 3.170454e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 Ups.scale0: 0.994  FAILED, KNOWN, expected 0.9996
    test 1333 Ups.datum: WGS84
    test 1334 Ups.datum.ellipsoid.KsOrder: 8
    test 1335 WGS84.KsOrder: 8

    24 of 1335 testUtmUpsTMcoords.py tests (1.8%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 304.039 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testVectorial.py

    testing testVectorial.py 20.10.03

    testVectorial(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 1 toLatLon: 44.995674°N, 045.0°E
    test 2 toNvector: (0.50004, 0.50004, 0.70705)
    test 3 isequalTo: False
    test 4 isequalTo: True
    test 5 length: 0.99992449715
    test 6 euclid: 0.99995577
    test 7 length: 1.00
    test 8 euclid: 1.0000
    test 9 meanOf: 44.995674°N, 045.0°E
    test 10 meanOf: LatLon
    test 11 sumOf: (52.70504, 0.61904, 0.70705)
    test 12 sumOf: Nv
    test 13 sumOf: sumOf
    test 14 length: 52.7134151513
    test 15 copy: True
    test 16 length: 52.2051356286
    test 17 length: 52.2051356286
    test 18 nearestOn: 51.0°N, 001.0°E
    test 19 nearestOn: 50.987°N, 000.298°W
    test 20 nearestOn: 51.0°N, 002.0°E
    test 21 nearestOn: 50.995°N, 002.655°E
    test 22 nearestOn: 51.0°N, 001.9°E
    test 23 nearestOn: True
    test 24 distanceTo: 42.712  FAILED, KNOWN, expected 42.826
    test 25 nearestOn: 51.0°N, 002.0°E
    test 26 nearestOn: True
    test 27 nearestOn: 00.0°N, 000.0°E
    test 28 nearestOn: True
    test 29 nearestOn: 00.0°N, 020.0°E
    test 30 nearestOn: True
    test 31 nearestOn: 02.0°N, 002.0°E
    test 32 nearestOn: 02.0°N, 002.0°E
    test 33 BasseC: 47.3038°N, 002.5721°W
    test 34 BasseH: 47.311067°N, 002.528617°W
    test 35 triangulate: 47.323667°N, 002.568501°W
    test 36 triangulate: True
    test 37 trilaterate: 37.419078°N, 121.960579°W
    test 38 trilaterate: True
    test 39 trilaterate: 08.068912°S, 034.888699°W
    test 40 trilaterate: True
    test 41 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 42 trilaterate: True
    test 43 trilaterate: 42.67456065°N, 002.49539502°E
    test 44 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 45 sumOf: Nvector
    test 46 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 47 ecef.lat, .lon: 44.995674, 45.0
    test 48 ecef.height: 0.0  FAILED, KNOWN, expected -0.0
    test 49 .isEllipsoidal: True
    test 50 .isSpherical: False
    test 51 .latlon: (44.995674, 45.0)
    test 52 .philam: (0.785323, 0.785398)
    test 53 .latlonheight: (44.995674, 45.0, 0)
    test 54 .philamheight: (0.785323, 0.785398, 0)
    test 55 parse: (0.5, 0.5, 0.707)
    test 56 cmp: 0
    test 57 eq: True
    test 58 ge: True
    test 59 gt: False
    test 60 le: True
    test 61 lt: False
    test 62 ne: False
    test 63 *: (1.0, 1.0, 1.414)
    test 64 +: (1.0, 1.0, 1.414)
    test 65 /: (0.5, 0.5, 0.707)
    test 66 -: (0.5, 0.5, 0.707)
    test 67 @: (0.0, 0.0, 0.0)
    test 68 @: (0.0, 0.0, 0.0)
    test 69 rotate: (0.26268, 0.26268, 0.37143)
    test 70 crosserrors: True
    test 71 0: factor (0): float division by zero
    test 72 intersections2: (500.0, 0.0, 0.0)
    test 73 nearestOn: (0.0, 0.0, 0.0)
    test 74 nearestOn: True
    test 75 nearestOn: (100.0, 100.0, 100.0)
    test 76 nearestOn: True
    test 77 iscolinearWith: False
    test 78 iscolinearWith: True

    testVectorial(pygeodesy.sphericalNvector, 20.10.02)
    test 79 crossTrackDistanceTo: -305.67
    test 80 crossTrackDistanceTo: -307.55
    test 81 toLatLon: 44.995674°N, 045.0°E
    test 82 toNvector: (0.50004, 0.50004, 0.70705)
    test 83 isequalTo: False
    test 84 isequalTo: True
    test 85 length: 0.99992449715
    test 86 euclid: 0.99995577
    test 87 length: 1.00
    test 88 euclid: 1.0000
    test 89 meanOf: 44.995674°N, 045.0°E
    test 90 meanOf: LatLon
    test 91 sumOf: (52.70504, 0.61904, 0.70705)
    test 92 sumOf: Nv
    test 93 sumOf: sumOf
    test 94 length: 52.7134151513
    test 95 copy: True
    test 96 length: 52.2051356286
    test 97 length: 52.2051356286
    test 98 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 99 toLatLon: 44.995674°N, 045.0°E, -0.00m  FAILED, KNOWN, expected 44.995674°N, 045.0°E
    test 100 toNvector: (0.50004, 0.50004, 0.70705, -0.00)
    test 101 intersection: 02.499372°N, 002.5°E
    test 102 isEnclosedBy: True
    test 103 isEnclosedBy*: True
    test 104 isEnclosedBy: True
    test 105 isEnclosedBy*: True
    test 106 isWithin: False
    test 107 isWithin: True
    test 108 nearestOn: 51.0°N, 001.0°E
    test 109 nearestOn: 50.987°N, 000.298°W
    test 110 nearestOn: 51.0°N, 002.0°E
    test 111 nearestOn: 50.995°N, 002.655°E
    test 112 nearestOn: 51.0°N, 001.9°E
    test 113 nearestOn: True
    test 114 distanceTo: 42.712
    test 115 nearestOn: 51.0°N, 002.0°E
    test 116 nearestOn: True
    test 117 nearestOn: 00.0°N, 000.0°E
    test 118 nearestOn: True
    test 119 nearestOn: 00.0°N, 020.0°E
    test 120 nearestOn: True
    test 121 nearestOn: 02.0°N, 002.0°E
    test 122 nearestOn: 02.0°N, 002.0°E
    test 123 BasseC: 47.3038°N, 002.5721°W
    test 124 BasseH: 47.311067°N, 002.528617°W
    test 125 triangulate: 47.323667°N, 002.568501°W
    test 126 triangulate: True
    test 127 trilaterate: 37.419078°N, 121.960579°W
    test 128 trilaterate: True
    test 129 trilaterate: 08.068912°S, 034.888699°W
    test 130 trilaterate: True
    test 131 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 132 trilaterate: True
    test 133 trilaterate: 42.67456065°N, 002.49539502°E
    test 134 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.sphericalNvector, 20.10.02)
    test 135 sumOf: Nvector
    test 136 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 137 ecef.lat, .lon: 44.995674, 45.0
    test 138 ecef.height: 0.0
    test 139 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 140 .isEllipsoidal: False
    test 141 .isSpherical: True
    test 142 .latlon: (44.995674, 45.0)
    test 143 .philam: (0.785323, 0.785398)
    test 144 .latlonheight: (44.995674, 45.0, 0)
    test 145 .philamheight: (0.785323, 0.785398, 0)
    test 146 parse: (0.5, 0.5, 0.707)
    test 147 cmp: 0
    test 148 eq: True
    test 149 ge: True
    test 150 gt: False
    test 151 le: True
    test 152 lt: False
    test 153 ne: False
    test 154 *: (1.0, 1.0, 1.414)
    test 155 +: (1.0, 1.0, 1.414)
    test 156 /: (0.5, 0.5, 0.707)
    test 157 -: (0.5, 0.5, 0.707)
    test 158 @: (0.0, 0.0, 0.0)
    test 159 @: (0.0, 0.0, 0.0)
    test 160 rotate: (0.26268, 0.26268, 0.37143)
    test 161 crosserrors: True
    test 162 0: factor (0): float division by zero
    test 163 intersections2: (500.0, 0.0, 0.0)
    test 164 nearestOn: (0.0, 0.0, 0.0)
    test 165 nearestOn: True
    test 166 nearestOn: (100.0, 100.0, 100.0)
    test 167 nearestOn: True
    test 168 iscolinearWith: False
    test 169 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 20.10.08)
    test 170 sumOf: Vector4Tuple
    test 171 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 172 ecef.lat, .lon: 44.995674, 45.0
    test 173 ecef.height: 0.0
    test 174 .isEllipsoidal: False
    test 175 .isSpherical: True
    test 176 .latlon: (44.995674, 45.0)
    test 177 .philam: (0.785323, 0.785398)
    test 178 .latlonheight: (44.995674, 45.0, 0)
    test 179 .philamheight: (0.785323, 0.785398, 0)
    test 180 parse: (0.5, 0.5, 0.707)
    test 181 cmp: 0
    test 182 eq: True
    test 183 ge: True
    test 184 gt: False
    test 185 le: True
    test 186 lt: False
    test 187 ne: False
    test 188 *: (1.0, 1.0, 1.414)
    test 189 +: (1.0, 1.0, 1.414)
    test 190 /: (0.5, 0.5, 0.707)
    test 191 -: (0.5, 0.5, 0.707)
    test 192 @: (0.0, 0.0, 0.0)
    test 193 @: (0.0, 0.0, 0.0)
    test 194 rotate: (0.26268, 0.26268, 0.37143)
    test 195 crosserrors: True
    test 196 0: factor (0): float division by zero
    test 197 intersections2: (500.0, 0.0, 0.0)
    test 198 nearestOn: (0.0, 0.0, 0.0)
    test 199 nearestOn: True
    test 200 nearestOn: (100.0, 100.0, 100.0)
    test 201 nearestOn: True
    test 202 iscolinearWith: False
    test 203 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 20.10.08)
    test 204 sumOf: Vector4Tuple
    test 205 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 206 ecef.lat, .lon: 44.995674, 45.0
    test 207 ecef.height: 0.0  FAILED, KNOWN, expected -0.0
    test 208 .isEllipsoidal: True
    test 209 .isSpherical: False
    test 210 .latlon: (44.995674, 45.0)
    test 211 .philam: (0.785323, 0.785398)
    test 212 .latlonheight: (44.995674, 45.0, 0)
    test 213 .philamheight: (0.785323, 0.785398, 0)
    test 214 parse: (0.5, 0.5, 0.707)
    test 215 cmp: 0
    test 216 eq: True
    test 217 ge: True
    test 218 gt: False
    test 219 le: True
    test 220 lt: False
    test 221 ne: False
    test 222 *: (1.0, 1.0, 1.414)
    test 223 +: (1.0, 1.0, 1.414)
    test 224 /: (0.5, 0.5, 0.707)
    test 225 -: (0.5, 0.5, 0.707)
    test 226 @: (0.0, 0.0, 0.0)
    test 227 @: (0.0, 0.0, 0.0)
    test 228 rotate: (0.26268, 0.26268, 0.37143)
    test 229 crosserrors: True
    test 230 0: factor (0): float division by zero
    test 231 intersections2: (500.0, 0.0, 0.0)
    test 232 nearestOn: (0.0, 0.0, 0.0)
    test 233 nearestOn: True
    test 234 nearestOn: (100.0, 100.0, 100.0)
    test 235 nearestOn: True
    test 236 iscolinearWith: False
    test 237 iscolinearWith: True

    testCartesian(pygeodesy.ellipsoidalKarney, 20.10.08)
    test 238 ellipsoidalKarney.Cartesian.trilaterate3d2: 2
    test 239 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 240 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 241 pygeodesy.vector3d.trilaterate3d2: 2
    test 242 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 243 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 244 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 245 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 246 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 247 Cartesian.trilaterate3d2: 2
    test 248 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 249 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 250 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 251 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 252 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalNvector, 20.10.08)
    test 253 ellipsoidalNvector.Cartesian.trilaterate3d2: 2
    test 254 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 255 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 256 pygeodesy.vector3d.trilaterate3d2: 2
    test 257 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 258 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 259 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 260 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 261 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 262 Cartesian.trilaterate3d2: 2
    test 263 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 264 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 265 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 266 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 267 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalVincenty, 20.10.04)
    test 268 ellipsoidalVincenty.Cartesian.trilaterate3d2: 2
    test 269 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 270 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 271 pygeodesy.vector3d.trilaterate3d2: 2
    test 272 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 273 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 274 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 275 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 276 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 277 Cartesian.trilaterate3d2: 2
    test 278 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 279 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 280 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 281 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 282 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.sphericalNvector, 20.10.02)
    test 283 sphericalNvector.Cartesian.trilaterate3d2: 2
    test 284 sphericalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 285 sphericalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 286 pygeodesy.vector3d.trilaterate3d2: 2
    test 287 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 288 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 289 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 290 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 291 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 292 Cartesian.trilaterate3d2: 2
    test 293 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 294 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 295 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 296 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 297 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.sphericalTrigonometry, 20.10.08)
    test 298 sphericalTrigonometry.Cartesian.trilaterate3d2: 2
    test 299 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 300 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 301 pygeodesy.vector3d.trilaterate3d2: 2
    test 302 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 303 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 304 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 305 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 306 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 307 Cartesian.trilaterate3d2: 2
    test 308 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 309 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 310 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 311 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 312 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesianBase(pygeodesy.cartesianBase, 20.10.02)
    test 313 cartesianBase.CartesianBase.trilaterate3d2: 2
    test 314 cartesianBase.CartesianBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 315 cartesianBase.CartesianBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 316 pygeodesy.vector3d.trilaterate3d2: 2
    test 317 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 318 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 319 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 320 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 321 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 322 CartesianBase.trilaterate3d2: 2
    test 323 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 324 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 325 CartesianBase.trilaterate3d2: center (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 326 CartesianBase.trilaterate3d2: center (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 327 CartesianBase.trilaterate3d2: center (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testNvectorBase(pygeodesy.nvectorBase, 20.10.08)
    test 328 nvectorBase.NvectorBase.trilaterate3d2: 2
    test 329 nvectorBase.NvectorBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 330 nvectorBase.NvectorBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 331 pygeodesy.vector3d.trilaterate3d2: 2
    test 332 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 333 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 334 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 335 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 336 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 337 NvectorBase.trilaterate3d2: 2
    test 338 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 339 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 340 NvectorBase.trilaterate3d2: center (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 341 NvectorBase.trilaterate3d2: center (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 342 NvectorBase.trilaterate3d2: center (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testVector3d(pygeodesy.vector3d, 20.10.08)
    test 343 vector3d.Vector3d.trilaterate3d2: 2
    test 344 vector3d.Vector3d 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 345 vector3d.Vector3d 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 346 pygeodesy.vector3d.trilaterate3d2: 2
    test 347 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 348 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 349 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 350 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 351 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(0, 0, 0)), center2 (Vector3d(0, 9, 0)), center3 (Vector3d(0, -9, 0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 352 Vector3d.trilaterate3d2: 2
    test 353 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 354 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 355 Vector3d.trilaterate3d2: center (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 356 Vector3d.trilaterate3d2: center (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 357 Vector3d.trilaterate3d2: center (Vector3d(0, 0, 0)), center2 (Vector3d(0, 9, 0)), center3 (Vector3d(0, -9, 0)), radius (10), radius2 (10) or radius3 (10): colinear

    6 of 357 testVectorial.py tests (1.7%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 166.434 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testWebMercator.py

    testing testWebMercator.py 20.04.22 (module pygeodesy.webmercator 20.09.27)
    test 1 toWm1: -626172.13571216 6887893.4928338
    test 2 Wm1.y: 6887893.49283380
    test 3 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 4 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 5 Wm2: 448251.795 5411932.678
    test 6 Wm2: 448252 5411933
    test 7 Wm2: 448251.8 5411932.7
    test 8 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 9 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 10 Wm2.to2ll: 43.65321741, 4.02671439
    test 11 Wm2.toLatLon: 43.653217°N, 004.026714°E
    test 12 Wm2.toLatLon: 43°39′11.58″N, 004°01′36.17″E
    test 13 toWm1: 448251.795 5411932.678
    test 14 toWm2: 448252 5411933
    test 15 toWm3: [x:448252, y:5411933, radius:6378137]
    test 16 toWm3: [x:448252, y:5411933, radius:6378137]
    test 17 copy: 448251.795 5411932.678
    test 18 parseWM: 448251.795 5411932.678
    test 19 parseWM: 448251.795 5411932.678
    test 20 parseWM: [x:448251.795, y:5411932.678, radius:6378137.0]
    test 21 toWm4: 11562388 1506899
    test 22 toWm4: 11562388.154378 1506899.04498
    test 23 toWm4E: 11562388 1496994
    test 24 toWm4E: 11562388.154378 1496993.698095
    test 25 toWm5: -11169056 2800000
    test 26 toWm5: -11169055.576258 2800000.003136
    test 27 toWm5E: -11169056 2782367
    test 28 toWm5E: -11169055.576258 2782367.05923
    test 29 Wm6.toLatLon: 24.46358°N, 100.333333°W
    test 30 Wm6.toLatLon: 24°27′48.89″N, 100°20′00.0″W
    test 31 Wm6.toLatLonE: 24.299812°N, 100.333333°W
    test 32 Wm6.toLatLonE: 24°17′59.32″N, 100°20′00.0″W
    test 33 Wm7.toLatLon: 24.381787°N, 100.333333°W
    test 34 Wm7.toLatLon: 24°22′54.43″N, 100°20′00.0″W
    test 35 Wm7.toLatLonE: 24.218566°N, 100.333333°W
    test 36 Wm7.toLatLonE: 24°13′06.84″N, 100°20′00.0″W
    test 37 Wm8.toWm: -33878.893, 6693890.382, 6378137.0
    test 38 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 39 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 40 Wm8.toWm: -33878.893 6693890.382 6371008.771
    test 41 Wm8.toWm.x: -33878.893
    test 42 Wm8.toWm.y: 6693890.382
    test 43 Wm8.toWm.latlon: 51.408596, -0.304339
    test 44 Wm8.toWm.philam: 0.897249, -0.005312
    test 45 Wm8.toLatLon: 51.408596053784°N, 000.304339270785°W
    test 46 Wm8.toLatLon: 51°24′30.945794″N, 000°18′15.621375″W
    test 47 Wm9.toLatLon: TypeError
    test 48 Wm9.toLatLon: TypeError
    test 49 Wm9.toLatLon: TypeError
    test 50 Wm9.toLatLon: TypeError
    test 51 Wm9.toLatLon: TypeError
    test 52 toWm(LatLon(10.0000, 0)).y: 1118889.97
    test 53 toWm(LatLon(20.0000, 0)).y: 2273030.93
    test 54 toWm(LatLon(30.0000, 0)).y: 3503549.84
    test 55 toWm(LatLon(40.0000, 0)).y: 4865942.28
    test 56 toWm(LatLon(50.0000, 0)).y: 6446275.84
    test 57 toWm(LatLon(60.0000, 0)).y: 8399737.89
    test 58 toWm(LatLon(10.0003, 0)).y: 1118921.37
    test 59 toWm(LatLon(20.0003, 0)).y: 2273063.83
    test 60 toWm(LatLon(30.0003, 0)).y: 3503585.55
    test 61 toWm(LatLon(40.0003, 0)).y: 4865982.65
    test 62 toWm(LatLon(50.0003, 0)).y: 6446323.95
    test 63 toWm(LatLon(60.0003, 0)).y: 8399799.73
    test 64 toWm(LatLonE(10.0000, 0)).y: 1111475.10
    test 65 toWm(LatLonE(20.0000, 0)).y: 2258423.65
    test 66 toWm(LatLonE(30.0000, 0)).y: 3482189.09
    test 67 toWm(LatLonE(40.0000, 0)).y: 4838471.40
    test 68 toWm(LatLonE(50.0000, 0)).y: 6413524.59
    test 69 toWm(LatLonE(60.0000, 0)).y: 8362698.55
    test 70 toWm(LatLonE(10.0003, 0)).y: 1111506.30
    test 71 toWm(LatLonE(20.0003, 0)).y: 2258456.36
    test 72 toWm(LatLonE(30.0003, 0)).y: 3482224.61
    test 73 toWm(LatLonE(40.0003, 0)).y: 4838511.61
    test 74 toWm(LatLonE(50.0003, 0)).y: 6413572.57
    test 75 toWm(LatLonE(60.0003, 0)).y: 8362760.29

    all 75 testWebMercator.py tests passed (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 6.671 ms

running /System/Library/....nts/MacOS/Python ~/PyGeodesy/test/testWgrs.py

    testing testWgrs.py 20.04.23 (module pygeodesy.wgrs 20.10.02)
    test 1 Georef: 'NKLN2444638946'
    test 2 Georef: Georef('NKLN2444638946')
    test 3 Georef: NKLN2444638946
    test 4 Georef.latlon: 57.64911, 10.40744
    test 5 Georef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 6 codec3: NKLN2444638946
    test 7 decode3: 57.64911, 10.40744, 6.0
    test 8 encode: NKLN2444638946
    test 9 Georef: 'NKLN2444638946H0'
    test 10 Georef: Georef('NKLN2444638946H0')
    test 11 Georef: NKLN2444638946H0
    test 12 Georef.latlon: 57.64911, 10.40744
    test 13 Georef.precision: 6
    test 14 Georef.radius: None
    test 15 Georef: 'GJPJ3424917166'
    test 16 Georef: Georef('GJPJ3424917166')
    test 17 Georef: GJPJ3424917166
    test 18 Georef.latlon: 38.286108, -76.42917
    test 19 Georef.toLatLon: LatLon(38°17′09.99″N, 076°25′45.01″W)
    test 20 codec3: GJPJ3424917166
    test 21 decode3: 38.286108, -76.429175, 6.0
    test 22 encode: GJPJ3424917166
    test 23 Georef: 'GJPJ3424917166H0'
    test 24 Georef: Georef('GJPJ3424917166H0')
    test 25 Georef: GJPJ3424917166H0
    test 26 Georef.latlon: 38.286108, -76.42917
    test 27 Georef.precision: 6
    test 28 Georef.radius: None
    test 29 Georef.3Tuple: 38.286108, -76.42917, 0.0
    test 30 codec3: MKPG1204
    test 31 decode3: 51.075, -1.7917, 3.0
    test 32 encode: MKPG1204
    test 33 codec3: WJKG1503
    test 34 decode3: 36.0583, 129.2583, 3.0
    test 35 encode: WJKG1503
    test 36 codec5: GJPJ4103R5
    test 37 decode5: 38.0583, -76.3083, 3.0, None, 9260.0
    test 38 encode: GJPJ4103R5
    test 39 codec5: GJPJ4103H17
    test 40 decode5: 38.0583, -76.3083, 3.0, 5181.6, None
    test 41 encode: GJPJ4103H17
    test 42 codec5: GJPJ4103R5H17
    test 43 decode5: 38.0583, -76.3083, 3.0, 5181.6, 9260.0
    test 44 encode: GJPJ4103R5H17
    test 45 precision: -1  FAILED, KNOWN, expected 0
    test 46 resolution: 15°
    test 47 precision: 0
    test 48 resolution: 15°
    test 49 precision: 1
    test 50 resolution: 1°
    test 51 precision: 2
    test 52 resolution: 0.1′
    test 53 precision: 3
    test 54 resolution: 0.01′
    test 55 precision: 4
    test 56 resolution: 0.001′
    test 57 precision: 5
    test 58 resolution: 0.0001′
    test 59 precision: 6
    test 60 resolution: 0.00001′
    test 61 precision: 7
    test 62 resolution: 0.000001′
    test 63 precision: 8
    test 64 resolution: 0.0000001′
    test 65 precision: 9
    test 66 resolution: 0.00000001′
    test 67 precision: 10
    test 68 resolution: 0.000000001′
    test 69 precision: 11
    test 70 resolution: 0.0000000001′
    test 71 precision: 12  FAILED, KNOWN, expected 11
    test 72 resolution: 0.0000000001′

    2 of 72 testWgrs.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 6.218 ms

test/run.py /System/Library/....nts/MacOS/Python all 23898 tests OK (PyGeodesy 20.10.9 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.15.7) 1:41.024 (236.557 tps)
