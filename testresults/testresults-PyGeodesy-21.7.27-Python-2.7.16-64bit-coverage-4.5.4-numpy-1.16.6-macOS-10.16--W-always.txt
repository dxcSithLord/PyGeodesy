test/run.py typical test results (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W always)

running /System/Library/....Python -W always ~/PyGeodesy/test/testAlbers.py

    testing testAlbers.py 21.01.28 (module pygeodesy.albers 21.07.22)
    test 1 name: Karney_example
    test 2 datum: WGS84
    test 3 ellipsoid: WGS84
    test 4 lat0: 40.451991337063
    test 5 scale0: 0.999959500363
    test 6 equatoradius: 6378137.000000000000
    test 7 flattening: 0.003352810665
    test 8 _sign: 1.000000000000
    test 9 _m02: 0.580681094922
    test 10 _n0: 0.648810669236
    test 11 _txi0: 0.848822476849
    test 12 iteration: 3
    test 13 ispolar: False
    test 14 forward: -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 15 reverse: -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 16 forward: 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 17 reverse: 199089.12574012, -53115.52801838, 39.95, -75.17, 1.51160641, 0.99999745  FAILED, KNOWN, expected 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 18 reverse: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 19 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 20 reverse: 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808
    test 21 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808  FAILED, KNOWN, expected 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808

    testPage292(pygeodesy.albers, 21.07.22)
    test 22 name: Snyder_p292
    test 23 datum: NAD27
    test 24 ellipsoid: Clarke1866
    test 25 lat0: 37.934543880726
    test 26 scale0: 0.990309187872
    test 27 equatoradius: 6378206.400000000373
    test 28 flattening: 0.003390075304
    test 29 _sign: 1.000000000000
    test 30 _m02: 0.623664507732
    test 31 _n0: 0.614760830736
    test 32 _txi0: 0.775925617021
    test 33 iteration: 4
    test 34 ispolar: False
    test 35 forward: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 36 reverse: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 37 forward: 1885472.72581347, -119505.66687765, 35.0, 21.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 38 reverse: 1885472.72581347, -119505.66687765, 35.0, -75.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 39 reverse: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 40 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 41 reverse: 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109
    test 42 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109  FAILED, KNOWN, expected 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109

    testTable15(pygeodesy.albers, 21.07.22)
    test 43 52 k: 1.02863
    test 44 50 k: 1.01727
    test 45 45.5 k: 1.00000
    test 46 45 k: 0.99869
    test 47 40 k: 0.99097
    test 48 35 k: 0.99155
    test 49 30 k: 0.99893
    test 50 29.5 k: 1.00000
    test 51 25 k: 1.01222
    test 52 22 k: 1.02283

    testLats(pygeodesy.albers, 21.07.22)
    test 53 AlbersEqualArea.lat0: 45.0
    test 54 AlbersEqualArea.lat1: 45.0
    test 55 AlbersEqualArea.lat2: 45.0
    test 56 AlbersEqualArea2.lat0: 40.0
    test 57 AlbersEqualArea2.lat1: 40.0
    test 58 AlbersEqualArea2.lat2: 40.0
    test 59 AlbersEqualArea4.lat0: 30.0
    test 60 AlbersEqualArea4.lat1: 30.0
    test 61 AlbersEqualArea4.lat2: 30.0
    test 62 AlbersEqualArea4.lat0: -30.0
    test 63 AlbersEqualArea4.lat1: -30.0
    test 64 AlbersEqualArea4.lat2: -30.0
    test 65 AlbersEqualAreaCylindrical.lat0: 0.0
    test 66 AlbersEqualAreaCylindrical.lat1: 0.0
    test 67 AlbersEqualAreaCylindrical.lat2: 0.0
    test 68 AlbersEqualAreaNorth.lat0: 90.0
    test 69 AlbersEqualAreaNorth.lat1: 90.0
    test 70 AlbersEqualAreaNorth.lat2: 90.0
    test 71 AlbersEqualAreaSouth.lat0: -90.0
    test 72 AlbersEqualAreaSouth.lat1: -90.0
    test 73 AlbersEqualAreaSouth.lat2: -90.0
    test 74 error: lat1 (150.0): above 90 limit
    test 75 error: slat1 (-0.5) or slat2 (0.5): invalid

    7 of 75 testAlbers.py tests (9.3%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 15.154 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testAzimuthal.py

    testing testAzimuthal.py 21.06.03 (module pygeodesy.azimuthal 21.07.03)
    test 1 Equidistant(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 forward: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 3 reverse: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 4 iteration: None
    test 5 copy(Equidistant): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 6 Equidistant.copy(): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 7 reverse: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 8 forward: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 9 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 10 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 11 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 12 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 13 Equidistant(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 14 forward: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 15 reverse: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 16 iteration: None
    test 17 hypot: 339535.102  FAILED, KNOWN, expected 338901.865

    test 18 Gnomonic(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 19 forward: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000669
    test 20 reverse: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000223
    test 21 iteration: None
    test 22 copy(Gnomonic): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 23 Gnomonic.copy(): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 24 reverse: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000222
    test 25 forward: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000667
    test 26 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 27 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 28 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 29 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 30 Gnomonic(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 31 forward: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.001416
    test 32 reverse: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.000472
    test 33 iteration: None
    test 34 hypot: 339855.719  FAILED, KNOWN, expected 338901.865

    test 35 EquidistantExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 36 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 37 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 38 iteration: None
    test 39 copy(EquidistantExact): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 40 EquidistantExact.copy(): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 41 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 42 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 43 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 44 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 45 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 46 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 47 EquidistantExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 48 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 49 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 50 iteration: None
    test 51 hypot: 339238.516  FAILED, KNOWN, expected 338901.865

    test 52 GnomonicExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 53 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 54 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 55 iteration: 3
    test 56 copy(GnomonicExact): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 57 GnomonicExact.copy(): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 58 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 59 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 60 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 61 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 62 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 63 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 64 GnomonicExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 65 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 66 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 67 iteration: 3
    test 68 hypot: 339558.439  FAILED, KNOWN, expected 338901.963

    test 69 EquidistantGeodSolve(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 70 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 71 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 72 iteration: None
    test 73 copy(EquidistantGeodSolve): (<class 'pygeodesy.azimuthal.EquidistantGeodSolve'>, True)
    test 74 EquidistantGeodSolve.copy(): (<class 'pygeodesy.azimuthal.EquidistantGeodSolve'>, True)
    test 75 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 76 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 77 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 78 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 79 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 80 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 81 EquidistantGeodSolve(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 82 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 83 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 84 iteration: None
    test 85 hypot: 339238.516  FAILED, KNOWN, expected 338901.865

    test 86 GnomonicGeodSolve(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 87 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 88 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 89 iteration: 3
    test 90 copy(GnomonicGeodSolve): (<class 'pygeodesy.azimuthal.GnomonicGeodSolve'>, True)
    test 91 GnomonicGeodSolve.copy(): (<class 'pygeodesy.azimuthal.GnomonicGeodSolve'>, True)
    test 92 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 93 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 94 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 95 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 96 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 97 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 98 GnomonicGeodSolve(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 99 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 100 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 101 iteration: 3
    test 102 hypot: 339558.439  FAILED, KNOWN, expected 338901.963

    14 tests skipped (14): no geographiclib
    test 103 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W Random +/- 45
    test 104 pygeodesy.ellipsoidalExact: 30.047614°N, 010.458949°W, 21.074211°S, 006.562966°W  d 8671.75 meter  Spherical
    test 105 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 21.144145°S, 006.558400°W  d 9.10536e-09 meter  EquidistantExact
    test 106 pygeodesy.ellipsoidalExact: 30.095897°N, 010.476711°W, 21.196875°S, 006.583062°W  d 5905.26 meter  Equidistant
    test 107 pygeodesy.ellipsoidalExact: 00.022772°N, 000.055389°E  00.076%, 000.531% of Random
    test 108 pygeodesy.ellipsoidalExact: 30.031812°N, 011.698191°W, 26.419597°N, 002.280708°E  d 123483 meter  Spherical
    test 109 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 27.065276°N, 001.261425°E  d 1.37259e-08 meter  EquidistantExact
    test 110 pygeodesy.ellipsoidalExact: 30.028098°N, 011.430675°W, 26.614052°N, 001.925641°E  d 97833.2 meter  Equidistant
    test 111 pygeodesy.ellipsoidalExact: 00.090570°N, 001.009353°E  00.301%, 009.685% of Random
    test 112 pygeodesy.ellipsoidalExact: 29.900535°N, 010.219593°W, 04.130324°S, 052.605275°W  d 31040 meter  Spherical
    test 113 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 04.115976°S, 052.563158°W  d 3.32632e-09 meter  EquidistantExact
    test 114 pygeodesy.ellipsoidalExact: 29.922565°N, 010.280284°W, 03.912787°S, 052.636373°W  d 25645.1 meter  Equidistant
    test 115 pygeodesy.ellipsoidalExact: 00.196103°N, 000.141038°W  00.651%, 001.353% of Random
    test 116 pygeodesy.ellipsoidalExact: 29.814638°N, 010.502786°W, 05.275881°S, 056.408754°E  d 34607.4 meter  Spherical
    test 117 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 05.352548°S, 056.444565°E  d 3.11641e-09 meter  EquidistantExact
    test 118 pygeodesy.ellipsoidalExact: 29.853848°N, 010.525871°W, 05.238805°S, 056.570594°E  d 31041.2 meter  Equidistant
    test 119 pygeodesy.ellipsoidalExact: 00.264821°N, 000.104549°E  00.879%, 001.003% of Random
    test 120 pygeodesy.ellipsoidalExact: 29.953807°N, 010.506643°W, 29.329387°N, 015.565364°W  d 20042.7 meter  Spherical
    test 121 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 29.460359°N, 015.698071°W  d 0 meter  EquidistantExact
    test 122 pygeodesy.ellipsoidalExact: 29.973600°N, 010.493089°W, 29.346875°N, 015.586734°W  d 17507.5 meter  Equidistant
    test 123 pygeodesy.ellipsoidalExact: 00.145068°N, 000.071767°E  00.482%, 000.689% of Random
    test 124 pygeodesy.ellipsoidalExact: 29.687965°N, 010.654794°W, 43.773641°N, 052.905187°E  d 52800.6 meter  Spherical
    test 125 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 44.183370°N, 052.343499°E  d 7.8681e-09 meter  EquidistantExact
    test 126 pygeodesy.ellipsoidalExact: 29.747566°N, 010.652739°W, 43.690033°N, 052.970172°E  d 46813.4 meter  Equidistant
    test 127 pygeodesy.ellipsoidalExact: 00.371102°N, 000.231417°E  01.232%, 002.221% of Random
    test 128 pygeodesy.ellipsoidalExact: 29.573289°N, 009.712868°W, 34.428206°N, 034.662172°W  d 91332.9 meter  Spherical
    test 129 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 34.699516°N, 033.700195°W  d 1.7119e-09 meter  EquidistantExact
    test 130 pygeodesy.ellipsoidalExact: 29.661400°N, 009.823032°W, 34.434598°N, 034.637294°W  d 76870 meter  Equidistant
    test 131 pygeodesy.ellipsoidalExact: 00.457268°N, 000.598290°W  01.518%, 005.741% of Random
    test 132 pygeodesy.ellipsoidalExact: 29.851032°N, 010.792545°W, 21.277032°N, 019.237193°E  d 46513.4 meter  Spherical
    test 133 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 21.592781°N, 019.084945°E  d 0 meter  EquidistantExact
    test 134 pygeodesy.ellipsoidalExact: 29.883817°N, 010.758232°W, 21.379562°N, 019.221757°E  d 41646.7 meter  Equidistant
    test 135 pygeodesy.ellipsoidalExact: 00.234851°N, 000.336910°E  00.780%, 003.233% of Random
    test 136 pygeodesy.ellipsoidalExact: 30.062865°N, 010.132867°W, 17.685011°N, 025.788050°W  d 28486.3 meter  Spherical
    test 137 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 17.851252°N, 025.736922°W  d 3.59499e-09 meter  EquidistantExact
    test 138 pygeodesy.ellipsoidalExact: 30.070601°N, 010.176243°W, 17.795855°N, 025.793586°W  d 24217.8 meter  Equidistant
    test 139 pygeodesy.ellipsoidalExact: 00.048068°N, 000.245079°W  00.160%, 002.352% of Random
    test 140 pygeodesy.ellipsoidalExact: 29.680205°N, 010.807941°W, 34.085425°N, 030.487563°E  d 61291.8 meter  Spherical
    test 141 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 34.474807°N, 029.964023°E  d 1.01694e-08 meter  EquidistantExact
    test 142 pygeodesy.ellipsoidalExact: 29.740032°N, 010.773390°W, 34.097158°N, 030.475558°E  d 54011.5 meter  Equidistant
    test 143 pygeodesy.ellipsoidalExact: 00.378636°N, 000.352068°E  01.257%, 003.378% of Random
    test 144 pygeodesy.ellipsoidalExact: 29.990992°N, 010.367749°W, 22.039996°S, 028.347329°W  d 15066.8 meter  Spherical
    test 145 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 22.188784°S, 028.276954°W  d 2.47365e-09 meter  EquidistantExact
    test 146 pygeodesy.ellipsoidalExact: 30.021787°N, 010.377259°W, 22.082346°S, 028.411587°W  d 11549.4 meter  Equidistant
    test 147 pygeodesy.ellipsoidalExact: 00.096881°N, 000.044063°W  00.322%, 000.423% of Random
    test 148 pygeodesy.ellipsoidalExact: 29.554447°N, 009.698019°W, 34.126635°N, 026.793041°W  d 93797.9 meter  Spherical
    test 149 pygeodesy.ellipsoidalExact: 30.118668°N, 010.421322°W, 34.269988°N, 025.768772°W  d 1.90335e-08 meter  EquidistantExact
    test 150 pygeodesy.ellipsoidalExact: 29.644823°N, 009.800728°W, 34.131847°N, 026.760055°W  d 79705 meter  Equidistant
    test 151 pygeodesy.ellipsoidalExact: 00.473845°N, 000.620594°W  01.573%, 005.955% of Random
    test 152 pygeodesy.ellipsoidalExact: 00.473845°N, 001.009353°E  01.573%, 009.685% of Random, max

    test 153 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W Random +/- 45
    test 154 pygeodesy.ellipsoidalVincenty: 15.009306°N, 042.776044°W, 49.106356°N, 099.516047°E  d 8929.37 meter  Spherical
    test 155 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 49.455444°N, 099.460332°E  d 3.36874e-05 meter  EquidistantExact
    test 156 pygeodesy.ellipsoidalVincenty: 15.062625°N, 042.934898°W, 49.029107°N, 099.332143°E  d 21426.4 meter  Equidistant
    test 157 pygeodesy.ellipsoidalVincenty: 00.017610°N, 000.198463°E  00.117%, 000.464% of Random
    test 158 pygeodesy.ellipsoidalVincenty: 15.000281°N, 042.805673°W, 10.794899°S, 097.281806°E  d 11562.7 meter  Spherical
    test 159 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 10.987417°S, 097.200573°E  d 6.49094e-05 meter  EquidistantExact
    test 160 pygeodesy.ellipsoidalVincenty: 14.970085°N, 042.943259°W, 10.852024°S, 097.425447°E  d 25362 meter  Equidistant
    test 161 pygeodesy.ellipsoidalVincenty: 00.110151°N, 000.206824°E  00.730%, 000.484% of Random
    test 162 pygeodesy.ellipsoidalVincenty: 15.810210°N, 043.293214°W, 18.723257°N, 045.152823°W  d 100475 meter  Spherical
    test 163 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 19.498094°N, 045.530910°W  d 0.000279345 meter  EquidistantExact
    test 164 pygeodesy.ellipsoidalVincenty: invalid: invalid  FAILED, KNOWN, expected Equidistant
    test 165 pygeodesy.ellipsoidalVincenty: 14.954473°N, 042.749113°W, 19.526976°S, 009.083757°W  d 13982.1 meter  Spherical
    test 166 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 19.718708°S, 009.174248°W  d 2.80929e-05 meter  EquidistantExact
    test 167 pygeodesy.ellipsoidalVincenty: 14.957050°N, 042.853742°W, 19.610647°S, 009.079695°W  d 18572.3 meter  Equidistant
    test 168 pygeodesy.ellipsoidalVincenty: 00.123185°N, 000.117307°E  00.817%, 000.274% of Random
    test 169 pygeodesy.ellipsoidalVincenty: 15.052704°N, 042.802603°W, 56.874602°N, 026.580760°W  d 7738.95 meter  Spherical
    test 170 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 56.737821°N, 026.904857°W  d 5.23721e-05 meter  EquidistantExact
    test 171 pygeodesy.ellipsoidalVincenty: 15.250770°N, 042.920055°W, 57.001340°N, 026.053543°W  d 27303.2 meter  Equidistant
    test 172 pygeodesy.ellipsoidalVincenty: 00.170535°S, 000.183620°E  01.131%, 000.430% of Random
    test 173 pygeodesy.ellipsoidalVincenty: 14.969460°N, 042.666420°W, 28.993538°N, 046.787365°E  d 14385 meter  Spherical
    test 174 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 29.268703°N, 046.819402°E  d 1.67176e-05 meter  EquidistantExact
    test 175 pygeodesy.ellipsoidalVincenty: 15.029304°N, 042.813683°W, 29.028728°N, 046.839000°E  d 10037.3 meter  Equidistant
    test 176 pygeodesy.ellipsoidalVincenty: 00.050931°N, 000.077248°E  00.338%, 000.181% of Random
    test 177 pygeodesy.ellipsoidalVincenty: 14.999282°N, 042.785454°W, 06.097950°N, 045.397866°W  d 10393.2 meter  Spherical
    test 178 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 05.990964°N, 045.368749°W  d 8.85087e-06 meter  EquidistantExact
    test 179 pygeodesy.ellipsoidalVincenty: 14.792751°N, 042.996169°W, 06.438745°N, 045.472156°W  d 42339.6 meter  Equidistant
    test 180 pygeodesy.ellipsoidalVincenty: 00.287484°N, 000.259734°E  01.906%, 000.608% of Random
    test 181 pygeodesy.ellipsoidalVincenty: 15.151197°N, 042.828709°W, 41.152765°N, 070.360040°E  d 12650.5 meter  Spherical
    test 182 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 41.298022°N, 070.262756°E  d 2.7078e-05 meter  EquidistantExact
    test 183 pygeodesy.ellipsoidalVincenty: 15.125018°N, 042.924929°W, 41.150672°N, 070.312834°E  d 20860 meter  Equidistant
    test 184 pygeodesy.ellipsoidalVincenty: 00.044783°S, 000.188494°E  00.297%, 000.441% of Random
    test 185 pygeodesy.ellipsoidalVincenty: 14.868321°N, 042.812119°W, 11.776693°S, 111.466929°E  d 24820.9 meter  Spherical
    test 186 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 11.837677°S, 111.397931°E  d 2.50572e-05 meter  EquidistantExact
    test 187 pygeodesy.ellipsoidalVincenty: 14.930019°N, 042.963611°W, 11.726296°S, 111.636737°E  d 29549.9 meter  Equidistant
    test 188 pygeodesy.ellipsoidalVincenty: 00.150216°N, 000.227175°E  00.996%, 000.532% of Random
    test 189 pygeodesy.ellipsoidalVincenty: 15.060967°N, 042.734287°W, 18.275997°N, 040.888766°W  d 2144.52 meter  Spherical
    test 190 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 18.275854°N, 040.926341°W  d 1.64802e-06 meter  EquidistantExact
    test 191 pygeodesy.ellipsoidalVincenty: 15.147892°N, 042.760935°W, 18.254141°N, 040.970165°W  d 7935.96 meter  Equidistant
    test 192 pygeodesy.ellipsoidalVincenty: 00.067657°S, 000.024500°E  00.449%, 000.057% of Random
    test 193 pygeodesy.ellipsoidalVincenty: 14.919524°N, 042.816885°W, 25.958734°S, 064.267940°W  d 19775.8 meter  Spherical
    test 194 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 26.131138°S, 064.179377°W  d 1.69229e-05 meter  EquidistantExact
    test 195 pygeodesy.ellipsoidalVincenty: 14.941579°N, 042.994331°W, 25.888391°S, 064.335194°W  d 31695.9 meter  Equidistant
    test 196 pygeodesy.ellipsoidalVincenty: 00.138656°N, 000.257896°E  00.919%, 000.603% of Random
    test 197 pygeodesy.ellipsoidalVincenty: 15.197685°N, 042.864962°W, 29.402670°N, 051.285621°W  d 18966.3 meter  Spherical
    test 198 pygeodesy.ellipsoidalVincenty: 15.080235°N, 042.736435°W, 29.568365°N, 051.246806°W  d 4.74543e-05 meter  EquidistantExact
    test 199 pygeodesy.ellipsoidalVincenty: 15.248755°N, 043.008682°W, 29.351585°N, 051.298393°W  d 34694.7 meter  Equidistant
    test 200 pygeodesy.ellipsoidalVincenty: 00.168520°S, 000.272247°E  01.117%, 000.637% of Random
    test 201 pygeodesy.ellipsoidalVincenty: 00.287484°N, 000.272247°E  01.906%, 000.637% of Random, max

    test 202 Equidistant(10, 80): 1.37704, 0.24656
    test 203 Equidistant(10, 80): 10.0, 80.0
    test 204 Gnomonic(10, 80): 5.67128, 1.01543
    test 205 Gnomonic(10, 80): 10.0, 80.0
    test 206 LambertEqualArea(10, 80): 1.26747, 0.22694
    test 207 LambertEqualArea(10, 80): 10.0, 80.0
    test 208 Orthographic(10, 80): 0.96985, 0.17365
    test 209 Orthographic(10, 80): 10.0, 80.0
    test 210 Stereographic(10, 80): 1.65643, 0.29658
    test 211 Stereographic(10, 80): 10.0, 80.0
    test 212 Equidistant(20, 20): 0.33454, 0.35601
    test 213 Equidistant(20, 20): 20.0, 20.0
    test 214 Gnomonic(20, 20): 0.36397, 0.38733
    test 215 Gnomonic(20, 20): 20.0, 20.0
    test 216 LambertEqualArea(20, 20): 0.33123, 0.35248
    test 217 LambertEqualArea(20, 20): 20.0, 20.0
    test 218 Orthographic(20, 20): 0.32139, 0.34202
    test 219 Orthographic(20, 20): 20.0, 20.0
    test 220 Stereographic(20, 20): 0.34136, 0.36327
    test 221 Stereographic(20, 20): 20.0, 20.0
    test 222 Equidistant(40, 40): 0.57386, 0.74912
    test 223 Equidistant(40, 40): 40.0, 40.0
    test 224 Gnomonic(40, 40): 0.8391, 1.09537
    test 225 Gnomonic(40, 40): 40.0, 40.0
    test 226 LambertEqualArea(40, 40): 0.55281, 0.72164
    test 227 LambertEqualArea(40, 40): 40.0, 40.0
    test 228 Orthographic(40, 40): 0.4924, 0.64279
    test 229 Orthographic(40, 40): 40.0, 40.0
    test 230 Stereographic(40, 40): 0.62062, 0.81016
    test 231 Stereographic(40, 40): 40.0, 40.0
    test 232 Equidistant(60, 60): 0.58948, 1.17896
    test 233 Equidistant(60, 60): 60.0, 60.0
    test 234 Gnomonic(60, 60): 1.73205, 3.4641
    test 235 Gnomonic(60, 60): 60.0, 60.0
    test 236 LambertEqualArea(60, 60): 0.54772, 1.09545
    test 237 LambertEqualArea(60, 60): 60.0, 60.0
    test 238 Orthographic(60, 60): 0.43301, 0.86603
    test 239 Orthographic(60, 60): 60.0, 60.0
    test 240 Stereographic(60, 60): 0.69282, 1.38564
    test 241 Stereographic(60, 60): 60.0, 60.0
    test 242 Equidistant(70, 80): 0.50997, 1.42273
    test 243 Equidistant(70, 80): 70.0, 80.0
    test 244 Gnomonic(70, 80): 5.67128, 15.82209
    test 245 Gnomonic(70, 80): 70.0, 80.0
    test 246 LambertEqualArea(70, 80): 0.4628, 1.29114
    test 247 LambertEqualArea(70, 80): 70.0, 80.0
    test 248 Orthographic(70, 80): 0.33682, 0.93969
    test 249 Orthographic(70, 80): 70.0, 80.0
    test 250 Stereographic(70, 80): 0.63588, 1.77402
    test 251 Stereographic(70, 80): 70.0, 80.0
    test 252 Equidistant(80, 80): 0.26358, 1.51792
    test 253 Equidistant(80, 80): 80.0, 80.0
    test 254 Gnomonic(80, 80): 5.67128, 32.65961
    test 255 Gnomonic(80, 80): 80.0, 80.0
    test 256 LambertEqualArea(80, 80): 0.23828, 1.37219
    test 257 LambertEqualArea(80, 80): 80.0, 80.0
    test 258 Orthographic(80, 80): 0.17101, 0.98481
    test 259 Orthographic(80, 80): 80.0, 80.0
    test 260 Stereographic(80, 80): 0.33201, 1.91196
    test 261 Stereographic(80, 80): 80.0, 80.0
    test 262 Equidistant(80, 10): 0.04281, 1.39829
    test 263 Equidistant(80, 10): 80.0, 10.0
    test 264 Gnomonic(80, 10): 0.17633, 5.75877
    test 265 Gnomonic(80, 10): 80.0, 10.0
    test 266 LambertEqualArea(80, 10): 0.03941, 1.28702
    test 267 LambertEqualArea(80, 10): 80.0, 10.0
    test 268 Orthographic(80, 10): 0.03015, 0.98481
    test 269 Orthographic(80, 10): 80.0, 10.0
    test 270 Stereographic(80, 10): 0.0515, 1.68198
    test 271 Stereographic(80, 10): 80.0, 10.0

    test 272 function: equidistant
    test 273 equatoradius: 1.0
    test 274 flattening: 0.0
    test 275 iteration: None
    test 276 latlon0: (0.0, 0.0)
    test 277 latlon0: (1.0, 2.0)
    test 278 name: coverage
    test 279 radius: 1.0

    test 280 function: gnomonic
    test 281 equatoradius: 1.0
    test 282 flattening: 0.0
    test 283 iteration: None
    test 284 latlon0: (0.0, 0.0)
    test 285 latlon0: (1.0, 2.0)
    test 286 name: coverage
    test 287 radius: 1.0

    7 of 287 testAzimuthal.py tests (2.4%) FAILED, ALL KNOWN, 14 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 12.940 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testBasics.py

    testing testBasics.py 20.05.05 (module pygeodesy.basics 21.06.30)
    test 1 clips: test/t....ics.py
    test 2 halfs2: ('test/test', 'Basics.py')
    test 3 isfinite(0): True
    test 4 isint(0): True
    test 5 isint(0+0.5): False
    test 6 isscalar(0): True
    test 7 isfinite(0.0): True
    test 8 isint(0.0): True
    test 9 isint(0.0+0.5): False
    test 10 isscalar(0.0): True
    test 11 isfinite(1): True
    test 12 isint(1): True
    test 13 isint(1+0.5): False
    test 14 isscalar(1): True
    test 15 isfinite(1.0): True
    test 16 isint(1.0): True
    test 17 isint(1.0+0.5): False
    test 18 isscalar(1.0): True
    test 19 isfinite(1e+300): True
    test 20 isint(1e+300): True
    test 21 isint(1e+300+0.5): True
    test 22 isscalar(1e+300): True
    test 23 isfinite(-1e+300): True
    test 24 isint(-1e+300): True
    test 25 isint(-1e+300+0.5): True
    test 26 isscalar(-1e+300): True
    test 27 isfinite(inf): False
    test 28 isint(inf): False
    test 29 isint(inf+0.5): False
    test 30 isscalar(inf): True
    test 31 isfinite(inf): False
    test 32 isint(inf): False
    test 33 isint(inf+0.5): False
    test 34 isscalar(inf): True
    test 35 isfinite(nan): False
    test 36 isint(nan): False
    test 37 isint(nan+0.5): False
    test 38 isscalar(nan): True
    test 39 isfinite(-0.0): True
    test 40 isint(-0.0): True
    test 41 isint(-0.0+0.5): False
    test 42 isscalar(-0.0): True
    test 43 isneg0(NEG0): True
    test 44 isneg0(0.0): False
    test 45 isneg0(INF): False
    test 46 isneg0(NAN): False
    test 47 type(C.r_o): property_RO
    test 48 type(c.r_o): <type 'bool'>
    test 49 c.r_o: True
    test 50 c.r_o = False: immutable property_RO: C.r_o = False
    test 51 splice: ([0, 2, 4, 6, 8], [1, 3, 5, 7, 9])
    test 52 splice: ([0, 3, 6, 9], [1, 4, 7], [2, 5, 8])
    test 53 splice: ([0, 3, 6, 9], [1, 4, 7, -1], [2, 5, 8, -1])
    test 54 splice: ([0, 5, 10], [1, 6, 11], [2, 7], [3, 8], [4, 9])

    all 54 testBasics.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 954.866 us

running /System/Library/....Python -W always ~/PyGeodesy/test/testCartesian.py

    testing testCartesian.py 21.05.16

    testCartesian(pygeodesy.sphericalNvector, 21.06.09)
    test 1 Cartesian0: [3980581, 97, 4966825]
    test 2 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 3 isEllipsoidal: False
    test 4 isSpherical: True
    test 5 copy(Cartesian): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 6 Cartesian.copy(): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 7 Nvector: Nvector(0.62538, 0.00002, 0.78032, -5918.38)
    test 8 Nvector3: (0.625, 0.0, 0.78, -5918.38)
    test 9 Nvector6: (0.625377, 0.000015, 0.780323, -5918.38)
    test 10 LatLon: 50.0379°N, 008.5622°E, -0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 11 LatLon: 51.47°N, 000.4543°E
    test 12 LatLon: 40.633365°N, 073.783328°W
    test 13 LatLon: 33.95°N, 118.4°W
    test 14 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 15 LatLon: 40.96°N, 005.5°E
    test 16 LatLon: 40.1°N, 116.6°E, +0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 17 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 18 copy: True
    test 19 __eq__: True
    test 20 __ne__: False
    test 21 Cartesian: <class 'pygeodesy.sphericalNvector.Cartesian'>
    test 22 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 23 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 24 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 25 isequalTo: <type 'bool'>
    test 26 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 27 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 28 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 29 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 30 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 31 toLatLon: <class 'pygeodesy.sphericalNvector.LatLon'>
    test 32 toNvector: <class 'pygeodesy.sphericalNvector.Nvector'>
    test 33 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 34 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 35 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 36 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 37 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 38 isequalTo: <type 'bool'>
    test 39 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 40 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 41 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 42 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 43 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 44 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 45 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 46 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 47 sphericalNvector.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 48 sphericalNvector.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 49 sphericalNvector.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 50 sphericalNvector.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 51 sphericalNvector.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 52 sphericalNvector.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 53 vector3d.trilaterate3d2: (-0.032761, -0.784757, 0.618937)  FAILED, KNOWN, expected [-0.032779, -0.784769, 0.61892]
    test 54 vector3d.trilaterate3d2: (0.025768, -0.798331, 0.601668)  FAILED, KNOWN, expected [0.025768, -0.798347, 0.601646]
    test 55 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 56 vector3d.intersections2: 0.0312613
    test 57 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 58 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 59 Cartesian0: [3980581, 97, 4966825]
    test 60 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 61 isEllipsoidal: False
    test 62 isSpherical: True
    test 63 copy(Cartesian): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 64 Cartesian.copy(): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 65 Vector4Tuple: 0.625376979018, 1.52393750974e-05, 0.780322775447, -5918.38025833
    test 66 LatLon: 50.0379°N, 008.5622°E, -0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 67 LatLon: 51.47°N, 000.4543°E
    test 68 LatLon: 40.633365°N, 073.783328°W
    test 69 LatLon: 33.95°N, 118.4°W
    test 70 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 71 LatLon: 40.96°N, 005.5°E
    test 72 LatLon: 40.1°N, 116.6°E, +0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 73 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 74 copy: True
    test 75 __eq__: True
    test 76 __ne__: False
    test 77 Cartesian: <class 'pygeodesy.sphericalTrigonometry.Cartesian'>
    test 78 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 79 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 80 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 81 isequalTo: <type 'bool'>
    test 82 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 83 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 84 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 85 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 86 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 87 toLatLon: <class 'pygeodesy.sphericalTrigonometry.LatLon'>
    test 88 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 89 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 90 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 91 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 92 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 93 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 94 isequalTo: <type 'bool'>
    test 95 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 96 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 97 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 98 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 99 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 100 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 101 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 102 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 103 sphericalTrigonometry.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 104 sphericalTrigonometry.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 105 sphericalTrigonometry.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 106 sphericalTrigonometry.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 107 sphericalTrigonometry.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 108 sphericalTrigonometry.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 109 vector3d.trilaterate3d2: (-0.032761, -0.784757, 0.618937)  FAILED, KNOWN, expected [-0.032779, -0.784769, 0.61892]
    test 110 vector3d.trilaterate3d2: (0.025768, -0.798331, 0.601668)  FAILED, KNOWN, expected [0.025768, -0.798347, 0.601646]
    test 111 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 112 vector3d.intersections2: 0.0312613
    test 113 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 114 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 115 Cartesian0: [3980581, 97, 4966825]
    test 116 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 117 isEllipsoidal: True
    test 118 isSpherical: False
    test 119 copy(Cartesian): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 120 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 121 Nvector: Nvector(0.62282, 0.00002, 0.78237, +0.24)
    test 122 Nvector3: (0.623, 0.0, 0.782, +0.24)
    test 123 Nvector6: (0.622818, 0.000015, 0.782367, +0.24)
    test 124 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 125 LatLon: 50.0379°N, 008.5622°E
    test 126 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 127 LatLon: 51.47°N, 000.4543°E, +0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 128 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 129 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 130 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 131 LatLon: 33.95°N, 118.4°W
    test 132 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 133 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 134 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 135 LatLon: 40.96°N, 005.5°E, +0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 136 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 137 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 138 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 139 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 140 copy: True
    test 141 __eq__: True
    test 142 __ne__: False
    test 143 Cartesian: <class 'pygeodesy.ellipsoidalNvector.Cartesian'>
    test 144 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 145 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 146 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 147 isequalTo: <type 'bool'>
    test 148 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 149 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 150 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 151 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 152 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 153 toLatLon: <class 'pygeodesy.ellipsoidalNvector.LatLon'>
    test 154 toNvector: <class 'pygeodesy.ellipsoidalNvector.Nvector'>
    test 155 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 156 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 157 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 158 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 159 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 160 isequalTo: <type 'bool'>
    test 161 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 162 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 163 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 164 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 165 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 166 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 167 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 168 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 169 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 170 vector3d.intersections2: 0.0312613
    test 171 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 172 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 173 Cartesian0: [3980581, 97, 4966825]
    test 174 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 175 isEllipsoidal: True
    test 176 isSpherical: False
    test 177 copy(Cartesian): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 178 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 179 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808456
    test 180 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 181 LatLon: 50.0379°N, 008.5622°E
    test 182 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 183 LatLon: 51.47°N, 000.4543°E, +0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 184 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 185 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 186 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 187 LatLon: 33.95°N, 118.4°W
    test 188 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 189 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 190 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 191 LatLon: 40.96°N, 005.5°E, +0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 192 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 193 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 194 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 195 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 196 copy: True
    test 197 __eq__: True
    test 198 __ne__: False
    test 199 Cartesian: <class 'pygeodesy.ellipsoidalVincenty.Cartesian'>
    test 200 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 201 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 202 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 203 isequalTo: <type 'bool'>
    test 204 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 205 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 206 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 207 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 208 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 209 toLatLon: <class 'pygeodesy.ellipsoidalVincenty.LatLon'>
    test 210 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 211 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 212 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 213 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 214 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 215 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 216 isequalTo: <type 'bool'>
    test 217 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 218 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 219 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 220 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 221 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 222 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 223 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 224 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 225 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 226 vector3d.intersections2: 0.0312613
    test 227 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 228 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 229 Cartesian0: [3980581, 97, 4966825]
    test 230 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 231 isEllipsoidal: True
    test 232 isSpherical: False
    test 233 copy(Cartesian): (<class 'pygeodesy.ellipsoidalGeodSolve.Cartesian'>, True)
    test 234 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalGeodSolve.Cartesian'>, True)
    test 235 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808456
    test 236 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 237 LatLon: 50.0379°N, 008.5622°E
    test 238 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 239 LatLon: 51.47°N, 000.4543°E
    test 240 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 241 LatLon: 40.633365°N, 073.783328°W
    test 242 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 243 LatLon: 33.95°N, 118.4°W, -0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 244 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 245 LatLon: 41.32°S, 174.81°E
    test 246 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 247 LatLon: 40.96°N, 005.5°E
    test 248 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 249 LatLon: 40.1°N, 116.6°E
    test 250 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 251 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 252 copy: True
    test 253 __eq__: True
    test 254 __ne__: False
    test 255 Cartesian: <class 'pygeodesy.ellipsoidalGeodSolve.Cartesian'>
    test 256 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 257 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 258 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 259 isequalTo: <type 'bool'>
    test 260 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 261 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 262 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 263 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 264 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 265 toLatLon: <class 'pygeodesy.ellipsoidalGeodSolve.LatLon'>
    test 266 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 267 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 268 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 269 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 270 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 271 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 272 isequalTo: <type 'bool'>
    test 273 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 274 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 275 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 276 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 277 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 278 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 279 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 280 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 281 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 282 vector3d.intersections2: 0.0312613
    test 283 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 284 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalExact, 21.06.27)
    test 285 Cartesian0: [3980581, 97, 4966825]
    test 286 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 287 isEllipsoidal: True
    test 288 isSpherical: False
    test 289 copy(Cartesian): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 290 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 291 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808456
    test 292 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 293 LatLon: 50.0379°N, 008.5622°E
    test 294 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 295 LatLon: 51.47°N, 000.4543°E
    test 296 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 297 LatLon: 40.633365°N, 073.783328°W
    test 298 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 299 LatLon: 33.95°N, 118.4°W, -0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 300 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 301 LatLon: 41.32°S, 174.81°E
    test 302 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 303 LatLon: 40.96°N, 005.5°E
    test 304 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 305 LatLon: 40.1°N, 116.6°E
    test 306 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 307 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 308 copy: True
    test 309 __eq__: True
    test 310 __ne__: False
    test 311 Cartesian: <class 'pygeodesy.ellipsoidalExact.Cartesian'>
    test 312 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 313 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 314 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 315 isequalTo: <type 'bool'>
    test 316 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 317 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 318 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 319 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 320 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 321 toLatLon: <class 'pygeodesy.ellipsoidalExact.LatLon'>
    test 322 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 323 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 324 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 325 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 326 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 327 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 328 isequalTo: <type 'bool'>
    test 329 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 330 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 331 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 332 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 333 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 334 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 335 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 336 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 337 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 338 vector3d.intersections2: 0.0312613
    test 339 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 340 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    28 of 340 testCartesian.py tests (8.2%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 52.140 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testClasses.py

    testing testClasses.py 21.05.16

    testCartesianAttrs(21.05.16)
    test 1 Ecef Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 2 angleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 3 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 4 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 5 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 6 classnaming property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 7 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 8 cmp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 9 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 10 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 11 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 12 cross() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 13 crosserrors property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 14 datum property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 15 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 16 dividedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 17 dot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 18 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 19 euclid Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 20 height property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 21 intersections2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 22 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 23 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 24 iscolinearWith() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 25 isconjugateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 26 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 27 latlon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 28 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 29 latlonheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 30 length Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 31 length2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 32 meeus2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 33 minus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 34 name property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 35 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 36 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 37 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 38 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 39 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 40 negate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 41 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 42 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 43 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 44 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 45 philamheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 46 plus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 47 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 48 rotate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 49 rotateAround() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 50 sum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 51 times() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 52 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 53 to2ll() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 54 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 55 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 56 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 57 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 58 toLatLon() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 59 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 60 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 61 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 62 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 63 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 64 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 65 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 66 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 67 trilaterate2d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 68 trilaterate3d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 69 unit() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 70 x Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 71 xyz Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 72 y Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 73 z Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testCartesianMro(21.05.16)
    test 74 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 75 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 76 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 77 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 78 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 79 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 80 pygeodesy.ellipsoidalGeodSolve: pygeodesy.ellipsoidalGeodSolve.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testLatLonAttrs(21.05.16)
    test 81 Ecef Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 82 Equidistant Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 83 PointsIter() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 84 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 85 antipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 86 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 87 bearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 88 bearingTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 89 bounds() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 90 boundsOf() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 91 chordTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 92 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 93 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 94 classnaming property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 95 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 96 compassAngle() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 97 compassAngleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 98 convergence property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 99 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 100 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 101 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 102 cosineAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 103 cosineForsytheAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 104 cosineLawTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 105 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 106 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 107 datum property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 108 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 109 deltas() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 110 destination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 111 destination2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 112 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 113 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 114 distanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 115 distanceTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 116 distanceTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 117 elevation2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 118 ellipsoid() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 119 ellipsoids() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 120 epoch property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 121 epsilon property: pygeodesy.ellipsoidalVincenty
    test 122 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 123 equals3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 124 equirectangularTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 125 euclideanTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 126 finalBearingOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 127 finalBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 128 flatLocalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 129 flatPolarTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 130 geodesic Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 131 geodesicx Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve
    test 132 geoidHeight2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 133 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 134 greatCircleTo() method: pygeodesy.sphericalNvector
    test 135 haversineTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 136 height property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 137 heightStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 138 hubenyTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 139 initialBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 140 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 141 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 142 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 143 intersection3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 144 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 145 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 146 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 147 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 148 isWithin() method: pygeodesy.sphericalNvector
    test 149 isantipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 150 isantipodeTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 151 isenclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 152 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 153 isequalTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 154 iswithin() method: pygeodesy.sphericalNvector
    test 155 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 156 iterations property: pygeodesy.ellipsoidalVincenty
    test 157 lam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 158 lat property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 159 latlon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 160 latlon2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 161 latlon2round() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 162 latlon_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 163 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 164 lon property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 165 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 166 midpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 167 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 168 name property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 169 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 170 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 171 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 172 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 173 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 174 nearestOn2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 175 nearestOn3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 176 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 177 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 178 phi Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 179 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 180 philam2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 181 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 182 points() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 183 points2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 184 reframe property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 185 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 186 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 187 rhumbDestination() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 188 rhumbDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 189 rhumbMidpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 190 scale Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 191 thomasTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 192 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 193 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 194 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 195 toCartesian() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 196 toCss() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 197 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 198 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 199 toEtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 200 toLcc() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 201 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 202 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 203 toMgrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 204 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 205 toOsgr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 206 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 207 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 208 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 209 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 210 toUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 211 toUtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 212 toUtmUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 213 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 214 toVector3d() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 215 toWm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 216 triangle7() method: pygeodesy.sphericalTrigonometry
    test 217 triangulate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 218 trilaterate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 219 trilaterate5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 220 vincentysTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 221 xyz Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 222 xyzh Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testLatLonMro(21.05.16)
    test 223 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 224 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 225 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 226 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 227 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 228 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 229 pygeodesy.ellipsoidalGeodSolve: pygeodesy.ellipsoidalGeodSolve.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testNvectorAttrs(21.05.16)
    test 230 Ecef Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 231 H property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 232 angleTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 233 attrs() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 234 circum3() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 235 classname Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 236 classnaming property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 237 classof() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 238 cmp() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 239 copy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 240 cross() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 241 crosserrors property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 242 datum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 243 dividedBy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 244 dot() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 245 equals() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 246 euclid Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 247 greatCircle() method: pygeodesy.sphericalNvector
    test 248 h property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 249 hStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 250 isEllipsoidal Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 251 isSpherical Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 252 iscolinearWith() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 253 isconjugateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 254 isequalTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 255 lam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 256 lat Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 257 latlon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 258 latlonheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 259 latlonheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 260 length Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 261 length2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 262 lon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 263 meeus2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 264 minus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 265 name property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 266 named Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 267 named2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 268 named3 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 269 named4 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 270 nearestOn() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 271 negate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 272 others() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 273 parse() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 274 phi Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 275 philam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 276 philamheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 277 philamheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 278 plus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 279 rename() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 280 rotate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 281 rotateAround() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 282 sum() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 283 times() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 284 to2ab() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 285 to2ll() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 286 to3abh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 287 to3llh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 288 to3xyz() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 289 to4xyzh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 290 toCartesian() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 291 toLatLon() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 292 toRepr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 293 toStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 294 toStr2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 295 toVector3d() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 296 trilaterate2d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 297 trilaterate3d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 298 unit() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 299 x Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 300 xyz Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 301 xyzh Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 302 y Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 303 z Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector

    testNvectorMro(21.05.16)
    test 304 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 305 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testVector3dAttrs(21.05.16)
    test 306 angleTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 307 attrs() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 308 circum3() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 309 classname Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 310 classnaming property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 311 classof() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 312 cmp() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 313 copy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 314 cross() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 315 crosserrors property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 316 dividedBy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 317 dot() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 318 equals() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 319 euclid Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 320 iscolinearWith() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 321 isconjugateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 322 isequalTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 323 length Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 324 length2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 325 meeus2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 326 minus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 327 name property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 328 named Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 329 named2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 330 named3 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 331 named4 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 332 nearestOn() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 333 negate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 334 others() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 335 parse() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 336 plus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 337 rename() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 338 rotate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 339 rotateAround() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 340 sum() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 341 times() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 342 to2ab() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 343 to2ll() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 344 to3xyz() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 345 toRepr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 346 toStr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 347 toStr2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 348 trilaterate2d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 349 trilaterate3d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 350 unit() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 351 x Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 352 xyz Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 353 y Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 354 z Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d

    testVector3dMro(21.05.16)
    test 355 pygeodesy.nvectorBase: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 356 pygeodesy.vector3d: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 357 pygeodesy.sphericalTrigonometry: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testCopyAttr(21.05.16)
    test 358 Aer: copy
    test 359 Aer4Tuple: copy
    test 360 Albers7Tuple: copy
    test 361 AlbersEqualArea: copy
    test 362 AlbersEqualArea2: copy
    test 363 AlbersEqualArea4: copy
    test 364 AlbersEqualAreaCylindrical: copy
    test 365 AlbersEqualAreaNorth: copy
    test 366 AlbersEqualAreaSouth: copy
    test 367 Azimuthal7Tuple: copy
    test 368 Band: copy
    test 369 Bearing: copy
    test 370 Bearing2Tuple: copy
    test 371 Bearing_: copy
    test 372 Bool: copy
    test 373 Bounds2Tuple: copy
    test 374 Bounds4Tuple: copy
    test 375 CassiniSoldner: copy
    test 376 Circle4Tuple: copy
    test 377 Circum3Tuple: copy
    test 378 ClipCS3Tuple: copy
    test 379 ClipCS4Tuple: copy
    test 380 ClipLB6Tuple: copy
    test 381 ClipSH3Tuple: copy
    test 382 Conic: copy
    test 383 Css: copy
    test 384 Curvature2Tuple: copy
    test 385 Datum: copy
    test 386 Degrees: copy
    test 387 Degrees2: copy
    test 388 Degrees_: copy
    test 389 Destination2Tuple: copy
    test 390 Destination3Tuple: copy
    test 391 Direct9Tuple: copy
    test 392 Distance: copy
    test 393 Distance2Tuple: copy
    test 394 Distance3Tuple: copy
    test 395 Distance4Tuple: copy
    test 396 Distance_: copy
    test 397 EasNor2Tuple: copy
    test 398 EasNor3Tuple: copy
    test 399 EasNorAziRk4Tuple: copy
    test 400 EasNorExact4Tuple: copy
    test 401 EasNorRadius3Tuple: copy
    test 402 Easting: copy
    test 403 Ecef9Tuple: copy
    test 404 EcefCartesian: copy
    test 405 EcefFarrell21: copy
    test 406 EcefFarrell22: copy
    test 407 EcefKarney: copy
    test 408 EcefMatrix: copy
    test 409 EcefSudano: copy
    test 410 EcefVeness: copy
    test 411 EcefYou: copy
    test 412 Elevation2Tuple: copy
    test 413 Ellipsoid: copy
    test 414 Ellipsoid2: copy
    test 415 Elliptic: copy
    test 416 Elliptic3Tuple: copy
    test 417 Enu: copy
    test 418 Enu4Tuple: copy
    test 419 Epoch: copy
    test 420 Epsg: copy
    test 421 Equidistant: copy
    test 422 EquidistantExact: copy
    test 423 EquidistantGeodSolve: copy
    test 424 EquidistantKarney: copy
    test 425 Etm: copy
    test 426 ExactTransverseMercator: copy
    test 427 FIx: copy
    test 428 Fdot: copy
    test 429 Feet: copy
    test 430 Fhorner: copy
    test 431 Float: copy
    test 432 Float_: copy
    test 433 Footprint5Tuple: copy
    test 434 Fpolynomial: copy
    test 435 Frechet: copy
    test 436 Frechet6Tuple: copy
    test 437 FrechetCosineAndoyerLambert: copy
    test 438 FrechetCosineForsytheAndoyerLambert: copy
    test 439 FrechetCosineLaw: copy
    test 440 FrechetDegrees: copy
    test 441 FrechetDistanceTo: copy
    test 442 FrechetEquirectangular: copy
    test 443 FrechetEuclidean: copy
    test 444 FrechetExact: copy
    test 445 FrechetFlatLocal: copy
    test 446 FrechetFlatPolar: copy
    test 447 FrechetHaversine: copy
    test 448 FrechetHubeny: copy
    test 449 FrechetKarney: copy
    test 450 FrechetRadians: copy
    test 451 FrechetThomas: copy
    test 452 FrechetVincentys: copy
    test 453 Frustum: copy
    test 454 Fsum: copy
    test 455 GDict: copy
    test 456 Garef: copy
    test 457 GeodSolve12Tuple: copy
    test 458 GeodesicAreaExact: copy
    test 459 GeodesicExact: copy
    test 460 GeodesicLineExact: copy
    test 461 GeodesicLineSolve: copy
    test 462 GeodesicSolve: copy
    test 463 Geohash: copy
    test 464 GeoidG2012B: copy
    test 465 GeoidHeight2Tuple: copy
    test 466 GeoidHeight5Tuple: copy
    test 467 GeoidKarney: copy
    test 468 GeoidPGM: copy
    test 469 Georef: copy
    test 470 Gnomonic: copy
    test 471 GnomonicExact: copy
    test 472 GnomonicGeodSolve: copy
    test 473 GnomonicKarney: copy
    test 474 Hausdorff: copy
    test 475 Hausdorff6Tuple: copy
    test 476 HausdorffCosineAndoyerLambert: copy
    test 477 HausdorffCosineForsytheAndoyerLambert: copy
    test 478 HausdorffCosineLaw: copy
    test 479 HausdorffDegrees: copy
    test 480 HausdorffDistanceTo: copy
    test 481 HausdorffEquirectangular: copy
    test 482 HausdorffEuclidean: copy
    test 483 HausdorffExact: copy
    test 484 HausdorffFlatLocal: copy
    test 485 HausdorffFlatPolar: copy
    test 486 HausdorffHaversine: copy
    test 487 HausdorffHubeny: copy
    test 488 HausdorffKarney: copy
    test 489 HausdorffRadians: copy
    test 490 HausdorffThomas: copy
    test 491 HausdorffVincentys: copy
    test 492 Height: copy
    test 493 HeightCubic: copy
    test 494 HeightIDW: copy
    test 495 HeightIDW2: copy
    test 496 HeightIDW3: copy
    test 497 HeightIDWcosineAndoyerLambert: copy
    test 498 HeightIDWcosineForsytheAndoyerLambert: copy
    test 499 HeightIDWcosineLaw: copy
    test 500 HeightIDWdistanceTo: copy
    test 501 HeightIDWequirectangular: copy
    test 502 HeightIDWeuclidean: copy
    test 503 HeightIDWflatLocal: copy
    test 504 HeightIDWflatPolar: copy
    test 505 HeightIDWhaversine: copy
    test 506 HeightIDWhubeny: copy
    test 507 HeightIDWkarney: copy
    test 508 HeightIDWthomas: copy
    test 509 HeightIDWvincentys: copy
    test 510 HeightLSQBiSpline: copy
    test 511 HeightLinear: copy
    test 512 HeightSmoothBiSpline: copy
    test 513 Int: copy
    test 514 Int_: copy
    test 515 Intersection3Tuple: copy
    test 516 Inverse10Tuple: copy
    test 517 Lam: copy
    test 518 Lam_: copy
    test 519 LambertEqualArea: copy
    test 520 Lat: copy
    test 521 LatLon2PsxyIter: copy
    test 522 LatLon2Tuple: copy
    test 523 LatLon2psxy: copy
    test 524 LatLon3Tuple: copy
    test 525 LatLon4Tuple: copy
    test 526 LatLonAziRk4Tuple: copy
    test 527 LatLonDatum3Tuple: copy
    test 528 LatLonDatum5Tuple: copy
    test 529 LatLonExact4Tuple: copy
    test 530 LatLonPrec3Tuple: copy
    test 531 LatLonPrec5Tuple: copy
    test 532 LatLon_: copy
    test 533 Lat_: copy
    test 534 Lcc: copy
    test 535 Local9Tuple: copy
    test 536 LocalCartesian: copy
    test 537 Lon: copy
    test 538 Lon_: copy
    test 539 Ltp: copy
    test 540 Meeus2Tuple: copy
    test 541 Meter: copy
    test 542 Meter2: copy
    test 543 Meter3: copy
    test 544 Meter_: copy
    test 545 Mgrs: copy
    test 546 Mgrs4Tuple: copy
    test 547 Mgrs6Tuple: copy
    test 548 NearestOn3Tuple: copy
    test 549 NearestOn5Tuple: copy
    test 550 Ned: copy
    test 551 Ned3Tuple: copy
    test 552 Ned4Tuple: copy
    test 553 Neighbors8Dict: copy
    test 554 Northing: copy
    test 555 Number_: copy
    test 556 Numpy2LatLon: copy
    test 557 Orthographic: copy
    test 558 Osgr: copy
    test 559 Phi: copy
    test 560 PhiLam2Tuple: copy
    test 561 PhiLam3Tuple: copy
    test 562 PhiLam4Tuple: copy
    test 563 Phi_: copy
    test 564 Point3Tuple: copy
    test 565 Points2Tuple: copy
    test 566 PointsIter: copy
    test 567 PolygonArea: copy
    test 568 Precision_: copy
    test 569 Radians: copy
    test 570 Radians2: copy
    test 571 Radians_: copy
    test 572 Radical2Tuple: copy
    test 573 Radius: copy
    test 574 Radius_: copy
    test 575 RefFrame: copy
    test 576 Resolutions2Tuple: copy
    test 577 Scalar: copy
    test 578 Scalar_: copy
    test 579 Shape2Tuple: copy
    test 580 Stereographic: copy
    test 581 Str: copy
    test 582 Transform: copy
    test 583 Transform7Tuple: copy
    test 584 Triangle7Tuple: copy
    test 585 Triangle8Tuple: copy
    test 586 Trilaterate5Tuple: copy
    test 587 Tuple2LatLon: copy
    test 588 Ups: copy
    test 589 Utm: copy
    test 590 UtmUps2Tuple: copy
    test 591 UtmUps4Tuple: copy
    test 592 UtmUps5Tuple: copy
    test 593 UtmUps8Tuple: copy
    test 594 UtmUpsLatLon5Tuple: copy
    test 595 Vector2Tuple: copy
    test 596 Vector3Tuple: copy
    test 597 Vector3d: copy
    test 598 Vector4Tuple: copy
    test 599 Wm: copy
    test 600 Xyz4Tuple: copy
    test 601 XyzLocal: copy
    test 602 Zone: copy
    test 603 a_f2Tuple: copy

    all 603 testClasses.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 15.235 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testClipy.py

    testing testClipy.py 20.12.05

    testing(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 1 clipCS4.p1: 07.5°N, 010.0°E
    test 2 clipCS4.p2: 04.5°N, 000.0°E
    test 3 clipCS4.i: 3
    test 4 clipCS4.j: 0
    test 5 clipCS4.p1: 05.0°N, 005.0°E
    test 6 clipCS4.p2: 05.0°N, 005.0°E
    test 7 clipCS4.i: 1
    test 8 clipCS4.j: 2
    test 9 clipLB6.p1: 07.5°N, 010.0°E
    test 10 clipLB6.p2: 04.5°N, 000.0°E
    test 11 clipLB6.i: 3
    test 12 clipLB6.fi: 3.25
    test 13 clipLB6.fi: 07.5°N, 010.0°E
    test 14 clipLB6.fj: 3.75
    test 15 clipLB6.fj: 04.5°N, 000.0°E
    test 16 clipLB6.j: 0
    test 17 clipLB6.fin: 4
    test 18 clipLB6.p1: 05.0°N, 005.0°E
    test 19 clipLB6.p2: 05.0°N, 005.0°E
    test 20 clipLB6.i: 1
    test 21 clipLB6.fi: 1.00
    test 22 clipLB6.fi: 05.0°N, 005.0°E
    test 23 clipLB6.fj: 2.00
    test 24 clipLB6.fj: 05.0°N, 005.0°E
    test 25 clipLB6.j: 2
    test 26 clipLB6.fin: 4
    test 27 clipCS4.p1: 60.0°N, 123.333333°E
    test 28 clipCS4.p2: 62.857143°N, 130.0°E
    test 29 clipCS4.i: 0
    test 30 clipCS4.j: 1
    test 31 clipLB6.p1: 60.0°N, 123.333333°E
    test 32 clipLB6.p2: 62.857143°N, 130.0°E
    test 33 clipLB6.i: 0
    test 34 clipLB6.fi: 0.666667
    test 35 clipLB6.fi: 60.0°N, 123.333333°E
    test 36 clipLB6.fj: 0.714286
    test 37 clipLB6.fj: 62.857143°N, 130.0°E
    test 38 clipLB6.j: 1
    test 39 clipLB6.fin: 0
    test 40 clipCS4.p1: 17.5°N, 020.0°E
    test 41 clipCS4.p2: 16.25°N, 015.0°E
    test 42 clipCS4.i: 2
    test 43 clipCS4.j: 0
    test 44 clipLB6.p1: 17.5°N, 020.0°E
    test 45 clipLB6.p2: 16.25°N, 015.0°E
    test 46 clipLB6.i: 2
    test 47 clipLB6.fi: 2.500
    test 48 clipLB6.fi: 17.5°N, 020.0°E
    test 49 clipLB6.fj: 2.750
    test 50 clipLB6.fj: 16.25°N, 015.0°E
    test 51 clipLB6.j: 0
    test 52 clipLB6.fin: 3
    test 53 clipSH1.len: 4
    test 54 clipSH1.0: 20.0°N, 020.0°E
    test 55 clipSH1.LL: True
    test 56 clipSH1.1: 17.5°N, 020.0°E
    test 57 clipSH1.LL: True
    test 58 clipSH1.2: 16.25°N, 015.0°E
    test 59 clipSH1.LL: True
    test 60 clipSH1.3: 20.0°N, 015.0°E
    test 61 clipSH1.LL: True
    test 62 clipSH2.len: 5
    test 63 clipSH2.0: 18.571°N, 024.286°E
    test 64 clipSH2.LL: True
    test 65 clipSH2.1: 16.667°N, 016.667°E
    test 66 clipSH2.LL: True
    test 67 clipSH2.2: 20.0°N, 015.0°E
    test 68 clipSH2.LL: True
    test 69 clipSH2.3: 25.0°N, 020.0°E
    test 70 clipSH2.LL: True
    test 71 clipSH2.4: 22.0°N, 026.0°E
    test 72 clipSH2.LL: True
    test 73 clipSH3.len: 2
    test 74 clipSH3.0: 18.571°N, 024.286°E
    test 75 clipSH3.LL: True
    test 76 clipSH3.1: 16.667°N, 016.667°E
    test 77 clipSH3.LL: True
    test 78 clipSH3.edge.: True
    test 79 clipSH3.len: 2
    test 80 clipSH3.0: 16.667°N, 016.667°E
    test 81 clipSH3.LL: True
    test 82 clipSH3.1: 20.0°N, 015.0°E
    test 83 clipSH3.LL: True
    test 84 clipSH3.edge.: False
    test 85 clipSH3.len: 2
    test 86 clipSH3.0: 20.0°N, 015.0°E
    test 87 clipSH3.LL: True
    test 88 clipSH3.1: 25.0°N, 020.0°E
    test 89 clipSH3.LL: True
    test 90 clipSH3.edge.: True
    test 91 clipSH3.len: 2
    test 92 clipSH3.0: 25.0°N, 020.0°E
    test 93 clipSH3.LL: True
    test 94 clipSH3.1: 22.0°N, 026.0°E
    test 95 clipSH3.LL: True
    test 96 clipSH3.edge.: True
    test 97 clipSH3.len: 2
    test 98 clipSH3.0: 22.0°N, 026.0°E
    test 99 clipSH3.LL: True
    test 100 clipSH3.1: 18.571°N, 024.286°E
    test 101 clipSH3.LL: True
    test 102 clipSH3.edge.: False
    test 103 clipSH2.reversed.len: 5
    test 104 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 105 clipSH2.reversed.LL: True
    test 106 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 107 clipSH2.reversed.LL: True
    test 108 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 109 clipSH2.reversed.LL: True
    test 110 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 111 clipSH2.reversed.LL: True
    test 112 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 113 clipSH2.reversed.LL: True
    test 114 clipSH3.reversed.len: 2
    test 115 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 116 clipSH3.reversed.LL: True
    test 117 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 118 clipSH3.reversed.LL: True
    test 119 clipSH3.edge.reversed.: True
    test 120 clipSH3.reversed.len: 2
    test 121 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 122 clipSH3.reversed.LL: True
    test 123 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 124 clipSH3.reversed.LL: True
    test 125 clipSH3.edge.reversed.: False
    test 126 clipSH3.reversed.len: 2
    test 127 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 128 clipSH3.reversed.LL: True
    test 129 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 130 clipSH3.reversed.LL: True
    test 131 clipSH3.edge.reversed.: True
    test 132 clipSH3.reversed.len: 2
    test 133 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 134 clipSH3.reversed.LL: True
    test 135 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 136 clipSH3.reversed.LL: True
    test 137 clipSH3.edge.reversed.: True
    test 138 clipSH3.reversed.len: 2
    test 139 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 140 clipSH3.reversed.LL: True
    test 141 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 142 clipSH3.reversed.LL: True
    test 143 clipSH3.edge.reversed.: False
    test 144 clipSH.allout: ()
    test 145 clipSH3.allout: ()
    test 146 clipSH.allout.reversed: ()
    test 147 clipSH3.allout.reversed: ()
    test 148 clipSH.allin.len: 4
    test 149 clipSH.allin.0: 20.0°N, 030.0°E
    test 150 clipSH.allin.LL: True
    test 151 clipSH.allin.1: 15.0°N, 010.0°E
    test 152 clipSH.allin.LL: True
    test 153 clipSH.allin.2: 25.0°N, 020.0°E
    test 154 clipSH.allin.LL: True
    test 155 clipSH.allin.3: 20.0°N, 030.0°E
    test 156 clipSH.allin.LL: True
    test 157 clipSH3.allin.len: 2
    test 158 clipSH3.allin.0: 20.0°N, 030.0°E
    test 159 clipSH3.allin.LL: True
    test 160 clipSH3.allin.1: 15.0°N, 010.0°E
    test 161 clipSH3.allin.LL: True
    test 162 clipSH3.edge.: True
    test 163 clipSH3.allin.len: 2
    test 164 clipSH3.allin.0: 15.0°N, 010.0°E
    test 165 clipSH3.allin.LL: True
    test 166 clipSH3.allin.1: 25.0°N, 020.0°E
    test 167 clipSH3.allin.LL: True
    test 168 clipSH3.edge.: True
    test 169 clipSH.allin.reversed.len: 4
    test 170 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 171 clipSH.allin.reversed.LL: True
    test 172 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 173 clipSH.allin.reversed.LL: True
    test 174 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 175 clipSH.allin.reversed.LL: True
    test 176 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 177 clipSH.allin.reversed.LL: True
    test 178 clipSH3.allin.reversed.len: 2
    test 179 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 180 clipSH3.allin.reversed.LL: True
    test 181 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 182 clipSH3.allin.reversed.LL: True
    test 183 clipSH3.edge.reversed.: True
    test 184 clipSH3.allin.reversed.len: 2
    test 185 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 186 clipSH3.allin.reversed.LL: True
    test 187 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 188 clipSH3.allin.reversed.LL: True
    test 189 clipSH3.edge.reversed.: True
    test 190 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 191 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 192 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 193 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex

    testing(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 194 clipCS4.p1: 07.5°N, 010.0°E
    test 195 clipCS4.p2: 04.5°N, 000.0°E
    test 196 clipCS4.i: 3
    test 197 clipCS4.j: 0
    test 198 clipCS4.p1: 05.0°N, 005.0°E
    test 199 clipCS4.p2: 05.0°N, 005.0°E
    test 200 clipCS4.i: 1
    test 201 clipCS4.j: 2
    test 202 clipLB6.p1: 07.5°N, 010.0°E
    test 203 clipLB6.p2: 04.5°N, 000.0°E
    test 204 clipLB6.i: 3
    test 205 clipLB6.fi: 3.25
    test 206 clipLB6.fi: 07.5°N, 010.0°E
    test 207 clipLB6.fj: 3.75
    test 208 clipLB6.fj: 04.5°N, 000.0°E
    test 209 clipLB6.j: 0
    test 210 clipLB6.fin: 4
    test 211 clipLB6.p1: 05.0°N, 005.0°E
    test 212 clipLB6.p2: 05.0°N, 005.0°E
    test 213 clipLB6.i: 1
    test 214 clipLB6.fi: 1.00
    test 215 clipLB6.fi: 05.0°N, 005.0°E
    test 216 clipLB6.fj: 2.00
    test 217 clipLB6.fj: 05.0°N, 005.0°E
    test 218 clipLB6.j: 2
    test 219 clipLB6.fin: 4
    test 220 clipCS4.p1: 60.0°N, 123.333333°E
    test 221 clipCS4.p2: 62.857143°N, 130.0°E
    test 222 clipCS4.i: 0
    test 223 clipCS4.j: 1
    test 224 clipLB6.p1: 60.0°N, 123.333333°E
    test 225 clipLB6.p2: 62.857143°N, 130.0°E
    test 226 clipLB6.i: 0
    test 227 clipLB6.fi: 0.666667
    test 228 clipLB6.fi: 60.0°N, 123.333333°E
    test 229 clipLB6.fj: 0.714286
    test 230 clipLB6.fj: 62.857143°N, 130.0°E
    test 231 clipLB6.j: 1
    test 232 clipLB6.fin: 0
    test 233 clipCS4.p1: 17.5°N, 020.0°E
    test 234 clipCS4.p2: 16.25°N, 015.0°E
    test 235 clipCS4.i: 2
    test 236 clipCS4.j: 0
    test 237 clipLB6.p1: 17.5°N, 020.0°E
    test 238 clipLB6.p2: 16.25°N, 015.0°E
    test 239 clipLB6.i: 2
    test 240 clipLB6.fi: 2.500
    test 241 clipLB6.fi: 17.5°N, 020.0°E
    test 242 clipLB6.fj: 2.750
    test 243 clipLB6.fj: 16.25°N, 015.0°E
    test 244 clipLB6.j: 0
    test 245 clipLB6.fin: 3
    test 246 clipSH1.len: 4
    test 247 clipSH1.0: 20.0°N, 020.0°E
    test 248 clipSH1.LL: True
    test 249 clipSH1.1: 17.5°N, 020.0°E
    test 250 clipSH1.LL: True
    test 251 clipSH1.2: 16.25°N, 015.0°E
    test 252 clipSH1.LL: True
    test 253 clipSH1.3: 20.0°N, 015.0°E
    test 254 clipSH1.LL: True
    test 255 clipSH2.len: 5
    test 256 clipSH2.0: 18.571°N, 024.286°E
    test 257 clipSH2.LL: True
    test 258 clipSH2.1: 16.667°N, 016.667°E
    test 259 clipSH2.LL: True
    test 260 clipSH2.2: 20.0°N, 015.0°E
    test 261 clipSH2.LL: True
    test 262 clipSH2.3: 25.0°N, 020.0°E
    test 263 clipSH2.LL: True
    test 264 clipSH2.4: 22.0°N, 026.0°E
    test 265 clipSH2.LL: True
    test 266 clipSH3.len: 2
    test 267 clipSH3.0: 18.571°N, 024.286°E
    test 268 clipSH3.LL: True
    test 269 clipSH3.1: 16.667°N, 016.667°E
    test 270 clipSH3.LL: True
    test 271 clipSH3.edge.: True
    test 272 clipSH3.len: 2
    test 273 clipSH3.0: 16.667°N, 016.667°E
    test 274 clipSH3.LL: True
    test 275 clipSH3.1: 20.0°N, 015.0°E
    test 276 clipSH3.LL: True
    test 277 clipSH3.edge.: False
    test 278 clipSH3.len: 2
    test 279 clipSH3.0: 20.0°N, 015.0°E
    test 280 clipSH3.LL: True
    test 281 clipSH3.1: 25.0°N, 020.0°E
    test 282 clipSH3.LL: True
    test 283 clipSH3.edge.: True
    test 284 clipSH3.len: 2
    test 285 clipSH3.0: 25.0°N, 020.0°E
    test 286 clipSH3.LL: True
    test 287 clipSH3.1: 22.0°N, 026.0°E
    test 288 clipSH3.LL: True
    test 289 clipSH3.edge.: True
    test 290 clipSH3.len: 2
    test 291 clipSH3.0: 22.0°N, 026.0°E
    test 292 clipSH3.LL: True
    test 293 clipSH3.1: 18.571°N, 024.286°E
    test 294 clipSH3.LL: True
    test 295 clipSH3.edge.: False
    test 296 clipSH2.reversed.len: 5
    test 297 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 298 clipSH2.reversed.LL: True
    test 299 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 300 clipSH2.reversed.LL: True
    test 301 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 302 clipSH2.reversed.LL: True
    test 303 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 304 clipSH2.reversed.LL: True
    test 305 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 306 clipSH2.reversed.LL: True
    test 307 clipSH3.reversed.len: 2
    test 308 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 309 clipSH3.reversed.LL: True
    test 310 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 311 clipSH3.reversed.LL: True
    test 312 clipSH3.edge.reversed.: True
    test 313 clipSH3.reversed.len: 2
    test 314 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 315 clipSH3.reversed.LL: True
    test 316 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 317 clipSH3.reversed.LL: True
    test 318 clipSH3.edge.reversed.: False
    test 319 clipSH3.reversed.len: 2
    test 320 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 321 clipSH3.reversed.LL: True
    test 322 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 323 clipSH3.reversed.LL: True
    test 324 clipSH3.edge.reversed.: True
    test 325 clipSH3.reversed.len: 2
    test 326 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 327 clipSH3.reversed.LL: True
    test 328 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 329 clipSH3.reversed.LL: True
    test 330 clipSH3.edge.reversed.: True
    test 331 clipSH3.reversed.len: 2
    test 332 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 333 clipSH3.reversed.LL: True
    test 334 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 335 clipSH3.reversed.LL: True
    test 336 clipSH3.edge.reversed.: False
    test 337 clipSH.allout: ()
    test 338 clipSH3.allout: ()
    test 339 clipSH.allout.reversed: ()
    test 340 clipSH3.allout.reversed: ()
    test 341 clipSH.allin.len: 4
    test 342 clipSH.allin.0: 20.0°N, 030.0°E
    test 343 clipSH.allin.LL: True
    test 344 clipSH.allin.1: 15.0°N, 010.0°E
    test 345 clipSH.allin.LL: True
    test 346 clipSH.allin.2: 25.0°N, 020.0°E
    test 347 clipSH.allin.LL: True
    test 348 clipSH.allin.3: 20.0°N, 030.0°E
    test 349 clipSH.allin.LL: True
    test 350 clipSH3.allin.len: 2
    test 351 clipSH3.allin.0: 20.0°N, 030.0°E
    test 352 clipSH3.allin.LL: True
    test 353 clipSH3.allin.1: 15.0°N, 010.0°E
    test 354 clipSH3.allin.LL: True
    test 355 clipSH3.edge.: True
    test 356 clipSH3.allin.len: 2
    test 357 clipSH3.allin.0: 15.0°N, 010.0°E
    test 358 clipSH3.allin.LL: True
    test 359 clipSH3.allin.1: 25.0°N, 020.0°E
    test 360 clipSH3.allin.LL: True
    test 361 clipSH3.edge.: True
    test 362 clipSH.allin.reversed.len: 4
    test 363 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 364 clipSH.allin.reversed.LL: True
    test 365 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 366 clipSH.allin.reversed.LL: True
    test 367 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 368 clipSH.allin.reversed.LL: True
    test 369 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 370 clipSH.allin.reversed.LL: True
    test 371 clipSH3.allin.reversed.len: 2
    test 372 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 373 clipSH3.allin.reversed.LL: True
    test 374 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 375 clipSH3.allin.reversed.LL: True
    test 376 clipSH3.edge.reversed.: True
    test 377 clipSH3.allin.reversed.len: 2
    test 378 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 379 clipSH3.allin.reversed.LL: True
    test 380 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 381 clipSH3.allin.reversed.LL: True
    test 382 clipSH3.edge.reversed.: True
    test 383 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 384 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 385 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 386 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex

    testing(pygeodesy.sphericalNvector, 21.06.09)
    test 387 clipCS4.p1: 07.5°N, 010.0°E
    test 388 clipCS4.p2: 04.5°N, 000.0°E
    test 389 clipCS4.i: 3
    test 390 clipCS4.j: 0
    test 391 clipCS4.p1: 05.0°N, 005.0°E
    test 392 clipCS4.p2: 05.0°N, 005.0°E
    test 393 clipCS4.i: 1
    test 394 clipCS4.j: 2
    test 395 clipLB6.p1: 07.5°N, 010.0°E
    test 396 clipLB6.p2: 04.5°N, 000.0°E
    test 397 clipLB6.i: 3
    test 398 clipLB6.fi: 3.25
    test 399 clipLB6.fi: 07.5°N, 010.0°E
    test 400 clipLB6.fj: 3.75
    test 401 clipLB6.fj: 04.5°N, 000.0°E
    test 402 clipLB6.j: 0
    test 403 clipLB6.fin: 4
    test 404 clipLB6.p1: 05.0°N, 005.0°E
    test 405 clipLB6.p2: 05.0°N, 005.0°E
    test 406 clipLB6.i: 1
    test 407 clipLB6.fi: 1.00
    test 408 clipLB6.fi: 05.0°N, 005.0°E
    test 409 clipLB6.fj: 2.00
    test 410 clipLB6.fj: 05.0°N, 005.0°E
    test 411 clipLB6.j: 2
    test 412 clipLB6.fin: 4
    test 413 clipCS4.p1: 60.0°N, 123.333333°E
    test 414 clipCS4.p2: 62.857143°N, 130.0°E
    test 415 clipCS4.i: 0
    test 416 clipCS4.j: 1
    test 417 clipLB6.p1: 60.0°N, 123.333333°E
    test 418 clipLB6.p2: 62.857143°N, 130.0°E
    test 419 clipLB6.i: 0
    test 420 clipLB6.fi: 0.666667
    test 421 clipLB6.fi: 60.0°N, 123.333333°E
    test 422 clipLB6.fj: 0.714286
    test 423 clipLB6.fj: 62.857143°N, 130.0°E
    test 424 clipLB6.j: 1
    test 425 clipLB6.fin: 0
    test 426 clipCS4.p1: 17.5°N, 020.0°E
    test 427 clipCS4.p2: 16.25°N, 015.0°E
    test 428 clipCS4.i: 2
    test 429 clipCS4.j: 0
    test 430 clipLB6.p1: 17.5°N, 020.0°E
    test 431 clipLB6.p2: 16.25°N, 015.0°E
    test 432 clipLB6.i: 2
    test 433 clipLB6.fi: 2.500
    test 434 clipLB6.fi: 17.5°N, 020.0°E
    test 435 clipLB6.fj: 2.750
    test 436 clipLB6.fj: 16.25°N, 015.0°E
    test 437 clipLB6.j: 0
    test 438 clipLB6.fin: 3
    test 439 clipSH1.len: 4
    test 440 clipSH1.0: 20.0°N, 020.0°E
    test 441 clipSH1.LL: True
    test 442 clipSH1.1: 17.5°N, 020.0°E
    test 443 clipSH1.LL: True
    test 444 clipSH1.2: 16.25°N, 015.0°E
    test 445 clipSH1.LL: True
    test 446 clipSH1.3: 20.0°N, 015.0°E
    test 447 clipSH1.LL: True
    test 448 clipSH2.len: 5
    test 449 clipSH2.0: 18.571°N, 024.286°E
    test 450 clipSH2.LL: True
    test 451 clipSH2.1: 16.667°N, 016.667°E
    test 452 clipSH2.LL: True
    test 453 clipSH2.2: 20.0°N, 015.0°E
    test 454 clipSH2.LL: True
    test 455 clipSH2.3: 25.0°N, 020.0°E
    test 456 clipSH2.LL: True
    test 457 clipSH2.4: 22.0°N, 026.0°E
    test 458 clipSH2.LL: True
    test 459 clipSH3.len: 2
    test 460 clipSH3.0: 18.571°N, 024.286°E
    test 461 clipSH3.LL: True
    test 462 clipSH3.1: 16.667°N, 016.667°E
    test 463 clipSH3.LL: True
    test 464 clipSH3.edge.: True
    test 465 clipSH3.len: 2
    test 466 clipSH3.0: 16.667°N, 016.667°E
    test 467 clipSH3.LL: True
    test 468 clipSH3.1: 20.0°N, 015.0°E
    test 469 clipSH3.LL: True
    test 470 clipSH3.edge.: False
    test 471 clipSH3.len: 2
    test 472 clipSH3.0: 20.0°N, 015.0°E
    test 473 clipSH3.LL: True
    test 474 clipSH3.1: 25.0°N, 020.0°E
    test 475 clipSH3.LL: True
    test 476 clipSH3.edge.: True
    test 477 clipSH3.len: 2
    test 478 clipSH3.0: 25.0°N, 020.0°E
    test 479 clipSH3.LL: True
    test 480 clipSH3.1: 22.0°N, 026.0°E
    test 481 clipSH3.LL: True
    test 482 clipSH3.edge.: True
    test 483 clipSH3.len: 2
    test 484 clipSH3.0: 22.0°N, 026.0°E
    test 485 clipSH3.LL: True
    test 486 clipSH3.1: 18.571°N, 024.286°E
    test 487 clipSH3.LL: True
    test 488 clipSH3.edge.: False
    test 489 clipSH2.reversed.len: 5
    test 490 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 491 clipSH2.reversed.LL: True
    test 492 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 493 clipSH2.reversed.LL: True
    test 494 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 495 clipSH2.reversed.LL: True
    test 496 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 497 clipSH2.reversed.LL: True
    test 498 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 499 clipSH2.reversed.LL: True
    test 500 clipSH3.reversed.len: 2
    test 501 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 502 clipSH3.reversed.LL: True
    test 503 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 504 clipSH3.reversed.LL: True
    test 505 clipSH3.edge.reversed.: True
    test 506 clipSH3.reversed.len: 2
    test 507 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 508 clipSH3.reversed.LL: True
    test 509 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 510 clipSH3.reversed.LL: True
    test 511 clipSH3.edge.reversed.: False
    test 512 clipSH3.reversed.len: 2
    test 513 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 514 clipSH3.reversed.LL: True
    test 515 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 516 clipSH3.reversed.LL: True
    test 517 clipSH3.edge.reversed.: True
    test 518 clipSH3.reversed.len: 2
    test 519 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 520 clipSH3.reversed.LL: True
    test 521 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 522 clipSH3.reversed.LL: True
    test 523 clipSH3.edge.reversed.: True
    test 524 clipSH3.reversed.len: 2
    test 525 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 526 clipSH3.reversed.LL: True
    test 527 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 528 clipSH3.reversed.LL: True
    test 529 clipSH3.edge.reversed.: False
    test 530 clipSH.allout: ()
    test 531 clipSH3.allout: ()
    test 532 clipSH.allout.reversed: ()
    test 533 clipSH3.allout.reversed: ()
    test 534 clipSH.allin.len: 4
    test 535 clipSH.allin.0: 20.0°N, 030.0°E
    test 536 clipSH.allin.LL: True
    test 537 clipSH.allin.1: 15.0°N, 010.0°E
    test 538 clipSH.allin.LL: True
    test 539 clipSH.allin.2: 25.0°N, 020.0°E
    test 540 clipSH.allin.LL: True
    test 541 clipSH.allin.3: 20.0°N, 030.0°E
    test 542 clipSH.allin.LL: True
    test 543 clipSH3.allin.len: 2
    test 544 clipSH3.allin.0: 20.0°N, 030.0°E
    test 545 clipSH3.allin.LL: True
    test 546 clipSH3.allin.1: 15.0°N, 010.0°E
    test 547 clipSH3.allin.LL: True
    test 548 clipSH3.edge.: True
    test 549 clipSH3.allin.len: 2
    test 550 clipSH3.allin.0: 15.0°N, 010.0°E
    test 551 clipSH3.allin.LL: True
    test 552 clipSH3.allin.1: 25.0°N, 020.0°E
    test 553 clipSH3.allin.LL: True
    test 554 clipSH3.edge.: True
    test 555 clipSH.allin.reversed.len: 4
    test 556 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 557 clipSH.allin.reversed.LL: True
    test 558 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 559 clipSH.allin.reversed.LL: True
    test 560 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 561 clipSH.allin.reversed.LL: True
    test 562 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 563 clipSH.allin.reversed.LL: True
    test 564 clipSH3.allin.reversed.len: 2
    test 565 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 566 clipSH3.allin.reversed.LL: True
    test 567 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 568 clipSH3.allin.reversed.LL: True
    test 569 clipSH3.edge.reversed.: True
    test 570 clipSH3.allin.reversed.len: 2
    test 571 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 572 clipSH3.allin.reversed.LL: True
    test 573 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 574 clipSH3.allin.reversed.LL: True
    test 575 clipSH3.edge.reversed.: True
    test 576 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 577 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 578 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 579 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex

    testing(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 580 clipCS4.p1: 07.5°N, 010.0°E
    test 581 clipCS4.p2: 04.5°N, 000.0°E
    test 582 clipCS4.i: 3
    test 583 clipCS4.j: 0
    test 584 clipCS4.p1: 05.0°N, 005.0°E
    test 585 clipCS4.p2: 05.0°N, 005.0°E
    test 586 clipCS4.i: 1
    test 587 clipCS4.j: 2
    test 588 clipLB6.p1: 07.5°N, 010.0°E
    test 589 clipLB6.p2: 04.5°N, 000.0°E
    test 590 clipLB6.i: 3
    test 591 clipLB6.fi: 3.25
    test 592 clipLB6.fi: 07.5°N, 010.0°E
    test 593 clipLB6.fj: 3.75
    test 594 clipLB6.fj: 04.5°N, 000.0°E
    test 595 clipLB6.j: 0
    test 596 clipLB6.fin: 4
    test 597 clipLB6.p1: 05.0°N, 005.0°E
    test 598 clipLB6.p2: 05.0°N, 005.0°E
    test 599 clipLB6.i: 1
    test 600 clipLB6.fi: 1.00
    test 601 clipLB6.fi: 05.0°N, 005.0°E
    test 602 clipLB6.fj: 2.00
    test 603 clipLB6.fj: 05.0°N, 005.0°E
    test 604 clipLB6.j: 2
    test 605 clipLB6.fin: 4
    test 606 clipCS4.p1: 60.0°N, 123.333333°E
    test 607 clipCS4.p2: 62.857143°N, 130.0°E
    test 608 clipCS4.i: 0
    test 609 clipCS4.j: 1
    test 610 clipLB6.p1: 60.0°N, 123.333333°E
    test 611 clipLB6.p2: 62.857143°N, 130.0°E
    test 612 clipLB6.i: 0
    test 613 clipLB6.fi: 0.666667
    test 614 clipLB6.fi: 60.0°N, 123.333333°E
    test 615 clipLB6.fj: 0.714286
    test 616 clipLB6.fj: 62.857143°N, 130.0°E
    test 617 clipLB6.j: 1
    test 618 clipLB6.fin: 0
    test 619 clipCS4.p1: 17.5°N, 020.0°E
    test 620 clipCS4.p2: 16.25°N, 015.0°E
    test 621 clipCS4.i: 2
    test 622 clipCS4.j: 0
    test 623 clipLB6.p1: 17.5°N, 020.0°E
    test 624 clipLB6.p2: 16.25°N, 015.0°E
    test 625 clipLB6.i: 2
    test 626 clipLB6.fi: 2.500
    test 627 clipLB6.fi: 17.5°N, 020.0°E
    test 628 clipLB6.fj: 2.750
    test 629 clipLB6.fj: 16.25°N, 015.0°E
    test 630 clipLB6.j: 0
    test 631 clipLB6.fin: 3
    test 632 clipSH1.len: 4
    test 633 clipSH1.0: 20.0°N, 020.0°E
    test 634 clipSH1.LL: True
    test 635 clipSH1.1: 17.5°N, 020.0°E
    test 636 clipSH1.LL: True
    test 637 clipSH1.2: 16.25°N, 015.0°E
    test 638 clipSH1.LL: True
    test 639 clipSH1.3: 20.0°N, 015.0°E
    test 640 clipSH1.LL: True
    test 641 clipSH2.len: 5
    test 642 clipSH2.0: 18.571°N, 024.286°E
    test 643 clipSH2.LL: True
    test 644 clipSH2.1: 16.667°N, 016.667°E
    test 645 clipSH2.LL: True
    test 646 clipSH2.2: 20.0°N, 015.0°E
    test 647 clipSH2.LL: True
    test 648 clipSH2.3: 25.0°N, 020.0°E
    test 649 clipSH2.LL: True
    test 650 clipSH2.4: 22.0°N, 026.0°E
    test 651 clipSH2.LL: True
    test 652 clipSH3.len: 2
    test 653 clipSH3.0: 18.571°N, 024.286°E
    test 654 clipSH3.LL: True
    test 655 clipSH3.1: 16.667°N, 016.667°E
    test 656 clipSH3.LL: True
    test 657 clipSH3.edge.: True
    test 658 clipSH3.len: 2
    test 659 clipSH3.0: 16.667°N, 016.667°E
    test 660 clipSH3.LL: True
    test 661 clipSH3.1: 20.0°N, 015.0°E
    test 662 clipSH3.LL: True
    test 663 clipSH3.edge.: False
    test 664 clipSH3.len: 2
    test 665 clipSH3.0: 20.0°N, 015.0°E
    test 666 clipSH3.LL: True
    test 667 clipSH3.1: 25.0°N, 020.0°E
    test 668 clipSH3.LL: True
    test 669 clipSH3.edge.: True
    test 670 clipSH3.len: 2
    test 671 clipSH3.0: 25.0°N, 020.0°E
    test 672 clipSH3.LL: True
    test 673 clipSH3.1: 22.0°N, 026.0°E
    test 674 clipSH3.LL: True
    test 675 clipSH3.edge.: True
    test 676 clipSH3.len: 2
    test 677 clipSH3.0: 22.0°N, 026.0°E
    test 678 clipSH3.LL: True
    test 679 clipSH3.1: 18.571°N, 024.286°E
    test 680 clipSH3.LL: True
    test 681 clipSH3.edge.: False
    test 682 clipSH2.reversed.len: 5
    test 683 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 684 clipSH2.reversed.LL: True
    test 685 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 686 clipSH2.reversed.LL: True
    test 687 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 688 clipSH2.reversed.LL: True
    test 689 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 690 clipSH2.reversed.LL: True
    test 691 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 692 clipSH2.reversed.LL: True
    test 693 clipSH3.reversed.len: 2
    test 694 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 695 clipSH3.reversed.LL: True
    test 696 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 697 clipSH3.reversed.LL: True
    test 698 clipSH3.edge.reversed.: True
    test 699 clipSH3.reversed.len: 2
    test 700 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 701 clipSH3.reversed.LL: True
    test 702 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 703 clipSH3.reversed.LL: True
    test 704 clipSH3.edge.reversed.: False
    test 705 clipSH3.reversed.len: 2
    test 706 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 707 clipSH3.reversed.LL: True
    test 708 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 709 clipSH3.reversed.LL: True
    test 710 clipSH3.edge.reversed.: True
    test 711 clipSH3.reversed.len: 2
    test 712 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 713 clipSH3.reversed.LL: True
    test 714 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 715 clipSH3.reversed.LL: True
    test 716 clipSH3.edge.reversed.: True
    test 717 clipSH3.reversed.len: 2
    test 718 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 719 clipSH3.reversed.LL: True
    test 720 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 721 clipSH3.reversed.LL: True
    test 722 clipSH3.edge.reversed.: False
    test 723 clipSH.allout: ()
    test 724 clipSH3.allout: ()
    test 725 clipSH.allout.reversed: ()
    test 726 clipSH3.allout.reversed: ()
    test 727 clipSH.allin.len: 4
    test 728 clipSH.allin.0: 20.0°N, 030.0°E
    test 729 clipSH.allin.LL: True
    test 730 clipSH.allin.1: 15.0°N, 010.0°E
    test 731 clipSH.allin.LL: True
    test 732 clipSH.allin.2: 25.0°N, 020.0°E
    test 733 clipSH.allin.LL: True
    test 734 clipSH.allin.3: 20.0°N, 030.0°E
    test 735 clipSH.allin.LL: True
    test 736 clipSH3.allin.len: 2
    test 737 clipSH3.allin.0: 20.0°N, 030.0°E
    test 738 clipSH3.allin.LL: True
    test 739 clipSH3.allin.1: 15.0°N, 010.0°E
    test 740 clipSH3.allin.LL: True
    test 741 clipSH3.edge.: True
    test 742 clipSH3.allin.len: 2
    test 743 clipSH3.allin.0: 15.0°N, 010.0°E
    test 744 clipSH3.allin.LL: True
    test 745 clipSH3.allin.1: 25.0°N, 020.0°E
    test 746 clipSH3.allin.LL: True
    test 747 clipSH3.edge.: True
    test 748 clipSH.allin.reversed.len: 4
    test 749 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 750 clipSH.allin.reversed.LL: True
    test 751 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 752 clipSH.allin.reversed.LL: True
    test 753 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 754 clipSH.allin.reversed.LL: True
    test 755 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 756 clipSH.allin.reversed.LL: True
    test 757 clipSH3.allin.reversed.len: 2
    test 758 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 759 clipSH3.allin.reversed.LL: True
    test 760 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 761 clipSH3.allin.reversed.LL: True
    test 762 clipSH3.edge.reversed.: True
    test 763 clipSH3.allin.reversed.len: 2
    test 764 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 765 clipSH3.allin.reversed.LL: True
    test 766 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 767 clipSH3.allin.reversed.LL: True
    test 768 clipSH3.edge.reversed.: True
    test 769 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 770 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 771 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 772 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex

    all 772 testClipy.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 83.253 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testCss.py

    testing testCss.py 21.05.16 (module pygeodesy.css 21.06.25)
    14 tests skipped (14): no geographiclib

    all testCss.py tests passed, 14 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 26.941 us

running /System/Library/....Python -W always ~/PyGeodesy/test/testDatums.py

    testing testDatums.py 20.08.24 (module pygeodesy.datums 21.06.18)
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 TestEllipsiod: name='TestEllipsiod', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=1000, L=1570.79632679, R1=1000, R2=1000, R3=1000, Rbiaxial=1000, Rtriaxial=1000
    test 5 TestTransform: name='TestTransform', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0
    test 6 TestDatum: name='TestDatum', ellipsoid=Ellipsoids.TestEllipsiod, transform=Transforms.TestTransform
    test 7 ED50.inverse().inverse(): True

    all 7 testDatums.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.361 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testDeprecated.py
./test/testDeprecated.py:37: DeprecationWarning: function L{pygeodesy.deprecated.areaof} has been DEPRECATED, use function L{areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')
./test/testDeprecated.py:40: DeprecationWarning: function L{pygeodesy.deprecated.bounds} has been DEPRECATED, use function L{boundsOf}.
  b = map2(float, bounds(p))
./test/testDeprecated.py:43: DeprecationWarning: function L{pygeodesy.deprecated.anStr} has been DEPRECATED, use function L{anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')
./test/testDeprecated.py:45: DeprecationWarning: function L{pygeodesy.deprecated.clipStr} has been DEPRECATED, use function L{clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')
./test/testDeprecated.py:47: DeprecationWarning: function L{pygeodesy.deprecated.decodeEPSG2} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")
./test/testDeprecated.py:48: DeprecationWarning: function L{pygeodesy.deprecated.encodeEPSG} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')
./test/testDeprecated.py:50: DeprecationWarning: function L{pygeodesy.deprecated.equirectangular3} has been DEPRECATED, use function C{equirectangular_}.
  t = equirectangular3(0, 2, 3, 4)
./test/testDeprecated.py:54: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')
./test/testDeprecated.py:55: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')
./test/testDeprecated.py:56: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')
./test/testDeprecated.py:57: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')
./test/testDeprecated.py:58: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')
./test/testDeprecated.py:59: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')
./test/testDeprecated.py:61: DeprecationWarning: function L{pygeodesy.deprecated.hypot3} has been DEPRECATED, use function L{hypot_}.
  h = hypot3(3000, 200, 10)
./test/testDeprecated.py:66: DeprecationWarning: function L{pygeodesy.deprecated.isenclosedby} has been DEPRECATED, use function L{isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)
./test/testDeprecated.py:70: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn3} has been DEPRECATED, use function L{nearestOn5}.
  t = nearestOn3(p, b, adjust=False)
./test/testDeprecated.py:73: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn4} has been DEPRECATED, use function L{nearestOn5}.
  t = nearestOn4(p, b, adjust=False)
./test/testDeprecated.py:77: DeprecationWarning: function L{pygeodesy.deprecated.parseUTM} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # Milford, PA
./test/testDeprecated.py:81: DeprecationWarning: function L{pygeodesy.deprecated.perimeterof} has been DEPRECATED, use function L{perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')
./test/testDeprecated.py:84: DeprecationWarning: function L{pygeodesy.deprecated.polygon} has been DEPRECATED, use function L{points2}.
  self.test('polygon', polygon(p)[0], 3)
./test/testDeprecated.py:86: DeprecationWarning: function L{pygeodesy.deprecated.simplify2} has been DEPRECATED, use function L{simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)
./test/testDeprecated.py:89: DeprecationWarning: function L{pygeodesy.deprecated.toUtm} has been DEPRECATED, use function L{toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')
./test/testDeprecated.py:92: DeprecationWarning: function L{pygeodesy.deprecated.utmZoneBand2} has been DEPRECATED, use function L{utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')
./test/testDeprecated.py:37: DeprecationWarning: function L{pygeodesy.deprecated.areaof} has been DEPRECATED, use function L{areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')
./test/testDeprecated.py:40: DeprecationWarning: function L{pygeodesy.deprecated.bounds} has been DEPRECATED, use function L{boundsOf}.
  b = map2(float, bounds(p))
./test/testDeprecated.py:43: DeprecationWarning: function L{pygeodesy.deprecated.anStr} has been DEPRECATED, use function L{anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')
./test/testDeprecated.py:45: DeprecationWarning: function L{pygeodesy.deprecated.clipStr} has been DEPRECATED, use function L{clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')
./test/testDeprecated.py:47: DeprecationWarning: function L{pygeodesy.deprecated.decodeEPSG2} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")
./test/testDeprecated.py:48: DeprecationWarning: function L{pygeodesy.deprecated.encodeEPSG} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')
./test/testDeprecated.py:50: DeprecationWarning: function L{pygeodesy.deprecated.equirectangular3} has been DEPRECATED, use function C{equirectangular_}.
  t = equirectangular3(0, 2, 3, 4)
./test/testDeprecated.py:54: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')
./test/testDeprecated.py:55: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')
./test/testDeprecated.py:56: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')
./test/testDeprecated.py:57: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')
./test/testDeprecated.py:58: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')
./test/testDeprecated.py:59: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')
./test/testDeprecated.py:61: DeprecationWarning: function L{pygeodesy.deprecated.hypot3} has been DEPRECATED, use function L{hypot_}.
  h = hypot3(3000, 200, 10)
./test/testDeprecated.py:66: DeprecationWarning: function L{pygeodesy.deprecated.isenclosedby} has been DEPRECATED, use function L{isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)
./test/testDeprecated.py:70: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn3} has been DEPRECATED, use function L{nearestOn5}.
  t = nearestOn3(p, b, adjust=False)
./test/testDeprecated.py:73: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn4} has been DEPRECATED, use function L{nearestOn5}.
  t = nearestOn4(p, b, adjust=False)
./test/testDeprecated.py:77: DeprecationWarning: function L{pygeodesy.deprecated.parseUTM} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # Milford, PA
./test/testDeprecated.py:81: DeprecationWarning: function L{pygeodesy.deprecated.perimeterof} has been DEPRECATED, use function L{perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')
./test/testDeprecated.py:84: DeprecationWarning: function L{pygeodesy.deprecated.polygon} has been DEPRECATED, use function L{points2}.
  self.test('polygon', polygon(p)[0], 3)
./test/testDeprecated.py:86: DeprecationWarning: function L{pygeodesy.deprecated.simplify2} has been DEPRECATED, use function L{simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)
./test/testDeprecated.py:89: DeprecationWarning: function L{pygeodesy.deprecated.toUtm} has been DEPRECATED, use function L{toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')
./test/testDeprecated.py:92: DeprecationWarning: function L{pygeodesy.deprecated.utmZoneBand2} has been DEPRECATED, use function L{utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')
./test/testDeprecated.py:37: DeprecationWarning: function L{pygeodesy.deprecated.areaof} has been DEPRECATED, use function L{areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')
./test/testDeprecated.py:40: DeprecationWarning: function L{pygeodesy.deprecated.bounds} has been DEPRECATED, use function L{boundsOf}.
  b = map2(float, bounds(p))
./test/testDeprecated.py:43: DeprecationWarning: function L{pygeodesy.deprecated.anStr} has been DEPRECATED, use function L{anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')
./test/testDeprecated.py:45: DeprecationWarning: function L{pygeodesy.deprecated.clipStr} has been DEPRECATED, use function L{clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')
./test/testDeprecated.py:47: DeprecationWarning: function L{pygeodesy.deprecated.decodeEPSG2} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")
./test/testDeprecated.py:48: DeprecationWarning: function L{pygeodesy.deprecated.encodeEPSG} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')
./test/testDeprecated.py:50: DeprecationWarning: function L{pygeodesy.deprecated.equirectangular3} has been DEPRECATED, use function C{equirectangular_}.
  t = equirectangular3(0, 2, 3, 4)
./test/testDeprecated.py:54: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')
./test/testDeprecated.py:55: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')
./test/testDeprecated.py:56: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')
./test/testDeprecated.py:57: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')
./test/testDeprecated.py:58: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')
./test/testDeprecated.py:59: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')
./test/testDeprecated.py:61: DeprecationWarning: function L{pygeodesy.deprecated.hypot3} has been DEPRECATED, use function L{hypot_}.
  h = hypot3(3000, 200, 10)
./test/testDeprecated.py:66: DeprecationWarning: function L{pygeodesy.deprecated.isenclosedby} has been DEPRECATED, use function L{isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)
./test/testDeprecated.py:70: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn3} has been DEPRECATED, use function L{nearestOn5}.
  t = nearestOn3(p, b, adjust=False)
./test/testDeprecated.py:73: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn4} has been DEPRECATED, use function L{nearestOn5}.
  t = nearestOn4(p, b, adjust=False)
./test/testDeprecated.py:77: DeprecationWarning: function L{pygeodesy.deprecated.parseUTM} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # Milford, PA
./test/testDeprecated.py:81: DeprecationWarning: function L{pygeodesy.deprecated.perimeterof} has been DEPRECATED, use function L{perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')
./test/testDeprecated.py:84: DeprecationWarning: function L{pygeodesy.deprecated.polygon} has been DEPRECATED, use function L{points2}.
  self.test('polygon', polygon(p)[0], 3)
./test/testDeprecated.py:86: DeprecationWarning: function L{pygeodesy.deprecated.simplify2} has been DEPRECATED, use function L{simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)
./test/testDeprecated.py:89: DeprecationWarning: function L{pygeodesy.deprecated.toUtm} has been DEPRECATED, use function L{toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')
./test/testDeprecated.py:92: DeprecationWarning: function L{pygeodesy.deprecated.utmZoneBand2} has been DEPRECATED, use function L{utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')

    testing testDeprecated.py 21.02.11 (module pygeodesy.deprecated 21.06.10)
    test 1 HeightIDW: True
    test 2 HeightIDW2: True
    test 3 HeightIDW3: True
    test 4 areaof: 7.086883e+09
    test 5 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 6 anStr: a-b__
    test 7 clipStr: test/t....ics.py
    test 8 decodeEPSG2: (12, 'S')
    test 9 encodeEPSG: 32712
    test 10 equirectangular3: 3
    test 11 equirectangular3: 12.997
    test 12 fStr: 0.123000
    test 13 fStr: 0.123
    test 14 fStr: 0.123, 456.789
    test 15 fStr: 1.23000e-01
    test 16 fStr: 1.23e-01
    test 17 fStr: 0.123
    test 18 hypot3: 3006.675905
    test 19 isenclosedby: True
    test 20 nearestOn3: 3
    test 21 nearestOn3: (45.5, 1.5)
    test 22 nearestOn4: 4
    test 23 nearestOn4: (45.5, 1.5)
    test 24 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 25 perimeterof: 2.687460e+05
    test 26 polygon: 3
    test 27 simplify2: 4
    test 28 toUtm: 6
    test 29 utmZoneBand2: (11, 'U')
    test 30 HeightIDW: True
    test 31 HeightIDW2: True
    test 32 HeightIDW3: True
    test 33 areaof: 7.086883e+09
    test 34 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 35 anStr: a-b__
    test 36 clipStr: test/t....ics.py
    test 37 decodeEPSG2: (12, 'S')
    test 38 encodeEPSG: 32712
    test 39 equirectangular3: 3
    test 40 equirectangular3: 12.997
    test 41 fStr: 0.123000
    test 42 fStr: 0.123
    test 43 fStr: 0.123, 456.789
    test 44 fStr: 1.23000e-01
    test 45 fStr: 1.23e-01
    test 46 fStr: 0.123
    test 47 hypot3: 3006.675905
    test 48 isenclosedby: True
    test 49 nearestOn3: 3
    test 50 nearestOn3: (45.5, 1.5)
    test 51 nearestOn4: 4
    test 52 nearestOn4: (45.5, 1.5)
    test 53 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 54 perimeterof: 2.687460e+05
    test 55 polygon: 3
    test 56 simplify2: 4
    test 57 toUtm: 6
    test 58 utmZoneBand2: (11, 'U')
    test 59 HeightIDW: True
    test 60 HeightIDW2: True
    test 61 HeightIDW3: True
    test 62 areaof: 7.086883e+09
    test 63 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 64 anStr: a-b__
    test 65 clipStr: test/t....ics.py
    test 66 decodeEPSG2: (12, 'S')
    test 67 encodeEPSG: 32712
    test 68 equirectangular3: 3
    test 69 equirectangular3: 12.997
    test 70 fStr: 0.123000
    test 71 fStr: 0.123
    test 72 fStr: 0.123, 456.789
    test 73 fStr: 1.23000e-01
    test 74 fStr: 1.23e-01
    test 75 fStr: 0.123
    test 76 hypot3: 3006.675905
    test 77 isenclosedby: True
    test 78 nearestOn3: 3
    test 79 nearestOn3: (45.5, 1.5)
    test 80 nearestOn4: 4
    test 81 nearestOn4: (45.5, 1.5)
    test 82 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 83 perimeterof: 2.687460e+05
    test 84 polygon: 3
    test 85 simplify2: 4
    test 86 toUtm: 6
    test 87 utmZoneBand2: (11, 'U')

    69 of 87 testDeprecated.py tests (79.3%) FAILED, incl. 69 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 13.536 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testDms.py

    testing testDms.py 20.05.12 (module pygeodesy.dms 21.06.23)
    test 1 parseDMS('0.0°'): 0.0
    test 2 parseDMS('0°'): 0.0
    test 3 parseDMS('000°00'00"'): 0.0
    test 4 parseDMS('000°00'00.0"'): 0.0
    test 5 parseDMS('000° 00'00"'): 0.0
    test 6 parseDMS('000°00 ' 00.0"'): 0.0
    test 7 parseDMS('000° 00' 00.0'): 0.0
    test 8 parseDMS('000°-00′-00.0"'): 0.0
    test 9 parseDDDMMSS(1): 1.0
    test 10 parseDMS(1): 1.0
    test 11 parseDDDMMSS(12): 12.0
    test 12 parseDMS(12): 12.0
    test 13 parseDDDMMSS(123): 123.0
    test 14 parseDMS(123): 123.0
    test 15 parseDDDMMSS(1234): 12.567
    test 16 parseDMS(1234): 1234.0
    test 17 parseDDDMMSS(12345): 123.75
    test 18 parseDMS(12345): 12345.0
    test 19 parseDDDMMSS(123456): 12.582
    test 20 parseDMS(123456): 123456.0
    test 21 parseDDDMMSS(1234567): 123.769
    test 22 parseDMS(1234567): 1234567.0
    test 23 parseDDDMMSS(12345678): 1234.955
    test 24 parseDMS(12345678): 12345678.0
    test 25 parseDDDMMSS(0.1): 0.1
    test 26 parseDMS(0.1): 0.1
    test 27 parseDDDMMSS(1.2): 1.2
    test 28 parseDMS(1.2): 1.2
    test 29 parseDDDMMSS(12.3): 12.3
    test 30 parseDMS(12.3): 12.3
    test 31 parseDDDMMSS(123.4): 123.4
    test 32 parseDMS(123.4): 123.4
    test 33 parseDDDMMSS(1234.5): 12.575
    test 34 parseDMS(1234.5): 1234.5
    test 35 parseDDDMMSS(12345.6): 123.76
    test 36 parseDMS(12345.6): 12345.6
    test 37 parseDDDMMSS(123456.7): 12.582
    test 38 parseDMS(123456.7): 123456.7
    test 39 parseDDDMMSS('1N'): 1.0
    test 40 parseDMS('1N'): 1.0
    test 41 parseDDDMMSS('12S'): -12.0
    test 42 parseDMS('12S'): -12.0
    test 43 parseDDDMMSS('012.3W'): -12.3
    test 44 parseDMS('012.3W'): -12.3
    test 45 parseDDDMMSS('123E'): 123.0
    test 46 parseDMS('123E'): 123.0
    test 47 parseDDDMMSS('1234N'): 12.567
    test 48 parseDMS('1234N'): 1234.0
    test 49 parseDDDMMSS('12345E'): 123.75
    test 50 parseDMS('12345E'): 12345.0
    test 51 parseDDDMMSS('1234.5S'): -12.575
    test 52 parseDMS('1234.5S'): -1234.5
    test 53 parseDDDMMSS('12345.6E'): 123.76
    test 54 parseDMS('12345.6E'): 12345.6
    test 55 parseDDDMMSS('123456.7S'): -12.582
    test 56 parseDMS('123456.7S'): -123456.7
    test 57 parseDDDMMSS('1234567.8W'): -123.769
    test 58 parseDMS('1234567.8W'): -1234567.8
    test 59 parseDDDMMSS('12345678E'): 12345678.0
    test 60 parseDMS('12345678E'): 12345678.0
    test 61 parseDDDMMSS(345.0, NS): 3.75
    test 62 parseDDDMMSS(345.0, EW): 345.0
    test 63 parseDDDMMSS(5430.0, NS): 54.5
    test 64 parseDDDMMSS(5430.0, EW): 54.5
    test 65 parseDDDMMSS('12E'): ParseError("strDDDMMSS ('12E') or suffix ('NSEW'): form DD applies N-S: invalid",)
    test 66 parseDMS('12E'): 12.0
    test 67 parseDDDMMSS('012.3S'): ParseError("strDDDMMSS ('012.3S') or suffix ('NSEW'): form DDD applies E-W: invalid",)
    test 68 parseDMS('012.3S'): -12.3
    test 69 parseDDDMMSS('123N'): ParseError("strDDDMMSS ('123N') or suffix ('NSEW'): form DDD applies E-W: invalid",)
    test 70 parseDMS('123N'): 123.0
    test 71 parseDDDMMSS('1234E'): ParseError("strDDDMMSS ('1234E') or suffix ('NSEW'): form DDMM applies N-S: invalid",)
    test 72 parseDMS('1234E'): 1234.0
    test 73 parseDDDMMSS('12345N'): ParseError("strDDDMMSS ('12345N') or suffix ('NSEW'): form DDDMM applies E-W: invalid",)
    test 74 parseDMS('12345N'): 12345.0
    test 75 parseDDDMMSS('1234.5W'): ParseError("strDDDMMSS ('1234.5W') or suffix ('NSEW'): form DDMM applies N-S: invalid",)
    test 76 parseDMS('1234.5W'): -1234.5
    test 77 parseDDDMMSS('123456E'): ParseError("strDDDMMSS ('123456E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid",)
    test 78 parseDMS('123456E'): 123456.0
    test 79 parseDDDMMSS('1234567S'): ParseError("strDDDMMSS ('1234567S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid",)
    test 80 parseDMS('1234567S'): -1234567.0
    test 81 parseDMS: strDMS (181) or suffix ('NSEW'): 181 beyond 180.0 degrees
    test 82 parseDMS: strDMS (-91) or suffix ('NSEW'): -91 beyond -90.0 degrees
    test 83 parse3llh: 51.477811, -0.001475, 0.0
    test 84 toDMS(): 46°00.0′
    test 85 toDMS(): 46°00.0′
    test 86 toDMS(): 45°59.99′
    test 87 toDMS(): 45°59.999′
    test 88 toDMS(): 46°00′00.0″
    test 89 toDMS(): 45°59′59.96″
    test 90 toDMS(): 45°59′59.964″
    test 91 toDMS(): 45°45′45.36″
    test 92 toDMS(d): 45.7626°
    test 93 toDMS(d): -45.7626°
    test 94 toDMS(dm): 45°45.756′
    test 95 toDMS(dm): -45°45.756′
    test 96 toDMS(dms): 45°45′45.36″
    test 97 toDMS(dms): -45°45′45.36″
    test 98 toDMS(deg): 45.7626
    test 99 toDMS(deg): -45.7626
    test 100 toDMS(min): 4545.756
    test 101 toDMS(min): -4545.756
    test 102 toDMS(sec): 454545.36
    test 103 toDMS(sec): -454545.36
    test 104 toDMS(rad): 0.79871
    test 105 toDMS(rad): -0.79871
    test 106 toDMS(d): 45.7626°
    test 107 toDMS(d): -45.7626°
    test 108 toDMS(dm): 45°45.7560′
    test 109 toDMS(dm): -45°45.7560′
    test 110 toDMS(dms): 45°45′45.36″
    test 111 toDMS(dms): -45°45′45.36″
    test 112 toDMS(deg): 45.762600
    test 113 toDMS(deg): -45.762600
    test 114 toDMS(min): 4545.75600
    test 115 toDMS(min): -4545.75600
    test 116 toDMS(sec): 454545.360
    test 117 toDMS(sec): -454545.360
    test 118 toDMS(rad): 0.798708
    test 119 toDMS(rad): -0.798708
    test 120 toDMS(-d): 45.7626°
    test 121 toDMS(-d): -45.7626°
    test 122 toDMS(-dm): 45°45.7560′
    test 123 toDMS(-dm): -45°45.7560′
    test 124 toDMS(-dms): 45°45′45.36″
    test 125 toDMS(-dms): -45°45′45.36″
    test 126 toDMS(-deg): 45.762600
    test 127 toDMS(-deg): -45.762600
    test 128 toDMS(-min): 4545.75600
    test 129 toDMS(-min): -4545.75600
    test 130 toDMS(-sec): 454545.360
    test 131 toDMS(-sec): -454545.360
    test 132 toDMS(-rad): 0.798708
    test 133 toDMS(-rad): -0.798708
    test 134 toDMS(+d): +45.7626°
    test 135 toDMS(+d): -45.7626°
    test 136 toDMS(+dm): +45°45.7560′
    test 137 toDMS(+dm): -45°45.7560′
    test 138 toDMS(+dms): +45°45′45.36″
    test 139 toDMS(+dms): -45°45′45.36″
    test 140 toDMS(+deg): +45.762600
    test 141 toDMS(+deg): -45.762600
    test 142 toDMS(+min): +4545.75600
    test 143 toDMS(+min): -4545.75600
    test 144 toDMS(+sec): +454545.360
    test 145 toDMS(+sec): -454545.360
    test 146 toDMS(+rad): +0.798708
    test 147 toDMS(+rad): -0.798708
    test 148 compassPoint(1,): N
    test 149 compassPoint(0,): N
    test 150 compassPoint(-1,): N
    test 151 compassPoint(359,): N
    test 152 compassPoint(24,): NNE
    test 153 compassPoint(24, 1): N
    test 154 compassPoint(24, 2): NE
    test 155 compassPoint(24, 3): NNE
    test 156 compassPoint(226,): SW
    test 157 compassPoint(226, 1): W
    test 158 compassPoint(226, 2): SW
    test 159 compassPoint(226, 3): SW
    test 160 compassPoint(237,): WSW
    test 161 compassPoint(237, 1): W
    test 162 compassPoint(237, 2): SW
    test 163 compassPoint(237, 3): WSW
    test 164 compassPoint(11.25,): NNE
    test 165 compassPoint(11.249,): N
    test 166 compassPoint(-11.25,): N
    test 167 compassPoint(348.749,): NNW
    test 168 compassPoint(45, 1): E
    test 169 compassPoint(44.99, 1): N
    test 170 compassPoint(45, 2): NE
    test 171 compassPoint(44.99, 2): NE
    test 172 compassPoint(45, 3): NE
    test 173 compassPoint(44.99, 3): NE
    test 174 compassPoint(45, 4): NE
    test 175 compassPoint(44.99, 4): NE
    test 176 compassPoint(22.5, 1): N
    test 177 compassPoint(22.49, 1): N
    test 178 compassPoint(22.5, 2): NE
    test 179 compassPoint(22.49, 2): N
    test 180 compassPoint(22.5, 3): NNE
    test 181 compassPoint(22.49, 3): NNE
    test 182 compassPoint(22.5, 4): NNE
    test 183 compassPoint(22.49, 4): NNE
    test 184 compassPoint(11.25, 1): N
    test 185 compassPoint(11.249, 1): N
    test 186 compassPoint(11.25, 2): N
    test 187 compassPoint(11.249, 2): N
    test 188 compassPoint(11.25, 3): NNE
    test 189 compassPoint(11.249, 3): N
    test 190 compassPoint(11.25, 4): NbE
    test 191 compassPoint(11.249, 4): NbE
    test 192 compassPoint(24, 1): N
    test 193 compassPoint(24, 2): NE
    test 194 compassPoint(24, 3): NNE
    test 195 compassPoint(24,): NNE
    test 196 compassPoint(18, 3): NNE
    test 197 compassPoint(11, 4): NbE
    test 198 compassPoint(30, 4): NEbN
    test 199 compassPoint(11.25): NbE
    test 200 compassPoint(33.75): NEbN
    test 201 compassPoint(56.25): NEbE
    test 202 compassPoint(78.75): EbN
    test 203 compassPoint(101.25): EbS
    test 204 compassPoint(123.75): SEbE
    test 205 compassPoint(146.25): SEbS
    test 206 compassPoint(168.75): SbE
    test 207 compassPoint(191.25): SbW
    test 208 compassPoint(213.75): SWbS
    test 209 compassPoint(236.25): SWbW
    test 210 compassPoint(258.75): WbS
    test 211 compassPoint(281.25): WbN
    test 212 compassPoint(303.75): NWbW
    test 213 compassPoint(326.25): NWbN
    test 214 compassPoint(348.75): NbW
    test 215 _DEG: +1.0101
    test 216 _MIN: +0.606′
    test 217 _SEC: +36.36″

    all 217 testDms.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 5.483 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testEcef.py

    testing testEcef.py 21.05.16

    test 1 EcefKarney: ...
    test 2 name: Test
    test 3 toStr: EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test')  FAILED, KNOWN, expected EcefKarney
    test 4 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test'  FAILED, KNOWN, expected EcefKarney
    test 5 copy(EcefKarney): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 6 EcefKarney.copy(): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 7 forward: 27.99, 86.93, 8820.0
    test 8 forward: 302271.4, 5635928.4, 2979666.1
    test 9 name: Test
    test 10 reverse: 302271.4, 5635928.4, 2979666.1
    test 11 reverse: 27.99, 86.93, 8820.01
    test 12 case: 2
    test 13 iteration: None
    test 14 name: Test
    test 15 reverse: 302000.0, 5636000.0, 2980000.0
    test 16 reverse: 27.99, 86.93, 9027.03
    test 17 case: 2
    test 18 iteration: None
    test 19 forward: 27.99, 86.93, 8820.0
    test 20 forward: 302271.43, 5635928.37, 2979666.13
    test 21 forward: 33.3, 44.4, 6000.0
    test 22 forward: 3816209.6, 3737108.55, 3485109.57
    test 23 reverse: 3816209.6, 3737108.55, 3485109.57
    test 24 reverse: 33.3, 44.4, 5999.996
    test 25 case: 2
    test 26 iteration: None
    test 27 reverse: 30000.0, 30000.0, 0.0
    test 28 reverse: 6.483, 45.0, -6335709.726
    test 29 case: 3
    test 30 iteration: None
    test 31 forward: 6.483, 45.0, -6335709.726
    test 32 forward: 30000.0, 30000.0, -0.0
    test 33 Vermeille: -168.919
    test 34 Vermeille: 190.939
    test 35 reverse-1: 45.0, 120.0, 1000.0
    test 36 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 37 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 38 philam-1: 0.7854, 2.0944
    test 39 reverse-2: 45.0, 120.0, 2000.0
    test 40 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 41 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 42 philam-2: 0.7854, 2.0944
    test 43 reverse-3: 45.0, 120.0, 3000.0
    test 44 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 45 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 46 philam-3: 0.7854, 2.0944
    test 47 reverse-4: 45.0, 120.0, 4000.0
    test 48 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 49 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 50 philam-4: 0.7854, 2.0944
    test 51 reverse-5: 45.0, 120.0, 10000.0
    test 52 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 53 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 54 philam-5: 0.7854, 2.0944
    test 55 reverse-6: 45.0, 120.0, 20000.0
    test 56 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 57 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 58 philam-6: 0.7854, 2.0944
    test 59 reverse-7: 45.0, 120.0, 100000.0
    test 60 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 61 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 62 philam-7: 0.7854, 2.0944
    test 63 reverse-8: 45.0, 120.0, 800000.0
    test 64 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 65 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 66 philam-8: 0.7854, 2.0944
    test 67 reverse-9: 45.0, 120.0, 1000000.0
    test 68 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 69 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 70 philam-9: 0.7854, 2.0944
    test 71 sudano: 45.0, 0.0, 100000.0
    test 72 name: OS-UK
    test 73 forward: 53.61199036, -1.66444222, 299.8
    test 74 forward: 3790644.9, -110149.21, 5111482.97
    test 75 reverse: 3790644.9, -110149.21, 5111482.97
    test 76 reverse: 53.61199036, -1.66444223
    test 77 reverse.lat: 53°36′43.1653″N
    test 78 reverse.lon: 001°39′51.992″W
    test 79 reverse.height: 299.800
    test 80 case: 2
    test 81 iteration: None
    test 82 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 83 reverse: 34.0, -117.333569, 251.702
    test 84 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 85 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 86 EcefKarney: EcefKarney(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefKarney

    test 87 EcefFarrell21: ...
    test 88 name: Test
    test 89 toStr: EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test')  FAILED, KNOWN, expected EcefFarrell21
    test 90 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test'  FAILED, KNOWN, expected EcefFarrell21
    test 91 copy(EcefFarrell21): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 92 EcefFarrell21.copy(): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 93 forward: 27.99, 86.93, 8820.0
    test 94 forward: 302271.4, 5635928.4, 2979666.1
    test 95 name: Test
    test 96 reverse: 302271.4, 5635928.4, 2979666.1
    test 97 reverse: 27.99, 86.93, 8820.01
    test 98 case: 1
    test 99 iteration: None
    test 100 name: Test
    test 101 reverse: 302000.0, 5636000.0, 2980000.0
    test 102 reverse: 27.99, 86.93, 9027.03
    test 103 case: 1
    test 104 iteration: None
    test 105 forward: 27.99, 86.93, 8820.0
    test 106 forward: 302271.43, 5635928.37, 2979666.13
    test 107 forward: 33.3, 44.4, 6000.0
    test 108 forward: 3816209.6, 3737108.55, 3485109.57
    test 109 reverse: 3816209.6, 3737108.55, 3485109.57
    test 110 reverse: 33.3, 44.4, 5999.996
    test 111 case: 1
    test 112 iteration: None
    test 113 reverse: 30000.0, 30000.0, 0.0
    test 114 reverse: 0.0, 45.0, -6335168.061  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 115 case: 1
    test 116 iteration: None
    test 117 forward: 6.483, 45.0, -6335709.726
    test 118 forward: 30000.0, 30000.0, -0.0
    test 119 Vermeille: -168.919
    test 120 Vermeille: 190.939
    test 121 reverse-1: 45.0, 120.0, 1000.0
    test 122 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 123 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 124 philam-1: 0.7854, 2.0944
    test 125 reverse-2: 45.0, 120.0, 2000.0
    test 126 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 127 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 128 philam-2: 0.7854, 2.0944
    test 129 reverse-3: 45.0, 120.0, 3000.0
    test 130 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 131 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 132 philam-3: 0.7854, 2.0944
    test 133 reverse-4: 45.0, 120.0, 4000.0
    test 134 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 135 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 136 philam-4: 0.7854, 2.0944
    test 137 reverse-5: 45.0, 120.0, 10000.0
    test 138 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 139 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 140 philam-5: 0.7854, 2.0944
    test 141 reverse-6: 45.0, 120.0, 20000.0
    test 142 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 143 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 144 philam-6: 0.7854, 2.0944
    test 145 reverse-7: 45.0, 120.0, 100000.0
    test 146 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 147 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 148 philam-7: 0.7854, 2.0944
    test 149 reverse-8: 45.0, 120.0, 800000.0
    test 150 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 151 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 152 philam-8: 0.7854, 2.0944
    test 153 reverse-9: 45.0, 120.0, 1000000.0
    test 154 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 155 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 156 philam-9: 0.7854, 2.0944
    test 157 sudano: 45.0, 0.0, 100000.0
    test 158 name: OS-UK
    test 159 forward: 53.61199036, -1.66444222, 299.8
    test 160 forward: 3790644.9, -110149.21, 5111482.97
    test 161 reverse: 3790644.9, -110149.21, 5111482.97
    test 162 reverse: 53.61199036, -1.66444223
    test 163 reverse.lat: 53°36′43.1653″N
    test 164 reverse.lon: 001°39′51.992″W
    test 165 reverse.height: 299.800
    test 166 case: 1
    test 167 iteration: None
    test 168 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 169 reverse: 34.0, -117.333569, 251.702
    test 170 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6292741.654168, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 171 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 172 EcefFarrell21: EcefFarrell21(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell21

    test 173 EcefFarrell22: ...
    test 174 name: Test
    test 175 toStr: EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test')  FAILED, KNOWN, expected EcefFarrell22
    test 176 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test'  FAILED, KNOWN, expected EcefFarrell22
    test 177 copy(EcefFarrell22): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 178 EcefFarrell22.copy(): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 179 forward: 27.99, 86.93, 8820.0
    test 180 forward: 302271.4, 5635928.4, 2979666.1
    test 181 name: Test
    test 182 reverse: 302271.4, 5635928.4, 2979666.1
    test 183 reverse: 27.99, 86.93, 8820.01
    test 184 case: 1
    test 185 iteration: None
    test 186 name: Test
    test 187 reverse: 302000.0, 5636000.0, 2980000.0
    test 188 reverse: 27.99, 86.93, 9027.03
    test 189 case: 1
    test 190 iteration: None
    test 191 forward: 27.99, 86.93, 8820.0
    test 192 forward: 302271.43, 5635928.37, 2979666.13
    test 193 forward: 33.3, 44.4, 6000.0
    test 194 forward: 3816209.6, 3737108.55, 3485109.57
    test 195 reverse: 3816209.6, 3737108.55, 3485109.57
    test 196 reverse: 33.3, 44.4, 5999.996
    test 197 case: 1
    test 198 iteration: None
    test 199 reverse: 30000.0, 30000.0, 0.0
    test 200 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 201 case: 1
    test 202 iteration: None
    test 203 forward: 6.483, 45.0, -6335709.726
    test 204 forward: 30000.0, 30000.0, -0.0
    test 205 Vermeille: -168.919
    test 206 Vermeille: 190.939
    test 207 reverse-1: 45.0, 120.0, 1000.0
    test 208 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 209 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 210 philam-1: 0.7854, 2.0944
    test 211 reverse-2: 45.0, 120.0, 2000.0
    test 212 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 213 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 214 philam-2: 0.7854, 2.0944
    test 215 reverse-3: 45.0, 120.0, 3000.0
    test 216 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 217 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 218 philam-3: 0.7854, 2.0944
    test 219 reverse-4: 45.0, 120.0, 4000.0
    test 220 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 221 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 222 philam-4: 0.7854, 2.0944
    test 223 reverse-5: 45.0, 120.0, 10000.0
    test 224 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 225 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 226 philam-5: 0.7854, 2.0944
    test 227 reverse-6: 45.0, 120.0, 20000.0
    test 228 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 229 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 230 philam-6: 0.7854, 2.0944
    test 231 reverse-7: 45.0, 120.0, 100000.0
    test 232 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 233 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 234 philam-7: 0.7854, 2.0944
    test 235 reverse-8: 45.0, 120.0, 800000.005  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 236 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 237 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 238 philam-8: 0.7854, 2.0944
    test 239 reverse-9: 45.0, 120.0, 1000000.007  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 240 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 241 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 242 philam-9: 0.7854, 2.0944
    test 243 sudano: 45.0, 0.0, 100000.0
    test 244 name: OS-UK
    test 245 forward: 53.61199036, -1.66444222, 299.8
    test 246 forward: 3790644.9, -110149.21, 5111482.97
    test 247 reverse: 3790644.9, -110149.21, 5111482.97
    test 248 reverse: 53.61199036, -1.66444223
    test 249 reverse.lat: 53°36′43.1653″N
    test 250 reverse.lon: 001°39′51.992″W
    test 251 reverse.height: 299.800
    test 252 case: 1
    test 253 iteration: None
    test 254 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 255 reverse: 34.0, -117.333569, 251.702
    test 256 EcefError: (0.0, 0.0, 0.0, -180.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 257 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 258 EcefFarrell22: EcefFarrell22(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell22

    test 259 EcefVeness: ...
    test 260 name: Test
    test 261 toStr: EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test')  FAILED, KNOWN, expected EcefVeness
    test 262 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test'  FAILED, KNOWN, expected EcefVeness
    test 263 copy(EcefVeness): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 264 EcefVeness.copy(): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 265 forward: 27.99, 86.93, 8820.0
    test 266 forward: 302271.4, 5635928.4, 2979666.1
    test 267 name: Test
    test 268 reverse: 302271.4, 5635928.4, 2979666.1
    test 269 reverse: 27.99, 86.93, 8820.01
    test 270 case: 1
    test 271 iteration: None
    test 272 name: Test
    test 273 reverse: 302000.0, 5636000.0, 2980000.0
    test 274 reverse: 27.99, 86.93, 9027.03
    test 275 case: 1
    test 276 iteration: None
    test 277 forward: 27.99, 86.93, 8820.0
    test 278 forward: 302271.43, 5635928.37, 2979666.13
    test 279 forward: 33.3, 44.4, 6000.0
    test 280 forward: 3816209.6, 3737108.55, 3485109.57
    test 281 reverse: 3816209.6, 3737108.55, 3485109.57
    test 282 reverse: 33.3, 44.4, 5999.996
    test 283 case: 1
    test 284 iteration: None
    test 285 reverse: 30000.0, 30000.0, 0.0
    test 286 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 287 case: 1
    test 288 iteration: None
    test 289 forward: 6.483, 45.0, -6335709.726
    test 290 forward: 30000.0, 30000.0, -0.0
    test 291 Vermeille: -168.919
    test 292 Vermeille: 190.939
    test 293 reverse-1: 45.0, 120.0, 1000.0
    test 294 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 295 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 296 philam-1: 0.7854, 2.0944
    test 297 reverse-2: 45.0, 120.0, 2000.0
    test 298 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 299 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 300 philam-2: 0.7854, 2.0944
    test 301 reverse-3: 45.0, 120.0, 3000.0
    test 302 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 303 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 304 philam-3: 0.7854, 2.0944
    test 305 reverse-4: 45.0, 120.0, 4000.0
    test 306 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 307 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 308 philam-4: 0.7854, 2.0944
    test 309 reverse-5: 45.0, 120.0, 10000.0
    test 310 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 311 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 312 philam-5: 0.7854, 2.0944
    test 313 reverse-6: 45.0, 120.0, 20000.0
    test 314 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 315 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 316 philam-6: 0.7854, 2.0944
    test 317 reverse-7: 45.0, 120.0, 100000.0
    test 318 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 319 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 320 philam-7: 0.7854, 2.0944
    test 321 reverse-8: 45.0, 120.0, 800000.0
    test 322 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 323 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 324 philam-8: 0.7854, 2.0944
    test 325 reverse-9: 45.0, 120.0, 1000000.0
    test 326 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 327 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 328 philam-9: 0.7854, 2.0944
    test 329 sudano: 45.0, 0.0, 100000.0
    test 330 name: OS-UK
    test 331 forward: 53.61199036, -1.66444222, 299.8
    test 332 forward: 3790644.9, -110149.21, 5111482.97
    test 333 reverse: 3790644.9, -110149.21, 5111482.97
    test 334 reverse: 53.61199036, -1.66444223
    test 335 reverse.lat: 53°36′43.1653″N
    test 336 reverse.lon: 001°39′51.992″W
    test 337 reverse.height: 299.800
    test 338 case: 1
    test 339 iteration: None
    test 340 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 341 reverse: 34.0, -117.333569, 251.702
    test 342 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 343 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 344 EcefVeness: EcefVeness(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefVeness

    test 345 EcefSudano: ...
    test 346 name: Test
    test 347 toStr: EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test')  FAILED, KNOWN, expected EcefSudano
    test 348 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test'  FAILED, KNOWN, expected EcefSudano
    test 349 copy(EcefSudano): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 350 EcefSudano.copy(): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 351 forward: 27.99, 86.93, 8820.0
    test 352 forward: 302271.4, 5635928.4, 2979666.1
    test 353 name: Test
    test 354 reverse: 302271.4, 5635928.4, 2979666.1
    test 355 reverse: 28.01, 86.93, 8819.58  FAILED, KNOWN, expected 27.99, 86.93, 8820.01
    test 356 case: 6
    test 357 iteration: 6
    test 358 name: Test
    test 359 reverse: 302000.0, 5636000.0, 2980000.0
    test 360 reverse: 28.01, 86.93, 9026.6  FAILED, KNOWN, expected 27.99, 86.93, 9027.03
    test 361 case: 6
    test 362 iteration: 6
    test 363 forward: 27.99, 86.93, 8820.0
    test 364 forward: 302271.43, 5635928.37, 2979666.13
    test 365 forward: 33.3, 44.4, 6000.0
    test 366 forward: 3816209.6, 3737108.55, 3485109.57
    test 367 reverse: 3816209.6, 3737108.55, 3485109.57
    test 368 reverse: 33.335, 44.4, 5998.836  FAILED, KNOWN, expected 33.3, 44.4, 5999.996
    test 369 case: 6
    test 370 iteration: 6
    test 371 reverse: 30000.0, 30000.0, 0.0
    test 372 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 373 case: 1
    test 374 iteration: 1
    test 375 forward: 6.483, 45.0, -6335709.726
    test 376 forward: 30000.0, 30000.0, -0.0
    test 377 Vermeille: -168.919
    test 378 Vermeille: 190.939
    test 379 reverse-1: 45.08, 120.0, 993.852  FAILED, KNOWN, expected 45.0, 120.0, 1000.0
    test 380 forward-1: -2256016.0, 3907534.4, 4494304.0  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5
    test 381 xyzh-1: -2256016.0, 3907534.4, 4494304.0, 993.9  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 382 philam-1: 0.7868, 2.0944
    test 383 reverse-2: 45.08, 120.0, 1993.853  FAILED, KNOWN, expected 45.0, 120.0, 2000.0
    test 384 forward-2: -2256369.6, 3908146.8, 4495011.2  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6
    test 385 xyzh-2: -2256369.6, 3908146.8, 4495011.2, 1993.9  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 386 philam-2: 0.7868, 2.0944
    test 387 reverse-3: 45.08, 120.0, 2993.854  FAILED, KNOWN, expected 45.0, 120.0, 3000.0
    test 388 forward-3: -2256723.1, 3908759.1, 4495718.3  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7
    test 389 xyzh-3: -2256723.1, 3908759.1, 4495718.3, 2993.9  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 390 philam-3: 0.7868, 2.0944
    test 391 reverse-4: 45.08, 120.0, 3993.855  FAILED, KNOWN, expected 45.0, 120.0, 4000.0
    test 392 forward-4: -2257076.7, 3909371.5, 4496425.4  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8
    test 393 xyzh-4: -2257076.7, 3909371.5, 4496425.4, 3993.9  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 394 philam-4: 0.7868, 2.0944
    test 395 reverse-5: 45.08, 120.0, 9993.861  FAILED, KNOWN, expected 45.0, 120.0, 10000.0
    test 396 forward-5: -2259198.0, 3913045.8, 4500668.0  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5
    test 397 xyzh-5: -2259198.0, 3913045.8, 4500668.0, 9993.9  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 398 philam-5: 0.7868, 2.0944
    test 399 reverse-6: 45.079, 120.0, 19993.87  FAILED, KNOWN, expected 45.0, 120.0, 20000.0
    test 400 forward-6: -2262733.6, 3919169.6, 4507739.0  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5
    test 401 xyzh-6: -2262733.6, 3919169.6, 4507739.0, 19993.9  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 402 philam-6: 0.7868, 2.0944
    test 403 reverse-7: 45.078, 120.0, 99993.947  FAILED, KNOWN, expected 45.0, 120.0, 100000.0
    test 404 forward-7: -2291018.1, 3968159.8, 4564307.3  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1
    test 405 xyzh-7: -2291018.1, 3968159.8, 4564307.3, 99993.9  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 406 philam-7: 0.7868, 2.0944
    test 407 reverse-8: 45.071, 120.0, 799994.544  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 408 forward-8: -2538507.3, 4396823.7, 5059280.0  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8
    test 409 xyzh-8: -2538507.3, 4396823.7, 5059280.0, 799994.5  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 410 philam-8: 0.7866, 2.0944
    test 411 reverse-9: 45.069, 120.0, 999994.693  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 412 forward-9: -2609218.5, 4519299.0, 5200700.9  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2
    test 413 xyzh-9: -2609218.5, 4519299.0, 5200700.9, 999994.7  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 414 philam-9: 0.7866, 2.0944
    test 415 sudano: 45.078, 0.0, 99993.947  FAILED, KNOWN, expected 45.0, 0.0, 100000.0
    test 416 name: OS-UK
    test 417 forward: 53.61199036, -1.66444222, 299.8
    test 418 forward: 3790644.9, -110149.21, 5111482.97
    test 419 reverse: 3790644.9, -110149.21, 5111482.97
    test 420 reverse: 53.73795244, -1.66444223  FAILED, KNOWN, expected 53.61199036, -1.66444223
    test 421 reverse.lat: 53°44′16.6288″N  FAILED, KNOWN, expected 53°36′43.1653″N
    test 422 reverse.lon: 001°39′51.992″W
    test 423 reverse.height: 284.389  FAILED, KNOWN, expected 299.800
    test 424 case: 7
    test 425 iteration: 7
    test 426 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 427 reverse: 34.036724, -117.333569, 250.396541  FAILED, KNOWN, expected 34.0, -117.333569, 251.702
    test 428 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 429 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 430 EcefSudano: EcefSudano(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefSudano

    test 431 EcefYou: ...
    test 432 name: Test
    test 433 toStr: EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test')  FAILED, KNOWN, expected EcefYou
    test 434 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='_Test', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='Test'  FAILED, KNOWN, expected EcefYou
    test 435 copy(EcefYou): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 436 EcefYou.copy(): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 437 forward: 27.99, 86.93, 8820.0
    test 438 forward: 302271.4, 5635928.4, 2979666.1
    test 439 name: Test
    test 440 reverse: 302271.4, 5635928.4, 2979666.1
    test 441 reverse: 27.99, 86.93, 8820.01
    test 442 case: 1
    test 443 iteration: None
    test 444 name: Test
    test 445 reverse: 302000.0, 5636000.0, 2980000.0
    test 446 reverse: 27.99, 86.93, 9027.03
    test 447 case: 1
    test 448 iteration: None
    test 449 forward: 27.99, 86.93, 8820.0
    test 450 forward: 302271.43, 5635928.37, 2979666.13
    test 451 forward: 33.3, 44.4, 6000.0
    test 452 forward: 3816209.6, 3737108.55, 3485109.57
    test 453 reverse: 3816209.6, 3737108.55, 3485109.57
    test 454 reverse: 33.3, 44.4, 5999.996
    test 455 case: 1
    test 456 iteration: None
    test 457 reverse: 30000.0, 30000.0, 0.0
    test 458 reverse: 90.0, 45.0, -6356893.894  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 459 case: 1
    test 460 iteration: None
    test 461 forward: 6.483, 45.0, -6335709.726
    test 462 forward: 30000.0, 30000.0, -0.0
    test 463 Vermeille: -168.919
    test 464 Vermeille: 190.939
    test 465 reverse-1: 45.0, 120.0, 1000.0
    test 466 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 467 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 468 philam-1: 0.7854, 2.0944
    test 469 reverse-2: 45.0, 120.0, 2000.0
    test 470 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 471 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 472 philam-2: 0.7854, 2.0944
    test 473 reverse-3: 45.0, 120.0, 3000.0
    test 474 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 475 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 476 philam-3: 0.7854, 2.0944
    test 477 reverse-4: 45.0, 120.0, 4000.0
    test 478 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 479 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 480 philam-4: 0.7854, 2.0944
    test 481 reverse-5: 45.0, 120.0, 10000.0
    test 482 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 483 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 484 philam-5: 0.7854, 2.0944
    test 485 reverse-6: 45.0, 120.0, 20000.0
    test 486 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 487 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 488 philam-6: 0.7854, 2.0944
    test 489 reverse-7: 45.0, 120.0, 100000.0
    test 490 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 491 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 492 philam-7: 0.7854, 2.0944
    test 493 reverse-8: 45.0, 120.0, 800000.0
    test 494 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 495 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 496 philam-8: 0.7854, 2.0944
    test 497 reverse-9: 45.0, 120.0, 1000000.0
    test 498 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 499 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 500 philam-9: 0.7854, 2.0944
    test 501 sudano: 45.0, 0.0, 100000.0
    test 502 name: OS-UK
    test 503 forward: 53.61199036, -1.66444222, 299.8
    test 504 forward: 3790644.9, -110149.21, 5111482.97
    test 505 reverse: 3790644.9, -110149.21, 5111482.97
    test 506 reverse: 53.61199036, -1.66444223
    test 507 reverse.lat: 53°36′43.1653″N
    test 508 reverse.lon: 001°39′51.992″W
    test 509 reverse.height: 299.800
    test 510 case: 1
    test 511 iteration: None
    test 512 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 513 reverse: 34.0, -117.333569, 251.702
    test 514 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 515 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 516 EcefYou: EcefYou(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefYou

    test 517 EcefMatrix: ...
    test 518 index: (0, 1, 2, 3, 4, 5, 6, 7, 8)
    test 519 matrix: 0, 1, 2, 3, 4, 5, 6, 7, 8
    test 520 multiply: 45, 54, 63, 54, 66, 78, 63, 78, 93
    test 521 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 522 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 523 matrix: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 524 multiply: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 525 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 526 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)

    test 527 pygeodesy.sphericalNvector: Cartesian
    test 528 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 529 pygeodesy.sphericalNvector: LatLon
    test 530 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 531 forward: 48.833, 2.333, 0.0
    test 532 forward: 4190278.55, 170716.35, 4796058.21
    test 533 name: Paris
    test 534 reverse: 48.833, 2.333, 0.0
    test 535 name: Paris
    test 536 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 537 name: Paris
    test 538 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 539 to4Tuple: LatLon4Tuple
    test 540 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 541 to3Tuple: LatLon3Tuple
    test 542 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 543 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 544 name: Paris
    test 545 forward: [4190278.55, 170716.35, 4796058.21]
    test 546 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 547 pygeodesy.sphericalTrigonometry: Cartesian
    test 548 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 549 pygeodesy.sphericalTrigonometry: LatLon
    test 550 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 551 forward: 48.833, 2.333, 0.0
    test 552 forward: 4190278.55, 170716.35, 4796058.21
    test 553 name: Paris
    test 554 reverse: 48.833, 2.333, 0.0
    test 555 name: Paris
    test 556 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 557 name: Paris
    test 558 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 559 to4Tuple: LatLon4Tuple
    test 560 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 561 to3Tuple: LatLon3Tuple
    test 562 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 563 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 564 name: Paris
    test 565 forward: [4190278.55, 170716.35, 4796058.21]
    test 566 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 567 pygeodesy.ellipsoidalNvector: Cartesian
    test 568 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 569 pygeodesy.ellipsoidalNvector: LatLon
    test 570 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 571 forward: 48.833, 2.333, 0.0
    test 572 forward: 4202946.8, 171232.47, 4778354.17
    test 573 name: Paris
    test 574 reverse: 48.833, 2.333, 0.0
    test 575 name: Paris
    test 576 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 577 name: Paris
    test 578 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 579 to4Tuple: LatLon4Tuple
    test 580 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 581 to3Tuple: LatLon3Tuple
    test 582 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 583 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 584 name: Paris
    test 585 forward: [4202946.8, 171232.47, 4778354.17]
    test 586 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 587 pygeodesy.ellipsoidalVincenty: Cartesian
    test 588 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 589 pygeodesy.ellipsoidalVincenty: LatLon
    test 590 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 591 forward: 48.833, 2.333, 0.0
    test 592 forward: 4202946.8, 171232.47, 4778354.17
    test 593 name: Paris
    test 594 reverse: 48.833, 2.333, 0.0
    test 595 name: Paris
    test 596 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 597 name: Paris
    test 598 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 599 to4Tuple: LatLon4Tuple
    test 600 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 601 to3Tuple: LatLon3Tuple
    test 602 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 603 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 604 name: Paris
    test 605 forward: [4202946.8, 171232.47, 4778354.17]
    test 606 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 607 pygeodesy.ellipsoidalKarney: Cartesian
    test 608 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 609 pygeodesy.ellipsoidalKarney: LatLon
    test 610 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 611 forward: 48.833, 2.333, 0.0
    test 612 forward: 4202946.8, 171232.47, 4778354.17
    test 613 name: Paris
    test 614 reverse: 48.833, 2.333, 0.0
    test 615 name: Paris
    test 616 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 617 name: Paris
    test 618 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 619 to4Tuple: LatLon4Tuple
    test 620 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 621 to3Tuple: LatLon3Tuple
    test 622 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 623 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 624 name: Paris
    test 625 forward: [4202946.8, 171232.47, 4778354.17]
    test 626 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 627 pygeodesy.ellipsoidalExact: Cartesian
    test 628 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 629 pygeodesy.ellipsoidalExact: LatLon
    test 630 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 631 forward: 48.833, 2.333, 0.0
    test 632 forward: 4202946.8, 171232.47, 4778354.17
    test 633 name: Paris
    test 634 reverse: 48.833, 2.333, 0.0
    test 635 name: Paris
    test 636 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 637 name: Paris
    test 638 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 639 to4Tuple: LatLon4Tuple
    test 640 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 641 to3Tuple: LatLon3Tuple
    test 642 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 643 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 644 name: Paris
    test 645 forward: [4202946.8, 171232.47, 4778354.17]
    test 646 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 647 pygeodesy.ellipsoidalGeodSolve: Cartesian
    test 648 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 649 pygeodesy.ellipsoidalGeodSolve: LatLon
    test 650 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 651 forward: 48.833, 2.333, 0.0
    test 652 forward: 4202946.8, 171232.47, 4778354.17
    test 653 name: Paris
    test 654 reverse: 48.833, 2.333, 0.0
    test 655 name: Paris
    test 656 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 657 name: Paris
    test 658 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 659 to4Tuple: LatLon4Tuple
    test 660 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 661 to3Tuple: LatLon3Tuple
    test 662 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 663 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 664 name: Paris
    test 665 forward: [4202946.8, 171232.47, 4778354.17]
    test 666 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    72 of 666 testEcef.py tests (10.8%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 69.733 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testElevations.py

    testing testElevations.py 20.07.03
    test 1 elevation2: 1173.790
    test 2 geoidHeight2: -31.699
    test 3 elevation2: 1173.790
    test 4 geodHeight2: -31.699
    test 5 elevation2: 2.030
    test 6 geodHeight2: -27.773
    test 7 elevation2: 199.180
    test 8 geodHeight2: -34.337
    test 9 elevation2: 8.520
    test 10 geodHeight2: -30.000
    test 11 elevation2: 32.790
    test 12 geodHeight2: -31.666
    test 13 elevation2: (None, 'non-CONUS -1000000.00')
    test 14 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, 'HTTPError()')
    test 15 elevation2: (None, "URLError(timeout('timed out'))")
    test 16 geodHeight2: (None, "URLError(timeout('timed out'))")
    test 17 elevation2: 1173.790
    test 18 geoidHeight2: -31.699
    test 19 elevation2: 1173.790
    test 20 geodHeight2: -31.699
    test 21 elevation2: 2.030
    test 22 geodHeight2: -27.773
    test 23 elevation2: 199.180
    test 24 geodHeight2: -34.337
    test 25 elevation2: 8.520
    test 26 geodHeight2: -30.000
    test 27 elevation2: 32.790
    test 28 geodHeight2: -31.666
    test 29 elevation2: (None, 'non-CONUS -1000000.00')
    test 30 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, 'HTTPError()')
    test 31 elevation2: (None, "URLError(timeout('timed out'))")
    test 32 geodHeight2: (None, "URLError(timeout('timed out'))")

    2 of 32 testElevations.py tests (6.2%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 11.130 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testEllipsoidal.py
./test/testEllipsoidal.py:33: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = p.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:39: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  self.test('convertDatum', p.convertDatum(p.datum), p)  # i.e. p.copy()
./test/testEllipsoidal.py:33: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = p.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:39: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  self.test('convertDatum', p.convertDatum(p.datum), p)  # i.e. p.copy()

    testing testEllipsoidal.py 21.06.27

    testEllipsoidal(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 6 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 7 convertDatum: 51.4778°N, 000.0016°W
    test 8 parse: 51.477284°N, 000.00002°E, -45.91m
    test 9 reframe: None
    test 10 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 11 toEcef: 3980581.21, -111.159, 4966824.522
    test 12 toEtm: 30 N 916396 5720041
    test 13 toLcc: 5639901 4612638
    test 14 toOsgr: TQ 38876 77320
    test 15 toUtmUps: 30 N 708207 5707224
    test 16 toUtm: 30 N 708207 5707224
    test 17 toWm: -178.111 6672799.209
    test 18 elevation2: None
    test 19 geoidHeight2: None
    test 20 toUtmUps: 30 N 708207 5707224
    test 21 toUtmUps: 30 N 708207 5707224
    test 22 toUtm: 30 N 708207 5707224
    test 23 toUtm: 30 N 708207 5707224
    test 24 toUtmUps: 00 N 2000000 1333272
    test 25 toUtmUps: 00 N 2000000 1333272
    test 26 toUps: 00 N 2000000 1333272
    test 27 toUps: 00 N 2000000 1333272
    test 28 toUps: 00 N 2000000 1555732
    test 29 toUtm: 31 N 459200 9217519
    test 30 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 31 toNvector: True
    test 32 toCartesian: [3980581, 97, 4966825]
    test 33 toCartesian: True
    test 34 toVector3D: (0.6228, 0.0, 0.7824)
    test 35 Nvector: (0.5, 0.5, 0.7071)
    test 36 toVector3D: (0.5, 0.5, 0.7071)
    test 37 philamheight: 0.7854, 0.7854, 0.0
    test 38 latlonheight: 45.0, 45.0, 0.0
    test 39 xyzh: 0.5, 0.5, 0.7, 0.0
    test 40 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 41 toCartesian: True
    test 42 toLatLon: 45.0°N, 045.0°E
    test 43 toLatLon: True
    test 44 Nvector: (0.51, 0.512, 0.707, +1.00)
    test 45 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 46 dop: 51.998889°N, 004.373333°E, +134.64m
    test 47 distance: 3806542.94365  FAILED, KNOWN, expected 3806542.943647

    testLatLon(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 48 isEllipsoidal: True
    test 49 isSpherical: False
    test 50 lat/lonDMS: 52.20472°N, 000.14056°E
    test 51 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 52 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 53 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 54 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 55 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 56 isequalTo: True
    test 57 isequalTo: True
    test 58 latlon2: 52.20472, 0.14056
    test 59 latlon2: 52.2047, 0.1406
    test 60 latlon2: 52.205, 0.141
    test 61 latlon2: 52.2, 0.14
    test 62 latlon2: 52.2, 0.1
    test 63 latlon2: 52.0, 0.0
    test 64 chordTo: 12029263.15
    test 65 chordTo: 12029049.69
    test 66 isequalTo: False
    test 67 antipode1: 52.205°S, 179.881°W
    test 68 antipode2: True
    test 69 antipode3: 52.205°N, 000.119°E
    test 70 antipode4: True
    test 71 antipode5: 52.205°N, 000.119°E
    test 72 copy: True
    test 73 __eq__: True
    test 74 __ne__: False
    test 75 equirectangularTo: 404329.56
    test 76 distanceTo: 404279.720589
    test 77 distanceTo: 404279.720589
    test 78 distanceTo: 3972863
    test 79 distanceTo: 18013602.92
    test 80 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 81 intermediateTo: 51.372294°N, 000.707192°E
    test 82 intermediateTo: True
    test 83 intermediateTo: 404279.721
    test 84 intermediateTo+5: 35.560239°N, 008.833512°E
    test 85 intermediateTo+5: 4.885
    test 86 intermediateTo-4: 64.570387°N, 013.156352°W
    test 87 intermediateTo-4: 3.885
    test 88 intermediateTo-h: 125.000
    test 89 chordTo: 125203.963
    test 90 cosineAndoyerLambertTo: 125205.962
    test 91 cosineAndoyerLambertTo: 125205.962
    test 92 cosineForsyheAndoyerLambertTo: 125205.965
    test 93 cosineForsyheAndoyerLambertTo: 125205.965
    test 94 cosineLawTo: 124801.098
    test 95 cosineLawTo: 124801.098
    test 96 equirectangularTo: 124804.754
    test 97 equirectangularTo: 124804.754
    test 98 euclideanTo: 130015.089
    test 99 euclideanTo: 130015.089
    test 100 flatLocalTo: 125209.633
    test 101 flatLocalTo: 125209.633
    test 102 flatPolarTo: 133663.257
    test 103 flatPolarTo: 133663.257
    test 104 haversineTo: 124801.098
    test 105 haversineTo: 124801.098
    test 106 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 107 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 108 thomasTo: 125206.188
    test 109 thomasTo: 125206.188
    test 110 vincentysTo: 124801.098
    test 111 vincentysTo: 124801.098
    test 112 isclockwise: False
    test 113 isclockwise*: False
    test 114 isclockwise: True
    test 115 isclockwise*: True
    test 116 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 117 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 118 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 119 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 120 isconvex: False
    test 121 isconvex*: False
    test 122 isconvex: True
    test 123 isconvex*: True
    test 124 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 125 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 126 isenclosedBy1: True
    test 127 isenclosedBy1*: True
    test 128 isenclosedBy2: False
    test 129 isenclosedBy2*: False
    test 130 isenclosedBy3: False
    test 131 isenclosedBy3*: False
    test 132 isenclosedBy4: False
    test 133 isenclosedBy4*: False
    test 134 isenclosedBy5: False
    test 135 isenclosedBy5*: False
    test 136 isenclosedBy6: True
    test 137 isenclosedBy6*: True
    test 138 isenclosedBy7: True
    test 139 isenclosedBy7*: True
    test 140 compassAngleTo: 100.017
    test 141 compassAngleTo: 105.599
    test 142 compassAngleTo: 280.017
    test 143 compassAngleTo: 285.599
    test 144 equirectangularTo: 592.185
    test 145 distanceTo: 591.831
    test 146 compassAngleTo: 0.0
    test 147 compassAngleTo: 45.0
    test 148 compassAngleTo: 90.0
    test 149 compassAngleTo: 180.0
    test 150 compassAngleTo: 225.0
    test 151 compassAngleTo: 315.0
    test 152 compassAngleTo: 270.0
    test 153 compassAngleTo: 359.4
    test 154 latlon2: (53.0, 1.0)
    test 155 philam2: (0.93, 0.02)
    test 156 compassAngleTo: 31
    test 157 compassAngleTo: 45
    test 158 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 159 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 160 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 161 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 162 isequalTo: <type 'bool'>
    test 163 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 164 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 165 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 166 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 167 compassAngleTo: <type 'float'>
    test 168 cosineLawTo: <type 'float'>
    test 169 euclideanTo: <type 'float'>
    test 170 flatLocalTo: <type 'float'>
    test 171 flatPolarTo: <type 'float'>
    test 172 haversineTo: <type 'float'>
    test 173 hubenyTo: <type 'float'>
    test 174 vincentysTo: <type 'float'>
    test 175 toVector: (0.615661, 0.0, 0.788011)
    test 176 toVector3d: (0.61566, 0.0, 0.78801)
    test 177 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 178 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 179 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 180 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 181 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testVectorial(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 182 toLatLon: 44.995674°N, 045.0°E
    test 183 toNvector: (0.50004, 0.50004, 0.70705)
    test 184 isequalTo: False
    test 185 isequalTo: True
    test 186 length: 0.99992449715
    test 187 euclid: 0.99995577
    test 188 length: 1.00
    test 189 euclid: 1.0000
    test 190 meanOf: 44.995674°N, 045.0°E
    test 191 meanOf: LatLon
    test 192 sumOf: (52.70504, 0.61904, 0.70705)
    test 193 sumOf: Nv
    test 194 sumOf: sumOf
    test 195 length: 52.7134151513
    test 196 copy: True
    test 197 length: 52.2051356286
    test 198 length: 52.2051356286
    test 199 nearestOn: 51.0°N, 001.0°E
    test 200 nearestOn: 50.987°N, 000.298°W
    test 201 nearestOn: 51.0°N, 002.0°E
    test 202 nearestOn: 50.995°N, 002.655°E
    test 203 nearestOn: 51.0°N, 001.9°E
    test 204 nearestOn: True
    test 205 distanceTo: 42.826
    test 206 nearestOn: 51.0°N, 002.0°E
    test 207 nearestOn: True
    test 208 nearestOn: 00.0°N, 000.0°E
    test 209 nearestOn: True
    test 210 nearestOn: 00.0°N, 020.0°E
    test 211 nearestOn: True
    test 212 nearestOn: 02.0°N, 002.0°E
    test 213 nearestOn: 02.0°N, 002.0°E
    test 214 BasseC: 47.3038°N, 002.5721°W
    test 215 BasseH: 47.311067°N, 002.528617°W
    test 216 triangulate: 47.323667°N, 002.568501°W
    test 217 triangulate: True
    test 218 trilaterate: 37.419078°N, 121.960579°W
    test 219 trilaterate: True
    test 220 trilaterate: 08.068912°S, 034.888699°W
    test 221 trilaterate: True
    test 222 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 223 trilaterate: True
    test 224 trilaterate: 42.67456065°N, 002.49539502°E
    test 225 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 226 sumOf: Nvector
    test 227 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 228 ecef.lat, .lon: 44.995674, 45.0
    test 229 ecef.height: -0.0
    test 230 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 231 .isEllipsoidal: True
    test 232 .isSpherical: False
    test 233 .latlon: (44.995674, 45.0)
    test 234 .philam: (0.785323, 0.785398)
    test 235 .latlonheight: (44.995674, 45.0, 0)
    test 236 .philamheight: (0.785323, 0.785398, 0)
    test 237 parse: (0.5, 0.5, 0.707)
    test 238 cmp: 0
    test 239 eq: True
    test 240 ge: True
    test 241 gt: False
    test 242 le: True
    test 243 lt: False
    test 244 ne: False
    test 245 *: (1.0, 1.0, 1.414)
    test 246 +: (1.0, 1.0, 1.414)
    test 247 /: (0.5, 0.5, 0.707)
    test 248 -: (0.5, 0.5, 0.707)
    test 249 @: (0.0, 0.0, 0.0)
    test 250 @: (0.0, 0.0, 0.0)
    test 251 rotate: (0.26268, 0.26268, 0.37143)
    test 252 crosserrors: True
    test 253 0: factor (0): float division by zero
    test 254 intersections2: (500.0, 0.0, 0.0)
    test 255 nearestOn: (0.0, 0.0, 0.0)
    test 256 nearestOn: True
    test 257 nearestOn: (100.0, 100.0, 100.0)
    test 258 nearestOn: True
    test 259 iscolinearWith: False
    test 260 iscolinearWith: True

    testEllipsoidal(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 261 isEllipsoidal: True
    test 262 isSpherical: False
    test 263 isEllipsoidal: True
    test 264 isSpherical: False
    test 265 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 266 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 267 convertDatum: 51.4778°N, 000.0016°W
    test 268 parse: 51.477284°N, 000.00002°E, -45.91m
    test 269 reframe: None
    test 270 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 271 toEcef: 3980581.21, -111.159, 4966824.522
    test 272 toEtm: 30 N 916396 5720041
    test 273 toLcc: 5639901 4612638
    test 274 toOsgr: TQ 38876 77320
    test 275 toUtmUps: 30 N 708207 5707224
    test 276 toUtm: 30 N 708207 5707224
    test 277 toWm: -178.111 6672799.209
    test 278 elevation2: None
    test 279 geoidHeight2: None
    test 280 toUtmUps: 30 N 708207 5707224
    test 281 toUtmUps: 30 N 708207 5707224
    test 282 toUtm: 30 N 708207 5707224
    test 283 toUtm: 30 N 708207 5707224
    test 284 toUtmUps: 00 N 2000000 1333272
    test 285 toUtmUps: 00 N 2000000 1333272
    test 286 toUps: 00 N 2000000 1333272
    test 287 toUps: 00 N 2000000 1333272
    test 288 toUps: 00 N 2000000 1555732
    test 289 toUtm: 31 N 459200 9217519
    test 290 nearestOn: 32.81°N, 031.42°E
    test 291 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 292 dop: 51.998889°N, 004.373333°E, +134.64m
    test 293 distance: 3817991.07401  FAILED, KNOWN, expected 3817991.074015

    testLatLon(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 294 isEllipsoidal: True
    test 295 isSpherical: False
    test 296 lat/lonDMS: 52.20472°N, 000.14056°E
    test 297 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 298 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 299 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 300 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 301 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 302 isequalTo: True
    test 303 isequalTo: True
    test 304 latlon2: 52.20472, 0.14056
    test 305 latlon2: 52.2047, 0.1406
    test 306 latlon2: 52.205, 0.141
    test 307 latlon2: 52.2, 0.14
    test 308 latlon2: 52.2, 0.1
    test 309 latlon2: 52.0, 0.0
    test 310 chordTo: 12029263.15
    test 311 chordTo: 12029049.69
    test 312 isequalTo: False
    test 313 antipode1: 52.205°S, 179.881°W
    test 314 antipode2: True
    test 315 antipode3: 52.205°N, 000.119°E
    test 316 antipode4: True
    test 317 antipode5: 52.205°N, 000.119°E
    test 318 initialBearingTo: 156.1106
    test 319 initialBearingTo: 65.9335
    test 320 initialBearingTo: 0.0
    test 321 initialBearingTo: 180.0
    test 322 finalBearingTo: 157.8345
    test 323 finalBearingTo: 93.9034
    test 324 bearingTo2: 156.1106, 157.8345
    test 325 ispolar: True
    test 326 copy: True
    test 327 __eq__: True
    test 328 __ne__: False
    test 329 equirectangularTo: 404329.56
    test 330 distanceTo: 404607.805988
    test 331 distanceTo: 404607.805988
    test 332 distanceTo: 3981601
    test 333 antipodal: False
    test 334 distanceTo dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 335 distanceTo unrolled: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 336 antipodal: False
    test 337 distanceTo dateline: 9513998
    test 338 distanceTo unrolled: 9513998
    test 339 distanceTo: 18012714.66
    test 340 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 341 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 342 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 343 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 344 distanceTo3 datel./test/testEllipsoidal.py:212: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  c = Cleveland_OH.convertDatum(Datums.OSGB36)
ine: 9513997.9901, 42.9164, 138.8903
    test 345 intermediateTo: 51.372275°N, 000.707253°E
    test 346 intermediateTo: True
    test 347 intermediateTo: 404607.806
    test 348 intermediateTo+5: 35.139582°N, 008.994368°E
    test 349 intermediateTo+5: 5.000
    test 350 intermediateTo-4: 64.894124°N, 013.705689°W
    test 351 intermediateTo-4: 4.000
    test 352 intermediateTo-h: 125.000
    test 353 destination: 51.513526°N, 000.098038°W
    test 354 destination: 51°30′49″N, 000°05′53″W
    test 355 destination: 33°57′N, 118°24′W
    test 356 destination: 33.950367°N, 118.399012°W
    test 357 destination: 0.592546N, 2.066453W
    test 358 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 359 chordTo: 125203.963
    test 360 cosineAndoyerLambertTo: 125205.962
    test 361 cosineAndoyerLambertTo: 125205.962
    test 362 cosineForsyheAndoyerLambertTo: 125205.965
    test 363 cosineForsyheAndoyerLambertTo: 125205.965
    test 364 cosineLawTo: 124801.098
    test 365 cosineLawTo: 124801.098
    test 366 equirectangularTo: 124804.754
    test 367 equirectangularTo: 124804.754
    test 368 euclideanTo: 130015.089
    test 369 euclideanTo: 130015.089
    test 370 flatLocalTo: 125209.633
    test 371 flatLocalTo: 125209.633
    test 372 flatPolarTo: 133663.257
    test 373 flatPolarTo: 133663.257
    test 374 haversineTo: 124801.098
    test 375 haversineTo: 124801.098
    test 376 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 377 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 378 thomasTo: 125206.188
    test 379 thomasTo: 125206.188
    test 380 vincentysTo: 124801.098
    test 381 vincentysTo: 124801.098
    test 382 isclockwise: False
    test 383 isclockwise*: False
    test 384 isclockwise: True
    test 385 isclockwise*: True
    test 386 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 387 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 388 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 389 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 390 isconvex: False
    test 391 isconvex*: False
    test 392 isconvex: True
    test 393 isconvex*: True
    test 394 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 395 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 396 isenclosedBy1: True
    test 397 isenclosedBy1*: True
    test 398 isenclosedBy2: False
    test 399 isenclosedBy2*: False
    test 400 isenclosedBy3: False
    test 401 isenclosedBy3*: False
    test 402 isenclosedBy4: False
    test 403 isenclosedBy4*: False
    test 404 isenclosedBy5: False
    test 405 isenclosedBy5*: False
    test 406 isenclosedBy6: True
    test 407 isenclosedBy6*: True
    test 408 isenclosedBy7: True
    test 409 isenclosedBy7*: True
    test 410 initialBearingTo: 102.392291
    test 411 compassAngleTo: 100.017
    test 412 compassAngleTo: 105.599
    test 413 initialBearingTo: 288.676039
    test 414 compassAngleTo: 280.017
    test 415 compassAngleTo: 285.599
    test 416 equirectangularTo: 592.185
    test 417 distanceTo: 593.571
    test 418 bearingTo: 0.0
    test 419 compassAngleTo: 0.0
    test 420 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 421 compassAngleTo: 45.0
    test 422 bearingTo: 90.0
    test 423 compassAngleTo: 90.0
    test 424 bearingTo: 180.0
    test 425 compassAngleTo: 180.0
    test 426 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 427 compassAngleTo: 225.0
    test 428 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 429 compassAngleTo: 315.0
    test 430 bearingTo: 270.0
    test 431 compassAngleTo: 270.0
    test 432 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 433 compassAngleTo: 359.4
    test 434 latlon2: (53.0, 1.0)
    test 435 philam2: (0.93, 0.02)
    test 436 bearingTo: 31
    test 437 compassAngleTo: 31
    test 438 compassAngleTo: 45
    test 439 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 440 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 441 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 442 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 443 isequalTo: <type 'bool'>
    test 444 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 445 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 446 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 447 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 448 compassAngleTo: <type 'float'>
    test 449 cosineLawTo: <type 'float'>
    test 450 euclideanTo: <type 'float'>
    test 451 flatLocalTo: <type 'float'>
    test 452 flatPolarTo: <type 'float'>
    test 453 haversineTo: <type 'float'>
    test 454 hubenyTo: <type 'float'>
    test 455 vincentysTo: <type 'float'>
    test 456 toNvector: (0.615661, 0.0, 0.788011)
    test 457 toVector: (0.615661, 0.0, 0.788011)
    test 458 toVector3d: (0.61566, 0.0, 0.78801)
    test 459 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 460 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 461 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 462 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 463 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 464 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 465 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 466 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 467 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 468 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 469 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 470 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 471 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 472 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 473 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 474 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 475 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 476 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 477 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 478 circum3.radius: 57792.067
    test 479 circum3.center: 43.053532°N, 002.943255°E, -261.66m
    test 480 circum3.deltas: (0.0, 0.0, 11.383)
    test 481 circum3.dist1: 57792.858351
    test 482 circum3.dist2: 57792.859238  FAILED, KNOWN, expected 57792.859237
    test 483 circum3.dist3: 57792.859063  FAILED, KNOWN, expected 57792.859062
    test 484 circum3.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 485 circum3.Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    testNOAA(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 486 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 487 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 488 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 489 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 490 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.43″E), 0, 0)
    test 491 (-1,  3): (LatLon(01°34′52.51″N, 006°00′51.85″E), -1, -2)
    test 492 (65, 32): (LatLon(56°58′26.57″N, 032°00′00.0″E), 1, 0)
    test 493 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 494 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)

    testIntersections2(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 495 Equidistant: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W  FAILED, KNOWN, expected 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 496 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 497 Equidistant: 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 498 Equidistant: 1.63814 (% of radius)
    test 499 Equidistant: 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 500 Equidistant: 1.30784 (% of radius)
    test 501 Equidistant: 29.2359°N, 040.2625°W, 29.2359°S, 040.2625°E
    test 502 Equidistant: 1.31348 (% of radius)
    test 503 Equidistant: 01.1557°S, 045.0894°E, 01.1557°N, 045.0894°E
    test 504 Equidistant: 1.81093 (% of radius)
    test 505 Equidistant 5: 05.0218°S, 005.0605°W, 05.0218°N, 005.0605°E
    test 506 Equidistant 5: 0.00337268 (% of radius)
    test 507 Equidistant 10: 10.0378°S, 010.3545°W, 10.0378°N, 010.3545°E
    test 508 Equidistant 10: 0.00344677 (% of radius)
    test 509 Equidistant 15: 15.0326°S, 016.1429°W, 15.0326°N, 016.1429°E
    test 510 Equidistant 15: 0.00356146 (% of radius)
    test 511 Equidistant 20: 19.9682°S, 022.7468°W, 19.9682°N, 022.7468°E
    test 512 Equidistant 20: 0.00370135 (% of radius)
    test 513 Equidistant 25: 24.7603°S, 030.5908°W, 24.7603°N, 030.5908°E
    test 514 Equidistant 25: 0.00383987 (% of radius)
    test 515 Equidistant 30: 29.2359°S, 040.2625°W, 29.2359°N, 040.2625°E
    test 516 Equidistant 30: 0.00393258 (% of radius)
    test 517 Equidistant 35: 33.0487°S, 052.585°W, 33.0487°N, 052.585°E
    test 518 Equidistant 35: 0.00390516 (% of radius)
    test 519 Equidistant 40: 35.5123°S, 068.6794°W, 35.5123°N, 068.6794°E
    test 520 Equidistant 40: 0.0036308 (% of radius)
    test 521 Equidistant 45: 35.2644°S, 090.0019°W, 35.2644°N, 090.0019°E
    test 522 Equidistant 45: 0.00288386 (% of radius)
    test 523 Equidistant 50: 29.3392°S, 119.0221°W, 29.3392°N, 119.0221°E
    test 524 Equidistant 50: 0.00271777 (% of radius)
    test 525 Equidistant: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 526 Equidistant: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 527 Equidistant: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 528 Equidistant: 02.440917°S, 014.895654°E Random +/- 45
    test 529 Equidistant: 02.430895°S, 015.017243°E, 23.922675°S, 047.403497°W  d 13568.4 meter (iteration 3)
    test 530 Equidistant: 02.477609°S, 015.01813°E, 22.039228°S, 074.833642°W  d 14212.9 meter (iteration 3)
    test 531 Equidistant: 02.560891°S, 015.106996°E, 26.989632°N, 009.2626°W  d 26989.7 meter (iteration 4)
    test 532 Equidistant: 02.487669°S, 014.979251°E, 04.346596°N, 030.996352°W  d 10638 meter (iteration 3)
    test 533 Equidistant: 02.351651°S, 014.975962°E, 12.264087°N, 027.173053°W  d 13312.2 meter (iteration 3)
    test 534 Equidistant: 02.373004°S, 014.883387°E, 00.132367°N, 043.534785°E  d 7632.57 meter (iteration 3)
    test 535 Equidistant: 02.439349°S, 015.067351°E, 16.704852°N, 081.706246°W  d 19096.8 meter (iteration 3)
    test 536 Equidistant: 02.528033°S, 014.995282°E, 33.617444°S, 038.168224°W  d 14682.2 meter (iteration 3)
    test 537 Equidistant: 02.438053°S, 014.942981°E, 50.406394°N, 011.92135°W  d 5273.27 meter (iteration 4)
    test 538 Equidistant: 02.358186°S, 014.975433°E, 22.480944°N, 022.80214°W  d 12744.5 meter (iteration 3)
    test 539 Equidistant: 02.508741°S, 014.970105°E, 20.87145°S, 018.600548°W  d 11171.7 meter (iteration 3)
    test 540 Equidistant: 02.410516°S, 014.974059°E, 77.462901°N, 107.998127°E  d 9345.79 meter (iteration 4)

    testVincenty(pygeodesy.ellipsoidalVincenty, 21.06.27, datum='WGS84')
    test 541 distanceTo: 866455.43292
    test 542 convertDatum: OSGB36
    test 543 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 544 isEllipsoidal: True
    test 545 isSpherical: False
    test 546 epsilon: 1e-12
    test 547 iterations: 100
    test 548 copy: True
    test 549 isEllipsoidal: True
    test 550 isSpherical: False
    test 551 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 552 epsilon: 2.220446049250e-16
    test 553 iterations: 200
    test 554 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 21.06.27, datum='WGS84')
    test 555 coincident: 0.0
    test 556 coincident: 0.0, 0.0, 0.0
    test 557 destination: 37.6528°S, 143.9265°E
    test 558 destination: True
    test 559 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 560 destination2: True
    test 561 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 562 distanceTo: 969954.166
    test 563 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 564 distanceTo2: 972708.16174, 11.22502
    test 565 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 566 destination: 58.64402°N, 003.07009°W
    test 567 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 568 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 569 distanceTo: 404607.806
    test 570 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 571 distanceTo2: 402574.597287, 157.726344
    test 572 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 573 destination: 48.857°N, 002.351°E
    test 574 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 575 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 576 distanceTo: 54973.295
    test 577 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 578 distanceTo2: 54903.41209, 232.9209
    test 579 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 580 destination: 37.6528°N, 143.9265°E
    test 581 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 582 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 583 distanceToMP: 298396.057
    test 584 distanceToSM: 185.414
    test 585 distanceToMP: 111319.491
    test 586 distanceToMP: 110574.389
    test 587 distanceToKW: 222638.982
    test 588 distanceToKW: 111319.491
    test 589 distanceTo3: 54972.271
    test 590 distanceTo3: 306°52′05.37″
    test 591 distanceTo3: 307°10′25.07″
    test 592 distanceTo2: 54902.390
    test 593 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 21.06.27, datum='WGS84')
    test 594 distanceTo/antipodal (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°30′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 595 distanceTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 596 initialBearingTo/VincentyError (100): no convergence: LatLon(00°0./test/testEllipsoidal.py:212: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  c = Cleveland_OH.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:33: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = p.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:39: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  self.test('convertDatum', p.convertDatum(p.datum), p)  # i.e. p.copy()
0′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 597 finalBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 598 distanceTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 599 initialBearingTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 600 distanceTo/coincident (5): 111319.491
    test 601 distanceTo/meridional (1): 10001965.729
    test 602 initialBearingTo/meridional (1): 180.0
    test 603 distanceTo/coincident (1): 0.0
    test 604 initialBearingTo/coincident (1): 0.0
    test 605 finalBearingTo/coincident (1): 0.0
    test 606 destination/coincident (1): 50.06632°N, 005.71475°W
    test 607 distanceTo/anti-meridian (4): 10825924.1
    test 608 distanceTo/quadrants (5): 4015703.02
    test 609 distanceTo/quadrants (5): 4015703.02
    test 610 distanceTo/quadrants (5): 4015703.02
    test 611 distanceTo/quadrants (5): 4015703.02
    test 612 distanceTo/quadrants (5): 4015703.02
    test 613 distanceTo/quadrants (5): 4015703.02
    test 614 distanceTo/quadrants (5): 4015703.02
    test 615 distanceTo/quadrants (5): 4015703.02
    test 616 distanceTo/quadrants (5): 4015703.02
    test 617 distanceTo/quadrants (5): 4015703.02
    test 618 distanceTo/quadrants (5): 4015703.02
    test 619 distanceTo/quadrants (5): 4015703.02
    test 620 distanceTo/quadrants (5): 4015703.02
    test 621 distanceTo/quadrants (5): 4015703.02
    test 622 distanceTo/quadrants (5): 4015703.02
    test 623 distanceTo/quadrants (5): 4015703.02

    testVincenty(pygeodesy.ellipsoidalVincenty, 21.06.27, datum='NAD83')
    test 624 distanceTo: 866455.43292
    test 625 convertDatum: OSGB36
    test 626 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 627 isEllipsoidal: True
    test 628 isSpherical: False
    test 629 epsilon: 1e-12
    test 630 iterations: 100
    test 631 copy: True
    test 632 isEllipsoidal: True
    test 633 isSpherical: False
    test 634 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 635 epsilon: 2.220446049250e-16
    test 636 iterations: 200
    test 637 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 21.06.27, datum='NAD83')
    test 638 coincident: 0.0
    test 639 coincident: 0.0, 0.0, 0.0
    test 640 destination: 37.6528°S, 143.9265°E
    test 641 destination: True
    test 642 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 643 destination2: True
    test 644 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 645 distanceTo: 969954.166
    test 646 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 647 distanceTo2: 972708.16174, 11.22502
    test 648 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 649 destination: 58.64402°N, 003.07009°W
    test 650 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 651 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 652 distanceTo: 404607.806
    test 653 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 654 distanceTo2: 402574.597287, 157.726344
    test 655 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 656 destination: 48.857°N, 002.351°E
    test 657 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 658 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 659 distanceTo: 54973.295
    test 660 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 661 distanceTo2: 54903.41209, 232.9209
    test 662 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 663 destination: 37.6528°N, 143.9265°E
    test 664 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 665 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 666 distanceToMP: 298396.057
    test 667 distanceToSM: 185.414
    test 668 distanceToMP: 111319.491
    test 669 distanceToMP: 110574.389
    test 670 distanceToKW: 222638.982
    test 671 distanceToKW: 111319.491
    test 672 distanceTo3: 54972.271
    test 673 distanceTo3: 306°52′05.37″
    test 674 distanceTo3: 307°10′25.07″
    test 675 distanceTo2: 54902.390
    test 676 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 21.06.27, datum='NAD83')
    test 677 distanceTo/antipodal (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°30′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 678 distanceTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 679 initialBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 680 finalBearingTo/VincentyError (100): no convergence: LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 681 distanceTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 682 initialBearingTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 683 distanceTo/coincident (5): 111319.491
    test 684 distanceTo/meridional (1): 10001965.729
    test 685 initialBearingTo/meridional (1): 180.0
    test 686 distanceTo/coincident (1): 0.0
    test 687 initialBearingTo/coincident (1): 0.0
    test 688 finalBearingTo/coincident (1): 0.0
    test 689 destination/coincident (1): 50.06632°N, 005.71475°W
    test 690 distanceTo/anti-meridian (4): 10825924.1
    test 691 distanceTo/quadrants (5): 4015703.02
    test 692 distanceTo/quadrants (5): 4015703.02
    test 693 distanceTo/quadrants (5): 4015703.02
    test 694 distanceTo/quadrants (5): 4015703.02
    test 695 distanceTo/quadrants (5): 4015703.02
    test 696 distanceTo/quadrants (5): 4015703.02
    test 697 distanceTo/quadrants (5): 4015703.02
    test 698 distanceTo/quadrants (5): 4015703.02
    test 699 distanceTo/quadrants (5): 4015703.02
    test 700 distanceTo/quadrants (5): 4015703.02
    test 701 distanceTo/quadrants (5): 4015703.02
    test 702 distanceTo/quadrants (5): 4015703.02
    test 703 distanceTo/quadrants (5): 4015703.02
    test 704 distanceTo/quadrants (5): 4015703.02
    test 705 distanceTo/quadrants (5): 4015703.02
    test 706 distanceTo/quadrants (5): 4015703.02

    testEllipsoidal(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 707 isEllipsoidal: True
    test 708 isSpherical: False
    test 709 isEllipsoidal: True
    test 710 isSpherical: False
    test 711 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 712 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 713 convertDatum: 51.4778°N, 000.0016°W
    test 714 parse: 51.477284°N, 000.00002°E, -45.91m
    test 715 reframe: None
    test 716 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 717 toEcef: 3980581.21, -111.159, 4966824.522
    test 718 toEtm: 30 N 916396 5720041
    test 719 toLcc: 5639901 4612638
    test 720 toOsgr: TQ 38876 77320
    test 721 toUtmUps: 30 N 708207 5707224
    test 722 toUtm: 30 N 708207 5707224
    test 723 toWm: -178.111 6672799.209
    test 724 elevation2: None
    test 725 geoidHeight2: None
    test 726 toUtmUps: 30 N 708207 5707224
    test 727 toUtmUps: 30 N 708207 5707224
    test 728 toUtm: 30 N 708207 5707224
    test 729 toUtm: 30 N 708207 5707224
    test 730 toUtmUps: 00 N 2000000 1333272
    test 731 toUtmUps: 00 N 2000000 1333272
    test 732 toUps: 00 N 2000000 1333272
    test 733 toUps: 00 N 2000000 1333272
    test 734 toUps: 00 N 2000000 1555732
    test 735 toUtm: 31 N 459200 9217519
    test 736 nearestOn: 32.81°N, 031.42°E
    test 737 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 738 dop: 51.998889°N, 004.373333°E, +134.64m
    test 739 distance: 3802238.50499  FAILED, KNOWN, expected 3802238.504989

    testLatLon(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 740 isEllipsoidal: True
    test 741 isSpherical: False
    test 742 lat/lonDMS: 52.20472°N, 000.14056°E
    test 743 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 744 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 745 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 746 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 747 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 748 isequalTo: True
    test 749 isequalTo: True
    test 750 latlon2: 52.20472, 0.14056
    test 751 latlon2: 52.2047, 0.1406
    test 752 latlon2: 52.205, 0.141
    test 753 latlon2: 52.2, 0.14
    test 754 latlon2: 52.2, 0.1
    test 755 latlon2: 52.0, 0.0
    test 756 chordTo: 12029263.15
    test 757 chordTo: 12029049.69
    test 758 isequalTo: False
    test 759 antipode1: 52.205°S, 179.881°W
    test 760 antipode2: True
    test 761 antipode3: 52.205°N, 000.119°E
    test 762 antipode4: True
    test 763 antipode5: 52.205°N, 000.119°E
    test 764 initialBearingTo: 156.1106
    test 765 initialBearingTo: 65.9335
    test 766 initialBearingTo: 0.0
    test 767 initialBearingTo: 180.0
    test 768 finalBearingTo: 157.8345
    test 769 finalBearingTo: 93.9034
    test 770 bearingTo2: 156.1106, 157.8345
    test 771 ispolar: True
    test 772 copy: True
    test 773 __eq__: True
    test 774 __ne__: False
    test 775 equirectangularTo: 404329.56
    test 776 distanceTo: 404607.805988
    test 777 distanceTo: 404607.805988
    test 778 distanceTo: 3981601
    test 779 antipodal: False
    test 780 distanceTo dateline: 19959679.267
    test 781 distanceTo unrolled: 19959679.267
    test 782 antipodal: False
    test 783 distanceTo dateline: 9513998
    test 784 distanceTo unrolled: 9513998
    test 785 distanceTo: 18012714.66
    test 786 distanceTo: 20003931.46
    test 787 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 788 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 789 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 790 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 791 intermediateTo: 51.372275°N, 000.707253°E
    test 792 intermediateTo: True
    test 793 intermediateTo: 404607.806
    test 794 intermediateTo+5: 35.139582°N, 008.994368°E
    test 795 intermediateTo+5: 5.000
    test 796 intermediateTo-4: 64.894124°N, 013.705689°W
    test 797 intermediateTo-4: 4.000
    test 798 intermediateTo-h: 125.000
    test 799 destination: 51.513526°N, 000.098038°W
    test 800 destination: 51°30′49″N, 000°05′53″W
    test 801 destination: 33°57′N, 118°24′W
    test 802 destination: 33.950367°N, 118.399012°W
    test 803 destination: 0.592546N, 2.066453W
    test 804 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 805 chordTo: 125203.963
    test 806 cosineAndoyerLambertTo: 125205.962
    test 807 cosineAndoyerLambertTo: 125205.962
    test 808 cosineForsyheAndoyerLambertTo: 125205.965
    test 809 cosineForsyheAndoyerLambertTo: 125205.965
    test 810 cosineLawTo: 124801.098
    test 811 cosineLawTo: 124801.098
    test 812 equirectangularTo: 124804.754
    test 813 equirectangularTo: 124804.754
    test 814 euclideanTo: 130015.089
    test 815 euclideanTo: 130015.089
    test 816 flatLocalTo: 125209.633
    test 817 flatLocalTo: 125209.633
    test 818 flatPolarTo: 133663.257
    test 819 flatPolarTo: 133663.257
    test 820 haversineTo: 124801.098
    test 821 haversineTo: 124801.098
    test 822 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 823 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 824 thomasTo: 125206.188
    test 825 thomasTo: 125206.188
    test 826 vincentysTo: 124801.098
    test 827 vincentysTo: 124801.098
    test 828 isclockwise: False
    test 829 isclockwise*: False
    test 830 isclockwise: True
    test 831 isclockwise*: True
    test 832 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 833 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 834 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 835 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 836 isconvex: False
    test 837 isconvex*: False
    test 838 isconvex: True
    test 839 isconvex*: True
    test 840 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 841 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 842 isenclosedBy1: True
    test 843 isenclosedBy1*: True
    test 844 isenclosedBy2: False
    test 845 isenclosedBy2*: False
    test 846 isenclosedBy3: False
    test 847 isenclosedBy3*: False
    test 848 isenclosedBy4: False
    test 849 isenclosedBy4*: False
    test 850 isenclosedBy5: False
    test 851 isenclosedBy5*: False
    test 852 isenclosedBy6: True
    test 853 isenclosedBy6*: True
    test 854 isenclosedBy7: True
    test 855 isenclosedBy7*: True
    test 856 initialBearingTo: 102.392291
    test 857 compassAngleTo: 100.017
    test 858 compassAngleTo: 105.599
    test 859 initialBearingTo: 288.676039
    test 860 compassAngleTo: 280.017
    test 861 compassAngleTo: 285.599
    test 862 equirectangularTo: 592.185
    test 863 distanceTo: 593.571
    test 864 bearingTo: 0.0
    test 865 compassAngleTo: 0.0
    test 866 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 867 compassAngleTo: 45.0
    test 868 bearingTo: 90.0
    test 869 compassAngleTo: 90.0
    test 870 bearingTo: 180.0
    test 871 compassAngleTo: 180.0
    test 872 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 873 compassAngleTo: 225.0
    test 874 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 875 compassAngleTo: 315.0
    test 876 bearingTo: 270.0
    test 877 compassAngleTo: 270.0
    test 878 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 879 compassAngleTo: 359.4
    test 880 latlon2: (53.0, 1.0)
    test 881 philam2: (0.93, 0.02)
    test 882 bearingTo: 31
    test 883 compassAngleTo: 31
    test 884 compassAngleTo: 45
    test 885 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 886 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 887 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 888 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 889 isequalTo: <type 'bool'>
    test 890 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 891 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 892 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 893 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 894 compassAngleTo: <type 'float'>
    test 895 cosineLawTo: <type 'float'>
    test 896 euclideanTo: <type 'float'>
    test 897 flatLocalTo: <type 'float'>
    test 898 flatPolarTo: <type 'float'>
    test 899 haversineTo: <type 'float'>
    test 900 hubenyTo: <type 'float'>
    test 901 vincentysTo: <type 'float'>
    test 902 toNvector: (0.615661, 0.0, 0.788011)
    test 903 toVector: (0.615661, 0.0, 0.788011)
    test 904 toVector3d: (0.61566, 0.0, 0.78801)
    test 905 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 906 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.669./test/testEllipsoidal.py:143: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  c = Cleveland_OH.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:143: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  c = Cleveland_OH.convertDatum(Datums.OSGB36)
33643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 907 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 908 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 909 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 3
    test 910 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 911 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 912 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 913 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 914 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 915 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 916 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 917 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min- is .maxPoint: True
    test 918 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 1
    test 919 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 920 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 921 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 922 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 923 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 924 circum3.radius: 57792.067
    test 925 circum3.center: 43.053532°N, 002.943255°E, -261.66m
    test 926 circum3.deltas: (0.0, 0.0, 11.383)
    test 927 circum3.dist1: 57792.858351
    test 928 circum3.dist2: 57792.859237
    test 929 circum3.dist3: 57792.859062
    test 930 circum3.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 931 circum3.Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    testNOAA(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 932 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 933 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 934 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 935 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 936 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.43″E), 0, 0)
    test 937 (-1,  3): (LatLon(01°34′52.51″N, 006°00′51.85″E), -1, -2)
    test 938 (65, 32): (LatLon(56°58′26.57″N, 032°00′00.0″E), 1, 0)
    test 939 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 940 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)

    testIntersections2(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 941 EquidistantGeodSolve: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 942 EquidistantGeodSolve: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 943 EquidistantGeodSolve: 00.0°S, 035.3478°W, 00.0°S, 035.3478°E  FAILED, KNOWN, expected 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 944 EquidistantGeodSolve: 1.63715 (% of radius)
    test 945 EquidistantGeodSolve: 22.657°N, 000.0°W, 22.657°S, 000.0°W  FAILED, KNOWN, expected 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 946 EquidistantGeodSolve: 1.30663 (% of radius)
    test 947 EquidistantGeodSolve: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 948 EquidistantGeodSolve: 1.31396 (% of radius)
    test 949 EquidistantGeodSolve: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 950 EquidistantGeodSolve: 1.83268 (% of radius)
    test 951 EquidistantGeodSolve 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 952 EquidistantGeodSolve 5: 2.30328e-15 (% of radius)
    test 953 EquidistantGeodSolve 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 954 EquidistantGeodSolve 10: 1.25634e-15 (% of radius)
    test 955 EquidistantGeodSolve 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 956 EquidistantGeodSolve 15: 4.46697e-15 (% of radius)
    test 957 EquidistantGeodSolve 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 958 EquidistantGeodSolve 20: 6.28168e-16 (% of radius)
    test 959 EquidistantGeodSolve 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 960 EquidistantGeodSolve 25: 1.00507e-15 (% of radius)
    test 961 EquidistantGeodSolve 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 962 EquidistantGeodSolve 30: 1.11674e-15 (% of radius)
    test 963 EquidistantGeodSolve 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 964 EquidistantGeodSolve 35: 4.78604e-16 (% of radius)
    test 965 EquidistantGeodSolve 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 966 EquidistantGeodSolve 40: 1.8845e-15 (% of radius)
    test 967 EquidistantGeodSolve 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 968 EquidistantGeodSolve 45: 3.72248e-16 (% of radius)
    test 969 EquidistantGeodSolve 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 970 EquidistantGeodSolve 50: 5.02534e-16 (% of radius)
    test 971 EquidistantGeodSolve: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 972 EquidistantGeodSolve: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 973 EquidistantGeodSolve: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 974 EquidistantGeodSolve: 38.553178°S, 014.580048°W Random +/- 45
    test 975 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 10.985378°N, 029.161148°W  d 1.1e-09 meter (iteration 3)
    test 976 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 60.357798°S, 040.182748°E  d 3e-09 meter (iteration 3)
    test 977 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 14.002401°N, 031.581261°E  d 2.5e-09 meter (iteration 3)
    test 978 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 46.7945°N, 006.802029°E  d 3.2e-09 meter (iteration 3)
    test 979 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 35.588305°N, 044.352137°E  d 3.8e-09 meter (iteration 3)
    test 980 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 42.704438°S, 084.165052°E  d 1.33e-08 meter (iteration 3)
    test 981 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 10.881491°N, 000.505575°W  d 3.4e-09 meter (iteration 3)
    test 982 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 12.494091°N, 008.381245°W  d 6.7e-09 meter (iteration 3)
    test 983 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 46.344488°N, 044.858975°E  d 4.9e-09 meter (iteration 3)
    test 984 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 10.986908°N, 034.550059°E  d 1.74e-08 meter (iteration 3)
    test 985 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 45.177782°S, 039.091721°W  d 7.1e-09 meter (iteration 3)
    test 986 EquidistantGeodSolve: 38.553178°S, 014.580048°W, 05.418122°S, 072.227512°E  d 1.4e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalGeodSolve, 21.06.27, datum='WGS84')
    test 987 distanceTo: 866455.4329
    test 988 coincident: 0.0
    test 989 convertDatum: OSGB36
    test 990 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 991 isEllipsoidal: True
    test 992 copy: True
    test 993 isEllipsoidal: True
    test 994 isSpherical: False
    test 995 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalGeodSolve, 21.06.27, datum='WGS84')
    test 996 coincident: 0.0
    test 997 coincident: 0.0, 0.0, 0.0
    test 998 destination: 37.6528°S, 143.9265°E
    test 999 destination: True
    test 1000 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1001 destination2: True
    test 1002 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1003 distanceTo: 969954.166
    test 1004 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1005 distanceTo2: 972708.16174, 11.22502
    test 1006 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1007 destination: 58.64402°N, 003.07009°W
    test 1008 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1009 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1010 distanceTo: 404607.806
    test 1011 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1012 distanceTo2: 402574.597287, 157.726344
    test 1013 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1014 destination: 48.857°N, 002.351°E
    test 1015 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1016 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1017 distanceTo: 54973.295
    test 1018 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1019 distanceTo2: 54903.41209, 232.9209
    test 1020 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1021 destination: 37.6528°N, 143.9265°E
    test 1022 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1023 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1024 distanceToMP: 298396.057
    test 1025 distanceToSM: 185.414
    test 1026 distanceToMP: 111319.491
    test 1027 distanceToMP: 110574.389
    test 1028 distanceToKW: 222638.982
    test 1029 distanceToKW: 111319.491
    test 1030 distanceTo3: 54972.271
    test 1031 distanceTo3: 306°52′05.37″
    test 1032 distanceTo3: 307°10′25.07″
    test 1033 distanceTo2: 54902.390
    test 1034 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalGeodSolve, 21.06.27, datum='WGS84')
    test 1035 distanceTo/antipodal (None): 19936288.579
    test 1036 distanceTo/VincentyError (None): 19944127.421
    test 1037 initialBearingTo/VincentyError (None): 15.556883
    test 1038 finalBearingTo/VincentyError (None): 164.442514
    test 1039 distanceTo/equatorial (None): 20003931.46
    test 1040 initialBearingTo/equatorial (None): 0.0
    test 1041 distanceTo/coincident (None): 111319.491
    test 1042 distanceTo/meridional (None): 10001965.729
    test 1043 initialBearingTo/meridional (None): 180.0
    test 1044 distanceTo/coincident (None): 0.0
    test 1045 initialBearingTo/coincident (None): 180.0
    test 1046 finalBearingTo/coincident (None): 180.0
    test 1047 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1048 distanceTo/anti-meridian (None): 10825924.1
    test 1049 distanceTo/quadrants (None): 4015703.02
    test 1050 distanceTo/quadrants (None): 4015703.02
    test 1051 distanceTo/quadrants (None): 4015703.02
    test 1052 distanceTo/quadrants (None): 4015703.02
    test 1053 distanceTo/quadrants (None): 4015703.02
    test 1054 distanceTo/quadrants (None): 4015703.02
    test 1055 distanceTo/quadrants (None): 4015703.02
    test 1056 distanceTo/quadrants (None): 4015703.02
    test 1057 distanceTo/quadrants (None): 4015703.02
    test 1058 distanceTo/quadrants (None): 4015703.02
    test 1059 distanceTo/quadrants (None): 4015703.02
    test 1060 distanceTo/quadrants (None): 4015703.02
    test 1061 distanceTo/quadrants (None): 4015703.02
    test 1062 distanceTo/quadrants (None): 4015703.02
    test 1063 distanceTo/quadrants (None): 4015703.02
    test 1064 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalGeodSolve, 21.06.27, datum='NAD83')
    test 1065 distanceTo: 866455.4329
    test 1066 coincident: 0.0
    test 1067 convertDatum: OSGB36
    test 1068 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1069 isEllipsoidal: True
    test 1070 copy: True
    test 1071 isEllipsoidal: True
    test 1072 isSpherical: False
    test 1073 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalGeodSolve, 21.06.27, datum='NAD83')
    test 1074 coincident: 0.0
    test 1075 coincident: 0.0, 0.0, 0.0
    test 1076 destination: 37.6528°S, 143.9265°E
    test 1077 destination: True
    test 1078 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1079 destination2: True
    test 1080 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1081 distanceTo: 969954.166
    test 1082 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1083 distanceTo2: 972708.16174, 11.22502
    test 1084 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1085 destination: 58.64402°N, 003.07009°W
    test 1086 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1087 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1088 distanceTo: 404607.806
    test 1089 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1090 distanceTo2: 402574.597287, 157.726344
    test 1091 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1092 destination: 48.857°N, 002.351°E
    test 1093 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1094 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1095 distanceTo: 54973.295
    test 1096 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1097 distanceTo2: 54903.41209, 232.9209
    test 1098 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1099 destination: 37.6528°N, 143.9265°E
    test 1100 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1101 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1102 distanceToMP: 298396.057
    test 1103 distanceToSM: 185.414
    test 1104 distanceToMP: 111319.491
    test 1105 distanceToMP: 110574.389
    test 1106 distanceToKW: 222638.982
    test 1107 distanceToKW: 111319.491
    test 1108 distanceTo3: 54972.271
    test 1109 distanceTo3: 306°52′05.37″
    test 1110 distanceTo3: 307°10′25.07″
    test 1111 distanceTo2: 54902.390
    test 1112 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalGeodSolve, 21.06.27, datum='NAD83')
    test 1113 distanceTo/antipodal (None): 19936288.579
    test 1114 distanceTo/VincentyError (None): 19944127.421
    test 1115 initialBearingTo/VincentyError (None): 15.556883
    test 1116 finalBearingTo/VincentyError (None): 164.442514
    test 1117 distanceTo/equatorial (None): 20003931.46
    test 1118 initialBearingTo/equatorial (None): 0.0
    test 1119 distanceTo/coincident (None): 111319.491
    test 1120 distanceTo/meridional (None): 10001965.729
    test 1121 initialBearingTo/meridional (None): 180.0
    test 1122 distanceTo/coincident (None): 0.0
    test 1123 initialBearingTo/coincident (None): 180.0
    test 1124 finalBearingTo/coincident (None): 180.0
    test 1125 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1126 distanceTo/anti-meridian (None): 10825924.1
    test 1127 distanceTo/quadrants (None): 4015703.02
    test 1128 distanceTo/quadrants (None): 4015703.02
    test 1129 distanceTo/quadrants (None): 4015703.02
    test 1130 distanceTo/quadrants (None): 4015703.02
    test 1131 distanceTo/quadrants (None): 4015703.02
    test 1132 distanceTo/quadrants (None): 4015703.02
    test 1133 distanceTo/quadrants (None): 4015703.02
    test 1134 distanceTo/quadrants (None): 4015703.02
    test 1135 distanceTo/quadrants (None): 4015703.02
    test 1136 distanceTo/quadrants (None): 4015703.02
    test 1137 distanceTo/quadrants (None): 4015703.02
    test 1138 distanceTo/quadrants (None): 4015703.02
    test 1139 distanceTo/quadrants (None): 4015703.02
    test 1140 distanceTo/quadrants (None): 4015703.02
    test 1141 di./test/testEllipsoidal.py:33: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  d = p.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:39: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  self.test('convertDatum', p.convertDatum(p.datum), p)  # i.e. p.copy()
stanceTo/quadrants (None): 4015703.02
    test 1142 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 1143 .lat1: -41.320
    test 1144 .lon1: 174.810
    test 1145 .azi1: 161.067669986160
    test 1146 .lat2: 40.960
    test 1147 .lon2: -5.500
    test 1148 .azi2: 18.825195123247
    test 1149 .s12: 19959679.267353821546
    test 1150 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1151 destination2: 40.96, -5.5, 18.825195123247
    test 1152 areaOf: 1.366270368e+13
    test 1153 perimeterOf: 1.683106789e+07
    test 1154 isclockwise: True
    test 1155 isclockwise: False

    testEllipsoidal(pygeodesy.ellipsoidalExact, 21.06.27)
    test 1156 isEllipsoidal: True
    test 1157 isSpherical: False
    test 1158 isEllipsoidal: True
    test 1159 isSpherical: False
    test 1160 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 1161 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 1162 convertDatum: 51.4778°N, 000.0016°W
    test 1163 parse: 51.477284°N, 000.00002°E, -45.91m
    test 1164 reframe: None
    test 1165 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 1166 toEcef: 3980581.21, -111.159, 4966824.522
    test 1167 toEtm: 30 N 916396 5720041
    test 1168 toLcc: 5639901 4612638
    test 1169 toOsgr: TQ 38876 77320
    test 1170 toUtmUps: 30 N 708207 5707224
    test 1171 toUtm: 30 N 708207 5707224
    test 1172 toWm: -178.111 6672799.209
    test 1173 elevation2: None
    test 1174 geoidHeight2: None
    test 1175 toUtmUps: 30 N 708207 5707224
    test 1176 toUtmUps: 30 N 708207 5707224
    test 1177 toUtm: 30 N 708207 5707224
    test 1178 toUtm: 30 N 708207 5707224
    test 1179 toUtmUps: 00 N 2000000 1333272
    test 1180 toUtmUps: 00 N 2000000 1333272
    test 1181 toUps: 00 N 2000000 1333272
    test 1182 toUps: 00 N 2000000 1333272
    test 1183 toUps: 00 N 2000000 1555732
    test 1184 toUtm: 31 N 459200 9217519
    test 1185 nearestOn: 32.81°N, 031.42°E
    test 1186 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 1187 dop: 51.998889°N, 004.373333°E, +134.64m
    test 1188 distance: 3802238.50499  FAILED, KNOWN, expected 3802238.504989

    testLatLon(pygeodesy.ellipsoidalExact, 21.06.27)
    test 1189 isEllipsoidal: True
    test 1190 isSpherical: False
    test 1191 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1192 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1193 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1194 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1195 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1196 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1197 isequalTo: True
    test 1198 isequalTo: True
    test 1199 latlon2: 52.20472, 0.14056
    test 1200 latlon2: 52.2047, 0.1406
    test 1201 latlon2: 52.205, 0.141
    test 1202 latlon2: 52.2, 0.14
    test 1203 latlon2: 52.2, 0.1
    test 1204 latlon2: 52.0, 0.0
    test 1205 chordTo: 12029263.15
    test 1206 chordTo: 12029049.69
    test 1207 isequalTo: False
    test 1208 antipode1: 52.205°S, 179.881°W
    test 1209 antipode2: True
    test 1210 antipode3: 52.205°N, 000.119°E
    test 1211 antipode4: True
    test 1212 antipode5: 52.205°N, 000.119°E
    test 1213 initialBearingTo: 156.1106
    test 1214 initialBearingTo: 65.9335
    test 1215 initialBearingTo: 0.0
    test 1216 initialBearingTo: 180.0
    test 1217 finalBearingTo: 157.8345
    test 1218 finalBearingTo: 93.9034
    test 1219 bearingTo2: 156.1106, 157.8345
    test 1220 ispolar: True
    test 1221 copy: True
    test 1222 __eq__: True
    test 1223 __ne__: False
    test 1224 equirectangularTo: 404329.56
    test 1225 distanceTo: 404607.805988
    test 1226 distanceTo: 404607.805988
    test 1227 distanceTo: 3981601
    test 1228 antipodal: False
    test 1229 distanceTo dateline: 19959679.267
    test 1230 distanceTo unrolled: 19959679.267
    test 1231 antipodal: False
    test 1232 distanceTo dateline: 9513998
    test 1233 distanceTo unrolled: 9513998
    test 1234 distanceTo: 18003740.39
    test 1235 distanceTo: 0.00  FAILED, KNOWN, expected 20003931.46
    test 1236 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1237 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1238 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1239 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1240 intermediateTo: 51.372275°N, 000.707253°E
    test 1241 intermediateTo: True
    test 1242 intermediateTo: 404607.806
    test 1243 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1244 intermediateTo+5: 5.000
    test 1245 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1246 intermediateTo-4: 4.000
    test 1247 intermediateTo-h: 125.000
    test 1248 destination: 51.513526°N, 000.098038°W
    test 1249 destination: 51°30′49″N, 000°05′53″W
    test 1250 destination: 33°57′N, 118°24′W
    test 1251 destination: 33.950367°N, 118.399012°W
    test 1252 destination: 0.592546N, 2.066453W
    test 1253 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1254 chordTo: 125203.963
    test 1255 cosineAndoyerLambertTo: 125205.962
    test 1256 cosineAndoyerLambertTo: 125205.962
    test 1257 cosineForsyheAndoyerLambertTo: 125205.965
    test 1258 cosineForsyheAndoyerLambertTo: 125205.965
    test 1259 cosineLawTo: 124801.098
    test 1260 cosineLawTo: 124801.098
    test 1261 equirectangularTo: 124804.754
    test 1262 equirectangularTo: 124804.754
    test 1263 euclideanTo: 130015.089
    test 1264 euclideanTo: 130015.089
    test 1265 flatLocalTo: 125209.633
    test 1266 flatLocalTo: 125209.633
    test 1267 flatPolarTo: 133663.257
    test 1268 flatPolarTo: 133663.257
    test 1269 haversineTo: 124801.098
    test 1270 haversineTo: 124801.098
    test 1271 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1272 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1273 thomasTo: 125206.188
    test 1274 thomasTo: 125206.188
    test 1275 vincentysTo: 124801.098
    test 1276 vincentysTo: 124801.098
    test 1277 isclockwise: False
    test 1278 isclockwise*: False
    test 1279 isclockwise: True
    test 1280 isclockwise*: True
    test 1281 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1282 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1283 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1284 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1285 isconvex: False
    test 1286 isconvex*: False
    test 1287 isconvex: True
    test 1288 isconvex*: True
    test 1289 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1290 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1291 isenclosedBy1: True
    test 1292 isenclosedBy1*: True
    test 1293 isenclosedBy2: False
    test 1294 isenclosedBy2*: False
    test 1295 isenclosedBy3: False
    test 1296 isenclosedBy3*: False
    test 1297 isenclosedBy4: False
    test 1298 isenclosedBy4*: False
    test 1299 isenclosedBy5: False
    test 1300 isenclosedBy5*: False
    test 1301 isenclosedBy6: True
    test 1302 isenclosedBy6*: True
    test 1303 isenclosedBy7: True
    test 1304 isenclosedBy7*: True
    test 1305 initialBearingTo: 102.392291
    test 1306 compassAngleTo: 100.017
    test 1307 compassAngleTo: 105.599
    test 1308 initialBearingTo: 288.676039
    test 1309 compassAngleTo: 280.017
    test 1310 compassAngleTo: 285.599
    test 1311 equirectangularTo: 592.185
    test 1312 distanceTo: 593.571
    test 1313 bearingTo: 0.0
    test 1314 compassAngleTo: 0.0
    test 1315 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1316 compassAngleTo: 45.0
    test 1317 bearingTo: 90.0
    test 1318 compassAngleTo: 90.0
    test 1319 bearingTo: 180.0
    test 1320 compassAngleTo: 180.0
    test 1321 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1322 compassAngleTo: 225.0
    test 1323 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1324 compassAngleTo: 315.0
    test 1325 bearingTo: 270.0
    test 1326 compassAngleTo: 270.0
    test 1327 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 1328 compassAngleTo: 359.4
    test 1329 latlon2: (53.0, 1.0)
    test 1330 philam2: (0.93, 0.02)
    test 1331 bearingTo: 31
    test 1332 compassAngleTo: 31
    test 1333 compassAngleTo: 45
    test 1334 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1335 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1336 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1337 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1338 isequalTo: <type 'bool'>
    test 1339 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1340 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1341 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1342 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1343 compassAngleTo: <type 'float'>
    test 1344 cosineLawTo: <type 'float'>
    test 1345 euclideanTo: <type 'float'>
    test 1346 flatLocalTo: <type 'float'>
    test 1347 flatPolarTo: <type 'float'>
    test 1348 haversineTo: <type 'float'>
    test 1349 hubenyTo: <type 'float'>
    test 1350 vincentysTo: <type 'float'>
    test 1351 toNvector: (0.615661, 0.0, 0.788011)
    test 1352 toVector: (0.615661, 0.0, 0.788011)
    test 1353 toVector3d: (0.61566, 0.0, 0.78801)
    test 1354 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 1355 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 1356 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 1357 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 1358 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1359 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 1360 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 1361 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 1362 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1363 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 1364 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 1365 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 1366 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1367 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1368 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 1369 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 1370 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 1371 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 1372 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1373 circum3.radius: 57792.067
    test 1374 circum3.center: 43.053532°N, 002.943255°E, -261.66m
    test 1375 circum3.deltas: (0.0, 0.0, 11.383)
    test 1376 circum3.dist1: 57792.858351
    test 1377 circum3.dist2: 57792.859237
    test 1378 circum3.dist3: 57792.859062
    test 1379 circum3.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1380 circum3.Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    testNOAA(pygeodesy.ellipsoidalExact, 21.06.27)
    test 1381 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1382 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1383 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1384 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalExact, 21.06.27)
    test 1385 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.43″E), 0, 0)
    test 1386 (-1,  3): (LatLon(01°34′52.51″N, 006°00′51.85″E), -1, -2)
    test 1387 (65, 32): (LatLon(56°58′26.57″N, 032°00′00.0″E), 1, 0)
    test 1388 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 1389 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)

    testIntersections2(pygeodesy.ellipsoidalExact, 21.06.27)
    test 1390 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1391 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1392 EquidistantExact: 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 1393 EquidistantExact: 1.63715 (% of radius)
    test 1394 EquidistantExact: 22.657°N, 000.0°W, 22.657°S, 000.0°W  FAILED, KNOWN, expected 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 1395 EquidistantExact: 1.30663 (% of radius)
    test 1396 EquidistantExact: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1397 EquidistantExact: 1.31396 (% of radius)
    test 1398 EquidistantExact: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1399 EquidistantExact: 1.83268 (% of radius)
    test 1400 EquidistantExact 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1401 EquidistantExact 5: 3.14084e-15 (% of radius)
    test 1402 EquidistantExact 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1403 EquidistantExact 10: 5.02534e-15 (% of radius)
    test 1404 EquidistantExact 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 1405 EquidistantExact 15: 3.21064e-15 (% of radius)
    test 1406 EquidistantExact 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 1407 EquidistantExact 20: 6.28168e-16 (% of radius)
    test 1408 EquidistantExact 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 1409 EquidistantExact 25: 8.37557e-16 (% of radius)
    test 1410 EquidistantExact 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 1411 EquidistantExact 30: 8.37557e-16 (% of radius)
    test 1412 EquidistantExact 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 1413 EquidistantExact 35: 5.98255e-16 (% of radius)
    test 1414 EquidistantExact 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 1415 EquidistantExact 40: 2.72206e-15 (% of radius)
    test 1416 EquidistantExact 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 1417 EquidistantExact 45: 7.44495e-16 (% of radius)
    test 1418 EquidistantExact 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 1419 EquidistantExact 50: 3.35023e-16 (% of radius)
    test 1420 EquidistantExact: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 1421 EquidistantExact: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (0.001): invalid  FAILED, KNOWN, expected 2-tuple
    test 1422 EquidistantExact: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (0.00./test/testEllipsoidal.py:143: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  c = Cleveland_OH.convertDatum(Datums.OSGB36)
./test/testEllipsoidal.py:143: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  c = Cleveland_OH.convertDatum(Datums.OSGB36)
1): invalid  FAILED, KNOWN, expected 2-tuple
    test 1423 EquidistantExact: 19.228712°S, 028.899422°W Random +/- 45
    test 1424 EquidistantExact: 19.228712°S, 028.899422°W, 00.338017°N, 042.542761°W  d 6.6105e-09 meter (iteration 3)
    test 1425 EquidistantExact: 19.228712°S, 028.899422°W, 22.191406°S, 042.882031°W  d 2.24135e-09 meter (iteration 3)
    test 1426 EquidistantExact: 19.228712°S, 028.899422°W, 40.09076°N, 056.593935°E  d 1.41249e-09 meter (iteration 3)
    test 1427 EquidistantExact: 19.228712°S, 028.899422°W, 59.074756°S, 000.746961°W  d 7.86066e-09 meter (iteration 3)
    test 1428 EquidistantExact: 19.228712°S, 028.899422°W, 53.560551°N, 068.188843°E  d 2.05584e-09 meter (iteration 3)
    test 1429 EquidistantExact: 19.228712°S, 028.899422°W, 26.881762°S, 102.106959°E  d 1.87322e-08 meter (iteration 3)
    test 1430 EquidistantExact: 19.228712°S, 028.899422°W, 71.922146°N, 174.478328°E  d 2.82121e-09 meter (iteration 3)
    test 1431 EquidistantExact: 19.228712°S, 028.899422°W, 10.563382°N, 058.058155°E  d 7.76498e-09 meter (iteration 3)
    test 1432 EquidistantExact: 19.228712°S, 028.899422°W, 15.628096°S, 009.012464°E  d 1.83145e-09 meter (iteration 3)
    test 1433 EquidistantExact: 19.228712°S, 028.899422°W, 17.395638°N, 130.986512°E  d 9.29247e-09 meter (iteration 3)
    test 1434 EquidistantExact: 19.228712°S, 028.899422°W, 16.032284°S, 024.889978°E  d 1.05877e-09 meter (iteration 3)
    test 1435 EquidistantExact: 19.228712°S, 028.899422°W, 29.510708°S, 017.71634°W  d 2.34145e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalExact, 21.06.27, datum='WGS84')
    test 1436 distanceTo: 866455.4329
    test 1437 coincident: 0.0
    test 1438 convertDatum: OSGB36
    test 1439 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1440 isEllipsoidal: True
    test 1441 copy: True
    test 1442 isEllipsoidal: True
    test 1443 isSpherical: False
    test 1444 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 21.06.27, datum='WGS84')
    test 1445 coincident: 0.0
    test 1446 coincident: 0.0, 0.0, 0.0
    test 1447 destination: 37.6528°S, 143.9265°E
    test 1448 destination: True
    test 1449 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1450 destination2: True
    test 1451 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1452 distanceTo: 969954.166
    test 1453 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1454 distanceTo2: 972708.16174, 11.22502
    test 1455 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1456 destination: 58.64402°N, 003.07009°W
    test 1457 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1458 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1459 distanceTo: 404607.806
    test 1460 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1461 distanceTo2: 402574.597287, 157.726344
    test 1462 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1463 destination: 48.857°N, 002.351°E
    test 1464 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1465 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1466 distanceTo: 54973.295
    test 1467 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1468 distanceTo2: 54903.41209, 232.9209
    test 1469 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1470 destination: 37.6528°N, 143.9265°E
    test 1471 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1472 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1473 distanceToMP: 298396.057
    test 1474 distanceToSM: 185.414
    test 1475 distanceToMP: 111319.491
    test 1476 distanceToMP: 110574.361
    test 1477 distanceToKW: 222638.982
    test 1478 distanceToKW: 111319.491
    test 1479 distanceTo3: 54972.271
    test 1480 distanceTo3: 306°52′05.37″
    test 1481 distanceTo3: 307°10′25.07″
    test 1482 distanceTo2: 54902.390
    test 1483 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 21.06.27, datum='WGS84')
    test 1484 distanceTo/antipodal (None): 19936288.579
    test 1485 distanceTo/VincentyError (None): 19944127.421
    test 1486 initialBearingTo/VincentyError (None): 15.556883
    test 1487 finalBearingTo/VincentyError (None): 164.442514
    test 1488 distanceTo/equatorial (None): 0.00  FAILED, KNOWN, expected 20003931.46
    test 1489 initialBearingTo/equatorial (None): 0.0
    test 1490 distanceTo/coincident (None): 111319.491
    test 1491 distanceTo/meridional (None): 9999551.606
    test 1492 initialBearingTo/meridional (None): 180.0
    test 1493 distanceTo/coincident (None): 0.0
    test 1494 initialBearingTo/coincident (None): 180.0
    test 1495 finalBearingTo/coincident (None): 180.0
    test 1496 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1497 distanceTo/anti-meridian (None): 10825924.1
    test 1498 distanceTo/quadrants (None): 4015703.02
    test 1499 distanceTo/quadrants (None): 4015703.02
    test 1500 distanceTo/quadrants (None): 4015703.02
    test 1501 distanceTo/quadrants (None): 4015703.02
    test 1502 distanceTo/quadrants (None): 4015703.02
    test 1503 distanceTo/quadrants (None): 4015703.02
    test 1504 distanceTo/quadrants (None): 4015703.02
    test 1505 distanceTo/quadrants (None): 4015703.02
    test 1506 distanceTo/quadrants (None): 4015703.02
    test 1507 distanceTo/quadrants (None): 4015703.02
    test 1508 distanceTo/quadrants (None): 4015703.02
    test 1509 distanceTo/quadrants (None): 4015703.02
    test 1510 distanceTo/quadrants (None): 4015703.02
    test 1511 distanceTo/quadrants (None): 4015703.02
    test 1512 distanceTo/quadrants (None): 4015703.02
    test 1513 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalExact, 21.06.27, datum='NAD83')
    test 1514 distanceTo: 866455.4329
    test 1515 coincident: 0.0
    test 1516 convertDatum: OSGB36
    test 1517 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1518 isEllipsoidal: True
    test 1519 copy: True
    test 1520 isEllipsoidal: True
    test 1521 isSpherical: False
    test 1522 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 21.06.27, datum='NAD83')
    test 1523 coincident: 0.0
    test 1524 coincident: 0.0, 0.0, 0.0
    test 1525 destination: 37.6528°S, 143.9265°E
    test 1526 destination: True
    test 1527 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1528 destination2: True
    test 1529 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1530 distanceTo: 969954.166
    test 1531 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1532 distanceTo2: 972708.16174, 11.22502
    test 1533 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1534 destination: 58.64402°N, 003.07009°W
    test 1535 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1536 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1537 distanceTo: 404607.806
    test 1538 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1539 distanceTo2: 402574.597287, 157.726344
    test 1540 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1541 destination: 48.857°N, 002.351°E
    test 1542 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1543 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1544 distanceTo: 54973.295
    test 1545 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1546 distanceTo2: 54903.41209, 232.9209
    test 1547 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1548 destination: 37.6528°N, 143.9265°E
    test 1549 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1550 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1551 distanceToMP: 298396.057
    test 1552 distanceToSM: 185.414
    test 1553 distanceToMP: 111319.491
    test 1554 distanceToMP: 110574.361
    test 1555 distanceToKW: 222638.982
    test 1556 distanceToKW: 111319.491
    test 1557 distanceTo3: 54972.271
    test 1558 distanceTo3: 306°52′05.37″
    test 1559 distanceTo3: 307°10′25.07″
    test 1560 distanceTo2: 54902.390
    test 1561 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 21.06.27, datum='NAD83')
    test 1562 distanceTo/antipodal (None): 19936288.579
    test 1563 distanceTo/VincentyError (None): 19944127.421
    test 1564 initialBearingTo/VincentyError (None): 15.556883
    test 1565 finalBearingTo/VincentyError (None): 164.442514
    test 1566 distanceTo/equatorial (None): 0.00  FAILED, KNOWN, expected 20003931.46
    test 1567 initialBearingTo/equatorial (None): 0.0
    test 1568 distanceTo/coincident (None): 111319.491
    test 1569 distanceTo/meridional (None): 9999551.606
    test 1570 initialBearingTo/meridional (None): 180.0
    test 1571 distanceTo/coincident (None): 0.0
    test 1572 initialBearingTo/coincident (None): 180.0
    test 1573 finalBearingTo/coincident (None): 180.0
    test 1574 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1575 distanceTo/anti-meridian (None): 10825924.1
    test 1576 distanceTo/quadrants (None): 4015703.02
    test 1577 distanceTo/quadrants (None): 4015703.02
    test 1578 distanceTo/quadrants (None): 4015703.02
    test 1579 distanceTo/quadrants (None): 4015703.02
    test 1580 distanceTo/quadrants (None): 4015703.02
    test 1581 distanceTo/quadrants (None): 4015703.02
    test 1582 distanceTo/quadrants (None): 4015703.02
    test 1583 distanceTo/quadrants (None): 4015703.02
    test 1584 distanceTo/quadrants (None): 4015703.02
    test 1585 distanceTo/quadrants (None): 4015703.02
    test 1586 distanceTo/quadrants (None): 4015703.02
    test 1587 distanceTo/quadrants (None): 4015703.02
    test 1588 distanceTo/quadrants (None): 4015703.02
    test 1589 distanceTo/quadrants (None): 4015703.02
    test 1590 distanceTo/quadrants (None): 4015703.02
    test 1591 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalExact, 21.06.27)
    test 1592 .lat1: -41.320
    test 1593 .lon1: 174.810
    test 1594 .azi1: 161.067669986160
    test 1595 .lat2: 40.960
    test 1596 .lon2: -5.500
    test 1597 .azi2: 18.825195123247
    test 1598 .s12: 19959679.267353817821  FAILED, KNOWN, expected 19959679.267353821546
    test 1599 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1600 destination2: 40.96, -5.5, 18.825195123247
    test 1601 areaOf: 1.366270368e+13
    test 1602 perimeterOf: 1.683089136e+07
    test 1603 isclockwise: True
    test 1604 isclockwise: False

    138 of 1604 testEllipsoidal.py tests (8.6%) FAILED, incl. 124 KNOWN plus 14 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 45.232 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testEllipsoidalGeodTest.py

    testing testEllipsoidalGeodTest.py 21.05.16 (module pygeodesy.ellipsoidalExact 21.06.27)
    test 1 line 1 lat: -48.164271
    test 2 line 1 lon: 5.762345
    test 3 line 1 fb: 175.334308
    test 4 line 1 lat2: -48.164270779098
    test 5 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 6 line 1 azi2: 175.334308316285
    test 7 line 2 lat: -23.186513
    test 8 line 2 lon: 68.567247
    test 9 line 2 fb: 154.287114
    test 10 line 2 lat2: -23.186512533703
    test 11 line 2 lon2: 68.567247430960
    test 12 line 2 azi2: 154.287114123872
    test 13 line 3 lat: 53.997072
    test 14 line 3 lon: 44.520619
    test 15 line 3 fb: 52.159487
    test 16 line 3 lat2: 53.997072295385
    test 17 line 3 lon2: 44.520619105668
    test 18 line 3 azi2: 52.159486739948
    test 19 line 4 lat: -49.416672
    test 20 line 4 lon: 166.828083
    test 21 line 4 fb: 22.033031
    test 22 line 4 lat2: -49.416672064706
    test 23 line 4 lon2: 166.828083210689
    test 24 line 4 azi2: 22.033030848249
    test 25 line 5 lat: -60.405136
    test 26 line 5 lon: 110.581140
    test 27 line 5 fb: 75.518296
    test 28 line 5 lat2: -60.405136414530
    test 29 line 5 lon2: 110.581139538777
    test 30 line 5 azi2: 75.518295964649
    test 31 line 6 lat: -11.212600
    test 32 line 6 lon: 144.177077
    test 33 line 6 fb: 133.027766
    test 34 line 6 lat2: -11.212600121556
    test 35 line 6 lon2: 144.177076511360
    test 36 line 6 azi2: 133.027766301029
    test 37 line 7 lat: -6.529067
    test 38 line 7 lon: 2.895924
    test 39 line 7 fb: 178.740350
    test 40 line 7 lat2: -6.529066987956
    test 41 line 7 lon2: 2.895923948125
    test 42 line 7 azi2: 178.740350145954
    test 43 line 8 lat: -8.855512
    test 44 line 8 lon: 112.749196
    test 45 line 8 fb: 119.512004
    test 46 line 8 lat2: -8.855512357257
    test 47 line 8 lon2: 112.749196494485
    test 48 line 8 azi2: 119.512003891282
    test 49 line 9 lat: 29.866967
    test 50 line 9 lon: 171.726893
    test 51 line 9 fb: 171.662245
    test 52 line 9 lat2: 29.866967483293
    test 53 line 9 lon2: 171.726892560963
    test 54 line 9 azi2: 171.662244609397
    test 55 line 10 lat: -29.238404
    test 56 line 10 lon: 133.459814
    test 57 line 10 fb: 69.814124
    test 58 line 10 lat2: -29.238404337998
    test 59 line 10 lon2: 133.459813533284
    test 60 line 10 azi2: 69.814124320813
    test 61 line 11 lat: 55.600487
    test 62 line 11 lon: 75.128743
    test 63 line 11 fb: 153.896689
    test 64 line 11 lat2: 55.600487151982  FAILED, KNOWN, expected 55.600487151983
    test 65 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 66 line 11 azi2: 153.896688535572
    test 67 line 12 lat: -22.858435
    test 68 line 12 lon: 67.207513
    test 69 line 12 fb: 142.939529
    test 70 line 12 lat2: -22.858434825399
    test 71 line 12 lon2: 67.207513019332
    test 72 line 12 azi2: 142.939529056687
    test 73 line 13 lat: -32.634475
    test 74 line 13 lon: 22.238523
    test 75 line 13 fb: 172.112993
    test 76 line 13 lat2: -32.634475461067
    test 77 line 13 lon2: 22.238523021935
    test 78 line 13 azi2: 172.112992582333
    test 79 line 14 lat: 62.224985
    test 80 line 14 lon: 47.119133
    test 81 line 14 fb: 54.318105
    test 82 line 14 lat2: 62.224984867045
    test 83 line 14 lon2: 47.119133304525
    test 84 line 14 azi2: 54.318105291965
    test 85 line 15 lat: 33.069613
    test 86 line 15 lon: 5.796996
    test 87 line 15 fb: 17.403845
    test 88 line 15 lat2: 33.069613195450
    test 89 line 15 lon2: 5.796995960186
    test 90 line 15 azi2: 17.403844642346
    test 91 line 16 lat: 53.760900
    test 92 line 16 lon: 119.204306
    test 93 line 16 fb: 141.069793
    test 94 line 16 lat2: 53.760899500985
    test 95 line 16 lon2: 119.204305898518
    test 96 line 16 azi2: 141.069793254983
    test 97 line 17 lat: -3.225632
    test 98 line 17 lon: 103.742354
    test 99 line 17 fb: 127.880328
    test 100 line 17 lat2: -3.225632004245
    test 101 line 17 lon2: 103.742354347526
    test 102 line 17 azi2: 127.880328388524
    test 103 line 18 lat: 47.108712
    test 104 line 18 lon: 99.934107
    test 105 line 18 fb: 104.103491
    test 106 line 18 lat2: 47.108712008353
    test 107 line 18 lon2: 99.934107358387
    test 108 line 18 azi2: 104.103491123038
    test 109 line 19 lat: 5.399363
    test 110 line 19 lon: 135.250064
    test 111 line 19 fb: 102.177018
    test 112 line 19 lat2: 5.399363208349
    test 113 line 19 lon2: 135.250063670790
    test 114 line 19 azi2: 102.177017677370
    test 115 line 20 lat: -58.669225
    test 116 line 20 lon: 54.875015
    test 117 line 20 fb: 131.345308
    test 118 line 20 lat2: -58.669224697403
    test 119 line 20 lon2: 54.875014559502
    test 120 line 20 azi2: 131.345308028428
    test 121 line 21 lat: 9.184229
    test 122 line 21 lon: 151.302637
    test 123 line 21 fb: 128.175105
    test 124 line 21 lat2: 9.184228666560
    test 125 line 21 lon2: 151.302636871911
    test 126 line 21 azi2: 128.175105446048
    test 127 line 22 lat: 53.467940
    test 128 line 22 lon: 67.724192
    test 129 line 22 fb: 78.863492
    test 130 line 22 lat2: 53.467939714247
    test 131 line 22 lon2: 67.724192258333
    test 132 line 22 azi2: 78.863492168727
    test 133 line 23 lat: 39.699456
    test 134 line 23 lon: 67.156325
    test 135 line 23 fb: 85.276830
    test 136 line 23 lat2: 39.699455912449
    test 137 line 23 lon2: 67.156324625647
    test 138 line 23 azi2: 85.276829539878
    test 139 line 24 lat: 70.942602
    test 140 line 24 lon: 17.379214
    test 141 line 24 fb: 21.869008
    test 142 line 24 lat2: 70.942602144324
    test 143 line 24 lon2: 17.379213644124
    test 144 line 24 azi2: 21.869008256312
    test 145 line 25 lat: 69.633349
    test 146 line 25 lon: 110.601933
    test 147 line 25 fb: 138.575193
    test 148 line 25 lat2: 69.633349004538
    test 149 line 25 lon2: 110.601933261211
    test 150 line 25 azi2: 138.575192608515  FAILED, KNOWN, expected 138.575192608514
    test 151 line 26 lat: 16.190815
    test 152 line 26 lon: 87.606993
    test 153 line 26 fb: 131.929410
    test 154 line 26 lat2: 16.190814826165
    test 155 line 26 lon2: 87.606993293114
    test 156 line 26 azi2: 131.929409507039
    test 157 line 27 lat: 54.774905
    test 158 line 27 lon: 52.952507
    test 159 line 27 fb: 85.904051
    test 160 line 27 lat2: 54.774904542264
    test 161 line 27 lon2: 52.952506835523
    test 162 line 27 azi2: 85.904050867676
    test 163 line 28 lat: -62.008569
    test 164 line 28 lon: 172.274877
    test 165 line 28 fb: 21.992601
    test 166 line 28 lat2: -62.008568677307
    test 167 line 28 lon2: 172.274876714260
    test 168 line 28 azi2: 21.992601380429
    test 169 line 29 lat: 27.303730
    test 170 line 29 lon: 159.184451
    test 171 line 29 fb: 150.697920
    test 172 line 29 lat2: 27.303729660018
    test 173 line 29 lon2: 159.184451093393
    test 174 line 29 azi2: 150.697920369703
    test 175 line 30 lat: 31.979897
    test 176 line 30 lon: 55.946759
    test 177 line 30 fb: 87.398293
    test 178 line 30 lat2: 31.979897342658
    test 179 line 30 lon2: 55.946758945497
    test 180 line 30 azi2: 87.398292964767
    test 181 line 31 lat: 49.991468
    test 182 line 31 lon: 133.962411
    test 183 line 31 fb: 142.016540
    test 184 line 31 lat2: 49.991467522545
    test 185 line 31 lon2: 133.962411191467
    test 186 line 31 azi2: 142.016540226251
    test 187 line 32 lat: 2.818559
    test 188 line 32 lon: 7.234774
    test 189 line 32 fb: 168.804029
    test 190 line 32 lat2: 2.818558842278
    test 191 line 32 lon2: 7.234774421859
    test 192 line 32 azi2: 168.804029404993
    test 193 line 33 lat: -38.118071
    test 194 line 33 lon: 93.395971
    test 195 line 33 fb: 117.017377
    test 196 line 33 lat2: -38.118070550305
    test 197 line 33 lon2: 93.395971367720
    test 198 line 33 azi2: 117.017376985228
    test 199 line 34 lat: 3.377824
    test 200 line 34 lon: 65.294746
    test 201 line 34 fb: 138.982544
    test 202 line 34 lat2: 3.377824468035
    test 203 line 34 lon2: 65.294745963255
    test 204 line 34 azi2: 138.982543784560
    test 205 line 35 lat: 4.631157
    test 206 line 35 lon: 84.335045
    test 207 line 35 fb: 132.120804
    test 208 line 35 lat2: 4.631157299024
    test 209 line 35 lon2: 84.335044694540
    test 210 line 35 azi2: 132.120804319474
    test 211 line 36 lat: 38.952215
    test 212 line 36 lon: 133.416463
    test 213 line 36 fb: 160.690586
    test 214 line 36 lat2: 38.952215219507
    test 215 line 36 lon2: 133.416463103113
    test 216 line 36 azi2: 160.690585690749
    test 217 line 37 lat: -39.013297
    test 218 line 37 lon: 160.302849
    test 219 line 37 fb: 115.363715
    test 220 line 37 lat2: -39.013296805131
    test 221 line 37 lon2: 160.302849365986
    test 222 line 37 azi2: 115.363714797610
    test 223 line 38 lat: -48.456093
    test 224 line 38 lon: 38.613822
    test 225 line 38 fb: 137.651668
    test 226 line 38 lat2: -48.456093143589
    test 227 line 38 lon2: 38.613821719886
    test 228 line 38 azi2: 137.651668464815
    test 229 line 39 lat: -13.861956
    test 230 line 39 lon: 74.250572
    test 231 line 39 fb: 143.968262
    test 232 line 39 lat2: -13.861956131520  FAILED, KNOWN, expected -13.861956131519
    test 233 line 39 lon2: 74.250571564776
    test 234 line 39 azi2: 143.968262419705
    test 235 line 40 lat: 25.289202
    test 236 line 40 lon: 47.063579
    test 237 line 40 fb: 78.672533
    test 238 line 40 lat2: 25.289201968371
    test 239 line 40 lon2: 47.063578519727
    test 240 line 40 azi2: 78.672532588106
    test 241 line 41 lat: 49.498121
    test 242 line 41 lon: 131.993365
    test 243 line 41 fb: 157.425605
    test 244 line 41 lat2: 49.498121110507
    test 245 line 41 lon2: 131.993365399320
    test 246 line 41 azi2: 157.425605424890
    test 247 line 42 lat: -2.104242
    test 248 line 42 lon: 56.532079
    test 249 line 42 fb: 129.406955
    test 250 line 42 lat2: -2.104241718494
    test 251 line 42 lon2: 56.532079408825
    test 252 line 42 azi2: 129.406954892035
    test 253 line 43 lat: -39.997315
    test 254 line 43 lon: 49.004259
    test 255 line 43 fb: 135.432995
    test 256 line 43 lat2: -39.997315471629
    test 257 line 43 lon2: 49.004258662721
    test 258 line 43 azi2: 135.432994751523
    test 259 line 44 lat: 9.333272
    test 260 line 44 lon: 98.670857
    test 261 line 44 fb: 120.694280
    test 262 line 44 lat2: 9.333271992381
    test 263 line 44 lon2: 98.670857333200
    test 264 line 44 azi2: 120.694280236304
    test 265 line 45 lat: 38.653646
    test 266 line 45 lon: 136.060468
    test 267 line 45 fb: 152.489416
    test 268 line 45 lat2: 38.653646179484
    test 269 line 45 lon2: 136.060467518677
    test 270 line 45 azi2: 152.489415748331
    test 271 line 46 lat: -4.564995
    test 272 line 46 lon: 166.894968
    test 273 line 46 fb: 127.520036
    test 274 line 46 lat2: -4.564994956240
    test 275 line 46 lon2: 166.894968092836
    test 276 line 46 azi2: 127.520036113641
    test 277 line 47 lat: -38.522500
    test 278 line 47 lon: 178.679307
    test 279 line 47 fb: 176.468685
    test 280 line 47 lat2: -38.522500159620
    test 281 line 47 lon2: 178.679306959466
    test 282 line 47 azi2: 176.468684587438
    test 283 line 48 lat: 45.529796
    test 284 line 48 lon: 145.048738
    test 285 line 48 fb: 160.706227
    test 286 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 287 line 48 lon2: 145.048737846273
    test 288 line 48 azi2: 160.706226714169
    test 289 line 49 lat: -2.968925
    test 290 line 49 lon: 5.044083
    test 291 line 49 fb: 174.913528
    test 292 line 49 lat2: -2.968924563433
    test 293 line 49 lon2: 5.044082955485
    test 294 line 49 azi2: 174.913527615338
    test 295 line 50 lat: 1.618184
    test 296 line 50 lon: 163.262955
    test 297 line 50 fb: 161.097730
    test 298 line 50 lat2: 1.618184178387
    test 299 line 50 lon2: 163.262955108028
    test 300 line 50 azi2: 161.097729713868
    test 301 line 51 lat: 25.179740
    test 302 line 51 lon: 107.504992
    test 303 line 51 fb: 154.055552
    test 304 line 51 lat2: 25.179740339437
    test 305 line 51 lon2: 107.504991932892
    test 306 line 51 azi2: 154.055552232572
    test 307 line 52 lat: 57.391251
    test 308 line 52 lon: 89.082271
    test 309 line 52 fb: 101.276115
    test 310 line 52 lat2: 57.391251345244
    test 311 line 52 lon2: 89.082271206722
    test 312 line 52 azi2: 101.276114553753
    test 313 line 53 lat: -11.470673
    test 314 line 53 lon: 48.285095
    test 315 line 53 fb: 148.389696
    test 316 line 53 lat2: -11.470672507979
    test 317 line 53 lon2: 48.285094684225
    test 318 line 53 azi2: 148.389695684750
    test 319 line 54 lat: 27.356639
    test 320 line 54 lon: 84.391682
    test 321 line 54 fb: 104.661818
    test 322 line 54 lat2: 27.356639349123
    test 323 line 54 lon2: 84.391681754671
    test 324 line 54 azi2: 104.661818309238
    test 325 line 55 lat: -40.533598
    test 326 line 55 lon: 103.488381
    test 327 line 55 fb: 132.398259
    test 328 line 55 lat2: -40.533597900971
    test 329 line 55 lon2: 103.488381204009
    test 330 line 55 azi2: 132.398259207371
    test 331 line 56 lat: 52.337949
    test 332 line 56 lon: 149.908279
    test 333 line 56 fb: 162.333474
    test 334 line 56 lat2: 52.337949466457
    test 335 line 56 lon2: 149.908278798430
    test 336 line 56 azi2: 162.333474334205
    test 337 line 57 lat: -58.474076
    test 338 line 57 lon: 78.718606
    test 339 line 57 fb: 117.457565
    test 340 line 57 lat2: -58.474075605820
    test 341 line 57 lon2: 78.718605560533
    test 342 line 57 azi2: 117.457565115569
    test 343 line 58 lat: -35.840568
    test 344 line 58 lon: 4.157534
    test 345 line 58 fb: 174.451067
    test 346 line 58 lat2: -35.840568348239
    test 347 line 58 lon2: 4.157534199470
    test 348 line 58 azi2: 174.451066901814
    test 349 line 59 lat: 15.629163
    test 350 line 59 lon: 102.677417
    test 351 line 59 fb: 103.482103
    test 352 line 59 lat2: 15.629163409998
    test 353 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 354 line 59 azi2: 103.482102722183
    test 355 line 60 lat: -1.256180
    test 356 line 60 lon: 133.625255
    test 357 line 60 fb: 104.470489
    test 358 line 60 lat2: -1.256179633151
    test 359 line 60 lon2: 133.625254783633
    test 360 line 60 azi2: 104.470489013739
    test 361 line 61 lat: -40.558253
    test 362 line 61 lon: 112.897054
    test 363 line 61 fb: 90.226134
    test 364 line 61 lat2: -40.558252601871
    test 365 line 61 lon2: 112.897053867085
    test 366 line 61 azi2: 90.226134266467
    test 367 line 62 lat: 86.193596
    test 368 line 62 lon: 116.956880
    test 369 line 62 fb: 117.618329
    test 370 line 62 lat2: 86.193595821107
    test 371 line 62 lon2: 116.956880430711
    test 372 line 62 azi2: 117.618329340275  FAILED, KNOWN, expected 117.618329340274
    test 373 line 63 lat: 6.874181
    test 374 line 63 lon: 54.891199
    test 375 line 63 fb: 90.820790
    test 376 line 63 lat2: 6.874181093562
    test 377 line 63 lon2: 54.891198619261
    test 378 line 63 azi2: 90.820789878786
    test 379 line 64 lat: -2.554657
    test 380 line 64 lon: 71.539549
    test 381 line 64 fb: 105.722921
    test 382 line 64 lat2: -2.554657243385
    test 383 line 64 lon2: 71.539549368441
    test 384 line 64 azi2: 105.722921401613
    test 385 line 65 lat: 1.329645
    test 386 line 65 lon: 138.134969
    test 387 line 65 fb: 150.465118
    test 388 line 65 lat2: 1.329645321136
    test 389 line 65 lon2: 138.134968538140
    test 390 line 65 azi2: 150.465118219879
    test 391 line 66 lat: -44.026427
    test 392 line 66 lon: 121.367591
    test 393 line 66 fb: 123.975227
    test 394 line 66 lat2: -44.026426573445  FAILED, KNOWN, expected -44.026426573446
    test 395 line 66 lon2: 121.367591215510
    test 396 line 66 azi2: 123.975227063718
    test 397 line 67 lat: -3.399081
    test 398 line 67 lon: 138.655764
    test 399 line 67 fb: 98.994343
    test 400 line 67 lat2: -3.399080708673
    test 401 line 67 lon2: 138.655764270175
    test 402 line 67 azi2: 98.994343217447
    test 403 line 68 lat: -26.776985
    test 404 line 68 lon: 67.020055
    test 405 line 68 fb: 119.394665
    test 406 line 68 lat2: -26.776984673364
    test 407 line 68 lon2: 67.020054548341
    test 408 line 68 azi2: 119.394664651636
    test 409 line 69 lat: 52.057239
    test 410 line 69 lon: 151.887270
    test 411 line 69 fb: 161.537826
    test 412 line 69 lat2: 52.057239269050
    test 413 line 69 lon2: 151.887270484247
    test 414 line 69 azi2: 161.537826425477
    test 415 line 70 lat: 3.784724
    test 416 line 70 lon: 102.727745
    test 417 line 70 fb: 116.453155
    test 418 line 70 lat2: 3.784724165483
    test 419 line 70 lon2: 102.727744934481
    test 420 line 70 azi2: 116.453155405439
    test 421 line 71 lat: -40.409299
    test 422 line 71 lon: 86.033195
    test 423 line 71 fb: 121.080298
    test 424 line 71 lat2: -40.409298772797
    test 425 line 71 lon2: 86.033195335657
    test 426 line 71 azi2: 121.080297615268
    test 427 line 72 lat: 73.013460
    test 428 line 72 lon: 76.188125
    test 429 line 72 fb: 78.877769
    test 430 line 72 lat2: 73.013460186926
    test 431 line 72 lon2: 76.188125151657
    test 432 line 72 azi2: 78.877769459629
    test 433 line 73 lat: 52.870132
    test 434 line 73 lon: 51.020900
    test 435 line 73 fb: 102.113351
    test 436 line 73 lat2: 52.870131799667
    test 437 line 73 lon2: 51.020900069545
    test 438 line 73 azi2: 102.113351369331
    test 439 line 74 lat: 28.909632
    test 440 line 74 lon: 17.071526
    test 441 line 74 fb: 103.660711
    test 442 line 74 lat2: 28.909631785857
    test 443 line 74 lon2: 17.071526465331
    test 444 line 74 azi2: 103.660711362255
    test 445 line 75 lat: -58.257855
    test 446 line 75 lon: 15.812862
    test 447 line 75 fb: 169.606337
    test 448 line 75 lat2: -58.257854831091
    test 449 line 75 lon2: 15.812862089412
    test 450 line 75 azi2: 169.606337169070
    test 451 line 76 lat: -58.869445
    test 452 line 76 lon: 132.036795
    test 453 line 76 fb: 53.946549
    test 454 line 76 lat2: -58.869445004289
    test 455 line 76 lon2: 132.036794965086
    test 456 line 76 azi2: 53.946549037654
    test 457 line 77 lat: -45.547043
    test 458 line 77 lon: 77.540664
    test 459 line 77 fb: 126.917177
    test 460 line 77 lat2: -45.547042598505
    test 461 line 77 lon2: 77.540663933413
    test 462 line 77 azi2: 126.917177154676
    test 463 line 78 lat: 45.046385
    test 464 line 78 lon: 149.382429
    test 465 line 78 fb: 162.117474
    test 466 line 78 lat2: 45.046384823604
    test 467 line 78 lon2: 149.382428769460
    test 468 line 78 azi2: 162.117474447248
    test 469 line 79 lat: -74.853338
    test 470 line 79 lon: 96.072097
    test 471 line 79 fb: 85.425493
    test 472 line 79 lat2: -74.853338324199
    test 473 line 79 lon2: 96.072096720956  FAILED, KNOWN, expected 96.072096720955
    test 474 line 79 azi2: 85.425493305289
    test 475 line 80 lat: -13.205775
    test 476 line 80 lon: 57.532285
    test 477 line 80 fb: 122.358040
    test 478 line 80 lat2: -13.205775181752
    test 479 line 80 lon2: 57.532285422140
    test 480 line 80 azi2: 122.358040028964
    test 481 line 81 lat: -5.135864
    test 482 line 81 lon: 115.048833
    test 483 line 81 fb: 93.168400
    test 484 line 81 lat2: -5.135863872649
    test 485 line 81 lon2: 115.048832990097
    test 486 line 81 azi2: 93.168399576996
    test 487 line 82 lat: 13.355453
    test 488 line 82 lon: 19.253946
    test 489 line 82 fb: 143.568719
    test 490 line 82 lat2: 13.355452912310
    test 491 line 82 lon2: 19.253945880531
    test 492 line 82 azi2: 143.568718864193
    test 493 line 83 lat: 0.766426
    test 494 line 83 lon: 147.485817
    test 495 line 83 fb: 144.982274
    test 496 line 83 lat2: 0.766426443892
    test 497 line 83 lon2: 147.485816830606
    test 498 line 83 azi2: 144.982273873382
    test 499 line 84 lat: 10.228416
    test 500 line 84 lon: 159.204118
    test 501 line 84 fb: 173.111973
    test 502 line 84 lat2: 10.228416314659
    test 503 line 84 lon2: 159.204118025562
    test 504 line 84 azi2: 173.111973027488
    test 505 line 85 lat: 73.178089
    test 506 line 85 lon: 131.762700
    test 507 line 85 fb: 135.271161
    test 508 line 85 lat2: 73.178089048974
    test 509 line 85 lon2: 131.762699581941  FAILED, KNOWN, expected 131.762699581940
    test 510 line 85 azi2: 135.271161440271
    test 511 line 86 lat: -16.908717
    test 512 line 86 lon: 149.240494
    test 513 line 86 fb: 90.725082
    test 514 line 86 lat2: -16.908717231321
    test 515 line 86 lon2: 149.240493850337
    test 516 line 86 azi2: 90.725082091932
    test 517 line 87 lat: -23.440025
    test 518 line 87 lon: 98.819595
    test 519 line 87 fb: 154.388320
    test 520 line 87 lat2: -23.440025289757
    test 521 line 87 lon2: 98.819595131759
    test 522 line 87 azi2: 154.388319751570
    test 523 line 88 lat: -51.344465
    test 524 line 88 lon: 54.299399
    test 525 line 88 fb: 139.903236
    test 526 line 88 lat2: -51.344465279371
    test 527 line 88 lon2: 54.299399477396
    test 528 line 88 azi2: 139.903236261795
    test 529 line 89 lat: 33.922320
    test 530 line 89 lon: 143.463070
    test 531 line 89 fb: 132.788230
    test 532 line 89 lat2: 33.922319712554
    test 533 line 89 lon2: 143.463070326988
    test 534 line 89 azi2: 132.788229856713
    test 535 line 90 lat: -83.333068
    test 536 line 90 lon: 177.611925
    test 537 line 90 fb: 2.633769
    test 538 line 90 lat2: -83.333068057524
    test 539 line 90 lon2: 177.611924577958
    test 540 line 90 azi2: 2.633768744582
    test 541 line 91 lat: 20.587333
    test 542 line 91 lon: 164.201962
    test 543 line 91 fb: 166.991083
    test 544 line 91 lat2: 20.587333492522
    test 545 line 91 lon2: 164.201962479604
    test 546 line 91 azi2: 166.991083245940
    test 547 line 92 lat: 52.612815
    test 548 line 92 lon: 110.766184
    test 549 line 92 fb: 168.281486
    test 550 line 92 lat2: 52.612815386144
    test 551 line 92 lon2: 110.766184475279
    test 552 line 92 azi2: 168.281485715811
    test 553 line 93 lat: -41.681373
    test 554 line 93 lon: 82.150183
    test 555 line 93 fb: 107.012959
    test 556 line 93 lat2: -41.681372899642
    test 557 line 93 lon2: 82.150183233451
    test 558 line 93 azi2: 107.012959072514
    test 559 line 94 lat: 27.082807
    test 560 line 94 lon: 171.332531
    test 561 line 94 fb: 174.934340
    test 562 line 94 lat2: 27.082807052702
    test 563 line 94 lon2: 171.332530862401
    test 564 line 94 azi2: 174.934339881142
    test 565 line 95 lat: 57.992299
    test 566 line 95 lon: 15.128357
    test 567 line 95 fb: 62.342982
    test 568 line 95 lat2: 57.992299464191
    test 569 line 95 lon2: 15.128356773547
    test 570 line 95 azi2: 62.342982084737
    test 571 line 96 lat: -10.526000
    test 572 line 96 lon: 33.778702
    test 573 line 96 fb: 165.687804
    test 574 line 96 lat2: -10.526000344959
    test 575 line 96 lon2: 33.778701722506
    test 576 line 96 azi2: 165.687803859941
    test 577 line 97 lat: 25.802395
    test 578 line 97 lon: 98.502531
    test 579 line 97 fb: 97.837271
    test 580 line 97 lat2: 25.802394934787
    test 581 line 97 lon2: 98.502531199301
    test 582 line 97 azi2: 97.837270592496
    test 583 line 98 lat: 47.163255
    test 584 line 98 lon: 156.720176
    test 585 line 98 fb: 160.291022
    test 586 line 98 lat2: 47.163255465769
    test 587 line 98 lon2: 156.720176105542
    test 588 line 98 azi2: 160.291021678921
    test 589 line 99 lat: 47.932063
    test 590 line 99 lon: 35.094714
    test 591 line 99 fb: 137.545065
    test 592 line 99 lat2: 47.932062978964
    test 593 line 99 lon2: 35.094714092217
    test 594 line 99 azi2: 137.545065115425
    test 595 line 100 lat: -60.204340
    test 596 line 100 lon: 117.726218
    test 597 line 100 fb: 72.585011
    test 598 line 100 lat2: -60.204339807984
    test 599 line 100 lon2: 117.726217548610
    test 600 line 100 azi2: 72.585010656772
    test 601 line 101 lat: 35.247411
    test 602 line 101 lon: 59.471562
    test 603 line 101 fb: 81.179468
    test 604 line 101 lat2: 35.247410984329
    test 605 line 101 lon2: 59.471562388985
    test 606 line 101 azi2: 81.179468094302
    test 607 line 102 lat: 19.218268
    test 608 line 102 lon: 165.507915
    test 609 line 102 fb: 167.452074
    test 610 line 102 lat2: 19.218268047706
    test 611 line 102 lon2: 165.507915017643
    test 612 line 102 azi2: 167.452074301867
    test 613 line 103 lat: 55.428809
    test 614 line 103 lon: 121.956541
    test 615 line 103 fb: 154.501481
    test 616 line 103 lat2: 55.428809300888
    test 617 line 103 lon2: 121.956541206929
    test 618 line 103 azi2: 154.501481394521
    test 619 line 104 lat: 49.294374
    test 620 line 104 lon: 119.661420
    test 621 line 104 fb: 157.209489
    test 622 line 104 lat2: 49.294374468687
    test 623 line 104 lon2: 119.661419832789
    test 624 line 104 azi2: 157.209488754087
    test 625 line 105 lat: -32.534872
    test 626 line 105 lon: 152.280610
    test 627 line 105 fb: 45.281812
    test 628 line 105 lat2: -32.534872085863
    test 629 line 105 lon2: 152.280609797481
    test 630 line 105 azi2: 45.281812386148
    test 631 line 106 lat: -1.097899
    test 632 line 106 lon: 104.697360
    test 633 line 106 fb: 126.298489
    test 634 line 106 lat2: -1.097899218947
    test 635 line 106 lon2: 104.697359959629
    test 636 line 106 azi2: 126.298488917783
    test 637 line 107 lat: -18.034366
    test 638 line 107 lon: 28.460388
    test 639 line 107 fb: 129.520364
    test 640 line 107 lat2: -18.034366293950
    test 641 line 107 lon2: 28.460387638999
    test 642 line 107 azi2: 129.520363751001
    test 643 line 108 lat: 76.310833
    test 644 line 108 lon: 80.110525
    test 645 line 108 fb: 106.655922
    test 646 line 108 lat2: 76.310832995825
    test 647 line 108 lon2: 80.110524683625
    test 648 line 108 azi2: 106.655921818336
    test 649 line 109 lat: 39.838034
    test 650 line 109 lon: 42.989610
    test 651 line 109 fb: 69.695281
    test 652 line 109 lat2: 39.838033717901
    test 653 line 109 lon2: 42.989610477861
    test 654 line 109 azi2: 69.695281464222
    test 655 line 110 lat: -56.710166
    test 656 line 110 lon: 125.242287
    test 657 line 110 fb: 60.118756
    test 658 line 110 lat2: -56.710165877845
    test 659 line 110 lon2: 125.242287231675
    test 660 line 110 azi2: 60.118756013168
    test 661 line 111 lat: 55.796062
    test 662 line 111 lon: 59.736599
    test 663 line 111 fb: 73.536728
    test 664 line 111 lat2: 55.796061639165
    test 665 line 111 lon2: 59.736598787303
    test 666 line 111 azi2: 73.536727826063
    test 667 line 112 lat: -36.553675
    test 668 line 112 lon: 38.656806
    test 669 line 112 fb: 134.414837
    test 670 line 112 lat2: -36.553675319553
    test 671 line 112 lon2: 38.656806212281
    test 672 line 112 azi2: 134.414836606696
    test 673 line 113 lat: -36.798456
    test 674 line 113 lon: 163.588375
    test 675 line 113 fb: 147.324204
    test 676 line 113 lat2: -36.798455994877
    test 677 line 113 lon2: 163.588375017283
    test 678 line 113 azi2: 147.324204021436
    test 679 line 114 lat: -15.952937
    test 680 line 114 lon: 55.126807
    test 681 line 114 fb: 134.743426
    test 682 line 114 lat2: -15.952937085211
    test 683 line 114 lon2: 55.126807113658
    test 684 line 114 azi2: 134.743426025963
    test 685 line 115 lat: -34.573087
    test 686 line 115 lon: 69.304064
    test 687 line 115 fb: 111.515973
    test 688 line 115 lat2: -34.573086586710
    test 689 line 115 lon2: 69.304064202466
    test 690 line 115 azi2: 111.515973223076
    test 691 line 116 lat: 26.643499
    test 692 line 116 lon: 1.500481
    test 693 line 116 fb: 7.958966
    test 694 line 116 lat2: 26.643498959841
    test 695 line 116 lon2: 1.500480924882
    test 696 line 116 azi2: 7.958966071178
    test 697 line 117 lat: 60.891878
    test 698 line 117 lon: 91.543410
    test 699 line 117 fb: 92.273095
    test 700 line 117 lat2: 60.891878271763
    test 701 line 117 lon2: 91.543409983653
    test 702 line 117 azi2: 92.273095036246
    test 703 line 118 lat: 64.148187
    test 704 line 118 lon: 136.552579
    test 705 line 118 fb: 147.193229
    test 706 line 118 lat2: 64.148186913822
    test 707 line 118 lon2: 136.552579389353
    test 708 line 118 azi2: 147.193228706030
    test 709 line 119 lat: 62.311678
    test 710 line 119 lon: 39.238630
    test 711 line 119 fb: 53.785893
    test 712 line 119 lat2: 62.311677748693
    test 713 line 119 lon2: 39.238629619778
    test 714 line 119 azi2: 53.785893324444
    test 715 line 120 lat: 27.239733
    test 716 line 120 lon: 136.649227
    test 717 line 120 fb: 162.935700
    test 718 line 120 lat2: 27.239733033115
    test 719 line 120 lon2: 136.649227320518
    test 720 line 120 azi2: 162.935700444146
    test 721 line 121 lat: 6.562844
    test 722 line 121 lon: 170.159007
    test 723 line 121 fb: 174.851345
    test 724 line 121 lat2: 6.562844367534
    test 725 line 121 lon2: 170.159007094343
    test 726 line 121 azi2: 174.851345174583
    test 727 line 122 lat: -29.537259
    test 728 line 122 lon: 105.350044
    test 729 line 122 fb: 141.393876
    test 730 line 122 lat2: -29.537259231420
    test 731 line 122 lon2: 105.350044044462
    test 732 line 122 azi2: 141.393876478962
    test 733 line 123 lat: -66.447700
    test 734 line 123 lon: 83.741961
    test 735 line 123 fb: 129.422490
    test 736 line 123 lat2: -66.447699831143
    test 737 line 123 lon2: 83.741960628420
    test 738 line 123 azi2: 129.422490051758
    test 739 line 124 lat: 56.926818
    test 740 line 124 lon: 20.197117
    test 741 line 124 fb: 37.960006
    test 742 line 124 lat2: 56.926817599968
    test 743 line 124 lon2: 20.197117058896
    test 744 line 124 azi2: 37.960006049295
    test 745 line 125 lat: 55.018266
    test 746 line 125 lon: 83.735441
    test 747 line 125 fb: 130.766515
    test 748 line 125 lat2: 55.018265995959
    test 749 line 125 lon2: 83.735441278691
    test 750 line 125 azi2: 130.766514657995
    test 751 line 126 lat: -78.131054
    test 752 line 126 lon: 56.098176
    test 753 line 126 fb: 127.132203
    test 754 line 126 lat2: -78.131053729786
    test 755 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 756 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 757 line 127 lat: -18.223027
    test 758 line 127 lon: 86.221345
    test 759 line 127 fb: 114.875019
    test 760 line 127 lat2: -18.223027345294
    test 761 line 127 lon2: 86.221345156045
    test 762 line 127 azi2: 114.875019395396
    test 763 line 128 lat: -16.100413
    test 764 line 128 lon: 54.195260
    test 765 line 128 fb: 126.748474
    test 766 line 128 lat2: -16.100412777565
    test 767 line 128 lon2: 54.195259657284
    test 768 line 128 azi2: 126.748473963924
    test 769 line 129 lat: -15.192944
    test 770 line 129 lon: 85.057605
    test 771 line 129 fb: 133.468781
    test 772 line 129 lat2: -15.192944143354
    test 773 line 129 lon2: 85.057605312625
    test 774 line 129 azi2: 133.468780913302
    test 775 line 130 lat: -1.279757
    test 776 line 130 lon: 93.430943
    test 777 line 130 fb: 128.545662
    test 778 line 130 lat2: -1.279756550061
    test 779 line 130 lon2: 93.430943123745
    test 780 line 130 azi2: 128.545661704820
    test 781 line 131 lat: -29.465713
    test 782 line 131 lon: 79.050046
    test 783 line 131 fb: 109.482097
    test 784 line 131 lat2: -29.465712645249
    test 785 line 131 lon2: 79.050045796725
    test 786 line 131 azi2: 109.482097420926
    test 787 line 132 lat: 31.819596
    test 788 line 132 lon: 88.251997
    test 789 line 132 fb: 91.173935
    test 790 line 132 lat2: 31.819596255581
    test 791 line 132 lon2: 88.251997328019
    test 792 line 132 azi2: 91.173935030538
    test 793 line 133 lat: -63.260477
    test 794 line 133 lon: 96.535465
    test 795 line 133 fb: 84.208873
    test 796 line 133 lat2: -63.260477387265
    test 797 line 133 lon2: 96.535465277415
    test 798 line 133 azi2: 84.208873088521
    test 799 line 134 lat: 12.908849
    test 800 line 134 lon: 116.734308
    test 801 line 134 fb: 110.313866
    test 802 line 134 lat2: 12.908849199388
    test 803 line 134 lon2: 116.734308245854
    test 804 line 134 azi2: 110.313865884978
    test 805 line 135 lat: -73.345839
    test 806 line 135 lon: 99.753937
    test 807 line 135 fb: 89.074642
    test 808 line 135 lat2: -73.345839080078
    test 809 line 135 lon2: 99.753937450114
    test 810 line 135 azi2: 89.074641755279
    test 811 line 136 lat: -58.777033
    test 812 line 136 lon: 161.963990
    test 813 line 136 fb: 21.998889
    test 814 line 136 lat2: -58.777033293076
    test 815 line 136 lon2: 161.963989905489
    test 816 line 136 azi2: 21.998888971548
    test 817 line 137 lat: 5.093069
    test 818 line 137 lon: 53.687921
    test 819 line 137 fb: 124.015842
    test 820 line 137 lat2: 5.093068996651
    test 821 line 137 lon2: 53.687921438754
    test 822 line 137 azi2: 124.015842231205
    test 823 line 138 lat: 35.659489
    test 824 line 138 lon: 111.729315
    test 825 line 138 fb: 133.697281
    test 826 line 138 lat2: 35.659488664161
    test 827 line 138 lon2: 111.729315023485
    test 828 line 138 azi2: 133.697281357224
    test 829 line 139 lat: -24.330784
    test 830 line 139 lon: 71.666568
    test 831 line 139 fb: 106.278062
    test 832 line 139 lat2: -24.330783755994
    test 833 line 139 lon2: 71.666567863170
    test 834 line 139 azi2: 106.278062394907
    test 835 line 140 lat: -46.218742
    test 836 line 140 lon: 91.580078
    test 837 line 140 fb: 106.279111
    test 838 line 140 lat2: -46.218742288678
    test 839 line 140 lon2: 91.580077788700
    test 840 line 140 azi2: 106.279110700398
    test 841 line 141 lat: 50.143353
    test 842 line 141 lon: 101.322503
    test 843 line 141 fb: 154.314496
    test 844 line 141 lat2: 50.143352562968
    test 845 line 141 lon2: 101.322502529615
    test 846 line 141 azi2: 154.314496467352
    test 847 line 142 lat: -16.604376
    test 848 line 142 lon: 134.279201
    test 849 line 142 fb: 106.895990
    test 850 line 142 lat2: -16.604375537699
    test 851 line 142 lon2: 134.279201209117
    test 852 line 142 azi2: 106.895989785632
    test 853 line 143 lat: 54.031290
    test 854 line 143 lon: 144.862702
    test 855 line 143 fb: 152.937010
    test 856 line 143 lat2: 54.031289901242
    test 857 line 143 lon2: 144.862701667601
    test 858 line 143 azi2: 152.937009701639
    test 859 line 144 lat: 0.616911
    test 860 line 144 lon: 110.974662
    test 861 line 144 fb: 115.206118
    test 862 line 144 lat2: 0.616910921892
    test 863 line 144 lon2: 110.974662272005
    test 864 line 144 azi2: 115.206118431862
    test 865 line 145 lat: -6.243779
    test 866 line 145 lon: 175.658895
    test 867 line 145 fb: 177.520147
    test 868 line 145 lat2: -6.243779047728
    test 869 line 145 lon2: 175.658894820006
    test 870 line 145 azi2: 177.520147377315
    test 871 line 146 lat: -70.416699
    test 872 line 146 lon: 169.642468
    test 873 line 146 fb: 11.978943
    test 874 line 146 lat2: -70.416698815769
    test 875 line 146 lon2: 169.642468357274
    test 876 line 146 azi2: 11.978943348082
    test 877 line 147 lat: 19.558617
    test 878 line 147 lon: 88.645709
    test 879 line 147 fb: 113.578814
    test 880 line 147 lat2: 19.558616692495
    test 881 line 147 lon2: 88.645708539223
    test 882 line 147 azi2: 113.578814362497
    test 883 line 148 lat: -23.555114
    test 884 line 148 lon: 162.457529
    test 885 line 148 fb: 147.104331
    test 886 line 148 lat2: -23.555114207892
    test 887 line 148 lon2: 162.457529431664
    test 888 line 148 azi2: 147.104330772141
    test 889 line 149 lat: -51.275738
    test 890 line 149 lon: 103.747943
    test 891 line 149 fb: 115.235374
    test 892 line 149 lat2: -51.275737933996
    test 893 line 149 lon2: 103.747943009536
    test 894 line 149 azi2: 115.235373813929
    test 895 line 150 lat: 25.374602
    test 896 line 150 lon: 143.135783
    test 897 line 150 fb: 126.548735
    test 898 line 150 lat2: 25.374601552526
    test 899 line 150 lon2: 143.135783283239
    test 900 line 150 azi2: 126.548735117003
    test 901 line 151 lat: 23.967825
    test 902 line 151 lon: 153.611116
    test 903 line 151 fb: 149.714116
    test 904 line 151 lat2: 23.967824782385
    test 905 line 151 lon2: 153.611115762587
    test 906 line 151 azi2: 149.714116426025
    test 907 line 152 lat: -22.787507
    test 908 line 152 lon: 111.258647
    test 909 line 152 fb: 86.335100
    test 910 line 152 lat2: -22.787506689568
    test 911 line 152 lon2: 111.258646767306
    test 912 line 152 azi2: 86.335099650483
    test 913 line 153 lat: -59.789842
    test 914 line 153 lon: 114.054983
    test 915 line 153 fb: 75.612605
    test 916 line 153 lat2: -59.789841532294
    test 917 line 153 lon2: 114.054983422255
    test 918 line 153 azi2: 75.612605242726
    test 919 line 154 lat: -2.802505
    test 920 line 154 lon: 126.245955
    test 921 line 154 fb: 150.100576
    test 922 line 154 lat2: -2.802505438545
    test 923 line 154 lon2: 126.245955176418
    test 924 line 154 azi2: 150.100575968176
    test 925 line 155 lat: 35.735653
    test 926 line 155 lon: 102.768725
    test 927 line 155 fb: 99.024702
    test 928 line 155 lat2: 35.735653026165
    test 929 line 155 lon2: 102.768725495110
    test 930 line 155 azi2: 99.024701978369
    test 931 line 156 lat: 15.906682
    test 932 line 156 lon: 117.446654
    test 933 line 156 fb: 130.449965
    test 934 line 156 lat2: 15.906681603252
    test 935 line 156 lon2: 117.446653873860
    test 936 line 156 azi2: 130.449965412147
    test 937 line 157 lat: -54.375988
    test 938 line 157 lon: 33.243363
    test 939 line 157 fb: 144.361175
    test 940 line 157 lat2: -54.375987804166
    test 941 line 157 lon2: 33.243362594038
    test 942 line 157 azi2: 144.361175098783
    test 943 line 158 lat: 3.588251
    test 944 line 158 lon: 156.659583
    test 945 line 158 fb: 112.153293
    test 946 line 158 lat2: 3.588250783960
    test 947 line 158 lon2: 156.659583234995
    test 948 line 158 azi2: 112.153293017228
    test 949 line 159 lat: -51.719977
    test 950 line 159 lon: 134.141061
    test 951 line 159 fb: 129.170451
    test 952 line 159 lat2: -51.719977004790
    test 953 line 159 lon2: 134.141060992499
    test 954 line 159 azi2: 129.170451102958
    test 955 line 160 lat: 22.935153
    test 956 line 160 lon: 109.461291
    test 957 line 160 fb: 120.676556
    test 958 line 160 lat2: 22.935153219965
    test 959 line 160 lon2: 109.461291078917
    test 960 line 160 azi2: 120.676555897336
    test 961 line 161 lat: -5.314690
    test 962 line 161 lon: 70.995225
    test 963 line 161 fb: 129.681273
    test 964 line 161 lat2: -5.314689990173
    test 965 line 161 lon2: 70.995224692450
    test 966 line 161 azi2: 129.681272635794
    test 967 line 162 lat: 49.147134
    test 968 line 162 lon: 16.182514
    test 969 line 162 fb: 38.926644
    test 970 line 162 lat2: 49.147133873971
    test 971 line 162 lon2: 16.182514450690
    test 972 line 162 azi2: 38.926644196248
    test 973 line 163 lat: -55.079363
    test 974 line 163 lon: 93.170898
    test 975 line 163 fb: 97.017492
    test 976 line 163 lat2: -55.079363368717
    test 977 line 163 lon2: 93.170898482121
    test 978 line 163 azi2: 97.017491592293
    test 979 line 164 lat: 26.410771
    test 980 line 164 lon: 109.934003
    test 981 line 164 fb: 103.660846
    test 982 line 164 lat2: 26.410770923895
    test 983 line 164 lon2: 109.934003168641
    test 984 line 164 azi2: 103.660846029906
    test 985 line 165 lat: -2.539670
    test 986 line 165 lon: 138.682325
    test 987 line 165 fb: 100.016568
    test 988 line 165 lat2: -2.539669792389
    test 989 line 165 lon2: 138.682325493918
    test 990 line 165 azi2: 100.016568432752
    test 991 line 166 lat: 10.563299
    test 992 line 166 lon: 50.532119
    test 993 line 166 fb: 126.356066
    test 994 line 166 lat2: 10.563299452649
    test 995 line 166 lon2: 50.532119480076
    test 996 line 166 azi2: 126.356065708364
    test 997 line 167 lat: 51.443871
    test 998 line 167 lon: 88.799162
    test 999 line 167 fb: 145.239198
    test 1000 line 167 lat2: 51.443871023711
    test 1001 line 167 lon2: 88.799161779253
    test 1002 line 167 azi2: 145.239198135633
    test 1003 line 168 lat: -80.240756
    test 1004 line 168 lon: 170.591261
    test 1005 line 168 fb: 19.402427
    test 1006 line 168 lat2: -80.240756380896
    test 1007 line 168 lon2: 170.591260542730
    test 1008 line 168 azi2: 19.402427357239
    test 1009 line 169 lat: 51.976040
    test 1010 line 169 lon: 165.045244
    test 1011 line 169 fb: 167.962110
    test 1012 line 169 lat2: 51.976039799074
    test 1013 line 169 lon2: 165.045244285456
    test 1014 line 169 azi2: 167.962110268433
    test 1015 line 170 lat: 29.365655
    test 1016 line 170 lon: 91.354349
    test 1017 line 170 fb: 135.101279
    test 1018 line 170 lat2: 29.365654873524
    test 1019 line 170 lon2: 91.354349089561
    test 1020 line 170 azi2: 135.101278715212
    test 1021 line 171 lat: 61.745486
    test 1022 line 171 lon: 142.333199
    test 1023 line 171 fb: 139.666209
    test 1024 line 171 lat2: 61.745485817368
    test 1025 line 171 lon2: 142.333198773096
    test 1026 line 171 azi2: 139.666208757008
    test 1027 line 172 lat: 13.414523
    test 1028 line 172 lon: 39.322993
    test 1029 line 172 fb: 144.276516
    test 1030 line 172 lat2: 13.414522997032
    test 1031 line 172 lon2: 39.322992706733
    test 1032 line 172 azi2: 144.276515542083
    test 1033 line 173 lat: -49.831353
    test 1034 line 173 lon: 72.426738
    test 1035 line 173 fb: 126.251620
    test 1036 line 173 lat2: -49.831353332108
    test 1037 line 173 lon2: 72.426737728887
    test 1038 line 173 azi2: 126.251620412456
    test 1039 line 174 lat: 1.822589
    test 1040 line 174 lon: 53.589208
    test 1041 line 174 fb: 97.925176
    test 1042 line 174 lat2: 1.822589208021
    test 1043 line 174 lon2: 53.589207810481
    test 1044 line 174 azi2: 97.925176229124
    test 1045 line 175 lat: -7.987194
    test 1046 line 175 lon: 49.318809
    test 1047 line 175 fb: 128.386595
    test 1048 line 175 lat2: -7.987193900849
    test 1049 line 175 lon2: 49.318809304076
    test 1050 line 175 azi2: 128.386594768748
    test 1051 line 176 lat: -56.807375
    test 1052 line 176 lon: 4.521802
    test 1053 line 176 fb: 176.806063
    test 1054 line 176 lat2: -56.807375049864
    test 1055 line 176 lon2: 4.521801986353
    test 1056 line 176 azi2: 176.806062785470
    test 1057 line 177 lat: -25.969834
    test 1058 line 177 lon: 64.903749
    test 1059 line 177 fb: 124.103844
    test 1060 line 177 lat2: -25.969833883721
    test 1061 line 177 lon2: 64.903749477059
    test 1062 line 177 azi2: 124.103844353942
    test 1063 line 178 lat: 32.807360
    test 1064 line 178 lon: 65.107962
    test 1065 line 178 fb: 124.577990
    test 1066 line 178 lat2: 32.807359742667
    test 1067 line 178 lon2: 65.107961864983
    test 1068 line 178 azi2: 124.577990419073
    test 1069 line 179 lat: -21.552138
    test 1070 line 179 lon: 102.466022
    test 1071 line 179 fb: 109.640197
    test 1072 line 179 lat2: -21.552137872353
    test 1073 line 179 lon2: 102.466021945025
    test 1074 line 179 azi2: 109.640197455958
    test 1075 line 180 lat: -26.271741
    test 1076 line 180 lon: 158.321581
    test 1077 line 180 fb: 165.993649
    test 1078 line 180 lat2: -26.271741383677
    test 1079 line 180 lon2: 158.321581345077
    test 1080 line 180 azi2: 165.993649158304  FAILED, KNOWN, expected 165.993649158305
    test 1081 line 181 lat: 41.023069
    test 1082 line 181 lon: 155.562542
    test 1083 line 181 fb: 153.407414
    test 1084 line 181 lat2: 41.023069113496
    test 1085 line 181 lon2: 155.562542134179
    test 1086 line 181 azi2: 153.407413608014
    test 1087 line 182 lat: 16.445471
    test 1088 line 182 lon: 165.261461
    test 1089 line 182 fb: 165.424806
    test 1090 line 182 lat2: 16.445470954340
    test 1091 line 182 lon2: 165.261461448873
    test 1092 line 182 azi2: 165.424806257119
    test 1093 line 183 lat: -3.222107
    test 1094 line 183 lon: 84.129727
    test 1095 line 183 fb: 154.083851
    test 1096 line 183 lat2: -3.222107095788
    test 1097 line 183 lon2: 84.129726900596
    test 1098 line 183 azi2: 154.083851495688
    test 1099 line 184 lat: 7.811710
    test 1100 line 184 lon: 123.143308
    test 1101 line 184 fb: 123.998106
    test 1102 line 184 lat2: 7.811709739638
    test 1103 line 184 lon2: 123.143308309660
    test 1104 line 184 azi2: 123.998105582525
    test 1105 line 185 lat: -45.235922
    test 1106 line 185 lon: 129.419283
    test 1107 line 185 fb: 91.493406
    test 1108 line 185 lat2: -45.235922276879
    test 1109 line 185 lon2: 129.419282696458
    test 1110 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1111 line 186 lat: -43.047563
    test 1112 line 186 lon: 121.565541
    test 1113 line 186 fb: 99.850543
    test 1114 line 186 lat2: -43.047563118772
    test 1115 line 186 lon2: 121.565540573788
    test 1116 line 186 azi2: 99.850542926816
    test 1117 line 187 lat: -22.881002
    test 1118 line 187 lon: 159.765030
    test 1119 line 187 fb: 60.474878
    test 1120 line 187 lat2: -22.881001889671
    test 1121 line 187 lon2: 159.765030106650
    test 1122 line 187 azi2: 60.474878214384
    test 1123 line 188 lat: -15.011946
    test 1124 line 188 lon: 55.594746
    test 1125 line 188 fb: 121.838839
    test 1126 line 188 lat2: -15.011946251300
    test 1127 line 188 lon2: 55.594746074667
    test 1128 line 188 azi2: 121.838839080255
    test 1129 line 189 lat: -29.011142
    test 1130 line 189 lon: 0.856639
    test 1131 line 189 fb: 178.744943
    test 1132 line 189 lat2: -29.011142183887
    test 1133 line 189 lon2: 0.856639457160
    test 1134 line 189 azi2: 178.744943180805
    test 1135 line 190 lat: -0.353001
    test 1136 line 190 lon: 48.401255
    test 1137 line 190 fb: 95.612551
    test 1138 line 190 lat2: -0.353000909367
    test 1139 line 190 lon2: 48.401254652488  FAILED, KNOWN, expected 48.401254652487
    test 1140 line 190 azi2: 95.612551044908
    test 1141 line 191 lat: 18.843341
    test 1142 line 191 lon: 105.405456
    test 1143 line 191 fb: 145.215722
    test 1144 line 191 lat2: 18.843340962664
    test 1145 line 191 lon2: 105.405456105476
    test 1146 line 191 azi2: 145.215722323742
    test 1147 line 192 lat: 19.672225
    test 1148 line 192 lon: 64.132980
    test 1149 line 192 fb: 131.894863
    test 1150 line 192 lat2: 19.672224913225
    test 1151 line 192 lon2: 64.132979510420
    test 1152 line 192 azi2: 131.894863434272
    test 1153 line 193 lat: -44.315074
    test 1154 line 193 lon: 132.711860
    test 1155 line 193 fb: 57.236875
    test 1156 line 193 lat2: -44.315073617889
    test 1157 line 193 lon2: 132.711860436437
    test 1158 line 193 azi2: 57.236875169148
    test 1159 line 194 lat: 71.956294
    test 1160 line 194 lon: 23.707587
    test 1161 line 194 fb: 28.235947
    test 1162 line 194 lat2: 71.956293555096
    test 1163 line 194 lon2: 23.707587498943
    test 1164 line 194 azi2: 28.235946630177
    test 1165 line 195 lat: -1.372652
    test 1166 line 195 lon: 37.704231
    test 1167 line 195 fb: 92.737862
    test 1168 line 195 lat2: -1.372652195171
    test 1169 line 195 lon2: 37.704230798676
    test 1170 line 195 azi2: 92.737862264368
    test 1171 line 196 lat: 32.377148
    test 1172 line 196 lon: 148.638709
    test 1173 line 196 fb: 164.415210
    test 1174 line 196 lat2: 32.377147634362
    test 1175 line 196 lon2: 148.638709383249
    test 1176 line 196 azi2: 164.415210005459
    test 1177 line 197 lat: 77.876832
    test 1178 line 197 lon: 86.074591
    test 1179 line 197 fb: 93.017705
    test 1180 line 197 lat2: 77.876831887051
    test 1181 line 197 lon2: 86.074590642864
    test 1182 line 197 azi2: 93.017704501543
    test 1183 line 198 lat: -7.405195
    test 1184 line 198 lon: 11.962469
    test 1185 line 198 fb: 123.788484
    test 1186 line 198 lat2: -7.405194804958
    test 1187 line 198 lon2: 11.962468510681
    test 1188 line 198 azi2: 123.788484407208
    test 1189 line 199 lat: -75.001311
    test 1190 line 199 lon: 173.334144
    test 1191 line 199 fb: 8.916523
    test 1192 line 199 lat2: -75.001310556015
    test 1193 line 199 lon2: 173.334144385512
    test 1194 line 199 azi2: 8.916523271572
    test 1195 line 200 lat: -33.145967
    test 1196 line 200 lon: 32.349241
    test 1197 line 200 fb: 154.035798
    test 1198 line 200 lat2: -33.145966631435
    test 1199 line 200 lon2: 32.349240627001
    test 1200 line 200 azi2: 154.035798269631
    test 1201 line 201 lat: 32.938605
    test 1202 line 201 lon: 98.042857
    test 1203 line 201 fb: 124.954750
    test 1204 line 201 lat2: 32.938605083648
    test 1205 line 201 lon2: 98.042857137838
    test 1206 line 201 azi2: 124.954750401990
    test 1207 line 202 lat: 18.924315
    test 1208 line 202 lon: 20.712136
    test 1209 line 202 fb: 118.058457
    test 1210 line 202 lat2: 18.924314631117
    test 1211 line 202 lon2: 20.712135699713
    test 1212 line 202 azi2: 118.058457437327
    test 1213 line 203 lat: 34.281652
    test 1214 line 203 lon: 66.815398
    test 1215 line 203 fb: 147.693080
    test 1216 line 203 lat2: 34.281652047931
    test 1217 line 203 lon2: 66.815398066147
    test 1218 line 203 azi2: 147.693079659533
    test 1219 line 204 lat: -56.830635
    test 1220 line 204 lon: 2.137046
    test 1221 line 204 fb: 178.041562
    test 1222 line 204 lat2: -56.830634769513
    test 1223 line 204 lon2: 2.137046322217
    test 1224 line 204 azi2: 178.041562126305
    test 1225 line 205 lat: -68.481893
    test 1226 line 205 lon: 107.036720
    test 1227 line 205 fb: 152.384477
    test 1228 line 205 lat2: -68.481892540174
    test 1229 line 205 lon2: 107.036720123074
    test 1230 line 205 azi2: 152.384476595412
    test 1231 line 206 lat: -22.502042
    test 1232 line 206 lon: 171.827566
    test 1233 line 206 fb: 158.834328
    test 1234 line 206 lat2: -22.502042312255
    test 1235 line 206 lon2: 171.827566033608
    test 1236 line 206 azi2: 158.834327972407
    test 1237 line 207 lat: -4.504199
    test 1238 line 207 lon: 138.544338
    test 1239 line 207 fb: 123.633526
    test 1240 line 207 lat2: -4.504199404775
    test 1241 line 207 lon2: 138.544338028736
    test 1242 line 207 azi2: 123.633526406205
    test 1243 line 208 lat: -9.226343
    test 1244 line 208 lon: 120.310050
    test 1245 line 208 fb: 142.789186
    test 1246 line 208 lat2: -9.226343110712
    test 1247 line 208 lon2: 120.310050148004
    test 1248 line 208 azi2: 142.789186422068
    test 1249 line 209 lat: -51.684044
    test 1250 line 209 lon: 137.764140
    test 1251 line 209 fb: 56.844891
    test 1252 line 209 lat2: -51.684044075582
    test 1253 line 209 lon2: 137.764139808689
    test 1254 line 209 azi2: 56.844890846790
    test 1255 line 210 lat: 19.467357
    test 1256 line 210 lon: 93.870087
    test 1257 line 210 fb: 129.125491
    test 1258 line 210 lat2: 19.467357090193
    test 1259 line 210 lon2: 93.870087361293
    test 1260 line 210 azi2: 129.125490840370
    test 1261 line 211 lat: 33.594608
    test 1262 line 211 lon: 58.324143
    test 1263 line 211 fb: 101.975372
    test 1264 line 211 lat2: 33.594607695347
    test 1265 line 211 lon2: 58.324143410893
    test 1266 line 211 azi2: 101.975372004111
    test 1267 line 212 lat: -1.184701
    test 1268 line 212 lon: 92.834285
    test 1269 line 212 fb: 134.201097
    test 1270 line 212 lat2: -1.184701423910
    test 1271 line 212 lon2: 92.834285031504
    test 1272 line 212 azi2: 134.201097217000
    test 1273 line 213 lat: 5.878639
    test 1274 line 213 lon: 90.756173
    test 1275 line 213 fb: 156.936699
    test 1276 line 213 lat2: 5.878638801092
    test 1277 line 213 lon2: 90.756172727682
    test 1278 line 213 azi2: 156.936698928215
    test 1279 line 214 lat: 47.611646
    test 1280 line 214 lon: 131.482218
    test 1281 line 214 fb: 152.077667
    test 1282 line 214 lat2: 47.611646039058
    test 1283 line 214 lon2: 131.482217984255
    test 1284 line 214 azi2: 152.077667341138
    test 1285 line 215 lat: 13.906234
    test 1286 line 215 lon: 115.526238
    test 1287 line 215 fb: 130.769627
    test 1288 line 215 lat2: 13.906233945801
    test 1289 line 215 lon2: 115.526238064488
    test 1290 line 215 azi2: 130.769627488545
    test 1291 line 216 lat: 3.675485
    test 1292 line 216 lon: 80.781862
    test 1293 line 216 fb: 94.188426
    test 1294 line 216 lat2: 3.675485213596
    test 1295 line 216 lon2: 80.781861923838
    test 1296 line 216 azi2: 94.188426367881
    test 1297 line 217 lat: 68.665600
    test 1298 line 217 lon: 21.503123
    test 1299 line 217 fb: 107.667810
    test 1300 line 217 lat2: 68.665599857810
    test 1301 line 217 lon2: 21.503123449290
    test 1302 line 217 azi2: 107.667809564607  FAILED, KNOWN, expected 107.667809564608
    test 1303 line 218 lat: -60.791732
    test 1304 line 218 lon: 82.476063
    test 1305 line 218 fb: 117.665953
    test 1306 line 218 lat2: -60.791732218314
    test 1307 line 218 lon2: 82.476062801971
    test 1308 line 218 azi2: 117.665952598924
    test 1309 line 219 lat: -33.122376
    test 1310 line 219 lon: 89.871476
    test 1311 line 219 fb: 124.068098
    test 1312 line 219 lat2: -33.122375734012
    test 1313 line 219 lon2: 89.871476211443
    test 1314 line 219 azi2: 124.068098444465
    test 1315 line 220 lat: -34.085934
    test 1316 line 220 lon: 117.886549
    test 1317 line 220 fb: 93.366647
    test 1318 line 220 lat2: -34.085934037207
    test 1319 line 220 lon2: 117.886548615401
    test 1320 line 220 azi2: 93.366647127153
    test 1321 line 221 lat: -43.746811
    test 1322 line 221 lon: 107.199939
    test 1323 line 221 fb: 101.218435
    test 1324 line 221 lat2: -43.746811413059
    test 1325 line 221 lon2: 107.199938541143
    test 1326 line 221 azi2: 101.218434581373
    test 1327 line 222 lat: -44.514857
    test 1328 line 222 lon: 19.560361
    test 1329 line 222 fb: 166.449925
    test 1330 line 222 lat2: -44.514857277517
    test 1331 line 222 lon2: 19.560360617266
    test 1332 line 222 azi2: 166.449925135617
    test 1333 line 223 lat: -18.049262
    test 1334 line 223 lon: 42.099193
    test 1335 line 223 fb: 158.127141
    test 1336 line 223 lat2: -18.049261796697
    test 1337 line 223 lon2: 42.099193394607
    test 1338 line 223 azi2: 158.127140901909
    test 1339 line 224 lat: 9.832902
    test 1340 line 224 lon: 51.448057
    test 1341 line 224 fb: 114.348703
    test 1342 line 224 lat2: 9.832901687662
    test 1343 line 224 lon2: 51.448057387281
    test 1344 line 224 azi2: 114.348702917675
    test 1345 line 225 lat: -57.516443
    test 1346 line 225 lon: 64.700933
    test 1347 line 225 fb: 137.459801
    test 1348 line 225 lat2: -57.516443280706
    test 1349 line 225 lon2: 64.700933124813
    test 1350 line 225 azi2: 137.459801078685
    test 1351 line 226 lat: -23.072600
    test 1352 line 226 lon: 95.392602
    test 1353 line 226 fb: 140.119143
    test 1354 line 226 lat2: -23.072599811854
    test 1355 line 226 lon2: 95.392601883769
    test 1356 line 226 azi2: 140.119143469104
    test 1357 line 227 lat: -45.117254
    test 1358 line 227 lon: 97.361647
    test 1359 line 227 fb: 97.339041
    test 1360 line 227 lat2: -45.117253614100
    test 1361 line 227 lon2: 97.361647352714
    test 1362 line 227 azi2: 97.339040559115
    test 1363 line 228 lat: -11.277328
    test 1364 line 228 lon: 19.602358
    test 1365 line 228 fb: 156.779730
    test 1366 line 228 lat2: -11.277328262947
    test 1367 line 228 lon2: 19.602358024471
    test 1368 line 228 azi2: 156.779729902321
    test 1369 line 229 lat: -4.823524
    test 1370 line 229 lon: 164.626842
    test 1371 line 229 fb: 151.314797
    test 1372 line 229 lat2: -4.823524348693
    test 1373 line 229 lon2: 164.626841855534
    test 1374 line 229 azi2: 151.314796841238
    test 1375 line 230 lat: 36.317088
    test 1376 line 230 lon: 89.326155
    test 1377 line 230 fb: 94.589052
    test 1378 line 230 lat2: 36.317087922282
    test 1379 line 230 lon2: 89.326155365943
    test 1380 line 230 azi2: 94.589051951235
    test 1381 line 231 lat: 3.975433
    test 1382 line 231 lon: 105.460359
    test 1383 line 231 fb: 126.257925
    test 1384 line 231 lat2: 3.975432760073
    test 1385 line 231 lon2: 105.460358584149
    test 1386 line 231 azi2: 126.257925455058
    test 1387 line 232 lat: 28.815984
    test 1388 line 232 lon: 89.807394
    test 1389 line 232 fb: 116.984375
    test 1390 line 232 lat2: 28.815983592511
    test 1391 line 232 lon2: 89.807393686834
    test 1392 line 232 azi2: 116.984374981602
    test 1393 line 233 lat: 66.161717
    test 1394 line 233 lon: 63.218655
    test 1395 line 233 fb: 88.869959
    test 1396 line 233 lat2: 66.161716765270
    test 1397 line 233 lon2: 63.218655052918
    test 1398 line 233 azi2: 88.869959091488
    test 1399 line 234 lat: 74.859972
    test 1400 line 234 lon: 53.523361
    test 1401 line 234 fb: 58.125008
    test 1402 line 234 lat2: 74.859971601090
    test 1403 line 234 lon2: 53.523360738831
    test 1404 line 234 azi2: 58.125008091802
    test 1405 line 235 lat: -0.265481
    test 1406 line 235 lon: 79.537677
    test 1407 line 235 fb: 112.945830
    test 1408 line 235 lat2: -0.265481234322
    test 1409 line 235 lon2: 79.537677388981
    test 1410 line 235 azi2: 112.945829781102
    test 1411 line 236 lat: -12.099598
    test 1412 line 236 lon: 155.371356
    test 1413 line 236 fb: 76.454292
    test 1414 line 236 lat2: -12.099598021004
    test 1415 line 236 lon2: 155.371356164845
    test 1416 line 236 azi2: 76.454291606612
    test 1417 line 237 lat: -6.746465
    test 1418 line 237 lon: 19.102484
    test 1419 line 237 fb: 149.342236
    test 1420 line 237 lat2: -6.746464854112
    test 1421 line 237 lon2: 19.102484309526
    test 1422 line 237 azi2: 149.342236428405
    test 1423 line 238 lat: 0.663830
    test 1424 line 238 lon: 101.295721
    test 1425 line 238 fb: 133.862626
    test 1426 line 238 lat2: 0.663830251510
    test 1427 line 238 lon2: 101.295720736944
    test 1428 line 238 azi2: 133.862626019473
    test 1429 line 239 lat: -61.764624
    test 1430 line 239 lon: 148.537522
    test 1431 line 239 fb: 149.298772
    test 1432 line 239 lat2: -61.764623993813
    test 1433 line 239 lon2: 148.537521922087
    test 1434 line 239 azi2: 149.298771734214
    test 1435 line 240 lat: 14.505122
    test 1436 line 240 lon: 111.665519
    test 1437 line 240 fb: 97.740222
    test 1438 line 240 lat2: 14.505121777043
    test 1439 line 240 lon2: 111.665518774379
    test 1440 line 240 azi2: 97.740221959573
    test 1441 line 241 lat: -24.713205
    test 1442 line 241 lon: 34.159384
    test 1443 line 241 fb: 125.866132
    test 1444 line 241 lat2: -24.713205327375
    test 1445 line 241 lon2: 34.159384140577
    test 1446 line 241 azi2: 125.866132443875
    test 1447 line 242 lat: 50.480262
    test 1448 line 242 lon: 42.263850
    test 1449 line 242 fb: 153.395659
    test 1450 line 242 lat2: 50.480261762893
    test 1451 line 242 lon2: 42.263849601327
    test 1452 line 242 azi2: 153.395658919028
    test 1453 line 243 lat: 11.787247
    test 1454 line 243 lon: 49.506460
    test 1455 line 243 fb: 120.836778
    test 1456 line 243 lat2: 11.787247309610
    test 1457 line 243 lon2: 49.506459509702
    test 1458 line 243 azi2: 120.836778496206
    test 1459 line 244 lat: -19.956674
    test 1460 line 244 lon: 14.599479
    test 1461 line 244 fb: 177.883855
    test 1462 line 244 lat2: -19.956673621927
    test 1463 line 244 lon2: 14.599479227718
    test 1464 line 244 azi2: 177.883855088778
    test 1465 line 245 lat: 0.738566
    test 1466 line 245 lon: 12.600972
    test 1467 line 245 fb: 176.085445
    test 1468 line 245 lat2: 0.738565517815
    test 1469 line 245 lon2: 12.600972006927
    test 1470 line 245 azi2: 176.085445031797
    test 1471 line 246 lat: 25.799128
    test 1472 line 246 lon: 9.800259
    test 1473 line 246 fb: 166.282764
    test 1474 line 246 lat2: 25.799128425384
    test 1475 line 246 lon2: 9.800259258495
    test 1476 line 246 azi2: 166.282764024264
    test 1477 line 247 lat: -3.897277
    test 1478 line 247 lon: 16.693319
    test 1479 line 247 fb: 168.780736
    test 1480 line 247 lat2: -3.897277132184
    test 1481 line 247 lon2: 16.693318601970
    test 1482 line 247 azi2: 168.780736094343
    test 1483 line 248 lat: 2.479585
    test 1484 line 248 lon: 72.317321
    test 1485 line 248 fb: 126.935932
    test 1486 line 248 lat2: 2.479585385319
    test 1487 line 248 lon2: 72.317321261259
    test 1488 line 248 azi2: 126.935932221711
    test 1489 line 249 lat: -0.836621
    test 1490 line 249 lon: 2.490193
    test 1491 line 249 fb: 150.640498
    test 1492 line 249 lat2: -0.836621274662
    test 1493 line 249 lon2: 2.490192836679
    test 1494 line 249 azi2: 150.640498065221
    test 1495 line 250 lat: -69.098227
    test 1496 line 250 lon: 43.929874
    test 1497 line 250 fb: 143.378404
    test 1498 line 250 lat2: -69.098226894675
    test 1499 line 250 lon2: 43.929873562507
    test 1500 line 250 azi2: 143.378403982035
    test 1501 line 251 lat: 19.156121
    test 1502 line 251 lon: 130.658473
    test 1503 line 251 fb: 136.204475
    test 1504 line 251 lat2: 19.156121137418
    test 1505 line 251 lon2: 130.658473280949
    test 1506 line 251 azi2: 136.204475163250
    test 1507 line 252 lat: 68.881949
    test 1508 line 252 lon: 79.375865
    test 1509 line 252 fb: 99.052732
    test 1510 line 252 lat2: 68.881948915820
    test 1511 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 1512 line 252 azi2: 99.052731550675
    test 1513 line 253 lat: -23.509016
    test 1514 line 253 lon: 122.232226
    test 1515 line 253 fb: 90.354604
    test 1516 line 253 lat2: -23.509015988874
    test 1517 line 253 lon2: 122.232226283491
    test 1518 line 253 azi2: 90.354603607380
    test 1519 line 254 lat: -64.950636
    test 1520 line 254 lon: 70.184354
    test 1521 line 254 fb: 122.478937
    test 1522 line 254 lat2: -64.950635804577
    test 1523 line 254 lon2: 70.184354384370
    test 1524 line 254 azi2: 122.478937039089
    test 1525 line 255 lat: 4.931109
    test 1526 line 255 lon: 176.100221
    test 1527 line 255 fb: 175.754221
    test 1528 line 255 lat2: 4.931108669549
    test 1529 line 255 lon2: 176.100220910178
    test 1530 line 255 azi2: 175.754221027085
    test 1531 line 256 lat: -35.503236
    test 1532 line 256 lon: 122.767107
    test 1533 line 256 fb: 94.201020
    test 1534 line 256 lat2: -35.503236005727
    test 1535 line 256 lon2: 122.767107174014
    test 1536 line 256 azi2: 94.201020059324
    test 1537 line 257 lat: 58.728016
    test 1538 line 257 lon: 76.607531
    test 1539 line 257 fb: 114.353509
    test 1540 line 257 lat2: 58.728016150448
    test 1541 line 257 lon2: 76.607530844045
    test 1542 line 257 azi2: 114.353508957613
    test 1543 line 258 lat: 13.725793
    test 1544 line 258 lon: 60.384503
    test 1545 line 258 fb: 102.783242
    test 1546 line 258 lat2: 13.725792757601
    test 1547 line 258 lon2: 60.384502867486
    test 1548 line 258 azi2: 102.783241874789
    test 1549 line 259 lat: 40.298524
    test 1550 line 259 lon: 59.957993
    test 1551 line 259 fb: 90.056366
    test 1552 line 259 lat2: 40.298523592677
    test 1553 line 259 lon2: 59.957993458231
    test 1554 line 259 azi2: 90.056365696933
    test 1555 line 260 lat: 21.526222
    test 1556 line 260 lon: 19.836420
    test 1557 line 260 fb: 89.081274
    test 1558 line 260 lat2: 21.526221960544
    test 1559 line 260 lon2: 19.836419824899
    test 1560 line 260 azi2: 89.081274273400
    test 1561 line 261 lat: -65.269872
    test 1562 line 261 lon: 134.049515
    test 1563 line 261 fb: 54.613515
    test 1564 line 261 lat2: -65.269872123888
    test 1565 line 261 lon2: 134.049514626723
    test 1566 line 261 azi2: 54.613514542799
    test 1567 line 262 lat: -47.687068
    test 1568 line 262 lon: 86.855941
    test 1569 line 262 fb: 115.133532
    test 1570 line 262 lat2: -47.687068378110
    test 1571 line 262 lon2: 86.855941174728
    test 1572 line 262 azi2: 115.133531572693
    test 1573 line 263 lat: -56.637273
    test 1574 line 263 lon: 158.001121
    test 1575 line 263 fb: 35.013276
    test 1576 line 263 lat2: -56.637272907294
    test 1577 line 263 lon2: 158.001120751267
    test 1578 line 263 azi2: 35.013276119319
    test 1579 line 264 lat: 6.880772
    test 1580 line 264 lon: 36.289125
    test 1581 line 264 fb: 144.499557
    test 1582 line 264 lat2: 6.880771895178
    test 1583 line 264 lon2: 36.289124705135
    test 1584 line 264 azi2: 144.499557452454
    test 1585 line 265 lat: 59.205527
    test 1586 line 265 lon: 115.787268
    test 1587 line 265 fb: 116.793619
    test 1588 line 265 lat2: 59.205526512430
    test 1589 line 265 lon2: 115.787267608171
    test 1590 line 265 azi2: 116.793618855456
    test 1591 line 266 lat: 29.463206
    test 1592 line 266 lon: 68.742710
    test 1593 line 266 fb: 113.906069
    test 1594 line 266 lat2: 29.463206450868
    test 1595 line 266 lon2: 68.742710218988
    test 1596 line 266 azi2: 113.906069374400
    test 1597 line 267 lat: 5.507960
    test 1598 line 267 lon: 2.913367
    test 1599 line 267 fb: 175.225892
    test 1600 line 267 lat2: 5.507959555355
    test 1601 line 267 lon2: 2.913367209347
    test 1602 line 267 azi2: 175.225891805562
    test 1603 line 268 lat: 32.568215
    test 1604 line 268 lon: 107.814340
    test 1605 line 268 fb: 126.321687
    test 1606 line 268 lat2: 32.568215067951
    test 1607 line 268 lon2: 107.814340389788
    test 1608 line 268 azi2: 126.321687264203
    test 1609 line 269 lat: 48.941036
    test 1610 line 269 lon: 170.309380
    test 1611 line 269 fb: 170.816057
    test 1612 line 269 lat2: 48.941036400994
    test 1613 line 269 lon2: 170.309379989564
    test 1614 line 269 azi2: 170.816056872564
    test 1615 line 270 lat: 32.657811
    test 1616 line 270 lon: 174.401372
    test 1617 line 270 fb: 173.967029
    test 1618 line 270 lat2: 32.657810935795
    test 1619 line 270 lon2: 174.401372292954
    test 1620 line 270 azi2: 173.967029189838
    test 1621 line 271 lat: -30.959342
    test 1622 line 271 lon: 144.596945
    test 1623 line 271 fb: 157.635539
    test 1624 line 271 lat2: -30.959341511189
    test 1625 line 271 lon2: 144.596944855700
    test 1626 line 271 azi2: 157.635538872114
    test 1627 line 272 lat: 52.180060
    test 1628 line 272 lon: 68.363538
    test 1629 line 272 fb: 82.619820
    test 1630 line 272 lat2: 52.180060488771
    test 1631 line 272 lon2: 68.363538073511
    test 1632 line 272 azi2: 82.619819936898
    test 1633 line 273 lat: -49.230655
    test 1634 line 273 lon: 119.085123
    test 1635 line 273 fb: 81.553785
    test 1636 line 273 lat2: -49.230654785600  FAILED, KNOWN, expected -49.230654785601
    test 1637 line 273 lon2: 119.085122995371
    test 1638 line 273 azi2: 81.553785297210
    test 1639 line 274 lat: 12.315309
    test 1640 line 274 lon: 21.800337
    test 1641 line 274 fb: 86.572317
    test 1642 line 274 lat2: 12.315308710130
    test 1643 line 274 lon2: 21.800336803956
    test 1644 line 274 azi2: 86.572316548512
    test 1645 line 275 lat: 0.074875
    test 1646 line 275 lon: 122.092567
    test 1647 line 275 fb: 93.940324
    test 1648 line 275 lat2: 0.074874782626
    test 1649 line 275 lon2: 122.092567299352
    test 1650 line 275 azi2: 93.940323652996
    test 1651 line 276 lat: -32.420609
    test 1652 line 276 lon: 80.147417
    test 1653 line 276 fb: 123.183256
    test 1654 line 276 lat2: -32.420609134175
    test 1655 line 276 lon2: 80.147416945184
    test 1656 line 276 azi2: 123.183256201588
    test 1657 line 277 lat: 82.600418
    test 1658 line 277 lon: 34.418367
    test 1659 line 277 fb: 35.057122
    test 1660 line 277 lat2: 82.600418456713
    test 1661 line 277 lon2: 34.418367124569
    test 1662 line 277 azi2: 35.057122384192
    test 1663 line 278 lat: 26.274633
    test 1664 line 278 lon: 93.043032
    test 1665 line 278 fb: 114.480069
    test 1666 line 278 lat2: 26.274632977288
    test 1667 line 278 lon2: 93.043031668414
    test 1668 line 278 azi2: 114.480069066657
    test 1669 line 279 lat: 28.433986
    test 1670 line 279 lon: 132.962042
    test 1671 line 279 fb: 118.817242
    test 1672 line 279 lat2: 28.433985598740
    test 1673 line 279 lon2: 132.962041543078
    test 1674 line 279 azi2: 118.817241997246
    test 1675 line 280 lat: 32.426459
    test 1676 line 280 lon: 65.171889
    test 1677 line 280 fb: 113.230923
    test 1678 line 280 lat2: 32.426458512822
    test 1679 line 280 lon2: 65.171889395963
    test 1680 line 280 azi2: 113.230923394172
    test 1681 line 281 lat: 8.427284
    test 1682 line 281 lon: 20.342496
    test 1683 line 281 fb: 140.993359
    test 1684 line 281 lat2: 8.427284359102
    test 1685 line 281 lon2: 20.342496251702
    test 1686 line 281 azi2: 140.993359066103
    test 1687 line 282 lat: -16.412702
    test 1688 line 282 lon: 47.392542
    test 1689 line 282 fb: 167.389705
    test 1690 line 282 lat2: -16.412702228950
    test 1691 line 282 lon2: 47.392541669265
    test 1692 line 282 azi2: 167.389704666322
    test 1693 line 283 lat: -54.082376
    test 1694 line 283 lon: 159.985466
    test 1695 line 283 fb: 56.023710
    test 1696 line 283 lat2: -54.082375801659
    test 1697 line 283 lon2: 159.985465829683
    test 1698 line 283 azi2: 56.023710499162
    test 1699 line 284 lat: 38.704319
    test 1700 line 284 lon: 78.307551
    test 1701 line 284 fb: 106.582126
    test 1702 line 284 lat2: 38.704318557557
    test 1703 line 284 lon2: 78.307550831333
    test 1704 line 284 azi2: 106.582125725743
    test 1705 line 285 lat: 15.206275
    test 1706 line 285 lon: 59.878378
    test 1707 line 285 fb: 114.460428
    test 1708 line 285 lat2: 15.206274688849
    test 1709 line 285 lon2: 59.878378252292
    test 1710 line 285 azi2: 114.460428216582
    test 1711 line 286 lat: -62.789550
    test 1712 line 286 lon: 66.649185
    test 1713 line 286 fb: 119.232672
    test 1714 line 286 lat2: -62.789549909136
    test 1715 line 286 lon2: 66.649184622337
    test 1716 line 286 azi2: 119.232671643970  FAILED, KNOWN, expected 119.232671643971
    test 1717 line 287 lat: 31.235252
    test 1718 line 287 lon: 19.933468
    test 1719 line 287 fb: 145.488470
    test 1720 line 287 lat2: 31.235252170087
    test 1721 line 287 lon2: 19.933467970517
    test 1722 line 287 azi2: 145.488469796544
    test 1723 line 288 lat: 11.983236
    test 1724 line 288 lon: 145.307369
    test 1725 line 288 fb: 151.192641
    test 1726 line 288 lat2: 11.983236088753
    test 1727 line 288 lon2: 145.307368849730
    test 1728 line 288 azi2: 151.192640854621
    test 1729 line 289 lat: 27.629694
    test 1730 line 289 lon: 16.148459
    test 1731 line 289 fb: 63.008012
    test 1732 line 289 lat2: 27.629693628283
    test 1733 line 289 lon2: 16.148459400244
    test 1734 line 289 azi2: 63.008012267521
    test 1735 line 290 lat: 34.077784
    test 1736 line 290 lon: 115.693210
    test 1737 line 290 fb: 112.252264
    test 1738 line 290 lat2: 34.077783768135
    test 1739 line 290 lon2: 115.693209573427
    test 1740 line 290 azi2: 112.252263721679
    test 1741 line 291 lat: 17.100340
    test 1742 line 291 lon: 26.538643
    test 1743 line 291 fb: 131.391925
    test 1744 line 291 lat2: 17.100339523444
    test 1745 line 291 lon2: 26.538642768875
    test 1746 line 291 azi2: 131.391925094902
    test 1747 line 292 lat: -8.128040
    test 1748 line 292 lon: 28.609615
    test 1749 line 292 fb: 144.189095
    test 1750 line 292 lat2: -8.128039572354
    test 1751 line 292 lon2: 28.609615412806
    test 1752 line 292 azi2: 144.189095481788
    test 1753 line 293 lat: 17.307082
    test 1754 line 293 lon: 150.748550
    test 1755 line 293 fb: 172.334611
    test 1756 line 293 lat2: 17.307081581668
    test 1757 line 293 lon2: 150.748549863580
    test 1758 line 293 azi2: 172.334611079260
    test 1759 line 294 lat: 4.135230
    test 1760 line 294 lon: 142.094814
    test 1761 line 294 fb: 170.513214
    test 1762 line 294 lat2: 4.135229575811
    test 1763 line 294 lon2: 142.094814225629
    test 1764 line 294 azi2: 170.513213518678
    test 1765 line 295 lat: -61.544041
    test 1766 line 295 lon: 167.154866
    test 1767 line 295 fb: 51.415676
    test 1768 line 295 lat2: -61.544040804472
    test 1769 line 295 lon2: 167.154866481811
    test 1770 line 295 azi2: 51.415675504866
    test 1771 line 296 lat: 27.782466
    test 1772 line 296 lon: 53.844550
    test 1773 line 296 fb: 78.357665
    test 1774 line 296 lat2: 27.782465760718
    test 1775 line 296 lon2: 53.844549799795
    test 1776 line 296 azi2: 78.357665271795
    test 1777 line 297 lat: -30.157337
    test 1778 line 297 lon: 14.759636
    test 1779 line 297 fb: 157.487063
    test 1780 line 297 lat2: -30.157336788088
    test 1781 line 297 lon2: 14.759635614931
    test 1782 line 297 azi2: 157.487063280783
    test 1783 line 298 lat: -16.819268
    test 1784 line 298 lon: 22.734618
    test 1785 line 298 fb: 167.761663
    test 1786 line 298 lat2: -16.819268371139
    test 1787 line 298 lon2: 22.734618221531
    test 1788 line 298 azi2: 167.761663436059
    test 1789 line 299 lat: 58.190743
    test 1790 line 299 lon: 15.576363
    test 1791 line 299 fb: 71.213972
    test 1792 line 299 lat2: 58.190742593673
    test 1793 line 299 lon2: 15.576363250416
    test 1794 line 299 azi2: 71.213972172079
    test 1795 line 300 lat: 57.214981
    test 1796 line 300 lon: 163.530752
    test 1797 line 300 fb: 162.056064
    test 1798 line 300 lat2: 57.214981133823
    test 1799 line 300 lon2: 163.530751680014
    test 1800 line 300 azi2: 162.056064225923
    test 1801 line 301 lat: 31.811818
    test 1802 line 301 lon: 81.663494
    test 1803 line 301 fb: 112.546404
    test 1804 line 301 lat2: 31.811817748936
    test 1805 line 301 lon2: 81.663494432962
    test 1806 line 301 azi2: 112.546403824977
    test 1807 line 302 lat: -11.315727
    test 1808 line 302 lon: 48.409490
    test 1809 line 302 fb: 121.434574
    test 1810 line 302 lat2: -11.315726799012
    test 1811 line 302 lon2: 48.409489590525
    test 1812 line 302 azi2: 121.434573764585
    test 1813 line 303 lat: 6.119956
    test 1814 line 303 lon: 5.687908
    test 1815 line 303 fb: 94.977171
    test 1816 line 303 lat2: 6.119956010623
    test 1817 line 303 lon2: 5.687908365969
    test 1818 line 303 azi2: 94.977170961146
    test 1819 line 304 lat: -13.455263
    test 1820 line 304 lon: 92.797729
    test 1821 line 304 fb: 125.067595
    test 1822 line 304 lat2: -13.455262906771
    test 1823 line 304 lon2: 92.797729354548
    test 1824 line 304 azi2: 125.067595131171
    test 1825 line 305 lat: -61.258454
    test 1826 line 305 lon: 32.464613
    test 1827 line 305 fb: 153.578300
    test 1828 line 305 lat2: -61.258454070259
    test 1829 line 305 lon2: 32.464613321886
    test 1830 line 305 azi2: 153.578299580216
    test 1831 line 306 lat: 76.656194
    test 1832 line 306 lon: 147.658262
    test 1833 line 306 fb: 154.870277
    test 1834 line 306 lat2: 76.656194303754
    test 1835 line 306 lon2: 147.658261698859
    test 1836 line 306 azi2: 154.870276891567
    test 1837 line 307 lat: 38.020470
    test 1838 line 307 lon: 22.502210
    test 1839 line 307 fb: 164.603876
    test 1840 line 307 lat2: 38.020470355438
    test 1841 line 307 lon2: 22.502210018002
    test 1842 line 307 azi2: 164.603876406614
    test 1843 line 308 lat: -28.475186
    test 1844 line 308 lon: 125.031589
    test 1845 line 308 fb: 71.946314
    test 1846 line 308 lat2: -28.475185707347
    test 1847 line 308 lon2: 125.031589334958
    test 1848 line 308 azi2: 71.946313988393
    test 1849 line 309 lat: 33.123700
    test 1850 line 309 lon: 47.796870
    test 1851 line 309 fb: 66.233041
    test 1852 line 309 lat2: 33.123699771125
    test 1853 line 309 lon2: 47.796870281285
    test 1854 line 309 azi2: 66.233040505915
    test 1855 line 310 lat: 36.967606
    test 1856 line 310 lon: 91.462107
    test 1857 line 310 fb: 113.555931
    test 1858 line 310 lat2: 36.967605507925
    test 1859 line 310 lon2: 91.462107367844
    test 1860 line 310 azi2: 113.555931272414
    test 1861 line 311 lat: -3.784112
    test 1862 line 311 lon: 75.465096
    test 1863 line 311 fb: 146.940895
    test 1864 line 311 lat2: -3.784112064078
    test 1865 line 311 lon2: 75.465096433718
    test 1866 line 311 azi2: 146.940895363525
    test 1867 line 312 lat: 10.772454
    test 1868 line 312 lon: 162.137695
    test 1869 line 312 fb: 176.774643
    test 1870 line 312 lat2: 10.772454234711  FAILED, KNOWN, expected 10.772454234710
    test 1871 line 312 lon2: 162.137694811372
    test 1872 line 312 azi2: 176.774642770857
    test 1873 line 313 lat: 23.928740
    test 1874 line 313 lon: 28.953169
    test 1875 line 313 fb: 143.614710
    test 1876 line 313 lat2: 23.928739648982
    test 1877 line 313 lon2: 28.953169497861
    test 1878 line 313 azi2: 143.614709768381
    test 1879 line 314 lat: 5.199377
    test 1880 line 314 lon: 162.802668
    test 1881 line 314 fb: 146.857520
    test 1882 line 314 lat2: 5.199376594428
    test 1883 line 314 lon2: 162.802668362269
    test 1884 line 314 azi2: 146.857519761344
    test 1885 line 315 lat: 6.285334
    test 1886 line 315 lon: 164.204548
    test 1887 line 315 fb: 159.451359
    test 1888 line 315 lat2: 6.285334322282
    test 1889 line 315 lon2: 164.204548022855
    test 1890 line 315 azi2: 159.451359223111
    test 1891 line 316 lat: -8.151874
    test 1892 line 316 lon: 43.923539
    test 1893 line 316 fb: 121.501273
    test 1894 line 316 lat2: -8.151873580306
    test 1895 line 316 lon2: 43.923539410568
    test 1896 line 316 azi2: 121.501272690158
    test 1897 line 317 lat: 20.145480
    test 1898 line 317 lon: 92.310645
    test 1899 line 317 fb: 97.369333
    test 1900 line 317 lat2: 20.145480383316
    test 1901 line 317 lon2: 92.310644735772
    test 1902 line 317 azi2: 97.369333245027
    test 1903 line 318 lat: 38.715579
    test 1904 line 318 lon: 89.141427
    test 1905 line 318 fb: 100.831087
    test 1906 line 318 lat2: 38.715578802658
    test 1907 line 318 lon2: 89.141426830360
    test 1908 line 318 azi2: 100.831086703170
    test 1909 line 319 lat: -25.760685
    test 1910 line 319 lon: 145.864001
    test 1911 line 319 fb: 142.714674
    test 1912 line 319 lat2: -25.760685020607
    test 1913 line 319 lon2: 145.864001048187
    test 1914 line 319 azi2: 142.714673928912
    test 1915 line 320 lat: 49.387283
    test 1916 line 320 lon: 28.917044
    test 1917 line 320 fb: 61.545235
    test 1918 line 320 lat2: 49.387283074155
    test 1919 line 320 lon2: 28.917043656754
    test 1920 line 320 azi2: 61.545235148403
    test 1921 line 321 lat: 10.120685
    test 1922 line 321 lon: 2.869738
    test 1923 line 321 fb: 176.526916
    test 1924 line 321 lat2: 10.120685293027
    test 1925 line 321 lon2: 2.869737593886
    test 1926 line 321 azi2: 176.526915822865
    test 1927 line 322 lat: 2.463216
    test 1928 line 322 lon: 102.917600
    test 1929 line 322 fb: 170.609004
    test 1930 line 322 lat2: 2.463216066166
    test 1931 line 322 lon2: 102.917599852201
    test 1932 line 322 azi2: 170.609003610639
    test 1933 line 323 lat: 58.201294
    test 1934 line 323 lon: 155.022079
    test 1935 line 323 fb: 153.181269
    test 1936 line 323 lat2: 58.201293688923
    test 1937 line 323 lon2: 155.022079105501
    test 1938 line 323 azi2: 153.181268692773
    test 1939 line 324 lat: 3.089608
    test 1940 line 324 lon: 20.686800
    test 1941 line 324 fb: 144.857820
    test 1942 line 324 lat2: 3.089607756265
    test 1943 line 324 lon2: 20.686800266169
    test 1944 line 324 azi2: 144.857820265585
    test 1945 line 325 lat: 48.232274
    test 1946 line 325 lon: 18.567244
    test 1947 line 325 fb: 24.556438
    test 1948 line 325 lat2: 48.232274219515
    test 1949 line 325 lon2: 18.567244222293
    test 1950 line 325 azi2: 24.556437713520
    test 1951 line 326 lat: 30.265261
    test 1952 line 326 lon: 7.440738
    test 1953 line 326 fb: 142.022972
    test 1954 line 326 lat2: 30.265261486767
    test 1955 line 326 lon2: 7.440737656545
    test 1956 line 326 azi2: 142.022971576270
    test 1957 line 327 lat: -11.166197
    test 1958 line 327 lon: 176.728934
    test 1959 line 327 fb: 24.287273
    test 1960 line 327 lat2: -11.166197413148
    test 1961 line 327 lon2: 176.728933575636
    test 1962 line 327 azi2: 24.287272842989
    test 1963 line 328 lat: 84.645539
    test 1964 line 328 lon: 90.023922
    test 1965 line 328 fb: 92.786262
    test 1966 line 328 lat2: 84.645539196082
    test 1967 line 328 lon2: 90.023922499395
    test 1968 line 328 azi2: 92.786261566828  FAILED, KNOWN, expected 92.786261566827
    test 1969 line 329 lat: 61.618717
    test 1970 line 329 lon: 162.510959
    test 1971 line 329 fb: 160.923940
    test 1972 line 329 lat2: 61.618716728051
    test 1973 line 329 lon2: 162.510958917359
    test 1974 line 329 azi2: 160.923939760553
    test 1975 line 330 lat: 27.643242
    test 1976 line 330 lon: 45.376215
    test 1977 line 330 fb: 147.964522
    test 1978 line 330 lat2: 27.643242341173
    test 1979 line 330 lon2: 45.376215094118
    test 1980 line 330 azi2: 147.964522484664
    test 1981 line 331 lat: 2.218750
    test 1982 line 331 lon: 170.358342
    test 1983 line 331 fb: 141.658474
    test 1984 line 331 lat2: 2.218749985364
    test 1985 line 331 lon2: 170.358342078292
    test 1986 line 331 azi2: 141.658474129787
    test 1987 line 332 lat: 26.019142
    test 1988 line 332 lon: 32.534760
    test 1989 line 332 fb: 128.159784
    test 1990 line 332 lat2: 26.019142329663
    test 1991 line 332 lon2: 32.534760195963
    test 1992 line 332 azi2: 128.159784291645
    test 1993 line 333 lat: 10.049636
    test 1994 line 333 lon: 72.205347
    test 1995 line 333 fb: 143.602160
    test 1996 line 333 lat2: 10.049636247749
    test 1997 line 333 lon2: 72.205346955818
    test 1998 line 333 azi2: 143.602159725306
    test 1999 line 334 lat: -31.030497
    test 2000 line 334 lon: 91.539195
    test 2001 line 334 fb: 109.891398
    test 2002 line 334 lat2: -31.030496743715
    test 2003 line 334 lon2: 91.539195292896
    test 2004 line 334 azi2: 109.891398221790
    test 2005 line 335 lat: 30.113796
    test 2006 line 335 lon: 109.096982
    test 2007 line 335 fb: 146.779343
    test 2008 line 335 lat2: 30.113795853670  FAILED, KNOWN, expected 30.113795853671
    test 2009 line 335 lon2: 109.096981631502
    test 2010 line 335 azi2: 146.779343066541
    test 2011 line 336 lat: -73.967996
    test 2012 line 336 lon: 65.944243
    test 2013 line 336 fb: 120.592999
    test 2014 line 336 lat2: -73.967996185770
    test 2015 line 336 lon2: 65.944242524678
    test 2016 line 336 azi2: 120.592998665529
    test 2017 line 337 lat: 52.211150
    test 2018 line 337 lon: 168.054185
    test 2019 line 337 fb: 172.425992
    test 2020 line 337 lat2: 52.211149755494
    test 2021 line 337 lon2: 168.054184827868
    test 2022 line 337 azi2: 172.425991612467
    test 2023 line 338 lat: -64.497146
    test 2024 line 338 lon: 72.073419
    test 2025 line 338 fb: 114.249129
    test 2026 line 338 lat2: -64.497146189688
    test 2027 line 338 lon2: 72.073418936581
    test 2028 line 338 azi2: 114.249128850219
    test 2029 line 339 lat: -25.711399
    test 2030 line 339 lon: 6.036423
    test 2031 line 339 fb: 169.464098
    test 2032 line 339 lat2: -25.711398997503
    test 2033 line 339 lon2: 6.036423474639
    test 2034 line 339 azi2: 169.464098294263
    test 2035 line 340 lat: 33.904613
    test 2036 line 340 lon: 30.989094
    test 2037 line 340 fb: 124.896016
    test 2038 line 340 lat2: 33.904613360449
    test 2039 line 340 lon2: 30.989094387217
    test 2040 line 340 azi2: 124.896016003640
    test 2041 line 341 lat: -25.053080
    test 2042 line 341 lon: 137.078639
    test 2043 line 341 fb: 115.960750
    test 2044 line 341 lat2: -25.053079543516
    test 2045 line 341 lon2: 137.078638665495
    test 2046 line 341 azi2: 115.960750169086
    test 2047 line 342 lat: 10.298031
    test 2048 line 342 lon: 27.737374
    test 2049 line 342 fb: 142.265457
    test 2050 line 342 lat2: 10.298031202629
    test 2051 line 342 lon2: 27.737373649973
    test 2052 line 342 azi2: 142.265457288483
    test 2053 line 343 lat: -0.738692
    test 2054 line 343 lon: 150.933627
    test 2055 line 343 fb: 174.004688
    test 2056 line 343 lat2: -0.738692377457
    test 2057 line 343 lon2: 150.933627031610
    test 2058 line 343 azi2: 174.004687728765
    test 2059 line 344 lat: 50.619289
    test 2060 line 344 lon: 67.178203
    test 2061 line 344 fb: 105.177353
    test 2062 line 344 lat2: 50.619289349009
    test 2063 line 344 lon2: 67.178203328135
    test 2064 line 344 azi2: 105.177353051107
    test 2065 line 345 lat: -2.127739
    test 2066 line 345 lon: 38.604245
    test 2067 line 345 fb: 118.657849
    test 2068 line 345 lat2: -2.127739360728
    test 2069 line 345 lon2: 38.604245449983
    test 2070 line 345 azi2: 118.657849063154
    test 2071 line 346 lat: 37.188367
    test 2072 line 346 lon: 90.865255
    test 2073 line 346 fb: 104.826548
    test 2074 line 346 lat2: 37.188366752551
    test 2075 line 346 lon2: 90.865255121714
    test 2076 line 346 azi2: 104.826548310924
    test 2077 line 347 lat: 46.019257
    test 2078 line 347 lon: 20.402591
    test 2079 line 347 fb: 31.068588
    test 2080 line 347 lat2: 46.019256998097
    test 2081 line 347 lon2: 20.402590686048
    test 2082 line 347 azi2: 31.068587858373
    test 2083 line 348 lat: 9.023356
    test 2084 line 348 lon: 106.678645
    test 2085 line 348 fb: 141.375490
    test 2086 line 348 lat2: 9.023355647006
    test 2087 line 348 lon2: 106.678645473545
    test 2088 line 348 azi2: 141.375490245645
    test 2089 line 349 lat: -1.321473
    test 2090 line 349 lon: 67.418879
    test 2091 line 349 fb: 105.590913
    test 2092 line 349 lat2: -1.321473235187
    test 2093 line 349 lon2: 67.418878731595
    test 2094 line 349 azi2: 105.590912857546
    test 2095 line 350 lat: 7.459339
    test 2096 line 350 lon: 30.150648
    test 2097 line 350 fb: 109.667752
    test 2098 line 350 lat2: 7.459338626177
    test 2099 line 350 lon2: 30.150648477470
    test 2100 line 350 azi2: 109.667751753912
    test 2101 line 351 lat: 16.344755
    test 2102 line 351 lon: 146.829160
    test 2103 line 351 fb: 128.666192
    test 2104 line 351 lat2: 16.344755038185
    test 2105 line 351 lon2: 146.829159972334
    test 2106 line 351 azi2: 128.666191953616
    test 2107 line 352 lat: -55.785670
    test 2108 line 352 lon: 158.086173
    test 2109 line 352 fb: 33.903277
    test 2110 line 352 lat2: -55.785670347270
    test 2111 line 352 lon2: 158.086173376809
    test 2112 line 352 azi2: 33.903276835071
    test 2113 line 353 lat: -74.409604
    test 2114 line 353 lon: 111.280935
    test 2115 line 353 fb: 78.510830
    test 2116 line 353 lat2: -74.409603561050
    test 2117 line 353 lon2: 111.280934985966  FAILED, KNOWN, expected 111.280934985965
    test 2118 line 353 azi2: 78.510830028461
    test 2119 line 354 lat: 9.922204
    test 2120 line 354 lon: 138.538334
    test 2121 line 354 fb: 125.268473
    test 2122 line 354 lat2: 9.922203731557
    test 2123 line 354 lon2: 138.538333703571
    test 2124 line 354 azi2: 125.268473410634
    test 2125 line 355 lat: -27.082389
    test 2126 line 355 lon: 91.425844
    test 2127 line 355 fb: 153.267616
    test 2128 line 355 lat2: -27.082389068808  FAILED, KNOWN, expected -27.082389068807
    test 2129 line 355 lon2: 91.425843733185
    test 2130 line 355 azi2: 153.267616113653
    test 2131 line 356 lat: 14.627508
    test 2132 line 356 lon: 74.629605
    test 2133 line 356 fb: 159.825211
    test 2134 line 356 lat2: 14.627507744773
    test 2135 line 356 lon2: 74.629604673488
    test 2136 line 356 azi2: 159.825210987464
    test 2137 line 357 lat: 46.941087
    test 2138 line 357 lon: 18.833436
    test 2139 line 357 fb: 63.924917
    test 2140 line 357 lat2: 46.941086934169
    test 2141 line 357 lon2: 18.833435620675
    test 2142 line 357 azi2: 63.924916745148
    test 2143 line 358 lat: 42.371666
    test 2144 line 358 lon: 126.270074
    test 2145 line 358 fb: 117.352107
    test 2146 line 358 lat2: 42.371665615782
    test 2147 line 358 lon2: 126.270074354353
    test 2148 line 358 azi2: 117.352106840236
    test 2149 line 359 lat: 60.888684
    test 2150 line 359 lon: 106.363657
    test 2151 line 359 fb: 108.973271
    test 2152 line 359 lat2: 60.888683732870
    test 2153 line 359 lon2: 106.363656697522
    test 2154 line 359 azi2: 108.973271101790
    test 2155 line 360 lat: 53.972090
    test 2156 line 360 lon: 136.000658
    test 2157 line 360 fb: 138.361589
    test 2158 line 360 lat2: 53.972089572795
    test 2159 line 360 lon2: 136.000657911062
    test 2160 line 360 azi2: 138.361588598638
    test 2161 line 361 lat: 47.850867
    test 2162 line 361 lon: 25.277934
    test 2163 line 361 fb: 71.284668
    test 2164 line 361 lat2: 47.850866585267
    test 2165 line 361 lon2: 25.277933660114
    test 2166 line 361 azi2: 71.284667717290
    test 2167 line 362 lat: 64.280614
    test 2168 line 362 lon: 16.447697
    test 2169 line 362 fb: 35.692750
    test 2170 line 362 lat2: 64.280614171157
    test 2171 line 362 lon2: 16.447696559380
    test 2172 line 362 azi2: 35.692750218622
    test 2173 line 363 lat: -3.339044
    test 2174 line 363 lon: 91.646260
    test 2175 line 363 fb: 95.928001
    test 2176 line 363 lat2: -3.339044133285
    test 2177 line 363 lon2: 91.646260438368
    test 2178 line 363 azi2: 95.928000721064
    test 2179 line 364 lat: -46.029875
    test 2180 line 364 lon: 30.599197
    test 2181 line 364 fb: 146.810525
    test 2182 line 364 lat2: -46.029874698950
    test 2183 line 364 lon2: 30.599196661458
    test 2184 line 364 azi2: 146.810525207719
    test 2185 line 365 lat: 25.605076
    test 2186 line 365 lon: 14.382003
    test 2187 line 365 fb: 116.566847
    test 2188 line 365 lat2: 25.605076391429
    test 2189 line 365 lon2: 14.382002787798
    test 2190 line 365 azi2: 116.566847403824
    test 2191 line 366 lat: -15.052413
    test 2192 line 366 lon: 150.673460
    test 2193 line 366 fb: 64.906721
    test 2194 line 366 lat2: -15.052412502534
    test 2195 line 366 lon2: 150.673460237577
    test 2196 line 366 azi2: 64.906720897603
    test 2197 line 367 lat: -24.631882
    test 2198 line 367 lon: 170.403348
    test 2199 line 367 fb: 38.497784
    test 2200 line 367 lat2: -24.631881773331
    test 2201 line 367 lon2: 170.403348095216
    test 2202 line 367 azi2: 38.497783925432
    test 2203 line 368 lat: 84.347730
    test 2204 line 368 lon: 37.352130
    test 2205 line 368 fb: 38.599794
    test 2206 line 368 lat2: 84.347730272741
    test 2207 line 368 lon2: 37.352130023033
    test 2208 line 368 azi2: 38.599794179850
    test 2209 line 369 lat: 11.680773
    test 2210 line 369 lon: 170.552617
    test 2211 line 369 fb: 174.460436
    test 2212 line 369 lat2: 11.680772997529
    test 2213 line 369 lon2: 170.552617119135
    test 2214 line 369 azi2: 174.460435573783
    test 2215 line 370 lat: -4.129058
    test 2216 line 370 lon: 136.743627
    test 2217 line 370 fb: 142.147604
    test 2218 line 370 lat2: -4.129057873299
    test 2219 line 370 lon2: 136.743626644380
    test 2220 line 370 azi2: 142.147603954035
    test 2221 line 371 lat: 22.191782
    test 2222 line 371 lon: 164.962392
    test 2223 line 371 fb: 163.266967
    test 2224 line 371 lat2: 22.191782097783
    test 2225 line 371 lon2: 164.962391587580
    test 2226 line 371 azi2: 163.266967353376
    test 2227 line 372 lat: -20.517212
    test 2228 line 372 lon: 128.116444
    test 2229 line 372 fb: 110.769757
    test 2230 line 372 lat2: -20.517212185628
    test 2231 line 372 lon2: 128.116443546305
    test 2232 line 372 azi2: 110.769757212730
    test 2233 line 373 lat: -71.269219
    test 2234 line 373 lon: 117.744329
    test 2235 line 373 fb: 81.341006
    test 2236 line 373 lat2: -71.269218648518
    test 2237 line 373 lon2: 117.744328537214
    test 2238 line 373 azi2: 81.341005509003
    test 2239 line 374 lat: -28.381893
    test 2240 line 374 lon: 4.526029
    test 2241 line 374 fb: 176.348678
    test 2242 line 374 lat2: -28.381892766057
    test 2243 line 374 lon2: 4.526028955177
    test 2244 line 374 azi2: 176.348678015377
    test 2245 line 375 lat: -28.786090
    test 2246 line 375 lon: 25.937634
    test 2247 line 375 fb: 147.973102
    test 2248 line 375 lat2: -28.786089606638
    test 2249 line 375 lon2: 25.937634058027
    test 2250 line 375 azi2: 147.973102126478
    test 2251 line 376 lat: -37.872672
    test 2252 line 376 lon: 116.904193
    test 2253 line 376 fb: 88.568636
    test 2254 line 376 lat2: -37.872671755645
    test 2255 line 376 lon2: 116.904192578457
    test 2256 line 376 azi2: 88.568636418662
    test 2257 line 377 lat: -26.321447
    test 2258 line 377 lon: 85.206987
    test 2259 line 377 fb: 112.408109
    test 2260 line 377 lat2: -26.321446841940
    test 2261 line 377 lon2: 85.206986852002  FAILED, KNOWN, expected 85.206986852001
    test 2262 line 377 azi2: 112.408108683681
    test 2263 line 378 lat: -54.824260
    test 2264 line 378 lon: 156.561574
    test 2265 line 378 fb: 45.534810
    test 2266 line 378 lat2: -54.824260467184
    test 2267 line 378 lon2: 156.561573965853
    test 2268 line 378 azi2: 45.534810497878
    test 2269 line 379 lat: -16.423550
    test 2270 line 379 lon: 36.685134
    test 2271 line 379 fb: 149.426790
    test 2272 line 379 lat2: -16.423550298805
    test 2273 line 379 lon2: 36.685133578511
    test 2274 line 379 azi2: 149.426789575292
    test 2275 line 380 lat: -16.806591
    test 2276 line 380 lon: 149.738610
    test 2277 line 380 fb: 108.898472
    test 2278 line 380 lat2: -16.806590952462
    test 2279 line 380 lon2: 149.738610286185
    test 2280 line 380 azi2: 108.898472198507
    test 2281 line 381 lat: 61.200095
    test 2282 line 381 lon: 179.666196
    test 2283 line 381 fb: 179.746894
    test 2284 line 381 lat2: 61.200095175201
    test 2285 line 381 lon2: 179.666196014679
    test 2286 line 381 azi2: 179.746893753530
    test 2287 line 382 lat: 66.474418
    test 2288 line 382 lon: 1.552183
    test 2289 line 382 fb: 2.088868
    test 2290 line 382 lat2: 66.474418401288
    test 2291 line 382 lon2: 1.552183188407
    test 2292 line 382 azi2: 2.088868324926
    test 2293 line 383 lat: -75.177220
    test 2294 line 383 lon: 158.741597
    test 2295 line 383 fb: 24.127094
    test 2296 line 383 lat2: -75.177219719926
    test 2297 line 383 lon2: 158.741596988185
    test 2298 line 383 azi2: 24.127093846134
    test 2299 line 384 lat: 43.592977
    test 2300 line 384 lon: 90.684526
    test 2301 line 384 fb: 91.539242
    test 2302 line 384 lat2: 43.592976578444
    test 2303 line 384 lon2: 90.684525887486
    test 2304 line 384 azi2: 91.539242394540
    test 2305 line 385 lat: -5.075415
    test 2306 line 385 lon: 101.127103
    test 2307 line 385 fb: 107.948022
    test 2308 line 385 lat2: -5.075415464229
    test 2309 line 385 lon2: 101.127103351067
    test 2310 line 385 azi2: 107.948021613622
    test 2311 line 386 lat: 50.406166
    test 2312 line 386 lon: 135.501939
    test 2313 line 386 fb: 162.003144
    test 2314 line 386 lat2: 50.406165949083
    test 2315 line 386 lon2: 135.501938931444
    test 2316 line 386 azi2: 162.003144394969
    test 2317 line 387 lat: -17.207733
    test 2318 line 387 lon: 43.634692
    test 2319 line 387 fb: 136.506793
    test 2320 line 387 lat2: -17.207732564306
    test 2321 line 387 lon2: 43.634692466982
    test 2322 line 387 azi2: 136.506792603897
    test 2323 line 388 lat: -28.917723
    test 2324 line 388 lon: 163.486470
    test 2325 line 388 fb: 38.990274
    test 2326 line 388 lat2: -28.917723347931
    test 2327 line 388 lon2: 163.486470248682
    test 2328 line 388 azi2: 38.990273918754
    test 2329 line 389 lat: -32.592414
    test 2330 line 389 lon: 76.048812
    test 2331 line 389 fb: 98.024249
    test 2332 line 389 lat2: -32.592414472935
    test 2333 line 389 lon2: 76.048812057267
    test 2334 line 389 azi2: 98.024248734062
    test 2335 line 390 lat: 50.602735
    test 2336 line 390 lon: 49.792893
    test 2337 line 390 fb: 110.500761
    test 2338 line 390 lat2: 50.602735331532
    test 2339 line 390 lon2: 49.792893095354
    test 2340 line 390 azi2: 110.500760610103
    test 2341 line 391 lat: -4.912232
    test 2342 line 391 lon: 142.681744
    test 2343 line 391 fb: 119.428358
    test 2344 line 391 lat2: -4.912231564840
    test 2345 line 391 lon2: 142.681743549937
    test 2346 line 391 azi2: 119.428358444443
    test 2347 line 392 lat: -45.213515
    test 2348 line 392 lon: 131.987859
    test 2349 line 392 fb: 96.014100
    test 2350 line 392 lat2: -45.213514932524
    test 2351 line 392 lon2: 131.987859404857
    test 2352 line 392 azi2: 96.014100177113  FAILED, KNOWN, expected 96.014100177112
    test 2353 line 393 lat: -27.151096
    test 2354 line 393 lon: 127.729463
    test 2355 line 393 fb: 85.960623
    test 2356 line 393 lat2: -27.151095883523
    test 2357 line 393 lon2: 127.729463064736
    test 2358 line 393 azi2: 85.960623495334
    test 2359 line 394 lat: 8.000358
    test 2360 line 394 lon: 144.233747
    test 2361 line 394 fb: 142.364017
    test 2362 line 394 lat2: 8.000357843774
    test 2363 line 394 lon2: 144.233746766535
    test 2364 line 394 azi2: 142.364016793767
    test 2365 line 395 lat: -6.431774
    test 2366 line 395 lon: 170.549196
    test 2367 line 395 fb: 122.180851
    test 2368 line 395 lat2: -6.431773707290
    test 2369 line 395 lon2: 170.549196384306
    test 2370 line 395 azi2: 122.180850600243
    test 2371 line 396 lat: 62.834146
    test 2372 line 396 lon: 171.218298
    test 2373 line 396 fb: 175.117433
    test 2374 line 396 lat2: 62.834146216572
    test 2375 line 396 lon2: 171.218297548713
    test 2376 line 396 azi2: 175.117432600362
    test 2377 line 397 lat: 22.902814
    test 2378 line 397 lon: 70.233438
    test 2379 line 397 fb: 120.935912
    test 2380 line 397 lat2: 22.902813652262
    test 2381 line 397 lon2: 70.233438162142
    test 2382 line 397 azi2: 120.935911762169
    test 2383 line 398 lat: 22.584853
    test 2384 line 398 lon: 31.616865
    test 2385 line 398 fb: 107.124038
    test 2386 line 398 lat2: 22.584853282541
    test 2387 line 398 lon2: 31.616864803984
    test 2388 line 398 azi2: 107.124038156545
    test 2389 line 399 lat: 31.269173
    test 2390 line 399 lon: 65.399306
    test 2391 line 399 fb: 151.892600
    test 2392 line 399 lat2: 31.269173344204
    test 2393 line 399 lon2: 65.399305777763
    test 2394 line 399 azi2: 151.892599739667
    test 2395 line 400 lat: 35.519614
    test 2396 line 400 lon: 143.165122
    test 2397 line 400 fb: 161.479891
    test 2398 line 400 lat2: 35.519613515115
    test 2399 line 400 lon2: 143.165121509798
    test 2400 line 400 azi2: 161.479891246031
    test 2401 line 401 lat: -53.741922
    test 2402 line 401 lon: 67.121402
    test 2403 line 401 fb: 130.871188
    test 2404 line 401 lat2: -53.741921506580
    test 2405 line 401 lon2: 67.121402135047
    test 2406 line 401 azi2: 130.871188003209
    test 2407 line 402 lat: 9.046227
    test 2408 line 402 lon: 35.933737
    test 2409 line 402 fb: 175.770789
    test 2410 line 402 lat2: 9.046227267580
    test 2411 line 402 lon2: 35.933736921417
    test 2412 line 402 azi2: 175.770788535406
    test 2413 line 403 lat: 75.917034
    test 2414 line 403 lon: 125.150808
    test 2415 line 403 fb: 135.354467
    test 2416 line 403 lat2: 75.917034235438
    test 2417 line 403 lon2: 125.150808062636
    test 2418 line 403 azi2: 135.354466840051
    test 2419 line 404 lat: -39.724826
    test 2420 line 404 lon: 77.372087
    test 2421 line 404 fb: 111.852577
    test 2422 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 2423 line 404 lon2: 77.372086855267
    test 2424 line 404 azi2: 111.852577362108
    test 2425 line 405 lat: 3.917212
    test 2426 line 405 lon: 142.621752
    test 2427 line 405 fb: 124.176952
    test 2428 line 405 lat2: 3.917212154431
    test 2429 line 405 lon2: 142.621751764236
    test 2430 line 405 azi2: 124.176952499321
    test 2431 line 406 lat: 60.230364
    test 2432 line 406 lon: 26.245689
    test 2433 line 406 fb: 48.509486
    test 2434 line 406 lat2: 60.230364486607
    test 2435 line 406 lon2: 26.245688508507
    test 2436 line 406 azi2: 48.509486474608
    test 2437 line 407 lat: 29.597322
    test 2438 line 407 lon: 29.129808
    test 2439 line 407 fb: 79.288539
    test 2440 line 407 lat2: 29.597322070518
    test 2441 line 407 lon2: 29.129807944898
    test 2442 line 407 azi2: 79.288538667829
    test 2443 line 408 lat: -62.913760
    test 2444 line 408 lon: 14.845859
    test 2445 line 408 fb: 165.794536
    test 2446 line 408 lat2: -62.913759669564
    test 2447 line 408 lon2: 14.845859018930
    test 2448 line 408 azi2: 165.794535940950
    test 2449 line 409 lat: 15.360446
    test 2450 line 409 lon: 161.450680
    test 2451 line 409 fb: 164.457024
    test 2452 line 409 lat2: 15.360445685187
    test 2453 line 409 lon2: 161.450680426049
    test 2454 line 409 azi2: 164.457024354600
    test 2455 line 410 lat: -58.330109
    test 2456 line 410 lon: 17.628134
    test 2457 line 410 fb: 161.349788
    test 2458 line 410 lat2: -58.330108507597
    test 2459 line 410 lon2: 17.628133627705
    test 2460 line 410 azi2: 161.349788081184
    test 2461 line 411 lat: -68.514277
    test 2462 line 411 lon: 19.958792
    test 2463 line 411 fb: 162.262811
    test 2464 line 411 lat2: -68.514276940652
    test 2465 line 411 lon2: 19.958792438281
    test 2466 line 411 azi2: 162.262811488702
    test 2467 line 412 lat: -23.686766
    test 2468 line 412 lon: 77.544158
    test 2469 line 412 fb: 97.517041
    test 2470 line 412 lat2: -23.686765736999
    test 2471 line 412 lon2: 77.544158137101
    test 2472 line 412 azi2: 97.517041033585
    test 2473 line 413 lat: -50.843575
    test 2474 line 413 lon: 118.404202
    test 2475 line 413 fb: 75.928950
    test 2476 line 413 lat2: -50.843574559525
    test 2477 line 413 lon2: 118.404202153051
    test 2478 line 413 azi2: 75.928950296488
    test 2479 line 414 lat: 44.438742
    test 2480 line 414 lon: 152.028260
    test 2481 line 414 fb: 156.092336
    test 2482 line 414 lat2: 44.438741945021
    test 2483 line 414 lon2: 152.028260148130
    test 2484 line 414 azi2: 156.092336139519
    test 2485 line 415 lat: 33.820395
    test 2486 line 415 lon: 178.008342
    test 2487 line 415 fb: 177.679586
    test 2488 line 415 lat2: 33.820395378014
    test 2489 line 415 lon2: 178.008341908011
    test 2490 line 415 azi2: 177.679585823345
    test 2491 line 416 lat: 27.506735
    test 2492 line 416 lon: 153.242452
    test 2493 line 416 fb: 150.262824
    test 2494 line 416 lat2: 27.506735286152
    test 2495 line 416 lon2: 153.242452449881
    test 2496 line 416 azi2: 150.262824421351
    test 2497 line 417 lat: -31.250437
    test 2498 line 417 lon: 179.014499
    test 2499 line 417 fb: 178.103046
    test 2500 line 417 lat2: -31.250436707468
    test 2501 line 417 lon2: 179.014498940190
    test 2502 line 417 azi2: 178.103045898455
    test 2503 line 418 lat: 40.341542
    test 2504 line 418 lon: 109.605984
    test 2505 line 418 fb: 105.401958
    test 2506 line 418 lat2: 40.341542234586
    test 2507 line 418 lon2: 109.605984313079
    test 2508 line 418 azi2: 105.401958406556
    test 2509 line 419 lat: 48.318632
    test 2510 line 419 lon: 92.282799
    test 2511 line 419 fb: 111.987482
    test 2512 line 419 lat2: 48.318632112439
    test 2513 line 419 lon2: 92.282799489208
    test 2514 line 419 azi2: 111.987482299261
    test 2515 line 420 lat: 0.675299
    test 2516 line 420 lon: 6.789301
    test 2517 line 420 fb: 164.921926
    test 2518 line 420 lat2: 0.675299289459
    test 2519 line 420 lon2: 6.789300798072
    test 2520 line 420 azi2: 164.921926385405
    test 2521 line 421 lat: 33.232812
    test 2522 line 421 lon: 170.163205
    test 2523 line 421 fb: 175.445424
    test 2524 line 421 lat2: 33.232811536179
    test 2525 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 2526 line 421 azi2: 175.445424087910
    test 2527 line 422 lat: 51.425532
    test 2528 line 422 lon: 167.128188
    test 2529 line 422 fb: 169.431307
    test 2530 line 422 lat2: 51.425532151818
    test 2531 line 422 lon2: 167.128188073883
    test 2532 line 422 azi2: 169.431306547043
    test 2533 line 423 lat: 72.043795
    test 2534 line 423 lon: 23.320161
    test 2535 line 423 fb: 85.002463
    test 2536 line 423 lat2: 72.043794732818
    test 2537 line 423 lon2: 23.320160820556
    test 2538 line 423 azi2: 85.002463342037
    test 2539 line 424 lat: 55.279253
    test 2540 line 424 lon: 148.483684
    test 2541 line 424 fb: 155.614243
    test 2542 line 424 lat2: 55.279252586695
    test 2543 line 424 lon2: 148.483684405588
    test 2544 line 424 azi2: 155.614243012977
    test 2545 line 425 lat: 50.054601
    test 2546 line 425 lon: 43.609545
    test 2547 line 425 fb: 100.758451
    test 2548 line 425 lat2: 50.054601019930
    test 2549 line 425 lon2: 43.609545475731
    test 2550 line 425 azi2: 100.758450815354
    test 2551 line 426 lat: 31.194436
    test 2552 line 426 lon: 31.458476
    test 2553 line 426 fb: 92.204244
    test 2554 line 426 lat2: 31.194436445411
    test 2555 line 426 lon2: 31.458476146984
    test 2556 line 426 azi2: 92.204244235305
    test 2557 line 427 lat: 57.758262
    test 2558 line 427 lon: 164.499274
    test 2559 line 427 fb: 162.877999
    test 2560 line 427 lat2: 57.758262113137
    test 2561 line 427 lon2: 164.499274258053
    test 2562 line 427 azi2: 162.877999232894
    test 2563 line 428 lat: 27.006898
    test 2564 line 428 lon: 173.173812
    test 2565 line 428 fb: 177.878074
    test 2566 line 428 lat2: 27.006897756516
    test 2567 line 428 lon2: 173.173811781657
    test 2568 line 428 azi2: 177.878073603766
    test 2569 line 429 lat: -62.917581
    test 2570 line 429 lon: 18.990464
    test 2571 line 429 fb: 169.629168
    test 2572 line 429 lat2: -62.917580953804
    test 2573 line 429 lon2: 18.990464058493
    test 2574 line 429 azi2: 169.629168390979
    test 2575 line 430 lat: -43.128167
    test 2576 line 430 lon: 61.680974
    test 2577 line 430 fb: 135.269008
    test 2578 line 430 lat2: -43.128166633902
    test 2579 line 430 lon2: 61.680974170546
    test 2580 line 430 azi2: 135.269008366092
    test 2581 line 431 lat: -49.314417
    test 2582 line 431 lon: 55.826072
    test 2583 line 431 fb: 131.974574
    test 2584 line 431 lat2: -49.314417365795
    test 2585 line 431 lon2: 55.826071541563
    test 2586 line 431 azi2: 131.974573587520
    test 2587 line 432 lat: -24.322411
    test 2588 line 432 lon: 103.867391
    test 2589 line 432 fb: 139.458674
    test 2590 line 432 lat2: -24.322411486444
    test 2591 line 432 lon2: 103.867391100271
    test 2592 line 432 azi2: 139.458674175181
    test 2593 line 433 lat: -19.557319
    test 2594 line 433 lon: 81.358495
    test 2595 line 433 fb: 134.029610
    test 2596 line 433 lat2: -19.557318635270
    test 2597 line 433 lon2: 81.358494523202
    test 2598 line 433 azi2: 134.029609915778
    test 2599 line 434 lat: 7.830115
    test 2600 line 434 lon: 5.114172
    test 2601 line 434 fb: 175.025641
    test 2602 line 434 lat2: 7.830115253087
    test 2603 line 434 lon2: 5.114172330857
    test 2604 line 434 azi2: 175.025640902819
    test 2605 line 435 lat: -65.834623
    test 2606 line 435 lon: 41.772796
    test 2607 line 435 fb: 143.178050
    test 2608 line 435 lat2: -65.834622858584
    test 2609 line 435 lon2: 41.772796000787
    test 2610 line 435 azi2: 143.178050120951
    test 2611 line 436 lat: -7.997604
    test 2612 line 436 lon: 31.723397
    test 2613 line 436 fb: 153.896388
    test 2614 line 436 lat2: -7.997604143032
    test 2615 line 436 lon2: 31.723396618974
    test 2616 line 436 azi2: 153.896387549518
    test 2617 line 437 lat: -22.173130
    test 2618 line 437 lon: 164.896770
    test 2619 line 437 fb: 152.675597
    test 2620 line 437 lat2: -22.173129586699
    test 2621 line 437 lon2: 164.896770399383
    test 2622 line 437 azi2: 152.675596916021
    test 2623 line 438 lat: 35.085786
    test 2624 line 438 lon: 173.892271
    test 2625 line 438 fb: 171.931231
    test 2626 line 438 lat2: 35.085785799083
    test 2627 line 438 lon2: 173.892270533009
    test 2628 line 438 azi2: 171.931230872910
    test 2629 line 439 lat: -25.378865
    test 2630 line 439 lon: 2.197740
    test 2631 line 439 fb: 178.756775
    test 2632 line 439 lat2: -25.378865450268
    test 2633 line 439 lon2: 2.197739985587
    test 2634 line 439 azi2: 178.756775063163
    test 2635 line 440 lat: -13.782608
    test 2636 line 440 lon: 143.084799
    test 2637 line 440 fb: 141.818572
    test 2638 line 440 lat2: -13.782608118540
    test 2639 line 440 lon2: 143.084798779239
    test 2640 line 440 azi2: 141.818572490275
    test 2641 line 441 lat: -16.657589
    test 2642 line 441 lon: 100.829440
    test 2643 line 441 fb: 94.804409
    test 2644 line 441 lat2: -16.657588778768
    test 2645 line 441 lon2: 100.829440071397  FAILED, KNOWN, expected 100.829440071396
    test 2646 line 441 azi2: 94.804408628371
    test 2647 line 442 lat: 23.629666
    test 2648 line 442 lon: 148.675531
    test 2649 line 442 fb: 169.091767
    test 2650 line 442 lat2: 23.629665922502
    test 2651 line 442 lon2: 148.675530832608
    test 2652 line 442 azi2: 169.091766635020
    test 2653 line 443 lat: 4.022724
    test 2654 line 443 lon: 161.803702
    test 2655 line 443 fb: 141.272785
    test 2656 line 443 lat2: 4.022724409294
    test 2657 line 443 lon2: 161.803702045621
    test 2658 line 443 azi2: 141.272784545678
    test 2659 line 444 lat: 13.280168
    test 2660 line 444 lon: 20.120413
    test 2661 line 444 fb: 158.170551
    test 2662 line 444 lat2: 13.280167579164
    test 2663 line 444 lon2: 20.120413486875
    test 2664 line 444 azi2: 158.170551379189
    test 2665 line 445 lat: -47.521450
    test 2666 line 445 lon: 150.549196
    test 2667 line 445 fb: 44.718791
    test 2668 line 445 lat2: -47.521449956879
    test 2669 line 445 lon2: 150.549196046351
    test 2670 line 445 azi2: 44.718791294775
    test 2671 line 446 lat: 17.790615
    test 2672 line 446 lon: 141.461006
    test 2673 line 446 fb: 115.746784
    test 2674 line 446 lat2: 17.790615163216
    test 2675 line 446 lon2: 141.461005551791
    test 2676 line 446 azi2: 115.746784352318
    test 2677 line 447 lat: -26.519374
    test 2678 line 447 lon: 98.067906
    test 2679 line 447 fb: 113.253929
    test 2680 line 447 lat2: -26.519374288386
    test 2681 line 447 lon2: 98.067906321718
    test 2682 line 447 azi2: 113.253928642653
    test 2683 line 448 lat: -12.401139
    test 2684 line 448 lon: 73.327970
    test 2685 line 448 fb: 124.879499
    test 2686 line 448 lat2: -12.401138571717
    test 2687 line 448 lon2: 73.327969848986
    test 2688 line 448 azi2: 124.879499241464
    test 2689 line 449 lat: 61.619396
    test 2690 line 449 lon: 99.785406
    test 2691 line 449 fb: 107.998380
    test 2692 line 449 lat2: 61.619396375102
    test 2693 line 449 lon2: 99.785406498835
    test 2694 line 449 azi2: 107.998379654880
    test 2695 line 450 lat: 36.997252
    test 2696 line 450 lon: 56.015643
    test 2697 line 450 fb: 103.921663
    test 2698 line 450 lat2: 36.997252125041
    test 2699 line 450 lon2: 56.015642631106
    test 2700 line 450 azi2: 103.921662760483
    test 2701 line 451 lat: 37.824447
    test 2702 line 451 lon: 83.438440
    test 2703 line 451 fb: 89.229164
    test 2704 line 451 lat2: 37.824446788544
    test 2705 line 451 lon2: 83.438439603294
    test 2706 line 451 azi2: 89.229164462127
    test 2707 line 452 lat: 78.387864
    test 2708 line 452 lon: 118.814812
    test 2709 line 452 fb: 133.706108
    test 2710 line 452 lat2: 78.387863550790
    test 2711 line 452 lon2: 118.814812128945
    test 2712 line 452 azi2: 133.706108131229
    test 2713 line 453 lat: -21.219381
    test 2714 line 453 lon: 53.544400
    test 2715 line 453 fb: 108.462517
    test 2716 line 453 lat2: -21.219381398156
    test 2717 line 453 lon2: 53.544399883561
    test 2718 line 453 azi2: 108.462517491505
    test 2719 line 454 lat: 63.304502
    test 2720 line 454 lon: 132.034926
    test 2721 line 454 fb: 139.912627
    test 2722 line 454 lat2: 63.304502042590
    test 2723 line 454 lon2: 132.034925840674
    test 2724 line 454 azi2: 139.912627269623
    test 2725 line 455 lat: 13.515663
    test 2726 line 455 lon: 8.989766
    test 2727 line 455 fb: 35.949535
    test 2728 line 455 lat2: 13.515662875313
    test 2729 line 455 lon2: 8.989765670730
    test 2730 line 455 azi2: 35.949534634702
    test 2731 line 456 lat: -6.742624
    test 2732 line 456 lon: 4.531931
    test 2733 line 456 fb: 171.306863
    test 2734 line 456 lat2: -6.742624347861
    test 2735 line 456 lon2: 4.531931315168
    test 2736 line 456 azi2: 171.306863155411
    test 2737 line 457 lat: -24.910509
    test 2738 line 457 lon: 128.137682
    test 2739 line 457 fb: 121.711631
    test 2740 line 457 lat2: -24.910509138681
    test 2741 line 457 lon2: 128.137681811633
    test 2742 line 457 azi2: 121.711631340407
    test 2743 line 458 lat: -40.687591
    test 2744 line 458 lon: 76.389897
    test 2745 line 458 fb: 116.394433
    test 2746 line 458 lat2: -40.687590598372
    test 2747 line 458 lon2: 76.389897347637
    test 2748 line 458 azi2: 116.394432846311
    test 2749 line 459 lat: 50.593808
    test 2750 line 459 lon: 155.175630
    test 2751 line 459 fb: 149.533910
    test 2752 line 459 lat2: 50.593807692461
    test 2753 line 459 lon2: 155.175629862288
    test 2754 line 459 azi2: 149.533910451363
    test 2755 line 460 lat: 12.198222
    test 2756 line 460 lon: 165.839456
    test 2757 line 460 fb: 172.783459
    test 2758 line 460 lat2: 12.198221826512
    test 2759 line 460 lon2: 165.839456381799
    test 2760 line 460 azi2: 172.783459292833
    test 2761 line 461 lat: 34.436568
    test 2762 line 461 lon: 7.117338
    test 2763 line 461 fb: 169.786492
    test 2764 line 461 lat2: 34.436568298724
    test 2765 line 461 lon2: 7.117337693395
    test 2766 line 461 azi2: 169.786491850891
    test 2767 line 462 lat: -3.145255
    test 2768 line 462 lon: 30.502293
    test 2769 line 462 fb: 103.563749
    test 2770 line 462 lat2: -3.145254788627
    test 2771 line 462 lon2: 30.502293345016
    test 2772 line 462 azi2: 103.563748974525
    test 2773 line 463 lat: 16.264722
    test 2774 line 463 lon: 85.497207
    test 2775 line 463 fb: 116.933863
    test 2776 line 463 lat2: 16.264722156696
    test 2777 line 463 lon2: 85.497207496627  FAILED, KNOWN, expected 85.497207496626
    test 2778 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 2779 line 464 lat: 1.433605
    test 2780 line 464 lon: 4.165940
    test 2781 line 464 fb: 170.272462
    test 2782 line 464 lat2: 1.433605151882
    test 2783 line 464 lon2: 4.165940219923
    test 2784 line 464 azi2: 170.272462365963
    test 2785 line 465 lat: -43.326676
    test 2786 line 465 lon: 153.148367
    test 2787 line 465 fb: 42.921394
    test 2788 line 465 lat2: -43.326676023438
    test 2789 line 465 lon2: 153.148366512832
    test 2790 line 465 azi2: 42.921393854868
    test 2791 line 466 lat: 20.405242
    test 2792 line 466 lon: 178.247549
    test 2793 line 466 fb: 178.801033
    test 2794 line 466 lat2: 20.405242225208
    test 2795 line 466 lon2: 178.247549230810
    test 2796 line 466 azi2: 178.801032702563
    test 2797 line 467 lat: -22.482832
    test 2798 line 467 lon: 140.761211
    test 2799 line 467 fb: 82.371737
    test 2800 line 467 lat2: -22.482831544520
    test 2801 line 467 lon2: 140.761210729739
    test 2802 line 467 azi2: 82.371736722715
    test 2803 line 468 lat: -41.151672
    test 2804 line 468 lon: 38.419124
    test 2805 line 468 fb: 148.221356
    test 2806 line 468 lat2: -41.151672070525
    test 2807 line 468 lon2: 38.419124284860
    test 2808 line 468 azi2: 148.221356053664
    test 2809 line 469 lat: -63.212817
    test 2810 line 469 lon: 15.714998
    test 2811 line 469 fb: 166.777356
    test 2812 line 469 lat2: -63.212816746477
    test 2813 line 469 lon2: 15.714998156904
    test 2814 line 469 azi2: 166.777356149473
    test 2815 line 470 lat: -33.892681
    test 2816 line 470 lon: 120.971496
    test 2817 line 470 fb: 170.404814
    test 2818 line 470 lat2: -33.892680517408
    test 2819 line 470 lon2: 120.971495805190
    test 2820 line 470 azi2: 170.404813772447
    test 2821 line 471 lat: -17.570093
    test 2822 line 471 lon: 137.259693
    test 2823 line 471 fb: 175.973637
    test 2824 line 471 lat2: -17.570092516031
    test 2825 line 471 lon2: 137.259693182063
    test 2826 line 471 azi2: 175.973637230107
    test 2827 line 472 lat: -24.221028
    test 2828 line 472 lon: 33.960052
    test 2829 line 472 fb: 130.753279
    test 2830 line 472 lat2: -24.221027716301  FAILED, KNOWN, expected -24.221027716300
    test 2831 line 472 lon2: 33.960051796001
    test 2832 line 472 azi2: 130.753279335550
    test 2833 line 473 lat: -48.849133
    test 2834 line 473 lon: 176.601435
    test 2835 line 473 fb: 5.037779
    test 2836 line 473 lat2: -48.849132604777
    test 2837 line 473 lon2: 176.601435366477
    test 2838 line 473 azi2: 5.037779120578
    test 2839 line 474 lat: -50.620233
    test 2840 line 474 lon: 22.061011
    test 2841 line 474 fb: 159.730881
    test 2842 line 474 lat2: -50.620232529081
    test 2843 line 474 lon2: 22.061010504617
    test 2844 line 474 azi2: 159.730880799186
    test 2845 line 475 lat: -11.354875
    test 2846 line 475 lon: 76.258812
    test 2847 line 475 fb: 104.014357
    test 2848 line 475 lat2: -11.354875472483
    test 2849 line 475 lon2: 76.258812283705
    test 2850 line 475 azi2: 104.014356938495
    test 2851 line 476 lat: -19.640051
    test 2852 line 476 lon: 105.698979
    test 2853 line 476 fb: 156.650619
    test 2854 line 476 lat2: -19.640050782646
    test 2855 line 476 lon2: 105.698978700604
    test 2856 line 476 azi2: 156.650619021389
    test 2857 line 477 lat: 83.855267
    test 2858 line 477 lon: 112.674858
    test 2859 line 477 fb: 122.383784
    test 2860 line 477 lat2: 83.855266840098
    test 2861 line 477 lon2: 112.674858066811  FAILED, KNOWN, expected 112.674858066810
    test 2862 line 477 azi2: 122.383784147681
    test 2863 line 478 lat: 48.296558
    test 2864 line 478 lon: 34.072463
    test 2865 line 478 fb: 61.415867
    test 2866 line 478 lat2: 48.296557545891
    test 2867 line 478 lon2: 34.072462542900
    test 2868 line 478 azi2: 61.415867309157
    test 2869 line 479 lat: 20.173772
    test 2870 line 479 lon: 12.682422
    test 2871 line 479 fb: 165.220898
    test 2872 line 479 lat2: 20.173772376863
    test 2873 line 479 lon2: 12.682422408956
    test 2874 line 479 azi2: 165.220897942891
    test 2875 line 480 lat: 47.501521
    test 2876 line 480 lon: 54.338775
    test 2877 line 480 fb: 80.572388
    test 2878 line 480 lat2: 47.501521345953
    test 2879 line 480 lon2: 54.338775236773
    test 2880 line 480 azi2: 80.572387690286
    test 2881 line 481 lat: -34.023172
    test 2882 line 481 lon: 174.310259
    test 2883 line 481 fb: 123.138509
    test 2884 line 481 lat2: -34.023171607796
    test 2885 line 481 lon2: 174.310258612178
    test 2886 line 481 azi2: 123.138509441522
    test 2887 line 482 lat: -31.540913
    test 2888 line 482 lon: 52.441924
    test 2889 line 482 fb: 155.194513
    test 2890 line 482 lat2: -31.540912691186
    test 2891 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 2892 line 482 azi2: 155.194512958367
    test 2893 line 483 lat: 64.121649
    test 2894 line 483 lon: 21.295234
    test 2895 line 483 fb: 51.966943
    test 2896 line 483 lat2: 64.121648788158
    test 2897 line 483 lon2: 21.295234110583
    test 2898 line 483 azi2: 51.966943039534
    test 2899 line 484 lat: -4.599613
    test 2900 line 484 lon: 107.727091
    test 2901 line 484 fb: 109.270070
    test 2902 line 484 lat2: -4.599612537190
    test 2903 line 484 lon2: 107.727090701893
    test 2904 line 484 azi2: 109.270070124629
    test 2905 line 485 lat: -16.799515
    test 2906 line 485 lon: 43.675397
    test 2907 line 485 fb: 144.940350
    test 2908 line 485 lat2: -16.799514501718
    test 2909 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 2910 line 485 azi2: 144.940350340820
    test 2911 line 486 lat: -16.337411
    test 2912 line 486 lon: 13.110283
    test 2913 line 486 fb: 167.467077
    test 2914 line 486 lat2: -16.337410785184
    test 2915 line 486 lon2: 13.110282576579
    test 2916 line 486 azi2: 167.467077049713
    test 2917 line 487 lat: -26.145379
    test 2918 line 487 lon: 9.977868
    test 2919 line 487 fb: 171.929335
    test 2920 line 487 lat2: -26.145378737931
    test 2921 line 487 lon2: 9.977868070750
    test 2922 line 487 azi2: 171.929335050809
    test 2923 line 488 lat: -3.245748
    test 2924 line 488 lon: 71.931981
    test 2925 line 488 fb: 124.120047
    test 2926 line 488 lat2: -3.245748416402
    test 2927 line 488 lon2: 71.931980979620
    test 2928 line 488 azi2: 124.120046609527
    test 2929 line 489 lat: 72.975644
    test 2930 line 489 lon: 36.459313
    test 2931 line 489 fb: 49.411324
    test 2932 line 489 lat2: 72.975644407376
    test 2933 line 489 lon2: 36.459312843012
    test 2934 line 489 azi2: 49.411324496539
    test 2935 line 490 lat: 50.342418
    test 2936 line 490 lon: 35.445910
    test 2937 line 490 fb: 43.087650
    test 2938 line 490 lat2: 50.342417843481
    test 2939 line 490 lon2: 35.445910446930
    test 2940 line 490 azi2: 43.087650398316
    test 2941 line 491 lat: -22.878804
    test 2942 line 491 lon: 69.376306
    test 2943 line 491 fb: 102.211558
    test 2944 line 491 lat2: -22.878804028267
    test 2945 line 491 lon2: 69.376306288000
    test 2946 line 491 azi2: 102.211557813582
    test 2947 line 492 lat: 21.254912
    test 2948 line 492 lon: 21.899215
    test 2949 line 492 fb: 92.966926
    test 2950 line 492 lat2: 21.254912121078
    test 2951 line 492 lon2: 21.899214754868
    test 2952 line 492 azi2: 92.966926161390
    test 2953 line 493 lat: 26.486641
    test 2954 line 493 lon: 19.097603
    test 2955 line 493 fb: 158.053447
    test 2956 line 493 lat2: 26.486640906235
    test 2957 line 493 lon2: 19.097602913800
    test 2958 line 493 azi2: 158.053446850267
    test 2959 line 494 lat: 43.041538
    test 2960 line 494 lon: 114.186950
    test 2961 line 494 fb: 155.795323
    test 2962 line 494 lat2: 43.041538374784
    test 2963 line 494 lon2: 114.186949886941
    test 2964 line 494 azi2: 155.795322500736
    test 2965 line 495 lat: -10.570764
    test 2966 line 495 lon: 107.625834
    test 2967 line 495 fb: 98.142401
    test 2968 line 495 lat2: -10.570763915882
    test 2969 line 495 lon2: 107.625834147204
    test 2970 line 495 azi2: 98.142400502747
    test 2971 line 496 lat: 12.624313
    test 2972 line 496 lon: 139.841077
    test 2973 line 496 fb: 148.385662
    test 2974 line 496 lat2: 12.624313141297
    test 2975 line 496 lon2: 139.841076840613
    test 2976 line 496 azi2: 148.385661923898
    test 2977 line 497 lat: -25.169999
    test 2978 line 497 lon: 33.175749
    test 2979 line 497 fb: 169.905377
    test 2980 line 497 lat2: -25.169998746665
    test 2981 line 497 lon2: 33.175749310362
    test 2982 line 497 azi2: 169.905376778384
    test 2983 line 498 lat: -41.360282
    test 2984 line 498 lon: 147.341948
    test 2985 line 498 fb: 136.551910
    test 2986 line 498 lat2: -41.360281944908
    test 2987 line 498 lon2: 147.341948469937
    test 2988 line 498 azi2: 136.551910060918
    test 2989 line 499 lat: 39.182099
    test 2990 line 499 lon: 150.590705
    test 2991 line 499 fb: 165.522951
    test 2992 line 499 lat2: 39.182099298590
    test 2993 line 499 lon2: 150.590705311219
    test 2994 line 499 azi2: 165.522950851635
    test 2995 line 500 lat: -57.494441
    test 2996 line 500 lon: 113.054057
    test 2997 line 500 fb: 130.988277
    test 2998 line 500 lat2: -57.494440629886
    test 2999 line 500 lon2: 113.054056725195
    test 3000 line 500 azi2: 130.988276746436
    test 3001 WGS84.KsOrder: 8

    36 of 3001 testEllipsoidalGeodTest.py tests (1.2%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 3.805 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testEllipsoids.py

    testing testEllipsoids.py 21.07.03 (module pygeodesy.ellipsoids 21.07.22)
    test 1 ellipsoid: True
    test 2 TestEllipsoid: name='TestEllipsoid', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=1000, L=1570.79632679, R1=1000, R2=1000, R3=1000, Rbiaxial=1000, Rtriaxial=1000

    testWGS84(pygeodesy.ellipsoids, 21.07.22)
    test 3 R1: 6371008.7714
    test 4 R2: 6371007.2
    test 5 R3: 6371000.8
    test 6 A: 6367449.1
    test 7 L: 10001965.7
    test 8 Rrectifying: 6367449.1
    test 9 Rgeometric: 6367435.7
    test 10 Rgeocentric: 6378137.000
    test 11 Rgeocentric: 6367489.544
    test 12 Rgeocentric: 6356752.314
    test 13 Rlat: 6378137.000
    test 14 Rlat: 6367444.657
    test 15 Rlat: 6356752.314
    test 16 circle4.radius: 6378137.000
    test 17 circle4.radius: 4517590.879
    test 18 circle4.radius: 0.000
    test 19 distance2: 156903.472, 45.192
    test 20 distance2: 1569034.719, 45.192
    test 21 distance2: 1400742.676, 37.563
    test 22 distance2: 1179164.848, 18.896
    test 23 roc2: 6335439.327, 6378137.0
    test 24 roc2: 6367381.816, 6388838.29
    test 25 roc2: 6399593.626, 6399593.626
    test 26 rocBearing: 6335439.327
    test 27 rocBearing: 6378092.008
    test 28 rocBearing: 6399593.626
    test 29 rocGauss: 6356752.314
    test 30 rocGauss: 6378101.030
    test 31 rocGauss: 6399593.626
    test 32 rocMean: 6356716.465
    test 33 rocMean: 6378092.008
    test 34 rocMean: 6399593.626
    test 35 rocMeridional: 6335439.327
    test 36 rocMeridional: 6367381.816
    test 37 rocMeridional: 6399593.626
    test 38 rocPrimeVertical: 6378137.0
    test 39 rocPrimeVertical: 6388838.29
    test 40 rocPrimeVertical: 6399593.626

    testGRS80(pygeodesy.ellipsoids, 21.07.22)
    test 41 R1: 6371008.7714
    test 42 R2: 6371007.2
    test 43 R3: 6371000.8
    test 44 A: 6367449.1
    test 45 L: 10001965.7
    test 46 Rrectifying: 6367449.1
    test 47 Rgeometric: 6367435.7
    test 48 Rgeocentric: 6378137.000
    test 49 Rgeocentric: 6367489.544
    test 50 Rgeocentric: 6356752.314
    test 51 Rlat: 6378137.000
    test 52 Rlat: 6367444.657
    test 53 Rlat: 6356752.314
    test 54 circle4.radius: 6378137.000
    test 55 circle4.radius: 4517590.879
    test 56 circle4.radius: 0.000
    test 57 distance2: 156903.472, 45.192
    test 58 distance2: 1569034.719, 45.192
    test 59 distance2: 1400742.676, 37.563
    test 60 distance2: 1179164.848, 18.896
    test 61 roc2: 6335439.327, 6378137.0
    test 62 roc2: 6367381.816, 6388838.29
    test 63 roc2: 6399593.626, 6399593.626
    test 64 rocBearing: 6335439.327
    test 65 rocBearing: 6378092.008
    test 66 rocBearing: 6399593.626
    test 67 rocGauss: 6356752.314
    test 68 rocGauss: 6378101.030
    test 69 rocGauss: 6399593.626
    test 70 rocMean: 6356716.465
    test 71 rocMean: 6378092.008
    test 72 rocMean: 6399593.626
    test 73 rocMeridional: 6335439.327
    test 74 rocMeridional: 6367381.816
    test 75 rocMeridional: 6399593.626
    test 76 rocPrimeVertical: 6378137.0
    test 77 rocPrimeVertical: 6388838.29
    test 78 rocPrimeVertical: 6399593.626

    test<unbound method Ellipsoid.__init__>(pygeodesy.ellipsoids, 21.07.22)
    test 79 a, b, None: 2.0
    test 80 a, None, f_: 500.0

    testWGS84(pygeodesy.ellipsoids, 21.07.22)
    test 81 WGS84.copy: True
    test 82 WGS84.copy: True
    test 83 WGS84.find: None
    test 84 WGS84.a2_b: 6399593.625758
    test 85 WGS84.b2_a: 6335439.327293
    test 86 WGS84.R2: 6371007.180918
    test 87 WGS84.c2: 40589732499315
    test 88 WGS84.es: 0.081819
    test 89 WGS84.f2: 0.003364
    test 90 WGS84.m2degrees: 90
    test 91 WGS84.area: 5.101e+14
    test 92 WGS84.volume: 1.083e+21
    test 93 WGS84.ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 94 WGS84.ecef: WGS84
    test 95 WGS84: name='WGS84', a=6378137, b=6356752.3142451793, f_=298.257223563, f=0.0033528107, f2=0.0033640898, n=0.0016792204, e=0.0818191908, e2=0.00669438, e22=0.0067394967, e32=0.0033584313, A=6367449.1458234144, L=10001965.7293127235, R1=6371008.7714150595, R2=6371007.1809184747, R3=6371000.7900091587, Rbiaxial=6367453.6345163295, Rtriaxial=6372797.5559594007
    test 96 WGS84.: A=6367449.1458234144, e=0.0818191908, f_=298.2572235630, n=0.0016792204(-2.1684043450e-19)

    testKruegers(pygeodesy.ellipsoids, 21.07.22)
    test 97 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773573e-07, 1.197645503243e-09, 2.429170680397e-12, 5.711818370428e-15, 1.47999793138e-17, 4.107624109371e-20, 1.210785038923e-22
    test 98 WGS84.BetaKs : 8.37732164058e-04, 5.90587015222e-08, 1.673482665344e-10, 2.164798110491e-13, 3.787930968626e-16, 7.236769021816e-19, 1.493479824778e-21, 3.259522545838e-24
    test 99 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17
    test 100 WGS84.BetaKs : 8.37732164058e-04, 5.90587015222e-08, 1.673482665284e-10, 2.164798040063e-13, 3.787978046169e-16, 7.248748890695e-19
    test 101 WGS84.AlphaKs: 8.377318206304e-04, 7.608527714249e-07, 1.197638001561e-09, 2.443376194522e-12
    test 102 WGS84.BetaKs : 8.377321640601e-04, 5.905869567934e-08, 1.673488880355e-10, 2.167737763022e-13

    testProlate(pygeodesy.ellipsoids, 21.07.22)
    test 103 a [Radius_]: 6356752.314
    test 104 b [Radius_]: 6378137.000
    test 105 n [Float]: -0.002
    test 106 R1 [Radius]: 6363880.543
    test 107 R2 [Radius]: 6363878.941
    test 108 R3 [Radius]: 6363872.564
    test 109 Rbiaxial [Radius]: 6367453.635
    test 110 Rgeometric [Radius]: 6367435.680
    test 111 c2 [Meter2]: 40498955180263.188
    test 112 area [Meter2]: 508924880289508.500
    test 113 volume [Meter3]: 1079575530747445379072.000

    testAuxiliaryLats WGS84(pygeodesy.ellipsoids, 21.07.22)
    test 114 isEllipsoidal: True
    test 115 isOblate: True
    test 116 isProlate: False
    test 117 isSpherical: False
    test 118 auxAuthalic(-90): -90.0
    test 119 name: auxAuthalic
    test 120 inverse: lat (-90.0)
    test 121 auxConformal(-90): -90.0
    test 122 name: auxConformal
    test 123 inverse: lat (-90.0)
    test 124 auxGeocentric(-90): -90.0
    test 125 name: auxGeocentric
    test 126 inverse: lat (-90.0)
    test 127 auxIsometric(-90): -2178.287790219
    test 128 name: auxIsometric
    test 129 inverse: lat (-90.0)
    test 130 auxParametric(-90): -90.0
    test 131 name: auxParametric
    test 132 inverse: lat (-90.0)
    test 133 auxRectifying(-90): -90.0
    test 134 name: auxRectifying
    test 135 inverse: lat (-90.0)
    test 136 auxAuthalic(-60): -59.88878557
    test 137 name: auxAuthalic
    test 138 inverse: lat (-60.0)
    test 139 auxConformal(-60): -59.833216158
    test 140 name: auxConformal
    test 141 inverse: lat (-60.0)
    test 142 auxGeocentric(-60): -59.83307615
    test 143 name: auxGeocentric
    test 144 inverse: lat (-60.0)
    test 145 auxIsometric(-60): -75.123399226
    test 146 name: auxIsometric
    test 147 inverse: lat (-60.0)
    test 148 auxParametric(-60): -59.916607797
    test 149 name: auxParametric
    test 150 inverse: lat (-60.0)
    test 151 auxRectifying(-60): -59.874885594
    test 152 name: auxRectifying
    test 153 inverse: lat (-60.0)
    test 154 auxAuthalic(-30): -29.888997034
    test 155 name: auxAuthalic
    test 156 inverse: lat (-30.0)
    test 157 auxConformal(-30): -29.833682042
    test 158 name: auxConformal
    test 159 inverse: lat (-30.0)
    test 160 auxGeocentric(-30): -29.83363581
    test 161 name: auxGeocentric
    test 162 inverse: lat (-30.0)
    test 163 auxIsometric(-30): -31.281036776
    test 164 name: auxIsometric
    test 165 inverse: lat (-30.0)
    test 166 auxParametric(-30): -29.916747713
    test 167 name: auxParametric
    test 168 inverse: lat (-30.0)
    test 169 auxRectifying(-30): -29.875147936
    test 170 name: auxRectifying
    test 171 inverse: lat (-30.0)
    test 172 auxAuthalic(0): 0.0
    test 173 name: auxAuthalic
    test 174 inverse: lat (0.0)
    test 175 auxConformal(0): 0.0
    test 176 name: auxConformal
    test 177 inverse: lat (0.0)
    test 178 auxGeocentric(0): 0.0
    test 179 name: auxGeocentric
    test 180 inverse: lat (0.0)
    test 181 auxIsometric(0): 0.0
    test 182 name: auxIsometric
    test 183 inverse: lat (0.0)
    test 184 auxParametric(0): 0.0
    test 185 name: auxParametric
    test 186 inverse: lat (0.0)
    test 187 auxRectifying(0): 0.0
    test 188 name: auxRectifying
    test 189 inverse: lat (0.0)
    test 190 auxAuthalic(30): 29.888997034
    test 191 name: auxAuthalic
    test 192 inverse: lat (30.0)
    test 193 auxConformal(30): 29.833682042
    test 194 name: auxConformal
    test 195 inverse: lat (30.0)
    test 196 auxGeocentric(30): 29.83363581
    test 197 name: auxGeocentric
    test 198 inverse: lat (30.0)
    test 199 auxIsometric(30): 31.281036776
    test 200 name: auxIsometric
    test 201 inverse: lat (30.0)
    test 202 auxParametric(30): 29.916747713
    test 203 name: auxParametric
    test 204 inverse: lat (30.0)
    test 205 auxRectifying(30): 29.875147936
    test 206 name: auxRectifying
    test 207 inverse: lat (30.0)
    test 208 auxAuthalic(60): 59.88878557
    test 209 name: auxAuthalic
    test 210 inverse: lat (60.0)
    test 211 auxConformal(60): 59.833216158
    test 212 name: auxConformal
    test 213 inverse: lat (60.0)
    test 214 auxGeocentric(60): 59.83307615
    test 215 name: auxGeocentric
    test 216 inverse: lat (60.0)
    test 217 auxIsometric(60): 75.123399226
    test 218 name: auxIsometric
    test 219 inverse: lat (60.0)
    test 220 auxParametric(60): 59.916607797
    test 221 name: auxParametric
    test 222 inverse: lat (60.0)
    test 223 auxRectifying(60): 59.874885594
    test 224 name: auxRectifying
    test 225 inverse: lat (60.0)
    test 226 auxAuthalic(90): 90.0
    test 227 name: auxAuthalic
    test 228 inverse: lat (90.0)
    test 229 auxConformal(90): 90.0
    test 230 name: auxConformal
    test 231 inverse: lat (90.0)
    test 232 auxGeocentric(90): 90.0
    test 233 name: auxGeocentric
    test 234 inverse: lat (90.0)
    test 235 auxIsometric(90): 2178.287790219
    test 236 name: auxIsometric
    test 237 inverse: lat (90.0)
    test 238 auxParametric(90): 90.0
    test 239 name: auxParametric
    test 240 inverse: lat (90.0)
    test 241 auxRectifying(90): 90.0
    test 242 name: auxRectifying
    test 243 inverse: lat (90.0)

    testAuxiliaryLats Prolate(pygeodesy.ellipsoids, 21.07.22)
    test 244 isEllipsoidal: True
    test 245 isOblate: False
    test 246 isProlate: True
    test 247 isSpherical: False
    test 248 auxAuthalic(-90): -90.0
    test 249 name: auxAuthalic
    test 250 inverse: lat (-90.0)
    test 251 auxConformal(-90): -90.0
    test 252 name: auxConformal
    test 253 inverse: lat (-90.0)
    test 254 auxGeocentric(-90): -90.0
    test 255 name: auxGeocentric
    test 256 inverse: lat (-90.0)
    test 257 auxIsometric(-90): -2179.057490028
    test 258 name: auxIsometric
    test 259 inverse: lat (-90.0)
    test 260 auxParametric(-90): -90.0
    test 261 name: auxParametric
    test 262 inverse: lat (-90.0)
    test 263 auxRectifying(-90): -90.0
    test 264 name: auxRectifying
    test 265 inverse: lat (-90.0)
    test 266 auxAuthalic(-60): -60.110978127
    test 267 name: auxAuthalic
    test 268 inverse: lat (-60.0)
    test 269 auxConformal(-60): -60.16650401
    test 270 name: auxConformal
    test 271 inverse: lat (-60.0)
    test 272 auxGeocentric(-60): -60.16636419
    test 273 name: auxGeocentric
    test 274 inverse: lat (-60.0)
    test 275 auxIsometric(-60): -75.789978689
    test 276 name: auxIsometric
    test 277 inverse: lat (-60.0)
    test 278 auxParametric(-60): -60.083252287
    test 279 name: auxParametric
    test 280 inverse: lat (-60.0)
    test 281 auxRectifying(-60): -60.041947439
    test 282 name: auxRectifying
    test 283 inverse: lat (-60.0)
    test 284 auxAuthalic(-30): -30.11118952
    test 285 name: auxAuthalic
    test 286 inverse: lat (-30.0)
    test 287 auxConformal(-30): -30.166970897
    test 288 name: auxConformal
    test 289 inverse: lat (-30.0)
    test 290 auxGeocentric(-30): -30.16692385
    test 291 name: auxGeocentric
    test 292 inverse: lat (-30.0)
    test 293 auxIsometric(-30): -31.665887766
    test 294 name: auxIsometric
    test 295 inverse: lat (-30.0)
    test 296 auxParametric(-30): -30.083392203
    test 297 name: auxParametric
    test 298 inverse: lat (-30.0)
    test 299 auxRectifying(-30): -30.041931117
    test 300 name: auxRectifying
    test 301 inverse: lat (-30.0)
    test 302 auxAuthalic(0): 0.0
    test 303 name: auxAuthalic
    test 304 inverse: lat (0.0)
    test 305 auxConformal(0): 0.0
    test 306 name: auxConformal
    test 307 inverse: lat (0.0)
    test 308 auxGeocentric(0): 0.0
    test 309 name: auxGeocentric
    test 310 inverse: lat (0.0)
    test 311 auxIsometric(0): 0.0
    test 312 name: auxIsometric
    test 313 inverse: lat (0.0)
    test 314 auxParametric(0): 0.0
    test 315 name: auxParametric
    test 316 inverse: lat (0.0)
    test 317 auxRectifying(0): 0.0
    test 318 name: auxRectifying
    test 319 inverse: lat (0.0)
    test 320 auxAuthalic(30): 30.11118952
    test 321 name: auxAuthalic
    test 322 inverse: lat (30.0)
    test 323 auxConformal(30): 30.166970897
    test 324 name: auxConformal
    test 325 inverse: lat (30.0)
    test 326 auxGeocentric(30): 30.16692385
    test 327 name: auxGeocentric
    test 328 inverse: lat (30.0)
    test 329 auxIsometric(30): 31.665887766
    test 330 name: auxIsometric
    test 331 inverse: lat (30.0)
    test 332 auxParametric(30): 30.083392203
    test 333 name: auxParametric
    test 334 inverse: lat (30.0)
    test 335 auxRectifying(30): 30.041931117
    test 336 name: auxRectifying
    test 337 inverse: lat (30.0)
    test 338 auxAuthalic(60): 60.110978127
    test 339 name: auxAuthalic
    test 340 inverse: lat (60.0)
    test 341 auxConformal(60): 60.16650401
    test 342 name: auxConformal
    test 343 inverse: lat (60.0)
    test 344 auxGeocentric(60): 60.16636419
    test 345 name: auxGeocentric
    test 346 inverse: lat (60.0)
    test 347 auxIsometric(60): 75.789978689
    test 348 name: auxIsometric
    test 349 inverse: lat (60.0)
    test 350 auxParametric(60): 60.083252287
    test 351 name: auxParametric
    test 352 inverse: lat (60.0)
    test 353 auxRectifying(60): 60.041947439
    test 354 name: auxRectifying
    test 355 inverse: lat (60.0)
    test 356 auxAuthalic(90): 90.0
    test 357 name: auxAuthalic
    test 358 inverse: lat (90.0)
    test 359 auxConformal(90): 90.0
    test 360 name: auxConformal
    test 361 inverse: lat (90.0)
    test 362 auxGeocentric(90): 90.0
    test 363 name: auxGeocentric
    test 364 inverse: lat (90.0)
    test 365 auxIsometric(90): 2179.057490028
    test 366 name: auxIsometric
    test 367 inverse: lat (90.0)
    test 368 auxParametric(90): 90.0
    test 369 name: auxParametric
    test 370 inverse: lat (90.0)
    test 371 auxRectifying(90): 90.0
    test 372 name: auxRectifying
    test 373 inverse: lat (90.0)

    testAuxiliaryLats Sphere(pygeodesy.ellipsoids, 21.07.22)
    test 374 isEllipsoidal: False
    test 375 isOblate: False
    test 376 isProlate: False
    test 377 isSpherical: True
    test 378 auxAuthalic(-90): -90.0
    test 379 name: auxAuthalic
    test 380 inverse: lat (-90.0)
    test 381 auxConformal(-90): -90.0
    test 382 name: auxConformal
    test 383 inverse: lat (-90.0)
    test 384 auxGeocentric(-90): -90.0
    test 385 name: auxGeocentric
    test 386 inverse: lat (-90.0)
    test 387 auxIsometric(-90): -90.0
    test 388 name: auxIsometric
    test 389 inverse: lat (-90.0)
    test 390 auxParametric(-90): -90.0
    test 391 name: auxParametric
    test 392 inverse: lat (-90.0)
    test 393 auxRectifying(-90): -90.0
    test 394 name: auxRectifying
    test 395 inverse: lat (-90.0)
    test 396 auxAuthalic(-60): -60.0
    test 397 name: auxAuthalic
    test 398 inverse: lat (-60.0)
    test 399 auxConformal(-60): -60.0
    test 400 name: auxConformal
    test 401 inverse: lat (-60.0)
    test 402 auxGeocentric(-60): -60.0
    test 403 name: auxGeocentric
    test 404 inverse: lat (-60.0)
    test 405 auxIsometric(-60): -60.0
    test 406 name: auxIsometric
    test 407 inverse: lat (-60.0)
    test 408 auxParametric(-60): -60.0
    test 409 name: auxParametric
    test 410 inverse: lat (-60.0)
    test 411 auxRectifying(-60): -60.0
    test 412 name: auxRectifying
    test 413 inverse: lat (-60.0)
    test 414 auxAuthalic(-30): -30.0
    test 415 name: auxAuthalic
    test 416 inverse: lat (-30.0)
    test 417 auxConformal(-30): -30.0
    test 418 name: auxConformal
    test 419 inverse: lat (-30.0)
    test 420 auxGeocentric(-30): -30.0
    test 421 name: auxGeocentric
    test 422 inverse: lat (-30.0)
    test 423 auxIsometric(-30): -30.0
    test 424 name: auxIsometric
    test 425 inverse: lat (-30.0)
    test 426 auxParametric(-30): -30.0
    test 427 name: auxParametric
    test 428 inverse: lat (-30.0)
    test 429 auxRectifying(-30): -30.0
    test 430 name: auxRectifying
    test 431 inverse: lat (-30.0)
    test 432 auxAuthalic(0): 0.0
    test 433 name: auxAuthalic
    test 434 inverse: lat (0.0)
    test 435 auxConformal(0): 0.0
    test 436 name: auxConformal
    test 437 inverse: lat (0.0)
    test 438 auxGeocentric(0): 0.0
    test 439 name: auxGeocentric
    test 440 inverse: lat (0.0)
    test 441 auxIsometric(0): 0.0
    test 442 name: auxIsometric
    test 443 inverse: lat (0.0)
    test 444 auxParametric(0): 0.0
    test 445 name: auxParametric
    test 446 inverse: lat (0.0)
    test 447 auxRectifying(0): 0.0
    test 448 name: auxRectifying
    test 449 inverse: lat (0.0)
    test 450 auxAuthalic(30): 30.0
    test 451 name: auxAuthalic
    test 452 inverse: lat (30.0)
    test 453 auxConformal(30): 30.0
    test 454 name: auxConformal
    test 455 inverse: lat (30.0)
    test 456 auxGeocentric(30): 30.0
    test 457 name: auxGeocentric
    test 458 inverse: lat (30.0)
    test 459 auxIsometric(30): 30.0
    test 460 name: auxIsometric
    test 461 inverse: lat (30.0)
    test 462 auxParametric(30): 30.0
    test 463 name: auxParametric
    test 464 inverse: lat (30.0)
    test 465 auxRectifying(30): 30.0
    test 466 name: auxRectifying
    test 467 inverse: lat (30.0)
    test 468 auxAuthalic(60): 60.0
    test 469 name: auxAuthalic
    test 470 inverse: lat (60.0)
    test 471 auxConformal(60): 60.0
    test 472 name: auxConformal
    test 473 inverse: lat (60.0)
    test 474 auxGeocentric(60): 60.0
    test 475 name: auxGeocentric
    test 476 inverse: lat (60.0)
    test 477 auxIsometric(60): 60.0
    test 478 name: auxIsometric
    test 479 inverse: lat (60.0)
    test 480 auxParametric(60): 60.0
    test 481 name: auxParametric
    test 482 inverse: lat (60.0)
    test 483 auxRectifying(60): 60.0
    test 484 name: auxRectifying
    test 485 inverse: lat (60.0)
    test 486 auxAuthalic(90): 90.0
    test 487 name: auxAuthalic
    test 488 inverse: lat (90.0)
    test 489 auxConformal(90): 90.0
    test 490 name: auxConformal
    test 491 inverse: lat (90.0)
    test 492 auxGeocentric(90): 90.0
    test 493 name: auxGeocentric
    test 494 inverse: lat (90.0)
    test 495 auxIsometric(90): 90.0
    test 496 name: auxIsometric
    test 497 inverse: lat (90.0)
    test 498 auxParametric(90): 90.0
    test 499 name: auxParametric
    test 500 inverse: lat (90.0)
    test 501 auxRectifying(90): 90.0
    test 502 name: auxRectifying
    test 503 inverse: lat (90.0)

    testFlattenings(pygeodesy.ellipsoids, 21.07.22)
    test 504 _TOL: 1.49011611938e-09
    test 505 WGS84.f_ - 1 / .f: 2.78532752418e-12
    test 506 WGS84.f - 1 / .f_: 3.16587034366e-17
    test 507 Prolate.f_ - 1 / .f: 0.0
    test 508 Prolate.f - 1 / .f_: 0.0
    test 509 GRS80.f_ - 1 / .f: 1.25794485939e-10
    test 510 GRS80.f - 1 / .f_: 1.41379963292e-15
    test 511 Airy1830.f_ - 1 / .f: -4.32009983342e-12
    test 512 Airy1830.f - 1 / .f_: -4.81385764584e-17

    testEllipsoid2(pygeodesy.ellipsoids, 21.07.22)
    test 513 name='_2_WGS84': a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 514 name='_2_Prolate': a=6356752.31424518, b=6378137, f_=-297.25722356, f=-0.00336409, f2=-0.00335281, n=-0.00167922, e=0.08209444, e2=-0.0067395, e22=-0.00669438, e32=-0.00335843, A=6367449.14582342, L=10035500.52045003, R1=6363880.54283012, R2=6363878.94135826, R3=6363872.56440201, Rbiaxial=6367453.63451633, Rtriaxial=6362105.22438825
    test 515 name='_2_GRS80': a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 516 name='_2_Sphere': a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 517 name='_2_Airy1830': a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, A=6366914.60892522, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572, Rbiaxial=6366919.065224, Rtriaxial=6372243.45317691

    testa_f2Tuple(pygeodesy.ellipsoids, 21.07.22)
    test 518 name='_a_b_WGS84': a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 519 name='_a_b_Prolate': a=6356752.31424518, b=6378137, f_=-297.25722356, f=-0.00336409, f2=-0.00335281, n=-0.00167922, e=0.08209444, e2=-0.0067395, e22=-0.00669438, e32=-0.00335843, A=6367449.14582342, L=10035500.52045003, R1=6363880.54283012, R2=6363878.94135826, R3=6363872.56440201, Rbiaxial=6367453.63451633, Rtriaxial=6362105.22438825
    test 520 name='_a_b_GRS80': a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 521 name='_a_b_Sphere': a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 522 name='_a_b_Airy1830': a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, A=6366914.60892522, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572, Rbiaxial=6366919.065224, Rtriaxial=6372243.45317691

    testFunctions(pygeodesy.ellipsoids, 21.07.22)
    test 523 a_b2f_(WGS84): 298.25722356
    test 524 a_b2f2(WGS84): 0.00336409
    test 525 a_b2n(WGS84): 0.00167922
    test 526 b_f2a(WGS84): 6378137.000
    test 527 b_f_2a(WGS84): 6378137.000
    test 528 f_2f(WGS84): 0.00335281
    test 529 n2e2(WGS84): 0.00669438
    test 530 n2f(WGS84): 0.00335281
    test 531 a_b2f_(Prolate): -297.25722356
    test 532 a_b2f2(Prolate): -0.00335281
    test 533 a_b2n(Prolate): -0.00167922
    test 534 b_f2a(Prolate): 6356752.314
    test 535 b_f_2a(Prolate): 6356752.314
    test 536 f_2f(Prolate): -0.00336409
    test 537 n2e2(Prolate): -0.00673950
    test 538 n2f(Prolate): -0.00336409
    test 539 a_b2f_(GRS80): 298.25722210
    test 540 a_b2f2(GRS80): 0.00336409
    test 541 a_b2n(GRS80): 0.00167922
    test 542 b_f2a(GRS80): 6378137.000
    test 543 b_f_2a(GRS80): 6378137.000
    test 544 f_2f(GRS80): 0.00335281
    test 545 n2e2(GRS80): 0.00669438
    test 546 n2f(GRS80): 0.00335281
    test 547 a_b2f_(Sphere): 0.00000000
    test 548 a_b2f2(Sphere): 0.00000000
    test 549 a_b2n(Sphere): 0.00000000
    test 550 b_f2a(Sphere): 6371008.771
    test 551 b_f_2a(Sphere): 6371008.771
    test 552 f_2f(Sphere): 0.00000000
    test 553 n2e2(Sphere): 0.00000000
    test 554 n2f(Sphere): 0.00000000
    test 555 a_b2f_(Airy1830): 299.32496460
    test 556 a_b2f2(Airy1830): 0.00335205
    test 557 a_b2n(Airy1830): 0.00167322
    test 558 b_f2a(Airy1830): 6377563.396
    test 559 b_f_2a(Airy1830): 6377563.396
    test 560 f_2f(Airy1830): 0.00334085
    test 561 n2e2(Airy1830): 0.00667054
    test 562 n2f(Airy1830): 0.00334085

    testWGS84(pygeodesy.ellipsoids, 21.07.22)
    test 563 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 564 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 565 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 566 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 567 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 568 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 569 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 570 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 571 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 572 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 573 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 574 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 575 roc1_ 30: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 576 roc1_ 30: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 577 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 578 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 579 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 580 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 581 roc1_ 45: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 582 roc1_ 45: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 583 roc1_ 50: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 584 roc1_ 50: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 585 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 586 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 587 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 588 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 589 roc1_ 65: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 590 roc1_ 65: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 591 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 592 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 593 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 594 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 595 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 596 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 597 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 598 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 599 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 600 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testProlate(pygeodesy.ellipsoids, 21.07.22)
    test 601 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 602 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 603 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 604 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 605 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 606 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 607 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 608 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 609 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 610 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 611 roc1_ 25: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 612 roc1_ 25: 9.31322574615e-10  FAILED, KNOWN, expected 1.863e-09
    test 613 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 614 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 615 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 616 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 617 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 618 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 619 roc1_ 45: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 620 roc1_ 45: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 621 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 622 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 623 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 624 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 625 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 626 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 627 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 628 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 629 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 630 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 631 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 632 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 633 roc1_ 80: 1.86264514923e-09  FAILED, KNOWN, expected 1.863e-09
    test 634 roc1_ 80: 1.86264514923e-09  FAILED, KNOWN, expected 1.863e-09
    test 635 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 636 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 637 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 638 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testSphereAuthalic(pygeodesy.ellipsoids, 21.07.22)
    test 639 roc1_ 0: 0.0
    test 640 roc1_ 0: 0.0
    test 641 roc1_ 5: 0.0
    test 642 roc1_ 5: 0.0
    test 643 roc1_ 10: 0.0
    test 644 roc1_ 10: 0.0
    test 645 roc1_ 15: 0.0
    test 646 roc1_ 15: 0.0
    test 647 roc1_ 20: 0.0
    test 648 roc1_ 20: 0.0
    test 649 roc1_ 25: 0.0
    test 650 roc1_ 25: 0.0
    test 651 roc1_ 30: 0.0
    test 652 roc1_ 30: 0.0
    test 653 roc1_ 35: 0.0
    test 654 roc1_ 35: 0.0
    test 655 roc1_ 40: 0.0
    test 656 roc1_ 40: 0.0
    test 657 roc1_ 45: 0.0
    test 658 roc1_ 45: 0.0
    test 659 roc1_ 50: 0.0
    test 660 roc1_ 50: 0.0
    test 661 roc1_ 55: 0.0
    test 662 roc1_ 55: 0.0
    test 663 roc1_ 60: 0.0
    test 664 roc1_ 60: 0.0
    test 665 roc1_ 65: 0.0
    test 666 roc1_ 65: 0.0
    test 667 roc1_ 70: 0.0
    test 668 roc1_ 70: 0.0
    test 669 roc1_ 75: 0.0
    test 670 roc1_ 75: 0.0
    test 671 roc1_ 80: 0.0
    test 672 roc1_ 80: 0.0
    test 673 roc1_ 85: 0.0
    test 674 roc1_ 85: 0.0
    test 675 roc1_ 90: 0.0
    test 676 roc1_ 90: 0.0

    testcircle4(pygeodesy.ellipsoids, 21.07.22)

    testWGS84(pygeodesy.ellipsoids, 21.07.22)
    test 677 circle4 0: 6378137.000000
    test 678 circle4 0: 6378137.000000
    test 679 circle4 10: 6377497.402124
    test 680 circle4 10: 6377497.402124
    test 681 circle4 20: 6375653.951276
    test 682 circle4 20: 6375653.951276
    test 683 circle4 30: 6372824.420294
    test 684 circle4 30: 6372824.420294
    test 685 circle4 40: 6369344.863240
    test 686 circle4 40: 6369344.863240
    test 687 circle4 50: 6365631.517537
    test 688 circle4 50: 6365631.517537
    test 689 circle4 60: 6362132.224397
    test 690 circle4 60: 6362132.224397
    test 691 circle4 70: 6359272.455642
    test 692 circle4 70: 6359272.455642
    test 693 circle4 80: 6357402.413808
    test 694 circle4 80: 6357402.413808
    test 695 circle4 90: 6356752.314245
    test 696 circle4 90: 6356752.314245

    testSphere(pygeodesy.ellipsoids, 21.07.22)
    test 697 circle4 0: 6371008.771415
    test 698 circle4 0: 6371008.771415
    test 699 circle4 10: 6371008.771415
    test 700 circle4 10: 6371008.771415
    test 701 circle4 20: 6371008.771415
    test 702 circle4 20: 6371008.771415
    test 703 circle4 30: 6371008.771415
    test 704 circle4 30: 6371008.771415
    test 705 circle4 40: 6371008.771415
    test 706 circle4 40: 6371008.771415
    test 707 circle4 50: 6371008.771415
    test 708 circle4 50: 6371008.771415
    test 709 circle4 60: 6371008.771415
    test 710 circle4 60: 6371008.771415
    test 711 circle4 70: 6371008.771415
    test 712 circle4 70: 6371008.771415
    test 713 circle4 80: 6371008.771415
    test 714 circle4 80: 6371008.771415
    test 715 circle4 90: 6371008.771415
    test 716 circle4 90: 6371008.771415

    76 of 716 testEllipsoids.py tests (10.6%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 98.450 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testElliptic.py

    testing testElliptic.py 21.05.10
    test 1 eps4: 8.881784197e-16
    test 2 RC, RF(0.020, ...): 3.914361830671
    test 3 RC, RF(0.030, ...): 6.584789484624
    test 4 RC, RF(0.040, ...): 5.493061443341
    test 5 RC, RF(0.050, ...): 4.812118250596
    test 6 RC, RF(0.060, ...): 4.335073632453
    test 7 RC, RF(0.070, ...): 3.976827306120
    test 8 RC, RF(0.080, ...): 3.694989719259
    test 9 RC, RF(0.090, ...): 3.465735902800
    test 10 RC, RF(0.100, ...): 3.274501502373
    test 11 RC, RF(0.110, ...): 3.111812518574
    test 12 RC, RF(0.120, ...): 2.971203516685
    test 13 RC, RF(0.130, ...): 2.848090500183
    test 14 RC, RF(0.140, ...): 2.739120555165
    test 15 RC, RF(0.150, ...): 2.641776814832
    test 16 RC, RF(0.160, ...): 2.554128118830
    test 17 RC, RF(0.170, ...): 2.474664615473
    test 18 RC, RF(0.180, ...): 2.402186472893
    test 19 RC, RF(0.190, ...): 2.335726540516
    test 20 RC, RF(0.200, ...): 2.274495360058
    test 21 RC, RF(0.210, ...): 2.217841271926
    test 22 RC, RF(0.220, ...): 2.165220951174
    test 23 RC, RF(0.230, ...): 2.116177296054
    test 24 RC, RF(0.240, ...): 2.070322594382
    test 25 RC, RF(0.250, ...): 2.027325540541
    test 26 RC, RF(0.260, ...): 1.986901103492
    test 27 RC, RF(0.270, ...): 1.948802534199
    test 28 RC, RF(0.280, ...): 1.912814998209
    test 29 RC, RF(0.290, ...): 1.878750456745
    test 30 RC, RF(0.300, ...): 1.846443516895
    test 31 RC, RF(0.310, ...): 1.815748041271
    test 32 RC, RF(0.320, ...): 1.786534358134
    test 33 RC, RF(0.330, ...): 1.758686950216
    test 34 RC, RF(0.340, ...): 1.732102528083
    test 35 RC, RF(0.350, ...): 1.706688414643
    test 36 RC, RF(0.360, ...): 1.682361183106
    test 37 RC, RF(0.370, ...): 1.659045502693
    test 38 RC, RF(0.380, ...): 1.636673155658
    test 39 RC, RF(0.390, ...): 1.615182196359
    test 40 RC, RF(0.400, ...): 1.594516228743
    test 41 RC, RF(0.410, ...): 1.574623783019
    test 42 RC, RF(0.420, ...): 1.555457775830
    test 43 RC, RF(0.430, ...): 1.536975041007
    test 44 RC, RF(0.440, ...): 1.519135920258
    test 45 RC, RF(0.450, ...): 1.501903904951
    test 46 RC, RF(0.460, ...): 1.485245321610
    test 47 RC, RF(0.470, ...): 1.469129054970
    test 48 RC, RF(0.480, ...): 1.453526303390
    test 49 RC, RF(0.490, ...): 1.438410362259
    test 50 RC, RF(0.500, ...): 1.423756431678
    test 51 RC, RF(0.510, ...): 1.409541445271
    test 52 RC, RF(0.520, ...): 1.395743917431
    test 53 RC, RF(0.530, ...): 1.382343806706
    test 54 RC, RF(0.540, ...): 1.369322393343
    test 55 RC, RF(0.550, ...): 1.356662169284
    test 56 RC, RF(0.560, ...): 1.344346739158
    test 57 RC, RF(0.570, ...): 1.332360730978
    test 58 RC, RF(0.580, ...): 1.320689715446
    test 59 RC, RF(0.590, ...): 1.309320132904
    test 60 RC, RF(0.600, ...): 1.298239227085
    test 61 RC, RF(0.610, ...): 1.287434984930
    test 62 RC, RF(0.620, ...): 1.276896081822
    test 63 RC, RF(0.630, ...): 1.266611831682
    test 64 RC, RF(0.640, ...): 1.256572141405
    test 65 RC, RF(0.650, ...): 1.246767469214
    test 66 RC, RF(0.660, ...): 1.237188786540
    test 67 RC, RF(0.670, ...): 1.227827543058
    test 68 RC, RF(0.680, ...): 1.218675634611
    test 69 RC, RF(0.690, ...): 1.209725373708
    test 70 RC, RF(0.700, ...): 1.200969462383
    test 71 RC, RF(0.710, ...): 1.192400967179
    test 72 RC, RF(0.720, ...): 1.184013296070
    test 73 RC, RF(0.730, ...): 1.175800177139
    test 74 RC, RF(0.740, ...): 1.167755638871
    test 75 RC, RF(0.750, ...): 1.159873991901
    test 76 RC, RF(0.760, ...): 1.152149812097
    test 77 RC, RF(0.770, ...): 1.144577924881
    test 78 RC, RF(0.780, ...): 1.137153390647
    test 79 RC, RF(0.790, ...): 1.129871491226
    test 80 RC, RF(0.800, ...): 1.122727717281
    test 81 RC, RF(0.810, ...): 1.115717756571
    test 82 RC, RF(0.820, ...): 1.108837483013
    test 83 RC, RF(0.830, ...): 1.102082946473
    test 84 RC, RF(0.840, ...): 1.095450363236
    test 85 RC, RF(0.850, ...): 1.088936107101
    test 86 RC, RF(0.860, ...): 1.082536701044
    test 87 RC, RF(0.870, ...): 1.076248809425
    test 88 RC, RF(0.880, ...): 1.070069230678
    test 89 RC, RF(0.890, ...): 1.063994890459
    test 90 RC, RF(0.900, ...): 1.058022835225
    test 91 RC, RF(0.910, ...): 1.052150226192
    test 92 RC, RF(0.920, ...): 1.046374333669
    test 93 RC, RF(0.930, ...): 1.040692531726
    test 94 RC, RF(0.940, ...): 1.035102293176
    test 95 RC, RF(0.950, ...): 1.029601184852
    test 96 RC, RF(0.960, ...): 1.024186863158
    test 97 RC, RF(0.970, ...): 1.018857069872
    test 98 RC, RF(0.980, ...): 1.013609628192
    test 99 RC, RF(0.990, ...): 1.008442438994
    test 100 RD, RJ(0.010, ...): 8.120132781711
    test 101 RD, RJ(0.020, ...): 7.119021204087
    test 102 RD, RJ(0.030, ...): 6.544107485563
    test 103 RD, RJ(0.040, ...): 6.142532079666
    test 104 RD, RJ(0.050, ...): 5.835358486352
    test 105 RD, RJ(0.060, ...): 5.587552234737
    test 106 RD, RJ(0.070, ...): 5.380489023690
    test 107 RD, RJ(0.080, ...): 5.203088814832
    test 108 RD, RJ(0.090, ...): 5.048227960523
    test 109 RD, RJ(0.100, ...): 4.911057935480
    test 110 RD, RJ(0.110, ...): 4.788131254930
    test 111 RD, RJ(0.120, ...): 4.676910208210
    test 112 RD, RJ(0.130, ...): 4.575473423301
    test 113 RD, RJ(0.140, ...): 4.482331804788
    test 114 RD, RJ(0.150, ...): 4.396308333326
    test 115 RD, RJ(0.160, ...): 4.316456874863
    test 116 RD, RJ(0.170, ...): 4.242005741804
    test 117 RD, RJ(0.180, ...): 4.172317477477
    test 118 RD, RJ(0.190, ...): 4.106859576449
    test 119 RD, RJ(0.200, ...): 4.045182759349
    test 120 RD, RJ(0.210, ...): 3.986904580308
    test 121 RD, RJ(0.220, ...): 3.931696871490
    test 122 RD, RJ(0.230, ...): 3.879275996390
    test 123 RD, RJ(0.240, ...): 3.829395191121
    test 124 RD, RJ(0.250, ...): 3.781838479725
    test 125 RD, RJ(0.260, ...): 3.736415791191
    test 126 RD, RJ(0.270, ...): 3.692959004641
    test 127 RD, RJ(0.280, ...): 3.651318719062
    test 128 RD, RJ(0.290, ...): 3.611361594199
    test 129 RD, RJ(0.300, ...): 3.572968145771
    test 130 RD, RJ(0.310, ...): 3.536030905108
    test 131 RD, RJ(0.320, ...): 3.500452873386
    test 132 RD, RJ(0.330, ...): 3.466146215741
    test 133 RD, RJ(0.340, ...): 3.433031152013
    test 134 RD, RJ(0.350, ...): 3.401035009727
    test 135 RD, RJ(0.360, ...): 3.370091411694
    test 136 RD, RJ(0.370, ...): 3.340139575961
    test 137 RD, RJ(0.380, ...): 3.311123710009
    test 138 RD, RJ(0.390, ...): 3.282992484411
    test 139 RD, RJ(0.400, ...): 3.255698573796
    test 140 RD, RJ(0.410, ...): 3.229198255060
    test 141 RD, RJ(0.420, ...): 3.203451054514
    test 142 RD, RJ(0.430, ...): 3.178419436977
    test 143 RD, RJ(0.440, ...): 3.154068531006
    test 144 RD, RJ(0.450, ...): 3.130365885345
    test 145 RD, RJ(0.460, ...): 3.107281252437
    test 146 RD, RJ(0.470, ...): 3.084786395490
    test 147 RD, RJ(0.480, ...): 3.062854916088
    test 148 RD, RJ(0.490, ...): 3.041462099793
    test 149 RD, RJ(0.500, ...): 3.020584777522
    test 150 RD, RJ(0.510, ...): 3.000201200833
    test 151 RD, RJ(0.520, ...): 2.980290929460
    test 152 RD, RJ(0.530, ...): 2.960834729701
    test 153 RD, RJ(0.540, ...): 2.941814482427
    test 154 RD, RJ(0.550, ...): 2.923213099639
    test 155 RD, RJ(0.560, ...): 2.905014448642
    test 156 RD, RJ(0.570, ...): 2.887203283023
    test 157 RD, RJ(0.580, ...): 2.869765179714
    test 158 RD, RJ(0.590, ...): 2.852686481504
    test 159 RD, RJ(0.600, ...): 2.835954244454
    test 160 RD, RJ(0.610, ...): 2.819556189720
    test 161 RD, RJ(0.620, ...): 2.803480659351
    test 162 RD, RJ(0.630, ...): 2.787716575666
    test 163 RD, RJ(0.640, ...): 2.772253403892
    test 164 RD, RJ(0.650, ...): 2.757081117726
    test 165 RD, RJ(0.660, ...): 2.742190167580
    test 166 RD, RJ(0.670, ...): 2.727571451237
    test 167 RD, RJ(0.680, ...): 2.713216286727
    test 168 RD, RJ(0.690, ...): 2.699116387203
    test 169 RD, RJ(0.700, ...): 2.685263837661
    test 170 RD, RJ(0.710, ...): 2.671651073335
    test 171 RD, RJ(0.720, ...): 2.658270859623
    test 172 RD, RJ(0.730, ...): 2.645116273430
    test 173 RD, RJ(0.740, ...): 2.632180685789
    test 174 RD, RJ(0.750, ...): 2.619457745678
    test 175 RD, RJ(0.760, ...): 2.606941364924
    test 176 RD, RJ(0.770, ...): 2.594625704104
    test 177 RD, RJ(0.780, ...): 2.582505159384
    test 178 RD, RJ(0.790, ...): 2.570574350197
    test 179 RD, RJ(0.800, ...): 2.558828107720
    test 180 RD, RJ(0.810, ...): 2.547261464073
    test 181 RD, RJ(0.820, ...): 2.535869642198
    test 182 RD, RJ(0.830, ...): 2.524648046356
    test 183 RD, RJ(0.840, ...): 2.513592253209
    test 184 RD, RJ(0.850, ...): 2.502698003435
    test 185 RD, RJ(0.860, ...): 2.491961193848
    test 186 RD, RJ(0.870, ...): 2.481377869975
    test 187 RD, RJ(0.880, ...): 2.470944219069
    test 188 RD, RJ(0.890, ...): 2.460656563526
    test 189 RD, RJ(0.900, ...): 2.450511354674
    test 190 RD, RJ(0.910, ...): 2.440505166909
    test 191 RD, RJ(0.920, ...): 2.430634692166
    test 192 RD, RJ(0.930, ...): 2.420896734686
    test 193 RD, RJ(0.940, ...): 2.411288206073
    test 194 RD, RJ(0.950, ...): 2.401806120619
    test 195 RD, RJ(0.960, ...): 2.392447590873
    test 196 RD, RJ(0.970, ...): 2.383209823448
    test 197 RD, RJ(0.980, ...): 2.374090115050
    test 198 RD, RJ(0.990, ...): 2.365085848706

    test 199 eps4: 8.881784197e-16
    test 200 eps: 0.0263340
    test 201 cD: 0.816837118
    test 202 cE: 1.530757637
    test 203 cG: 1.530757637
    test 204 cH: 0.795604230
    test 205 cK: 1.612441349
    test 206 cKE: 0.081683712
    test 207 cPi: 1.612441349
    test 208 fE(phi): 0.348372822
    test 209 fDelta(sn, cn): 0.994133906
    test 210 fD(sn, cn, dn): 0.013885234
    test 211 fE(sn, cn, dn): 0.348372822
    test 212 fEd(PI_2): 0.027415224
    test 213 fEinv(PI_2): 1.612999420
    test 214 fF(sn, cn, dn): 0.349761345
    test 215 fG(sn, cn, dn): 0.348372822
    test 216 fH(sn, cn, dn): 0.335876111
    test 217 fPi(sn, cn, dn): 0.349761345
    test 218 fPi(sn, None, dn): invokation Elliptic.fPi(0, None, 1): invalid
    test 219 fPi(sn, dn, None): invokation Elliptic.fPi(0, 1, None): invalid

    test 220 deltaD(sn, cn, dn): -0.3223642
    test 221 deltaE(sn, cn, dn): 0.0084191
    test 222 deltaEinv(sn, cn): -0.0082518
    test 223 deltaF(sn, cn, dn): -0.0083379
    test 224 deltaG(sn, cn, dn): 0.0084191
    test 225 deltaH(sn, cn, dn): 0.3140691
    test 226 deltaPi(sn, cn, dn): -0.0083379
    test 227 deltaPi(sn, None, dn): invokation Elliptic.deltaPi(0, None, 1): invalid
    test 228 deltaPi(sn, dn, None): invokation Elliptic.deltaPi(0, 1, None): invalid

    test 229 RF(1, 2, 0): 1.3110287771461
    test 230 RF(0.5, 1, 0): 1.8540746773014
    test 231 RF(2, 3, 4): 0.58408284167715
    test 232 RC(0, 1/4): 3.1415926535898
    test 233 RC(9/4, 2): 0.69314718055995
    test 234 RC(1/4, -2): 0.23104906018665
    test 235 RJ(0, 1, 2, 3): 0.77688623778582
    test 236 RJ(2, 3, 4, 5): 0.14297579667157
    test 237 RD(0, 2, 1): 1.7972103521034
    test 238 RD(2, 3, 4): 0.16510527294261
    test 239 RG(0, 16, 16): 3.1415926535898
    test 240 RG(2,  3,  4): 1.7255030280692
    test 241 RG(0,  0.0796, 4): 1.0284758090288

    test 242 sncndn(x): 0.0, 1.0, 1.0
    test 243 sncndn(x): 1.0, -0.0, 1.0
    test 244 sncndn(x): 0.0, 1.0, 1.0
    test 245 sncndn(x): 0.917152336, 0.398536815, 0.398536815
    test 246 sncndn(x): <class 'pygeodesy.elliptic.Elliptic3Tuple'>
    test 247 copy(Elliptic): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 248 Elliptic.copy(): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 249 k2 alpha2 kp2 alphap2: (0.0, 0.0, 0.0, 0.0)
    test 250 k2 alpha2 kp2 alphap2: (0.25, 0.25, 0.25, 0.25)
    test 251 k2 alpha2 kp2 alphap2: (0.5, 0.5, 0.5, 0.5)
    test 252 k2 alpha2 kp2 alphap2: (0.75, 0.75, 0.75, 0.75)

    all 252 testElliptic.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 234.328 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testEpsg.py

    testing testEpsg.py 21.02.11
    test 1 Epsg: 32661
    test 2 0 N: (0, 'N')
    test 3 1 N: (1, 'N')
    test 4 2 N: (2, 'N')
    test 5 3 N: (3, 'N')
    test 6 4 N: (4, 'N')
    test 7 5 N: (5, 'N')
    test 8 6 N: (6, 'N')
    test 9 7 N: (7, 'N')
    test 10 8 N: (8, 'N')
    test 11 9 N: (9, 'N')
    test 12 10 N: (10, 'N')
    test 13 11 N: (11, 'N')
    test 14 12 N: (12, 'N')
    test 15 13 N: (13, 'N')
    test 16 14 N: (14, 'N')
    test 17 15 N: (15, 'N')
    test 18 16 N: (16, 'N')
    test 19 17 N: (17, 'N')
    test 20 18 N: (18, 'N')
    test 21 19 N: (19, 'N')
    test 22 20 N: (20, 'N')
    test 23 21 N: (21, 'N')
    test 24 22 N: (22, 'N')
    test 25 23 N: (23, 'N')
    test 26 24 N: (24, 'N')
    test 27 25 N: (25, 'N')
    test 28 26 N: (26, 'N')
    test 29 27 N: (27, 'N')
    test 30 28 N: (28, 'N')
    test 31 29 N: (29, 'N')
    test 32 30 N: (30, 'N')
    test 33 31 N: (31, 'N')
    test 34 32 N: (32, 'N')
    test 35 33 N: (33, 'N')
    test 36 34 N: (34, 'N')
    test 37 35 N: (35, 'N')
    test 38 36 N: (36, 'N')
    test 39 37 N: (37, 'N')
    test 40 38 N: (38, 'N')
    test 41 39 N: (39, 'N')
    test 42 40 N: (40, 'N')
    test 43 41 N: (41, 'N')
    test 44 42 N: (42, 'N')
    test 45 43 N: (43, 'N')
    test 46 44 N: (44, 'N')
    test 47 45 N: (45, 'N')
    test 48 46 N: (46, 'N')
    test 49 47 N: (47, 'N')
    test 50 48 N: (48, 'N')
    test 51 49 N: (49, 'N')
    test 52 50 N: (50, 'N')
    test 53 51 N: (51, 'N')
    test 54 52 N: (52, 'N')
    test 55 53 N: (53, 'N')
    test 56 54 N: (54, 'N')
    test 57 55 N: (55, 'N')
    test 58 56 N: (56, 'N')
    test 59 57 N: (57, 'N')
    test 60 58 N: (58, 'N')
    test 61 59 N: (59, 'N')
    test 62 60 N: (60, 'N')
    test 63 Epsg: 32761
    test 64 0 S: (0, 'S')
    test 65 1 S: (1, 'S')
    test 66 2 S: (2, 'S')
    test 67 3 S: (3, 'S')
    test 68 4 S: (4, 'S')
    test 69 5 S: (5, 'S')
    test 70 6 S: (6, 'S')
    test 71 7 S: (7, 'S')
    test 72 8 S: (8, 'S')
    test 73 9 S: (9, 'S')
    test 74 10 S: (10, 'S')
    test 75 11 S: (11, 'S')
    test 76 12 S: (12, 'S')
    test 77 13 S: (13, 'S')
    test 78 14 S: (14, 'S')
    test 79 15 S: (15, 'S')
    test 80 16 S: (16, 'S')
    test 81 17 S: (17, 'S')
    test 82 18 S: (18, 'S')
    test 83 19 S: (19, 'S')
    test 84 20 S: (20, 'S')
    test 85 21 S: (21, 'S')
    test 86 22 S: (22, 'S')
    test 87 23 S: (23, 'S')
    test 88 24 S: (24, 'S')
    test 89 25 S: (25, 'S')
    test 90 26 S: (26, 'S')
    test 91 27 S: (27, 'S')
    test 92 28 S: (28, 'S')
    test 93 29 S: (29, 'S')
    test 94 30 S: (30, 'S')
    test 95 31 S: (31, 'S')
    test 96 32 S: (32, 'S')
    test 97 33 S: (33, 'S')
    test 98 34 S: (34, 'S')
    test 99 35 S: (35, 'S')
    test 100 36 S: (36, 'S')
    test 101 37 S: (37, 'S')
    test 102 38 S: (38, 'S')
    test 103 39 S: (39, 'S')
    test 104 40 S: (40, 'S')
    test 105 41 S: (41, 'S')
    test 106 42 S: (42, 'S')
    test 107 43 S: (43, 'S')
    test 108 44 S: (44, 'S')
    test 109 45 S: (45, 'S')
    test 110 46 S: (46, 'S')
    test 111 47 S: (47, 'S')
    test 112 48 S: (48, 'S')
    test 113 49 S: (49, 'S')
    test 114 50 S: (50, 'S')
    test 115 51 S: (51, 'S')
    test 116 52 S: (52, 'S')
    test 117 53 S: (53, 'S')
    test 118 54 S: (54, 'S')
    test 119 55 S: (55, 'S')
    test 120 56 S: (56, 'S')
    test 121 57 S: (57, 'S')
    test 122 58 S: (58, 'S')
    test 123 59 S: (59, 'S')
    test 124 60 S: (60, 'S')
    test 125 Ups: 32761
    test 126 Ups: 00A S
    test 127 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 128 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 129 Ups: 32761
    test 130 Ups: 00B S
    test 131 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 132 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 133 Ups: 32661
    test 134 Ups: 00Y N
    test 135 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 136 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 137 Ups: 32661
    test 138 Ups: 00Z N
    test 139 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 140 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 141 TMcoord 1: 38W N
    test 142 TMcoord 2: 34P N
    test 143 TMcoord 3: 43Q N
    test 144 TMcoord 4: 35Q N
    test 145 TMcoord 5: 37N N
    test 146 TMcoord 6: 34W N
    test 147 TMcoord 7: 40V N
    test 148 TMcoord 8: 34P N
    test 149 TMcoord 9: 41S N
    test 150 TMcoord 10: 41X N
    test 151 TMcoord 11: 43X N
    test 152 TMcoord 12: 44Q N
    test 153 TMcoord 13: 44R N
    test 154 TMcoord 14: 39U N
    test 155 TMcoord 15: 44P N
    test 156 TMcoord 16: 39R N
    test 157 TMcoord 17: 41W N
    test 158 TMcoord 18: 45U N
    test 159 TMcoord 19: 32R N
    test 160 TMcoord 20: 44X N
    test 161 TMcoord 21: 35T N
    test 162 TMcoord 22: 32T N
    test 163 TMcoord 23: 31T N
    test 164 TMcoord 24: 35N N
    test 165 TMcoord 25: 45P N
    test 166 TMcoord 26: 33V N
    test 167 TMcoord 27: 41Q N
    test 168 TMcoord 28: 40X N
    test 169 TMcoord 29: 33P N
    test 170 TMcoord 30: 40S N
    test 171 TMcoord 31: 37T N
    test 172 TMcoord 32: 33X N
    test 173 TMcoord 33: 41U N
    test 174 TMcoord 34: 43Q N
    test 175 TMcoord 35: 42S N
    test 176 TMcoord 36: 33S N
    test 177 TMcoord 37: 35X N
    test 178 TMcoord 38: 38N N
    test 179 TMcoord 39: 44P N
    test 180 TMcoord 40: 33U N
    test 181 TMcoord 41: 37W N
    test 182 TMcoord 42: 36T N
    test 183 TMcoord 43: 36Q N
    test 184 TMcoord 44: 34S N
    test 185 TMcoord 45: 37S N
    test 186 TMcoord 46: 34N N
    test 187 TMcoord 47: 34T N
    test 188 TMcoord 48: 43Q N
    test 189 TMcoord 49: 32N N
    test 190 TMcoord 50: 31Q N
    test 191 TMcoord 51: 45R N
    test 192 TMcoord 52: 45R N
    test 193 TMcoord 53: 34W N
    test 194 TMcoord 54: 44V N
    test 195 TMcoord 55: 44S N
    test 196 TMcoord 56: 39R N
    test 197 TMcoord 57: 00Z N
    test 198 TMcoord 58: 36R N
    test 199 TMcoord 59: 41V N
    test 200 TMcoord 60: 42N N
    test 201 TMcoord 61: 43S N
    test 202 TMcoord 62: 34N N
    test 203 TMcoord 63: 34U N
    test 204 TMcoord 64: 38V N
    test 205 TMcoord 65: 34Q N
    test 206 TMcoord 66: 38P N
    test 207 TMcoord 67: 42S N
    test 208 TMcoord 68: 44S N
    test 209 TMcoord 69: 31Q N
    test 210 TMcoord 70: 40W N
    test 211 TMcoord 71: 35X N
    test 212 TMcoord 72: 32T N
    test 213 TMcoord 73: 45U N
    test 214 TMcoord 74: 40Q N
    test 215 TMcoord 75: 31T N
    test 216 TMcoord 76: 44R N
    test 217 TMcoord 77: 34U N
    test 218 TMcoord 78: 38P N
    test 219 TMcoord 79: 38Q N
    test 220 TMcoord 80: 45N N
    test 221 TMcoord 81: 31S N
    test 222 TMcoord 82: 41U N
    test 223 TMcoord 83: 40V N
    test 224 TMcoord 84: 43X N
    test 225 TMcoord 85: 35N N
    test 226 TMcoord 86: 44P N
    test 227 TMcoord 87: 41N N
    test 228 TMcoord 88: 38Q N
    test 229 TMcoord 89: 43X N
    test 230 TMcoord 90: 36V N
    test 231 TMcoord 91: 34Q N
    test 232 TMcoord 92: 35W N
    test 233 TMcoord 93: 45U N
    test 234 TMcoord 94: 40R N
    test 235 TMcoord 95: 36R N
    test 236 TMcoord 96: 35S N
    test 237 TMcoord 97: 41R N
    test 238 TMcoord 98: 39Q N
    test 239 TMcoord 99: 37T N
    test 240 TMcoord 100: 42P N
    test 241 TMcoord 101: 35T N
    test 242 TMcoord 102: 34Q N
    test 243 TMcoord 103: 41T N
    test 244 TMcoord 104: 43R N
    test 245 TMcoord 105: 34Q N
    test 246 TMcoord 106: 45P N
    test 247 TMcoord 107: 31P N
    test 248 TMcoord 108: 44V N
    test 249 TMcoord 109: 42X N
    test 250 TMcoord 110: 33R N
    test 251 TMcoord 111: 37W N
    test 252 TMcoord 112: 31S N
    test 253 TMcoord 113: 42N N
    test 254 TMcoord 114: 39N N
    test 255 TMcoord 115: 39T N
    test 256 TMcoord 116: 39P N
    test 257 TMcoord 117: 34U N
    test 258 TMcoord 118: 41P N
    test 259 TMcoord 119: 37R N
    test 260 TMcoord 120: 44Q N
    test 261 TMcoord 121: 32V N
    test 262 TMcoord 122: 41R N
    test 263 TMcoord 123: 36T N
    test 264 TMcoord 124: 42U N
    test 265 TMcoord 125: 42U N
    test 266 TMcoord 126: 39T N
    test 267 TMcoord 127: 32T N
    test 268 TMcoord 128: 32Q N
    test 269 TMcoord 129: 38P N
    test 270 TMcoord 130: 34Q N
    test 271 TMcoord 131: 36V N
    test 272 TMcoord 132: 36T N
    test 273 TMcoord 133: 43T N
    test 274 TMcoord 134: 41W N
    test 275 TMcoord 135: 32V N
    test 276 TMcoord 136: 39X N
    test 277 TMcoord 137: 32U N
    test 278 TMcoord 138: 37X N
    test 279 TMcoord 139: 35N N
    test 280 TMcoord 140: 36P N
    test 281 TMcoord 141: 31S N
    test 282 TMcoord 142: 36N N
    test 283 TMcoord 143: 42S N
    test 284 TMcoord 144: 44N N
    test 285 TMcoord 145: 44P N
    test 286 TMcoord 146: 39U N
    test 287 TMcoord 147: 45Q N
    test 288 TMcoord 148: 41W N
    test 289 TMcoord 149: 41N N
    test 290 TMcoord 150: 32S N
    test 291 TMcoord 151: 32N N
    test 292 TMcoord 152: 32T N
    test 293 TMcoord 153: 38R N
    test 294 TMcoord 154: 32V N
    test 295 TMcoord 155: 37Q N
    test 296 TMcoord 156: 44N N
    test 297 TMcoord 157: 34W N
    test 298 TMcoord 158: 45N N
    test 299 TMcoord 159: 42S N
    test 300 TMcoord 160: 40T N
    test 301 TMcoord 161: 31U N
    test 302 TMcoord 162: 45Q N
    test 303 TMcoord 163: 40U N
    test 304 TMcoord 164: 45T N
    test 305 TMcoord 165: 40R N
    test 306 TMcoord 166: 31V N
    test 307 TMcoord 167: 45P N
    test 308 TMcoord 168: 43W N
    test 309 TMcoord 169: 43U N
    test 310 TMcoord 170: 44V N
    test 311 TMcoord 171: 40P N
    test 312 TMcoord 172: 36Q N
    test 313 TMcoord 173: 42Q N
    test 314 TMcoord 174: 41Q N
    test 315 TMcoord 175: 32S N
    test 316 TMcoord 176: 39P N
    test 317 TMcoord 177: 39Q N
    test 318 TMcoord 178: 39T N
    test 319 TMcoord 179: 34U N
    test 320 TMcoord 180: 32W N
    test 321 TMcoord 181: 41U N
    test 322 TMcoord 182: 31Q N
    test 323 TMcoord 183: 40N N
    test 324 TMcoord 184: 40T N
    test 325 TMcoord 185: 38P N
    test 326 TMcoord 186: 44P N
    test 327 TMcoord 187: 40N N
    test 328 TMcoord 188: 44V N
    test 329 TMcoord 189: 41V N
    test 330 TMcoord 190: 43Q N
    test 331 TMcoord 191: 43X N
    test 332 TMcoord 192: 39N N
    test 333 TMcoord 193: 38T N
    test 334 TMcoord 194: 32R N
    test 335 TMcoord 195: 37S N
    test 336 TMcoord 196: 44W N
    test 337 TMcoord 197: 43V N
    test 338 TMcoord 198: 35T N
    test 339 TMcoord 199: 44W N
    test 340 TMcoord 200: 44X N
    test 341 TMcoord 201: 33Q N
    test 342 TMcoord 202: 40W N
    test 343 TMcoord 203: 43S N
    test 344 TMcoord 204: 32U N
    test 345 TMcoord 205: 33V N
    test 346 TMcoord 206: 34R N
    test 347 TMcoord 207: 39S N
    test 348 TMcoord 208: 43W N
    test 349 TMcoord 209: 39T N
    test 350 TMcoord 210: 31W N
    test 351 TMcoord 211: 45R N
    test 352 TMcoord 212: 34W N
    test 353 TMcoord 213: 32T N
    test 354 TMcoord 214: 31P N
    test 355 TMcoord 215: 44V N
    test 356 TMcoord 216: 45U N
    test 357 TMcoord 217: 43R N
    test 358 TMcoord 218: 31N N
    test 359 TMcoord 219: 43T N
    test 360 TMcoord 220: 45R N
    test 361 TMcoord 221: 39N N
    test 362 TMcoord 222: 37S N
    test 363 TMcoord 223: 31R N
    test 364 TMcoord 224: 38Q N
    test 365 TMcoord 225: 40V N
    test 366 TMcoord 226: 45N N
    test 367 TMcoord 227: 44R N
    test 368 TMcoord 228: 43P N
    test 369 TMcoord 229: 42P N
    test 370 TMcoord 230: 45S N
    test 371 TMcoord 231: 42N N
    test 372 TMcoord 232: 38S N
    test 373 TMcoord 233: 32T N
    test 374 TMcoord 234: 41T N
    test 375 TMcoord 235: 34S N
    test 376 TMcoord 236: 40R N
    test 377 TMcoord 237: 35V N
    test 378 TMcoord 238: 38N N
    test 379 TMcoord 239: 40V N
    test 380 TMcoord 240: 36R N
    test 381 TMcoord 241: 37W N
    test 382 TMcoord 242: 45R N
    test 383 TMcoord 243: 37V N
    test 384 TMcoord 244: 33P N
    test 385 TMcoord 245: 32U N
    test 386 TMcoord 246: 38T N
    test 387 TMcoord 247: 37N N
    test 388 TMcoord 248: 36R N
    test 389 TMcoord 249: 44R N
    test 390 TMcoord 250: 44Q N
    test 391 TMcoord 251: 45R N
    test 392 TMcoord 252: 34N N
    test 393 TMcoord 253: 43S N
    test 394 TMcoord 254: 40Q N
    test 395 TMcoord 255: 33T N
    test 396 TMcoord 256: 44P N
    test 397 TMcoord 257: 39N N
    test 398 TMcoord 258: 40Q N

    all 398 testEpsg.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 196.398 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testErrors.py

    testing testErrors.py 21.02.11 (module pygeodesy.errors 21.07.26)
    test 1 AssertionError: name ('value'): test1 txt
    test 2 AssertionError: 'name=value' MISSING: test2 txt
    test 3 AttributeError: name ('value'): test1 txt
    test 4 AttributeError: 'name=value' MISSING: test2 txt
    test 5 IndexError: name ('value'): test1 txt
    test 6 IndexError: 'name=value' MISSING: test2 txt
    test 7 LimitError: name ('value'): test1 txt
    test 8 LimitError: 'name=value' MISSING: test2 txt
    test 9 NameError: name ('value'): test1 txt
    test 10 NameError: 'name=value' MISSING: test2 txt
    test 11 ParseError: name ('value'): test1 txt
    test 12 ParseError: 'name=value' MISSING: test2 txt
    test 13 TypeError: type(name) ('value'): test1 txt
    test 14 TypeError: 'name=value' MISSING: test2 txt
    test 15 ClipError: name ('value'): test1 txt
    test 16 ClipError: 'name=value' MISSING: test2 txt
    test 17 CrossError: name ('value'): test1 txt
    test 18 CrossError: 'name=value' MISSING: test2 txt
    test 19 CSSError: name ('value'): test1 txt
    test 20 CSSError: 'name=value' MISSING: test2 txt
    test 21 EcefError: name ('value'): test1 txt
    test 22 EcefError: 'name=value' MISSING: test2 txt
    test 23 EllipticError: name ('value'): test1 txt
    test 24 EllipticError: 'name=value' MISSING: test2 txt
    test 25 EPSGError: name ('value'): test1 txt
    test 26 EPSGError: 'name=value' MISSING: test2 txt
    test 27 ETMError: name ('value'): test1 txt
    test 28 ETMError: 'name=value' MISSING: test2 txt
    test 29 FrechetError: name ('value'): test1 txt
    test 30 FrechetError: 'name=value' MISSING: test2 txt
    test 31 GARSError: name ('value'): test1 txt
    test 32 GARSError: 'name=value' MISSING: test2 txt
    test 33 GeohashError: name ('value'): test1 txt
    test 34 GeohashError: 'name=value' MISSING: test2 txt
    test 35 GeoidError: name ('value'): test1 txt
    test 36 GeoidError: 'name=value' MISSING: test2 txt
    test 37 HausdorffError: name ('value'): test1 txt
    test 38 HausdorffError: 'name=value' MISSING: test2 txt
    test 39 HeightError: name ('value'): test1 txt
    test 40 HeightError: 'name=value' MISSING: test2 txt
    test 41 LazyImportError: name ('value'): test1 txt
    test 42 LazyImportError: 'name=value' MISSING: test2 txt
    test 43 LCCError: name ('value'): test1 txt
    test 44 LCCError: 'name=value' MISSING: test2 txt
    test 45 MGRSError: name ('value'): test1 txt
    test 46 MGRSError: 'name=value' MISSING: test2 txt
    test 47 OSGRError: name ('value'): test1 txt
    test 48 OSGRError: 'name=value' MISSING: test2 txt
    test 49 PGMError: name ('value'): test1 txt
    test 50 PGMError: 'name=value' MISSING: test2 txt
    test 51 PointsError: name ('value'): test1 txt
    test 52 PointsError: 'name=value' MISSING: test2 txt
    test 53 SciPyError: name ('value'): test1 txt
    test 54 SciPyError: 'name=value' MISSING: test2 txt
    test 55 SciPyWarning: name ('value'): test1 txt
    test 56 SciPyWarning: 'name=value' MISSING: test2 txt
    test 57 TRFError: name ('value'): test1 txt
    test 58 TRFError: 'name=value' MISSING: test2 txt
    test 59 UnitError: name ('value'): test1 txt
    test 60 UnitError: 'name=value' MISSING: test2 txt
    test 61 UPSError: name ('value'): test1 txt
    test 62 UPSError: 'name=value' MISSING: test2 txt
    test 63 UTMError: name ('value'): test1 txt
    test 64 UTMError: 'name=value' MISSING: test2 txt
    test 65 UTMUPSError: name ('value'): test1 txt
    test 66 UTMUPSError: 'name=value' MISSING: test2 txt
    test 67 VectorError: name ('value'): test1 txt
    test 68 VectorError: 'name=value' MISSING: test2 txt
    test 69 VincentyError: name ('value'): test1 txt
    test 70 VincentyError: 'name=value' MISSING: test2 txt
    test 71 WebMercatorError: name ('value'): test1 txt
    test 72 WebMercatorError: 'name=value' MISSING: test2 txt
    test 73 WGRSError: name ('value'): test1 txt
    test 74 WGRSError: 'name=value' MISSING: test2 txt
    test 75 _InvalidError: zero (1): invalid
    test 76 _InvalidError: ValueError('zero (1): invalid')
    test 77 _InvalidError: one (2) or zero (1): outside
    test 78 _InvalidError: ValueError('one (2) or zero (1): outside')
    test 79 _InvalidError: one (2) or zero (1): outside
    test 80 _InvalidError: RangeError('one (2) or zero (1): outside')
    test 81 _IsnotError: _None (None) not an int or float
    test 82 _IsnotError: TypeError('_None (None) not an int or float')
    test 83 _IsnotError: _None (None) not scalar
    test 84 _IsnotError: TypeError('_None (None) not scalar')
    test 85 _IsnotError: _None (None) not scalar: invalid
    test 86 _IsnotError: LimitError('_None (None) not scalar: invalid')
    test 87 LenError: LenError(a, b, c, d) len 1 vs 2 vs 3 vs 4: invalid
    test 88 crosserrors: True
    test 89 crosserrors: False
    test 90 limiterrors: True
    test 91 limiterrors: False
    test 92 rangerrors: True
    test 93 rangerrors: False
    test 94 exception_chaining: None
    test 95 exception_chaining: None
    test 96 exception_chaining: None
    test 97 _xkwds_get: test1
    test 98 _xkwds_get: test2
    test 99 _xkwds_get: _xkwds_get(): no name=default kwargs
    test 100 _xkwds_get: _xkwds_get(n1='d1', n2='d2'): multiple name=default kwargs
    test 101 _xkwds_pop: test1
    test 102 _xkwds_pop: test2
    test 103 _xkwds_pop: _xkwds_pop(): no name=default kwargs
    test 104 _xkwds_pop: _xkwds_pop(n1='d1', n2='d2'): multiple name=default kwargs

    all 104 testErrors.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 2.578 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testEtm.py

    testing testEtm.py 21.05.28 (module pygeodesy.etm 21.07.22)

    testExactTransverseMercator(pygeodesy.etm, 21.07.22)
    test 1 name: test
    test 2 toStr: datum='WGS84', extendp=True, k0=0.9996, lon0=0.0, name='test'
    test 3 easting: -59401.921148
    test 4 northing: 4472390.031129
    test 5 gamma: -0.453697
    test 6 scale: 0.999643
    test 7 lat: 40.400000
    test 8 lon: -3.700000
    test 9 gamma: -0.453697
    test 10 scale: 0.999643
    test 11 easting: -59401.921148
    test 12 northing: 4472390.031129
    test 13 gamma: -0.453697
    test 14 scale: 0.999643
    test 15 easting: 25495.511523
    test 16 northing: 4461098.320889
    test 17 gamma: 0.194038
    test 18 scale: 0.999608
    test 19 lat: 40.300000
    test 20 lon: -74.700000
    test 21 gamma: 0.194038
    test 22 scale: 0.999608
    test 23 easting: 25495.511523
    test 24 northing: 4461098.320889
    test 25 gamma: 0.194038
    test 26 scale: 0.999608
    test 27 lat: -2.00000000
    test 28 lon: 88.00000000
    test 29 gamma: 67.63332900
    test 30 scale: 26.33699547
    test 31 easting: 29735142.37835703
    test 32 northing: 4235043.60793304
    test 33 gamma: 67.63332900
    test 34 scale: 26.33699547
    test 35 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 36 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testExactTransverseMercator(pygeodesy.etm, 21.07.22)
    test 37 name: test
    test 38 toStr: datum='WGS84', extendp=False, k0=0.9996, lon0=0.0, name='test'
    test 39 easting: -59401.921148
    test 40 northing: 4472390.031129
    test 41 gamma: -0.453697
    test 42 scale: 0.999643
    test 43 lat: 40.400000
    test 44 lon: -3.700000
    test 45 gamma: -0.453697
    test 46 scale: 0.999643
    test 47 easting: -59401.921148
    test 48 northing: 4472390.031129
    test 49 gamma: -0.453697
    test 50 scale: 0.999643
    test 51 easting: 25495.511523
    test 52 northing: 4461098.320889
    test 53 gamma: 0.194038
    test 54 scale: 0.999608
    test 55 lat: 40.300000
    test 56 lon: -74.700000
    test 57 gamma: 0.194038
    test 58 scale: 0.999608
    test 59 easting: 25495.511523
    test 60 northing: 4461098.320889
    test 61 gamma: 0.194038
    test 62 scale: 0.999608
    test 63 lat: -2.00000000
    test 64 lon: 88.00000000
    test 65 gamma: 67.63332900
    test 66 scale: 26.33699547
    test 67 easting: 0.000  FAILED, KNOWN, expected -0.000
    test 68 northing: -9997964.943
    test 69 gamma: 120.000
    test 70 scale: 1.000
    test 71 lat: -90.000
    test 72 lon: 0.000
    test 73 gamma: 0.000
    test 74 scale: 1.000
    test 75 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 76 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testLatLon(pygeodesy.etm, 21.07.22)
    test 77 toEtm8: 45 S -20297797 5336899
    test 78 name: test
    test 79 toUtm: 45 S -20297797 5336899
    test 80 name: test
    test 81 toETM5: 45 S -20297797 5336899
    test 82 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 83 .name: test
    test 84 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 85 .name: test
    test 86 parse: 31 N 448251 5411932
    test 87 name: parse
    test 88 parse: 31 N 448251 5411932
    test 89 name: parse

    testLatLon(pygeodesy.etm, 21.07.22)
    test 90 toEtm8: 45 S -20297797 5336899
    test 91 name: test
    test 92 toUtm: 45 S -20297797 5336899
    test 93 name: test
    test 94 toETM5: 45 S -20297797 5336899
    test 95 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 96 .name: test
    test 97 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 98 .name: test
    test 99 parse: 31 N 448251 5411932
    test 100 name: parse
    test 101 parse: 31 N 448251 5411932
    test 102 name: parse

    1 of 102 testEtm.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 122.349 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testEtmTMcoords.py

    testing testEtmTMcoords.py 19.05.23 (module pygeodesy.etm 21.07.22)
    test 1 line 1 toEtm8.easting: 1548706.791619
    test 2 line 1 toEtm8.northing: 8451449.198772
    test 3 line 1 toEtm8.convergence: 43.922790
    test 4 line 1 toEtm8.scale: 1.029060
    test 5 line 1 toEtm8.lat: 70.579277
    test 6 line 1 toEtm8.lon: 45.599420
    test 7 line 2 toEtm8.easting: 2624150.740929
    test 8 line 2 toEtm8.northing: 1204434.041605
    test 9 line 2 toEtm8.convergence: 4.292619
    test 10 line 2 toEtm8.scale: 1.086051
    test 11 line 2 toEtm8.lat: 10.018894
    test 12 line 2 toEtm8.lon: 23.313324
    test 13 line 3 toEtm8.easting: 9855841.232935
    test 14 line 3 toEtm8.northing: 6145496.115155
    test 15 line 3 toEtm8.convergence: 53.348315
    test 16 line 3 toEtm8.scale: 2.445098
    test 17 line 3 toEtm8.lat: 19.479896
    test 18 line 3 toEtm8.lon: 75.662049
    test 19 line 4 toEtm8.easting: 3206390.691996
    test 20 line 4 toEtm8.northing: 2650745.400406
    test 21 line 4 toEtm8.convergence: 11.666950
    test 22 line 4 toEtm8.scale: 1.129359
    test 23 line 4 toEtm8.lat: 21.072465
    test 24 line 4 toEtm8.lon: 29.828684
    test 25 line 5 toEtm8.easting: 4328154.083501
    test 26 line 5 toEtm8.northing: 749647.623690
    test 27 line 5 toEtm8.convergence: 4.024317
    test 28 line 5 toEtm8.scale: 1.240829
    test 29 line 5 toEtm8.lat: 5.458957
    test 30 line 5 toEtm8.lon: 36.385237
    test 31 line 6 toEtm8.easting: 847598.266514
    test 32 line 6 toEtm8.northing: 7947180.962440
    test 33 line 6 toEtm8.convergence: 21.639091
    test 34 line 6 toEtm8.scale: 1.008399
    test 35 line 6 toEtm8.lat: 70.175454
    test 36 line 6 toEtm8.lon: 22.865350
    test 37 line 7 toEtm8.easting: 2727657.337974
    test 38 line 7 toEtm8.northing: 8283916.696410
    test 39 line 7 toEtm8.convergence: 55.690909
    test 40 line 7 toEtm8.scale: 1.091942
    test 41 line 7 toEtm8.lat: 61.965605
    test 42 line 7 toEtm8.lon: 58.931371
    test 43 line 8 toEtm8.easting: 2331001.751890
    test 44 line 8 toEtm8.northing: 1313608.224751
    test 45 line 8 toEtm8.convergence: 4.214690
    test 46 line 8 toEtm8.scale: 1.067599
    test 47 line 8 toEtm8.lat: 11.116050
    test 48 line 8 toEtm8.lon: 20.901069
    test 49 line 9 toEtm8.easting: 6035557.239480
    test 50 line 9 toEtm8.northing: 5791770.791879
    test 51 line 9 toEtm8.convergence: 43.698170
    test 52 line 9 toEtm8.scale: 1.481260
    test 53 line 9 toEtm8.lat: 32.210543
    test 54 line 9 toEtm8.lon: 60.705849
    test 55 line 10 toEtm8.easting: 1064553.125852
    test 56 line 10 toEtm8.northing: 9417273.737208
    test 57 line 10 toEtm8.convergence: 61.100380
    test 58 line 10 toEtm8.scale: 1.013475
    test 59 line 10 toEtm8.lat: 79.187451
    test 60 line 10 toEtm8.lon: 61.532382
    test 61 line 11 toEtm8.easting: 1400137.116164
    test 62 line 11 toEtm8.northing: 9616907.017686
    test 63 line 11 toEtm8.convergence: 74.527087
    test 64 line 11 toEtm8.scale: 1.023640
    test 65 line 11 toEtm8.lat: 77.103759
    test 66 line 11 toEtm8.lon: 74.899105
    test 67 line 12 toEtm8.easting: 9860691.016626
    test 68 line 12 toEtm8.northing: 7433039.143328
    test 69 line 12 toEtm8.convergence: 65.357693
    test 70 line 12 toEtm8.scale: 2.438973
    test 71 line 12 toEtm8.lat: 21.889514
    test 72 line 12 toEtm8.lon: 80.019886
    test 73 line 13 toEtm8.easting: 8076501.833695
    test 74 line 13 toEtm8.northing: 8561614.174782
    test 75 line 13 toEtm8.convergence: 75.073393
    test 76 line 13 toEtm8.scale: 1.906202
    test 77 line 13 toEtm8.lat: 30.536296
    test 78 line 13 toEtm8.lon: 82.186178
    test 79 line 14 toEtm8.easting: 3335099.866623
    test 80 line 14 toEtm8.northing: 6740519.084015
    test 81 line 14 toEtm8.convergence: 40.611821
    test 82 line 14 toEtm8.scale: 1.139021
    test 83 line 14 toEtm8.lat: 49.990485
    test 84 line 14 toEtm8.lon: 48.203179
    test 85 line 15 toEtm8.easting: 12051574.928500
    test 86 line 15 toEtm8.northing: 6587213.051951
    test 87 line 15 toEtm8.convergence: 59.033237
    test 88 line 15 toEtm8.scale: 3.357469
    test 89 line 15 toEtm8.lat: 14.486312
    test 90 line 15 toEtm8.lon: 80.905137
    test 91 line 16 toEtm8.easting: 5387578.735298
    test 92 line 16 toEtm8.northing: 4111216.907168
    test 93 line 16 toEtm8.convergence: 27.574337
    test 94 line 16 toEtm8.scale: 1.379357
    test 95 line 16 toEtm8.lat: 25.936824
    test 96 line 16 toEtm8.lon: 49.913598
    test 97 line 17 toEtm8.easting: 2622214.380233
    test 98 line 17 toEtm8.northing: 8678923.984567
    test 99 line 17 toEtm8.convergence: 61.697275
    test 100 line 17 toEtm8.scale: 1.084810
    test 101 line 17 toEtm8.lat: 64.402196
    test 102 line 17 toEtm8.lon: 64.091395
    test 103 line 18 toEtm8.easting: 5068474.169633
    test 104 line 18 toEtm8.northing: 9492066.993709
    test 105 line 18 toEtm8.convergence: 83.156740
    test 106 line 18 toEtm8.scale: 1.329990
    test 107 line 18 toEtm8.lat: 48.451354
    test 108 line 18 toEtm8.lon: 84.856198
    test 109 line 19 toEtm8.easting: 738062.047779
    test 110 line 19 toEtm8.northing: 3031007.074116
    test 111 line 19 toEtm8.convergence: 3.416802
    test 112 line 19 toEtm8.scale: 1.006332
    test 113 line 19 toEtm8.lat: 27.203895
    test 114 line 19 toEtm8.lon: 7.440229
    test 115 line 20 toEtm8.easting: 1944413.834565
    test 116 line 20 toEtm8.northing: 9613299.224493
    test 117 line 20 toEtm8.convergence: 78.462831
    test 118 line 20 toEtm8.scale: 1.046134
    test 119 line 20 toEtm8.lat: 72.509000
    test 120 line 20 toEtm8.lon: 78.982283
    test 121 line 21 toEtm8.easting: 2114521.418406
    test 122 line 21 toEtm8.northing: 4954077.440098
    test 123 line 21 toEtm8.convergence: 17.571878
    test 124 line 21 toEtm8.scale: 1.055093
    test 125 line 21 toEtm8.lat: 41.824954
    test 126 line 21 toEtm8.lon: 25.392744
    test 127 line 22 toEtm8.easting: 620365.905090
    test 128 line 22 toEtm8.northing: 4755542.026562
    test 129 line 22 toEtm8.convergence: 5.152022
    test 130 line 22 toEtm8.scale: 1.004338
    test 131 line 22 toEtm8.lat: 42.701376
    test 132 line 22 toEtm8.lon: 7.572738
    test 133 line 23 toEtm8.easting: 263004.770989
    test 134 line 23 toEtm8.northing: 4493669.762451
    test 135 line 23 toEtm8.convergence: 2.020523
    test 136 line 23 toEtm8.scale: 1.000452
    test 137 line 23 toEtm8.lat: 40.552052
    test 138 line 23 toEtm8.lon: 3.106056
    test 139 line 24 toEtm8.easting: 3217221.739462
    test 140 line 24 toEtm8.northing: 437776.119161
    test 141 line 24 toEtm8.convergence: 1.848169
    test 142 line 24 toEtm8.scale: 1.130558
    test 143 line 24 toEtm8.lat: 3.501242
    test 144 line 24 toEtm8.lon: 27.806507
    test 145 line 25 toEtm8.easting: 14661142.444961
    test 146 line 25 toEtm8.northing: 7476100.824185
    test 147 line 25 toEtm8.convergence: 68.376669
    test 148 line 25 toEtm8.scale: 4.896650
    test 149 line 25 toEtm8.lat: 10.148715
    test 150 line 25 toEtm8.lon: 85.373768
    test 151 line 26 toEtm8.easting: 967777.158554
    test 152 line 26 toEtm8.northing: 6615684.266592
    test 153 line 26 toEtm8.convergence: 14.410044
    test 154 line 26 toEtm8.scale: 1.011100
    test 155 line 26 toEtm8.lat: 58.582623
    test 156 line 26 toEtm8.lon: 16.755558
    test 157 line 27 toEtm8.easting: 7558840.728461
    test 158 line 27 toEtm8.northing: 4144728.130764
    test 159 line 27 toEtm8.convergence: 32.557264
    test 160 line 27 toEtm8.scale: 1.791490
    test 161 line 27 toEtm8.lat: 19.793004
    test 162 line 27 toEtm8.lon: 61.746763
    test 163 line 28 toEtm8.easting: 1056008.314161
    test 164 line 28 toEtm8.northing: 9290799.692669
    test 165 line 28 toEtm8.convergence: 55.843278
    test 166 line 28 toEtm8.scale: 1.013253
    test 167 line 28 toEtm8.lat: 78.666776
    test 168 line 28 toEtm8.lon: 56.365355
    test 169 line 29 toEtm8.easting: 1943965.134687
    test 170 line 29 toEtm8.northing: 1389972.228690
    test 171 line 29 toEtm8.convergence: 3.774869
    test 172 line 29 toEtm8.scale: 1.046724
    test 173 line 29 toEtm8.lat: 11.998788
    test 174 line 29 toEtm8.lon: 17.597873
    test 175 line 30 toEtm8.easting: 5803077.072902
    test 176 line 30 toEtm8.northing: 5649957.943659
    test 177 line 30 toEtm8.convergence: 41.717943
    test 178 line 30 toEtm8.scale: 1.442572
    test 179 line 30 toEtm8.lat: 32.540378
    test 180 line 30 toEtm8.lon: 58.764613
    test 181 line 31 toEtm8.easting: 2928716.986009
    test 182 line 31 toEtm8.northing: 5731835.058317
    test 183 line 31 toEtm8.convergence: 28.538550
    test 184 line 31 toEtm8.scale: 1.106780
    test 185 line 31 toEtm8.lat: 45.160356
    test 186 line 31 toEtm8.lon: 37.465285
    test 187 line 32 toEtm8.easting: 326141.975756
    test 188 line 32 toEtm8.northing: 8881325.164543
    test 189 line 32 toEtm8.convergence: 16.111415
    test 190 line 32 toEtm8.scale: 1.000900
    test 191 line 32 toEtm8.lat: 79.584190
    test 192 line 32 toEtm8.lon: 16.367006
    test 193 line 33 toEtm8.easting: 3933015.267450
    test 194 line 33 toEtm8.northing: 7932373.909512
    test 195 line 33 toEtm8.convergence: 58.577424
    test 196 line 33 toEtm8.scale: 1.194811
    test 197 line 33 toEtm8.lat: 52.470664
    test 198 line 33 toEtm8.lon: 64.125580
    test 199 line 34 toEtm8.easting: 8598926.983213
    test 200 line 34 toEtm8.northing: 6214135.167503
    test 201 line 34 toEtm8.convergence: 52.612878
    test 202 line 34 toEtm8.scale: 2.051367
    test 203 line 34 toEtm8.lat: 23.702673
    test 204 line 34 toEtm8.lon: 72.630363
    test 205 line 35 toEtm8.easting: 6620553.333772
    test 206 line 35 toEtm8.northing: 6540527.122948
    test 207 line 35 toEtm8.convergence: 52.350140
    test 208 line 35 toEtm8.scale: 1.586614
    test 209 line 35 toEtm8.lat: 32.603520
    test 210 line 35 toEtm8.lon: 67.280123
    test 211 line 36 toEtm8.easting: 1515136.758292
    test 212 line 36 toEtm8.northing: 3858996.087537
    test 213 line 36 toEtm8.convergence: 9.225127
    test 214 line 36 toEtm8.scale: 1.028029
    test 215 line 36 toEtm8.lat: 33.776224
    test 216 line 36 toEtm8.lon: 16.280993
    test 217 line 37 toEtm8.easting: 479854.373445
    test 218 line 37 toEtm8.northing: 8980501.389896
    test 219 line 37 toEtm8.convergence: 25.021222
    test 220 line 37 toEtm8.scale: 1.002415
    test 221 line 37 toEtm8.lat: 79.932747
    test 222 line 37 toEtm8.lon: 25.363622
    test 223 line 38 toEtm8.easting: 5243446.564940
    test 224 line 38 toEtm8.northing: 140657.213960
    test 225 line 38 toEtm8.convergence: 0.862817
    test 226 line 38 toEtm8.scale: 1.360358
    test 227 line 38 toEtm8.lat: 0.935056
    test 228 line 38 toEtm8.lon: 42.538824
    test 229 line 39 toEtm8.easting: 12806457.923218
    test 230 line 39 toEtm8.northing: 7170118.684675
    test 231 line 39 toEtm8.convergence: 64.708921
    test 232 line 39 toEtm8.scale: 3.740588
    test 233 line 39 toEtm8.lat: 13.490862
    test 234 line 39 toEtm8.lon: 83.178380
    test 235 line 40 toEtm8.easting: 1202993.459158
    test 236 line 40 toEtm8.northing: 5557316.053599
    test 237 line 40 toEtm8.convergence: 12.579061
    test 238 line 40 toEtm8.scale: 1.017426
    test 239 line 40 toEtm8.lat: 48.979057
    test 240 line 40 toEtm8.lon: 16.474542
    test 241 line 41 toEtm8.easting: 1729088.710196
    test 242 line 41 toEtm8.northing: 7770874.289954
    test 243 line 41 toEtm8.convergence: 36.021783
    test 244 line 41 toEtm8.scale: 1.036397
    test 245 line 41 toEtm8.lat: 65.036016
    test 246 line 41 toEtm8.lon: 38.729091
    test 247 line 42 toEtm8.easting: 2437301.517425
    test 248 line 42 toEtm8.northing: 5539327.748318
    test 249 line 42 toEtm8.convergence: 23.461879
    test 250 line 42 toEtm8.scale: 1.073459
    test 251 line 42 toEtm8.lat: 45.510091
    test 252 line 42 toEtm8.lon: 31.303729
    test 253 line 43 toEtm8.easting: 3647186.135066
    test 254 line 43 toEtm8.northing: 2086412.330983
    test 255 line 43 toEtm8.convergence: 10.023991
    test 256 line 43 toEtm8.scale: 1.168707
    test 257 line 43 toEtm8.lat: 16.058010
    test 258 line 43 toEtm8.lon: 32.520026
    test 259 line 44 toEtm8.easting: 1818497.243556
    test 260 line 44 toEtm8.northing: 4275471.745057
    test 261 line 44 toEtm8.convergence: 12.499656
    test 262 line 44 toEtm8.scale: 1.040604
    test 263 line 44 toEtm8.lat: 36.845200
    test 264 line 44 toEtm8.lon: 20.282283
    test 265 line 45 toEtm8.easting: 3751304.113783
    test 266 line 45 toEtm8.northing: 5130454.001592
    test 267 line 45 toEtm8.convergence: 28.959707
    test 268 line 45 toEtm8.scale: 1.177681
    test 269 line 45 toEtm8.lat: 37.865481
    test 270 line 45 toEtm8.lon: 41.990402
    test 271 line 46 toEtm8.easting: 2616733.138544
    test 272 line 46 toEtm8.northing: 394644.463815
    test 273 line 46 toEtm8.convergence: 1.390425
    test 274 line 46 toEtm8.scale: 1.085595
    test 275 line 46 toEtm8.lat: 3.287272
    test 276 line 46 toEtm8.lon: 22.917604
    test 277 line 47 toEtm8.easting: 1756506.573942
    test 278 line 47 toEtm8.northing: 5570393.986394
    test 279 line 47 toEtm8.convergence: 17.897894
    test 280 line 47 toEtm8.scale: 1.037732
    test 281 line 47 toEtm8.lat: 47.813686
    test 282 line 47 toEtm8.lon: 23.545092
    test 283 line 48 toEtm8.easting: 8752461.894711
    test 284 line 48 toEtm8.northing: 6087728.152284
    test 285 line 48 toEtm8.convergence: 51.628465
    test 286 line 48 toEtm8.scale: 2.095465
    test 287 line 48 toEtm8.lat: 22.836853
    test 288 line 48 toEtm8.lon: 72.604385
    test 289 line 49 toEtm8.easting: 1309272.216432
    test 290 line 49 toEtm8.northing: 59520.028899
    test 291 line 49 toEtm8.convergence: 0.109069
    test 292 line 49 toEtm8.scale: 1.020897
    test 293 line 49 toEtm8.lat: 0.527262
    test 294 line 49 toEtm8.lon: 11.684209
    test 295 line 50 toEtm8.easting: 328652.277129
    test 296 line 50 toEtm8.northing: 2233043.958874
    test 297 line 50 toEtm8.convergence: 1.084863
    test 298 line 50 toEtm8.scale: 1.000935
    test 299 line 50 toEtm8.lat: 20.166742
    test 300 line 50 toEtm8.lon: 3.143948
    test 301 line 51 toEtm8.easting: 8637959.716447
    test 302 line 51 toEtm8.northing: 9190635.156031
    test 303 line 51 toEtm8.convergence: 81.802563
    test 304 line 51 toEtm8.scale: 2.054329
    test 305 line 51 toEtm8.lat: 28.604629
    test 306 line 51 toEtm8.lon: 85.988721
    test 307 line 52 toEtm8.easting: 8548521.455147
    test 308 line 52 toEtm8.northing: 9172410.943282
    test 309 line 52 toEtm8.convergence: 81.583928
    test 310 line 52 toEtm8.scale: 2.029641
    test 311 line 52 toEtm8.lat: 28.984048
    test 312 line 52 toEtm8.lon: 85.833448
    test 313 line 53 toEtm8.easting: 796987.281104
    test 314 line 53 toEtm8.northing: 7677446.357675
    test 315 line 53 toEtm8.convergence: 18.084472
    test 316 line 53 toEtm8.scale: 1.007381
    test 317 line 53 toEtm8.lat: 68.071020
    test 318 line 53 toEtm8.lon: 19.392823
    test 319 line 54 toEtm8.easting: 3291036.496762
    test 320 line 54 toEtm8.northing: 9513199.600666
    test 321 line 54 toEtm8.convergence: 80.890254
    test 322 line 54 toEtm8.scale: 1.134826
    test 323 line 54 toEtm8.lat: 61.416576
    test 324 line 54 toEtm8.lon: 81.981611
    test 325 line 55 toEtm8.easting: 7087225.330906
    test 326 line 55 toEtm8.northing: 8382823.855822
    test 327 line 55 toEtm8.convergence: 72.253756
    test 328 line 55 toEtm8.scale: 1.678070
    test 329 line 55 toEtm8.lat: 35.074753
    test 330 line 55 toEtm8.lon: 79.496003
    test 331 line 56 toEtm8.easting: 5090358.125724
    test 332 line 56 toEtm8.northing: 4318294.133489
    test 333 line 56 toEtm8.convergence: 28.266280
    test 334 line 56 toEtm8.scale: 1.336264
    test 335 line 56 toEtm8.lat: 28.078790
    test 336 line 56 toEtm8.lon: 48.684350
    test skipped (1): line 57 toEtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 toEtm8.easting: 3447670.550785
    test 338 line 58 toEtm8.northing: 3680238.888223
    test 339 line 58 toEtm8.convergence: 17.934948
    test 340 line 58 toEtm8.scale: 1.149831
    test 341 line 58 toEtm8.lat: 28.473948
    test 342 line 58 toEtm8.lon: 34.127306
    test 343 line 59 toEtm8.easting: 3396522.906798
    test 344 line 59 toEtm8.northing: 8093659.687593
    test 345 line 59 toEtm8.convergence: 57.747117
    test 346 line 59 toEtm8.scale: 1.144006
    test 347 line 59 toEtm8.lat: 56.629354
    test 348 line 59 toEtm8.lon: 62.196474
    test 349 line 60 toEtm8.easting: 11249894.100784
    test 350 line 60 toEtm8.northing: 1619226.506299
    test 351 line 60 toEtm8.convergence: 14.210358
    test 352 line 60 toEtm8.scale: 3.048347
    test 353 line 60 toEtm8.lat: 4.747762
    test 354 line 60 toEtm8.lon: 70.932555
    test 355 line 61 toEtm8.easting: 6808805.230950
    test 356 line 61 toEtm8.northing: 8044779.777369
    test 357 line 61 toEtm8.convergence: 68.242008
    test 358 line 61 toEtm8.scale: 1.621464
    test 359 line 61 toEtm8.lat: 35.882113
    test 360 line 61 toEtm8.lon: 76.741849
    test 361 line 62 toEtm8.easting: 2306021.556506
    test 362 line 62 toEtm8.northing: 757191.592866
    test 363 line 62 toEtm8.convergence: 2.385686
    test 364 line 62 toEtm8.scale: 1.066159
    test 365 line 62 toEtm8.lat: 6.420705
    test 366 line 62 toEtm8.lon: 20.416028
    test 367 line 63 toEtm8.easting: 1547406.313862
    test 368 line 63 toEtm8.northing: 6048712.751824
    test 369 line 63 toEtm8.convergence: 18.474372
    test 370 line 63 toEtm8.scale: 1.029123
    test 371 line 63 toEtm8.lat: 52.335248
    test 372 line 63 toEtm8.lon: 22.879294
    test 373 line 64 toEtm8.easting: 2430467.650383
    test 374 line 64 toEtm8.northing: 7557167.613972
    test 375 line 64 toEtm8.convergence: 42.110021
    test 376 line 64 toEtm8.scale: 1.072759
    test 377 line 64 toEtm8.lat: 59.846391
    test 378 line 64 toEtm8.lon: 46.262536
    test 379 line 65 toEtm8.easting: 2334053.905830
    test 380 line 65 toEtm8.northing: 1948076.966582
    test 381 line 65 toEtm8.convergence: 6.353185
    test 382 line 65 toEtm8.scale: 1.067733
    test 383 line 65 toEtm8.lat: 16.461790
    test 384 line 65 toEtm8.lon: 21.433269
    test 385 line 66 toEtm8.easting: 5564175.186737
    test 386 line 66 toEtm8.northing: 1836851.660412
    test 387 line 66 toEtm8.convergence: 11.870682
    test 388 line 66 toEtm8.scale: 1.408265
    test 389 line 66 toEtm8.lat: 11.707905
    test 390 line 66 toEtm8.lon: 45.827075
    test 391 line 67 toEtm8.easting: 6118505.590359
    test 392 line 67 toEtm8.northing: 7631684.552421
    test 393 line 67 toEtm8.convergence: 62.477323
    test 394 line 67 toEtm8.scale: 1.493420
    test 395 line 67 toEtm8.lat: 38.519075
    test 396 line 67 toEtm8.lon: 71.935918
    test 397 line 68 toEtm8.easting: 7365359.294665
    test 398 line 68 toEtm8.northing: 8818194.451531
    test 399 line 68 toEtm8.convergence: 77.207042
    test 400 line 68 toEtm8.scale: 1.737639
    test 401 line 68 toEtm8.lat: 34.264007
    test 402 line 68 toEtm8.lon: 82.647878
    test 403 line 69 toEtm8.easting: 36187.342415
    test 404 line 69 toEtm8.northing: 2142565.324802
    test 405 line 69 toEtm8.convergence: 0.114334
    test 406 line 69 toEtm8.scale: 0.999616
    test 407 line 69 toEtm8.lat: 19.376880
    test 408 line 69 toEtm8.lon: 0.344605
    test 409 line 70 toEtm8.easting: 2380328.546851
    test 410 line 70 toEtm8.northing: 8440109.872384
    test 411 line 70 toEtm8.convergence: 55.076067
    test 412 line 70 toEtm8.scale: 1.069658
    test 413 line 70 toEtm8.lat: 65.075805
    test 414 line 70 toEtm8.lon: 57.653438
    test 415 line 71 toEtm8.easting: 582511.608826
    test 416 line 71 toEtm8.northing: 8876047.217071
    test 417 line 71 toEtm8.convergence: 27.133300
    test 418 line 71 toEtm8.scale: 1.003749
    test 419 line 71 toEtm8.lat: 78.691870
    test 420 line 71 toEtm8.lon: 27.591736
    test 421 line 72 toEtm8.easting: 899441.350477
    test 422 line 72 toEtm8.northing: 4582046.430516
    test 423 line 72 toEtm8.convergence: 7.031211
    test 424 line 72 toEtm8.scale: 1.009573
    test 425 line 72 toEtm8.lat: 40.893022
    test 426 line 72 toEtm8.lon: 10.668804
    test 427 line 73 toEtm8.easting: 5022485.124337
    test 428 line 73 toEtm8.northing: 9741774.933721
    test 429 line 73 toEtm8.convergence: 86.505947
    test 430 line 73 toEtm8.scale: 1.323700
    test 431 line 73 toEtm8.lat: 48.914279
    test 432 line 73 toEtm8.lon: 87.359268
    test 433 line 74 toEtm8.easting: 6701004.587204
    test 434 line 74 toEtm8.northing: 2954368.258231
    test 435 line 74 toEtm8.convergence: 21.560153
    test 436 line 74 toEtm8.scale: 1.608554
    test 437 line 74 toEtm8.lat: 16.208377
    test 438 line 74 toEtm8.lon: 54.494282
    test 439 line 75 toEtm8.easting: 454986.218897
    test 440 line 75 toEtm8.northing: 4885087.887884
    test 441 line 75 toEtm8.convergence: 3.945648
    test 442 line 75 toEtm8.scale: 1.002147
    test 443 line 75 toEtm8.lat: 43.977936
    test 444 line 75 toEtm8.lon: 5.672541
    test 445 line 76 toEtm8.easting: 8903956.140311
    test 446 line 76 toEtm8.northing: 8470608.577482
    test 447 line 76 toEtm8.convergence: 74.723116
    test 448 line 76 toEtm8.scale: 2.131311
    test 449 line 76 toEtm8.lat: 26.850861
    test 450 line 76 toEtm8.lon: 82.834480
    test 451 line 77 toEtm8.easting: 1547627.594741
    test 452 line 77 toEtm8.northing: 6036584.538347
    test 453 line 77 toEtm8.convergence: 18.407629
    test 454 line 77 toEtm8.scale: 1.029132
    test 455 line 77 toEtm8.lat: 52.234165
    test 456 line 77 toEtm8.lon: 22.827655
    test 457 line 78 toEtm8.easting: 5221488.778597
    test 458 line 78 toEtm8.northing: 1762592.044392
    test 459 line 78 toEtm8.convergence: 10.927880
    test 460 line 78 toEtm8.scale: 1.356721
    test 461 line 78 toEtm8.lat: 11.674646
    test 462 line 78 toEtm8.lon: 43.500147
    test 463 line 79 toEtm8.easting: 4880570.297161
    test 464 line 79 toEtm8.northing: 3325433.988867
    test 465 line 79 toEtm8.convergence: 20.469862
    test 466 line 79 toEtm8.scale: 1.308476
    test 467 line 79 toEtm8.lat: 22.492753
    test 468 line 79 toEtm8.lon: 44.179153
    test 469 line 80 toEtm8.easting: 23930680.082694
    test 470 line 80 toEtm8.northing: 7491462.099038
    test 471 line 80 toEtm8.convergence: 75.937628
    test 472 line 80 toEtm8.scale: 15.556365
    test 473 line 80 toEtm8.lat: 0.910999
    test 474 line 80 toEtm8.lon: 88.548823
    test 475 line 81 toEtm8.easting: 71519.450458
    test 476 line 81 toEtm8.northing: 3654740.444852
    test 477 line 81 toEtm8.convergence: 0.417448
    test 478 line 81 toEtm8.scale: 0.999663
    test 479 line 81 toEtm8.lat: 33.028802
    test 480 line 81 toEtm8.lon: 0.765843
    test 481 line 82 toEtm8.easting: 4152797.795220
    test 482 line 82 toEtm8.northing: 7823098.502751
    test 483 line 82 toEtm8.convergence: 58.238901
    test 484 line 82 toEtm8.scale: 1.218052
    test 485 line 82 toEtm8.lat: 50.649195
    test 486 line 82 toEtm8.lon: 64.389076
    test 487 line 83 toEtm8.easting: 2926725.707639
    test 488 line 83 toEtm8.northing: 7904918.072844
    test 489 line 83 toEtm8.convergence: 51.592748
    test 490 line 83 toEtm8.scale: 1.106206
    test 491 line 83 toEtm8.lat: 58.820640
    test 492 line 83 toEtm8.lon: 55.841048
    test 493 line 84 toEtm8.easting: 1325509.113869
    test 494 line 84 toEtm8.northing: 9675214.948213
    test 495 line 84 toEtm8.convergence: 76.116213
    test 496 line 84 toEtm8.scale: 1.021136
    test 497 line 84 toEtm8.lat: 77.865762
    test 498 line 84 toEtm8.lon: 76.414618
    test 499 line 85 toEtm8.easting: 3045296.448926
    test 500 line 85 toEtm8.northing: 542153.443280
    test 501 line 85 toEtm8.convergence: 2.185095
    test 502 line 85 toEtm8.scale: 1.116664
    test 503 line 85 toEtm8.lat: 4.389639
    test 504 line 85 toEtm8.lon: 26.458976
    test 505 line 86 toEtm8.easting: 11843870.887518
    test 506 line 86 toEtm8.northing: 5912803.073343
    test 507 line 86 toEtm8.convergence: 52.814259
    test 508 line 86 toEtm8.scale: 3.267256
    test 509 line 86 toEtm8.lat: 13.924448
    test 510 line 86 toEtm8.lon: 79.017873
    test 511 line 87 toEtm8.easting: 8891099.704936
    test 512 line 87 toEtm8.northing: 162160.142227
    test 513 line 87 toEtm8.convergence: 1.312094
    test 514 line 87 toEtm8.scale: 2.157363
    test 515 line 87 toEtm8.lat: 0.679713
    test 516 line 87 toEtm8.lon: 62.036792
    test 517 line 88 toEtm8.easting: 4784814.214449
    test 518 line 88 toEtm8.northing: 2984497.432580
    test 519 line 88 toEtm8.convergence: 17.946545
    test 520 line 88 toEtm8.scale: 1.296116
    test 521 line 88 toEtm8.lat: 20.478281
    test 522 line 88 toEtm8.lon: 42.678234
    test 523 line 89 toEtm8.easting: 1772074.682154
    test 524 line 89 toEtm8.northing: 9491552.560143
    test 525 line 89 toEtm8.convergence: 73.634830
    test 526 line 89 toEtm8.scale: 1.038202
    test 527 line 89 toEtm8.lat: 73.695703
    test 528 line 89 toEtm8.lon: 74.259097
    test 529 line 90 toEtm8.easting: 1907649.782106
    test 530 line 90 toEtm8.northing: 6994232.429379
    test 531 line 90 toEtm8.convergence: 29.718929
    test 532 line 90 toEtm8.scale: 1.044503
    test 533 line 90 toEtm8.lat: 58.569370
    test 534 line 90 toEtm8.lon: 33.777549
    test 535 line 91 toEtm8.easting: 2084423.818962
    test 536 line 91 toEtm8.northing: 2211816.035619
    test 537 line 91 toEtm8.convergence: 6.556448
    test 538 line 91 toEtm8.scale: 1.053793
    test 539 line 91 toEtm8.lat: 18.933881
    test 540 line 91 toEtm8.lon: 19.492695
    test 541 line 92 toEtm8.easting: 1064373.671729
    test 542 line 92 toEtm8.northing: 7812482.547461
    test 543 line 92 toEtm8.convergence: 24.874124
    test 544 line 92 toEtm8.scale: 1.013490
    test 545 line 92 toEtm8.lat: 68.317934
    test 546 line 92 toEtm8.lon: 26.515687
    test 547 line 93 toEtm8.easting: 4770385.479297
    test 548 line 93 toEtm8.northing: 9734318.902980
    test 549 line 93 toEtm8.convergence: 86.273119
    test 550 line 93 toEtm8.scale: 1.290553
    test 551 line 93 toEtm8.lat: 50.641941
    test 552 line 93 toEtm8.lon: 87.111557
    test 553 line 94 toEtm8.easting: 6398096.677297
    test 554 line 94 toEtm8.northing: 4410894.752104
    test 555 line 94 toEtm8.convergence: 32.558023
    test 556 line 94 toEtm8.scale: 1.548004
    test 557 line 94 toEtm8.lat: 24.411298
    test 558 line 94 toEtm8.lon: 56.881823
    test 559 line 95 toEtm8.easting: 3138623.300415
    test 560 line 95 toEtm8.northing: 3082960.600798
    test 561 line 95 toEtm8.convergence: 13.557672
    test 562 line 95 toEtm8.scale: 1.123724
    test 563 line 95 toEtm8.lat: 24.571871
    test 564 line 95 toEtm8.lon: 30.073097
    test 565 line 96 toEtm8.easting: 2748325.794651
    test 566 line 96 toEtm8.northing: 4202811.912668
    test 567 line 96 toEtm8.convergence: 17.578706
    test 568 line 96 toEtm8.scale: 1.094102
    test 569 line 96 toEtm8.lat: 34.202576
    test 570 line 96 toEtm8.lon: 29.383166
    test 571 line 97 toEtm8.easting: 6677830.630367
    test 572 line 97 toEtm8.northing: 5350071.837395
    test 573 line 97 toEtm8.convergence: 41.306641
    test 574 line 97 toEtm8.scale: 1.599774
    test 575 line 97 toEtm8.lat: 27.756285
    test 576 line 97 toEtm8.lon: 61.881905
    test 577 line 98 toEtm8.easting: 5941536.667431
    test 578 line 98 toEtm8.northing: 3293112.175140
    test 579 line 98 toEtm8.convergence: 22.752845
    test 580 line 98 toEtm8.scale: 1.468473
    test 581 line 98 toEtm8.lat: 19.742270
    test 582 line 98 toEtm8.lon: 50.957821
    test 583 line 99 toEtm8.easting: 3152481.792567
    test 584 line 99 toEtm8.northing: 5903048.837978
    test 585 line 99 toEtm8.convergence: 31.494606
    test 586 line 99 toEtm8.scale: 1.124085
    test 587 line 99 toEtm8.lat: 45.453582
    test 588 line 99 toEtm8.lon: 40.659833
    test 589 line 100 toEtm8.easting: 10460475.897730
    test 590 line 100 toEtm8.northing: 2553463.624391
    test 591 line 100 toEtm8.convergence: 21.965869
    test 592 line 100 toEtm8.scale: 2.700296
    test 593 line 100 toEtm8.lat: 8.322144
    test 594 line 100 toEtm8.lon: 69.488157
    test 595 line 101 toEtm8.easting: 1964010.778021
    test 596 line 101 toEtm8.northing: 5634042.923056
    test 597 line 101 toEtm8.convergence: 20.117800
    test 598 line 101 toEtm8.scale: 1.047344
    test 599 line 101 toEtm8.lat: 47.749831
    test 600 line 101 toEtm8.lon: 26.322002
    test 601 line 102 toEtm8.easting: 2065306.424934
    test 602 line 102 toEtm8.northing: 2135008.468651
    test 603 line 102 toEtm8.convergence: 6.258981
    test 604 line 102 toEtm8.scale: 1.052800
    test 605 line 102 toEtm8.lat: 18.297493
    test 606 line 102 toEtm8.lon: 19.244669
    test 607 line 103 toEtm8.easting: 5127738.132976
    test 608 line 103 toEtm8.northing: 6793804.304411
    test 609 line 103 toEtm8.convergence: 50.557915
    test 610 line 103 toEtm8.scale: 1.339412
    test 611 line 103 toEtm8.lat: 40.834541
    test 612 line 103 toEtm8.lon: 61.650750
    test 613 line 104 toEtm8.easting: 8385525.148166
    test 614 line 104 toEtm8.northing: 6924932.344306
    test 615 line 104 toEtm8.convergence: 59.087561
    test 616 line 104 toEtm8.scale: 1.990364
    test 617 line 104 toEtm8.lat: 26.273247
    test 618 line 104 toEtm8.lon: 74.926694
    test 619 line 105 toEtm8.easting: 2297510.791909
    test 620 line 105 toEtm8.northing: 2805666.962834
    test 621 line 105 toEtm8.convergence: 9.301553
    test 622 line 105 toEtm8.scale: 1.065508
    test 623 line 105 toEtm8.lat: 23.698347
    test 624 line 105 toEtm8.lon: 22.155657
    test 625 line 106 toEtm8.easting: 13749544.917635
    test 626 line 106 toEtm8.northing: 8288728.384650
    test 627 line 106 toEtm8.convergence: 75.033970
    test 628 line 106 toEtm8.scale: 4.270588
    test 629 line 106 toEtm8.lat: 12.364113
    test 630 line 106 toEtm8.lon: 86.348578
    test 631 line 107 toEtm8.easting: 317518.455546
    test 632 line 107 toEtm8.northing: 1097517.583745
    test 633 line 107 toEtm8.convergence: 0.499004
    test 634 line 107 toEtm8.scale: 1.000848
    test 635 line 107 toEtm8.lat: 9.916091
    test 636 line 107 toEtm8.lon: 2.895277
    test 637 line 108 toEtm8.easting: 3856035.184888
    test 638 line 108 toEtm8.northing: 9141364.450290
    test 639 line 108 toEtm8.convergence: 75.972763
    test 640 line 108 toEtm8.scale: 1.186786
    test 641 line 108 toEtm8.lat: 56.553876
    test 642 line 108 toEtm8.lon: 78.215077
    test 643 line 109 toEtm8.easting: 1457484.942823
    test 644 line 109 toEtm8.northing: 9385297.101973
    test 645 line 109 toEtm8.convergence: 66.784662
    test 646 line 109 toEtm8.scale: 1.025660
    test 647 line 109 toEtm8.lat: 75.957631
    test 648 line 109 toEtm8.lon: 67.407383
    test 649 line 110 toEtm8.easting: 1304934.901841
    test 650 line 110 toEtm8.northing: 3604655.155715
    test 651 line 110 toEtm8.convergence: 7.343989
    test 652 line 110 toEtm8.scale: 1.020672
    test 653 line 110 toEtm8.lat: 31.826531
    test 654 line 110 toEtm8.lon: 13.731050
    test 655 line 111 toEtm8.easting: 1399093.491792
    test 656 line 111 toEtm8.northing: 8314607.120342
    test 657 line 111 toEtm8.convergence: 38.630161
    test 658 line 111 toEtm8.scale: 1.023625
    test 659 line 111 toEtm8.lat: 70.542985
    test 660 line 111 toEtm8.lon: 40.282055
    test 661 line 112 toEtm8.easting: 356983.618540
    test 662 line 112 toEtm8.northing: 4282309.048994
    test 663 line 112 toEtm8.convergence: 2.561485
    test 664 line 112 toEtm8.scale: 1.001170
    test 665 line 112 toEtm8.lat: 38.617487
    test 666 line 112 toEtm8.lon: 4.099838
    test 667 line 113 toEtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 668 line 113 toEtm8.northing: 1510288.212229
    test 669 line 113 toEtm8.convergence: 12.752154
    test 670 line 113 toEtm8.scale: 2.511357
    test 671 line 113 toEtm8.lat: 5.389447
    test 672 line 113 toEtm8.lon: 66.729612
    test 673 line 114 toEtm8.easting: 6367592.504007
    test 674 line 114 toEtm8.northing: 1200437.077672
    test 675 line 114 toEtm8.convergence: 8.338041
    test 676 line 114 toEtm8.scale: 1.546210
    test 677 line 114 toEtm8.lat: 6.995168
    test 678 line 114 toEtm8.lon: 50.014763
    test 679 line 115 toEtm8.easting: 4391263.676460
    test 680 line 115 toEtm8.northing: 6325455.989408
    test 681 line 115 toEtm8.convergence: 42.653541
    test 682 line 115 toEtm8.scale: 1.245560
    test 683 line 115 toEtm8.lat: 42.321894
    test 684 line 115 toEtm8.lon: 53.784040
    test 685 line 116 toEtm8.easting: 6209880.527527
    test 686 line 116 toEtm8.northing: 2154754.449747
    test 687 line 116 toEtm8.convergence: 14.919512
    test 688 line 116 toEtm8.scale: 1.516560
    test 689 line 116 toEtm8.lat: 12.698515
    test 690 line 116 toEtm8.lon: 50.242047
    test 691 line 117 toEtm8.easting: 1507053.688772
    test 692 line 117 toEtm8.northing: 6261383.513280
    test 693 line 117 toEtm8.convergence: 19.280373
    test 694 line 117 toEtm8.scale: 1.027584
    test 695 line 117 toEtm8.lat: 54.207636
    test 696 line 117 toEtm8.lon: 23.325731
    test 697 line 118 toEtm8.easting: 8332725.003777
    test 698 line 118 toEtm8.northing: 3002712.329753
    test 699 line 118 toEtm8.convergence: 24.059212
    test 700 line 118 toEtm8.scale: 1.990450
    test 701 line 118 toEtm8.lat: 13.224787
    test 702 line 118 toEtm8.lon: 62.426698
    test 703 line 119 toEtm8.easting: 3958910.085235
    test 704 line 119 toEtm8.northing: 3462284.926102
    test 705 line 119 toEtm8.convergence: 18.546398
    test 706 line 119 toEtm8.scale: 1.199351
    test 707 line 119 toEtm8.lat: 25.650282
    test 708 line 119 toEtm8.lon: 37.710391
    test 709 line 120 toEtm8.easting: 10452892.282083
    test 710 line 120 toEtm8.northing: 8000059.605114
    test 711 line 120 toEtm8.convergence: 71.075240
    test 712 line 120 toEtm8.scale: 2.650111
    test 713 line 120 toEtm8.lat: 20.684773
    test 714 line 120 toEtm8.lon: 82.849734
    test 715 line 121 toEtm8.easting: 496148.253731
    test 716 line 121 toEtm8.northing: 6388503.365043
    test 717 line 121 toEtm8.convergence: 6.970955
    test 718 line 121 toEtm8.scale: 1.002620
    test 719 line 121 toEtm8.lat: 57.367533
    test 720 line 121 toEtm8.lon: 8.260866
    test 721 line 122 toEtm8.easting: 7375792.085850
    test 722 line 122 toEtm8.northing: 5544624.072155
    test 723 line 122 toEtm8.convergence: 44.510851
    test 724 line 122 toEtm8.scale: 1.745898
    test 725 line 122 toEtm8.lat: 25.958757
    test 726 line 122 toEtm8.lon: 65.760477
    test 727 line 123 toEtm8.easting: 2826258.041979
    test 728 line 123 toEtm8.northing: 5167759.816959
    test 729 line 123 toEtm8.convergence: 23.783897
    test 730 line 123 toEtm8.scale: 1.099415
    test 731 line 123 toEtm8.lat: 41.395848
    test 732 line 123 toEtm8.lon: 33.661790
    test 733 line 124 toEtm8.easting: 3958563.378851
    test 734 line 124 toEtm8.northing: 8499923.231243
    test 735 line 124 toEtm8.convergence: 66.570945
    test 736 line 124 toEtm8.scale: 1.197296
    test 737 line 124 toEtm8.lat: 54.266617
    test 738 line 124 toEtm8.lon: 70.602199
    test 739 line 125 toEtm8.easting: 4408189.533462
    test 740 line 125 toEtm8.northing: 8046312.003642
    test 741 line 125 toEtm8.convergence: 62.216959
    test 742 line 125 toEtm8.scale: 1.246750
    test 743 line 125 toEtm8.lat: 49.840393
    test 744 line 125 toEtm8.lon: 68.036728
    test 745 line 126 toEtm8.easting: 3629225.627512
    test 746 line 126 toEtm8.northing: 6371258.454645
    test 747 line 126 toEtm8.convergence: 38.881675
    test 748 line 126 toEtm8.scale: 1.165511
    test 749 line 126 toEtm8.lat: 46.306035
    test 750 line 126 toEtm8.lon: 48.085828
    test 751 line 127 toEtm8.easting: 602838.450710
    test 752 line 127 toEtm8.northing: 4851370.637205
    test 753 line 127 toEtm8.convergence: 5.160395
    test 754 line 127 toEtm8.scale: 1.004073
    test 755 line 127 toEtm8.lat: 43.570988
    test 756 line 127 toEtm8.lon: 7.464494
    test 757 line 128 toEtm8.easting: 764616.665051
    test 758 line 128 toEtm8.northing: 2164299.337945
    test 759 line 128 toEtm8.convergence: 2.429300
    test 760 line 128 toEtm8.scale: 1.006835
    test 761 line 128 toEtm8.lat: 19.427290
    test 762 line 128 toEtm8.lon: 7.268247
    test 763 line 129 toEtm8.easting: 5048953.021931
    test 764 line 129 toEtm8.northing: 1885974.057398
    test 765 line 129 toEtm8.convergence: 11.459804
    test 766 line 129 toEtm8.scale: 1.332207
    test 767 line 129 toEtm8.lat: 12.713794
    test 768 line 129 toEtm8.lon: 42.507018
    test 769 line 130 toEtm8.easting: 2293996.601155
    test 770 line 130 toEtm8.northing: 2392408.644221
    test 771 line 130 toEtm8.convergence: 7.791838
    test 772 line 130 toEtm8.scale: 1.065348
    test 773 line 130 toEtm8.lat: 20.238782
    test 774 line 130 toEtm8.lon: 21.566068
    test 775 line 131 toEtm8.easting: 1530603.839418
    test 776 line 131 toEtm8.northing: 7287841.459898
    test 777 line 131 toEtm8.convergence: 27.502921
    test 778 line 131 toEtm8.scale: 1.028416
    test 779 line 131 toEtm8.lat: 62.367847
    test 780 line 131 toEtm8.lon: 30.438849
    test 781 line 132 toEtm8.easting: 2660000.093152
    test 782 line 132 toEtm8.northing: 5161982.213248
    test 783 line 132 toEtm8.convergence: 22.629836
    test 784 line 132 toEtm8.scale: 1.087851
    test 785 line 132 toEtm8.lat: 41.891569
    test 786 line 132 toEtm8.lon: 31.959547
    test 787 line 133 toEtm8.easting: 5037478.329414
    test 788 line 133 toEtm8.northing: 8768172.379908
    test 789 line 133 toEtm8.convergence: 73.511182
    test 790 line 133 toEtm8.scale: 1.325919
    test 791 line 133 toEtm8.lat: 47.664248
    test 792 line 133 toEtm8.lon: 77.630062
    test 793 line 134 toEtm8.easting: 2289650.957799
    test 794 line 134 toEtm8.northing: 8784328.593607
    test 795 line 134 toEtm8.convergence: 60.786067
    test 796 line 134 toEtm8.scale: 1.064346
    test 797 line 134 toEtm8.lat: 67.259559
    test 798 line 134 toEtm8.lon: 62.715293
    test 799 line 135 toEtm8.easting: 647913.889744
    test 800 line 135 toEtm8.northing: 6742382.228217
    test 801 line 135 toEtm8.convergence: 10.252667
    test 802 line 135 toEtm8.scale: 1.004748
    test 803 line 135 toEtm8.lat: 60.295381
    test 804 line 135 toEtm8.lon: 11.763097
    test 805 line 136 toEtm8.easting: 1118372.698566
    test 806 line 136 toEtm8.northing: 9040627.942263
    test 807 line 136 toEtm8.convergence: 48.936803
    test 808 line 136 toEtm8.scale: 1.014920
    test 809 line 136 toEtm8.lat: 76.878914
    test 810 line 136 toEtm8.lon: 49.685773
    test 811 line 137 toEtm8.easting: 440696.510070
    test 812 line 137 toEtm8.northing: 5500355.826297
    test 813 line 137 toEtm8.convergence: 4.636104
    test 814 line 137 toEtm8.scale: 1.001986
    test 815 line 137 toEtm8.lat: 49.495349
    test 816 line 137 toEtm8.lon: 6.087551
    test 817 line 138 toEtm8.easting: 601728.149727
    test 818 line 138 toEtm8.northing: 9095352.048149
    test 819 line 138 toEtm8.convergence: 33.435771
    test 820 line 138 toEtm8.scale: 1.004027
    test 821 line 138 toEtm8.lat: 80.297265
    test 822 line 138 toEtm8.lon: 33.816372
    test 823 line 139 toEtm8.easting: 3481444.777827
    test 824 line 139 toEtm8.northing: 291665.708749
    test 825 line 139 toEtm8.convergence: 1.314726
    test 826 line 139 toEtm8.scale: 1.153534
    test 827 line 139 toEtm8.lat: 2.286437
    test 828 line 139 toEtm8.lon: 29.855149
    test 829 line 140 toEtm8.easting: 3515304.901524
    test 830 line 140 toEtm8.northing: 1443981.882918
    test 831 line 140 toEtm8.convergence: 6.641638
    test 832 line 140 toEtm8.scale: 1.156509
    test 833 line 140 toEtm8.lat: 11.264457
    test 834 line 140 toEtm8.lon: 30.743907
    test 835 line 141 toEtm8.easting: 160012.186959
    test 836 line 141 toEtm8.northing: 3922609.253231
    test 837 line 141 toEtm8.convergence: 1.022225
    test 838 line 141 toEtm8.scale: 0.999916
    test 839 line 141 toEtm8.lat: 35.434073
    test 840 line 141 toEtm8.lon: 1.762795
    test 841 line 142 toEtm8.easting: 4163744.245622
    test 842 line 142 toEtm8.northing: 936884.674804
    test 843 line 142 toEtm8.convergence: 4.892559
    test 844 line 142 toEtm8.scale: 1.222164
    test 845 line 142 toEtm8.lat: 6.923695
    test 846 line 142 toEtm8.lon: 35.289456
    test 847 line 143 toEtm8.easting: 6155200.017926
    test 848 line 143 toEtm8.northing: 6926306.628390
    test 849 line 143 toEtm8.convergence: 55.103258
    test 850 line 143 toEtm8.scale: 1.500556
    test 851 line 143 toEtm8.lat: 36.129672
    test 852 line 143 toEtm8.lon: 67.533176
    test 853 line 144 toEtm8.easting: 16263383.285440
    test 854 line 144 toEtm8.northing: 3591296.731341
    test 855 line 144 toEtm8.convergence: 36.040254
    test 856 line 144 toEtm8.scale: 6.589288
    test 857 line 144 toEtm8.lat: 4.406529
    test 858 line 144 toEtm8.lon: 81.965734
    test 859 line 145 toEtm8.easting: 14220995.515398
    test 860 line 145 toEtm8.northing: 5100587.457503
    test 861 line 145 toEtm8.convergence: 47.314258
    test 862 line 145 toEtm8.scale: 4.693202
    test 863 line 145 toEtm8.lat: 8.474589
    test 864 line 145 toEtm8.lon: 81.129945
    test 865 line 146 toEtm8.easting: 3173034.802372
    test 866 line 146 toEtm8.northing: 7263421.942957
    test 867 line 146 toEtm8.convergence: 45.215808
    test 868 line 146 toEtm8.scale: 1.125410
    test 869 line 146 toEtm8.lat: 53.907276
    test 870 line 146 toEtm8.lon: 51.252904
    test 871 line 147 toEtm8.easting: 10253274.092204
    test 872 line 147 toEtm8.northing: 8867574.299792
    test 873 line 147 toEtm8.convergence: 79.198250
    test 874 line 147 toEtm8.scale: 2.572372
    test 875 line 147 toEtm8.lat: 22.120545
    test 876 line 147 toEtm8.lon: 85.756782
    test 877 line 148 toEtm8.easting: 2415561.483230
    test 878 line 148 toEtm8.northing: 8813225.217097
    test 879 line 148 toEtm8.convergence: 62.548978
    test 880 line 148 toEtm8.scale: 1.071748
    test 881 line 148 toEtm8.lat: 66.444100
    test 882 line 148 toEtm8.lon: 64.532960
    test 883 line 149 toEtm8.easting: 9589179.293295
    test 884 line 149 toEtm8.northing: 1777680.784143
    test 885 line 149 toEtm8.convergence: 14.838483
    test 886 line 149 toEtm8.scale: 2.380716
    test 887 line 149 toEtm8.lat: 6.670965
    test 888 line 149 toEtm8.lon: 65.660408
    test 889 line 150 toEtm8.easting: 727939.438391
    test 890 line 150 toEtm8.northing: 3684363.236810
    test 891 line 150 toEtm8.convergence: 4.266227
    test 892 line 150 toEtm8.scale: 1.006140
    test 893 line 150 toEtm8.lat: 33.054057
    test 894 line 150 toEtm8.lon: 7.787458
    test 895 line 151 toEtm8.easting: 1250765.991085
    test 896 line 151 toEtm8.northing: 792869.242719
    test 897 line 151 toEtm8.convergence: 1.396497
    test 898 line 151 toEtm8.scale: 1.019026
    test 899 line 151 toEtm8.lat: 7.035525
    test 900 line 151 toEtm8.lon: 11.253707
    test 901 line 152 toEtm8.easting: 710421.705887
    test 902 line 152 toEtm8.northing: 5019406.075928
    test 903 line 152 toEtm8.convergence: 6.393949
    test 904 line 152 toEtm8.scale: 1.005812
    test 905 line 152 toEtm8.lat: 44.971340
    test 906 line 152 toEtm8.lon: 9.009304
    test 907 line 153 toEtm8.easting: 4600995.074643
    test 908 line 153 toEtm8.northing: 4505712.084593
    test 909 line 153 toEtm8.convergence: 27.997458
    test 910 line 153 toEtm8.scale: 1.271841
    test 911 line 153 toEtm8.lat: 30.821397
    test 912 line 153 toEtm8.lon: 45.970577
    test 913 line 154 toEtm8.easting: 557642.627782
    test 914 line 154 toEtm8.northing: 7006911.251644
    test 915 line 154 toEtm8.convergence: 9.769903
    test 916 line 154 toEtm8.scale: 1.003411
    test 917 line 154 toEtm8.lat: 62.763886
    test 918 line 154 toEtm8.lon: 10.960144
    test 919 line 155 toEtm8.easting: 4635062.294291
    test 920 line 155 toEtm8.northing: 2702556.153311
    test 921 line 155 toEtm8.convergence: 15.779547
    test 922 line 155 toEtm8.scale: 1.277178
    test 923 line 155 toEtm8.lat: 18.888611
    test 924 line 155 toEtm8.lon: 41.009871
    test 925 line 156 toEtm8.easting: 14554962.255919
    test 926 line 156 toEtm8.northing: 4716639.908572
    test 927 line 156 toEtm8.convergence: 44.192751
    test 928 line 156 toEtm8.scale: 4.960020
    test 929 line 156 toEtm8.lat: 7.524119
    test 930 line 156 toEtm8.lon: 81.050715
    test 931 line 157 toEtm8.easting: 882126.661736
    test 932 line 157 toEtm8.northing: 7947612.369506
    test 933 line 157 toEtm8.convergence: 22.429487
    test 934 line 157 toEtm8.scale: 1.009132
    test 935 line 157 toEtm8.lat: 70.063902
    test 936 line 157 toEtm8.lon: 23.705255
    test 937 line 158 toEtm8.easting: 20262021.645983
    test 938 line 158 toEtm8.northing: 8113827.820796
    test 939 line 158 toEtm8.convergence: 76.936057
    test 940 line 158 toEtm8.scale: 10.349092
    test 941 line 158 toEtm8.lat: 3.556526
    test 942 line 158 toEtm8.lon: 88.363529
    test 943 line 159 toEtm8.easting: 6500508.399850
    test 944 line 159 toEtm8.northing: 6956476.342368
    test 945 line 159 toEtm8.convergence: 56.237116
    test 946 line 159 toEtm8.scale: 1.563162
    test 947 line 159 toEtm8.lat: 34.551257
    test 948 line 159 toEtm8.lon: 69.111091
    test 949 line 160 toEtm8.easting: 3884036.641314
    test 950 line 160 toEtm8.northing: 6890167.411733
    test 951 line 160 toEtm8.convergence: 45.760130
    test 952 line 160 toEtm8.scale: 1.190167
    test 953 line 160 toEtm8.lat: 47.929051
    test 954 line 160 toEtm8.lon: 54.103418
    test 955 line 161 toEtm8.easting: 217855.546078
    test 956 line 161 toEtm8.northing: 6184108.122568
    test 957 line 161 toEtm8.convergence: 2.870993
    test 958 line 161 toEtm8.scale: 1.000182
    test 959 line 161 toEtm8.lat: 55.753536
    test 960 line 161 toEtm8.lon: 3.471798
    test 961 line 162 toEtm8.easting: 11384139.290402
    test 962 line 162 toEtm8.northing: 8893889.949556
    test 963 line 162 toEtm8.convergence: 79.774854
    test 964 line 162 toEtm8.scale: 3.024672
    test 965 line 162 toEtm8.lat: 18.530847
    test 966 line 162 toEtm8.lon: 86.555312
    test 967 line 163 toEtm8.easting: 3469855.989805
    test 968 line 163 toEtm8.northing: 7723193.799228
    test 969 line 163 toEtm8.convergence: 53.114700
    test 970 line 163 toEtm8.scale: 1.150540
    test 971 line 163 toEtm8.lat: 54.510125
    test 972 line 163 toEtm8.lon: 58.556056
    test 973 line 164 toEtm8.easting: 5926165.994939
    test 974 line 164 toEtm8.northing: 9385463.732747
    test 975 line 164 toEtm8.convergence: 82.506981
    test 976 line 164 toEtm8.scale: 1.459758
    test 977 line 164 toEtm8.lat: 42.864162
    test 978 line 164 toEtm8.lon: 84.866326
    test 979 line 165 toEtm8.easting: 5798639.662224
    test 980 line 165 toEtm8.northing: 5305387.640916
    test 981 line 165 toEtm8.convergence: 38.617257
    test 982 line 165 toEtm8.scale: 1.442263
    test 983 line 165 toEtm8.lat: 30.911943
    test 984 line 165 toEtm8.lon: 57.114102
    test 985 line 166 toEtm8.easting: 9464.934388
    test 986 line 166 toEtm8.northing: 6489121.624944
    test 987 line 166 toEtm8.convergence: 0.138696
    test 988 line 166 toEtm8.scale: 0.999601
    test 989 line 166 toEtm8.lat: 58.542493
    test 990 line 166 toEtm8.lon: 0.162593
    test 991 line 167 toEtm8.easting: 12575834.275614
    test 992 line 167 toEtm8.northing: 8356610.895486
    test 993 line 167 toEtm8.convergence: 75.235223
    test 994 line 167 toEtm8.scale: 3.599442
    test 995 line 167 toEtm8.lat: 15.022689
    test 996 line 167 toEtm8.lon: 85.792615
    test 997 line 168 toEtm8.easting: 2719653.543469
    test 998 line 168 toEtm8.northing: 9362389.163495
    test 999 line 168 toEtm8.convergence: 76.049670
    test 1000 line 168 toEtm8.scale: 1.091315
    test 1001 line 168 toEtm8.lat: 65.692275
    test 1002 line 168 toEtm8.lon: 77.241377
    test 1003 line 169 toEtm8.easting: 4845341.924698
    test 1004 line 169 toEtm8.northing: 8710522.326901
    test 1005 line 169 toEtm8.convergence: 72.320942
    test 1006 line 169 toEtm8.scale: 1.300382
    test 1007 line 169 toEtm8.lat: 48.806211
    test 1008 line 169 toEtm8.lon: 76.486365
    test 1009 line 170 toEtm8.easting: 3935261.522763
    test 1010 line 170 toEtm8.northing: 9454271.649062
    test 1011 line 170 toEtm8.convergence: 81.162334
    test 1012 line 170 toEtm8.scale: 1.194767
    test 1013 line 170 toEtm8.lat: 56.436025
    test 1014 line 170 toEtm8.lon: 82.611568
    test 1015 line 171 toEtm8.easting: 7074299.823000
    test 1016 line 171 toEtm8.northing: 1648736.065055
    test 1017 line 171 toEtm8.convergence: 12.145925
    test 1018 line 171 toEtm8.scale: 1.687551
    test 1019 line 171 toEtm8.lat: 8.766053
    test 1020 line 171 toEtm8.lon: 54.367539
    test 1021 line 172 toEtm8.easting: 3689072.579308
    test 1022 line 172 toEtm8.northing: 2230802.665211
    test 1023 line 172 toEtm8.convergence: 10.856248
    test 1024 line 172 toEtm8.scale: 1.172689
    test 1025 line 172 toEtm8.lat: 17.095495
    test 1026 line 172 toEtm8.lon: 33.059128
    test 1027 line 173 toEtm8.easting: 8102565.885587
    test 1028 line 173 toEtm8.northing: 5167396.617580
    test 1029 line 173 toEtm8.convergence: 42.324886
    test 1030 line 173 toEtm8.scale: 1.921927
    test 1031 line 173 toEtm8.lat: 22.142861
    test 1032 line 173 toEtm8.lon: 67.200684
    test 1033 line 174 toEtm8.easting: 8181271.353564
    test 1034 line 174 toEtm8.northing: 4425436.547185
    test 1035 line 174 toEtm8.convergence: 35.900845
    test 1036 line 174 toEtm8.scale: 1.945017
    test 1037 line 174 toEtm8.lat: 19.222623
    test 1038 line 174 toEtm8.lon: 65.180785
    test 1039 line 175 toEtm8.easting: 767067.394003
    test 1040 line 175 toEtm8.northing: 3701745.857296
    test 1041 line 175 toEtm8.convergence: 4.519201
    test 1042 line 175 toEtm8.scale: 1.006863
    test 1043 line 175 toEtm8.lat: 33.182474
    test 1044 line 175 toEtm8.lon: 8.216952
    test 1045 line 176 toEtm8.easting: 6688114.168572
    test 1046 line 176 toEtm8.northing: 2052857.299639
    test 1047 line 176 toEtm8.convergence: 14.766191
    test 1048 line 176 toEtm8.scale: 1.607200
    test 1049 line 176 toEtm8.lat: 11.417963
    test 1050 line 176 toEtm8.lon: 52.808691
    test 1051 line 177 toEtm8.easting: 5608408.773761
    test 1052 line 177 toEtm8.northing: 3859055.659110
    test 1053 line 177 toEtm8.convergence: 26.244151
    test 1054 line 177 toEtm8.scale: 1.413463
    test 1055 line 177 toEtm8.lat: 23.836688
    test 1056 line 177 toEtm8.lon: 50.500180
    test 1057 line 178 toEtm8.easting: 3836942.765275
    test 1058 line 178 toEtm8.northing: 6415467.634326
    test 1059 line 178 toEtm8.convergence: 40.575885
    test 1060 line 178 toEtm8.scale: 1.185615
    test 1061 line 178 toEtm8.lat: 45.550020
    test 1062 line 178 toEtm8.lon: 50.148036
    test 1063 line 179 toEtm8.easting: 1298730.366025
    test 1064 line 179 toEtm8.northing: 6021453.000792
    test 1065 line 179 toEtm8.convergence: 15.613320
    test 1066 line 179 toEtm8.scale: 1.020367
    test 1067 line 179 toEtm8.lat: 52.746079
    test 1068 line 179 toEtm8.lon: 19.343926
    test 1069 line 180 toEtm8.easting: 416934.289208
    test 1070 line 180 toEtm8.northing: 7295683.451705
    test 1071 line 180 toEtm8.convergence: 8.238232
    test 1072 line 180 toEtm8.scale: 1.001729
    test 1073 line 180 toEtm8.lat: 65.513348
    test 1074 line 180 toEtm8.lon: 9.039529
    test 1075 line 181 toEtm8.easting: 4336076.850889
    test 1076 line 181 toEtm8.northing: 7617975.722779
    test 1077 line 181 toEtm8.convergence: 56.537088
    test 1078 line 181 toEtm8.scale: 1.238582
    test 1079 line 181 toEtm8.lat: 48.709795
    test 1080 line 181 toEtm8.lon: 63.554005
    test 1081 line 182 toEtm8.easting: 168047.336980
    test 1082 line 182 toEtm8.northing: 2185000.046530
    test 1083 line 182 toEtm8.convergence: 0.542187
    test 1084 line 182 toEtm8.scale: 0.999949
    test 1085 line 182 toEtm8.lat: 19.753509
    test 1086 line 182 toEtm8.lon: 1.603846
    test 1087 line 183 toEtm8.easting: 8276281.328790
    test 1088 line 183 toEtm8.northing: 263444.350545
    test 1089 line 183 toEtm8.convergence: 2.071435
    test 1090 line 183 toEtm8.scale: 1.980314
    test 1091 line 183 toEtm8.lat: 1.202816
    test 1092 line 183 toEtm8.lon: 59.377276
    test 1093 line 184 toEtm8.easting: 4772573.810710
    test 1094 line 184 toEtm8.northing: 6765710.336002
    test 1095 line 184 toEtm8.convergence: 48.857561
    test 1096 line 184 toEtm8.scale: 1.291911
    test 1097 line 184 toEtm8.lat: 42.564975
    test 1098 line 184 toEtm8.lon: 59.356947
    test 1099 line 185 toEtm8.easting: 5427755.074639
    test 1100 line 185 toEtm8.northing: 1556055.820924
    test 1101 line 185 toEtm8.convergence: 9.862178
    test 1102 line 185 toEtm8.scale: 1.387394
    test 1103 line 185 toEtm8.lat: 10.090572
    test 1104 line 185 toEtm8.lon: 44.604132
    test 1105 line 186 toEtm8.easting: 11588458.616041
    test 1106 line 186 toEtm8.northing: 5707993.922613
    test 1107 line 186 toEtm8.convergence: 50.784827
    test 1108 line 186 toEtm8.scale: 3.149567
    test 1109 line 186 toEtm8.lat: 14.133028
    test 1110 line 186 toEtm8.lon: 78.097533
    test 1111 line 187 toEtm8.easting: 7152433.802688
    test 1112 line 187 toEtm8.northing: 761390.695844
    test 1113 line 187 toEtm8.convergence: 5.607350
    test 1114 line 187 toEtm8.scale: 1.705261
    test 1115 line 187 toEtm8.lat: 4.031123
    test 1116 line 187 toEtm8.lon: 54.048782
    test 1117 line 188 toEtm8.easting: 3105651.390901
    test 1118 line 188 toEtm8.northing: 9426026.169064
    test 1119 line 188 toEtm8.convergence: 78.750206
    test 1120 line 188 toEtm8.scale: 1.119737
    test 1121 line 188 toEtm8.lat: 62.746603
    test 1122 line 188 toEtm8.lon: 79.968641
    test 1123 line 189 toEtm8.easting: 2959009.639022
    test 1124 line 189 toEtm8.northing: 8339242.269282
    test 1125 line 189 toEtm8.convergence: 58.460865
    test 1126 line 189 toEtm8.scale: 1.108554
    test 1127 line 189 toEtm8.lat: 60.626429
    test 1128 line 189 toEtm8.lon: 61.851551
    test 1129 line 190 toEtm8.easting: 8640472.267145
    test 1130 line 190 toEtm8.northing: 6230320.417931
    test 1131 line 190 toEtm8.convergence: 52.816810
    test 1132 line 190 toEtm8.scale: 2.062973
    test 1133 line 190 toEtm8.lat: 23.600626
    test 1134 line 190 toEtm8.lon: 72.811634
    test 1135 line 191 toEtm8.easting: 811352.108932
    test 1136 line 191 toEtm8.northing: 9816129.813481
    test 1137 line 191 toEtm8.convergence: 77.299184
    test 1138 line 191 toEtm8.scale: 1.007651
    test 1139 line 191 toEtm8.lat: 82.572236
    test 1140 line 191 toEtm8.lon: 77.402323
    test 1141 line 192 toEtm8.easting: 6521874.973458
    test 1142 line 192 toEtm8.northing: 1053612.479744
    test 1143 line 192 toEtm8.convergence: 7.407328
    test 1144 line 192 toEtm8.scale: 1.575529
    test 1145 line 192 toEtm8.lat: 6.030051
    test 1146 line 192 toEtm8.lon: 50.783505
    test 1147 line 193 toEtm8.easting: 3477983.997875
    test 1148 line 193 toEtm8.northing: 5651613.325947
    test 1149 line 193 toEtm8.convergence: 31.530673
    test 1150 line 193 toEtm8.scale: 1.151875
    test 1151 line 193 toEtm8.lat: 42.411523
    test 1152 line 193 toEtm8.lon: 42.258009
    test 1153 line 194 toEtm8.easting: 629892.822243
    test 1154 line 194 toEtm8.northing: 3283914.910451
    test 1155 line 194 toEtm8.convergence: 3.210482
    test 1156 line 194 toEtm8.scale: 1.004499
    test 1157 line 194 toEtm8.lat: 29.526120
    test 1158 line 194 toEtm8.lon: 6.493069
    test 1159 line 195 toEtm8.easting: 3381879.687227
    test 1160 line 195 toEtm8.northing: 5103629.325665
    test 1161 line 195 toEtm8.convergence: 26.748108
    test 1162 line 195 toEtm8.scale: 1.143559
    test 1163 line 195 toEtm8.lat: 39.021853
    test 1164 line 195 toEtm8.lon: 38.641779
    test 1165 line 196 toEtm8.easting: 2815986.534177
    test 1166 line 196 toEtm8.northing: 9387029.120718
    test 1167 line 196 toEtm8.convergence: 76.967262
    test 1168 line 196 toEtm8.scale: 1.098032
    test 1169 line 196 toEtm8.lat: 64.971850
    test 1170 line 196 toEtm8.lon: 78.151893
    test 1171 line 197 toEtm8.easting: 3398195.889603
    test 1172 line 197 toEtm8.northing: 9138936.031490
    test 1173 line 197 toEtm8.convergence: 74.477499
    test 1174 line 197 toEtm8.scale: 1.144009
    test 1175 line 197 toEtm8.lat: 59.961819
    test 1176 line 197 toEtm8.lon: 76.473422
    test 1177 line 198 toEtm8.easting: 2421734.754637
    test 1178 line 198 toEtm8.northing: 5002372.094991
    test 1179 line 198 toEtm8.convergence: 20.017082
    test 1180 line 198 toEtm8.scale: 1.072592
    test 1181 line 198 toEtm8.lat: 41.374040
    test 1182 line 198 toEtm8.lon: 28.848343
    test 1183 line 199 toEtm8.easting: 2360869.895525
    test 1184 line 199 toEtm8.northing: 9553298.449536
    test 1185 line 199 toEtm8.convergence: 78.848205
    test 1186 line 199 toEtm8.scale: 1.068453
    test 1187 line 199 toEtm8.lat: 68.946087
    test 1188 line 199 toEtm8.lon: 79.574523
    test 1189 line 200 toEtm8.easting: 1196539.972194
    test 1190 line 200 toEtm8.northing: 9861920.836230
    test 1191 line 200 toEtm8.convergence: 83.437668
    test 1192 line 200 toEtm8.scale: 1.017137
    test 1193 line 200 toEtm8.lat: 79.275096
    test 1194 line 200 toEtm8.lon: 83.551272
    test 1195 line 201 toEtm8.easting: 1327758.704795
    test 1196 line 201 toEtm8.northing: 2375509.241683
    test 1197 line 201 toEtm8.convergence: 4.617572
    test 1198 line 201 toEtm8.scale: 1.021465
    test 1199 line 201 toEtm8.lat: 21.000252
    test 1200 line 201 toEtm8.lon: 12.697444
    test 1201 line 202 toEtm8.easting: 2070860.327644
    test 1202 line 202 toEtm8.northing: 8604500.719581
    test 1203 line 202 toEtm8.convergence: 54.722761
    test 1204 line 202 toEtm8.scale: 1.052469
    test 1205 line 202 toEtm8.lat: 68.015227
    test 1206 line 202 toEtm8.lon: 56.732419
    test 1207 line 203 toEtm8.easting: 6564776.654864
    test 1208 line 203 toEtm8.northing: 8171207.177379
    test 1209 line 203 toEtm8.convergence: 69.237523
    test 1210 line 203 toEtm8.scale: 1.573894
    test 1211 line 203 toEtm8.lat: 37.423675
    test 1212 line 203 toEtm8.lon: 76.947359
    test 1213 line 204 toEtm8.easting: 592653.553821
    test 1214 line 204 toEtm8.northing: 6125529.810052
    test 1215 line 204 toEtm8.convergence: 7.600785
    test 1216 line 204 toEtm8.scale: 1.003912
    test 1217 line 204 toEtm8.lat: 54.922707
    test 1218 line 204 toEtm8.lon: 9.260818
    test 1219 line 205 toEtm8.easting: 693459.671821
    test 1220 line 205 toEtm8.northing: 6943779.991032
    test 1221 line 205 toEtm8.convergence: 11.787587
    test 1222 line 205 toEtm8.scale: 1.005496
    test 1223 line 205 toEtm8.lat: 61.982810
    test 1224 line 205 toEtm8.lon: 13.299659
    test 1225 line 206 toEtm8.easting: 1838956.187625
    test 1226 line 206 toEtm8.northing: 3511959.612381
    test 1227 line 206 toEtm8.convergence: 9.844313
    test 1228 line 206 toEtm8.scale: 1.041603
    test 1229 line 206 toEtm8.lat: 30.324214
    test 1230 line 206 toEtm8.lon: 18.959769
    test 1231 line 207 toEtm8.easting: 4460690.884597
    test 1232 line 207 toEtm8.northing: 5541873.235403
    test 1233 line 207 toEtm8.convergence: 35.768613
    test 1234 line 207 toEtm8.scale: 1.254179
    test 1235 line 207 toEtm8.lat: 37.629667
    test 1236 line 207 toEtm8.lon: 49.649131
    test 1237 line 208 toEtm8.easting: 2311168.998941
    test 1238 line 208 toEtm8.northing: 9480561.869119
    test 1239 line 208 toEtm8.convergence: 76.828257
    test 1240 line 208 toEtm8.scale: 1.065556
    test 1241 line 208 toEtm8.lat: 69.225574
    test 1242 line 208 toEtm8.lon: 77.656135
    test 1243 line 209 toEtm8.easting: 4111775.114451
    test 1244 line 209 toEtm8.northing: 6509014.348792
    test 1245 line 209 toEtm8.convergence: 43.052130
    test 1246 line 209 toEtm8.scale: 1.214125
    test 1247 line 209 toEtm8.lat: 44.698478
    test 1248 line 209 toEtm8.lon: 52.979304
    test 1249 line 210 toEtm8.easting: 75358.261962
    test 1250 line 210 toEtm8.northing: 7711258.662251
    test 1251 line 210 toEtm8.convergence: 1.806297
    test 1252 line 210 toEtm8.scale: 0.999669
    test 1253 line 210 toEtm8.lat: 69.499594
    test 1254 line 210 toEtm8.lon: 1.928336
    test 1255 line 211 toEtm8.easting: 8781885.229116
    test 1256 line 211 toEtm8.northing: 9184776.452211
    test 1257 line 211 toEtm8.convergence: 81.795539
    test 1258 line 211 toEtm8.scale: 2.094908
    test 1259 line 211 toEtm8.lat: 27.981364
    test 1260 line 211 toEtm8.lon: 86.061113
    test 1261 line 212 toEtm8.easting: 954378.415174
    test 1262 line 212 toEtm8.northing: 7449110.669807
    test 1263 line 212 toEtm8.convergence: 19.380657
    test 1264 line 212 toEtm8.scale: 1.010768
    test 1265 line 212 toEtm8.lat: 65.699839
    test 1266 line 212 toEtm8.lon: 21.104725
    test 1267 line 213 toEtm8.easting: 720971.793706
    test 1268 line 213 toEtm8.northing: 5265195.121555
    test 1269 line 213 toEtm8.convergence: 7.002995
    test 1270 line 213 toEtm8.scale: 1.005995
    test 1271 line 213 toEtm8.lat: 47.143648
    test 1272 line 213 toEtm8.lon: 9.512189
    test 1273 line 214 toEtm8.easting: 561561.493937
    test 1274 line 214 toEtm8.northing: 989910.236221
    test 1275 line 214 toEtm8.convergence: 0.793118
    test 1276 line 214 toEtm8.scale: 1.003505
    test 1277 line 214 toEtm8.lat: 8.920167
    test 1278 line 214 toEtm8.lon: 5.101513
    test 1279 line 215 toEtm8.easting: 3446829.634468
    test 1280 line 215 toEtm8.northing: 9232868.155664
    test 1281 line 215 toEtm8.convergence: 76.279075
    test 1282 line 215 toEtm8.scale: 1.148263
    test 1283 line 215 toEtm8.lat: 59.778971
    test 1284 line 215 toEtm8.lon: 78.080322
    test 1285 line 216 toEtm8.easting: 4048307.545909
    test 1286 line 216 toEtm8.northing: 9800416.422998
    test 1287 line 216 toEtm8.convergence: 86.843918
    test 1288 line 216 toEtm8.scale: 1.206495
    test 1289 line 216 toEtm8.lat: 55.865310
    test 1290 line 216 toEtm8.lon: 87.384288
    test 1291 line 217 toEtm8.easting: 8973188.480293
    test 1292 line 217 toEtm8.northing: 7042230.087021
    test 1293 line 217 toEtm8.convergence: 60.872456
    test 1294 line 217 toEtm8.scale: 2.156098
    test 1295 line 217 toEtm8.lat: 24.310973
    test 1296 line 217 toEtm8.lon: 76.823777
    test 1297 line 218 toEtm8.easting: 126314.191618
    test 1298 line 218 toEtm8.northing: 396006.687921
    test 1299 line 218 toEtm8.convergence: 0.071065
    test 1300 line 218 toEtm8.scale: 0.999798
    test 1301 line 218 toEtm8.lat: 3.582041
    test 1302 line 218 toEtm8.lon: 1.137286
    test 1303 line 219 toEtm8.easting: 5247652.345647
    test 1304 line 219 toEtm8.northing: 8670513.359752
    test 1305 line 219 toEtm8.convergence: 72.700498
    test 1306 line 219 toEtm8.scale: 1.355272
    test 1307 line 219 toEtm8.lat: 46.124233
    test 1308 line 219 toEtm8.lon: 77.313118
    test 1309 line 220 toEtm8.easting: 8103656.838119
    test 1310 line 220 toEtm8.northing: 9469794.014737
    test 1311 line 220 toEtm8.convergence: 84.490673
    test 1312 line 220 toEtm8.scale: 1.912164
    test 1313 line 220 toEtm8.lat: 31.171391
    test 1314 line 220 toEtm8.lon: 87.104504
    test 1315 line 221 toEtm8.easting: 6300112.758236
    test 1316 line 221 toEtm8.northing: 93835.917364
    test 1317 line 221 toEtm8.convergence: 0.644805
    test 1318 line 221 toEtm8.scale: 1.534073
    test 1319 line 221 toEtm8.lat: 0.553171
    test 1320 line 221 toEtm8.lon: 49.117104
    test 1321 line 222 toEtm8.easting: 3894813.593782
    test 1322 line 222 toEtm8.northing: 4833832.341027
    test 1323 line 222 toEtm8.convergence: 27.453298
    test 1324 line 222 toEtm8.scale: 1.192135
    test 1325 line 222 toEtm8.lat: 35.361587
    test 1326 line 222 toEtm8.lon: 41.860599
    test 1327 line 223 toEtm8.easting: 402511.346712
    test 1328 line 223 toEtm8.northing: 3520621.561911
    test 1329 line 223 toEtm8.convergence: 2.238474
    test 1330 line 223 toEtm8.scale: 1.001599
    test 1331 line 223 toEtm8.lat: 31.750314
    test 1332 line 223 toEtm8.lon: 4.248167
    test 1333 line 224 toEtm8.easting: 5357378.503148
    test 1334 line 224 toEtm8.northing: 2772997.602234
    test 1335 line 224 toEtm8.convergence: 17.823560
    test 1336 line 224 toEtm8.scale: 1.376031
    test 1337 line 224 toEtm8.lat: 17.924336
    test 1338 line 224 toEtm8.lon: 46.096402
    test 1339 line 225 toEtm8.easting: 2807553.985866
    test 1340 line 225 toEtm8.northing: 8177847.980275
    test 1341 line 225 toEtm8.convergence: 54.680045
    test 1342 line 225 toEtm8.scale: 1.097531
    test 1343 line 225 toEtm8.lat: 60.931488
    test 1344 line 225 toEtm8.lon: 58.221214
    test 1345 line 226 toEtm8.easting: 18289045.166501
    test 1346 line 226 toEtm8.northing: 7792942.339604
    test 1347 line 226 toEtm8.convergence: 73.216494
    test 1348 line 226 toEtm8.scale: 8.098009
    test 1349 line 226 toEtm8.lat: 5.358151
    test 1350 line 226 toEtm8.lon: 87.556213
    test 1351 line 227 toEtm8.easting: 8376822.459538
    test 1352 line 227 toEtm8.northing: 8128174.623878
    test 1353 line 227 toEtm8.convergence: 70.920117
    test 1354 line 227 toEtm8.scale: 1.984873
    test 1355 line 227 toEtm8.lat: 28.616673
    test 1356 line 227 toEtm8.lon: 80.452426
    test 1357 line 228 toEtm8.easting: 11898068.353272
    test 1358 line 228 toEtm8.northing: 4772439.493697
    test 1359 line 228 toEtm8.convergence: 42.613968
    test 1360 line 228 toEtm8.scale: 3.314412
    test 1361 line 228 toEtm8.lat: 11.709763
    test 1362 line 228 toEtm8.lon: 76.760295
    test 1363 line 229 toEtm8.easting: 10550946.939050
    test 1364 line 229 toEtm8.northing: 3851968.815295
    test 1365 line 229 toEtm8.convergence: 33.383025
    test 1366 line 229 toEtm8.scale: 2.724754
    test 1367 line 229 toEtm8.lat: 12.009498
    test 1368 line 229 toEtm8.lon: 71.782351
    test 1369 line 230 toEtm8.easting: 6828299.123607
    test 1370 line 230 toEtm8.northing: 9394803.227463
    test 1371 line 230 toEtm8.convergence: 83.181386
    test 1372 line 230 toEtm8.scale: 1.624359
    test 1373 line 230 toEtm8.lat: 37.629784
    test 1374 line 230 toEtm8.lon: 85.795687
    test 1375 line 231 toEtm8.easting: 11162550.334022
    test 1376 line 231 toEtm8.northing: 2640267.279593
    test 1377 line 231 toEtm8.convergence: 23.145404
    test 1378 line 231 toEtm8.scale: 2.998408
    test 1379 line 231 toEtm8.lat: 7.721128
    test 1380 line 231 toEtm8.lon: 71.662731
    test 1381 line 232 toEtm8.easting: 4411584.447941
    test 1382 line 232 toEtm8.northing: 4956173.694407
    test 1383 line 232 toEtm8.convergence: 30.713919
    test 1384 line 232 toEtm8.scale: 1.248736
    test 1385 line 232 toEtm8.lat: 34.295026
    test 1386 line 232 toEtm8.lon: 46.442191
    test 1387 line 233 toEtm8.easting: 672108.897905
    test 1388 line 233 toEtm8.northing: 4751554.657054
    test 1389 line 233 toEtm8.convergence: 5.569178
    test 1390 line 233 toEtm8.scale: 1.005162
    test 1391 line 233 toEtm8.lat: 42.622496
    test 1392 line 233 toEtm8.lon: 8.193605
    test 1393 line 234 toEtm8.easting: 5022964.290579
    test 1394 line 234 toEtm8.northing: 6860418.199502
    test 1395 line 234 toEtm8.convergence: 50.862230
    test 1396 line 234 toEtm8.scale: 1.324925
    test 1397 line 234 toEtm8.lat: 41.667780
    test 1398 line 234 toEtm8.lon: 61.518288
    test 1399 line 235 toEtm8.easting: 1669655.595207
    test 1400 line 235 toEtm8.northing: 4152086.537021
    test 1401 line 235 toEtm8.convergence: 11.110237
    test 1402 line 235 toEtm8.scale: 1.034138
    test 1403 line 235 toEtm8.lat: 36.060369
    test 1404 line 235 toEtm8.lon: 18.444112
    test 1405 line 236 toEtm8.easting: 6055876.729655
    test 1406 line 236 toEtm8.northing: 4896837.552619
    test 1407 line 236 toEtm8.convergence: 35.799747
    test 1408 line 236 toEtm8.scale: 1.485967
    test 1409 line 236 toEtm8.lat: 27.948091
    test 1410 line 236 toEtm8.lon: 56.816429
    test 1411 line 237 toEtm8.easting: 1209214.164379
    test 1412 line 237 toEtm8.northing: 7266409.859178
    test 1413 line 237 toEtm8.convergence: 22.319633
    test 1414 line 237 toEtm8.scale: 1.017554
    test 1415 line 237 toEtm8.lat: 63.386030
    test 1416 line 237 toEtm8.lon: 24.662716
    test 1417 line 238 toEtm8.easting: 5154564.559584
    test 1418 line 238 toEtm8.northing: 698118.349975
    test 1419 line 238 toEtm8.convergence: 4.242360
    test 1420 line 238 toEtm8.scale: 1.347481
    test 1421 line 238 toEtm8.lat: 4.680922
    test 1422 line 238 toEtm8.lon: 42.114426
    test 1423 line 239 toEtm8.easting: 2695149.806543
    test 1424 line 239 toEtm8.northing: 8208197.765605
    test 1425 line 239 toEtm8.convergence: 54.178615
    test 1426 line 239 toEtm8.scale: 1.089730
    test 1427 line 239 toEtm8.lat: 61.826625
    test 1428 line 239 toEtm8.lon: 57.525096
    test 1429 line 240 toEtm8.easting: 3394792.327820
    test 1430 line 240 toEtm8.northing: 3217583.415552
    test 1431 line 240 toEtm8.convergence: 15.165863
    test 1432 line 240 toEtm8.scale: 1.145285
    test 1433 line 240 toEtm8.lat: 25.104353
    test 1434 line 240 toEtm8.lon: 32.528660
    test 1435 line 241 toEtm8.easting: 1429160.966985
    test 1436 line 241 toEtm8.northing: 8212685.362032
    test 1437 line 241 toEtm8.convergence: 37.484904
    test 1438 line 241 toEtm8.scale: 1.024676
    test 1439 line 241 toEtm8.lat: 69.678351
    test 1440 line 241 toEtm8.lon: 39.275513
    test 1441 line 242 toEtm8.easting: 8343387.998065
    test 1442 line 242 toEtm8.northing: 8885196.954578
    test 1443 line 242 toEtm8.convergence: 78.561937
    test 1444 line 242 toEtm8.scale: 1.974733
    test 1445 line 242 toEtm8.lat: 29.671384
    test 1446 line 242 toEtm8.lon: 84.196595
    test 1447 line 243 toEtm8.easting: 1990722.928606
    test 1448 line 243 toEtm8.northing: 7569202.065162
    test 1449 line 243 toEtm8.convergence: 37.075276
    test 1450 line 243 toEtm8.scale: 1.048486
    test 1451 line 243 toEtm8.lat: 62.300208
    test 1452 line 243 toEtm8.lon: 40.474051
    test 1453 line 244 toEtm8.easting: 1554980.099559
    test 1454 line 244 toEtm8.northing: 1449423.919586
    test 1455 line 244 toEtm8.convergence: 3.188328
    test 1456 line 244 toEtm8.scale: 1.029664
    test 1457 line 244 toEtm8.lat: 12.721776
    test 1458 line 244 toEtm8.lon: 14.190003
    test 1459 line 245 toEtm8.easting: 785205.450196
    test 1460 line 245 toEtm8.northing: 5575158.423096
    test 1461 line 245 toEtm8.convergence: 8.388417
    test 1462 line 245 toEtm8.scale: 1.007181
    test 1463 line 245 toEtm8.lat: 49.811296
    test 1464 line 245 toEtm8.lon: 10.925011
    test 1465 line 246 toEtm8.easting: 3310405.988313
    test 1466 line 246 toEtm8.northing: 5955022.233881
    test 1467 line 246 toEtm8.convergence: 33.007587
    test 1468 line 246 toEtm8.scale: 1.137141
    test 1469 line 246 toEtm8.lat: 45.132680
    test 1470 line 246 toEtm8.lon: 42.478624
    test 1471 line 247 toEtm8.easting: 4733460.960666
    test 1472 line 247 toEtm8.northing: 129034.889816
    test 1473 line 247 toEtm8.convergence: 0.737551
    test 1474 line 247 toEtm8.scale: 1.290439
    test 1475 line 247 toEtm8.lat: 0.904279
    test 1476 line 247 toEtm8.lon: 39.078412
    test 1477 line 248 toEtm8.easting: 3322708.343909
    test 1478 line 248 toEtm8.northing: 3864738.078742
    test 1479 line 248 toEtm8.convergence: 18.472566
    test 1480 line 248 toEtm8.scale: 1.138838
    test 1481 line 248 toEtm8.lat: 30.163605
    test 1482 line 248 toEtm8.lon: 33.577996
    test 1483 line 249 toEtm8.easting: 8672864.417204
    test 1484 line 249 toEtm8.northing: 8333465.983444
    test 1485 line 249 toEtm8.convergence: 73.206273
    test 1486 line 249 toEtm8.scale: 2.065441
    test 1487 line 249 toEtm8.lat: 27.643244
    test 1488 line 249 toEtm8.lon: 81.892859
    test 1489 line 250 toEtm8.easting: 11126818.231196
    test 1490 line 250 toEtm8.northing: 7618712.174991
    test 1491 line 250 toEtm8.convergence: 67.887173
    test 1492 line 250 toEtm8.scale: 2.922417
    test 1493 line 250 toEtm8.lat: 18.201208
    test 1494 line 250 toEtm8.lon: 82.434618
    test 1495 line 251 toEtm8.easting: 8650100.981797
    test 1496 line 251 toEtm8.northing: 9975084.168997
    test 1497 line 251 toEtm8.convergence: 89.767446
    test 1498 line 251 toEtm8.scale: 2.057289
    test 1499 line 251 toEtm8.lat: 28.804576
    test 1500 line 251 toEtm8.lon: 89.886072
    test 1501 line 252 toEtm8.easting: 2212701.180192
    test 1502 line 252 toEtm8.northing: 650348.100229
    test 1503 line 252 toEtm8.convergence: 1.970441
    test 1504 line 252 toEtm8.scale: 1.060830
    test 1505 line 252 toEtm8.lat: 5.542998
    test 1506 line 252 toEtm8.lon: 19.589578
    test 1507 line 253 toEtm8.easting: 6890222.326618
    test 1508 line 253 toEtm8.northing: 7506813.499547
    test 1509 line 253 toEtm8.convergence: 62.684825
    test 1510 line 253 toEtm8.scale: 1.638488
    test 1511 line 253 toEtm8.lat: 34.237147
    test 1512 line 253 toEtm8.lon: 73.678164
    test 1513 line 254 toEtm8.easting: 6692260.067325
    test 1514 line 254 toEtm8.northing: 4244174.008110
    test 1515 line 254 toEtm8.convergence: 31.812920
    test 1516 line 254 toEtm8.scale: 1.604640
    test 1517 line 254 toEtm8.lat: 22.704949
    test 1518 line 254 toEtm8.lon: 57.877010
    test 1519 line 255 toEtm8.easting: 1225564.137190
    test 1520 line 255 toEtm8.northing: 4778923.924144
    test 1521 line 255 toEtm8.convergence: 10.083419
    test 1522 line 255 toEtm8.scale: 1.018134
    test 1523 line 255 toEtm8.lat: 42.192424
    test 1524 line 255 toEtm8.lon: 14.828196
    test 1525 line 256 toEtm8.easting: 12341116.154950
    test 1526 line 256 toEtm8.northing: 5081855.521966
    test 1527 line 256 toEtm8.convergence: 45.712546
    test 1528 line 256 toEtm8.scale: 3.535170
    test 1529 line 256 toEtm8.lat: 11.481151
    test 1530 line 256 toEtm8.lon: 78.189236
    test 1531 line 257 toEtm8.easting: 6673845.021771
    test 1532 line 257 toEtm8.northing: 1177587.190565
    test 1533 line 257 toEtm8.convergence: 8.389141
    test 1534 line 257 toEtm8.scale: 1.605171
    test 1535 line 257 toEtm8.lat: 6.609626
    test 1536 line 257 toEtm8.lon: 51.735783
    test 1537 line 258 toEtm8.easting: 6966354.690417
    test 1538 line 258 toEtm8.northing: 3641802.005093
    test 1539 line 258 toEtm8.convergence: 27.409636
    test 1540 line 258 toEtm8.scale: 1.661469
    test 1541 line 258 toEtm8.lat: 19.059369
    test 1542 line 258 toEtm8.lon: 57.526439
    test 1543 max forward error: 7.078052e-08
    test 1544 max reverse error: 1.136868e-13
    test 1545 Etm.scale0: 0.9996
    test 1546 Etm.datum: WGS84
    test 1547 Etm.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    1 of 1548 testEtmTMcoords.py tests (0.1%) FAILED, ALL KNOWN, 1 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 3.089 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testExactTMcoords.py

    testing testExactTMcoords.py 19.05.23 (module pygeodesy.etm 21.07.22)
    test 1 line 1 _ExactTM.easting: 1548706.791619
    test 2 line 1 _ExactTM.northing: 8451449.198772
    test 3 line 1 _ExactTM.convergence: 43.922790
    test 4 line 1 _ExactTM.scale: 1.029060
    test 5 line 1 _ExactTM.lat: 70.579277
    test 6 line 1 _ExactTM.lon: 45.599420
    test 7 line 2 _ExactTM.easting: 2624150.740929
    test 8 line 2 _ExactTM.northing: 1204434.041605
    test 9 line 2 _ExactTM.convergence: 4.292619
    test 10 line 2 _ExactTM.scale: 1.086051
    test 11 line 2 _ExactTM.lat: 10.018894
    test 12 line 2 _ExactTM.lon: 23.313324
    test 13 line 3 _ExactTM.easting: 9855841.232935
    test 14 line 3 _ExactTM.northing: 6145496.115155
    test 15 line 3 _ExactTM.convergence: 53.348315
    test 16 line 3 _ExactTM.scale: 2.445098
    test 17 line 3 _ExactTM.lat: 19.479896
    test 18 line 3 _ExactTM.lon: 75.662049
    test 19 line 4 _ExactTM.easting: 3206390.691996
    test 20 line 4 _ExactTM.northing: 2650745.400406
    test 21 line 4 _ExactTM.convergence: 11.666950
    test 22 line 4 _ExactTM.scale: 1.129359
    test 23 line 4 _ExactTM.lat: 21.072465
    test 24 line 4 _ExactTM.lon: 29.828684
    test 25 line 5 _ExactTM.easting: 4328154.083501
    test 26 line 5 _ExactTM.northing: 749647.623690
    test 27 line 5 _ExactTM.convergence: 4.024317
    test 28 line 5 _ExactTM.scale: 1.240829
    test 29 line 5 _ExactTM.lat: 5.458957
    test 30 line 5 _ExactTM.lon: 36.385237
    test 31 line 6 _ExactTM.easting: 847598.266514
    test 32 line 6 _ExactTM.northing: 7947180.962440
    test 33 line 6 _ExactTM.convergence: 21.639091
    test 34 line 6 _ExactTM.scale: 1.008399
    test 35 line 6 _ExactTM.lat: 70.175454
    test 36 line 6 _ExactTM.lon: 22.865350
    test 37 line 7 _ExactTM.easting: 2727657.337974
    test 38 line 7 _ExactTM.northing: 8283916.696410
    test 39 line 7 _ExactTM.convergence: 55.690909
    test 40 line 7 _ExactTM.scale: 1.091942
    test 41 line 7 _ExactTM.lat: 61.965605
    test 42 line 7 _ExactTM.lon: 58.931371
    test 43 line 8 _ExactTM.easting: 2331001.751890
    test 44 line 8 _ExactTM.northing: 1313608.224751
    test 45 line 8 _ExactTM.convergence: 4.214690
    test 46 line 8 _ExactTM.scale: 1.067599
    test 47 line 8 _ExactTM.lat: 11.116050
    test 48 line 8 _ExactTM.lon: 20.901069
    test 49 line 9 _ExactTM.easting: 6035557.239480
    test 50 line 9 _ExactTM.northing: 5791770.791879
    test 51 line 9 _ExactTM.convergence: 43.698170
    test 52 line 9 _ExactTM.scale: 1.481260
    test 53 line 9 _ExactTM.lat: 32.210543
    test 54 line 9 _ExactTM.lon: 60.705849
    test 55 line 10 _ExactTM.easting: 1064553.125852
    test 56 line 10 _ExactTM.northing: 9417273.737208
    test 57 line 10 _ExactTM.convergence: 61.100380
    test 58 line 10 _ExactTM.scale: 1.013475
    test 59 line 10 _ExactTM.lat: 79.187451
    test 60 line 10 _ExactTM.lon: 61.532382
    test 61 line 11 _ExactTM.easting: 1400137.116164
    test 62 line 11 _ExactTM.northing: 9616907.017686
    test 63 line 11 _ExactTM.convergence: 74.527087
    test 64 line 11 _ExactTM.scale: 1.023640
    test 65 line 11 _ExactTM.lat: 77.103759
    test 66 line 11 _ExactTM.lon: 74.899105
    test 67 line 12 _ExactTM.easting: 9860691.016626
    test 68 line 12 _ExactTM.northing: 7433039.143328
    test 69 line 12 _ExactTM.convergence: 65.357693
    test 70 line 12 _ExactTM.scale: 2.438973
    test 71 line 12 _ExactTM.lat: 21.889514
    test 72 line 12 _ExactTM.lon: 80.019886
    test 73 line 13 _ExactTM.easting: 8076501.833695
    test 74 line 13 _ExactTM.northing: 8561614.174782
    test 75 line 13 _ExactTM.convergence: 75.073393
    test 76 line 13 _ExactTM.scale: 1.906202
    test 77 line 13 _ExactTM.lat: 30.536296
    test 78 line 13 _ExactTM.lon: 82.186178
    test 79 line 14 _ExactTM.easting: 3335099.866623
    test 80 line 14 _ExactTM.northing: 6740519.084015
    test 81 line 14 _ExactTM.convergence: 40.611821
    test 82 line 14 _ExactTM.scale: 1.139021
    test 83 line 14 _ExactTM.lat: 49.990485
    test 84 line 14 _ExactTM.lon: 48.203179
    test 85 line 15 _ExactTM.easting: 12051574.928500
    test 86 line 15 _ExactTM.northing: 6587213.051951
    test 87 line 15 _ExactTM.convergence: 59.033237
    test 88 line 15 _ExactTM.scale: 3.357469
    test 89 line 15 _ExactTM.lat: 14.486312
    test 90 line 15 _ExactTM.lon: 80.905137
    test 91 line 16 _ExactTM.easting: 5387578.735298
    test 92 line 16 _ExactTM.northing: 4111216.907168
    test 93 line 16 _ExactTM.convergence: 27.574337
    test 94 line 16 _ExactTM.scale: 1.379357
    test 95 line 16 _ExactTM.lat: 25.936824
    test 96 line 16 _ExactTM.lon: 49.913598
    test 97 line 17 _ExactTM.easting: 2622214.380233
    test 98 line 17 _ExactTM.northing: 8678923.984567
    test 99 line 17 _ExactTM.convergence: 61.697275
    test 100 line 17 _ExactTM.scale: 1.084810
    test 101 line 17 _ExactTM.lat: 64.402196
    test 102 line 17 _ExactTM.lon: 64.091395
    test 103 line 18 _ExactTM.easting: 5068474.169633
    test 104 line 18 _ExactTM.northing: 9492066.993709
    test 105 line 18 _ExactTM.convergence: 83.156740
    test 106 line 18 _ExactTM.scale: 1.329990
    test 107 line 18 _ExactTM.lat: 48.451354
    test 108 line 18 _ExactTM.lon: 84.856198
    test 109 line 19 _ExactTM.easting: 738062.047779
    test 110 line 19 _ExactTM.northing: 3031007.074116
    test 111 line 19 _ExactTM.convergence: 3.416802
    test 112 line 19 _ExactTM.scale: 1.006332
    test 113 line 19 _ExactTM.lat: 27.203895
    test 114 line 19 _ExactTM.lon: 7.440229
    test 115 line 20 _ExactTM.easting: 1944413.834565
    test 116 line 20 _ExactTM.northing: 9613299.224493
    test 117 line 20 _ExactTM.convergence: 78.462831
    test 118 line 20 _ExactTM.scale: 1.046134
    test 119 line 20 _ExactTM.lat: 72.509000
    test 120 line 20 _ExactTM.lon: 78.982283
    test 121 line 21 _ExactTM.easting: 2114521.418406
    test 122 line 21 _ExactTM.northing: 4954077.440098
    test 123 line 21 _ExactTM.convergence: 17.571878
    test 124 line 21 _ExactTM.scale: 1.055093
    test 125 line 21 _ExactTM.lat: 41.824954
    test 126 line 21 _ExactTM.lon: 25.392744
    test 127 line 22 _ExactTM.easting: 620365.905090
    test 128 line 22 _ExactTM.northing: 4755542.026562
    test 129 line 22 _ExactTM.convergence: 5.152022
    test 130 line 22 _ExactTM.scale: 1.004338
    test 131 line 22 _ExactTM.lat: 42.701376
    test 132 line 22 _ExactTM.lon: 7.572738
    test 133 line 23 _ExactTM.easting: 263004.770989
    test 134 line 23 _ExactTM.northing: 4493669.762451
    test 135 line 23 _ExactTM.convergence: 2.020523
    test 136 line 23 _ExactTM.scale: 1.000452
    test 137 line 23 _ExactTM.lat: 40.552052
    test 138 line 23 _ExactTM.lon: 3.106056
    test 139 line 24 _ExactTM.easting: 3217221.739462
    test 140 line 24 _ExactTM.northing: 437776.119161
    test 141 line 24 _ExactTM.convergence: 1.848169
    test 142 line 24 _ExactTM.scale: 1.130558
    test 143 line 24 _ExactTM.lat: 3.501242
    test 144 line 24 _ExactTM.lon: 27.806507
    test 145 line 25 _ExactTM.easting: 14661142.444961
    test 146 line 25 _ExactTM.northing: 7476100.824185
    test 147 line 25 _ExactTM.convergence: 68.376669
    test 148 line 25 _ExactTM.scale: 4.896650
    test 149 line 25 _ExactTM.lat: 10.148715
    test 150 line 25 _ExactTM.lon: 85.373768
    test 151 line 26 _ExactTM.easting: 967777.158554
    test 152 line 26 _ExactTM.northing: 6615684.266592
    test 153 line 26 _ExactTM.convergence: 14.410044
    test 154 line 26 _ExactTM.scale: 1.011100
    test 155 line 26 _ExactTM.lat: 58.582623
    test 156 line 26 _ExactTM.lon: 16.755558
    test 157 line 27 _ExactTM.easting: 7558840.728461
    test 158 line 27 _ExactTM.northing: 4144728.130764
    test 159 line 27 _ExactTM.convergence: 32.557264
    test 160 line 27 _ExactTM.scale: 1.791490
    test 161 line 27 _ExactTM.lat: 19.793004
    test 162 line 27 _ExactTM.lon: 61.746763
    test 163 line 28 _ExactTM.easting: 1056008.314161
    test 164 line 28 _ExactTM.northing: 9290799.692669
    test 165 line 28 _ExactTM.convergence: 55.843278
    test 166 line 28 _ExactTM.scale: 1.013253
    test 167 line 28 _ExactTM.lat: 78.666776
    test 168 line 28 _ExactTM.lon: 56.365355
    test 169 line 29 _ExactTM.easting: 1943965.134687
    test 170 line 29 _ExactTM.northing: 1389972.228690
    test 171 line 29 _ExactTM.convergence: 3.774869
    test 172 line 29 _ExactTM.scale: 1.046724
    test 173 line 29 _ExactTM.lat: 11.998788
    test 174 line 29 _ExactTM.lon: 17.597873
    test 175 line 30 _ExactTM.easting: 5803077.072902
    test 176 line 30 _ExactTM.northing: 5649957.943659
    test 177 line 30 _ExactTM.convergence: 41.717943
    test 178 line 30 _ExactTM.scale: 1.442572
    test 179 line 30 _ExactTM.lat: 32.540378
    test 180 line 30 _ExactTM.lon: 58.764613
    test 181 line 31 _ExactTM.easting: 2928716.986009
    test 182 line 31 _ExactTM.northing: 5731835.058317
    test 183 line 31 _ExactTM.convergence: 28.538550
    test 184 line 31 _ExactTM.scale: 1.106780
    test 185 line 31 _ExactTM.lat: 45.160356
    test 186 line 31 _ExactTM.lon: 37.465285
    test 187 line 32 _ExactTM.easting: 326141.975756
    test 188 line 32 _ExactTM.northing: 8881325.164543
    test 189 line 32 _ExactTM.convergence: 16.111415
    test 190 line 32 _ExactTM.scale: 1.000900
    test 191 line 32 _ExactTM.lat: 79.584190
    test 192 line 32 _ExactTM.lon: 16.367006
    test 193 line 33 _ExactTM.easting: 3933015.267450
    test 194 line 33 _ExactTM.northing: 7932373.909512
    test 195 line 33 _ExactTM.convergence: 58.577424
    test 196 line 33 _ExactTM.scale: 1.194811
    test 197 line 33 _ExactTM.lat: 52.470664
    test 198 line 33 _ExactTM.lon: 64.125580
    test 199 line 34 _ExactTM.easting: 8598926.983213
    test 200 line 34 _ExactTM.northing: 6214135.167503
    test 201 line 34 _ExactTM.convergence: 52.612878
    test 202 line 34 _ExactTM.scale: 2.051367
    test 203 line 34 _ExactTM.lat: 23.702673
    test 204 line 34 _ExactTM.lon: 72.630363
    test 205 line 35 _ExactTM.easting: 6620553.333772
    test 206 line 35 _ExactTM.northing: 6540527.122948
    test 207 line 35 _ExactTM.convergence: 52.350140
    test 208 line 35 _ExactTM.scale: 1.586614
    test 209 line 35 _ExactTM.lat: 32.603520
    test 210 line 35 _ExactTM.lon: 67.280123
    test 211 line 36 _ExactTM.easting: 1515136.758292
    test 212 line 36 _ExactTM.northing: 3858996.087537
    test 213 line 36 _ExactTM.convergence: 9.225127
    test 214 line 36 _ExactTM.scale: 1.028029
    test 215 line 36 _ExactTM.lat: 33.776224
    test 216 line 36 _ExactTM.lon: 16.280993
    test 217 line 37 _ExactTM.easting: 479854.373445
    test 218 line 37 _ExactTM.northing: 8980501.389896
    test 219 line 37 _ExactTM.convergence: 25.021222
    test 220 line 37 _ExactTM.scale: 1.002415
    test 221 line 37 _ExactTM.lat: 79.932747
    test 222 line 37 _ExactTM.lon: 25.363622
    test 223 line 38 _ExactTM.easting: 5243446.564940
    test 224 line 38 _ExactTM.northing: 140657.213960
    test 225 line 38 _ExactTM.convergence: 0.862817
    test 226 line 38 _ExactTM.scale: 1.360358
    test 227 line 38 _ExactTM.lat: 0.935056
    test 228 line 38 _ExactTM.lon: 42.538824
    test 229 line 39 _ExactTM.easting: 12806457.923218
    test 230 line 39 _ExactTM.northing: 7170118.684675
    test 231 line 39 _ExactTM.convergence: 64.708921
    test 232 line 39 _ExactTM.scale: 3.740588
    test 233 line 39 _ExactTM.lat: 13.490862
    test 234 line 39 _ExactTM.lon: 83.178380
    test 235 line 40 _ExactTM.easting: 1202993.459158
    test 236 line 40 _ExactTM.northing: 5557316.053599
    test 237 line 40 _ExactTM.convergence: 12.579061
    test 238 line 40 _ExactTM.scale: 1.017426
    test 239 line 40 _ExactTM.lat: 48.979057
    test 240 line 40 _ExactTM.lon: 16.474542
    test 241 line 41 _ExactTM.easting: 1729088.710196
    test 242 line 41 _ExactTM.northing: 7770874.289954
    test 243 line 41 _ExactTM.convergence: 36.021783
    test 244 line 41 _ExactTM.scale: 1.036397
    test 245 line 41 _ExactTM.lat: 65.036016
    test 246 line 41 _ExactTM.lon: 38.729091
    test 247 line 42 _ExactTM.easting: 2437301.517425
    test 248 line 42 _ExactTM.northing: 5539327.748318
    test 249 line 42 _ExactTM.convergence: 23.461879
    test 250 line 42 _ExactTM.scale: 1.073459
    test 251 line 42 _ExactTM.lat: 45.510091
    test 252 line 42 _ExactTM.lon: 31.303729
    test 253 line 43 _ExactTM.easting: 3647186.135066
    test 254 line 43 _ExactTM.northing: 2086412.330983
    test 255 line 43 _ExactTM.convergence: 10.023991
    test 256 line 43 _ExactTM.scale: 1.168707
    test 257 line 43 _ExactTM.lat: 16.058010
    test 258 line 43 _ExactTM.lon: 32.520026
    test 259 line 44 _ExactTM.easting: 1818497.243556
    test 260 line 44 _ExactTM.northing: 4275471.745057
    test 261 line 44 _ExactTM.convergence: 12.499656
    test 262 line 44 _ExactTM.scale: 1.040604
    test 263 line 44 _ExactTM.lat: 36.845200
    test 264 line 44 _ExactTM.lon: 20.282283
    test 265 line 45 _ExactTM.easting: 3751304.113783
    test 266 line 45 _ExactTM.northing: 5130454.001592
    test 267 line 45 _ExactTM.convergence: 28.959707
    test 268 line 45 _ExactTM.scale: 1.177681
    test 269 line 45 _ExactTM.lat: 37.865481
    test 270 line 45 _ExactTM.lon: 41.990402
    test 271 line 46 _ExactTM.easting: 2616733.138544
    test 272 line 46 _ExactTM.northing: 394644.463815
    test 273 line 46 _ExactTM.convergence: 1.390425
    test 274 line 46 _ExactTM.scale: 1.085595
    test 275 line 46 _ExactTM.lat: 3.287272
    test 276 line 46 _ExactTM.lon: 22.917604
    test 277 line 47 _ExactTM.easting: 1756506.573942
    test 278 line 47 _ExactTM.northing: 5570393.986394
    test 279 line 47 _ExactTM.convergence: 17.897894
    test 280 line 47 _ExactTM.scale: 1.037732
    test 281 line 47 _ExactTM.lat: 47.813686
    test 282 line 47 _ExactTM.lon: 23.545092
    test 283 line 48 _ExactTM.easting: 8752461.894711
    test 284 line 48 _ExactTM.northing: 6087728.152284
    test 285 line 48 _ExactTM.convergence: 51.628465
    test 286 line 48 _ExactTM.scale: 2.095465
    test 287 line 48 _ExactTM.lat: 22.836853
    test 288 line 48 _ExactTM.lon: 72.604385
    test 289 line 49 _ExactTM.easting: 1309272.216432
    test 290 line 49 _ExactTM.northing: 59520.028899
    test 291 line 49 _ExactTM.convergence: 0.109069
    test 292 line 49 _ExactTM.scale: 1.020897
    test 293 line 49 _ExactTM.lat: 0.527262
    test 294 line 49 _ExactTM.lon: 11.684209
    test 295 line 50 _ExactTM.easting: 328652.277129
    test 296 line 50 _ExactTM.northing: 2233043.958874
    test 297 line 50 _ExactTM.convergence: 1.084863
    test 298 line 50 _ExactTM.scale: 1.000935
    test 299 line 50 _ExactTM.lat: 20.166742
    test 300 line 50 _ExactTM.lon: 3.143948
    test 301 line 51 _ExactTM.easting: 8637959.716447
    test 302 line 51 _ExactTM.northing: 9190635.156031
    test 303 line 51 _ExactTM.convergence: 81.802563
    test 304 line 51 _ExactTM.scale: 2.054329
    test 305 line 51 _ExactTM.lat: 28.604629
    test 306 line 51 _ExactTM.lon: 85.988721
    test 307 line 52 _ExactTM.easting: 8548521.455147
    test 308 line 52 _ExactTM.northing: 9172410.943282
    test 309 line 52 _ExactTM.convergence: 81.583928
    test 310 line 52 _ExactTM.scale: 2.029641
    test 311 line 52 _ExactTM.lat: 28.984048
    test 312 line 52 _ExactTM.lon: 85.833448
    test 313 line 53 _ExactTM.easting: 796987.281104
    test 314 line 53 _ExactTM.northing: 7677446.357675
    test 315 line 53 _ExactTM.convergence: 18.084472
    test 316 line 53 _ExactTM.scale: 1.007381
    test 317 line 53 _ExactTM.lat: 68.071020
    test 318 line 53 _ExactTM.lon: 19.392823
    test 319 line 54 _ExactTM.easting: 3291036.496762
    test 320 line 54 _ExactTM.northing: 9513199.600666
    test 321 line 54 _ExactTM.convergence: 80.890254
    test 322 line 54 _ExactTM.scale: 1.134826
    test 323 line 54 _ExactTM.lat: 61.416576
    test 324 line 54 _ExactTM.lon: 81.981611
    test 325 line 55 _ExactTM.easting: 7087225.330906
    test 326 line 55 _ExactTM.northing: 8382823.855822
    test 327 line 55 _ExactTM.convergence: 72.253756
    test 328 line 55 _ExactTM.scale: 1.678070
    test 329 line 55 _ExactTM.lat: 35.074753
    test 330 line 55 _ExactTM.lon: 79.496003
    test 331 line 56 _ExactTM.easting: 5090358.125724
    test 332 line 56 _ExactTM.northing: 4318294.133489
    test 333 line 56 _ExactTM.convergence: 28.266280
    test 334 line 56 _ExactTM.scale: 1.336264
    test 335 line 56 _ExactTM.lat: 28.078790
    test 336 line 56 _ExactTM.lon: 48.684350
    test skipped (1): line 57 _ExactTM.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 _ExactTM.easting: 3447670.550785
    test 338 line 58 _ExactTM.northing: 3680238.888223
    test 339 line 58 _ExactTM.convergence: 17.934948
    test 340 line 58 _ExactTM.scale: 1.149831
    test 341 line 58 _ExactTM.lat: 28.473948
    test 342 line 58 _ExactTM.lon: 34.127306
    test 343 line 59 _ExactTM.easting: 3396522.906798
    test 344 line 59 _ExactTM.northing: 8093659.687593
    test 345 line 59 _ExactTM.convergence: 57.747117
    test 346 line 59 _ExactTM.scale: 1.144006
    test 347 line 59 _ExactTM.lat: 56.629354
    test 348 line 59 _ExactTM.lon: 62.196474
    test 349 line 60 _ExactTM.easting: 11249894.100784
    test 350 line 60 _ExactTM.northing: 1619226.506299
    test 351 line 60 _ExactTM.convergence: 14.210358
    test 352 line 60 _ExactTM.scale: 3.048347
    test 353 line 60 _ExactTM.lat: 4.747762
    test 354 line 60 _ExactTM.lon: 70.932555
    test 355 line 61 _ExactTM.easting: 6808805.230950
    test 356 line 61 _ExactTM.northing: 8044779.777369
    test 357 line 61 _ExactTM.convergence: 68.242008
    test 358 line 61 _ExactTM.scale: 1.621464
    test 359 line 61 _ExactTM.lat: 35.882113
    test 360 line 61 _ExactTM.lon: 76.741849
    test 361 line 62 _ExactTM.easting: 2306021.556506
    test 362 line 62 _ExactTM.northing: 757191.592866
    test 363 line 62 _ExactTM.convergence: 2.385686
    test 364 line 62 _ExactTM.scale: 1.066159
    test 365 line 62 _ExactTM.lat: 6.420705
    test 366 line 62 _ExactTM.lon: 20.416028
    test 367 line 63 _ExactTM.easting: 1547406.313862
    test 368 line 63 _ExactTM.northing: 6048712.751824
    test 369 line 63 _ExactTM.convergence: 18.474372
    test 370 line 63 _ExactTM.scale: 1.029123
    test 371 line 63 _ExactTM.lat: 52.335248
    test 372 line 63 _ExactTM.lon: 22.879294
    test 373 line 64 _ExactTM.easting: 2430467.650383
    test 374 line 64 _ExactTM.northing: 7557167.613972
    test 375 line 64 _ExactTM.convergence: 42.110021
    test 376 line 64 _ExactTM.scale: 1.072759
    test 377 line 64 _ExactTM.lat: 59.846391
    test 378 line 64 _ExactTM.lon: 46.262536
    test 379 line 65 _ExactTM.easting: 2334053.905830
    test 380 line 65 _ExactTM.northing: 1948076.966582
    test 381 line 65 _ExactTM.convergence: 6.353185
    test 382 line 65 _ExactTM.scale: 1.067733
    test 383 line 65 _ExactTM.lat: 16.461790
    test 384 line 65 _ExactTM.lon: 21.433269
    test 385 line 66 _ExactTM.easting: 5564175.186737
    test 386 line 66 _ExactTM.northing: 1836851.660412
    test 387 line 66 _ExactTM.convergence: 11.870682
    test 388 line 66 _ExactTM.scale: 1.408265
    test 389 line 66 _ExactTM.lat: 11.707905
    test 390 line 66 _ExactTM.lon: 45.827075
    test 391 line 67 _ExactTM.easting: 6118505.590359
    test 392 line 67 _ExactTM.northing: 7631684.552421
    test 393 line 67 _ExactTM.convergence: 62.477323
    test 394 line 67 _ExactTM.scale: 1.493420
    test 395 line 67 _ExactTM.lat: 38.519075
    test 396 line 67 _ExactTM.lon: 71.935918
    test 397 line 68 _ExactTM.easting: 7365359.294665
    test 398 line 68 _ExactTM.northing: 8818194.451531
    test 399 line 68 _ExactTM.convergence: 77.207042
    test 400 line 68 _ExactTM.scale: 1.737639
    test 401 line 68 _ExactTM.lat: 34.264007
    test 402 line 68 _ExactTM.lon: 82.647878
    test 403 line 69 _ExactTM.easting: 36187.342415
    test 404 line 69 _ExactTM.northing: 2142565.324802
    test 405 line 69 _ExactTM.convergence: 0.114334
    test 406 line 69 _ExactTM.scale: 0.999616
    test 407 line 69 _ExactTM.lat: 19.376880
    test 408 line 69 _ExactTM.lon: 0.344605
    test 409 line 70 _ExactTM.easting: 2380328.546851
    test 410 line 70 _ExactTM.northing: 8440109.872384
    test 411 line 70 _ExactTM.convergence: 55.076067
    test 412 line 70 _ExactTM.scale: 1.069658
    test 413 line 70 _ExactTM.lat: 65.075805
    test 414 line 70 _ExactTM.lon: 57.653438
    test 415 line 71 _ExactTM.easting: 582511.608826
    test 416 line 71 _ExactTM.northing: 8876047.217071
    test 417 line 71 _ExactTM.convergence: 27.133300
    test 418 line 71 _ExactTM.scale: 1.003749
    test 419 line 71 _ExactTM.lat: 78.691870
    test 420 line 71 _ExactTM.lon: 27.591736
    test 421 line 72 _ExactTM.easting: 899441.350477
    test 422 line 72 _ExactTM.northing: 4582046.430516
    test 423 line 72 _ExactTM.convergence: 7.031211
    test 424 line 72 _ExactTM.scale: 1.009573
    test 425 line 72 _ExactTM.lat: 40.893022
    test 426 line 72 _ExactTM.lon: 10.668804
    test 427 line 73 _ExactTM.easting: 5022485.124337
    test 428 line 73 _ExactTM.northing: 9741774.933721
    test 429 line 73 _ExactTM.convergence: 86.505947
    test 430 line 73 _ExactTM.scale: 1.323700
    test 431 line 73 _ExactTM.lat: 48.914279
    test 432 line 73 _ExactTM.lon: 87.359268
    test 433 line 74 _ExactTM.easting: 6701004.587204
    test 434 line 74 _ExactTM.northing: 2954368.258231
    test 435 line 74 _ExactTM.convergence: 21.560153
    test 436 line 74 _ExactTM.scale: 1.608554
    test 437 line 74 _ExactTM.lat: 16.208377
    test 438 line 74 _ExactTM.lon: 54.494282
    test 439 line 75 _ExactTM.easting: 454986.218897
    test 440 line 75 _ExactTM.northing: 4885087.887884
    test 441 line 75 _ExactTM.convergence: 3.945648
    test 442 line 75 _ExactTM.scale: 1.002147
    test 443 line 75 _ExactTM.lat: 43.977936
    test 444 line 75 _ExactTM.lon: 5.672541
    test 445 line 76 _ExactTM.easting: 8903956.140311
    test 446 line 76 _ExactTM.northing: 8470608.577482
    test 447 line 76 _ExactTM.convergence: 74.723116
    test 448 line 76 _ExactTM.scale: 2.131311
    test 449 line 76 _ExactTM.lat: 26.850861
    test 450 line 76 _ExactTM.lon: 82.834480
    test 451 line 77 _ExactTM.easting: 1547627.594741
    test 452 line 77 _ExactTM.northing: 6036584.538347
    test 453 line 77 _ExactTM.convergence: 18.407629
    test 454 line 77 _ExactTM.scale: 1.029132
    test 455 line 77 _ExactTM.lat: 52.234165
    test 456 line 77 _ExactTM.lon: 22.827655
    test 457 line 78 _ExactTM.easting: 5221488.778597
    test 458 line 78 _ExactTM.northing: 1762592.044392
    test 459 line 78 _ExactTM.convergence: 10.927880
    test 460 line 78 _ExactTM.scale: 1.356721
    test 461 line 78 _ExactTM.lat: 11.674646
    test 462 line 78 _ExactTM.lon: 43.500147
    test 463 line 79 _ExactTM.easting: 4880570.297161
    test 464 line 79 _ExactTM.northing: 3325433.988867
    test 465 line 79 _ExactTM.convergence: 20.469862
    test 466 line 79 _ExactTM.scale: 1.308476
    test 467 line 79 _ExactTM.lat: 22.492753
    test 468 line 79 _ExactTM.lon: 44.179153
    test 469 line 80 _ExactTM.easting: 23930680.082694
    test 470 line 80 _ExactTM.northing: 7491462.099038
    test 471 line 80 _ExactTM.convergence: 75.937628
    test 472 line 80 _ExactTM.scale: 15.556365
    test 473 line 80 _ExactTM.lat: 0.910999
    test 474 line 80 _ExactTM.lon: 88.548823
    test 475 line 81 _ExactTM.easting: 71519.450458
    test 476 line 81 _ExactTM.northing: 3654740.444852
    test 477 line 81 _ExactTM.convergence: 0.417448
    test 478 line 81 _ExactTM.scale: 0.999663
    test 479 line 81 _ExactTM.lat: 33.028802
    test 480 line 81 _ExactTM.lon: 0.765843
    test 481 line 82 _ExactTM.easting: 4152797.795220
    test 482 line 82 _ExactTM.northing: 7823098.502751
    test 483 line 82 _ExactTM.convergence: 58.238901
    test 484 line 82 _ExactTM.scale: 1.218052
    test 485 line 82 _ExactTM.lat: 50.649195
    test 486 line 82 _ExactTM.lon: 64.389076
    test 487 line 83 _ExactTM.easting: 2926725.707639
    test 488 line 83 _ExactTM.northing: 7904918.072844
    test 489 line 83 _ExactTM.convergence: 51.592748
    test 490 line 83 _ExactTM.scale: 1.106206
    test 491 line 83 _ExactTM.lat: 58.820640
    test 492 line 83 _ExactTM.lon: 55.841048
    test 493 line 84 _ExactTM.easting: 1325509.113869
    test 494 line 84 _ExactTM.northing: 9675214.948213
    test 495 line 84 _ExactTM.convergence: 76.116213
    test 496 line 84 _ExactTM.scale: 1.021136
    test 497 line 84 _ExactTM.lat: 77.865762
    test 498 line 84 _ExactTM.lon: 76.414618
    test 499 line 85 _ExactTM.easting: 3045296.448926
    test 500 line 85 _ExactTM.northing: 542153.443280
    test 501 line 85 _ExactTM.convergence: 2.185095
    test 502 line 85 _ExactTM.scale: 1.116664
    test 503 line 85 _ExactTM.lat: 4.389639
    test 504 line 85 _ExactTM.lon: 26.458976
    test 505 line 86 _ExactTM.easting: 11843870.887518
    test 506 line 86 _ExactTM.northing: 5912803.073343
    test 507 line 86 _ExactTM.convergence: 52.814259
    test 508 line 86 _ExactTM.scale: 3.267256
    test 509 line 86 _ExactTM.lat: 13.924448
    test 510 line 86 _ExactTM.lon: 79.017873
    test 511 line 87 _ExactTM.easting: 8891099.704936
    test 512 line 87 _ExactTM.northing: 162160.142227
    test 513 line 87 _ExactTM.convergence: 1.312094
    test 514 line 87 _ExactTM.scale: 2.157363
    test 515 line 87 _ExactTM.lat: 0.679713
    test 516 line 87 _ExactTM.lon: 62.036792
    test 517 line 88 _ExactTM.easting: 4784814.214450  FAILED, KNOWN, expected 4784814.214449
    test 518 line 88 _ExactTM.northing: 2984497.432580
    test 519 line 88 _ExactTM.convergence: 17.946545
    test 520 line 88 _ExactTM.scale: 1.296116
    test 521 line 88 _ExactTM.lat: 20.478281
    test 522 line 88 _ExactTM.lon: 42.678234
    test 523 line 89 _ExactTM.easting: 1772074.682154
    test 524 line 89 _ExactTM.northing: 9491552.560143
    test 525 line 89 _ExactTM.convergence: 73.634830
    test 526 line 89 _ExactTM.scale: 1.038202
    test 527 line 89 _ExactTM.lat: 73.695703
    test 528 line 89 _ExactTM.lon: 74.259097
    test 529 line 90 _ExactTM.easting: 1907649.782106
    test 530 line 90 _ExactTM.northing: 6994232.429379
    test 531 line 90 _ExactTM.convergence: 29.718929
    test 532 line 90 _ExactTM.scale: 1.044503
    test 533 line 90 _ExactTM.lat: 58.569370
    test 534 line 90 _ExactTM.lon: 33.777549
    test 535 line 91 _ExactTM.easting: 2084423.818962
    test 536 line 91 _ExactTM.northing: 2211816.035619
    test 537 line 91 _ExactTM.convergence: 6.556448
    test 538 line 91 _ExactTM.scale: 1.053793
    test 539 line 91 _ExactTM.lat: 18.933881
    test 540 line 91 _ExactTM.lon: 19.492695
    test 541 line 92 _ExactTM.easting: 1064373.671729
    test 542 line 92 _ExactTM.northing: 7812482.547461
    test 543 line 92 _ExactTM.convergence: 24.874124
    test 544 line 92 _ExactTM.scale: 1.013490
    test 545 line 92 _ExactTM.lat: 68.317934
    test 546 line 92 _ExactTM.lon: 26.515687
    test 547 line 93 _ExactTM.easting: 4770385.479297
    test 548 line 93 _ExactTM.northing: 9734318.902980
    test 549 line 93 _ExactTM.convergence: 86.273119
    test 550 line 93 _ExactTM.scale: 1.290553
    test 551 line 93 _ExactTM.lat: 50.641941
    test 552 line 93 _ExactTM.lon: 87.111557
    test 553 line 94 _ExactTM.easting: 6398096.677297
    test 554 line 94 _ExactTM.northing: 4410894.752104
    test 555 line 94 _ExactTM.convergence: 32.558023
    test 556 line 94 _ExactTM.scale: 1.548004
    test 557 line 94 _ExactTM.lat: 24.411298
    test 558 line 94 _ExactTM.lon: 56.881823
    test 559 line 95 _ExactTM.easting: 3138623.300415
    test 560 line 95 _ExactTM.northing: 3082960.600798
    test 561 line 95 _ExactTM.convergence: 13.557672
    test 562 line 95 _ExactTM.scale: 1.123724
    test 563 line 95 _ExactTM.lat: 24.571871
    test 564 line 95 _ExactTM.lon: 30.073097
    test 565 line 96 _ExactTM.easting: 2748325.794651
    test 566 line 96 _ExactTM.northing: 4202811.912668
    test 567 line 96 _ExactTM.convergence: 17.578706
    test 568 line 96 _ExactTM.scale: 1.094102
    test 569 line 96 _ExactTM.lat: 34.202576
    test 570 line 96 _ExactTM.lon: 29.383166
    test 571 line 97 _ExactTM.easting: 6677830.630367
    test 572 line 97 _ExactTM.northing: 5350071.837395
    test 573 line 97 _ExactTM.convergence: 41.306641
    test 574 line 97 _ExactTM.scale: 1.599774
    test 575 line 97 _ExactTM.lat: 27.756285
    test 576 line 97 _ExactTM.lon: 61.881905
    test 577 line 98 _ExactTM.easting: 5941536.667431
    test 578 line 98 _ExactTM.northing: 3293112.175140
    test 579 line 98 _ExactTM.convergence: 22.752845
    test 580 line 98 _ExactTM.scale: 1.468473
    test 581 line 98 _ExactTM.lat: 19.742270
    test 582 line 98 _ExactTM.lon: 50.957821
    test 583 line 99 _ExactTM.easting: 3152481.792567
    test 584 line 99 _ExactTM.northing: 5903048.837978
    test 585 line 99 _ExactTM.convergence: 31.494606
    test 586 line 99 _ExactTM.scale: 1.124085
    test 587 line 99 _ExactTM.lat: 45.453582
    test 588 line 99 _ExactTM.lon: 40.659833
    test 589 line 100 _ExactTM.easting: 10460475.897730
    test 590 line 100 _ExactTM.northing: 2553463.624391
    test 591 line 100 _ExactTM.convergence: 21.965869
    test 592 line 100 _ExactTM.scale: 2.700296
    test 593 line 100 _ExactTM.lat: 8.322144
    test 594 line 100 _ExactTM.lon: 69.488157
    test 595 line 101 _ExactTM.easting: 1964010.778021
    test 596 line 101 _ExactTM.northing: 5634042.923056
    test 597 line 101 _ExactTM.convergence: 20.117800
    test 598 line 101 _ExactTM.scale: 1.047344
    test 599 line 101 _ExactTM.lat: 47.749831
    test 600 line 101 _ExactTM.lon: 26.322002
    test 601 line 102 _ExactTM.easting: 2065306.424934
    test 602 line 102 _ExactTM.northing: 2135008.468651
    test 603 line 102 _ExactTM.convergence: 6.258981
    test 604 line 102 _ExactTM.scale: 1.052800
    test 605 line 102 _ExactTM.lat: 18.297493
    test 606 line 102 _ExactTM.lon: 19.244669
    test 607 line 103 _ExactTM.easting: 5127738.132976
    test 608 line 103 _ExactTM.northing: 6793804.304411
    test 609 line 103 _ExactTM.convergence: 50.557915
    test 610 line 103 _ExactTM.scale: 1.339412
    test 611 line 103 _ExactTM.lat: 40.834541
    test 612 line 103 _ExactTM.lon: 61.650750
    test 613 line 104 _ExactTM.easting: 8385525.148166
    test 614 line 104 _ExactTM.northing: 6924932.344306
    test 615 line 104 _ExactTM.convergence: 59.087561
    test 616 line 104 _ExactTM.scale: 1.990364
    test 617 line 104 _ExactTM.lat: 26.273247
    test 618 line 104 _ExactTM.lon: 74.926694
    test 619 line 105 _ExactTM.easting: 2297510.791909
    test 620 line 105 _ExactTM.northing: 2805666.962834
    test 621 line 105 _ExactTM.convergence: 9.301553
    test 622 line 105 _ExactTM.scale: 1.065508
    test 623 line 105 _ExactTM.lat: 23.698347
    test 624 line 105 _ExactTM.lon: 22.155657
    test 625 line 106 _ExactTM.easting: 13749544.917635
    test 626 line 106 _ExactTM.northing: 8288728.384650
    test 627 line 106 _ExactTM.convergence: 75.033970
    test 628 line 106 _ExactTM.scale: 4.270588
    test 629 line 106 _ExactTM.lat: 12.364113
    test 630 line 106 _ExactTM.lon: 86.348578
    test 631 line 107 _ExactTM.easting: 317518.455546
    test 632 line 107 _ExactTM.northing: 1097517.583745
    test 633 line 107 _ExactTM.convergence: 0.499004
    test 634 line 107 _ExactTM.scale: 1.000848
    test 635 line 107 _ExactTM.lat: 9.916091
    test 636 line 107 _ExactTM.lon: 2.895277
    test 637 line 108 _ExactTM.easting: 3856035.184888
    test 638 line 108 _ExactTM.northing: 9141364.450290
    test 639 line 108 _ExactTM.convergence: 75.972763
    test 640 line 108 _ExactTM.scale: 1.186786
    test 641 line 108 _ExactTM.lat: 56.553876
    test 642 line 108 _ExactTM.lon: 78.215077
    test 643 line 109 _ExactTM.easting: 1457484.942823
    test 644 line 109 _ExactTM.northing: 9385297.101973
    test 645 line 109 _ExactTM.convergence: 66.784662
    test 646 line 109 _ExactTM.scale: 1.025660
    test 647 line 109 _ExactTM.lat: 75.957631
    test 648 line 109 _ExactTM.lon: 67.407383
    test 649 line 110 _ExactTM.easting: 1304934.901841
    test 650 line 110 _ExactTM.northing: 3604655.155715
    test 651 line 110 _ExactTM.convergence: 7.343989
    test 652 line 110 _ExactTM.scale: 1.020672
    test 653 line 110 _ExactTM.lat: 31.826531
    test 654 line 110 _ExactTM.lon: 13.731050
    test 655 line 111 _ExactTM.easting: 1399093.491792
    test 656 line 111 _ExactTM.northing: 8314607.120342
    test 657 line 111 _ExactTM.convergence: 38.630161
    test 658 line 111 _ExactTM.scale: 1.023625
    test 659 line 111 _ExactTM.lat: 70.542985
    test 660 line 111 _ExactTM.lon: 40.282055
    test 661 line 112 _ExactTM.easting: 356983.618540
    test 662 line 112 _ExactTM.northing: 4282309.048994
    test 663 line 112 _ExactTM.convergence: 2.561485
    test 664 line 112 _ExactTM.scale: 1.001170
    test 665 line 112 _ExactTM.lat: 38.617487
    test 666 line 112 _ExactTM.lon: 4.099838
    test 667 line 113 _ExactTM.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 668 line 113 _ExactTM.northing: 1510288.212229
    test 669 line 113 _ExactTM.convergence: 12.752154
    test 670 line 113 _ExactTM.scale: 2.511357
    test 671 line 113 _ExactTM.lat: 5.389447
    test 672 line 113 _ExactTM.lon: 66.729612
    test 673 line 114 _ExactTM.easting: 6367592.504007
    test 674 line 114 _ExactTM.northing: 1200437.077672
    test 675 line 114 _ExactTM.convergence: 8.338041
    test 676 line 114 _ExactTM.scale: 1.546210
    test 677 line 114 _ExactTM.lat: 6.995168
    test 678 line 114 _ExactTM.lon: 50.014763
    test 679 line 115 _ExactTM.easting: 4391263.676460
    test 680 line 115 _ExactTM.northing: 6325455.989408
    test 681 line 115 _ExactTM.convergence: 42.653541
    test 682 line 115 _ExactTM.scale: 1.245560
    test 683 line 115 _ExactTM.lat: 42.321894
    test 684 line 115 _ExactTM.lon: 53.784040
    test 685 line 116 _ExactTM.easting: 6209880.527527
    test 686 line 116 _ExactTM.northing: 2154754.449747
    test 687 line 116 _ExactTM.convergence: 14.919512
    test 688 line 116 _ExactTM.scale: 1.516560
    test 689 line 116 _ExactTM.lat: 12.698515
    test 690 line 116 _ExactTM.lon: 50.242047
    test 691 line 117 _ExactTM.easting: 1507053.688772
    test 692 line 117 _ExactTM.northing: 6261383.513280
    test 693 line 117 _ExactTM.convergence: 19.280373
    test 694 line 117 _ExactTM.scale: 1.027584
    test 695 line 117 _ExactTM.lat: 54.207636
    test 696 line 117 _ExactTM.lon: 23.325731
    test 697 line 118 _ExactTM.easting: 8332725.003777
    test 698 line 118 _ExactTM.northing: 3002712.329753
    test 699 line 118 _ExactTM.convergence: 24.059212
    test 700 line 118 _ExactTM.scale: 1.990450
    test 701 line 118 _ExactTM.lat: 13.224787
    test 702 line 118 _ExactTM.lon: 62.426698
    test 703 line 119 _ExactTM.easting: 3958910.085235
    test 704 line 119 _ExactTM.northing: 3462284.926102
    test 705 line 119 _ExactTM.convergence: 18.546398
    test 706 line 119 _ExactTM.scale: 1.199351
    test 707 line 119 _ExactTM.lat: 25.650282
    test 708 line 119 _ExactTM.lon: 37.710391
    test 709 line 120 _ExactTM.easting: 10452892.282083
    test 710 line 120 _ExactTM.northing: 8000059.605114
    test 711 line 120 _ExactTM.convergence: 71.075240
    test 712 line 120 _ExactTM.scale: 2.650111
    test 713 line 120 _ExactTM.lat: 20.684773
    test 714 line 120 _ExactTM.lon: 82.849734
    test 715 line 121 _ExactTM.easting: 496148.253731
    test 716 line 121 _ExactTM.northing: 6388503.365043
    test 717 line 121 _ExactTM.convergence: 6.970955
    test 718 line 121 _ExactTM.scale: 1.002620
    test 719 line 121 _ExactTM.lat: 57.367533
    test 720 line 121 _ExactTM.lon: 8.260866
    test 721 line 122 _ExactTM.easting: 7375792.085850
    test 722 line 122 _ExactTM.northing: 5544624.072155
    test 723 line 122 _ExactTM.convergence: 44.510851
    test 724 line 122 _ExactTM.scale: 1.745898
    test 725 line 122 _ExactTM.lat: 25.958757
    test 726 line 122 _ExactTM.lon: 65.760477
    test 727 line 123 _ExactTM.easting: 2826258.041979
    test 728 line 123 _ExactTM.northing: 5167759.816959
    test 729 line 123 _ExactTM.convergence: 23.783897
    test 730 line 123 _ExactTM.scale: 1.099415
    test 731 line 123 _ExactTM.lat: 41.395848
    test 732 line 123 _ExactTM.lon: 33.661790
    test 733 line 124 _ExactTM.easting: 3958563.378851
    test 734 line 124 _ExactTM.northing: 8499923.231243
    test 735 line 124 _ExactTM.convergence: 66.570945
    test 736 line 124 _ExactTM.scale: 1.197296
    test 737 line 124 _ExactTM.lat: 54.266617
    test 738 line 124 _ExactTM.lon: 70.602199
    test 739 line 125 _ExactTM.easting: 4408189.533462
    test 740 line 125 _ExactTM.northing: 8046312.003642
    test 741 line 125 _ExactTM.convergence: 62.216959
    test 742 line 125 _ExactTM.scale: 1.246750
    test 743 line 125 _ExactTM.lat: 49.840393
    test 744 line 125 _ExactTM.lon: 68.036728
    test 745 line 126 _ExactTM.easting: 3629225.627512
    test 746 line 126 _ExactTM.northing: 6371258.454645
    test 747 line 126 _ExactTM.convergence: 38.881675
    test 748 line 126 _ExactTM.scale: 1.165511
    test 749 line 126 _ExactTM.lat: 46.306035
    test 750 line 126 _ExactTM.lon: 48.085828
    test 751 line 127 _ExactTM.easting: 602838.450710
    test 752 line 127 _ExactTM.northing: 4851370.637205
    test 753 line 127 _ExactTM.convergence: 5.160395
    test 754 line 127 _ExactTM.scale: 1.004073
    test 755 line 127 _ExactTM.lat: 43.570988
    test 756 line 127 _ExactTM.lon: 7.464494
    test 757 line 128 _ExactTM.easting: 764616.665051
    test 758 line 128 _ExactTM.northing: 2164299.337945
    test 759 line 128 _ExactTM.convergence: 2.429300
    test 760 line 128 _ExactTM.scale: 1.006835
    test 761 line 128 _ExactTM.lat: 19.427290
    test 762 line 128 _ExactTM.lon: 7.268247
    test 763 line 129 _ExactTM.easting: 5048953.021931
    test 764 line 129 _ExactTM.northing: 1885974.057398
    test 765 line 129 _ExactTM.convergence: 11.459804
    test 766 line 129 _ExactTM.scale: 1.332207
    test 767 line 129 _ExactTM.lat: 12.713794
    test 768 line 129 _ExactTM.lon: 42.507018
    test 769 line 130 _ExactTM.easting: 2293996.601155
    test 770 line 130 _ExactTM.northing: 2392408.644221
    test 771 line 130 _ExactTM.convergence: 7.791838
    test 772 line 130 _ExactTM.scale: 1.065348
    test 773 line 130 _ExactTM.lat: 20.238782
    test 774 line 130 _ExactTM.lon: 21.566068
    test 775 line 131 _ExactTM.easting: 1530603.839418
    test 776 line 131 _ExactTM.northing: 7287841.459898
    test 777 line 131 _ExactTM.convergence: 27.502921
    test 778 line 131 _ExactTM.scale: 1.028416
    test 779 line 131 _ExactTM.lat: 62.367847
    test 780 line 131 _ExactTM.lon: 30.438849
    test 781 line 132 _ExactTM.easting: 2660000.093152
    test 782 line 132 _ExactTM.northing: 5161982.213248
    test 783 line 132 _ExactTM.convergence: 22.629836
    test 784 line 132 _ExactTM.scale: 1.087851
    test 785 line 132 _ExactTM.lat: 41.891569
    test 786 line 132 _ExactTM.lon: 31.959547
    test 787 line 133 _ExactTM.easting: 5037478.329414
    test 788 line 133 _ExactTM.northing: 8768172.379908
    test 789 line 133 _ExactTM.convergence: 73.511182
    test 790 line 133 _ExactTM.scale: 1.325919
    test 791 line 133 _ExactTM.lat: 47.664248
    test 792 line 133 _ExactTM.lon: 77.630062
    test 793 line 134 _ExactTM.easting: 2289650.957799
    test 794 line 134 _ExactTM.northing: 8784328.593607
    test 795 line 134 _ExactTM.convergence: 60.786067
    test 796 line 134 _ExactTM.scale: 1.064346
    test 797 line 134 _ExactTM.lat: 67.259559
    test 798 line 134 _ExactTM.lon: 62.715293
    test 799 line 135 _ExactTM.easting: 647913.889744
    test 800 line 135 _ExactTM.northing: 6742382.228217
    test 801 line 135 _ExactTM.convergence: 10.252667
    test 802 line 135 _ExactTM.scale: 1.004748
    test 803 line 135 _ExactTM.lat: 60.295381
    test 804 line 135 _ExactTM.lon: 11.763097
    test 805 line 136 _ExactTM.easting: 1118372.698566
    test 806 line 136 _ExactTM.northing: 9040627.942263
    test 807 line 136 _ExactTM.convergence: 48.936803
    test 808 line 136 _ExactTM.scale: 1.014920
    test 809 line 136 _ExactTM.lat: 76.878914
    test 810 line 136 _ExactTM.lon: 49.685773
    test 811 line 137 _ExactTM.easting: 440696.510070
    test 812 line 137 _ExactTM.northing: 5500355.826297
    test 813 line 137 _ExactTM.convergence: 4.636104
    test 814 line 137 _ExactTM.scale: 1.001986
    test 815 line 137 _ExactTM.lat: 49.495349
    test 816 line 137 _ExactTM.lon: 6.087551
    test 817 line 138 _ExactTM.easting: 601728.149727
    test 818 line 138 _ExactTM.northing: 9095352.048149
    test 819 line 138 _ExactTM.convergence: 33.435771
    test 820 line 138 _ExactTM.scale: 1.004027
    test 821 line 138 _ExactTM.lat: 80.297265
    test 822 line 138 _ExactTM.lon: 33.816372
    test 823 line 139 _ExactTM.easting: 3481444.777827
    test 824 line 139 _ExactTM.northing: 291665.708749
    test 825 line 139 _ExactTM.convergence: 1.314726
    test 826 line 139 _ExactTM.scale: 1.153534
    test 827 line 139 _ExactTM.lat: 2.286437
    test 828 line 139 _ExactTM.lon: 29.855149
    test 829 line 140 _ExactTM.easting: 3515304.901524
    test 830 line 140 _ExactTM.northing: 1443981.882918
    test 831 line 140 _ExactTM.convergence: 6.641638
    test 832 line 140 _ExactTM.scale: 1.156509
    test 833 line 140 _ExactTM.lat: 11.264457
    test 834 line 140 _ExactTM.lon: 30.743907
    test 835 line 141 _ExactTM.easting: 160012.186959
    test 836 line 141 _ExactTM.northing: 3922609.253231
    test 837 line 141 _ExactTM.convergence: 1.022225
    test 838 line 141 _ExactTM.scale: 0.999916
    test 839 line 141 _ExactTM.lat: 35.434073
    test 840 line 141 _ExactTM.lon: 1.762795
    test 841 line 142 _ExactTM.easting: 4163744.245622
    test 842 line 142 _ExactTM.northing: 936884.674804
    test 843 line 142 _ExactTM.convergence: 4.892559
    test 844 line 142 _ExactTM.scale: 1.222164
    test 845 line 142 _ExactTM.lat: 6.923695
    test 846 line 142 _ExactTM.lon: 35.289456
    test 847 line 143 _ExactTM.easting: 6155200.017926
    test 848 line 143 _ExactTM.northing: 6926306.628390
    test 849 line 143 _ExactTM.convergence: 55.103258
    test 850 line 143 _ExactTM.scale: 1.500556
    test 851 line 143 _ExactTM.lat: 36.129672
    test 852 line 143 _ExactTM.lon: 67.533176
    test 853 line 144 _ExactTM.easting: 16263383.285440
    test 854 line 144 _ExactTM.northing: 3591296.731341
    test 855 line 144 _ExactTM.convergence: 36.040254
    test 856 line 144 _ExactTM.scale: 6.589288
    test 857 line 144 _ExactTM.lat: 4.406529
    test 858 line 144 _ExactTM.lon: 81.965734
    test 859 line 145 _ExactTM.easting: 14220995.515399  FAILED, KNOWN, expected 14220995.515398
    test 860 line 145 _ExactTM.northing: 5100587.457503
    test 861 line 145 _ExactTM.convergence: 47.314258
    test 862 line 145 _ExactTM.scale: 4.693202
    test 863 line 145 _ExactTM.lat: 8.474589
    test 864 line 145 _ExactTM.lon: 81.129945
    test 865 line 146 _ExactTM.easting: 3173034.802372
    test 866 line 146 _ExactTM.northing: 7263421.942957
    test 867 line 146 _ExactTM.convergence: 45.215808
    test 868 line 146 _ExactTM.scale: 1.125410
    test 869 line 146 _ExactTM.lat: 53.907276
    test 870 line 146 _ExactTM.lon: 51.252904
    test 871 line 147 _ExactTM.easting: 10253274.092204
    test 872 line 147 _ExactTM.northing: 8867574.299792
    test 873 line 147 _ExactTM.convergence: 79.198250
    test 874 line 147 _ExactTM.scale: 2.572372
    test 875 line 147 _ExactTM.lat: 22.120545
    test 876 line 147 _ExactTM.lon: 85.756782
    test 877 line 148 _ExactTM.easting: 2415561.483230
    test 878 line 148 _ExactTM.northing: 8813225.217097
    test 879 line 148 _ExactTM.convergence: 62.548978
    test 880 line 148 _ExactTM.scale: 1.071748
    test 881 line 148 _ExactTM.lat: 66.444100
    test 882 line 148 _ExactTM.lon: 64.532960
    test 883 line 149 _ExactTM.easting: 9589179.293295
    test 884 line 149 _ExactTM.northing: 1777680.784143
    test 885 line 149 _ExactTM.convergence: 14.838483
    test 886 line 149 _ExactTM.scale: 2.380716
    test 887 line 149 _ExactTM.lat: 6.670965
    test 888 line 149 _ExactTM.lon: 65.660408
    test 889 line 150 _ExactTM.easting: 727939.438391
    test 890 line 150 _ExactTM.northing: 3684363.236810
    test 891 line 150 _ExactTM.convergence: 4.266227
    test 892 line 150 _ExactTM.scale: 1.006140
    test 893 line 150 _ExactTM.lat: 33.054057
    test 894 line 150 _ExactTM.lon: 7.787458
    test 895 line 151 _ExactTM.easting: 1250765.991085
    test 896 line 151 _ExactTM.northing: 792869.242719
    test 897 line 151 _ExactTM.convergence: 1.396497
    test 898 line 151 _ExactTM.scale: 1.019026
    test 899 line 151 _ExactTM.lat: 7.035525
    test 900 line 151 _ExactTM.lon: 11.253707
    test 901 line 152 _ExactTM.easting: 710421.705887
    test 902 line 152 _ExactTM.northing: 5019406.075928
    test 903 line 152 _ExactTM.convergence: 6.393949
    test 904 line 152 _ExactTM.scale: 1.005812
    test 905 line 152 _ExactTM.lat: 44.971340
    test 906 line 152 _ExactTM.lon: 9.009304
    test 907 line 153 _ExactTM.easting: 4600995.074643
    test 908 line 153 _ExactTM.northing: 4505712.084593
    test 909 line 153 _ExactTM.convergence: 27.997458
    test 910 line 153 _ExactTM.scale: 1.271841
    test 911 line 153 _ExactTM.lat: 30.821397
    test 912 line 153 _ExactTM.lon: 45.970577
    test 913 line 154 _ExactTM.easting: 557642.627782
    test 914 line 154 _ExactTM.northing: 7006911.251644
    test 915 line 154 _ExactTM.convergence: 9.769903
    test 916 line 154 _ExactTM.scale: 1.003411
    test 917 line 154 _ExactTM.lat: 62.763886
    test 918 line 154 _ExactTM.lon: 10.960144
    test 919 line 155 _ExactTM.easting: 4635062.294291
    test 920 line 155 _ExactTM.northing: 2702556.153311
    test 921 line 155 _ExactTM.convergence: 15.779547
    test 922 line 155 _ExactTM.scale: 1.277178
    test 923 line 155 _ExactTM.lat: 18.888611
    test 924 line 155 _ExactTM.lon: 41.009871
    test 925 line 156 _ExactTM.easting: 14554962.255919
    test 926 line 156 _ExactTM.northing: 4716639.908572
    test 927 line 156 _ExactTM.convergence: 44.192751
    test 928 line 156 _ExactTM.scale: 4.960020
    test 929 line 156 _ExactTM.lat: 7.524119
    test 930 line 156 _ExactTM.lon: 81.050715
    test 931 line 157 _ExactTM.easting: 882126.661736
    test 932 line 157 _ExactTM.northing: 7947612.369506
    test 933 line 157 _ExactTM.convergence: 22.429487
    test 934 line 157 _ExactTM.scale: 1.009132
    test 935 line 157 _ExactTM.lat: 70.063902
    test 936 line 157 _ExactTM.lon: 23.705255
    test 937 line 158 _ExactTM.easting: 20262021.645983
    test 938 line 158 _ExactTM.northing: 8113827.820796
    test 939 line 158 _ExactTM.convergence: 76.936057
    test 940 line 158 _ExactTM.scale: 10.349092
    test 941 line 158 _ExactTM.lat: 3.556526
    test 942 line 158 _ExactTM.lon: 88.363529
    test 943 line 159 _ExactTM.easting: 6500508.399850
    test 944 line 159 _ExactTM.northing: 6956476.342368
    test 945 line 159 _ExactTM.convergence: 56.237116
    test 946 line 159 _ExactTM.scale: 1.563162
    test 947 line 159 _ExactTM.lat: 34.551257
    test 948 line 159 _ExactTM.lon: 69.111091
    test 949 line 160 _ExactTM.easting: 3884036.641314
    test 950 line 160 _ExactTM.northing: 6890167.411733
    test 951 line 160 _ExactTM.convergence: 45.760130
    test 952 line 160 _ExactTM.scale: 1.190167
    test 953 line 160 _ExactTM.lat: 47.929051
    test 954 line 160 _ExactTM.lon: 54.103418
    test 955 line 161 _ExactTM.easting: 217855.546078
    test 956 line 161 _ExactTM.northing: 6184108.122568
    test 957 line 161 _ExactTM.convergence: 2.870993
    test 958 line 161 _ExactTM.scale: 1.000182
    test 959 line 161 _ExactTM.lat: 55.753536
    test 960 line 161 _ExactTM.lon: 3.471798
    test 961 line 162 _ExactTM.easting: 11384139.290402
    test 962 line 162 _ExactTM.northing: 8893889.949556
    test 963 line 162 _ExactTM.convergence: 79.774854
    test 964 line 162 _ExactTM.scale: 3.024672
    test 965 line 162 _ExactTM.lat: 18.530847
    test 966 line 162 _ExactTM.lon: 86.555312
    test 967 line 163 _ExactTM.easting: 3469855.989805
    test 968 line 163 _ExactTM.northing: 7723193.799228
    test 969 line 163 _ExactTM.convergence: 53.114700
    test 970 line 163 _ExactTM.scale: 1.150540
    test 971 line 163 _ExactTM.lat: 54.510125
    test 972 line 163 _ExactTM.lon: 58.556056
    test 973 line 164 _ExactTM.easting: 5926165.994939
    test 974 line 164 _ExactTM.northing: 9385463.732747
    test 975 line 164 _ExactTM.convergence: 82.506981
    test 976 line 164 _ExactTM.scale: 1.459758
    test 977 line 164 _ExactTM.lat: 42.864162
    test 978 line 164 _ExactTM.lon: 84.866326
    test 979 line 165 _ExactTM.easting: 5798639.662224
    test 980 line 165 _ExactTM.northing: 5305387.640916
    test 981 line 165 _ExactTM.convergence: 38.617257
    test 982 line 165 _ExactTM.scale: 1.442263
    test 983 line 165 _ExactTM.lat: 30.911943
    test 984 line 165 _ExactTM.lon: 57.114102
    test 985 line 166 _ExactTM.easting: 9464.934388
    test 986 line 166 _ExactTM.northing: 6489121.624944
    test 987 line 166 _ExactTM.convergence: 0.138696
    test 988 line 166 _ExactTM.scale: 0.999601
    test 989 line 166 _ExactTM.lat: 58.542493
    test 990 line 166 _ExactTM.lon: 0.162593
    test 991 line 167 _ExactTM.easting: 12575834.275614
    test 992 line 167 _ExactTM.northing: 8356610.895486
    test 993 line 167 _ExactTM.convergence: 75.235223
    test 994 line 167 _ExactTM.scale: 3.599442
    test 995 line 167 _ExactTM.lat: 15.022689
    test 996 line 167 _ExactTM.lon: 85.792615
    test 997 line 168 _ExactTM.easting: 2719653.543469
    test 998 line 168 _ExactTM.northing: 9362389.163495
    test 999 line 168 _ExactTM.convergence: 76.049670
    test 1000 line 168 _ExactTM.scale: 1.091315
    test 1001 line 168 _ExactTM.lat: 65.692275
    test 1002 line 168 _ExactTM.lon: 77.241377
    test 1003 line 169 _ExactTM.easting: 4845341.924698
    test 1004 line 169 _ExactTM.northing: 8710522.326901
    test 1005 line 169 _ExactTM.convergence: 72.320942
    test 1006 line 169 _ExactTM.scale: 1.300382
    test 1007 line 169 _ExactTM.lat: 48.806211
    test 1008 line 169 _ExactTM.lon: 76.486365
    test 1009 line 170 _ExactTM.easting: 3935261.522763
    test 1010 line 170 _ExactTM.northing: 9454271.649062
    test 1011 line 170 _ExactTM.convergence: 81.162334
    test 1012 line 170 _ExactTM.scale: 1.194767
    test 1013 line 170 _ExactTM.lat: 56.436025
    test 1014 line 170 _ExactTM.lon: 82.611568
    test 1015 line 171 _ExactTM.easting: 7074299.823000
    test 1016 line 171 _ExactTM.northing: 1648736.065055
    test 1017 line 171 _ExactTM.convergence: 12.145925
    test 1018 line 171 _ExactTM.scale: 1.687551
    test 1019 line 171 _ExactTM.lat: 8.766053
    test 1020 line 171 _ExactTM.lon: 54.367539
    test 1021 line 172 _ExactTM.easting: 3689072.579308
    test 1022 line 172 _ExactTM.northing: 2230802.665211
    test 1023 line 172 _ExactTM.convergence: 10.856248
    test 1024 line 172 _ExactTM.scale: 1.172689
    test 1025 line 172 _ExactTM.lat: 17.095495
    test 1026 line 172 _ExactTM.lon: 33.059128
    test 1027 line 173 _ExactTM.easting: 8102565.885587
    test 1028 line 173 _ExactTM.northing: 5167396.617580
    test 1029 line 173 _ExactTM.convergence: 42.324886
    test 1030 line 173 _ExactTM.scale: 1.921927
    test 1031 line 173 _ExactTM.lat: 22.142861
    test 1032 line 173 _ExactTM.lon: 67.200684
    test 1033 line 174 _ExactTM.easting: 8181271.353564
    test 1034 line 174 _ExactTM.northing: 4425436.547185
    test 1035 line 174 _ExactTM.convergence: 35.900845
    test 1036 line 174 _ExactTM.scale: 1.945017
    test 1037 line 174 _ExactTM.lat: 19.222623
    test 1038 line 174 _ExactTM.lon: 65.180785
    test 1039 line 175 _ExactTM.easting: 767067.394003
    test 1040 line 175 _ExactTM.northing: 3701745.857296
    test 1041 line 175 _ExactTM.convergence: 4.519201
    test 1042 line 175 _ExactTM.scale: 1.006863
    test 1043 line 175 _ExactTM.lat: 33.182474
    test 1044 line 175 _ExactTM.lon: 8.216952
    test 1045 line 176 _ExactTM.easting: 6688114.168572
    test 1046 line 176 _ExactTM.northing: 2052857.299639
    test 1047 line 176 _ExactTM.convergence: 14.766191
    test 1048 line 176 _ExactTM.scale: 1.607200
    test 1049 line 176 _ExactTM.lat: 11.417963
    test 1050 line 176 _ExactTM.lon: 52.808691
    test 1051 line 177 _ExactTM.easting: 5608408.773761
    test 1052 line 177 _ExactTM.northing: 3859055.659110
    test 1053 line 177 _ExactTM.convergence: 26.244151
    test 1054 line 177 _ExactTM.scale: 1.413463
    test 1055 line 177 _ExactTM.lat: 23.836688
    test 1056 line 177 _ExactTM.lon: 50.500180
    test 1057 line 178 _ExactTM.easting: 3836942.765275
    test 1058 line 178 _ExactTM.northing: 6415467.634326
    test 1059 line 178 _ExactTM.convergence: 40.575885
    test 1060 line 178 _ExactTM.scale: 1.185615
    test 1061 line 178 _ExactTM.lat: 45.550020
    test 1062 line 178 _ExactTM.lon: 50.148036
    test 1063 line 179 _ExactTM.easting: 1298730.366025
    test 1064 line 179 _ExactTM.northing: 6021453.000792
    test 1065 line 179 _ExactTM.convergence: 15.613320
    test 1066 line 179 _ExactTM.scale: 1.020367
    test 1067 line 179 _ExactTM.lat: 52.746079
    test 1068 line 179 _ExactTM.lon: 19.343926
    test 1069 line 180 _ExactTM.easting: 416934.289208
    test 1070 line 180 _ExactTM.northing: 7295683.451705
    test 1071 line 180 _ExactTM.convergence: 8.238232
    test 1072 line 180 _ExactTM.scale: 1.001729
    test 1073 line 180 _ExactTM.lat: 65.513348
    test 1074 line 180 _ExactTM.lon: 9.039529
    test 1075 line 181 _ExactTM.easting: 4336076.850889
    test 1076 line 181 _ExactTM.northing: 7617975.722779
    test 1077 line 181 _ExactTM.convergence: 56.537088
    test 1078 line 181 _ExactTM.scale: 1.238582
    test 1079 line 181 _ExactTM.lat: 48.709795
    test 1080 line 181 _ExactTM.lon: 63.554005
    test 1081 line 182 _ExactTM.easting: 168047.336980
    test 1082 line 182 _ExactTM.northing: 2185000.046530
    test 1083 line 182 _ExactTM.convergence: 0.542187
    test 1084 line 182 _ExactTM.scale: 0.999949
    test 1085 line 182 _ExactTM.lat: 19.753509
    test 1086 line 182 _ExactTM.lon: 1.603846
    test 1087 line 183 _ExactTM.easting: 8276281.328790
    test 1088 line 183 _ExactTM.northing: 263444.350545
    test 1089 line 183 _ExactTM.convergence: 2.071435
    test 1090 line 183 _ExactTM.scale: 1.980314
    test 1091 line 183 _ExactTM.lat: 1.202816
    test 1092 line 183 _ExactTM.lon: 59.377276
    test 1093 line 184 _ExactTM.easting: 4772573.810710
    test 1094 line 184 _ExactTM.northing: 6765710.336002
    test 1095 line 184 _ExactTM.convergence: 48.857561
    test 1096 line 184 _ExactTM.scale: 1.291911
    test 1097 line 184 _ExactTM.lat: 42.564975
    test 1098 line 184 _ExactTM.lon: 59.356947
    test 1099 line 185 _ExactTM.easting: 5427755.074639
    test 1100 line 185 _ExactTM.northing: 1556055.820924
    test 1101 line 185 _ExactTM.convergence: 9.862178
    test 1102 line 185 _ExactTM.scale: 1.387394
    test 1103 line 185 _ExactTM.lat: 10.090572
    test 1104 line 185 _ExactTM.lon: 44.604132
    test 1105 line 186 _ExactTM.easting: 11588458.616041
    test 1106 line 186 _ExactTM.northing: 5707993.922613
    test 1107 line 186 _ExactTM.convergence: 50.784827
    test 1108 line 186 _ExactTM.scale: 3.149567
    test 1109 line 186 _ExactTM.lat: 14.133028
    test 1110 line 186 _ExactTM.lon: 78.097533
    test 1111 line 187 _ExactTM.easting: 7152433.802688
    test 1112 line 187 _ExactTM.northing: 761390.695844
    test 1113 line 187 _ExactTM.convergence: 5.607350
    test 1114 line 187 _ExactTM.scale: 1.705261
    test 1115 line 187 _ExactTM.lat: 4.031123
    test 1116 line 187 _ExactTM.lon: 54.048782
    test 1117 line 188 _ExactTM.easting: 3105651.390901
    test 1118 line 188 _ExactTM.northing: 9426026.169064
    test 1119 line 188 _ExactTM.convergence: 78.750206
    test 1120 line 188 _ExactTM.scale: 1.119737
    test 1121 line 188 _ExactTM.lat: 62.746603
    test 1122 line 188 _ExactTM.lon: 79.968641
    test 1123 line 189 _ExactTM.easting: 2959009.639022
    test 1124 line 189 _ExactTM.northing: 8339242.269282
    test 1125 line 189 _ExactTM.convergence: 58.460865
    test 1126 line 189 _ExactTM.scale: 1.108554
    test 1127 line 189 _ExactTM.lat: 60.626429
    test 1128 line 189 _ExactTM.lon: 61.851551
    test 1129 line 190 _ExactTM.easting: 8640472.267145
    test 1130 line 190 _ExactTM.northing: 6230320.417931
    test 1131 line 190 _ExactTM.convergence: 52.816810
    test 1132 line 190 _ExactTM.scale: 2.062973
    test 1133 line 190 _ExactTM.lat: 23.600626
    test 1134 line 190 _ExactTM.lon: 72.811634
    test 1135 line 191 _ExactTM.easting: 811352.108932
    test 1136 line 191 _ExactTM.northing: 9816129.813481
    test 1137 line 191 _ExactTM.convergence: 77.299184
    test 1138 line 191 _ExactTM.scale: 1.007651
    test 1139 line 191 _ExactTM.lat: 82.572236
    test 1140 line 191 _ExactTM.lon: 77.402323
    test 1141 line 192 _ExactTM.easting: 6521874.973458
    test 1142 line 192 _ExactTM.northing: 1053612.479744
    test 1143 line 192 _ExactTM.convergence: 7.407328
    test 1144 line 192 _ExactTM.scale: 1.575529
    test 1145 line 192 _ExactTM.lat: 6.030051
    test 1146 line 192 _ExactTM.lon: 50.783505
    test 1147 line 193 _ExactTM.easting: 3477983.997875
    test 1148 line 193 _ExactTM.northing: 5651613.325947
    test 1149 line 193 _ExactTM.convergence: 31.530673
    test 1150 line 193 _ExactTM.scale: 1.151875
    test 1151 line 193 _ExactTM.lat: 42.411523
    test 1152 line 193 _ExactTM.lon: 42.258009
    test 1153 line 194 _ExactTM.easting: 629892.822243
    test 1154 line 194 _ExactTM.northing: 3283914.910451
    test 1155 line 194 _ExactTM.convergence: 3.210482
    test 1156 line 194 _ExactTM.scale: 1.004499
    test 1157 line 194 _ExactTM.lat: 29.526120
    test 1158 line 194 _ExactTM.lon: 6.493069
    test 1159 line 195 _ExactTM.easting: 3381879.687227
    test 1160 line 195 _ExactTM.northing: 5103629.325665
    test 1161 line 195 _ExactTM.convergence: 26.748108
    test 1162 line 195 _ExactTM.scale: 1.143559
    test 1163 line 195 _ExactTM.lat: 39.021853
    test 1164 line 195 _ExactTM.lon: 38.641779
    test 1165 line 196 _ExactTM.easting: 2815986.534177
    test 1166 line 196 _ExactTM.northing: 9387029.120718
    test 1167 line 196 _ExactTM.convergence: 76.967262
    test 1168 line 196 _ExactTM.scale: 1.098032
    test 1169 line 196 _ExactTM.lat: 64.971850
    test 1170 line 196 _ExactTM.lon: 78.151893
    test 1171 line 197 _ExactTM.easting: 3398195.889603
    test 1172 line 197 _ExactTM.northing: 9138936.031490
    test 1173 line 197 _ExactTM.convergence: 74.477499
    test 1174 line 197 _ExactTM.scale: 1.144009
    test 1175 line 197 _ExactTM.lat: 59.961819
    test 1176 line 197 _ExactTM.lon: 76.473422
    test 1177 line 198 _ExactTM.easting: 2421734.754637
    test 1178 line 198 _ExactTM.northing: 5002372.094991
    test 1179 line 198 _ExactTM.convergence: 20.017082
    test 1180 line 198 _ExactTM.scale: 1.072592
    test 1181 line 198 _ExactTM.lat: 41.374040
    test 1182 line 198 _ExactTM.lon: 28.848343
    test 1183 line 199 _ExactTM.easting: 2360869.895525
    test 1184 line 199 _ExactTM.northing: 9553298.449536
    test 1185 line 199 _ExactTM.convergence: 78.848205
    test 1186 line 199 _ExactTM.scale: 1.068453
    test 1187 line 199 _ExactTM.lat: 68.946087
    test 1188 line 199 _ExactTM.lon: 79.574523
    test 1189 line 200 _ExactTM.easting: 1196539.972194
    test 1190 line 200 _ExactTM.northing: 9861920.836230
    test 1191 line 200 _ExactTM.convergence: 83.437668
    test 1192 line 200 _ExactTM.scale: 1.017137
    test 1193 line 200 _ExactTM.lat: 79.275096
    test 1194 line 200 _ExactTM.lon: 83.551272
    test 1195 line 201 _ExactTM.easting: 1327758.704795
    test 1196 line 201 _ExactTM.northing: 2375509.241683
    test 1197 line 201 _ExactTM.convergence: 4.617572
    test 1198 line 201 _ExactTM.scale: 1.021465
    test 1199 line 201 _ExactTM.lat: 21.000252
    test 1200 line 201 _ExactTM.lon: 12.697444
    test 1201 line 202 _ExactTM.easting: 2070860.327644
    test 1202 line 202 _ExactTM.northing: 8604500.719581
    test 1203 line 202 _ExactTM.convergence: 54.722761
    test 1204 line 202 _ExactTM.scale: 1.052469
    test 1205 line 202 _ExactTM.lat: 68.015227
    test 1206 line 202 _ExactTM.lon: 56.732419
    test 1207 line 203 _ExactTM.easting: 6564776.654864
    test 1208 line 203 _ExactTM.northing: 8171207.177379
    test 1209 line 203 _ExactTM.convergence: 69.237523
    test 1210 line 203 _ExactTM.scale: 1.573894
    test 1211 line 203 _ExactTM.lat: 37.423675
    test 1212 line 203 _ExactTM.lon: 76.947359
    test 1213 line 204 _ExactTM.easting: 592653.553821
    test 1214 line 204 _ExactTM.northing: 6125529.810052
    test 1215 line 204 _ExactTM.convergence: 7.600785
    test 1216 line 204 _ExactTM.scale: 1.003912
    test 1217 line 204 _ExactTM.lat: 54.922707
    test 1218 line 204 _ExactTM.lon: 9.260818
    test 1219 line 205 _ExactTM.easting: 693459.671821
    test 1220 line 205 _ExactTM.northing: 6943779.991032
    test 1221 line 205 _ExactTM.convergence: 11.787587
    test 1222 line 205 _ExactTM.scale: 1.005496
    test 1223 line 205 _ExactTM.lat: 61.982810
    test 1224 line 205 _ExactTM.lon: 13.299659
    test 1225 line 206 _ExactTM.easting: 1838956.187625
    test 1226 line 206 _ExactTM.northing: 3511959.612381
    test 1227 line 206 _ExactTM.convergence: 9.844313
    test 1228 line 206 _ExactTM.scale: 1.041603
    test 1229 line 206 _ExactTM.lat: 30.324214
    test 1230 line 206 _ExactTM.lon: 18.959769
    test 1231 line 207 _ExactTM.easting: 4460690.884597
    test 1232 line 207 _ExactTM.northing: 5541873.235403
    test 1233 line 207 _ExactTM.convergence: 35.768613
    test 1234 line 207 _ExactTM.scale: 1.254179
    test 1235 line 207 _ExactTM.lat: 37.629667
    test 1236 line 207 _ExactTM.lon: 49.649131
    test 1237 line 208 _ExactTM.easting: 2311168.998941
    test 1238 line 208 _ExactTM.northing: 9480561.869119
    test 1239 line 208 _ExactTM.convergence: 76.828257
    test 1240 line 208 _ExactTM.scale: 1.065556
    test 1241 line 208 _ExactTM.lat: 69.225574
    test 1242 line 208 _ExactTM.lon: 77.656135
    test 1243 line 209 _ExactTM.easting: 4111775.114451
    test 1244 line 209 _ExactTM.northing: 6509014.348792
    test 1245 line 209 _ExactTM.convergence: 43.052130
    test 1246 line 209 _ExactTM.scale: 1.214125
    test 1247 line 209 _ExactTM.lat: 44.698478
    test 1248 line 209 _ExactTM.lon: 52.979304
    test 1249 line 210 _ExactTM.easting: 75358.261962
    test 1250 line 210 _ExactTM.northing: 7711258.662251
    test 1251 line 210 _ExactTM.convergence: 1.806297
    test 1252 line 210 _ExactTM.scale: 0.999669
    test 1253 line 210 _ExactTM.lat: 69.499594
    test 1254 line 210 _ExactTM.lon: 1.928336
    test 1255 line 211 _ExactTM.easting: 8781885.229116
    test 1256 line 211 _ExactTM.northing: 9184776.452211
    test 1257 line 211 _ExactTM.convergence: 81.795539
    test 1258 line 211 _ExactTM.scale: 2.094908
    test 1259 line 211 _ExactTM.lat: 27.981364
    test 1260 line 211 _ExactTM.lon: 86.061113
    test 1261 line 212 _ExactTM.easting: 954378.415174
    test 1262 line 212 _ExactTM.northing: 7449110.669807
    test 1263 line 212 _ExactTM.convergence: 19.380657
    test 1264 line 212 _ExactTM.scale: 1.010768
    test 1265 line 212 _ExactTM.lat: 65.699839
    test 1266 line 212 _ExactTM.lon: 21.104725
    test 1267 line 213 _ExactTM.easting: 720971.793706
    test 1268 line 213 _ExactTM.northing: 5265195.121555
    test 1269 line 213 _ExactTM.convergence: 7.002995
    test 1270 line 213 _ExactTM.scale: 1.005995
    test 1271 line 213 _ExactTM.lat: 47.143648
    test 1272 line 213 _ExactTM.lon: 9.512189
    test 1273 line 214 _ExactTM.easting: 561561.493937
    test 1274 line 214 _ExactTM.northing: 989910.236221
    test 1275 line 214 _ExactTM.convergence: 0.793118
    test 1276 line 214 _ExactTM.scale: 1.003505
    test 1277 line 214 _ExactTM.lat: 8.920167
    test 1278 line 214 _ExactTM.lon: 5.101513
    test 1279 line 215 _ExactTM.easting: 3446829.634468
    test 1280 line 215 _ExactTM.northing: 9232868.155664
    test 1281 line 215 _ExactTM.convergence: 76.279075
    test 1282 line 215 _ExactTM.scale: 1.148263
    test 1283 line 215 _ExactTM.lat: 59.778971
    test 1284 line 215 _ExactTM.lon: 78.080322
    test 1285 line 216 _ExactTM.easting: 4048307.545909
    test 1286 line 216 _ExactTM.northing: 9800416.422998
    test 1287 line 216 _ExactTM.convergence: 86.843918
    test 1288 line 216 _ExactTM.scale: 1.206495
    test 1289 line 216 _ExactTM.lat: 55.865310
    test 1290 line 216 _ExactTM.lon: 87.384288
    test 1291 line 217 _ExactTM.easting: 8973188.480293
    test 1292 line 217 _ExactTM.northing: 7042230.087021
    test 1293 line 217 _ExactTM.convergence: 60.872456
    test 1294 line 217 _ExactTM.scale: 2.156098
    test 1295 line 217 _ExactTM.lat: 24.310973
    test 1296 line 217 _ExactTM.lon: 76.823777
    test 1297 line 218 _ExactTM.easting: 126314.191618
    test 1298 line 218 _ExactTM.northing: 396006.687921
    test 1299 line 218 _ExactTM.convergence: 0.071065
    test 1300 line 218 _ExactTM.scale: 0.999798
    test 1301 line 218 _ExactTM.lat: 3.582041
    test 1302 line 218 _ExactTM.lon: 1.137286
    test 1303 line 219 _ExactTM.easting: 5247652.345647
    test 1304 line 219 _ExactTM.northing: 8670513.359752
    test 1305 line 219 _ExactTM.convergence: 72.700498
    test 1306 line 219 _ExactTM.scale: 1.355272
    test 1307 line 219 _ExactTM.lat: 46.124233
    test 1308 line 219 _ExactTM.lon: 77.313118
    test 1309 line 220 _ExactTM.easting: 8103656.838119
    test 1310 line 220 _ExactTM.northing: 9469794.014737
    test 1311 line 220 _ExactTM.convergence: 84.490673
    test 1312 line 220 _ExactTM.scale: 1.912164
    test 1313 line 220 _ExactTM.lat: 31.171391
    test 1314 line 220 _ExactTM.lon: 87.104504
    test 1315 line 221 _ExactTM.easting: 6300112.758236
    test 1316 line 221 _ExactTM.northing: 93835.917364
    test 1317 line 221 _ExactTM.convergence: 0.644805
    test 1318 line 221 _ExactTM.scale: 1.534073
    test 1319 line 221 _ExactTM.lat: 0.553171
    test 1320 line 221 _ExactTM.lon: 49.117104
    test 1321 line 222 _ExactTM.easting: 3894813.593782
    test 1322 line 222 _ExactTM.northing: 4833832.341027
    test 1323 line 222 _ExactTM.convergence: 27.453298
    test 1324 line 222 _ExactTM.scale: 1.192135
    test 1325 line 222 _ExactTM.lat: 35.361587
    test 1326 line 222 _ExactTM.lon: 41.860599
    test 1327 line 223 _ExactTM.easting: 402511.346712
    test 1328 line 223 _ExactTM.northing: 3520621.561911
    test 1329 line 223 _ExactTM.convergence: 2.238474
    test 1330 line 223 _ExactTM.scale: 1.001599
    test 1331 line 223 _ExactTM.lat: 31.750314
    test 1332 line 223 _ExactTM.lon: 4.248167
    test 1333 line 224 _ExactTM.easting: 5357378.503148
    test 1334 line 224 _ExactTM.northing: 2772997.602234
    test 1335 line 224 _ExactTM.convergence: 17.823560
    test 1336 line 224 _ExactTM.scale: 1.376031
    test 1337 line 224 _ExactTM.lat: 17.924336
    test 1338 line 224 _ExactTM.lon: 46.096402
    test 1339 line 225 _ExactTM.easting: 2807553.985866
    test 1340 line 225 _ExactTM.northing: 8177847.980275
    test 1341 line 225 _ExactTM.convergence: 54.680045
    test 1342 line 225 _ExactTM.scale: 1.097531
    test 1343 line 225 _ExactTM.lat: 60.931488
    test 1344 line 225 _ExactTM.lon: 58.221214
    test 1345 line 226 _ExactTM.easting: 18289045.166501
    test 1346 line 226 _ExactTM.northing: 7792942.339604
    test 1347 line 226 _ExactTM.convergence: 73.216494
    test 1348 line 226 _ExactTM.scale: 8.098009
    test 1349 line 226 _ExactTM.lat: 5.358151
    test 1350 line 226 _ExactTM.lon: 87.556213
    test 1351 line 227 _ExactTM.easting: 8376822.459538
    test 1352 line 227 _ExactTM.northing: 8128174.623878
    test 1353 line 227 _ExactTM.convergence: 70.920117
    test 1354 line 227 _ExactTM.scale: 1.984873
    test 1355 line 227 _ExactTM.lat: 28.616673
    test 1356 line 227 _ExactTM.lon: 80.452426
    test 1357 line 228 _ExactTM.easting: 11898068.353272
    test 1358 line 228 _ExactTM.northing: 4772439.493697
    test 1359 line 228 _ExactTM.convergence: 42.613968
    test 1360 line 228 _ExactTM.scale: 3.314412
    test 1361 line 228 _ExactTM.lat: 11.709763
    test 1362 line 228 _ExactTM.lon: 76.760295
    test 1363 line 229 _ExactTM.easting: 10550946.939050
    test 1364 line 229 _ExactTM.northing: 3851968.815295
    test 1365 line 229 _ExactTM.convergence: 33.383025
    test 1366 line 229 _ExactTM.scale: 2.724754
    test 1367 line 229 _ExactTM.lat: 12.009498
    test 1368 line 229 _ExactTM.lon: 71.782351
    test 1369 line 230 _ExactTM.easting: 6828299.123607
    test 1370 line 230 _ExactTM.northing: 9394803.227463
    test 1371 line 230 _ExactTM.convergence: 83.181386
    test 1372 line 230 _ExactTM.scale: 1.624359
    test 1373 line 230 _ExactTM.lat: 37.629784
    test 1374 line 230 _ExactTM.lon: 85.795687
    test 1375 line 231 _ExactTM.easting: 11162550.334022
    test 1376 line 231 _ExactTM.northing: 2640267.279593
    test 1377 line 231 _ExactTM.convergence: 23.145404
    test 1378 line 231 _ExactTM.scale: 2.998408
    test 1379 line 231 _ExactTM.lat: 7.721128
    test 1380 line 231 _ExactTM.lon: 71.662731
    test 1381 line 232 _ExactTM.easting: 4411584.447941
    test 1382 line 232 _ExactTM.northing: 4956173.694407
    test 1383 line 232 _ExactTM.convergence: 30.713919
    test 1384 line 232 _ExactTM.scale: 1.248736
    test 1385 line 232 _ExactTM.lat: 34.295026
    test 1386 line 232 _ExactTM.lon: 46.442191
    test 1387 line 233 _ExactTM.easting: 672108.897905
    test 1388 line 233 _ExactTM.northing: 4751554.657054
    test 1389 line 233 _ExactTM.convergence: 5.569178
    test 1390 line 233 _ExactTM.scale: 1.005162
    test 1391 line 233 _ExactTM.lat: 42.622496
    test 1392 line 233 _ExactTM.lon: 8.193605
    test 1393 line 234 _ExactTM.easting: 5022964.290579
    test 1394 line 234 _ExactTM.northing: 6860418.199502
    test 1395 line 234 _ExactTM.convergence: 50.862230
    test 1396 line 234 _ExactTM.scale: 1.324925
    test 1397 line 234 _ExactTM.lat: 41.667780
    test 1398 line 234 _ExactTM.lon: 61.518288
    test 1399 line 235 _ExactTM.easting: 1669655.595207
    test 1400 line 235 _ExactTM.northing: 4152086.537021
    test 1401 line 235 _ExactTM.convergence: 11.110237
    test 1402 line 235 _ExactTM.scale: 1.034138
    test 1403 line 235 _ExactTM.lat: 36.060369
    test 1404 line 235 _ExactTM.lon: 18.444112
    test 1405 line 236 _ExactTM.easting: 6055876.729655
    test 1406 line 236 _ExactTM.northing: 4896837.552619
    test 1407 line 236 _ExactTM.convergence: 35.799747
    test 1408 line 236 _ExactTM.scale: 1.485967
    test 1409 line 236 _ExactTM.lat: 27.948091
    test 1410 line 236 _ExactTM.lon: 56.816429
    test 1411 line 237 _ExactTM.easting: 1209214.164379
    test 1412 line 237 _ExactTM.northing: 7266409.859178
    test 1413 line 237 _ExactTM.convergence: 22.319633
    test 1414 line 237 _ExactTM.scale: 1.017554
    test 1415 line 237 _ExactTM.lat: 63.386030
    test 1416 line 237 _ExactTM.lon: 24.662716
    test 1417 line 238 _ExactTM.easting: 5154564.559584
    test 1418 line 238 _ExactTM.northing: 698118.349975
    test 1419 line 238 _ExactTM.convergence: 4.242360
    test 1420 line 238 _ExactTM.scale: 1.347481
    test 1421 line 238 _ExactTM.lat: 4.680922
    test 1422 line 238 _ExactTM.lon: 42.114426
    test 1423 line 239 _ExactTM.easting: 2695149.806543
    test 1424 line 239 _ExactTM.northing: 8208197.765605
    test 1425 line 239 _ExactTM.convergence: 54.178615
    test 1426 line 239 _ExactTM.scale: 1.089730
    test 1427 line 239 _ExactTM.lat: 61.826625
    test 1428 line 239 _ExactTM.lon: 57.525096
    test 1429 line 240 _ExactTM.easting: 3394792.327820
    test 1430 line 240 _ExactTM.northing: 3217583.415552
    test 1431 line 240 _ExactTM.convergence: 15.165863
    test 1432 line 240 _ExactTM.scale: 1.145285
    test 1433 line 240 _ExactTM.lat: 25.104353
    test 1434 line 240 _ExactTM.lon: 32.528660
    test 1435 line 241 _ExactTM.easting: 1429160.966985
    test 1436 line 241 _ExactTM.northing: 8212685.362032
    test 1437 line 241 _ExactTM.convergence: 37.484904
    test 1438 line 241 _ExactTM.scale: 1.024676
    test 1439 line 241 _ExactTM.lat: 69.678351
    test 1440 line 241 _ExactTM.lon: 39.275513
    test 1441 line 242 _ExactTM.easting: 8343387.998065
    test 1442 line 242 _ExactTM.northing: 8885196.954578
    test 1443 line 242 _ExactTM.convergence: 78.561937
    test 1444 line 242 _ExactTM.scale: 1.974733
    test 1445 line 242 _ExactTM.lat: 29.671384
    test 1446 line 242 _ExactTM.lon: 84.196595
    test 1447 line 243 _ExactTM.easting: 1990722.928606
    test 1448 line 243 _ExactTM.northing: 7569202.065162
    test 1449 line 243 _ExactTM.convergence: 37.075276
    test 1450 line 243 _ExactTM.scale: 1.048486
    test 1451 line 243 _ExactTM.lat: 62.300208
    test 1452 line 243 _ExactTM.lon: 40.474051
    test 1453 line 244 _ExactTM.easting: 1554980.099559
    test 1454 line 244 _ExactTM.northing: 1449423.919586
    test 1455 line 244 _ExactTM.convergence: 3.188328
    test 1456 line 244 _ExactTM.scale: 1.029664
    test 1457 line 244 _ExactTM.lat: 12.721776
    test 1458 line 244 _ExactTM.lon: 14.190003
    test 1459 line 245 _ExactTM.easting: 785205.450196
    test 1460 line 245 _ExactTM.northing: 5575158.423096
    test 1461 line 245 _ExactTM.convergence: 8.388417
    test 1462 line 245 _ExactTM.scale: 1.007181
    test 1463 line 245 _ExactTM.lat: 49.811296
    test 1464 line 245 _ExactTM.lon: 10.925011
    test 1465 line 246 _ExactTM.easting: 3310405.988313
    test 1466 line 246 _ExactTM.northing: 5955022.233881
    test 1467 line 246 _ExactTM.convergence: 33.007587
    test 1468 line 246 _ExactTM.scale: 1.137141
    test 1469 line 246 _ExactTM.lat: 45.132680
    test 1470 line 246 _ExactTM.lon: 42.478624
    test 1471 line 247 _ExactTM.easting: 4733460.960666
    test 1472 line 247 _ExactTM.northing: 129034.889816
    test 1473 line 247 _ExactTM.convergence: 0.737551
    test 1474 line 247 _ExactTM.scale: 1.290439
    test 1475 line 247 _ExactTM.lat: 0.904279
    test 1476 line 247 _ExactTM.lon: 39.078412
    test 1477 line 248 _ExactTM.easting: 3322708.343909
    test 1478 line 248 _ExactTM.northing: 3864738.078742
    test 1479 line 248 _ExactTM.convergence: 18.472566
    test 1480 line 248 _ExactTM.scale: 1.138838
    test 1481 line 248 _ExactTM.lat: 30.163605
    test 1482 line 248 _ExactTM.lon: 33.577996
    test 1483 line 249 _ExactTM.easting: 8672864.417204
    test 1484 line 249 _ExactTM.northing: 8333465.983444
    test 1485 line 249 _ExactTM.convergence: 73.206273
    test 1486 line 249 _ExactTM.scale: 2.065441
    test 1487 line 249 _ExactTM.lat: 27.643244
    test 1488 line 249 _ExactTM.lon: 81.892859
    test 1489 line 250 _ExactTM.easting: 11126818.231196
    test 1490 line 250 _ExactTM.northing: 7618712.174991
    test 1491 line 250 _ExactTM.convergence: 67.887173
    test 1492 line 250 _ExactTM.scale: 2.922417
    test 1493 line 250 _ExactTM.lat: 18.201208
    test 1494 line 250 _ExactTM.lon: 82.434618
    test 1495 line 251 _ExactTM.easting: 8650100.981797
    test 1496 line 251 _ExactTM.northing: 9975084.168997
    test 1497 line 251 _ExactTM.convergence: 89.767446
    test 1498 line 251 _ExactTM.scale: 2.057289
    test 1499 line 251 _ExactTM.lat: 28.804576
    test 1500 line 251 _ExactTM.lon: 89.886072
    test 1501 line 252 _ExactTM.easting: 2212701.180192
    test 1502 line 252 _ExactTM.northing: 650348.100229
    test 1503 line 252 _ExactTM.convergence: 1.970441
    test 1504 line 252 _ExactTM.scale: 1.060830
    test 1505 line 252 _ExactTM.lat: 5.542998
    test 1506 line 252 _ExactTM.lon: 19.589578
    test 1507 line 253 _ExactTM.easting: 6890222.326618
    test 1508 line 253 _ExactTM.northing: 7506813.499547
    test 1509 line 253 _ExactTM.convergence: 62.684825
    test 1510 line 253 _ExactTM.scale: 1.638488
    test 1511 line 253 _ExactTM.lat: 34.237147
    test 1512 line 253 _ExactTM.lon: 73.678164
    test 1513 line 254 _ExactTM.easting: 6692260.067325
    test 1514 line 254 _ExactTM.northing: 4244174.008110
    test 1515 line 254 _ExactTM.convergence: 31.812920
    test 1516 line 254 _ExactTM.scale: 1.604640
    test 1517 line 254 _ExactTM.lat: 22.704949
    test 1518 line 254 _ExactTM.lon: 57.877010
    test 1519 line 255 _ExactTM.easting: 1225564.137190
    test 1520 line 255 _ExactTM.northing: 4778923.924144
    test 1521 line 255 _ExactTM.convergence: 10.083419
    test 1522 line 255 _ExactTM.scale: 1.018134
    test 1523 line 255 _ExactTM.lat: 42.192424
    test 1524 line 255 _ExactTM.lon: 14.828196
    test 1525 line 256 _ExactTM.easting: 12341116.154950
    test 1526 line 256 _ExactTM.northing: 5081855.521966
    test 1527 line 256 _ExactTM.convergence: 45.712546
    test 1528 line 256 _ExactTM.scale: 3.535170
    test 1529 line 256 _ExactTM.lat: 11.481151
    test 1530 line 256 _ExactTM.lon: 78.189236
    test 1531 line 257 _ExactTM.easting: 6673845.021771
    test 1532 line 257 _ExactTM.northing: 1177587.190565
    test 1533 line 257 _ExactTM.convergence: 8.389141
    test 1534 line 257 _ExactTM.scale: 1.605171
    test 1535 line 257 _ExactTM.lat: 6.609626
    test 1536 line 257 _ExactTM.lon: 51.735783
    test 1537 line 258 _ExactTM.easting: 6966354.690417
    test 1538 line 258 _ExactTM.northing: 3641802.005093
    test 1539 line 258 _ExactTM.convergence: 27.409636
    test 1540 line 258 _ExactTM.scale: 1.661469
    test 1541 line 258 _ExactTM.lat: 19.059369
    test 1542 line 258 _ExactTM.lon: 57.526439
    test 1543 max forward error: 6.332994e-08
    test 1544 max reverse error: 1.136868e-13
    test 1545 _ExactTM.scale0: 0.9996
    test 1546 _ExactTM.datum: WGS84
    test 1547 _ExactTM.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    3 of 1548 testExactTMcoords.py tests (0.2%) FAILED, ALL KNOWN, 1 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 3.009 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testFmath.py

    testing testFmath.py 21.06.30 (module pygeodesy.fmath 21.07.26)
    test 1 fpolynomialA: 1.21197509766
    test 2 fhornerA: 1.21197509766
    test 3 fpolynomialB: 0.1513671875
    test 4 fhornerB: 0.1513671875
    test 5 fpolynomialA: 1.21197509766
    test 6 fhornerA: 1.21197509766
    test 7 fpolynomialB: 0.1513671875
    test 8 fhornerB: 0.1513671875
    test 9 fpolynomialA: 1.21197509766
    test 10 fhornerA: 1.21197509766
    test 11 fpolynomialB: 0.1513671875
    test 12 fhornerB: 0.1513671875
    test 13 fpolynomialA: 1.21197509766
    test 14 fhornerA: 1.21197509766
    test 15 fpolynomialB: 0.1513671875
    test 16 fhornerB: 0.1513671875
    test 17 fpolynomialA: 1.21197509766
    test 18 fhornerA: 1.21197509766
    test 19 fpolynomialB: 0.1513671875
    test 20 fhornerB: 0.1513671875
    test 21 fpolynomialA: 1.21197509766
    test 22 fhornerA: 1.21197509766
    test 23 fpolynomialB: 0.1513671875
    test 24 fhornerB: 0.1513671875
    test 25 fpolynomialA: 1.21197509766
    test 26 fhornerA: 1.21197509766
    test 27 fpolynomialB: 0.1513671875
    test 28 fhornerB: 0.1513671875
    test 29 fpolynomialA: 1.21197509766
    test 30 fhornerA: 1.21197509766
    test 31 fpolynomialB: 0.1513671875
    test 32 fhornerB: 0.1513671875
    test 33 fpolynomialA: 1.21197509766
    test 34 fhornerA: 1.21197509766
    test 35 fpolynomialB: 0.1513671875
    test 36 fhornerB: 0.1513671875
    test 37 fpolynomialA: 1.21197509766
    test 38 fhornerA: 1.21197509766
    test 39 fpolynomialB: 0.1513671875
    test 40 fhornerB: 0.1513671875
    test 41 fpolynomialA: 1.21197509766
    test 42 fhornerA: 1.21197509766
    test 43 fpolynomialB: 0.1513671875
    test 44 fhornerB: 0.1513671875
    test 45 fpolynomialA: 1.21197509766
    test 46 fhornerA: 1.21197509766
    test 47 fpolynomialB: 0.1513671875
    test 48 fhornerB: 0.1513671875
    test 49 fpolynomialA: 1.21197509766
    test 50 fhornerA: 1.21197509766
    test 51 fpolynomialB: 0.1513671875
    test 52 fhornerB: 0.1513671875
    test 53 fpolynomialA: 1.21197509766
    test 54 fhornerA: 1.21197509766
    test 55 fpolynomialB: 0.1513671875
    test 56 fhornerB: 0.1513671875
    test 57 fpolynomialA: 1.21197509766
    test 58 fhornerA: 1.21197509766
    test 59 fpolynomialB: 0.1513671875
    test 60 fhornerB: 0.1513671875
    test 61 fpolynomialA: 1.21197509766
    test 62 fhornerA: 1.21197509766
    test 63 fpolynomialB: 0.1513671875
    test 64 fhornerB: 0.1513671875
    test 65 fpolynomialA: 1.21197509766
    test 66 fhornerA: 1.21197509766
    test 67 fpolynomialB: 0.1513671875
    test 68 fhornerB: 0.1513671875
    test 69 fpolynomialA: 1.21197509766
    test 70 fhornerA: 1.21197509766
    test 71 fpolynomialB: 0.1513671875
    test 72 fhornerB: 0.1513671875
    test 73 fpolynomialA: 1.21197509766
    test 74 fhornerA: 1.21197509766
    test 75 fpolynomialB: 0.1513671875
    test 76 fhornerB: 0.1513671875
    test 77 fpolynomialA: 1.21197509766
    test 78 fhornerA: 1.21197509766
    test 79 fpolynomialB: 0.1513671875
    test 80 fhornerB: 0.1513671875
    test 81 fpolynomialA: 1.21197509766
    test 82 fhornerA: 1.21197509766
    test 83 fpolynomialB: 0.1513671875
    test 84 fhornerB: 0.1513671875
    test 85 fpolynomialA: 1.21197509766
    test 86 fhornerA: 1.21197509766
    test 87 fpolynomialB: 0.1513671875
    test 88 fhornerB: 0.1513671875
    test 89 fpolynomialA: 1.21197509766
    test 90 fhornerA: 1.21197509766
    test 91 fpolynomialB: 0.1513671875
    test 92 fhornerB: 0.1513671875
    test 93 fpolynomialA: 1.21197509766
    test 94 fhornerA: 1.21197509766
    test 95 fpolynomialB: 0.1513671875
    test 96 fhornerB: 0.1513671875
    test 97 fpolynomialA: 1.21197509766
    test 98 fhornerA: 1.21197509766
    test 99 fpolynomialB: 0.1513671875
    test 100 fhornerB: 0.1513671875
    test 101 fpolynomialA: 1.21197509766
    test 102 fhornerA: 1.21197509766
    test 103 fpolynomialB: 0.1513671875
    test 104 fhornerB: 0.1513671875
    test 105 fpolynomialA: 1.21197509766
    test 106 fhornerA: 1.21197509766
    test 107 fpolynomialB: 0.1513671875
    test 108 fhornerB: 0.1513671875
    test 109 fpolynomialA: 1.21197509766
    test 110 fhornerA: 1.21197509766
    test 111 fpolynomialB: 0.1513671875
    test 112 fhornerB: 0.1513671875
    test 113 fpolynomialA: 1.21197509766
    test 114 fhornerA: 1.21197509766
    test 115 fpolynomialB: 0.1513671875
    test 116 fhornerB: 0.1513671875
    test 117 fpolynomialA: 1.21197509766
    test 118 fhornerA: 1.21197509766
    test 119 fpolynomialB: 0.1513671875
    test 120 fhornerB: 0.1513671875
    test 121 fpolynomialA: 1.21197509766
    test 122 fhornerA: 1.21197509766
    test 123 fpolynomialB: 0.1513671875
    test 124 fhornerB: 0.1513671875
    test 125 fpolynomialA: 1.21197509766
    test 126 fhornerA: 1.21197509766
    test 127 fpolynomialB: 0.1513671875
    test 128 fhornerB: 0.1513671875
    test 129 fpolynomialA: 1.21197509766
    test 130 fhornerA: 1.21197509766
    test 131 fpolynomialB: 0.1513671875
    test 132 fhornerB: 0.1513671875
    test 133 sum: 0.0  FAILED, KNOWN, expected 2.0
    test 134 fsum: 2.0
    test 135 Fsum: 2.0
    test 136 sum: 0.0  FAILED, KNOWN, expected 4.0
    test 137 fsum: 4.0
    test 138 Fsum: 4.0
    test 139 sum: 0.0  FAILED, KNOWN, expected 8.0
    test 140 fsum: 8.0
    test 141 Fsum: 8.0
    test 142 sum: 0.0  FAILED, KNOWN, expected 16.0
    test 143 fsum: 16.0
    test 144 Fsum: 16.0
    test 145 sum: 0.0  FAILED, KNOWN, expected 32.0
    test 146 fsum: 32.0
    test 147 Fsum: 32.0
    test 148 sum: 0.0  FAILED, KNOWN, expected 64.0
    test 149 fsum: 64.0
    test 150 Fsum: 64.0
    test 151 sum: 0.0  FAILED, KNOWN, expected 128.0
    test 152 fsum: 128.0
    test 153 Fsum: 128.0
    test 154 sum: 0.0  FAILED, KNOWN, expected 256.0
    test 155 fsum: 256.0
    test 156 Fsum: 256.0
    test 157 sum: 0.0  FAILED, KNOWN, expected 512.0
    test 158 fsum: 512.0
    test 159 Fsum: 512.0
    test 160 sum: 0.0  FAILED, KNOWN, expected 1024.0
    test 161 fsum: 1024.0
    test 162 Fsum: 1024.0
    test 163 sum: 1.005
    test 164 fsum: 1.005
    test 165 Fsum: 1.005
    test 166 fsum: 1.0000000000000002e+16
    test 167 Fsum: 1.0000000000000002e+16
    test 168 sum: 8e-20  FAILED, KNOWN, expected -3.03316392623e-09
    test 169 fsum: -3.03316392623e-09
    test 170 Fsum: -3.03316392623e-09
    test 171 Fsum: -3.03316392623e-09
    test 172 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.23383543281e-05
    test 173 fsum: -1.23383543281e-05
    test 174 Fsum: -1.23383543281e-05
    test 175 Fsum: -1.23383543281e-05
    test 176 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.00746211090532
    test 177 fsum: 0.00746211090532
    test 178 Fsum: 0.00746211090532
    test 179 Fsum: 0.00746211090532
    test 180 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0238579630552
    test 181 fsum: -0.0238579630552
    test 182 Fsum: -0.0238579630552
    test 183 Fsum: -0.0238579630552
    test 184 sum: 14.0  FAILED, KNOWN, expected 0.959328672329
    test 185 fsum: 0.959328672329
    test 186 Fsum: 0.959328672329
    test 187 Fsum: 0.959328672329
    test 188 sum: 3.88533778445e+84  FAILED, KNOWN, expected 7.64626668156e-05
    test 189 fsum: 7.64626668156e-05
    test 190 Fsum: 7.64626668156e-05
    test 191 Fsum: 7.64626668156e-05
    test 192 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.96025460759e-06
    test 193 fsum: 1.96025460759e-06
    test 194 Fsum: 1.96025460759e-06
    test 195 Fsum: 1.96025460759e-06
    test 196 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.66335940122e-07
    test 197 fsum: 1.66335940122e-07
    test 198 Fsum: 1.66335940122e-07
    test 199 Fsum: 1.66335940122e-07
    test 200 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.40047635593
    test 201 fsum: -0.40047635593
    test 202 Fsum: -0.40047635593
    test 203 Fsum: -0.40047635593
    test 204 sum: 3.88533778445e+84  FAILED, KNOWN, expected -5.7483562654e-05
    test 205 fsum: -5.7483562654e-05
    test 206 Fsum: -5.7483562654e-05
    test 207 Fsum: -5.7483562654e-05
    test 208 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.00222510843485
    test 209 fsum: 0.00222510843485
    test 210 Fsum: 0.00222510843485
    test 211 Fsum: 0.00222510843485
    test 212 sum: 3.88533778445e+84  FAILED, KNOWN, expected 7.66708932331e-06
    test 213 fsum: 7.66708932331e-06
    test 214 Fsum: 7.66708932331e-06
    test 215 Fsum: 7.66708932331e-06
    test 216 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.97912757727e-07
    test 217 fsum: -1.97912757727e-07
    test 218 Fsum: -1.97912757727e-07
    test 219 Fsum: -1.97912757727e-07
    test 220 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.15466942663e-08
    test 221 fsum: 1.15466942663e-08
    test 222 Fsum: 1.15466942663e-08
    test 223 Fsum: 1.15466942663e-08
    test 224 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.59612345364e-11
    test 225 fsum: 1.59612345364e-11
    test 226 Fsum: 1.59612345364e-11
    test 227 Fsum: 1.59612345364e-11
    test 228 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.00356199967229
    test 229 fsum: 0.00356199967229
    test 230 Fsum: 0.00356199967229
    test 231 Fsum: 0.00356199967229
    test 232 sum: 8.04400187876  FAILED, KNOWN, expected 7.25575313289e-12
    test 233 fsum: 7.25575313289e-12
    test 234 Fsum: 7.25575313289e-12
    test 235 Fsum: 7.25575313289e-12
    test 236 sum: -3.88533778445e+84  FAILED, KNOWN, expected 7.73687093792e-11
    test 237 fsum: 7.73687093792e-11
    test 238 Fsum: 7.73687093792e-11
    test 239 Fsum: 7.73687093792e-11
    test 240 sum: -3.88533778445e+84  FAILED, KNOWN, expected -8.42273065718e-08
    test 241 fsum: -8.42273065718e-08
    test 242 Fsum: -8.42273065718e-08
    test 243 Fsum: -8.42273065718e-08
    test 244 sum: 3.88533778445e+84  FAILED, KNOWN, expected -3.08376781521e-08
    test 245 fsum: -3.08376781521e-08
    test 246 Fsum: -3.08376781521e-08
    test 247 Fsum: -3.08376781521e-08
    test 248 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.084439114915
    test 249 fsum: 0.084439114915
    test 250 Fsum: 0.084439114915
    test 251 Fsum: 0.084439114915
    test 252 sum: 5.84828938735  FAILED, KNOWN, expected -1.15170887237
    test 253 fsum: -1.15170887237
    test 254 Fsum: -1.15170887237
    test 255 Fsum: -1.15170887237
    test 256 sum: -3.88533778445e+84  FAILED, KNOWN, expected -9.02641348966e-10
    test 257 fsum: -9.02641348966e-10
    test 258 Fsum: -9.02641348966e-10
    test 259 Fsum: -9.02641348966e-10
    test 260 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.0004856114e-11
    test 261 fsum: -1.0004856114e-11
    test 262 Fsum: -1.0004856114e-11
    test 263 Fsum: -1.0004856114e-11
    test 264 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.02217593728
    test 265 fsum: -1.02217593728
    test 266 Fsum: -1.02217593728
    test 267 Fsum: -1.02217593728
    test 268 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.26088064298e-13
    test 269 fsum: 1.26088064298e-13
    test 270 Fsum: 1.26088064298e-13
    test 271 Fsum: 1.26088064298e-13
    test 272 sum: 3.88533778445e+84  FAILED, KNOWN, expected -9.33076911671e-14
    test 273 fsum: -9.33076911671e-14
    test 274 Fsum: -9.33076911671e-14
    test 275 Fsum: -9.33076911671e-14
    test 276 sum: 3.88533778445e+84  FAILED, KNOWN, expected 4.24022666951
    test 277 fsum: 4.24022666951
    test 278 Fsum: 4.24022666951
    test 279 Fsum: 4.24022666951
    test 280 sum: -78.7606416423  FAILED, KNOWN, expected 2.19675937078e-07
    test 281 fsum: 2.19675937078e-07
    test 282 Fsum: 2.19675937078e-07
    test 283 Fsum: 2.19675937078e-07
    test 284 sum: 8e-20  FAILED, KNOWN, expected -0.0101937274228
    test 285 fsum: -0.0101937274228
    test 286 Fsum: -0.0101937274228
    test 287 Fsum: -0.0101937274228
    test 288 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.99437593703e-05
    test 289 fsum: 2.99437593703e-05
    test 290 Fsum: 2.99437593703e-05
    test 291 Fsum: 2.99437593703e-05
    test 292 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.786682631341
    test 293 fsum: -0.786682631341
    test 294 Fsum: -0.786682631341
    test 295 Fsum: -0.786682631341
    test 296 sum: 7.00016128321  FAILED, KNOWN, expected 4.90017903484e-08
    test 297 fsum: 4.90017903484e-08
    test 298 Fsum: 4.90017903484e-08
    test 299 Fsum: 4.90017903484e-08
    test 300 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0340308656275
    test 301 fsum: -0.0340308656275
    test 302 Fsum: -0.0340308656275
    test 303 Fsum: -0.0340308656275
    test 304 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.0018951332016
    test 305 fsum: 0.0018951332016
    test 306 Fsum: 0.0018951332016
    test 307 Fsum: 0.0018951332016
    test 308 sum: -3.88533778445e+84  FAILED, KNOWN, expected -7.24956062453e-07
    test 309 fsum: -7.24956062453e-07
    test 310 Fsum: -7.24956062453e-07
    test 311 Fsum: -7.24956062453e-07
    test 312 sum: 3.88533778445e+84  FAILED, KNOWN, expected -4.17952459414
    test 313 fsum: -4.17952459414
    test 314 Fsum: -4.17952459414
    test 315 Fsum: -4.17952459414
    test 316 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.00349195691711
    test 317 fsum: -0.00349195691711
    test 318 Fsum: -0.00349195691711
    test 319 Fsum: -0.00349195691711
    test 320 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.236632854e-08
    test 321 fsum: -1.236632854e-08
    test 322 Fsum: -1.236632854e-08
    test 323 Fsum: -1.236632854e-08
    test 324 sum: 0.0761166194909  FAILED, KNOWN, expected 8.18035245112
    test 325 fsum: 8.18035245112
    test 326 Fsum: 8.18035245112
    test 327 Fsum: 8.18035245112
    test 328 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.38301817713e-06
    test 329 fsum: 2.38301817713e-06
    test 330 Fsum: 2.38301817713e-06
    test 331 Fsum: 2.38301817713e-06
    test 332 sum: -3.88533778445e+84  FAILED, KNOWN, expected 9.16481423198e-05
    test 333 fsum: 9.16481423198e-05
    test 334 Fsum: 9.16481423198e-05
    test 335 Fsum: 9.16481423198e-05
    test 336 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.76445060465e-07
    test 337 fsum: 1.76445060465e-07
    test 338 Fsum: 1.76445060465e-07
    test 339 Fsum: 1.76445060465e-07
    test 340 sum: 3.88533778445e+84  FAILED, KNOWN, expected 6.13921364991
    test 341 fsum: 6.13921364991
    test 342 Fsum: 6.13921364991
    test 343 Fsum: 6.13921364991
    test 344 sum: 3.88533778445e+84  FAILED, KNOWN, expected 3.44566465022e-07
    test 345 fsum: 3.44566465022e-07
    test 346 Fsum: 3.44566465022e-07
    test 347 Fsum: 3.44566465022e-07
    test 348 sum: -3.88533778445e+84  FAILED, KNOWN, expected -2.29497239289e-05
    test 349 fsum: -2.29497239289e-05
    test 350 Fsum: -2.29497239289e-05
    test 351 Fsum: -2.29497239289e-05
    test 352 sum: -7.0  FAILED, KNOWN, expected 3.974557698e-06
    test 353 fsum: 3.974557698e-06
    test 354 Fsum: 3.974557698e-06
    test 355 Fsum: 3.974557698e-06
    test 356 sum: -3.88533778445e+84  FAILED, KNOWN, expected 1.96342623324e-09
    test 357 fsum: 1.96342623324e-09
    test 358 Fsum: 1.96342623324e-09
    test 359 Fsum: 1.96342623324e-09
    test 360 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.33150330143e-09
    test 361 fsum: -1.33150330143e-09
    test 362 Fsum: -1.33150330143e-09
    test 363 Fsum: -1.33150330143e-09
    test 364 sum: 3.88533778445e+84  FAILED, KNOWN, expected -5.30749380191
    test 365 fsum: -5.30749380191
    test 366 Fsum: -5.30749380191
    test 367 Fsum: -5.30749380191
    test 368 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.000943813158349
    test 369 fsum: 0.000943813158349
    test 370 Fsum: 0.000943813158349
    test 371 Fsum: 0.000943813158349
    test 372 sum: -3.88533778445e+84  FAILED, KNOWN, expected 2.15034019801e-10
    test 373 fsum: 2.15034019801e-10
    test 374 Fsum: 2.15034019801e-10
    test 375 Fsum: 2.15034019801e-10
    test 376 sum: -0.051316093474  FAILED, KNOWN, expected -5.33146277933e-07
    test 377 fsum: -5.33146277933e-07
    test 378 Fsum: -5.33146277933e-07
    test 379 Fsum: -5.33146277933e-07
    test 380 sum: 3.88533778445e+84  FAILED, KNOWN, expected 3.69575817594e-14
    test 381 fsum: 3.69575817594e-14
    test 382 Fsum: 3.69575817594e-14
    test 383 Fsum: 3.69575817594e-14
    test 384 sum: -3.76140599786e-05  FAILED, KNOWN, expected 9.68664082844e-07
    test 385 fsum: 9.68664082844e-07
    test 386 Fsum: 9.68664082844e-07
    test 387 Fsum: 9.68664082844e-07
    test 388 sum: 7.0  FAILED, KNOWN, expected -0.000115911436473
    test 389 fsum: -0.000115911436473
    test 390 Fsum: -0.000115911436473
    test 391 Fsum: -0.000115911436473
    test 392 sum: 3.88533778445e+84  FAILED, KNOWN, expected 8.04188178526e-10
    test 393 fsum: 8.04188178526e-10
    test 394 Fsum: 8.04188178526e-10
    test 395 Fsum: 8.04188178526e-10
    test 396 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00122499040944
    test 397 fsum: -0.00122499040944
    test 398 Fsum: -0.00122499040944
    test 399 Fsum: -0.00122499040944
    test 400 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00457831586899
    test 401 fsum: -0.00457831586899
    test 402 Fsum: -0.00457831586899
    test 403 Fsum: -0.00457831586899
    test 404 sum: -0.688808907795  FAILED, KNOWN, expected -1.18837358779e-05
    test 405 fsum: -1.18837358779e-05
    test 406 Fsum: -1.18837358779e-05
    test 407 Fsum: -1.18837358779e-05
    test 408 sum: 0.0  FAILED, KNOWN, expected 3.35493675774e-05
    test 409 fsum: 3.35493675774e-05
    test 410 Fsum: 3.35493675774e-05
    test 411 Fsum: 3.35493675774e-05
    test 412 sum: 3.88533778445e+84  FAILED, KNOWN, expected -2.33167860436e-08
    test 413 fsum: -2.33167860436e-08
    test 414 Fsum: -2.33167860436e-08
    test 415 Fsum: -2.33167860436e-08
    test 416 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.95462082091e-05
    test 417 fsum: -1.95462082091e-05
    test 418 Fsum: -1.95462082091e-05
    test 419 Fsum: -1.95462082091e-05
    test 420 sum: -3.88533778445e+84  FAILED, KNOWN, expected 0.000892856254358
    test 421 fsum: 0.000892856254358
    test 422 Fsum: 0.000892856254358
    test 423 Fsum: 0.000892856254358
    test 424 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0618426221391
    test 425 fsum: -0.0618426221391
    test 426 Fsum: -0.0618426221391
    test 427 Fsum: -0.0618426221391
    test 428 sum: 0.239580948862  FAILED, KNOWN, expected 0.601940980694
    test 429 fsum: 0.601940980694
    test 430 Fsum: 0.601940980694
    test 431 Fsum: 0.601940980694
    test 432 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.134037189825
    test 433 fsum: 0.134037189825
    test 434 Fsum: 0.134037189825
    test 435 Fsum: 0.134037189825
    test 436 sum: -6.94512086002  FAILED, KNOWN, expected 1.10042636811e-13
    test 437 fsum: 1.10042636811e-13
    test 438 Fsum: 1.10042636811e-13
    test 439 Fsum: 1.10042636811e-13
    test 440 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0452439442444
    test 441 fsum: -0.0452439442444
    test 442 Fsum: -0.0452439442444
    test 443 Fsum: -0.0452439442444
    test 444 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.52622169991e-05
    test 445 fsum: 1.52622169991e-05
    test 446 Fsum: 1.52622169991e-05
    test 447 Fsum: 1.52622169991e-05
    test 448 sum: 7.0  FAILED, KNOWN, expected 0.000209193941364
    test 449 fsum: 0.000209193941364
    test 450 Fsum: 0.000209193941364
    test 451 Fsum: 0.000209193941364
    test 452 sum: 3.88533778445e+84  FAILED, KNOWN, expected 1.81576863212e-09
    test 453 fsum: 1.81576863212e-09
    test 454 Fsum: 1.81576863212e-09
    test 455 Fsum: 1.81576863212e-09
    test 456 sum: 3.88533778445e+84  FAILED, KNOWN, expected -4.21119873443e-05
    test 457 fsum: -4.21119873443e-05
    test 458 Fsum: -4.21119873443e-05
    test 459 Fsum: -4.21119873443e-05
    test 460 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.78938442904e-09
    test 461 fsum: -1.78938442904e-09
    test 462 Fsum: -1.78938442904e-09
    test 463 Fsum: -1.78938442904e-09
    test 464 sum: 3.88533778445e+84  FAILED, KNOWN, expected 0.00107312134523
    test 465 fsum: 0.00107312134523
    test 466 Fsum: 0.00107312134523
    test 467 Fsum: 0.00107312134523
    test 468 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.40205751205e-11
    test 469 fsum: -1.40205751205e-11
    test 470 Fsum: -1.40205751205e-11
    test 471 Fsum: -1.40205751205e-11
    test 472 sum: -6.99120071083  FAILED, KNOWN, expected -9.41328121989
    test 473 fsum: -9.41328121989
    test 474 Fsum: -9.41328121989
    test 475 Fsum: -9.41328121989
    test 476 sum: -3.88533778445e+84  FAILED, KNOWN, expected 4.96522209012
    test 477 fsum: 4.96522209012
    test 478 Fsum: 4.96522209012
    test 479 Fsum: 4.96522209012
    test 480 sum: -3.88533778445e+84  FAILED, KNOWN, expected 8.07515461195e-12
    test 481 fsum: 8.07515461195e-12
    test 482 Fsum: 8.07515461195e-12
    test 483 Fsum: 8.07515461195e-12
    test 484 sum: 0.00113709520301  FAILED, KNOWN, expected -19.6349272401
    test 485 fsum: -19.6349272401
    test 486 Fsum: -19.6349272401
    test 487 Fsum: -19.6349272401
    test 488 sum: 7.0  FAILED, KNOWN, expected -1.32559995451e-12
    test 489 fsum: -1.32559995451e-12
    test 490 Fsum: -1.32559995451e-12
    test 491 Fsum: -1.32559995451e-12
    test 492 sum: -3.88533778445e+84  FAILED, KNOWN, expected -3.85961773006e-05
    test 493 fsum: -3.85961773006e-05
    test 494 Fsum: -3.85961773006e-05
    test 495 Fsum: -3.85961773006e-05
    test 496 sum: -3.88533778445e+84  FAILED, KNOWN, expected -3.39296985162e-07
    test 497 fsum: -3.39296985162e-07
    test 498 Fsum: -3.39296985162e-07
    test 499 Fsum: -3.39296985162e-07
    test 500 sum: 3.88533778445e+84  FAILED, KNOWN, expected -1.76742086007e-09
    test 501 fsum: -1.76742086007e-09
    test 502 Fsum: -1.76742086007e-09
    test 503 Fsum: -1.76742086007e-09
    test 504 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00811082306795
    test 505 fsum: -0.00811082306795
    test 506 Fsum: -0.00811082306795
    test 507 Fsum: -0.00811082306795
    test 508 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.0411288886102
    test 509 fsum: -0.0411288886102
    test 510 Fsum: -0.0411288886102
    test 511 Fsum: -0.0411288886102
    test 512 sum: 3.88533778445e+84  FAILED, KNOWN, expected 4.37160749188
    test 513 fsum: 4.37160749188
    test 514 Fsum: 4.37160749188
    test 515 Fsum: 4.37160749188
    test 516 sum: -14.0  FAILED, KNOWN, expected -3.91256509195e-16
    test 517 fsum: -3.91256509195e-16
    test 518 Fsum: -3.91256509195e-16
    test 519 Fsum: -3.91256509195e-16
    test 520 sum: -3.88533778445e+84  FAILED, KNOWN, expected -0.000785345604022
    test 521 fsum: -0.000785345604022
    test 522 Fsum: -0.000785345604022
    test 523 Fsum: -0.000785345604022
    test 524 sum: 14.0153560966  FAILED, KNOWN, expected 5.7517454176e-17
    test 525 fsum: 5.7517454176e-17
    test 526 Fsum: 5.7517454176e-17
    test 527 Fsum: 5.7517454176e-17
    test 528 sum: 3.88533778445e+84  FAILED, KNOWN, expected -9.50262825677e-10
    test 529 fsum: -9.50262825677e-10
    test 530 Fsum: -9.50262825677e-10
    test 531 Fsum: -9.50262825677e-10
    test 532 sum: -3.46920446935e-06  FAILED, KNOWN, expected -0.0462119264576
    test 533 fsum: -0.0462119264576
    test 534 Fsum: -0.0462119264576
    test 535 Fsum: -0.0462119264576
    test 536 sum: -6.9912164808  FAILED, KNOWN, expected 3.73983709921e-06
    test 537 fsum: 3.73983709921e-06
    test 538 Fsum: 3.73983709921e-06
    test 539 Fsum: 3.73983709921e-06
    test 540 sum: 3.88533778445e+84  FAILED, KNOWN, expected 6.78600342265e-05
    test 541 fsum: 6.78600342265e-05
    test 542 Fsum: 6.78600342265e-05
    test 543 Fsum: 6.78600342265e-05
    test 544 sum: 3.88533778445e+84  FAILED, KNOWN, expected -241.034488329
    test 545 fsum: -241.034488329
    test 546 Fsum: -241.034488329
    test 547 Fsum: -241.034488329
    test 548 sum: 3.88533778445e+84  FAILED, KNOWN, expected -0.00300019916683
    test 549 fsum: -0.00300019916683
    test 550 Fsum: -0.00300019916683
    test 551 Fsum: -0.00300019916683
    test 552 sum: -3.88533778445e+84  FAILED, KNOWN, expected -1.74800592515e-05
    test 553 fsum: -1.74800592515e-05
    test 554 Fsum: -1.74800592515e-05
    test 555 Fsum: -1.74800592515e-05
    test 556 sum: 13.9968635059  FAILED, KNOWN, expected -0.0164316051424
    test 557 fsum: -0.0164316051424
    test 558 Fsum: -0.0164316051424
    test 559 Fsum: -0.0164316051424
    test 560 sum: -3.88533778445e+84  FAILED, KNOWN, expected 3.70395709453e-07
    test 561 fsum: 3.70395709453e-07
    test 562 Fsum: 3.70395709453e-07
    test 563 Fsum: 3.70395709453e-07
    test 564 sum: 0.0837813402394  FAILED, KNOWN, expected 1.42358446188e-13
    test 565 fsum: 1.42358446188e-13
    test 566 Fsum: 1.42358446188e-13
    test 567 Fsum: 1.42358446188e-13
    test 568 fmul: 0.00000000
    test 569 fpowers: 10
    test 570 fpowers: 2
    test 571 fpowers: 1024
    test 572 fpowers: 4
    test 573 fpowers: 16
    test 574 fpowers: 1024
    test 575 fpowers: 4
    test 576 fpowers: 8
    test 577 fpowers: 512
    test 578 Airy1830: 6366914.6089252215
    test 579 Airy1830: 6366914.6089252215
    test 580 Airy1830: 6366914.6089252215
    test 581 Airy1830: 6366914.6089252215
    test 582 Sphere: 6371008.7714149999
    test 583 Sphere: 6371008.7714149999
    test 584 Sphere: 6371008.7714149999
    test 585 Sphere: 6371008.7714149999
    test 586 WGS84: 6367449.1458234144
    test 587 WGS84: 6367449.1458234144
    test 588 WGS84: 6367449.1458234144
    test 589 WGS84: 6367449.1458234144
    test 590 FSum+: 4.0
    test 591 FSum-: 2.0
    test 592 FSum-: 0.0
    test 593 FSum*: 4.0
    test 594 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 595 ._fsum2_: 4.0
    test 596 ._n: 4
    test 597 ._ps: [4.0]
    test 598 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 599 ._fsum2_: 4.0
    test 600 ._n: 4
    test 601 ._ps: [4.0]
    test 602 FSum+: 8.0
    test 603 FSum-: 4.0
    test 604 FSum-: 0.0
    test 605 FSum*: 8.0
    test 606 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 607 ._fsum2_: 8.0
    test 608 ._n: 8
    test 609 ._ps: [8.0]
    test 610 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 611 ._fsum2_: 8.0
    test 612 ._n: 8
    test 613 ._ps: [8.0]
    test 614 FSum+: 16.0
    test 615 FSum-: 8.0
    test 616 FSum-: 0.0
    test 617 FSum*: 16.0
    test 618 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 619 ._fsum2_: 16.0
    test 620 ._n: 16
    test 621 ._ps: [16.0]
    test 622 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 623 ._fsum2_: 16.0
    test 624 ._n: 16
    test 625 ._ps: [16.0]
    test 626 FSum+: 32.0
    test 627 FSum-: 16.0
    test 628 FSum-: 0.0
    test 629 FSum*: 32.0
    test 630 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 631 ._fsum2_: 32.0
    test 632 ._n: 32
    test 633 ._ps: [32.0]
    test 634 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 635 ._fsum2_: 32.0
    test 636 ._n: 32
    test 637 ._ps: [32.0]
    test 638 FSum+: 64.0
    test 639 FSum-: 32.0
    test 640 FSum-: 0.0
    test 641 FSum*: 64.0
    test 642 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 643 ._fsum2_: 64.0
    test 644 ._n: 64
    test 645 ._ps: [64.0]
    test 646 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 647 ._fsum2_: 64.0
    test 648 ._n: 64
    test 649 ._ps: [64.0]
    test 650 FSum+: 128.0
    test 651 FSum-: 64.0
    test 652 FSum-: 0.0
    test 653 FSum*: 128.0
    test 654 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 655 ._fsum2_: 128.0
    test 656 ._n: 128
    test 657 ._ps: [128.0]
    test 658 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 659 ._fsum2_: 128.0
    test 660 ._n: 128
    test 661 ._ps: [128.0]
    test 662 FSum+: 256.0
    test 663 FSum-: 128.0
    test 664 FSum-: 0.0
    test 665 FSum*: 256.0
    test 666 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 667 ._fsum2_: 256.0
    test 668 ._n: 256
    test 669 ._ps: [256.0]
    test 670 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 671 ._fsum2_: 256.0
    test 672 ._n: 256
    test 673 ._ps: [256.0]
    test 674 FSum+: 512.0
    test 675 FSum-: 256.0
    test 676 FSum-: 0.0
    test 677 FSum*: 512.0
    test 678 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 679 ._fsum2_: 512.0
    test 680 ._n: 512
    test 681 ._ps: [512.0]
    test 682 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 683 ._fsum2_: 512.0
    test 684 ._n: 512
    test 685 ._ps: [512.0]
    test 686 FSum+: 1024.0
    test 687 FSum-: 512.0
    test 688 FSum-: 0.0
    test 689 FSum*: 1024.0
    test 690 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 691 ._fsum2_: 1024.0
    test 692 ._n: 1024
    test 693 ._ps: [1024.0]
    test 694 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 695 ._fsum2_: 1024.0
    test 696 ._n: 1024
    test 697 ._ps: [1024.0]
    test 698 FSum+: 2048.0
    test 699 FSum-: 1024.0
    test 700 FSum-: 0.0
    test 701 FSum*: 2048.0
    test 702 copy(Fsum): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 703 ._fsum2_: 2048.0
    test 704 ._n: 2048
    test 705 ._ps: [2048.0]
    test 706 Fsum.copy(): (<class 'pygeodesy.fmath.Fsum'>, True)
    test 707 ._fsum2_: 2048.0
    test 708 ._n: 2048
    test 709 ._ps: [2048.0]
    test 710 FSum0: 0.0
    test 711 FSum0: 0.0
    test 712 FSum0: 0.0
    test 713 FSum0: 0.0
    test 714 FSum0: 0.0
    test 715 Fsum#: 2049
    test 716 Fsum#: 1
    test 717 FSum.: fmath.Fsum()
    test 718 _2sum: OverflowError('_2sum(1.0e+308, inf): inf',)
    test 719 hypot: True
    test 720 hypot_ : 1.00001250
    test 721 euclid_: 1.00207107  FAILED, KNOWN, expected 1.00001250
    test 722 hypot2_: 1.00002500
    test 723 norm_  : 1.00000000
    test 724 hypot_ : 3606.937759
    test 725 euclid_: 3845.584412  FAILED, KNOWN, expected 3859.423403
    test 726 hypot2_: 13010000.0
    test 727 norm_  : 1.0
    test 728 hypot_ : 40112.842
    test 729 hypot2_: 1609040100.0
    test 730 euclid_: 41277.666  FAILED, KNOWN, expected 41316.227
    test 731 cbrt: 3.00
    test 732 cbrt: -3.00
    test 733 cbrt2: 9.00
    test 734 cbrt2: 9.00
    test 735 sqrt3: 27.00
    test 736 ints: 1
    test 737 ints: 1
    test 738 fsum : -3.589050987401e+19  FAILED, KNOWN, expected 1.0
    test 739 fsum_: -3.589050987401e+19  FAILED, KNOWN, expected 1.0
    test 740 Fsum : -3.589050987401e+19  FAILED, KNOWN, expected 1.0
    test 741 sum  : -3.689348814742e+19  FAILED, KNOWN, expected 1.0
    test 742 fatan : 0.0000000
    test 743 facos1: 0.0000631
    test 744 fasin1: 0.0000631
    test 745 fatan2: 0.0015047

    117 of 745 testFmath.py tests (15.7%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 471.571 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testFormy.py

    testing testFormy.py 21.01.23
    test 1 antipode1: (-89.0, -1.0)
    test 2 antipode2: (89.0, 1.0)
    test 3 bearing1: 251.364
    test 4 bearing2: 251.364
    test 5 bearing3: 249.614
    test 6 excessAbc: 11.9698
    test 7 excessAbc: 11.9698
    test 8 excessGirard: 11.9698
    test 9 excessLHuilier: 11.9698
    test 10 excessKarney: 56.9625
    test 11 excessQuad: 56.9625
    test 12 excessKarney: 44.0235
    test 13 excessQuad: 44.0235
    test 14 excessKarney: -44.0235
    test 15 excessQuad: -44.0235
    test 16 isantipode1: True
    test 17 isantipode2: True
    test 18 isantipode3: False
    test 19 isantipode4: True
    test 20 isantipode5: True
    test 21 isantipode6: False
    test 22 heightOf0: 2638958.23912
    test 23 heightOf45: 5401080.43931
    test 24 heightOf90: 6371008.77141
    test 25 heightOf135: 5401080.43931
    test 26 horizon0: 0.0
    test 27 horizon10Km: 357099.672
    test 28 horizon30Kft: 392310.704
    test 29 horizon10Kft: 214877.422
    test 30 haversine1 (0.00%): 298009.404
    test 31 vincentys1 (0.00%): 298009.404
    test 32 cosineAndoyerLambert1 (0.13%): 298395.796  FAILED, KNOWN, expected 298009.404
    test 33 cosineForsytheAndoyerLambert1 (0.13%): 298396.056  FAILED, KNOWN, expected 298009.404
    test 34 cosineLaw1 (0.00%): 298009.404
    test 35 equirectangular1 (0.01%): 298039.206  FAILED, KNOWN, expected 298009.404
    test 36 euclidean1 (5.26%): 313698.901  FAILED, KNOWN, expected 298009.404
    test 37 flatLocal1 (0.14%): 298425.999  FAILED, KNOWN, expected 298009.404
    test 38 flatPolar1 (8.67%): 323841.582  FAILED, KNOWN, expected 298009.404
    test 39 thomas1 (0.13%): 298396.261  FAILED, KNOWN, expected 298009.404
    test 40 hubeny: <function flatLocal at 0x10382f1b8>
    test 41 haversine2 (0.00%): 98164.988
    test 42 vincentys2 (0.00%): 98164.988
    test 43 cosineAndoyerLambert2 (0.10%): 98071.421  FAILED, KNOWN, expected 98164.988
    test 44 cosineForsytheAndoyerLambert2 (0.10%): 98071.560  FAILED, KNOWN, expected 98164.988
    test 45 cosineLaw2 (0.00%): 98164.988
    test 46 equirectangular2 (0.00%): 98165.123  FAILED, KNOWN, expected 98164.988
    test 47 euclidean2 (6.37%): 104419.458  FAILED, KNOWN, expected 98164.988
    test 48 flatLocal2 (0.10%): 98071.693  FAILED, KNOWN, expected 98164.988
    test 49 flatPolar2 (0.57%): 98725.040  FAILED, KNOWN, expected 98164.988
    test 50 thomas2 (0.10%): 98071.535  FAILED, KNOWN, expected 98164.988
    test 51 hubeny: <function flatLocal at 0x10382f1b8>
    test 52 haversine3 (0.00%): 651816.987
    test 53 vincentys3 (0.00%): 651816.987
    test 54 cosineAndoyerLambert3 (0.25%): 653456.144  FAILED, KNOWN, expected 651816.987
    test 55 cosineForsytheAndoyerLambert3 (0.25%): 653456.175  FAILED, KNOWN, expected 651816.987
    test 56 cosineLaw3 (0.00%): 651816.987
    test 57 equirectangular3 (0.03%): 652041.760  FAILED, KNOWN, expected 651816.987
    test 58 euclidean3 (4.37%): 680281.470  FAILED, KNOWN, expected 651816.987
    test 59 flatLocal3 (0.29%): 653681.559  FAILED, KNOWN, expected 651816.987
    test 60 flatPolar3 (13.00%): 736534.840  FAILED, KNOWN, expected 651816.987
    test 61 thomas3 (0.25%): 653456.933  FAILED, KNOWN, expected 651816.987
    test 62 hubeny: <function flatLocal at 0x10382f1b8>
    test 63 haversine4 (0.00%): 4084985.780
    test 64 vincentys4 (0.00%): 4084985.780
    test 65 cosineAndoyerLambert4 (0.24%): 4094954.008  FAILED, KNOWN, expected 4084985.780
    test 66 cosineForsytheAndoyerLambert4 (0.24%): 4094953.639  FAILED, KNOWN, expected 4084985.780
    test 67 cosineLaw4 (0.00%): 4084985.780
    test 68 equirectangular4 (1.26%): 4136407.022  FAILED, KNOWN, expected 4084985.780
    test 69 euclidean4 (4.22%): 4257296.511  FAILED, KNOWN, expected 4084985.780
    test 70 flatLocal4 (1.51%): 4146513.247  FAILED, KNOWN, expected 4084985.780
    test 71 flatPolar4 (12.31%): 4587896.452  FAILED, KNOWN, expected 4084985.780
    test 72 thomas4 (0.24%): 4094958.301  FAILED, KNOWN, expected 4084985.780
    test 73 hubeny: <function flatLocal at 0x10382f1b8>
    test 74 haversine5 (0.00%): 9670051.606
    test 75 vincentys5 (0.00%): 9670051.606
    test 76 cosineAndoyerLambert5 (0.21%): 9690752.610  FAILED, KNOWN, expected 9670051.606
    test 77 cosineForsytheAndoyerLambert5 (0.21%): 9690746.120  FAILED, KNOWN, expected 9670051.606
    test 78 cosineLaw5 (0.00%): 9670051.606
    test 79 equirectangular5 (7.79%): 10423307.214  FAILED, KNOWN, expected 9670051.606
    test 80 euclidean5 (9.34%): 10573030.726  FAILED, KNOWN, expected 9670051.606
    test 81 flatLocal5 (8.03%): 10446503.342  FAILED, KNOWN, expected 9670051.606
    test 82 flatPolar5 (55.59%): 15045906.074  FAILED, KNOWN, expected 9670051.606
    test 83 thomas5 (0.21%): 9690767.767  FAILED, KNOWN, expected 9670051.606
    test 84 hubeny: <function flatLocal at 0x10382f1b8>
    test 85 haversine6 (0.00%): 10496496.577
    test 86 vincentys6 (0.00%): 10496496.577
    test 87 cosineAndoyerLambert6 (0.18%): 10477328.664  FAILED, KNOWN, expected 10496496.577
    test 88 cosineForsytheAndoyerLambert6 (0.18%): 10477342.084  FAILED, KNOWN, expected 10496496.577
    test 89 cosineLaw6 (0.00%): 10496496.577
    test 90 equirectangular6 (3.32%): 10844969.236  FAILED, KNOWN, expected 10496496.577
    test 91 euclidean6 (4.50%): 10968488.107  FAILED, KNOWN, expected 10496496.577
    test 92 flatLocal6 (3.07%): 10818798.605  FAILED, KNOWN, expected 10496496.577
    test 93 flatPolar6 (23.87%): 13002288.857  FAILED, KNOWN, expected 10496496.577
    test 94 thomas6 (0.18%): 10477316.498  FAILED, KNOWN, expected 10496496.577
    test 95 hubeny: <function flatLocal at 0x10382f1b8>
    test 96 haversine7 (0.00%): 8998396.669
    test 97 vincentys7 (0.00%): 8998396.669
    test 98 cosineAndoyerLambert7 (0.27%): 8974227.489  FAILED, KNOWN, expected 8998396.669
    test 99 cosineForsytheAndoyerLambert7 (0.27%): 8974238.592  FAILED, KNOWN, expected 8998396.669
    test 100 cosineLaw7 (0.00%): 8998396.669
    test 101 equirectangular7 (2.05%): 9182626.289  FAILED, KNOWN, expected 8998396.669
    test 102 euclidean7 (7.76%): 9696965.812  FAILED, KNOWN, expected 8998396.669
    test 103 flatLocal7 (1.71%): 9151831.117  FAILED, KNOWN, expected 8998396.669
    test 104 flatPolar7 (17.56%): 10578638.162  FAILED, KNOWN, expected 8998396.669
    test 105 thomas7 (0.27%): 8974216.867  FAILED, KNOWN, expected 8998396.669
    test 106 hubeny: <function flatLocal at 0x10382f1b8>
    test 107 haversine8 (0.00%): 6906867.946
    test 108 vincentys8 (0.00%): 6906867.946
    test 109 cosineAndoyerLambert8 (0.13%): 6916085.969  FAILED, KNOWN, expected 6906867.946
    test 110 cosineForsytheAndoyerLambert8 (0.13%): 6916085.333  FAILED, KNOWN, expected 6906867.946
    test 111 cosineLaw8 (0.00%): 6906867.946
    test 112 equirectangular8 (0.91%): 6969581.760  FAILED, KNOWN, expected 6906867.946
    test 113 euclidean8 (6.54%): 7358706.022  FAILED, KNOWN, expected 6906867.946
    test 114 flatLocal8 (1.04%): 6978905.097  FAILED, KNOWN, expected 6906867.946
    test 115 flatPolar8 (23.23%): 8511564.321  FAILED, KNOWN, expected 6906867.946
    test 116 thomas8 (0.13%): 6916087.828  FAILED, KNOWN, expected 6906867.946
    test 117 hubeny: <function flatLocal at 0x10382f1b8>
    test 118 haversine9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 119 vincentys9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 120 cosineAndoyerLambert9 (0.07%): 8050357.566  FAILED, KNOWN, expected 8044806.076
    test 121 cosineForsytheAndoyerLambert9 (0.07%): 8050363.635  FAILED, KNOWN, expected 8044806.076
    test 122 cosineLaw9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 123 flatLocal9 (15.21%): 9268128.573  FAILED, KNOWN, expected 8044806.076
    test 124 thomas9 (0.07%): 8050370.796  FAILED, KNOWN, expected 8044806.076
    test 125 hubeny: <function flatLocal at 0x10382f1b8>

    test 126 intersections2: pygeodesy.formy
    test 127 intersection2 (None) 1: (1.0003, 1.0003), (-1.0003, -1.0003)
    test 128 intersection2 (None) 2: (2.0024, 2.0024), (-2.0024, -2.0024)
    test 129 intersection2 (None) 5: (5.0381, 5.0381), (-5.0381, -5.0381)
    test 130 intersection2 (None) 10: (10.3062, 10.3062), (-10.3062, -10.3062)
    test 131 intersection2 (None) 20: (-22.494, -22.494), (22.494, 22.494)
    test 132 intersection2 (None) 30: (-38.7298, -38.7298), (38.7298, 38.7298)
    test 133 intersection2 (None) 40: (-62.0732, -62.0732), (62.0732, 62.0732)
    test 134 intersection2 (R_M) 1: (-1.0, -1.0003), (1.0, 1.0003)
    test 135 intersection2 (R_M) 2: (-2.0, -2.0024), (2.0, 2.0024)
    test 136 intersection2 (R_M) 5: (-4.9999, -5.0383), (4.9999, 5.0383)
    test 137 intersection2 (R_M) 10: (-9.9976, -10.3117), (9.9976, 10.3117)
    test 138 intersection2 (R_M) 20: (-19.914, -22.6761), (19.914, 22.6761)
    test 139 intersection2 (R_M) 30: (-29.2059, -40.203), (29.2059, 40.203)
    test 140 intersection2 (R_M) 40: (-35.5129, -68.6826), (35.5129, 68.6826)
    test 141 intersection2 (WGS84) 1: (-1.0112, -0.998), (1.0112, 0.998)
    test 142 intersection2 (WGS84) 2: (-2.0224, -1.9979), (2.0224, 1.9979)
    test 143 intersection2 (WGS84) 5: (-5.0558, -5.0271), (5.0558, 5.0271)
    test 144 intersection2 (WGS84) 10: (-10.1081, -10.2901), (10.1081, 10.2901)
    test 145 intersection2 (WGS84) 20: (-20.1241, -22.6411), (20.1241, 22.6411)
    test 146 intersection2 (WGS84) 30: (-29.4898, -40.1785), (29.4898, 40.1785)
    test 147 intersection2 (WGS84) 40: (-35.8146, -68.7149), (35.8146, 68.7149)

    test 148 radical2: (0.26, 2.6)
    test 149 radical2: (0.74, 7.4)
    test 150 radical2: (0.5, 5.0)
    test 151 radical2: (0.5, 0.0)
    test 152 IntersectionError: distance (10.0), radius1 (5.0) or radius2 (4.0): too distant  FAILED, KNOWN, expected distance (10.0), ...

    test 153 LimitError: delta exceeds limit: equirectangular_(0.0, 0.0, 60.0, 120.0, limit=45)  FAILED, KNOWN, expected delta exceeds ...

    65 of 153 testFormy.py tests (42.5%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 2.933 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testFrechet.py

    testing testFrechet.py 21.05.17
    test 1 FrechetDegrees_ (degrees): (288.0, 1, 1, 147, 5400)
    test 2 FrechetDegrees_ (degrees): (288.0, 1, 1, 205, 10710)
    test 3 copy(FrechetDegrees_): (<class '__main__.FrechetDegrees_'>, True)
    test 4 FrechetDegrees_.copy(): (<class '__main__.FrechetDegrees_'>, True)
    test 5 FrechetRadians_ (radians): (5.02655, 1, 1, 147, 5400)
    test 6 FrechetRadians_ (radians): (5.02655, 1, 1, 205, 10710)
    test 7 copy(FrechetRadians_): (<class '__main__.FrechetRadians_'>, True)
    test 8 FrechetRadians_.copy(): (<class '__main__.FrechetRadians_'>, True)
    test 9 FrechetCosineAndoyerLambert (radians): (1.81201, 18, 14, 117, 5400)
    test 10 FrechetCosineAndoyerLambert (radians): (1.83135, 3, 4.5, 196, 10710)
    test 11 copy(FrechetCosineAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 12 FrechetCosineAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 13 FrechetCosineForsytheAndoyerLambert (radians): (1.81201, 18, 14, 117, 5400)
    test 14 FrechetCosineForsytheAndoyerLambert (radians): (1.83135, 3, 4.5, 196, 10710)
    test 15 copy(FrechetCosineForsytheAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 16 FrechetCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 17 FrechetCosineLaw (radians): (1.81341, 18, 14, 117, 5400)
    test 18 FrechetCosineLaw (radians): (1.83289, 3, 4.5, 196, 10710)
    test 19 copy(FrechetCosineLaw): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 20 FrechetCosineLaw.copy(): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 21 FrechetEquirectangular (radians2): (7.53702, 1, 3, 145, 5400)
    test 22 FrechetEquirectangular (radians2): (12.58507, 0, 2.5, 203, 10710)
    test 23 copy(FrechetEquirectangular): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 24 FrechetEquirectangular.copy(): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 25 FrechetEuclidean (radians): (2.80593, 1, 3, 145, 5400)
    test 26 FrechetEuclidean (radians): (3.83981, 0, 2.5, 203, 10710)
    test 27 copy(FrechetEuclidean): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 28 FrechetEuclidean.copy(): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 29 FrechetFlatLocal (radians2): (7.55994, 1, 3, 145, 5400)
    test 30 FrechetFlatLocal (radians2): (12.61423, 0, 2.5, 203, 10710)
    test 31 copy(FrechetFlatLocal): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 32 FrechetFlatLocal.copy(): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 33 FrechetFlatPolar (radians): (2.88199, 89, 59, 1, 5400)
    test 34 FrechetFlatPolar (radians): (2.88199, 89, 59, 1, 10710)
    test 35 copy(FrechetFlatPolar): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 36 FrechetFlatPolar.copy(): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 37 FrechetHaversine (radians): (1.81341, 18, 14, 117, 5400)
    test 38 FrechetHaversine (radians): (1.83289, 3, 4.5, 196, 10710)
    test 39 copy(FrechetHaversine): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 40 FrechetHaversine.copy(): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 41 FrechetHubeny (radians2): (7.55994, 1, 3, 145, 5400)
    test 42 FrechetHubeny (radians2): (12.61423, 0, 2.5, 203, 10710)
    test 43 copy(FrechetHubeny): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 44 FrechetHubeny.copy(): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 45 FrechetThomas (radians): (1.81201, 18, 14, 117, 5400)
    test 46 FrechetThomas (radians): (1.83135, 3, 4.5, 196, 10710)
    test 47 copy(FrechetThomas): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 48 FrechetThomas.copy(): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 49 FrechetVincentys (radians): (1.81341, 18, 14, 117, 5400)
    test 50 FrechetVincentys (radians): (1.83289, 3, 4.5, 196, 10710)
    test 51 copy(FrechetVincentys): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 52 FrechetVincentys.copy(): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 53 frechet_: (288.0, 1, 1, 147, 5400, 'test')
    test 54 [fi1]: 38.0°S, 116.0°W
    test 55 [fi2]: 64.0°N, 121.0°E
    test 56 [fi1]: LatLon_(38.0°S, 116.0°W)
    test 57 [fi2]: LatLon_(64.0°N, 121.0°E)

    all 57 testFrechet.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 8.222 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testGars.py

    testing testGars.py 20.01.22 (module pygeodesy.gars 21.05.26)
    test 1 Garef: 381NH45
    test 2 Garef: 381NH45
    test 3 Garef: Garef('381NH45')
    test 4 Garef: '381NH45'
    test 5 Garef: '381NH45'
    test 6 Garef.precision: 2
    test 7 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 8 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 9 Garef.latlon: 57.64911, 10.40744
    test 10 Garef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 11 codec3: 381NH45
    test 12 decode3: 57.625, 10.375, 2.0
    test 13 encode: 381NH45
    test 14 Garef(LatLon): 381NH45
    test 15 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 16 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 17 precision: -1  FAILED, KNOWN, expected 0
    test 18 resolution: 30′
    test 19 precision: 0
    test 20 resolution: 30′
    test 21 precision: 1
    test 22 resolution: 15′
    test 23 precision: 2
    test 24 resolution: 5′
    test 25 precision: 3  FAILED, KNOWN, expected 2
    test 26 resolution: 5′

    2 of 26 testGars.py tests (7.7%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.805 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testGeodesicx.py

    testing testGeodesicx.py 21.05.25 (module pygeodesy.geodesicx 21.07.15)

    testDirectX vs ...(pygeodesy.geodesicx, 21.07.15)
    test 1 C++.a12: 49.4755274632514  FAILED, KNOWN, expected 49.4755274632515
    test 2 C++.azi1: 51
    test 3 C++.azi2: 107.189397162606
    test 4 C++.lat1: 40.6
    test 5 C++.lat2: 51.8845645056068
    test 6 C++.lon1: -73.8
    test 7 C++.lon2: -1.14117286120087  FAILED, KNOWN, expected -1.14117286120083
    test 8 C++.M12: 0.650910566998087  FAILED, KNOWN, expected 0.650910566998086
    test 9 C++.m12: 4844148.70310148  FAILED, KNOWN, expected 4844148.70310149
    test 10 C++.M21: 0.651228658921966
    test 11 C++.s12: 5500000
    test 12 C++.S12: 39735075134877.1

    test 13 GeodSolve.a12: 49.4755274632514  FAILED, KNOWN, expected 49.4755274632515
    test 14 GeodSolve.azi1: 51
    test 15 GeodSolve.azi2: 107.189397162606
    test 16 GeodSolve.lat1: 40.6
    test 17 GeodSolve.lat2: 51.8845645056068
    test 18 GeodSolve.lon1: -73.8
    test 19 GeodSolve.lon2: -1.14117286120087  FAILED, KNOWN, expected -1.14117286120083
    test 20 GeodSolve.M12: 0.650910566998087  FAILED, KNOWN, expected 0.650910566998086
    test 21 GeodSolve.m12: 4844148.70310148  FAILED, KNOWN, expected 4844148.70310149
    test 22 GeodSolve.M21: 0.651228658921966
    test 23 GeodSolve.s12: 5500000
    test 24 GeodSolve.S12: 39735075134877.1

    test 25 f(-0.7)proLate.a12: 41.2845109932529  FAILED, KNOWN, expected 41.284510993253
    test 26 f(-0.7)proLate.azi1: 51
    test 27 f(-0.7)proLate.azi2: 122.151604420253
    test 28 f(-0.7)proLate.lat1: 40.6
    test 29 f(-0.7)proLate.lat2: 44.0611144929705  FAILED, KNOWN, expected 44.0611144929704
    test 30 f(-0.7)proLate.lon1: -73.8
    test 31 f(-0.7)proLate.lon2: 22.642936371381
    test 32 f(-0.7)proLate.M12: 0.529204136691901  FAILED, KNOWN, expected 0.5292041366919
    test 33 f(-0.7)proLate.m12: 4556060.22546814
    test 34 f(-0.7)proLate.M21: 0.508852016715468  FAILED, KNOWN, expected 0.508852016715467
    test 35 f(-0.7)proLate.s12: 5500000
    test 36 f(-0.7)proLate.S12: 92958550148866.3  FAILED, KNOWN, expected 92958550148866.4

    test 37 f(-0.6)proLate.a12: 41.9855065431432  FAILED, KNOWN, expected 41.9855065431433
    test 38 f(-0.6)proLate.azi1: 51
    test 39 f(-0.6)proLate.azi2: 120.049569615163
    test 40 f(-0.6)proLate.lat1: 40.6
    test 41 f(-0.6)proLate.lat2: 45.0761455124556
    test 42 f(-0.6)proLate.lon1: -73.8
    test 43 f(-0.6)proLate.lon2: 19.3243907915445  FAILED, KNOWN, expected 19.3243907915446
    test 44 f(-0.6)proLate.M12: 0.553483535239666  FAILED, KNOWN, expected 0.553483535239664
    test 45 f(-0.6)proLate.m12: 4607523.91009242  FAILED, KNOWN, expected 4607523.91009243
    test 46 f(-0.6)proLate.M21: 0.53115975562754  FAILED, KNOWN, expected 0.531159755627539
    test 47 f(-0.6)proLate.s12: 5500000
    test 48 f(-0.6)proLate.S12: 84342570067148.4  FAILED, KNOWN, expected 84342570067148.5

    test 49 f(-0.5)proLate.a12: 42.7835406714305
    test 50 f(-0.5)proLate.azi1: 51
    test 51 f(-0.5)proLate.azi2: 117.89451986943
    test 52 f(-0.5)proLate.lat1: 40.6
    test 53 f(-0.5)proLate.lat2: 46.1086918613931
    test 54 f(-0.5)proLate.lon1: -73.8
    test 55 f(-0.5)proLate.lon2: 15.9398177760258  FAILED, KNOWN, expected 15.9398177760259
    test 56 f(-0.5)proLate.M12: 0.575884086565633  FAILED, KNOWN, expected 0.575884086565632
    test 57 f(-0.5)proLate.m12: 4656181.1495523
    test 58 f(-0.5)proLate.M21: 0.553184499769342
    test 59 f(-0.5)proLate.s12: 5500000
    test 60 f(-0.5)proLate.S12: 76020929892733.4

    test 61 f(-0.4)proLate.a12: 43.7036853028434
    test 62 f(-0.4)proLate.azi1: 51
    test 63 f(-0.4)proLate.azi2: 115.706685237732
    test 64 f(-0.4)proLate.lat1: 40.6
    test 65 f(-0.4)proLate.lat2: 47.1623837243428
    test 66 f(-0.4)proLate.lon1: -73.8
    test 67 f(-0.4)proLate.lon2: 12.5108734214614  FAILED, KNOWN, expected 12.5108734214613
    test 68 f(-0.4)proLate.M12: 0.596186986538198  FAILED, KNOWN, expected 0.596186986538199
    test 69 f(-0.4)proLate.m12: 4701617.48531727
    test 70 f(-0.4)proLate.M21: 0.57467855536679
    test 71 f(-0.4)proLate.s12: 5500000
    test 72 f(-0.4)proLate.S12: 68024911861224.8  FAILED, KNOWN, expected 68024911861224.7

    test 73 f(-0.3)proLate.a12: 44.778142996055
    test 74 f(-0.3)proLate.azi1: 51
    test 75 f(-0.3)proLate.azi2: 113.512221079884
    test 76 f(-0.3)proLate.lat1: 40.6
    test 77 f(-0.3)proLate.lat2: 48.2448394088334
    test 78 f(-0.3)proLate.lon1: -73.8
    test 79 f(-0.3)proLate.lon2: 9.06439641717147  FAILED, KNOWN, expected 9.06439641717144
    test 80 f(-0.3)proLate.M12: 0.614141109926637  FAILED, KNOWN, expected 0.614141109926638
    test 81 f(-0.3)proLate.m12: 4743418.11467172  FAILED, KNOWN, expected 4743418.11467171
    test 82 f(-0.3)proLate.M21: 0.595388570443547
    test 83 f(-0.3)proLate.s12: 5500000
    test 84 f(-0.3)proLate.S12: 60386769588050.2

    test 85 f(-0.2)proLate.a12: 46.0484287767579  FAILED, KNOWN, expected 46.0484287767578
    test 86 f(-0.2)proLate.azi1: 51
    test 87 f(-0.2)proLate.azi2: 111.343872400749
    test 88 f(-0.2)proLate.lat1: 40.6
    test 89 f(-0.2)proLate.lat2: 49.3693479292292
    test 90 f(-0.2)proLate.lon1: -73.8
    test 91 f(-0.2)proLate.lon2: 5.63252938443213  FAILED, KNOWN, expected 5.63252938443208
    test 92 f(-0.2)proLate.M12: 0.629452843380053
    test 93 f(-0.2)proLate.m12: 4781182.84779737
    test 94 f(-0.2)proLate.M21: 0.615074420205344  FAILED, KNOWN, expected 0.615074420205345
    test 95 f(-0.2)proLate.s12: 5500000
    test 96 f(-0.2)proLate.S12: 53138975764711

    test 97 f(-0.1)proLate.a12: 47.5682594059394
    test 98 f(-0.1)proLate.azi1: 51
    test 99 f(-0.1)proLate.azi2: 109.241628907367
    test 100 f(-0.1)proLate.lat1: 40.6
    test 101 f(-0.1)proLate.lat2: 50.5570087568933
    test 102 f(-0.1)proLate.lon1: -73.8
    test 103 f(-0.1)proLate.lon2: 2.25260962354912  FAILED, KNOWN, expected 2.25260962354918
    test 104 f(-0.1)proLate.M12: 0.641772419411798
    test 105 f(-0.1)proLate.m12: 4814553.53489422
    test 106 f(-0.1)proLate.M21: 0.6335390304747
    test 107 f(-0.1)proLate.s12: 5500000
    test 108 f(-0.1)proLate.S12: 46313407380218.5

    test 109 f(0.0)sphere.a12: 49.4073406265737
    test 110 f(0.0)sphere.azi1: 51
    test 111 f(0.0)sphere.azi2: 107.253441084194
    test 112 f(0.0)sphere.lat1: 40.6
    test 113 f(0.0)sphere.lat2: 51.8394367533853
    test 114 f(0.0)sphere.lon1: -73.8
    test 115 f(0.0)sphere.lon2: -1.03317283695991
    test 116 f(0.0)sphere.M12: 0.650676935525673
    test 117 f(0.0)sphere.m12: 4843268.16188793
    test 118 f(0.0)sphere.M21: 0.650676935525673
    test 119 f(0.0)sphere.s12: 5500000
    test 120 f(0.0)sphere.S12: 39940559879050.1

    test 121 f(0.1)obLate.a12: 51.6562009348442
    test 122 f(0.1)obLate.azi1: 51
    test 123 f(0.1)obLate.azi2: 105.436101360918
    test 124 f(0.1)obLate.lat1: 40.6
    test 125 f(0.1)obLate.lat2: 53.2621488352775
    test 126 f(0.1)obLate.lon1: -73.8
    test 127 f(0.1)obLate.lon2: -4.1783179769551  FAILED, KNOWN, expected -4.17831797695516
    test 128 f(0.1)obLate.M12: 0.655652471115944  FAILED, KNOWN, expected 0.655652471115945
    test 129 f(0.1)obLate.m12: 4867271.01535068  FAILED, KNOWN, expected 4867271.01535067
    test 130 f(0.1)obLate.M21: 0.666556146155552
    test 131 f(0.1)obLate.s12: 5500000
    test 132 f(0.1)obLate.S12: 34048882687460.5

    test 133 f(0.2)obLate.a12: 54.4319984205255
    test 134 f(0.2)obLate.azi1: 51
    test 135 f(0.2)obLate.azi2: 103.8563593825  FAILED, KNOWN, expected 103.856359382499
    test 136 f(0.2)obLate.lat1: 40.6
    test 137 f(0.2)obLate.lat2: 54.8886869301292
    test 138 f(0.2)obLate.lon1: -73.8
    test 139 f(0.2)obLate.lon2: -7.13270532079326  FAILED, KNOWN, expected -7.13270532079328
    test 140 f(0.2)obLate.M12: 0.65608338247866
    test 141 f(0.2)obLate.m12: 4886937.77404685
    test 142 f(0.2)obLate.M21: 0.681558941812475
    test 143 f(0.2)obLate.s12: 5500000
    test 144 f(0.2)obLate.S12: 28664292324534.6  FAILED, KNOWN, expected 28664292324534.5

    test 145 f(0.3)obLate.a12: 57.8845459603905
    test 146 f(0.3)obLate.azi1: 51
    test 147 f(0.3)obLate.azi2: 102.592096849744
    test 148 f(0.3)obLate.lat1: 40.6
    test 149 f(0.3)obLate.lat2: 56.8052789737725
    test 150 f(0.3)obLate.lon1: -73.8
    test 151 f(0.3)obLate.lon2: -9.84339350245068
    test 152 f(0.3)obLate.M12: 0.651269895561088
    test 153 f(0.3)obLate.m12: 4903527.26055769
    test 154 f(0.3)obLate.M21: 0.696621153271262
    test 155 f(0.3)obLate.s12: 5500000
    test 156 f(0.3)obLate.S12: 23809838803598.7

    test 157 f(0.4)obLate.a12: 62.2000535802231  FAILED, KNOWN, expected 62.2000535802232
    test 158 f(0.4)obLate.azi1: 51
    test 159 f(0.4)obLate.azi2: 101.732620462068
    test 160 f(0.4)obLate.lat1: 40.6
    test 161 f(0.4)obLate.lat2: 59.1251996985707
    test 162 f(0.4)obLate.lon1: -73.8
    test 163 f(0.4)obLate.lon2: -12.2555967438742
    test 164 f(0.4)obLate.M12: 0.640521897686656
    test 165 f(0.4)obLate.m12: 4920049.29725335
    test 166 f(0.4)obLate.M21: 0.713612775606923
    test 167 f(0.4)obLate.s12: 5500000
    test 168 f(0.4)obLate.S12: 19505392269428.9

    test 169 f(0.5)obLate.a12: 67.5961360204058
    test 170 f(0.5)obLate.azi1: 51
    test 171 f(0.5)obLate.azi2: 101.375214059512
    test 172 f(0.5)obLate.lat1: 40.6
    test 173 f(0.5)obLate.lat2: 61.9908246599488
    test 174 f(0.5)obLate.lon1: -73.8
    test 175 f(0.5)obLate.lon2: -14.314173457934
    test 176 f(0.5)obLate.M12: 0.62342153427984
    test 177 f(0.5)obLate.m12: 4942782.22410672
    test 178 f(0.5)obLate.M21: 0.735840684527278
    test 179 f(0.5)obLate.s12: 5500000
    test 180 f(0.5)obLate.S12: 15767156271751.5

    test 181 f(0.6)obLate.a12: 74.293940742003
    test 182 f(0.6)obLate.azi1: 51
    test 183 f(0.6)obLate.azi2: 101.611122905479
    test 184 f(0.6)obLate.lat1: 40.6
    test 185 f(0.6)obLate.lat2: 65.570125882359
    test 186 f(0.6)obLate.lon1: -73.8
    test 187 f(0.6)obLate.lon2: -15.9664855590569
    test 188 f(0.6)obLate.M12: 0.600385896682554
    test 189 f(0.6)obLate.m12: 4983385.70418856
    test 190 f(0.6)obLate.M21: 0.768372005314338  FAILED, KNOWN, expected 0.768372005314339
    test 191 f(0.6)obLate.s12: 5500000
    test 192 f(0.6)obLate.S12: 12607032773613.6

    test 193 f(0.7)obLate.a12: 82.4416835202881
    test 194 f(0.7)obLate.azi1: 51
    test 195 f(0.7)obLate.azi2: 102.488060130252
    test 196 f(0.7)obLate.lat1: 40.6
    test 197 f(0.7)obLate.lat2: 70.0446694858328
    test 198 f(0.7)obLate.lon1: -73.8
    test 199 f(0.7)obLate.lon2: -17.1682178841075  FAILED, KNOWN, expected -17.1682178841074
    test 200 f(0.7)obLate.M12: 0.573565786722514  FAILED, KNOWN, expected 0.573565786722513
    test 201 f(0.7)obLate.m12: 5059996.37065632  FAILED, KNOWN, expected 5059996.37065633
    test 202 f(0.7)obLate.M21: 0.817099782347416
    test 203 f(0.7)obLate.s12: 5500000
    test 204 f(0.7)obLate.S12: 10032955148624.8

    test 205 f(0.8)obLate.a12: 91.9549069618778
    test 206 f(0.8)obLate.azi1: 51
    test 207 f(0.8)obLate.azi2: 103.932282361181
    test 208 f(0.8)obLate.lat1: 40.6
    test 209 f(0.8)obLate.lat2: 75.5867314102627
    test 210 f(0.8)obLate.lon1: -73.8
    test 211 f(0.8)obLate.lon2: -17.8943807275634  FAILED, KNOWN, expected -17.8943807275633
    test 212 f(0.8)obLate.M12: 0.54758812096158
    test 213 f(0.8)obLate.m12: 5191227.434783
    test 214 f(0.8)obLate.M21: 0.88423165114083
    test 215 f(0.8)obLate.s12: 5500000
    test 216 f(0.8)obLate.S12: 8054551454844.59  FAILED, KNOWN, expected 8054551454844.58

    test 217 f(0.9)obLate.a12: 102.246152032153
    test 218 f(0.9)obLate.azi1: 51
    test 219 f(0.9)obLate.azi2: 105.618016083621
    test 220 f(0.9)obLate.lat1: 40.6
    test 221 f(0.9)obLate.lat2: 82.2999319410311
    test 222 f(0.9)obLate.lon1: -73.8
    test 223 f(0.9)obLate.lon2: -18.1607604123893
    test 224 f(0.9)obLate.M12: 0.528679454698809
    test 225 f(0.9)obLate.m12: 5370336.10833014
    test 226 f(0.9)obLate.M21: 0.958073002020685  FAILED, KNOWN, expected 0.958073002020686
    test 227 f(0.9)obLate.s12: 5500000
    test 228 f(0.9)obLate.S12: 6706997024987.37

    test 229 _GeodesicLineExact: a13=49.475527, azi1=51.0, geodesic=GeodesicExact(C4Order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), lat1=40.6, lon1=-73.8, s13=5500000.0
    test 230 GeodesicExact: GeodesicExact(C4Order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)
    test 231 _GeodesicLineExact: Direct9Tuple(a12=49.475527, lat2=51.884565, lon2=-1.141173, azi2=107.189397, s12=5500000.0, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 232 GeodesicExact: {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}
    test 233 GeodesicExact: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 234 GeodesicExact: {M12: NAN, M21: NAN, S12: NAN, a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, s12: 5500000.0}  FAILED, KNOWN, expected {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}

    test 235 GeodesicSolve: {M12: 0.650911, M21: 0.651229, S12: 39735075134877.09375, a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, m12: 4844148.703101, s12: 5500000.0}
    test 236 GeodesicSolve: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, 4844148.703101, 0.650911, 0.651229, 39735075134877.09375)
    test 237 GeodesicSolve: {M12: 0.650911, M21: 0.651229, S12: 39735075134877.09375, a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: 4844148.703101, s12: 5500000.0}  FAILED, KNOWN, expected {M12: 0.650911, M21: 0.651229, S12: 39735075134877.09375, a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, m12: 4844148.703101, s12: 5500000.0}

    testInverseX vs ...(pygeodesy.geodesicx, 21.07.15)
    test 238 C++.a12: 49.941310217899
    test 239 C++.azi1: 51.1988828455798
    test 240 C++.azi2: 107.821776735514
    test 241 C++.lat1: 40.6
    test 242 C++.lat2: 51.6
    test 243 C++.lon1: -73.8
    test 244 C++.lon2: -0.5
    test 245 C++.M12: 0.644729692059483  FAILED, KNOWN, expected 0.644729692059482
    test 246 C++.m12: 4877684.60270619  FAILED, KNOWN, expected 4877684.6027062
    test 247 C++.M21: 0.645045678521344
    test 248 C++.s12: 5551759.40031868
    test 249 C++.S12: 40041368848742.5

    test 250 GeodSolve.a12: 49.941310217899
    test 251 GeodSolve.azi1: 51.1988828455798
    test 252 GeodSolve.azi2: 107.821776735514
    test 253 GeodSolve.lat1: 40.6
    test 254 GeodSolve.lat2: 51.6
    test 255 GeodSolve.lon1: -73.8
    test 256 GeodSolve.lon2: -0.5
    test 257 GeodSolve.M12: 0.644729692059483  FAILED, KNOWN, expected 0.644729692059482
    test 258 GeodSolve.m12: 4877684.60270619  FAILED, KNOWN, expected 4877684.6027062
    test 259 GeodSolve.M21: 0.645045678521344
    test 260 GeodSolve.s12: 5551759.40031868
    test 261 GeodSolve.S12: 40041368848742.5

    test 262 f(-0.7)proLate.a12: 30.8498450229685
    test 263 f(-0.7)proLate.azi1: 46.8390771777768  FAILED, KNOWN, expected 46.8390771777767
    test 264 f(-0.7)proLate.azi2: 102.364845341617
    test 265 f(-0.7)proLate.lat1: 40.6
    test 266 f(-0.7)proLate.lat2: 51.6
    test 267 f(-0.7)proLate.lon1: -73.8
    test 268 f(-0.7)proLate.lon2: -0.5
    test 269 f(-0.7)proLate.M12: 0.731807954033609
    test 270 f(-0.7)proLate.m12: 3663075.31071237
    test 271 f(-0.7)proLate.M21: 0.696381877483542
    test 272 f(-0.7)proLate.s12: 4064374.72733529  FAILED, KNOWN, expected 4064374.7273353
    test 273 f(-0.7)proLate.S12: 71321909298423.2

    test 274 f(-0.6)proLate.a12: 32.6244672597169  FAILED, KNOWN, expected 32.624467259717
    test 275 f(-0.6)proLate.azi1: 47.2626025379604
    test 276 f(-0.6)proLate.azi2: 102.867650046856
    test 277 f(-0.6)proLate.lat1: 40.6
    test 278 f(-0.6)proLate.lat2: 51.6
    test 279 f(-0.6)proLate.lon1: -73.8
    test 280 f(-0.6)proLate.lon2: -0.5
    test 281 f(-0.6)proLate.M12: 0.725390840887562  FAILED, KNOWN, expected 0.725390840887561
    test 282 f(-0.6)proLate.m12: 3811547.14779174
    test 283 f(-0.6)proLate.M21: 0.692782702624978  FAILED, KNOWN, expected 0.692782702624977
    test 284 f(-0.6)proLate.s12: 4237106.26798552
    test 285 f(-0.6)proLate.S12: 67003980896186

    test 286 f(-0.5)proLate.a12: 34.6143539838512
    test 287 f(-0.5)proLate.azi1: 47.7400036902753
    test 288 f(-0.5)proLate.azi2: 103.43951372754
    test 289 f(-0.5)proLate.lat1: 40.6
    test 290 f(-0.5)proLate.lat2: 51.6
    test 291 f(-0.5)proLate.lon1: -73.8
    test 292 f(-0.5)proLate.lon2: -0.5
    test 293 f(-0.5)proLate.M12: 0.717750671080258  FAILED, KNOWN, expected 0.717750671080257
    test 294 f(-0.5)proLate.m12: 3968659.90647178
    test 295 f(-0.5)proLate.M21: 0.688437867237199  FAILED, KNOWN, expected 0.688437867237198
    test 296 f(-0.5)proLate.s12: 4421695.86157283  FAILED, KNOWN, expected 4421695.86157284
    test 297 f(-0.5)proLate.S12: 62647679908513.6  FAILED, KNOWN, expected 62647679908513.7

    test 298 f(-0.4)proLate.a12: 36.8617108475833
    test 299 f(-0.4)proLate.azi1: 48.2782940313591
    test 300 f(-0.4)proLate.azi2: 104.091557707465
    test 301 f(-0.4)proLate.lat1: 40.6
    test 302 f(-0.4)proLate.lat2: 51.6
    test 303 f(-0.4)proLate.lon1: -73.8
    test 304 f(-0.4)proLate.lon2: -0.5
    test 305 f(-0.4)proLate.M12: 0.708569458041405
    test 306 f(-0.4)proLate.m12: 4134433.86723881
    test 307 f(-0.4)proLate.M21: 0.683143770036344  FAILED, KNOWN, expected 0.683143770036343
    test 308 f(-0.4)proLate.s12: 4618861.32295257  FAILED, KNOWN, expected 4618861.32295258
    test 309 f(-0.4)proLate.S12: 58248979819324.2

    test 310 f(-0.3)proLate.a12: 39.420657884794
    test 311 f(-0.3)proLate.azi1: 48.8846677001672
    test 312 f(-0.3)proLate.azi2: 104.836563775286
    test 313 f(-0.3)proLate.lat1: 40.6
    test 314 f(-0.3)proLate.lat2: 51.6
    test 315 f(-0.3)proLate.lon1: -73.8
    test 316 f(-0.3)proLate.lon2: -0.5
    test 317 f(-0.3)proLate.M12: 0.697425644708898
    test 318 f(-0.3)proLate.m12: 4308600.98113564
    test 319 f(-0.3)proLate.M21: 0.676630205430697
    test 320 f(-0.3)proLate.s12: 4829239.13386066  FAILED, KNOWN, expected 4829239.13386067
    test 321 f(-0.3)proLate.S12: 53804526775605.2  FAILED, KNOWN, expected 53804526775605.1

    test 322 f(-0.2)proLate.a12: 42.3616492820545
    test 323 f(-0.2)proLate.azi1: 49.5658543493026
    test 324 f(-0.2)proLate.azi2: 105.689010365627
    test 325 f(-0.2)proLate.lat1: 40.6
    test 326 f(-0.2)proLate.lat2: 51.6
    test 327 f(-0.2)proLate.lon1: -73.8
    test 328 f(-0.2)proLate.lon2: -0.5
    test 329 f(-0.2)proLate.M12: 0.68375529812055
    test 330 f(-0.2)proLate.m12: 4490465.96891757
    test 331 f(-0.2)proLate.M21: 0.668536876326996
    test 332 f(-0.2)proLate.s12: 5053314.98382881
    test 333 f(-0.2)proLate.S12: 49312505255330.1

    test 334 f(-0.1)proLate.a12: 45.7778520084076
    test 335 f(-0.1)proLate.azi1: 50.3269341833279
    test 336 f(-0.1)proLate.azi2: 106.664955696455
    test 337 f(-0.1)proLate.lat1: 40.6
    test 338 f(-0.1)proLate.lat2: 51.6
    test 339 f(-0.1)proLate.lon1: -73.8
    test 340 f(-0.1)proLate.lon2: -0.5
    test 341 f(-0.1)proLate.M12: 0.666798996688209
    test 342 f(-0.1)proLate.m12: 4678718.41576326
    test 343 f(-0.1)proLate.M21: 0.658383098263921
    test 344 f(-0.1)proLate.s12: 5291321.5507197
    test 345 f(-0.1)proLate.S12: 44774044241120.1

    test 346 f(0.0)sphere.a12: 49.7943971585703  FAILED, KNOWN, expected 49.7943971585704
    test 347 f(0.0)sphere.azi1: 51.1692726724686
    test 348 f(0.0)sphere.azi2: 107.781686005324
    test 349 f(0.0)sphere.lat1: 40.6
    test 350 f(0.0)sphere.lat2: 51.6
    test 351 f(0.0)sphere.lon1: -73.8
    test 352 f(0.0)sphere.lon2: -0.5
    test 353 f(0.0)sphere.M12: 0.645532374747016
    test 354 f(0.0)sphere.m12: 4871193.11191523
    test 355 f(0.0)sphere.M21: 0.645532374747016
    test 356 f(0.0)sphere.s12: 5543086.93605008
    test 357 f(0.0)sphere.S12: 40195434111030.4

    test 358 f(0.1)obLate.a12: 54.5817311860468  FAILED, KNOWN, expected 54.5817311860469
    test 359 f(0.1)obLate.azi1: 52.0870591681387
    test 360 f(0.1)obLate.azi2: 109.057061572538
    test 361 f(0.1)obLate.lat1: 40.6
    test 362 f(0.1)obLate.lat2: 51.6
    test 363 f(0.1)obLate.lon1: -73.8
    test 364 f(0.1)obLate.lon2: -0.5
    test 365 f(0.1)obLate.M12: 0.618585517999412  FAILED, KNOWN, expected 0.618585517999411
    test 366 f(0.1)obLate.m12: 5064606.53235912
    test 367 f(0.1)obLate.M21: 0.629161725809447  FAILED, KNOWN, expected 0.629161725809446
    test 368 f(0.1)obLate.s12: 5807806.81178111
    test 369 f(0.1)obLate.S12: 35591517394916.9

    test 370 f(0.2)obLate.a12: 60.3743912113748
    test 371 f(0.2)obLate.azi1: 53.0617122520881
    test 372 f(0.2)obLate.azi2: 110.508586502508
    test 373 f(0.2)obLate.lat1: 40.6
    test 374 f(0.2)obLate.lat2: 51.6
    test 375 f(0.2)obLate.lon1: -73.8
    test 376 f(0.2)obLate.lon2: -0.5
    test 377 f(0.2)obLate.M12: 0.58418152964186
    test 378 f(0.2)obLate.m12: 5254398.40150138
    test 379 f(0.2)obLate.M21: 0.608269542318508  FAILED, KNOWN, expected 0.608269542318507
    test 380 f(0.2)obLate.s12: 6083696.88909231  FAILED, KNOWN, expected 6083696.88909232
    test 381 f(0.2)obLate.S12: 30990690116402.8

    test 382 f(0.3)obLate.a12: 67.495457095946
    test 383 f(0.3)obLate.azi1: 54.0532224017487
    test 384 f(0.3)obLate.azi2: 112.152465760492
    test 385 f(0.3)obLate.lat1: 40.6
    test 386 f(0.3)obLate.lat2: 51.6
    test 387 f(0.3)obLate.lon1: -73.8
    test 388 f(0.3)obLate.lon2: -0.5
    test 389 f(0.3)obLate.M12: 0.540200055593844
    test 390 f(0.3)obLate.m12: 5435105.88682598
    test 391 f(0.3)obLate.M21: 0.581820509997461  FAILED, KNOWN, expected 0.58182050999746
    test 392 f(0.3)obLate.s12: 6367459.71879628
    test 393 f(0.3)obLate.S12: 26441913266022.4

    test 394 f(0.4)obLate.a12: 76.3815180684531
    test 395 f(0.4)obLate.azi1: 54.9876967652191
    test 396 f(0.4)obLate.azi2: 114.003234978639
    test 397 f(0.4)obLate.lat1: 40.6
    test 398 f(0.4)obLate.lat2: 51.6
    test 399 f(0.4)obLate.lon1: -73.8
    test 400 f(0.4)obLate.lon2: -0.5
    test 401 f(0.4)obLate.M12: 0.484674381110201
    test 402 f(0.4)obLate.m12: 5602495.83037188
    test 403 f(0.4)obLate.M21: 0.549286273467489
    test 404 f(0.4)obLate.s12: 6653478.68267745
    test 405 f(0.4)obLate.S12: 22023748427134.9

    test 406 f(0.5)obLate.a12: 87.5840623039457
    test 407 f(0.5)obLate.azi1: 55.7424301998073
    test 408 f(0.5)obLate.azi2: 116.074074324746
    test 409 f(0.5)obLate.lat1: 40.6
    test 410 f(0.5)obLate.lat2: 51.6
    test 411 f(0.5)obLate.lon1: -73.8
    test 412 f(0.5)obLate.lon2: -0.5
    test 413 f(0.5)obLate.M12: 0.417476669533174
    test 414 f(0.5)obLate.m12: 5760420.96055484
    test 415 f(0.5)obLate.M21: 0.512154548261849
    test 416 f(0.5)obLate.s12: 6932661.04065593
    test 417 f(0.5)obLate.S12: 17854087370054.8

    test 418 f(0.6)obLate.a12: 101.672789393317
    test 419 f(0.6)obLate.azi1: 56.1390154131257
    test 420 f(0.6)obLate.azi2: 118.372753418033
    test 421 f(0.6)obLate.lat1: 40.6
    test 422 f(0.6)obLate.lat2: 51.6
    test 423 f(0.6)obLate.lon1: -73.8
    test 424 f(0.6)obLate.lon2: -0.5
    test 425 f(0.6)obLate.M12: 0.344399833962436
    test 426 f(0.6)obLate.m12: 5936976.93923961  FAILED, KNOWN, expected 5936976.9392396
    test 427 f(0.6)obLate.M21: 0.477141269812572
    test 428 f(0.6)obLate.s12: 7190974.04293755
    test 429 f(0.6)obLate.S12: 14095435741511.4

    test 430 f(0.7)obLate.a12: 118.899974433249
    test 431 f(0.7)obLate.azi1: 55.9822604941527
    test 432 f(0.7)obLate.azi2: 120.870267694794
    test 433 f(0.7)obLate.lat1: 40.6
    test 434 f(0.7)obLate.lat2: 51.6
    test 435 f(0.7)obLate.lon1: -73.8
    test 436 f(0.7)obLate.lon2: -0.5
    test 437 f(0.7)obLate.M12: 0.282767834544915  FAILED, KNOWN, expected 0.282767834544914
    test 438 f(0.7)obLate.m12: 6204736.82362484  FAILED, KNOWN, expected 6204736.82362485
    test 439 f(0.7)obLate.M21: 0.459629432484044
    test 440 f(0.7)obLate.s12: 7408209.39534379  FAILED, KNOWN, expected 7408209.3953438
    test 441 f(0.7)obLate.S12: 10942220257436.1  FAILED, KNOWN, expected 10942220257436

    test 442 f(0.8)obLate.a12: 138.654874707967
    test 443 f(0.8)obLate.azi1: 55.2084184735526
    test 444 f(0.8)obLate.azi2: 123.405114674792  FAILED, KNOWN, expected 123.405114674791
    test 445 f(0.8)obLate.lat1: 40.6
    test 446 f(0.8)obLate.lat2: 51.6
    test 447 f(0.8)obLate.lon1: -73.8
    test 448 f(0.8)obLate.lon2: -0.5
    test 449 f(0.8)obLate.M12: 0.257661231584227  FAILED, KNOWN, expected 0.257661231584228
    test 450 f(0.8)obLate.m12: 6652110.16869957  FAILED, KNOWN, expected 6652110.16869956
    test 451 f(0.8)obLate.M21: 0.477625769858661  FAILED, KNOWN, expected 0.47762576985866
    test 452 f(0.8)obLate.s12: 7559119.64995391  FAILED, KNOWN, expected 7559119.6499539
    test 453 f(0.8)obLate.S12: 8571969475833.54  FAILED, KNOWN, expected 8571969475833.49

    test 454 f(0.9)obLate.a12: 159.448156899958
    test 455 f(0.9)obLate.azi1: 54.0916012255364  FAILED, KNOWN, expected 54.0916012255363
    test 456 f(0.9)obLate.azi2: 125.571065515772
    test 457 f(0.9)obLate.lat1: 40.6
    test 458 f(0.9)obLate.lat2: 51.6
    test 459 f(0.9)obLate.lon1: -73.8
    test 460 f(0.9)obLate.lon2: -0.5
    test 461 f(0.9)obLate.M12: 0.275665516678923
    test 462 f(0.9)obLate.m12: 7235195.22082337  FAILED, KNOWN, expected 7235195.22082338
    test 463 f(0.9)obLate.M21: 0.527869883058878
    test 464 f(0.9)obLate.s12: 7622715.60282403
    test 465 f(0.9)obLate.S12: 7084875642239.09  FAILED, KNOWN, expected 7084875642239.11

    test 466 _GeodesicLineExact: _GeodesicLineExact(a13=49.94131, azi1=51.198883, geodesic=GeodesicExact(C4Order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), lat1=40.6, lon1=-73.8, s13=5551759.400319)
    test 467 GeodesicExact: C4Order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)
    test 468 _GeodesicLineExact: Direct9Tuple(a12=49.94131, lat2=51.6, lon2=-0.5, azi2=107.821777, s12=5551759.400319, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 469 GeodesicExact: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, s12=5551759.400319)
    test 470 GeodesicExact: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 471 GeodesicExact: {M12: NAN, M21: NAN, S12: NAN, a12: 49.94131, calp1: NAN, calp2: NAN, m12: NAN, s12: 5551759.400319, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5551759.400319}

    test 472 GeodesicSolve: GDict(M12=0.64473, M21=0.645046, S12=40041368848742.53125, a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, m12=4877684.602706, s12=5551759.400319)
    test 473 GeodesicSolve: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=4877684.602706, M12=0.64473, M21=0.645046, S12=40041368848742.53125)
    test 474 GeodesicSolve: {M12: 0.64473, M21: 0.645046, S12: 40041368848742.53125, a12: 49.94131, calp1: NAN, calp2: NAN, m12: 4877684.602706, s12: 5551759.400319, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {M12: 0.64473, M21: 0.645046, S12: 40041368848742.53125, a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, m12: 4877684.602706, s12: 5551759.400319}

    testPolygon24(pygeodesy.geodesicx, 21.07.15)
    test 475 AddEdges: (4, 4000, 1000000)
    test 476 TestEdge: (5, 4000, 1000000)
    test 477 Clear: 0
    test 478 AddPoints: (4, 29506941, 65690027591346)
    test 479 TestPoint: (5, 29506941, 65690027591346)

    testPolygon27(pygeodesy.geodesicx, 21.07.15)
    test 480 AddEdges: (4, 4000, 1000000)
    test 481 TestEdge: (5, 4000, 1000000)
    test 482 Clear: 0
    test 483 AddPoints: (4, 29506941, 65690027591346)
    test 484 TestPoint: (5, 29506941, 65690027591346)

    testPolygon30(pygeodesy.geodesicx, 21.07.15)
    test 485 AddEdges: (4, 4000, 1000000)
    test 486 TestEdge: (5, 4000, 1000000)
    test 487 Clear: 0
    test 488 AddPoints: (4, 29506941, 65690027591346)
    test 489 TestPoint: (5, 29506941, 65690027591346)

    testPolygon(pygeodesy.geodsolve, 21.07.03)
    test 490 AddEdges: (4, 4000, 1000000)
    test 491 TestEdge: (5, 4000, 1000000)
    test 492 Clear: 0
    test 493 AddPoints: (4, 29506941, 65690027591346)
    test 494 TestPoint: (5, 29506941, 65690027591346)

    87 of 494 testGeodesicx.py tests (17.6%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 2.643 sec
Exception TypeError: 'isinstance() arg 2 must be a class, type, or tuple of classes and types' in <object repr() failed> ignored
Exception TypeError: 'isinstance() arg 2 must be a class, type, or tuple of classes and types' in <object repr() failed> ignored

running /System/Library/....Python -W always ~/PyGeodesy/test/testGeohash.py

    testing testGeohash.py 21.02.11 (module pygeodesy.geohash 21.06.23)
    test 1 Geohash: geek
    test 2 Geohash: geek
    test 3 Geohash: 'geek'
    test 4 Geohash: Geohash('geek')
    test 5 Geohash: geek
    test 6 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 7 toLatLon: 65.478516°N, 017.753906°W
    test 8 latlon: 65.4785156, -17.7539062
    test 9 philam: 1.1428157, -0.3098641
    test 10 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 11 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 12 Geohash: geehpbpbp
    test 13 toLatLon: 65.390625°N, 017.929689°W
    test 14 latlon: 65.390625, -17.929689
    test 15 ab: 1.1412817, -0.3129321
    test 16 decode: ('65.390646', '-17.929709')
    test 17 decode2: (65.390646, -17.929709)
    test 18 decode_error: 2.145767e-05, 2.145767e-05
    test 19 distance1To: 2758.887
    test 20 distance2To: 682.760
    test 21 distance3To: 397.404
    test 22 sizes: 4.8, 4.8
    test 23 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 24 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 25 N: geehpbpbr
    test 26 NE: geek00002
    test 27 E: geek00000
    test 28 SE: gee7bpbpb
    test 29 S: gee5zzzzz
    test 30 SW: gee5zzzzy
    test 31 W: geehpbpbn
    test 32 NW: geehpbpbq
    test 33 N: geehpbpbr
    test 34 NE: geek00002
    test 35 E: geek00000
    test 36 SE: gee7bpbpb
    test 37 S: gee5zzzzz
    test 38 SW: gee5zzzzy
    test 39 W: geehpbpbn
    test 40 NW: geehpbpbq
    test 41 N: geehpbpbr
    test 42 NE: geek00002
    test 43 E: geek00000
    test 44 SE: gee7bpbpb
    test 45 S: gee5zzzzz
    test 46 SW: gee5zzzzy
    test 47 W: geehpbpbn
    test 48 NW: geehpbpbq
    test 49 N: geehpbpbr
    test 50 NE: geek00002
    test 51 E: geek00000
    test 52 SE: gee7bpbpb
    test 53 S: gee5zzzzz
    test 54 SW: gee5zzzzy
    test 55 W: geehpbpbn
    test 56 NW: geehpbpbq
    test 57 bounds: 52.20428467, 0.11810303, 52.20565796, 0.11947632
    test 58 decode: 52.205, 0.1188
    test 59 encode-decode: u120fxw
    test 60 encode-decode: geek
    test 61 encode-decode: fur
    test 62 encode-decode: geehpbpbp
    test 63 encode-decode: u4pruydqqvj8
    test 64 encode-decode: bgr96qxvpd46
    test 65 encode-decode: 0123456789
    test 66 encode-decode: zzzzzz
    test 67 Geohash: u4pruydq
    test 68 N.E.S.W: True
    test 69 E.S.W.N: True
    test 70 S.W.N.E: True
    test 71 W.N.E.S: True
    test 72 N.E.S.S.W.W.N.N.E.S: True
    test 73 Geohash: u4pruydqq
    test 74 N.E.S.W: True
    test 75 E.S.W.N: True
    test 76 S.W.N.E: True
    test 77 W.N.E.S: True
    test 78 N.E.S.S.W.W.N.N.E.S: True
    test 79 Geohash: u4pruydqqv
    test 80 N.E.S.W: True
    test 81 E.S.W.N: True
    test 82 S.W.N.E: True
    test 83 W.N.E.S: True
    test 84 N.E.S.S.W.W.N.N.E.S: True
    test 85 Geohash: u4pruydqqvj
    test 86 N.E.S.W: True
    test 87 E.S.W.N: True
    test 88 S.W.N.E: True
    test 89 W.N.E.S: True
    test 90 N.E.S.S.W.W.N.N.E.S: True
    test 91 Geohash: u4pruydqqvj8
    test 92 N.E.S.W: True
    test 93 E.S.W.N: True
    test 94 S.W.N.E: True
    test 95 W.N.E.S: True
    test 96 N.E.S.S.W.W.N.N.E.S: True
    test 97 encode: u120fxw
    test 98 decode: ('52.205', '0.1188')
    test 99 decode2: (52.205, 0.1188)
    test 100 decode_error: 6.866455e-04, 6.866455e-04
    test 101 distance1: 486.710
    test 102 distance2: 3.374
    test 103 distance3: 2.798
    test 104 sizes: 153.0, 153.0
    test 105 Geohash: u336xv
    test 106 encode: u336xv
    test 107 equal: True
    test 108 sizes: 610.0, 1220.0
    test 109 encode: fur
    test 110 decode: ('69.6', '-45.7')
    test 111 decode: ('70.3', '-51')
    test 112 decode: ('68', '-68')
    test 113 decode_error: (0.703125, 0.703125)
    test 114 decode_error: (2.8125, 5.625)
    test 115 decode_error: (22.5, 22.5)
    test 116 encode: ezs42e44yx96
    test 117 decode: ('42.60000003', '-5.59999997')
    test 118 encode: ezs42
    test 119 decode: ('42.605', '-5.603')
    test 120 distance1: 503442.4
    test 121 distance2: 303317.6
    test 122 distance3: 179940.1
    test 123 precision: 0  FAILED, KNOWN, expected 1
    test 124 resolution: 360.0, 180.0
    test 125 precision: 1
    test 126 resolution: 45.0, 11.25
    test 127 precision: 2
    test 128 resolution: 11.25, 0.352
    test 129 precision: 3
    test 130 resolution: 1.4062, 0.011
    test 131 precision: 4
    test 132 resolution: 0.35156, 0.00034
    test 133 precision: 5
    test 134 resolution: 0.043945, 0.000011
    test 135 precision: 6
    test 136 resolution: 0.0109863, 0.0000003
    test 137 precision: 7
    test 138 resolution: 0.00137329, 0.00000001
    test 139 precision: 8
    test 140 resolution: 0.000343323, 0.0
    test 141 precision: 9
    test 142 resolution: 0.0000429153, 0.0
    test 143 precision: 10
    test 144 resolution: 0.00001072884, 0.0
    test 145 precision: 11
    test 146 resolution: 0.000001341105, 0.0
    test 147 precision: 12
    test 148 resolution: 0.0000003352761, 0.0
    test 149 precision: 13  FAILED, KNOWN, expected 12
    test 150 resolution: 0.00000033527613, 0.0

    2 of 150 testGeohash.py tests (1.3%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 30.334 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testGeoids.py

    testing testGeoids.py 21.04.06
    test 1 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 2: 11.422  FAILED, KNOWN, expected 11.423
    test 2 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 2: 0.887  FAILED, KNOWN, expected 0.892
    test 3 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 2: 65.226
    test 4 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 2: 24.460  FAILED, KNOWN, expected 24.463
    test 5 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 2: -29.682
    test 6 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 2: 10.503
    test 7 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 2: 29.325  FAILED, KNOWN, expected 29.326
    test 8 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 2: 60.423  FAILED, KNOWN, expected 60.424
    test 9 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 2: 68.997  FAILED, KNOWN, expected 68.996
    test 10 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 2: 36.295  FAILED, KNOWN, expected 36.287
    test 11 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 2: 6.627  FAILED, KNOWN, expected 6.626
    test 12 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 2: -20.860
    test 13 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 2: -3.266  FAILED, KNOWN, expected -3.267
    test 14 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 2: -1.296  FAILED, KNOWN, expected -1.294
    test 15 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 2: -2.322
    test 16 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 2: -17.556  FAILED, KNOWN, expected -17.557
    test 17 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 2: -16.594
    test 18 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 2: 24.455  FAILED, KNOWN, expected 24.453
    test 19 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 2: -18.591  FAILED, KNOWN, expected -18.592
    test 20 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 2: 44.051  FAILED, KNOWN, expected 44.049
    test 21 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 2: 18.582  FAILED, KNOWN, expected 18.581
    test 22 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 2: 44.290  FAILED, KNOWN, expected 44.289
    test 23 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 2: 49.821  FAILED, KNOWN, expected 49.816
    test 24 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 2: -36.108  FAILED, KNOWN, expected -36.114
    test 25 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 2: -41.046  FAILED, KNOWN, expected -41.048
    test 26 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 2: 26.457  FAILED, KNOWN, expected 26.456
    test 27 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 2: 49.309  FAILED, KNOWN, expected 49.317
    test 28 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 2: 20.706  FAILED, KNOWN, expected 20.714
    test 29 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 2: -7.363  FAILED, KNOWN, expected -7.362
    test 30 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 2: -16.499  FAILED, KNOWN, expected -16.492
    test 31 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 2: 18.108  FAILED, KNOWN, expected 18.110
    test 32 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 2: 51.859  FAILED, KNOWN, expected 51.858
    test 33 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 2: -38.979  FAILED, KNOWN, expected -38.981
    test 34 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 2: -9.912  FAILED, KNOWN, expected -9.913
    test 35 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 2: -2.827  FAILED, KNOWN, expected -2.828
    test 36 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 2: -5.719
    test 37 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 2: 22.420  FAILED, KNOWN, expected 22.426
    test 38 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 2: 24.546  FAILED, KNOWN, expected 24.545
    test 39 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 2: 40.651  FAILED, KNOWN, expected 40.652
    test 40 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 2: 22.380  FAILED, KNOWN, expected 22.383
    test 41 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 2: 22.185  FAILED, KNOWN, expected 22.182
    test 42 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 2: 14.927  FAILED, KNOWN, expected 14.930
    test 43 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 2: -47.093  FAILED, KNOWN, expected -47.094
    test 44 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 2: -18.421
    test 45 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 2: 10.060  FAILED, KNOWN, expected 10.055
    test 46 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 2: 5.784  FAILED, KNOWN, expected 5.786
    test 47 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 2: -22.840  FAILED, KNOWN, expected -22.838
    test 48 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 2: 42.988  FAILED, KNOWN, expected 42.989
    test 49 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 2: 15.351  FAILED, KNOWN, expected 15.353
    test 50 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 2: -6.341  FAILED, KNOWN, expected -6.337
    test 51 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 2: -25.551  FAILED, KNOWN, expected -25.555
    test 52 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 2: -9.921  FAILED, KNOWN, expected -9.923
    test 53 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 2: -10.861  FAILED, KNOWN, expected -10.852
    test 54 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 2: -0.136  FAILED, KNOWN, expected -0.135
    test 55 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 2: -43.808  FAILED, KNOWN, expected -43.809
    test 56 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 2: 57.151  FAILED, KNOWN, expected 57.150
    test 57 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 2: -17.660  FAILED, KNOWN, expected -17.657
    test 58 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 2: 46.356  FAILED, KNOWN, expected 46.358
    test 59 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 2: -14.404
    test 60 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 2: 11.239  FAILED, KNOWN, expected 11.242
    test 61 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 2: 42.236  FAILED, KNOWN, expected 42.237
    test 62 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 2: 22.148  FAILED, KNOWN, expected 22.147
    test 63 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 2: -33.395  FAILED, KNOWN, expected -33.396
    test 64 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 2: 7.965  FAILED, KNOWN, expected 7.961
    test 65 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 2: 7.228  FAILED, KNOWN, expected 7.229
    test 66 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 2: -44.289  FAILED, KNOWN, expected -44.292
    test 67 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 2: 21.872  FAILED, KNOWN, expected 21.875
    test 68 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 2: 28.935  FAILED, KNOWN, expected 28.933
    test 69 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 2: -41.255  FAILED, KNOWN, expected -41.238
    test 70 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 2: -31.334  FAILED, KNOWN, expected -31.331
    test 71 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 2: -32.702
    test 72 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 2: 60.118  FAILED, KNOWN, expected 60.117
    test 73 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 2: 6.456  FAILED, KNOWN, expected 6.457
    test 74 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 2: -31.959  FAILED, KNOWN, expected -31.961
    test 75 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 2: -26.572  FAILED, KNOWN, expected -26.571
    test 76 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 2: -29.761  FAILED, KNOWN, expected -29.760
    test 77 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 2: 21.980
    test 78 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 2: 16.849
    test 79 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 2: -20.922  FAILED, KNOWN, expected -20.923
    test 80 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 2: -42.745  FAILED, KNOWN, expected -42.749
    test 81 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 2: -21.839  FAILED, KNOWN, expected -21.841
    test 82 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 2: 25.482
    test 83 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 2: -8.845  FAILED, KNOWN, expected -8.847
    test 84 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 2: -19.600  FAILED, KNOWN, expected -19.604
    test 85 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 2: 25.672  FAILED, KNOWN, expected 25.668
    test 86 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 2: -3.772
    test 87 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 2: 17.747  FAILED, KNOWN, expected 17.748
    test 88 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 2: -17.838  FAILED, KNOWN, expected -17.839
    test 89 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 2: 14.293  FAILED, KNOWN, expected 14.292
    test 90 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 2: 16.529
    test 91 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 2: -8.230  FAILED, KNOWN, expected -8.229
    test 92 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 2: 9.828  FAILED, KNOWN, expected 9.830
    test 93 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 2: 6.213  FAILED, KNOWN, expected 6.215
    test 94 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 2: -2.957  FAILED, KNOWN, expected -2.960
    test 95 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 2: -42.326  FAILED, KNOWN, expected -42.323
    test 96 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 2: 38.352  FAILED, KNOWN, expected 38.356
    test 97 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 2: 34.242  FAILED, KNOWN, expected 34.259
    test 98 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 2: -37.390  FAILED, KNOWN, expected -37.397
    test 99 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 2: -2.015  FAILED, KNOWN, expected -2.016
    test 100 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 2: 33.915  FAILED, KNOWN, expected 33.912
    test 101 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 2: 12.676
    test 102 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 2: 15.729  FAILED, KNOWN, expected 15.692
    test 103 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 2: -11.117
    test 104 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 2: 27.443  FAILED, KNOWN, expected 27.437
    test 105 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 2: -23.893  FAILED, KNOWN, expected -23.894
    test 106 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 2: 18.749  FAILED, KNOWN, expected 18.766
    test 107 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 2: -7.452
    test 108 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 2: 30.141  FAILED, KNOWN, expected 30.143
    test 109 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 2: -61.176  FAILED, KNOWN, expected -61.172
    test 110 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 2: -24.892  FAILED, KNOWN, expected -24.890
    test 111 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 2: 39.523  FAILED, KNOWN, expected 39.519
    test 112 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 2: 19.417  FAILED, KNOWN, expected 19.419
    test 113 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 2: 2.069
    test 114 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 2: 25.048
    test 115 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 2: 22.547
    test 116 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 2: -34.359
    test 117 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 2: -5.454  FAILED, KNOWN, expected -5.453
    test 118 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 2: -6.802  FAILED, KNOWN, expected -6.804
    test 119 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 2: -35.053  FAILED, KNOWN, expected -35.054
    test 120 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 2: -15.417  FAILED, KNOWN, expected -15.418
    test 121 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 2: -79.556  FAILED, KNOWN, expected -79.557
    test 122 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 2: -16.894
    test 123 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 2: 36.213  FAILED, KNOWN, expected 36.215
    test 124 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 2: 3.524  FAILED, KNOWN, expected 3.523
    test 125 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 2: 23.796  FAILED, KNOWN, expected 23.797
    test 126 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 2: 51.587  FAILED, KNOWN, expected 51.586
    test 127 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 2: -30.131
    test 128 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 2: -51.853  FAILED, KNOWN, expected -51.848
    test 129 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 2: 37.200  FAILED, KNOWN, expected 37.192
    test 130 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 2: 63.583  FAILED, KNOWN, expected 63.597
    test 131 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 2: -62.636
    test 132 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 2: -8.717
    test 133 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 2: 40.649  FAILED, KNOWN, expected 40.645
    test 134 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 2: -60.730  FAILED, KNOWN, expected -60.729
    test 135 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 2: 8.784  FAILED, KNOWN, expected 8.783
    test 136 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 2: 31.569  FAILED, KNOWN, expected 31.523
    test 137 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 2: -6.249  FAILED, KNOWN, expected -6.250
    test 138 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 2: 32.599
    test 139 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 2: -24.531  FAILED, KNOWN, expected -24.536
    test 140 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 2: -38.863  FAILED, KNOWN, expected -38.869
    test 141 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 2: -23.214  FAILED, KNOWN, expected -23.213
    test 142 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 2: -11.824
    test 143 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 2: 16.712  FAILED, KNOWN, expected 16.709
    test 144 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 2: -22.380  FAILED, KNOWN, expected -22.379
    test 145 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 2: -4.941
    test 146 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 2: 19.382  FAILED, KNOWN, expected 19.394
    test 147 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 2: -9.381
    test 148 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 2: -23.319
    test 149 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 2: 24.470  FAILED, KNOWN, expected 24.468
    test 150 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 2: -21.762  FAILED, KNOWN, expected -21.761
    test 151 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 2: -18.798
    test 152 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 2: 12.611  FAILED, KNOWN, expected 12.612
    test 153 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 2: -19.708  FAILED, KNOWN, expected -19.706
    test 154 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 2: 45.794  FAILED, KNOWN, expected 45.792
    test 155 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 2: -8.408  FAILED, KNOWN, expected -8.406
    test 156 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 2: -8.366  FAILED, KNOWN, expected -8.367
    test 157 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 2: -2.026  FAILED, KNOWN, expected -2.025
    test 158 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 2: -16.569
    test 159 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 2: -35.434  FAILED, KNOWN, expected -35.435
    test 160 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 2: -39.009
    test 161 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 2: -6.921
    test 162 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 2: 50.811  FAILED, KNOWN, expected 50.795
    test 163 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 2: 1.069  FAILED, KNOWN, expected 1.070
    test 164 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 2: -14.198  FAILED, KNOWN, expected -14.214
    test 165 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 2: 17.603  FAILED, KNOWN, expected 17.600
    test 166 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 2: 44.803  FAILED, KNOWN, expected 44.804
    test 167 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 2: -17.924  FAILED, KNOWN, expected -17.922
    test 168 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 2: 10.681  FAILED, KNOWN, expected 10.662
    test 169 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 2: 7.672  FAILED, KNOWN, expected 7.670
    test 170 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 2: 8.622  FAILED, KNOWN, expected 8.623
    test 171 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 2: -60.723
    test 172 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 2: 3.818
    test 173 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 2: -1.870  FAILED, KNOWN, expected -1.871
    test 174 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 2: 30.642  FAILED, KNOWN, expected 30.633
    test 175 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 2: 2.801
    test 176 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 2: 19.858  FAILED, KNOWN, expected 19.859
    test 177 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 2: 5.347  FAILED, KNOWN, expected 5.348
    test 178 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 2: 9.940  FAILED, KNOWN, expected 9.941
    test 179 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 2: 22.322  FAILED, KNOWN, expected 22.321
    test 180 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 2: -24.136  FAILED, KNOWN, expected -24.135
    test 181 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 2: -17.680  FAILED, KNOWN, expected -17.679
    test 182 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 2: -37.149  FAILED, KNOWN, expected -37.150
    test 183 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 2: -61.158
    test 184 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 2: 20.600  FAILED, KNOWN, expected 20.602
    test 185 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 2: 13.054  FAILED, KNOWN, expected 13.055
    test 186 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 2: 40.138  FAILED, KNOWN, expected 40.132
    test 187 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 2: 43.263
    test 188 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 2: -23.129  FAILED, KNOWN, expected -23.126
    test 189 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 2: -20.677  FAILED, KNOWN, expected -20.678
    test 190 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 2: -8.531  FAILED, KNOWN, expected -8.529
    test 191 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 2: -8.669  FAILED, KNOWN, expected -8.666
    test 192 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 2: -12.798  FAILED, KNOWN, expected -12.796
    test 193 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 2: 15.770  FAILED, KNOWN, expected 15.773
    test 194 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 2: -19.955  FAILED, KNOWN, expected -19.954
    test 195 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 2: -31.479  FAILED, KNOWN, expected -31.480
    test 196 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 2: -17.428  FAILED, KNOWN, expected -17.429
    test 197 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 2: 24.037
    test 198 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 2: 4.522  FAILED, KNOWN, expected 4.520
    test 199 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 2: 11.403  FAILED, KNOWN, expected 11.394
    test 200 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 2: 5.676  FAILED, KNOWN, expected 5.679
    test 201 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 2: 28.705  FAILED, KNOWN, expected 28.707
    test 202 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 2: -30.261  FAILED, KNOWN, expected -30.262
    test 203 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 2: -15.984
    test 204 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 2: -18.636  FAILED, KNOWN, expected -18.635
    test 205 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 2: -37.749
    test 206 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 2: -26.691
    test 207 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 2: -39.561
    test 208 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 2: -22.563  FAILED, KNOWN, expected -22.562
    test 209 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 2: -30.012
    test 210 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 2: -48.039

    test 211 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.046

    test 212 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 213 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 214 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 215 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 216 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 217 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 218 GeoidKarney('egm96-5.pgm').dtype: 'ushort'
    test 219 GeoidKarney('egm96-5.pgm').knots: 9335520
    test 220 GeoidKarney('egm96-5.pgm').mean: -1.317
    test 221 GeoidKarney('egm96-5.pgm').nBytes: None
    test 222 GeoidKarney('egm96-5.pgm').scipy: None
    test 223 GeoidKarney('egm96-5.pgm').smooth: None
    test 224 GeoidKarney('egm96-5.pgm').stdev: 29.244
    test 225 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 226 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 227 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 228 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 229 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 230 closed: True
    test 231 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 232 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 233 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 3: 11.424  FAILED, KNOWN, expected 11.423
    test 234 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 3: 0.892
    test 235 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 3: 65.225  FAILED, KNOWN, expected 65.226
    test 236 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 3: 24.464  FAILED, KNOWN, expected 24.463
    test 237 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 3: -29.682
    test 238 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 3: 10.503
    test 239 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 3: 29.325  FAILED, KNOWN, expected 29.326
    test 240 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 3: 60.423  FAILED, KNOWN, expected 60.424
    test 241 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 3: 68.996
    test 242 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 3: 36.287
    test 243 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 3: 6.626
    test 244 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 3: -20.861  FAILED, KNOWN, expected -20.860
    test 245 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 3: -3.267
    test 246 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 3: -1.295  FAILED, KNOWN, expected -1.294
    test 247 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 3: -2.323  FAILED, KNOWN, expected -2.322
    test 248 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 3: -17.555  FAILED, KNOWN, expected -17.557
    test 249 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 3: -16.594
    test 250 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 3: 24.454  FAILED, KNOWN, expected 24.453
    test 251 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 3: -18.592
    test 252 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 3: 44.048  FAILED, KNOWN, expected 44.049
    test 253 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 3: 18.582  FAILED, KNOWN, expected 18.581
    test 254 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 3: 44.290  FAILED, KNOWN, expected 44.289
    test 255 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 3: 49.817  FAILED, KNOWN, expected 49.816
    test 256 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 3: -36.114
    test 257 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 3: -41.047  FAILED, KNOWN, expected -41.048
    test 258 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 3: 26.456
    test 259 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 3: 49.317
    test 260 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 3: 20.714
    test 261 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 3: -7.362
    test 262 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 3: -16.491  FAILED, KNOWN, expected -16.492
    test 263 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 3: 18.110
    test 264 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 3: 51.858
    test 265 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 3: -38.979  FAILED, KNOWN, expected -38.981
    test 266 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 3: -9.913
    test 267 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 3: -2.828
    test 268 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 3: -5.718  FAILED, KNOWN, expected -5.719
    test 269 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 3: 22.427  FAILED, KNOWN, expected 22.426
    test 270 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 3: 24.545
    test 271 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 3: 40.651  FAILED, KNOWN, expected 40.652
    test 272 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 3: 22.383
    test 273 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 3: 22.183  FAILED, KNOWN, expected 22.182
    test 274 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 3: 14.929  FAILED, KNOWN, expected 14.930
    test 275 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 3: -47.094
    test 276 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 3: -18.421
    test 277 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 3: 10.055
    test 278 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 3: 5.786
    test 279 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 3: -22.838
    test 280 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 3: 42.989
    test 281 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 3: 15.352  FAILED, KNOWN, expected 15.353
    test 282 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 3: -6.338  FAILED, KNOWN, expected -6.337
    test 283 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 3: -25.554  FAILED, KNOWN, expected -25.555
    test 284 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 3: -9.922  FAILED, KNOWN, expected -9.923
    test 285 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 3: -10.853  FAILED, KNOWN, expected -10.852
    test 286 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 3: -0.135
    test 287 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 288 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 3: 57.150
    test 289 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 3: -17.656  FAILED, KNOWN, expected -17.657
    test 290 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 3: 46.359  FAILED, KNOWN, expected 46.358
    test 291 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 3: -14.404
    test 292 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 3: 11.242
    test 293 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 3: 42.237
    test 294 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 3: 22.147
    test 295 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 3: -33.396
    test 296 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 3: 7.961
    test 297 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 3: 7.228  FAILED, KNOWN, expected 7.229
    test 298 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 3: -44.290  FAILED, KNOWN, expected -44.292
    test 299 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 3: 21.874  FAILED, KNOWN, expected 21.875
    test 300 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 3: 28.933
    test 301 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 3: -41.238
    test 302 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 3: -31.331
    test 303 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 304 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 3: 60.117
    test 305 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 3: 6.457
    test 306 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 3: -31.961
    test 307 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 3: -26.572  FAILED, KNOWN, expected -26.571
    test 308 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 3: -29.761  FAILED, KNOWN, expected -29.760
    test 309 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 3: 21.981  FAILED, KNOWN, expected 21.980
    test 310 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 3: 16.849
    test 311 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 3: -20.923
    test 312 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 3: -42.749
    test 313 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 3: -21.840  FAILED, KNOWN, expected -21.841
    test 314 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 3: 25.481  FAILED, KNOWN, expected 25.482
    test 315 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 3: -8.846  FAILED, KNOWN, expected -8.847
    test 316 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 3: -19.603  FAILED, KNOWN, expected -19.604
    test 317 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 3: 25.668
    test 318 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 3: -3.772
    test 319 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 3: 17.747  FAILED, KNOWN, expected 17.748
    test 320 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 3: -17.838  FAILED, KNOWN, expected -17.839
    test 321 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 3: 14.292
    test 322 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 3: 16.529
    test 323 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 3: -8.230  FAILED, KNOWN, expected -8.229
    test 324 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 3: 9.831  FAILED, KNOWN, expected 9.830
    test 325 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 3: 6.215
    test 326 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 3: -2.960
    test 327 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 3: -42.323
    test 328 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 3: 38.356
    test 329 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 3: 34.259
    test 330 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 3: -37.397
    test 331 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 3: -2.017  FAILED, KNOWN, expected -2.016
    test 332 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 3: 33.912
    test 333 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 3: 12.676
    test 334 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 3: 15.692
    test 335 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 3: -11.117
    test 336 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 3: 27.437
    test 337 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 3: -23.894
    test 338 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 3: 18.765  FAILED, KNOWN, expected 18.766
    test 339 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 3: -7.452
    test 340 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 3: 30.143
    test 341 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 3: -61.172
    test 342 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 3: -24.890
    test 343 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 3: 39.519
    test 344 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 3: 19.420  FAILED, KNOWN, expected 19.419
    test 345 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 3: 2.067  FAILED, KNOWN, expected 2.069
    test 346 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 3: 25.049  FAILED, KNOWN, expected 25.048
    test 347 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 3: 22.546  FAILED, KNOWN, expected 22.547
    test 348 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 3: -34.358  FAILED, KNOWN, expected -34.359
    test 349 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 3: -5.454  FAILED, KNOWN, expected -5.453
    test 350 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 3: -6.804
    test 351 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 3: -35.053  FAILED, KNOWN, expected -35.054
    test 352 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 3: -15.417  FAILED, KNOWN, expected -15.418
    test 353 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 3: -79.557
    test 354 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 3: -16.894
    test 355 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 3: 36.215
    test 356 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 3: 3.523
    test 357 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 3: 23.797
    test 358 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 3: 51.587  FAILED, KNOWN, expected 51.586
    test 359 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 3: -30.131
    test 360 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 3: -51.849  FAILED, KNOWN, expected -51.848
    test 361 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 3: 37.191  FAILED, KNOWN, expected 37.192
    test 362 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 3: 63.596  FAILED, KNOWN, expected 63.597
    test 363 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 3: -62.636
    test 364 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 3: -8.718  FAILED, KNOWN, expected -8.717
    test 365 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 3: 40.645
    test 366 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 3: -60.729
    test 367 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 3: 8.784  FAILED, KNOWN, expected 8.783
    test 368 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 3: 31.523
    test 369 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 3: -6.251  FAILED, KNOWN, expected -6.250
    test 370 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 3: 32.598  FAILED, KNOWN, expected 32.599
    test 371 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 3: -24.536
    test 372 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 3: -38.869
    test 373 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.212  FAILED, KNOWN, expected -23.213
    test 374 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 3: -11.824
    test 375 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 3: 16.710  FAILED, KNOWN, expected 16.709
    test 376 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 3: -22.378  FAILED, KNOWN, expected -22.379
    test 377 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 3: -4.941
    test 378 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 3: 19.394
    test 379 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 3: -9.381
    test 380 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 381 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 3: 24.467  FAILED, KNOWN, expected 24.468
    test 382 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 3: -21.761
    test 383 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 3: -18.798
    test 384 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 3: 12.612
    test 385 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 3: -19.708  FAILED, KNOWN, expected -19.706
    test 386 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 3: 45.792
    test 387 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 3: -8.406
    test 388 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 3: -8.367
    test 389 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 3: -2.026  FAILED, KNOWN, expected -2.025
    test 390 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 3: -16.567  FAILED, KNOWN, expected -16.569
    test 391 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 3: -35.435
    test 392 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 3: -39.008  FAILED, KNOWN, expected -39.009
    test 393 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 3: -6.921
    test 394 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 3: 50.795
    test 395 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 3: 1.071  FAILED, KNOWN, expected 1.070
    test 396 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 3: -14.214
    test 397 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 3: 17.600
    test 398 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 3: 44.803  FAILED, KNOWN, expected 44.804
    test 399 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 3: -17.923  FAILED, KNOWN, expected -17.922
    test 400 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 3: 10.662
    test 401 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 3: 7.670
    test 402 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 3: 8.624  FAILED, KNOWN, expected 8.623
    test 403 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 3: -60.722  FAILED, KNOWN, expected -60.723
    test 404 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 3: 3.820  FAILED, KNOWN, expected 3.818
    test 405 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 3: -1.871
    test 406 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 3: 30.634  FAILED, KNOWN, expected 30.633
    test 407 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 3: 2.800  FAILED, KNOWN, expected 2.801
    test 408 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 3: 19.858  FAILED, KNOWN, expected 19.859
    test 409 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 3: 5.347  FAILED, KNOWN, expected 5.348
    test 410 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 3: 9.941
    test 411 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 3: 22.322  FAILED, KNOWN, expected 22.321
    test 412 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 3: -24.135
    test 413 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 3: -17.680  FAILED, KNOWN, expected -17.679
    test 414 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 415 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 3: -61.158
    test 416 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 3: 20.603  FAILED, KNOWN, expected 20.602
    test 417 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 3: 13.056  FAILED, KNOWN, expected 13.055
    test 418 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 3: 40.133  FAILED, KNOWN, expected 40.132
    test 419 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 3: 43.263
    test 420 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 421 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 3: -20.678
    test 422 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 3: -8.530  FAILED, KNOWN, expected -8.529
    test 423 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 3: -8.666
    test 424 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 3: -12.795  FAILED, KNOWN, expected -12.796
    test 425 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 3: 15.774  FAILED, KNOWN, expected 15.773
    test 426 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 3: -19.955  FAILED, KNOWN, expected -19.954
    test 427 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 3: -31.480
    test 428 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 3: -17.428  FAILED, KNOWN, expected -17.429
    test 429 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 3: 24.037
    test 430 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 3: 4.519  FAILED, KNOWN, expected 4.520
    test 431 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 3: 11.393  FAILED, KNOWN, expected 11.394
    test 432 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 3: 5.678  FAILED, KNOWN, expected 5.679
    test 433 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 3: 28.707
    test 434 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 435 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 436 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.635
    test 437 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 438 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 439 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 440 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.562
    test 441 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 442 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 443 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.002

    test 444 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 445 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 446 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 447 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 448 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 449 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 450 GeoidKarney('egm96-5.pgm').dtype: 'ushort'
    test 451 GeoidKarney('egm96-5.pgm').knots: 9335520
    test 452 GeoidKarney('egm96-5.pgm').mean: -1.317
    test 453 GeoidKarney('egm96-5.pgm').nBytes: None
    test 454 GeoidKarney('egm96-5.pgm').scipy: None
    test 455 GeoidKarney('egm96-5.pgm').smooth: None
    test 456 GeoidKarney('egm96-5.pgm').stdev: 29.244
    test 457 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 458 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 459 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 460 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 461 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 462 closed: True
    test 463 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 464 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    232 tests skipped (232): no scipy
    test 465 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 2: 12.637  FAILED, KNOWN, expected 12.636
    test 466 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 2: 0.749
    test 467 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 2: 65.110  FAILED, KNOWN, expected 65.109
    test 468 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 2: 24.889
    test 469 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 2: -29.557
    test 470 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 2: 9.741  FAILED, KNOWN, expected 9.742
    test 471 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 2: 30.061  FAILED, KNOWN, expected 30.059
    test 472 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 2: 60.691  FAILED, KNOWN, expected 60.690
    test 473 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 2: 69.134  FAILED, KNOWN, expected 69.133
    test 474 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 2: 36.522  FAILED, KNOWN, expected 36.520
    test 475 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 2: 6.801
    test 476 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 2: -20.652  FAILED, KNOWN, expected -20.651
    test 477 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 2: -3.040
    test 478 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 2: -1.329  FAILED, KNOWN, expected -1.328
    test 479 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 2: -2.171  FAILED, KNOWN, expected -2.172
    test 480 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 2: -17.411
    test 481 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 2: -16.426  FAILED, KNOWN, expected -16.425
    test 482 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 2: 24.699  FAILED, KNOWN, expected 24.698
    test 483 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 2: -18.328  FAILED, KNOWN, expected -18.329
    test 484 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 2: 43.802
    test 485 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 2: 18.716
    test 486 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 2: 44.468  FAILED, KNOWN, expected 44.469
    test 487 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 2: 49.943  FAILED, KNOWN, expected 49.944
    test 488 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 2: -35.878
    test 489 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 2: -40.777
    test 490 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 2: 26.560  FAILED, KNOWN, expected 26.559
    test 491 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 2: 49.361
    test 492 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 2: 21.106  FAILED, KNOWN, expected 21.107
    test 493 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 2: -7.202
    test 494 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 2: -17.168
    test 495 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 2: 18.359
    test 496 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 2: 52.118
    test 497 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 2: -38.949  FAILED, KNOWN, expected -38.950
    test 498 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 2: -9.935  FAILED, KNOWN, expected -9.934
    test 499 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 2: -2.879
    test 500 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 2: -5.025
    test 501 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 2: 24.296
    test 502 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 2: 25.131
    test 503 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 2: 40.720  FAILED, KNOWN, expected 40.721
    test 504 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 2: 22.388
    test 505 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 2: 22.485  FAILED, KNOWN, expected 22.486
    test 506 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 2: 14.942  FAILED, KNOWN, expected 14.943
    test 507 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 2: -47.387
    test 508 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 2: -18.404  FAILED, KNOWN, expected -18.403
    test 509 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 2: 10.186  FAILED, KNOWN, expected 10.185
    test 510 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 2: 5.671
    test 511 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 2: -24.577
    test 512 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 2: 43.288
    test 513 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 2: 13.747  FAILED, KNOWN, expected 13.748
    test 514 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 2: -5.342
    test 515 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 2: -25.579
    test 516 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 2: -9.849
    test 517 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 2: -10.491
    test 518 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 2: 0.243  FAILED, KNOWN, expected 0.244
    test 519 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 2: -43.820  FAILED, KNOWN, expected -43.821
    test 520 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 2: 57.400  FAILED, KNOWN, expected 57.401
    test 521 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 2: -17.889  FAILED, KNOWN, expected -17.890
    test 522 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 2: 46.422  FAILED, KNOWN, expected 46.421
    test 523 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 2: -14.475
    test 524 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 2: 11.119  FAILED, KNOWN, expected 11.118
    test 525 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 2: 42.291
    test 526 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 2: 22.327  FAILED, KNOWN, expected 22.326
    test 527 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 2: -33.098
    test 528 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 2: 9.431  FAILED, KNOWN, expected 9.430
    test 529 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 2: 6.032
    test 530 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 2: -44.330
    test 531 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 2: 21.775
    test 532 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 2: 29.243
    test 533 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 2: -40.677  FAILED, KNOWN, expected -40.676
    test 534 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 2: -31.353
    test 535 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 2: -32.700  FAILED, KNOWN, expected -32.701
    test 536 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 2: 60.628  FAILED, KNOWN, expected 60.629
    test 537 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 2: 6.617
    test 538 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 2: -31.888  FAILED, KNOWN, expected -31.887
    test 539 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 2: -26.536  FAILED, KNOWN, expected -26.535
    test 540 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 2: -29.631  FAILED, KNOWN, expected -29.630
    test 541 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 2: 22.274  FAILED, KNOWN, expected 22.275
    test 542 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 2: 17.095  FAILED, KNOWN, expected 17.094
    test 543 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 2: -20.940  FAILED, KNOWN, expected -20.941
    test 544 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 2: -42.740
    test 545 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 2: -21.651
    test 546 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 2: 25.240
    test 547 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 2: -8.758
    test 548 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 2: -19.606  FAILED, KNOWN, expected -19.607
    test 549 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 2: 26.258
    test 550 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 2: -3.824
    test 551 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 2: 18.194  FAILED, KNOWN, expected 18.195
    test 552 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 2: -17.724  FAILED, KNOWN, expected -17.725
    test 553 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 2: 14.511  FAILED, KNOWN, expected 14.513
    test 554 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 2: 16.808  FAILED, KNOWN, expected 16.809
    test 555 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 2: -8.025  FAILED, KNOWN, expected -8.026
    test 556 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 2: 9.688
    test 557 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 2: 6.218
    test 558 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 2: -2.725  FAILED, KNOWN, expected -2.724
    test 559 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 2: -42.566  FAILED, KNOWN, expected -42.565
    test 560 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 2: 38.341
    test 561 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 2: 33.888  FAILED, KNOWN, expected 33.889
    test 562 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 2: -37.382  FAILED, KNOWN, expected -37.380
    test 563 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 2: -1.857  FAILED, KNOWN, expected -1.858
    test 564 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 2: 34.196  FAILED, KNOWN, expected 34.195
    test 565 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 2: 12.767
    test 566 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 2: 15.612
    test 567 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 2: -11.063
    test 568 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 2: 27.387
    test 569 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 2: -23.817
    test 570 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 2: 18.713  FAILED, KNOWN, expected 18.712
    test 571 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 2: -7.343  FAILED, KNOWN, expected -7.344
    test 572 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 2: 29.997  FAILED, KNOWN, expected 29.998
    test 573 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 2: -61.869
    test 574 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 2: -24.937
    test 575 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 2: 38.558  FAILED, KNOWN, expected 38.556
    test 576 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 2: 19.672  FAILED, KNOWN, expected 19.671
    test 577 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 2: 2.273  FAILED, KNOWN, expected 2.272
    test 578 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 2: 24.863
    test 579 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 2: 21.637  FAILED, KNOWN, expected 21.636
    test 580 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 2: -33.851
    test 581 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 2: -5.299
    test 582 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 2: -6.789
    test 583 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 2: -35.030
    test 584 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 2: -15.338
    test 585 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 2: -79.356
    test 586 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 2: -16.650
    test 587 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 2: 36.358  FAILED, KNOWN, expected 36.359
    test 588 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 2: 3.614  FAILED, KNOWN, expected 3.615
    test 589 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 2: 23.946  FAILED, KNOWN, expected 23.947
    test 590 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 2: 51.495
    test 591 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 2: -30.909  FAILED, KNOWN, expected -30.910
    test 592 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 2: -52.131
    test 593 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 2: 37.046  FAILED, KNOWN, expected 37.045
    test 594 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 2: 64.181  FAILED, KNOWN, expected 64.180
    test 595 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 2: -62.475
    test 596 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 2: -8.454
    test 597 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 2: 40.834
    test 598 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 2: -60.456  FAILED, KNOWN, expected -60.455
    test 599 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 2: 9.727
    test 600 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 2: 32.143  FAILED, KNOWN, expected 32.142
    test 601 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 2: -6.221  FAILED, KNOWN, expected -6.220
    test 602 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 2: 32.489
    test 603 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 2: -24.692
    test 604 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 2: -38.748  FAILED, KNOWN, expected -38.749
    test 605 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 2: -23.254  FAILED, KNOWN, expected -23.255
    test 606 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 2: -13.454  FAILED, KNOWN, expected -13.455
    test 607 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 2: 16.627
    test 608 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 2: -22.221
    test 609 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 2: -4.836
    test 610 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 2: 19.571
    test 611 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 2: -9.227
    test 612 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 2: -23.248
    test 613 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 2: 24.829
    test 614 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 2: -21.706  FAILED, KNOWN, expected -21.705
    test 615 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 2: -17.054  FAILED, KNOWN, expected -17.053
    test 616 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 2: 11.716
    test 617 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 2: -19.529  FAILED, KNOWN, expected -19.530
    test 618 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 2: 45.929
    test 619 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 2: -8.283
    test 620 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 2: -8.467
    test 621 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 2: -1.829
    test 622 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 2: -16.505  FAILED, KNOWN, expected -16.506
    test 623 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 2: -35.384
    test 624 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 2: -38.962  FAILED, KNOWN, expected -38.963
    test 625 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 2: -6.956
    test 626 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 2: 51.006  FAILED, KNOWN, expected 51.005
    test 627 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 2: 1.193  FAILED, KNOWN, expected 1.192
    test 628 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 2: -15.038
    test 629 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 2: 17.792  FAILED, KNOWN, expected 17.791
    test 630 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 2: 44.653  FAILED, KNOWN, expected 44.652
    test 631 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 2: -17.972  FAILED, KNOWN, expected -17.971
    test 632 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 2: 11.631
    test 633 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 2: 7.394
    test 634 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 2: 7.932
    test 635 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 2: -60.594  FAILED, KNOWN, expected -60.593
    test 636 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 2: 4.382  FAILED, KNOWN, expected 4.384
    test 637 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 2: 1.296  FAILED, KNOWN, expected 1.297
    test 638 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 2: 30.852
    test 639 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 2: 2.705  FAILED, KNOWN, expected 2.704
    test 640 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 2: 21.263  FAILED, KNOWN, expected 21.264
    test 641 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 2: 5.443
    test 642 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 2: 9.998
    test 643 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 2: 22.428
    test 644 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 2: -23.156  FAILED, KNOWN, expected -23.154
    test 645 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 2: -17.662
    test 646 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 2: -36.840  FAILED, KNOWN, expected -36.839
    test 647 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 2: -61.220  FAILED, KNOWN, expected -61.221
    test 648 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 2: 20.355
    test 649 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 2: 13.147
    test 650 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 2: 41.072
    test 651 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 2: 42.982
    test 652 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 2: -22.997  FAILED, KNOWN, expected -22.998
    test 653 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 2: -20.662
    test 654 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 2: -8.438
    test 655 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 2: -8.711  FAILED, KNOWN, expected -8.712
    test 656 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 2: -12.654  FAILED, KNOWN, expected -12.653
    test 657 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 2: 17.163  FAILED, KNOWN, expected 17.166
    test 658 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 2: -19.873  FAILED, KNOWN, expected -19.874
    test 659 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 2: -31.124
    test 660 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 2: -17.307
    test 661 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 2: 23.437  FAILED, KNOWN, expected 23.434
    test 662 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 2: 4.508
    test 663 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 2: 11.550  FAILED, KNOWN, expected 11.549
    test 664 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 2: 5.749  FAILED, KNOWN, expected 5.748
    test 665 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 2: 28.788
    test 666 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 2: -30.588  FAILED, KNOWN, expected -30.589
    test 667 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 2: -15.273
    test 668 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 2: -18.624
    test 669 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 2: -37.872  FAILED, KNOWN, expected -37.873
    test 670 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 2: -26.511
    test 671 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 2: -39.600
    test 672 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 2: -22.689
    test 673 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 2: -30.066  FAILED, KNOWN, expected -30.067
    test 674 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 2: -48.093

    test 675 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.003

    test 676 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 677 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 678 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 679 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 680 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 681 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 682 GeoidKarney('egm2008-1.pgm').dtype: 'ushort'
    test 683 GeoidKarney('egm2008-1.pgm').knots: 233301600
    test 684 GeoidKarney('egm2008-1.pgm').mean: -1.317
    test 685 GeoidKarney('egm2008-1.pgm').nBytes: None
    test 686 GeoidKarney('egm2008-1.pgm').scipy: None
    test 687 GeoidKarney('egm2008-1.pgm').smooth: None
    test 688 GeoidKarney('egm2008-1.pgm').stdev: 29.244
    test 689 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 690 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 691 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 692 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 693 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 694 closed: True
    test 695 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 696 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 697 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 3: 12.637  FAILED, KNOWN, expected 12.636
    test 698 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 3: 0.749
    test 699 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 3: 65.110  FAILED, KNOWN, expected 65.109
    test 700 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 3: 24.889
    test 701 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 3: -29.556  FAILED, KNOWN, expected -29.557
    test 702 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 3: 9.741  FAILED, KNOWN, expected 9.742
    test 703 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 3: 30.060  FAILED, KNOWN, expected 30.059
    test 704 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 3: 60.690
    test 705 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 3: 69.134  FAILED, KNOWN, expected 69.133
    test 706 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 3: 36.521  FAILED, KNOWN, expected 36.520
    test 707 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 3: 6.801
    test 708 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 3: -20.652  FAILED, KNOWN, expected -20.651
    test 709 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 3: -3.040
    test 710 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 3: -1.329  FAILED, KNOWN, expected -1.328
    test 711 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 3: -2.171  FAILED, KNOWN, expected -2.172
    test 712 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 3: -17.411
    test 713 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 3: -16.426  FAILED, KNOWN, expected -16.425
    test 714 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 3: 24.699  FAILED, KNOWN, expected 24.698
    test 715 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 3: -18.328  FAILED, KNOWN, expected -18.329
    test 716 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 3: 43.802
    test 717 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 3: 18.716
    test 718 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 3: 44.468  FAILED, KNOWN, expected 44.469
    test 719 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 3: 49.943  FAILED, KNOWN, expected 49.944
    test 720 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 3: -35.878
    test 721 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 3: -40.777
    test 722 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 3: 26.559
    test 723 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 3: 49.362  FAILED, KNOWN, expected 49.361
    test 724 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 3: 21.106  FAILED, KNOWN, expected 21.107
    test 725 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 3: -7.203  FAILED, KNOWN, expected -7.202
    test 726 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 3: -17.167  FAILED, KNOWN, expected -17.168
    test 727 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 3: 18.359
    test 728 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 3: 52.117  FAILED, KNOWN, expected 52.118
    test 729 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 3: -38.950
    test 730 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 3: -9.935  FAILED, KNOWN, expected -9.934
    test 731 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 3: -2.879
    test 732 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 3: -5.025
    test 733 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 3: 24.296
    test 734 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 3: 25.131
    test 735 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 3: 40.720  FAILED, KNOWN, expected 40.721
    test 736 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 3: 22.387  FAILED, KNOWN, expected 22.388
    test 737 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 3: 22.485  FAILED, KNOWN, expected 22.486
    test 738 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 3: 14.942  FAILED, KNOWN, expected 14.943
    test 739 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 3: -47.387
    test 740 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 3: -18.404  FAILED, KNOWN, expected -18.403
    test 741 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 3: 10.185
    test 742 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 3: 5.670  FAILED, KNOWN, expected 5.671
    test 743 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 3: -24.577
    test 744 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 3: 43.288
    test 745 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 3: 13.747  FAILED, KNOWN, expected 13.748
    test 746 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 3: -5.342
    test 747 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 3: -25.579
    test 748 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 3: -9.849
    test 749 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 3: -10.490  FAILED, KNOWN, expected -10.491
    test 750 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 3: 0.243  FAILED, KNOWN, expected 0.244
    test 751 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 752 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 3: 57.401
    test 753 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 3: -17.889  FAILED, KNOWN, expected -17.890
    test 754 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 3: 46.423  FAILED, KNOWN, expected 46.421
    test 755 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 3: -14.475
    test 756 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 3: 11.118
    test 757 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 3: 42.291
    test 758 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 3: 22.327  FAILED, KNOWN, expected 22.326
    test 759 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 3: -33.098
    test 760 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 3: 9.431  FAILED, KNOWN, expected 9.430
    test 761 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 3: 6.032
    test 762 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 3: -44.330
    test 763 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 3: 21.775
    test 764 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 3: 29.243
    test 765 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 3: -40.677  FAILED, KNOWN, expected -40.676
    test 766 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 3: -31.352  FAILED, KNOWN, expected -31.353
    test 767 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 768 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 3: 60.628  FAILED, KNOWN, expected 60.629
    test 769 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 3: 6.617
    test 770 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 3: -31.887
    test 771 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 3: -26.536  FAILED, KNOWN, expected -26.535
    test 772 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 3: -29.631  FAILED, KNOWN, expected -29.630
    test 773 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 3: 22.274  FAILED, KNOWN, expected 22.275
    test 774 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 3: 17.095  FAILED, KNOWN, expected 17.094
    test 775 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 3: -20.940  FAILED, KNOWN, expected -20.941
    test 776 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 3: -42.740
    test 777 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 3: -21.651
    test 778 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 3: 25.240
    test 779 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 3: -8.758
    test 780 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 3: -19.606  FAILED, KNOWN, expected -19.607
    test 781 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 3: 26.258
    test 782 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 3: -3.823  FAILED, KNOWN, expected -3.824
    test 783 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 3: 18.195
    test 784 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 3: -17.724  FAILED, KNOWN, expected -17.725
    test 785 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 3: 14.512  FAILED, KNOWN, expected 14.513
    test 786 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 3: 16.808  FAILED, KNOWN, expected 16.809
    test 787 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 3: -8.025  FAILED, KNOWN, expected -8.026
    test 788 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 3: 9.689  FAILED, KNOWN, expected 9.688
    test 789 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 3: 6.218
    test 790 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 3: -2.725  FAILED, KNOWN, expected -2.724
    test 791 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 3: -42.566  FAILED, KNOWN, expected -42.565
    test 792 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 3: 38.342  FAILED, KNOWN, expected 38.341
    test 793 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 3: 33.888  FAILED, KNOWN, expected 33.889
    test 794 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 3: -37.381  FAILED, KNOWN, expected -37.380
    test 795 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 3: -1.857  FAILED, KNOWN, expected -1.858
    test 796 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 3: 34.196  FAILED, KNOWN, expected 34.195
    test 797 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 3: 12.767
    test 798 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 3: 15.612
    test 799 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 3: -11.063
    test 800 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 3: 27.386  FAILED, KNOWN, expected 27.387
    test 801 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 3: -23.817
    test 802 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 3: 18.713  FAILED, KNOWN, expected 18.712
    test 803 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 3: -7.343  FAILED, KNOWN, expected -7.344
    test 804 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 3: 29.997  FAILED, KNOWN, expected 29.998
    test 805 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 3: -61.869
    test 806 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 3: -24.938  FAILED, KNOWN, expected -24.937
    test 807 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 3: 38.557  FAILED, KNOWN, expected 38.556
    test 808 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 3: 19.671
    test 809 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 3: 2.273  FAILED, KNOWN, expected 2.272
    test 810 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 3: 24.863
    test 811 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 3: 21.636
    test 812 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 3: -33.850  FAILED, KNOWN, expected -33.851
    test 813 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 3: -5.299
    test 814 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 3: -6.789
    test 815 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 3: -35.030
    test 816 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 3: -15.338
    test 817 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 3: -79.356
    test 818 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 3: -16.649  FAILED, KNOWN, expected -16.650
    test 819 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 3: 36.359
    test 820 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 3: 3.614  FAILED, KNOWN, expected 3.615
    test 821 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 3: 23.946  FAILED, KNOWN, expected 23.947
    test 822 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 3: 51.494  FAILED, KNOWN, expected 51.495
    test 823 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 3: -30.909  FAILED, KNOWN, expected -30.910
    test 824 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 3: -52.131
    test 825 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 3: 37.046  FAILED, KNOWN, expected 37.045
    test 826 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 3: 64.181  FAILED, KNOWN, expected 64.180
    test 827 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 3: -62.475
    test 828 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 3: -8.454
    test 829 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 3: 40.834
    test 830 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 3: -60.455
    test 831 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 3: 9.728  FAILED, KNOWN, expected 9.727
    test 832 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 3: 32.141  FAILED, KNOWN, expected 32.142
    test 833 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 3: -6.221  FAILED, KNOWN, expected -6.220
    test 834 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 3: 32.488  FAILED, KNOWN, expected 32.489
    test 835 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 3: -24.692
    test 836 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 3: -38.749
    test 837 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 838 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 3: -13.454  FAILED, KNOWN, expected -13.455
    test 839 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 3: 16.627
    test 840 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 3: -22.221
    test 841 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 3: -4.836
    test 842 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 3: 19.571
    test 843 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 3: -9.227
    test 844 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 845 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 3: 24.829
    test 846 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 3: -21.706  FAILED, KNOWN, expected -21.705
    test 847 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 3: -17.054  FAILED, KNOWN, expected -17.053
    test 848 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 3: 11.715  FAILED, KNOWN, expected 11.716
    test 849 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 3: -19.529  FAILED, KNOWN, expected -19.530
    test 850 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 3: 45.929
    test 851 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 3: -8.283
    test 852 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 3: -8.467
    test 853 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 3: -1.829
    test 854 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 3: -16.505  FAILED, KNOWN, expected -16.506
    test 855 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 3: -35.384
    test 856 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 3: -38.962  FAILED, KNOWN, expected -38.963
    test 857 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 3: -6.956
    test 858 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 3: 51.006  FAILED, KNOWN, expected 51.005
    test 859 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 3: 1.193  FAILED, KNOWN, expected 1.192
    test 860 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 3: -15.038
    test 861 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 3: 17.791
    test 862 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 3: 44.653  FAILED, KNOWN, expected 44.652
    test 863 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 3: -17.972  FAILED, KNOWN, expected -17.971
    test 864 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 3: 11.630  FAILED, KNOWN, expected 11.631
    test 865 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 3: 7.394
    test 866 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 3: 7.932
    test 867 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 3: -60.594  FAILED, KNOWN, expected -60.593
    test 868 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 3: 4.384
    test 869 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 3: 1.296  FAILED, KNOWN, expected 1.297
    test 870 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 3: 30.852
    test 871 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 3: 2.705  FAILED, KNOWN, expected 2.704
    test 872 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 3: 21.264
    test 873 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 3: 5.443
    test 874 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 3: 9.998
    test 875 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 3: 22.428
    test 876 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 3: -23.155  FAILED, KNOWN, expected -23.154
    test 877 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 3: -17.662
    test 878 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 879 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 3: -61.220  FAILED, KNOWN, expected -61.221
    test 880 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 3: 20.355
    test 881 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 3: 13.147
    test 882 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 3: 41.073  FAILED, KNOWN, expected 41.072
    test 883 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 3: 42.982
    test 884 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 885 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 3: -20.662
    test 886 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 3: -8.438
    test 887 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 3: -8.711  FAILED, KNOWN, expected -8.712
    test 888 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 3: -12.653
    test 889 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 3: 17.166
    test 890 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 3: -19.873  FAILED, KNOWN, expected -19.874
    test 891 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 3: -31.124
    test 892 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 3: -17.306  FAILED, KNOWN, expected -17.307
    test 893 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 3: 23.435  FAILED, KNOWN, expected 23.434
    test 894 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 3: 4.508
    test 895 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 3: 11.550  FAILED, KNOWN, expected 11.549
    test 896 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 3: 5.749  FAILED, KNOWN, expected 5.748
    test 897 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 3: 28.788
    test 898 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.589
    test 899 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 900 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 901 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 902 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 903 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 904 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 905 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.067
    test 906 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 907 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001

    test 908 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 909 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 910 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 911 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 912 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 913 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 914 GeoidKarney('egm2008-1.pgm').dtype: 'ushort'
    test 915 GeoidKarney('egm2008-1.pgm').knots: 233301600
    test 916 GeoidKarney('egm2008-1.pgm').mean: -1.317
    test 917 GeoidKarney('egm2008-1.pgm').nBytes: None
    test 918 GeoidKarney('egm2008-1.pgm').scipy: None
    test 919 GeoidKarney('egm2008-1.pgm').smooth: None
    test 920 GeoidKarney('egm2008-1.pgm').stdev: 29.244
    test 921 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 922 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 923 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 924 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 925 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 926 closed: True
    test 927 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 928 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    232 tests skipped (464): no scipy
    test 929 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 2: 11.727  FAILED, KNOWN, expected 11.729
    test 930 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 2: 0.280  FAILED, KNOWN, expected 0.270
    test 931 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 2: 67.071  FAILED, KNOWN, expected 67.074
    test 932 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 2: 25.366  FAILED, KNOWN, expected 25.344
    test 933 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 2: -28.913  FAILED, KNOWN, expected -28.919
    test 934 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 2: 14.383  FAILED, KNOWN, expected 14.386
    test 935 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 2: 30.701  FAILED, KNOWN, expected 30.700
    test 936 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 2: 62.222  FAILED, KNOWN, expected 62.225
    test 937 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 2: 70.221  FAILED, KNOWN, expected 70.222
    test 938 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 2: 34.290  FAILED, KNOWN, expected 34.336
    test 939 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 2: 8.205  FAILED, KNOWN, expected 8.206
    test 940 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 2: -20.068  FAILED, KNOWN, expected -20.074
    test 941 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 2: -3.129
    test 942 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 2: -3.214  FAILED, KNOWN, expected -3.217
    test 943 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 2: -1.536  FAILED, KNOWN, expected -1.531
    test 944 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 2: -16.742
    test 945 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 2: -15.418  FAILED, KNOWN, expected -15.412
    test 946 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 2: 25.077  FAILED, KNOWN, expected 25.078
    test 947 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 2: -18.114  FAILED, KNOWN, expected -18.120
    test 948 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 2: 46.230  FAILED, KNOWN, expected 46.224
    test 949 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 2: 18.648  FAILED, KNOWN, expected 18.649
    test 950 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 2: 44.759  FAILED, KNOWN, expected 44.764
    test 951 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 2: 51.095  FAILED, KNOWN, expected 51.089
    test 952 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 2: -34.436  FAILED, KNOWN, expected -34.471
    test 953 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 2: -39.124
    test 954 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 2: 28.131  FAILED, KNOWN, expected 28.142
    test 955 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 2: 49.606  FAILED, KNOWN, expected 49.619
    test 956 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 2: 22.568  FAILED, KNOWN, expected 22.575
    test 957 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 2: -6.894  FAILED, KNOWN, expected -6.893
    test 958 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 2: -15.017  FAILED, KNOWN, expected -15.012
    test 959 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 2: 18.777  FAILED, KNOWN, expected 18.776
    test 960 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 2: 53.644  FAILED, KNOWN, expected 53.645
    test 961 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 2: -39.058  FAILED, KNOWN, expected -39.074
    test 962 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 2: -9.643  FAILED, KNOWN, expected -9.645
    test 963 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 2: -2.520  FAILED, KNOWN, expected -2.528
    test 964 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 2: -6.918  FAILED, KNOWN, expected -6.907
    test 965 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 2: 21.758  FAILED, KNOWN, expected 21.711
    test 966 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 2: 25.617  FAILED, KNOWN, expected 25.611
    test 967 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 2: 41.585  FAILED, KNOWN, expected 41.569
    test 968 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 2: 23.283  FAILED, KNOWN, expected 23.280
    test 969 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 2: 24.497  FAILED, KNOWN, expected 24.502
    test 970 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 2: 14.825  FAILED, KNOWN, expected 14.826
    test 971 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 2: -45.104
    test 972 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 2: -17.254  FAILED, KNOWN, expected -17.252
    test 973 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 2: 12.984  FAILED, KNOWN, expected 12.972
    test 974 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 2: 4.773  FAILED, KNOWN, expected 4.776
    test 975 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 2: -23.577
    test 976 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 2: 43.884  FAILED, KNOWN, expected 43.885
    test 977 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 2: 17.064  FAILED, KNOWN, expected 17.072
    test 978 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 2: -6.637  FAILED, KNOWN, expected -6.643
    test 979 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 2: -23.332  FAILED, KNOWN, expected -23.325
    test 980 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 2: -10.689  FAILED, KNOWN, expected -10.698
    test 981 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 2: -10.305  FAILED, KNOWN, expected -10.265
    test 982 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 2: 0.692  FAILED, KNOWN, expected 0.689
    test 983 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 2: -43.763  FAILED, KNOWN, expected -43.758
    test 984 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 2: 57.551  FAILED, KNOWN, expected 57.554
    test 985 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 2: -16.939  FAILED, KNOWN, expected -16.936
    test 986 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 2: 45.227  FAILED, KNOWN, expected 45.295
    test 987 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 2: -13.585  FAILED, KNOWN, expected -13.586
    test 988 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 2: 11.469  FAILED, KNOWN, expected 11.468
    test 989 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 2: 42.090  FAILED, KNOWN, expected 42.092
    test 990 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 2: 22.828  FAILED, KNOWN, expected 22.830
    test 991 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 2: -32.300  FAILED, KNOWN, expected -32.302
    test 992 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 2: 9.212  FAILED, KNOWN, expected 9.228
    test 993 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 2: 6.000  FAILED, KNOWN, expected 5.965
    test 994 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 2: -45.000  FAILED, KNOWN, expected -45.013
    test 995 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 2: 21.148  FAILED, KNOWN, expected 21.118
    test 996 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 2: 30.500  FAILED, KNOWN, expected 30.497
    test 997 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 2: -40.416  FAILED, KNOWN, expected -40.396
    test 998 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 2: -31.726  FAILED, KNOWN, expected -31.704
    test 999 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 2: -32.271  FAILED, KNOWN, expected -32.277
    test 1000 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 2: 61.016  FAILED, KNOWN, expected 61.024
    test 1001 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 2: 5.017  FAILED, KNOWN, expected 4.994
    test 1002 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 2: -30.240  FAILED, KNOWN, expected -30.237
    test 1003 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 2: -26.007  FAILED, KNOWN, expected -26.006
    test 1004 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 2: -29.280  FAILED, KNOWN, expected -29.283
    test 1005 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 2: 22.400  FAILED, KNOWN, expected 22.394
    test 1006 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 2: 17.549  FAILED, KNOWN, expected 17.550
    test 1007 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 2: -20.621  FAILED, KNOWN, expected -20.622
    test 1008 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 2: -41.463  FAILED, KNOWN, expected -41.484
    test 1009 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 2: -20.969  FAILED, KNOWN, expected -20.968
    test 1010 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 2: 25.561  FAILED, KNOWN, expected 25.568
    test 1011 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 2: -8.574  FAILED, KNOWN, expected -8.581
    test 1012 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 2: -18.329
    test 1013 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 2: 25.003  FAILED, KNOWN, expected 25.001
    test 1014 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 2: -2.945  FAILED, KNOWN, expected -2.940
    test 1015 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 2: 18.220  FAILED, KNOWN, expected 18.228
    test 1016 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 2: -16.511  FAILED, KNOWN, expected -16.507
    test 1017 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 2: 14.277  FAILED, KNOWN, expected 14.275
    test 1018 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 2: 16.866  FAILED, KNOWN, expected 16.852
    test 1019 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 2: -6.870  FAILED, KNOWN, expected -6.872
    test 1020 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 2: 8.987  FAILED, KNOWN, expected 9.006
    test 1021 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 2: 6.277  FAILED, KNOWN, expected 6.296
    test 1022 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 2: -1.483  FAILED, KNOWN, expected -1.481
    test 1023 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 2: -40.929  FAILED, KNOWN, expected -40.915
    test 1024 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 2: 37.481  FAILED, KNOWN, expected 37.495
    test 1025 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 2: 32.222  FAILED, KNOWN, expected 32.258
    test 1026 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 2: -41.529
    test 1027 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 2: -1.377
    test 1028 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 2: 35.263  FAILED, KNOWN, expected 35.280
    test 1029 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 2: 12.958
    test 1030 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 2: 18.423  FAILED, KNOWN, expected 18.307
    test 1031 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 2: -10.400
    test 1032 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 2: 28.649  FAILED, KNOWN, expected 28.638
    test 1033 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 2: -24.060  FAILED, KNOWN, expected -24.059
    test 1034 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 2: 18.800  FAILED, KNOWN, expected 18.806
    test 1035 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 2: -6.808  FAILED, KNOWN, expected -6.820
    test 1036 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 2: 31.485  FAILED, KNOWN, expected 31.486
    test 1037 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 2: -62.021  FAILED, KNOWN, expected -62.024
    test 1038 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 2: -24.246  FAILED, KNOWN, expected -24.248
    test 1039 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 2: 43.246  FAILED, KNOWN, expected 43.255
    test 1040 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 2: 18.496  FAILED, KNOWN, expected 18.498
    test 1041 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 2: 4.100  FAILED, KNOWN, expected 4.067
    test 1042 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 2: 25.456  FAILED, KNOWN, expected 25.454
    test 1043 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 2: 26.619  FAILED, KNOWN, expected 26.657
    test 1044 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 2: -32.003  FAILED, KNOWN, expected -31.966
    test 1045 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 2: -4.422  FAILED, KNOWN, expected -4.415
    test 1046 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 2: -6.717  FAILED, KNOWN, expected -6.741
    test 1047 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 2: -34.915  FAILED, KNOWN, expected -34.900
    test 1048 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 2: -14.214  FAILED, KNOWN, expected -14.223
    test 1049 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 2: -79.313  FAILED, KNOWN, expected -79.317
    test 1050 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 2: -16.163
    test 1051 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 2: 36.296  FAILED, KNOWN, expected 36.287
    test 1052 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 2: 4.066  FAILED, KNOWN, expected 4.068
    test 1053 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 2: 24.401  FAILED, KNOWN, expected 24.407
    test 1054 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 2: 53.051  FAILED, KNOWN, expected 53.054
    test 1055 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 2: -30.616  FAILED, KNOWN, expected -30.622
    test 1056 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 2: -53.544  FAILED, KNOWN, expected -53.540
    test 1057 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 2: 36.274  FAILED, KNOWN, expected 36.262
    test 1058 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 2: 64.339  FAILED, KNOWN, expected 64.369
    test 1059 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 2: -61.320  FAILED, KNOWN, expected -61.300
    test 1060 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 2: -7.996  FAILED, KNOWN, expected -7.999
    test 1061 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 2: 41.489  FAILED, KNOWN, expected 41.477
    test 1062 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 2: -59.881  FAILED, KNOWN, expected -59.876
    test 1063 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 2: 8.422  FAILED, KNOWN, expected 8.404
    test 1064 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 2: 39.200  FAILED, KNOWN, expected 39.152
    test 1065 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 2: -7.068  FAILED, KNOWN, expected -7.076
    test 1066 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 2: 33.179  FAILED, KNOWN, expected 33.178
    test 1067 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 2: -23.801  FAILED, KNOWN, expected -23.832
    test 1068 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 2: -38.175  FAILED, KNOWN, expected -38.206
    test 1069 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 2: -22.171  FAILED, KNOWN, expected -22.142
    test 1070 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 2: -13.746  FAILED, KNOWN, expected -13.765
    test 1071 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 2: 16.909  FAILED, KNOWN, expected 16.898
    test 1072 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 2: -22.479  FAILED, KNOWN, expected -22.474
    test 1073 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 2: -4.710  FAILED, KNOWN, expected -4.718
    test 1074 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 2: 16.680  FAILED, KNOWN, expected 16.635
    test 1075 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 2: -9.012
    test 1076 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 2: -23.556  FAILED, KNOWN, expected -23.543
    test 1077 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 2: 26.240  FAILED, KNOWN, expected 26.236
    test 1078 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 2: -21.963  FAILED, KNOWN, expected -21.953
    test 1079 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 2: -17.959
    test 1080 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 2: 9.072  FAILED, KNOWN, expected 9.078
    test 1081 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 2: -19.160  FAILED, KNOWN, expected -19.158
    test 1082 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 2: 46.776
    test 1083 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 2: -8.053  FAILED, KNOWN, expected -8.055
    test 1084 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 2: -7.681  FAILED, KNOWN, expected -7.696
    test 1085 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 2: -1.052  FAILED, KNOWN, expected -1.049
    test 1086 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 2: -16.081
    test 1087 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 2: -35.429  FAILED, KNOWN, expected -35.427
    test 1088 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 2: -38.648
    test 1089 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 2: -5.524  FAILED, KNOWN, expected -5.519
    test 1090 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 2: 53.448  FAILED, KNOWN, expected 53.431
    test 1091 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 2: 1.977  FAILED, KNOWN, expected 1.979
    test 1092 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 2: -13.131  FAILED, KNOWN, expected -13.197
    test 1093 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 2: 18.953  FAILED, KNOWN, expected 18.945
    test 1094 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 2: 45.180  FAILED, KNOWN, expected 45.187
    test 1095 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 2: -17.155  FAILED, KNOWN, expected -17.145
    test 1096 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 2: 13.136  FAILED, KNOWN, expected 13.146
    test 1097 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 2: 4.933
    test 1098 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 2: 12.313  FAILED, KNOWN, expected 12.326
    test 1099 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 2: -60.029  FAILED, KNOWN, expected -60.030
    test 1100 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 2: 3.034  FAILED, KNOWN, expected 3.110
    test 1101 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 2: -2.741
    test 1102 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 2: 32.108  FAILED, KNOWN, expected 32.085
    test 1103 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 2: 2.069  FAILED, KNOWN, expected 2.060
    test 1104 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 2: 22.901  FAILED, KNOWN, expected 22.916
    test 1105 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 2: 5.526  FAILED, KNOWN, expected 5.519
    test 1106 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 2: 11.019  FAILED, KNOWN, expected 11.020
    test 1107 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 2: 22.181  FAILED, KNOWN, expected 22.171
    test 1108 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 2: -22.957  FAILED, KNOWN, expected -22.944
    test 1109 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 2: -17.583  FAILED, KNOWN, expected -17.580
    test 1110 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 2: -35.728  FAILED, KNOWN, expected -35.738
    test 1111 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 2: -61.036  FAILED, KNOWN, expected -61.040
    test 1112 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 2: 20.897  FAILED, KNOWN, expected 20.907
    test 1113 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 2: 13.865  FAILED, KNOWN, expected 13.874
    test 1114 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 2: 40.920  FAILED, KNOWN, expected 40.929
    test 1115 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 2: 43.196  FAILED, KNOWN, expected 43.191
    test 1116 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 2: -22.016  FAILED, KNOWN, expected -22.006
    test 1117 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 2: -20.378  FAILED, KNOWN, expected -20.375
    test 1118 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 2: -7.856  FAILED, KNOWN, expected -7.852
    test 1119 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 2: -8.680  FAILED, KNOWN, expected -8.674
    test 1120 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 2: -14.089  FAILED, KNOWN, expected -14.117
    test 1121 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 2: 17.249  FAILED, KNOWN, expected 17.251
    test 1122 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 2: -19.434  FAILED, KNOWN, expected -19.436
    test 1123 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 2: -31.333  FAILED, KNOWN, expected -31.330
    test 1124 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 2: -17.088  FAILED, KNOWN, expected -17.090
    test 1125 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 2: 24.177  FAILED, KNOWN, expected 24.184
    test 1126 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 2: 6.146  FAILED, KNOWN, expected 6.142
    test 1127 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 2: 11.771  FAILED, KNOWN, expected 11.693
    test 1128 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 2: 6.830  FAILED, KNOWN, expected 6.840
    test 1129 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 2: 31.293  FAILED, KNOWN, expected 31.298
    test 1130 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 2: -31.953  FAILED, KNOWN, expected -31.952
    test 1131 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 2: -14.946
    test 1132 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 2: -17.031  FAILED, KNOWN, expected -17.032
    test 1133 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 2: -37.962
    test 1134 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 2: -26.493  FAILED, KNOWN, expected -26.492
    test 1135 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 2: -39.543
    test 1136 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 2: -22.557  FAILED, KNOWN, expected -22.556
    test 1137 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 2: -28.710
    test 1138 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 2: -46.590

    test 1139 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.116

    test 1140 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1141 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1142 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1143 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1144 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1145 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1146 GeoidKarney('egm84-15.pgm').dtype: 'ushort'
    test 1147 GeoidKarney('egm84-15.pgm').knots: 1038240
    test 1148 GeoidKarney('egm84-15.pgm').mean: -1.317
    test 1149 GeoidKarney('egm84-15.pgm').nBytes: None
    test 1150 GeoidKarney('egm84-15.pgm').scipy: None
    test 1151 GeoidKarney('egm84-15.pgm').smooth: None
    test 1152 GeoidKarney('egm84-15.pgm').stdev: 29.244
    test 1153 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1154 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1155 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1156 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1157 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1158 closed: True
    test 1159 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1160 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1161 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 3: 11.729
    test 1162 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 3: 0.271  FAILED, KNOWN, expected 0.270
    test 1163 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 3: 67.074
    test 1164 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 3: 25.345  FAILED, KNOWN, expected 25.344
    test 1165 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 3: -28.919
    test 1166 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 3: 14.386
    test 1167 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 3: 30.699  FAILED, KNOWN, expected 30.700
    test 1168 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 3: 62.226  FAILED, KNOWN, expected 62.225
    test 1169 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 3: 70.222
    test 1170 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 3: 34.334  FAILED, KNOWN, expected 34.336
    test 1171 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 3: 8.206
    test 1172 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 3: -20.073  FAILED, KNOWN, expected -20.074
    test 1173 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 3: -3.129
    test 1174 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 3: -3.216  FAILED, KNOWN, expected -3.217
    test 1175 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 3: -1.532  FAILED, KNOWN, expected -1.531
    test 1176 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 3: -16.741  FAILED, KNOWN, expected -16.742
    test 1177 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 3: -15.413  FAILED, KNOWN, expected -15.412
    test 1178 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 3: 25.079  FAILED, KNOWN, expected 25.078
    test 1179 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 3: -18.120
    test 1180 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 3: 46.225  FAILED, KNOWN, expected 46.224
    test 1181 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 3: 18.649
    test 1182 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 3: 44.763  FAILED, KNOWN, expected 44.764
    test 1183 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 3: 51.090  FAILED, KNOWN, expected 51.089
    test 1184 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 3: -34.470  FAILED, KNOWN, expected -34.471
    test 1185 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 3: -39.125  FAILED, KNOWN, expected -39.124
    test 1186 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 3: 28.142
    test 1187 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 3: 49.620  FAILED, KNOWN, expected 49.619
    test 1188 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 3: 22.576  FAILED, KNOWN, expected 22.575
    test 1189 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 3: -6.893
    test 1190 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 3: -15.013  FAILED, KNOWN, expected -15.012
    test 1191 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 3: 18.777  FAILED, KNOWN, expected 18.776
    test 1192 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 3: 53.645
    test 1193 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 3: -39.073  FAILED, KNOWN, expected -39.074
    test 1194 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 3: -9.645
    test 1195 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 3: -2.527  FAILED, KNOWN, expected -2.528
    test 1196 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 3: -6.907
    test 1197 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 3: 21.715  FAILED, KNOWN, expected 21.711
    test 1198 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 3: 25.612  FAILED, KNOWN, expected 25.611
    test 1199 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 3: 41.570  FAILED, KNOWN, expected 41.569
    test 1200 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 3: 23.280
    test 1201 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 3: 24.502
    test 1202 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 3: 14.825  FAILED, KNOWN, expected 14.826
    test 1203 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 3: -45.104
    test 1204 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 3: -17.252
    test 1205 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 3: 12.972
    test 1206 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 3: 4.777  FAILED, KNOWN, expected 4.776
    test 1207 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 3: -23.578  FAILED, KNOWN, expected -23.577
    test 1208 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 3: 43.886  FAILED, KNOWN, expected 43.885
    test 1209 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 3: 17.071  FAILED, KNOWN, expected 17.072
    test 1210 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 3: -6.643
    test 1211 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 3: -23.326  FAILED, KNOWN, expected -23.325
    test 1212 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 3: -10.699  FAILED, KNOWN, expected -10.698
    test 1213 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 3: -10.268  FAILED, KNOWN, expected -10.265
    test 1214 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 3: 0.690  FAILED, KNOWN, expected 0.689
    test 1215 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1216 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 3: 57.553  FAILED, KNOWN, expected 57.554
    test 1217 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 3: -16.937  FAILED, KNOWN, expected -16.936
    test 1218 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 3: 45.291  FAILED, KNOWN, expected 45.295
    test 1219 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 3: -13.585  FAILED, KNOWN, expected -13.586
    test 1220 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 3: 11.467  FAILED, KNOWN, expected 11.468
    test 1221 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 3: 42.092
    test 1222 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 3: 22.830
    test 1223 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 3: -32.302
    test 1224 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 3: 9.228
    test 1225 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 3: 5.966  FAILED, KNOWN, expected 5.965
    test 1226 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 3: -45.012  FAILED, KNOWN, expected -45.013
    test 1227 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 3: 21.118
    test 1228 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 3: 30.497
    test 1229 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 3: -40.397  FAILED, KNOWN, expected -40.396
    test 1230 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 3: -31.701  FAILED, KNOWN, expected -31.704
    test 1231 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.276  FAILED, KNOWN, expected -32.277
    test 1232 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 3: 61.024
    test 1233 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 3: 4.996  FAILED, KNOWN, expected 4.994
    test 1234 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 3: -30.238  FAILED, KNOWN, expected -30.237
    test 1235 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 3: -26.006
    test 1236 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 3: -29.283
    test 1237 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 3: 22.393  FAILED, KNOWN, expected 22.394
    test 1238 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 3: 17.550
    test 1239 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 3: -20.623  FAILED, KNOWN, expected -20.622
    test 1240 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 3: -41.482  FAILED, KNOWN, expected -41.484
    test 1241 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 3: -20.968
    test 1242 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 3: 25.567  FAILED, KNOWN, expected 25.568
    test 1243 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 3: -8.581
    test 1244 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 3: -18.330  FAILED, KNOWN, expected -18.329
    test 1245 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 3: 25.000  FAILED, KNOWN, expected 25.001
    test 1246 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 3: -2.941  FAILED, KNOWN, expected -2.940
    test 1247 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 3: 18.229  FAILED, KNOWN, expected 18.228
    test 1248 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 3: -16.507
    test 1249 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 3: 14.275
    test 1250 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 3: 16.853  FAILED, KNOWN, expected 16.852
    test 1251 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 3: -6.872
    test 1252 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 3: 9.005  FAILED, KNOWN, expected 9.006
    test 1253 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 3: 6.294  FAILED, KNOWN, expected 6.296
    test 1254 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 3: -1.482  FAILED, KNOWN, expected -1.481
    test 1255 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 3: -40.916  FAILED, KNOWN, expected -40.915
    test 1256 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 3: 37.495
    test 1257 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 3: 32.255  FAILED, KNOWN, expected 32.258
    test 1258 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 3: -41.528  FAILED, KNOWN, expected -41.529
    test 1259 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 3: -1.376  FAILED, KNOWN, expected -1.377
    test 1260 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 3: 35.279  FAILED, KNOWN, expected 35.280
    test 1261 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 3: 12.958
    test 1262 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 3: 18.313  FAILED, KNOWN, expected 18.307
    test 1263 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 3: -10.400
    test 1264 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 3: 28.640  FAILED, KNOWN, expected 28.638
    test 1265 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 3: -24.059
    test 1266 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 3: 18.806
    test 1267 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 3: -6.819  FAILED, KNOWN, expected -6.820
    test 1268 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 3: 31.486
    test 1269 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 3: -62.024
    test 1270 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 3: -24.247  FAILED, KNOWN, expected -24.248
    test 1271 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 3: 43.255
    test 1272 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 3: 18.499  FAILED, KNOWN, expected 18.498
    test 1273 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 3: 4.069  FAILED, KNOWN, expected 4.067
    test 1274 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 3: 25.455  FAILED, KNOWN, expected 25.454
    test 1275 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 3: 26.655  FAILED, KNOWN, expected 26.657
    test 1276 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 3: -31.967  FAILED, KNOWN, expected -31.966
    test 1277 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 3: -4.416  FAILED, KNOWN, expected -4.415
    test 1278 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 3: -6.741
    test 1279 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 3: -34.902  FAILED, KNOWN, expected -34.900
    test 1280 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 3: -14.223
    test 1281 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 3: -79.317
    test 1282 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 3: -16.162  FAILED, KNOWN, expected -16.163
    test 1283 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 3: 36.288  FAILED, KNOWN, expected 36.287
    test 1284 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 3: 4.067  FAILED, KNOWN, expected 4.068
    test 1285 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 3: 24.406  FAILED, KNOWN, expected 24.407
    test 1286 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 3: 53.053  FAILED, KNOWN, expected 53.054
    test 1287 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 3: -30.621  FAILED, KNOWN, expected -30.622
    test 1288 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 3: -53.540
    test 1289 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 3: 36.262
    test 1290 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 3: 64.367  FAILED, KNOWN, expected 64.369
    test 1291 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 3: -61.301  FAILED, KNOWN, expected -61.300
    test 1292 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 3: -8.000  FAILED, KNOWN, expected -7.999
    test 1293 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 3: 41.479  FAILED, KNOWN, expected 41.477
    test 1294 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 3: -59.875  FAILED, KNOWN, expected -59.876
    test 1295 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 3: 8.404
    test 1296 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 3: 39.154  FAILED, KNOWN, expected 39.152
    test 1297 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 3: -7.076
    test 1298 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 3: 33.179  FAILED, KNOWN, expected 33.178
    test 1299 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 3: -23.832
    test 1300 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 3: -38.206
    test 1301 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.144  FAILED, KNOWN, expected -22.142
    test 1302 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 3: -13.763  FAILED, KNOWN, expected -13.765
    test 1303 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 3: 16.899  FAILED, KNOWN, expected 16.898
    test 1304 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 3: -22.475  FAILED, KNOWN, expected -22.474
    test 1305 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 3: -4.717  FAILED, KNOWN, expected -4.718
    test 1306 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 3: 16.635
    test 1307 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 3: -9.011  FAILED, KNOWN, expected -9.012
    test 1308 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 1309 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 3: 26.236
    test 1310 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 3: -21.955  FAILED, KNOWN, expected -21.953
    test 1311 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 3: -17.959
    test 1312 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 3: 9.078
    test 1313 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 3: -19.157  FAILED, KNOWN, expected -19.158
    test 1314 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 3: 46.776
    test 1315 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 3: -8.055
    test 1316 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 3: -7.695  FAILED, KNOWN, expected -7.696
    test 1317 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 3: -1.048  FAILED, KNOWN, expected -1.049
    test 1318 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 3: -16.082  FAILED, KNOWN, expected -16.081
    test 1319 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 3: -35.426  FAILED, KNOWN, expected -35.427
    test 1320 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 3: -38.648
    test 1321 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 3: -5.519
    test 1322 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 3: 53.430  FAILED, KNOWN, expected 53.431
    test 1323 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 3: 1.978  FAILED, KNOWN, expected 1.979
    test 1324 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 3: -13.194  FAILED, KNOWN, expected -13.197
    test 1325 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 3: 18.945
    test 1326 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 3: 45.185  FAILED, KNOWN, expected 45.187
    test 1327 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 3: -17.146  FAILED, KNOWN, expected -17.145
    test 1328 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 3: 13.145  FAILED, KNOWN, expected 13.146
    test 1329 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 3: 4.932  FAILED, KNOWN, expected 4.933
    test 1330 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 3: 12.327  FAILED, KNOWN, expected 12.326
    test 1331 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 3: -60.029  FAILED, KNOWN, expected -60.030
    test 1332 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 3: 3.107  FAILED, KNOWN, expected 3.110
    test 1333 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 3: -2.741
    test 1334 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 3: 32.086  FAILED, KNOWN, expected 32.085
    test 1335 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 3: 2.060
    test 1336 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 3: 22.916
    test 1337 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 3: 5.519
    test 1338 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 3: 11.021  FAILED, KNOWN, expected 11.020
    test 1339 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 3: 22.171
    test 1340 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 3: -22.945  FAILED, KNOWN, expected -22.944
    test 1341 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 3: -17.579  FAILED, KNOWN, expected -17.580
    test 1342 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 1343 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 3: -61.040
    test 1344 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 3: 20.906  FAILED, KNOWN, expected 20.907
    test 1345 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 3: 13.874
    test 1346 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 3: 40.928  FAILED, KNOWN, expected 40.929
    test 1347 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 3: 43.191
    test 1348 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.006
    test 1349 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 3: -20.375
    test 1350 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 3: -7.851  FAILED, KNOWN, expected -7.852
    test 1351 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 3: -8.675  FAILED, KNOWN, expected -8.674
    test 1352 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 3: -14.116  FAILED, KNOWN, expected -14.117
    test 1353 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 3: 17.252  FAILED, KNOWN, expected 17.251
    test 1354 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 3: -19.435  FAILED, KNOWN, expected -19.436
    test 1355 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 3: -31.331  FAILED, KNOWN, expected -31.330
    test 1356 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 3: -17.091  FAILED, KNOWN, expected -17.090
    test 1357 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 3: 24.184
    test 1358 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 3: 6.142
    test 1359 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 3: 11.693
    test 1360 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 3: 6.839  FAILED, KNOWN, expected 6.840
    test 1361 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 3: 31.298
    test 1362 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.952
    test 1363 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 1364 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.032
    test 1365 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 1366 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.492
    test 1367 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 1368 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.556
    test 1369 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 1370 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 1371 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.005

    test 1372 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1373 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1374 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1375 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1376 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1377 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1378 GeoidKarney('egm84-15.pgm').dtype: 'ushort'
    test 1379 GeoidKarney('egm84-15.pgm').knots: 1038240
    test 1380 GeoidKarney('egm84-15.pgm').mean: -1.317
    test 1381 GeoidKarney('egm84-15.pgm').nBytes: None
    test 1382 GeoidKarney('egm84-15.pgm').scipy: None
    test 1383 GeoidKarney('egm84-15.pgm').smooth: None
    test 1384 GeoidKarney('egm84-15.pgm').stdev: 29.244
    test 1385 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1386 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1387 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1388 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1389 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1390 closed: True
    test 1391 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1392 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    232 tests skipped (696): no scipy
    31 tests skipped (727): no scipy

    778 of 1392 testGeoids.py tests (55.9%) FAILED, ALL KNOWN, 727 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.886 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testGreatCircle.py

    testing testGreatCircle.py 20.09.09

    testGreatCircle(pygeodesy.sphericalNvector, 21.06.09)
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 6 DistanceSameLocations: 0.0
    test 7 DistanceEqualLocations: 0.0
    test 8 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 9 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 10 InitialBearingEiffelToVersailles: 245.13460297
    test 11 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 12 InitialBearingVersaillesToEiffel: 65.003253951
    test 13 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 14 FinalBearingEiffelToVersailles: 245.00325395
    test 15 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 16 FinalBearingVersaillesToEiffel: 65.134602969
    test 17 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 18 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 19 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 20 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 21 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 22 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 23 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 24 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 25 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 26 Intersection: 48.83569095°N, 002.221252031°E
    test 27 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 28 CrossTrackDistance200m+90°: 200.0
    test 29 CrossTrackDistance200m+270°: -200.0
    test 30 CrossTrackDistanceCloseToZero: 0.0000000

    testGreatCircle(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 31 InitialBearingSameLocations: 0.0
    test 32 InitialBearingEqualLocations: 0.0
    test 33 FinalBearingSameLocations: 180.0
    test 34 FinalBearingEqualLocations: 180.0
    test 35 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 36 DistanceSameLocations: 0.0
    test 37 DistanceEqualLocations: 0.0
    test 38 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 39 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 40 InitialBearingEiffelToVersailles: 245.13460297
    test 41 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 42 InitialBearingVersaillesToEiffel: 65.003253951
    test 43 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 44 FinalBearingEiffelToVersailles: 245.00325395
    test 45 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 46 FinalBearingVersaillesToEiffel: 65.134602969
    test 47 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 48 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 49 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 50 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 51 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 52 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 53 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 54 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 55 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974331
    test 56 Intersection: 48.83569095°N, 002.221252031°E
    test 57 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 58 CrossTrackDistance200m+90°: 200.0
    test 59 CrossTrackDistance200m+270°: -200.0
    test 60 CrossTrackDistanceCloseToZero: 0.0000000

    10 of 60 testGreatCircle.py tests (16.7%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 13.417 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testHausdorff.py

    testing testHausdorff.py 21.05.17
    test 1 randomrange[0]: ()
    test 2 randomrange[1]: (0,)
    test 3 randomrange[2]: (1, 0)
    test 4 randomrange[8]: (0, 7, 5, 3, 2, 6, 1, 4)
    test 5 randomrange[32]: (18, 3, 9, 29, 22, 11, 30, 26, 0, 23, 31, 16, 13, 6, 7, 12, 8, 24, 27, 20, 5, 21, 10, 1, 19, 14, 4, 17, 25, 15, 2, 28)
    test 6 randomrange[128]: (109, 64, 14, 31, 88, 22, 32, 62, 73, 35, 60, 17, 76, 25, 68, 82, 91, 118, 34, 18, 41, 74, 106, 28, 36, 51, 26, 98, 16, 105, 83, 20, 97, 9, 114, 56, 1, 80, 8, 94, 110, 11, 39, 45, 112, 77, 72, 93, 79, 48, 69, 57, 102, 84, 124, 66, 107, 99, 117, 96, 100, 49, 123, 71, 63, 13, 127, 3, 121, 103, 61, 10, 58, 81, 87, 116, 113, 95, 59, 126, 86, 6, 33, 19, 65, 92, 12, 115, 0, 29, 46, 104, 54, 90, 44, 52, 89, 15, 101, 55, 47, 21, 37, 75, 111, 85, 24, 42, 70, 7, 122, 23, 53, 50, 27, 2, 43, 125, 67, 108, 38, 4, 120, 119, 30, 78, 5, 40)
    test 7 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, 18.45556)
    test 8 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, 16.05)
    test 9 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, 18.45556)
    test 10 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, 16.05)
    test 11 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, None)
    test 12 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, None)
    test 13 HausdorffDegrees_ (degrees): (50.5, 61, 7, 90, None)
    test 14 HausdorffDegrees_ (degrees): (50.5, 61, 7, 150, None)
    test 15 copy(HausdorffDegrees_): (<class '__main__.HausdorffDegrees_'>, True)
    test 16 HausdorffDegrees_.copy(): (<class '__main__.HausdorffDegrees_'>, True)
    test 17 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, 0.32211)
    test 18 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, 0.28013)
    test 19 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, 0.32211)
    test 20 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, 0.28013)
    test 21 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, None)
    test 22 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, None)
    test 23 HausdorffRadians_ (radians): (0.88139, 61, 7, 90, None)
    test 24 HausdorffRadians_ (radians): (0.88139, 61, 7, 150, None)
    test 25 copy(HausdorffRadians_): (<class '__main__.HausdorffRadians_'>, True)
    test 26 HausdorffRadians_.copy(): (<class '__main__.HausdorffRadians_'>, True)
    test 27 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 28 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 29 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 30 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 31 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 32 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 33 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 34 HausdorffCosineAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 35 copy(HausdorffCosineAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 36 HausdorffCosineAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 37 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 38 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 39 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, 0.19764)
    test 40 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, 0.17591)
    test 41 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 42 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 43 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 90, None)
    test 44 HausdorffCosineForsytheAndoyerLambert (radians): (0.56263, 49, 29, 150, None)
    test 45 copy(HausdorffCosineForsytheAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 46 HausdorffCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 47 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, 0.19776)
    test 48 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, 0.176)
    test 49 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, 0.19776)
    test 50 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, 0.176)
    test 51 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, None)
    test 52 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, None)
    test 53 HausdorffCosineLaw (radians): (0.56202, 49, 29, 90, None)
    test 54 HausdorffCosineLaw (radians): (0.56202, 49, 29, 150, None)
    test 55 copy(HausdorffCosineLaw): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 56 HausdorffCosineLaw.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 57 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, 0.06075)
    test 58 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, 0.04918)
    test 59 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, 0.06075)
    test 60 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, 0.04918)
    test 61 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, None)
    test 62 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, None)
    test 63 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 90, None)
    test 64 HausdorffEquirectangular (radians2): (0.33016, 49, 29, 150, None)
    test 65 copy(HausdorffEquirectangular): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 66 HausdorffEquirectangular.copy(): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 67 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, 0.21327)
    test 68 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, 0.19061)
    test 69 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, 0.21327)
    test 70 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, 0.19061)
    test 71 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, None)
    test 72 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, None)
    test 73 HausdorffEuclidean (radians): (0.61785, 49, 29, 90, None)
    test 74 HausdorffEuclidean (radians): (0.61785, 49, 29, 150, None)
    test 75 copy(HausdorffEuclidean): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 76 HausdorffEuclidean.copy(): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 77 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 78 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 79 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 80 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 81 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, None)
    test 82 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, None)
    test 83 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 90, None)
    test 84 HausdorffFlatLocal (radians2): (0.33092, 49, 29, 150, None)
    test 85 copy(HausdorffFlatLocal): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 86 HausdorffFlatLocal.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 87 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, 0.24569)
    test 88 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, 0.21335)
    test 89 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, 0.24569)
    test 90 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, 0.21335)
    test 91 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, None)
    test 92 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, None)
    test 93 HausdorffFlatPolar (radians): (0.96853, 20, 46, 90, None)
    test 94 HausdorffFlatPolar (radians): (0.96853, 20, 46, 150, None)
    test 95 copy(HausdorffFlatPolar): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 96 HausdorffFlatPolar.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 97 HausdorffHaversine (radians): (0.56202, 49, 29, 90, 0.19776)
    test 98 HausdorffHaversine (radians): (0.56202, 49, 29, 150, 0.176)
    test 99 HausdorffHaversine (radians): (0.56202, 49, 29, 90, 0.19776)
    test 100 HausdorffHaversine (radians): (0.56202, 49, 29, 150, 0.176)
    test 101 HausdorffHaversine (radians): (0.56202, 49, 29, 90, None)
    test 102 HausdorffHaversine (radians): (0.56202, 49, 29, 150, None)
    test 103 HausdorffHaversine (radians): (0.56202, 49, 29, 90, None)
    test 104 HausdorffHaversine (radians): (0.56202, 49, 29, 150, None)
    test 105 copy(HausdorffHaversine): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 106 HausdorffHaversine.copy(): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 107 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 108 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 109 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, 0.06067)
    test 110 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, 0.04912)
    test 111 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, None)
    test 112 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, None)
    test 113 HausdorffHubeny (radians2): (0.33092, 49, 29, 90, None)
    test 114 HausdorffHubeny (radians2): (0.33092, 49, 29, 150, None)
    test 115 copy(HausdorffHubeny): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 116 HausdorffHubeny.copy(): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 117 HausdorffThomas (radians): (0.56263, 49, 29, 90, 0.19764)
    test 118 HausdorffThomas (radians): (0.56263, 49, 29, 150, 0.17591)
    test 119 HausdorffThomas (radians): (0.56263, 49, 29, 90, 0.19764)
    test 120 HausdorffThomas (radians): (0.56263, 49, 29, 150, 0.17591)
    test 121 HausdorffThomas (radians): (0.56263, 49, 29, 90, None)
    test 122 HausdorffThomas (radians): (0.56263, 49, 29, 150, None)
    test 123 HausdorffThomas (radians): (0.56263, 49, 29, 90, None)
    test 124 HausdorffThomas (radians): (0.56263, 49, 29, 150, None)
    test 125 copy(HausdorffThomas): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 126 HausdorffThomas.copy(): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 127 HausdorffVincentys (radians): (0.56202, 49, 29, 90, 0.19776)
    test 128 HausdorffVincentys (radians): (0.56202, 49, 29, 150, 0.176)
    test 129 HausdorffVincentys (radians): (0.56202, 49, 29, 90, 0.19776)
    test 130 HausdorffVincentys (radians): (0.56202, 49, 29, 150, 0.176)
    test 131 HausdorffVincentys (radians): (0.56202, 49, 29, 90, None)
    test 132 HausdorffVincentys (radians): (0.56202, 49, 29, 150, None)
    test 133 HausdorffVincentys (radians): (0.56202, 49, 29, 90, None)
    test 134 HausdorffVincentys (radians): (0.56202, 49, 29, 150, None)
    test 135 copy(HausdorffVincentys): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 136 HausdorffVincentys.copy(): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 137 hausdorff_: (50.5, 61, 7, 90, 18.45556)
    test 138 hausdorff_: (50.5, 61, 7, 150, 16.05)
    test 139 hausdorff_: (50.5, 61, 7, 90, 18.45556)
    test 140 hausdorff_: (50.5, 61, 7, 150, 16.05)
    test 141 hausdorff_: (50.5, 61, 7, 90, None)
    test 142 hausdorff_: (50.5, 61, 7, 150, None)
    test 143 hausdorff_: (50.5, 61, 7, 90, None)
    test 144 hausdorff_: (50.5, 61, 7, 150, None)

    all 144 testHausdorff.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 12.926 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testHeights.py

    testing testHeights.py 21.02.11
    test 1 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 2 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 3 HeightIDWcosineAndoyerLambert(wrap=False): 6.108538037
    test 4 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 5 HeightIDWcosineAndoyerLambert(latlon): True
    test 6 HeightIDWcosineAndoyerLambert(wrap=False): 5.0
    test 7 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 8 HeightIDWcosineAndoyerLambert(latlon): True
    test 9 HeightIDWcosineAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 10 HeightIDWcosineAndoyerLambert(tuple): <type 'tuple'>
    test 11 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 12 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 13 HeightIDWcosineAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 14 HeightIDWcosineAndoyerLambert(list: <type 'list'>
    test 15 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 16 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 17 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 18 HeightIDWcosineAndoyerLambert.adjust: None
    test 19 HeightIDWcosineAndoyerLambert.kmin: 2
    test 20 HeightIDWcosineAndoyerLambert.wrap: False
    test 21 HeightIDWcosineAndoyerLambert.beta: 2
    test 22 HeightIDWcosineAndoyerLambert.adjust: None
    test 23 HeightIDWcosineAndoyerLambert.beta: 2
    test 24 HeightIDWcosineAndoyerLambert.kmin: 2
    test 25 HeightIDWcosineAndoyerLambert.wrap: False
    test 26 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 27 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 28 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 6.108538037
    test 29 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 30 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 31 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 5.0
    test 32 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 33 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 34 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 35 HeightIDWcosineForsytheAndoyerLambert(tuple): <type 'tuple'>
    test 36 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 37 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 38 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 39 HeightIDWcosineForsytheAndoyerLambert(list: <type 'list'>
    test 40 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 41 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 42 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 43 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 44 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 45 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 46 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 47 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 48 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 49 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 50 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 51 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 52 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 53 HeightIDWcosineLaw(wrap=True): 6.108538037
    test 54 HeightIDWcosineLaw(float): <type 'float'>
    test 55 HeightIDWcosineLaw(latlon): True
    test 56 HeightIDWcosineLaw(wrap=True): 5.0
    test 57 HeightIDWcosineLaw(float): <type 'float'>
    test 58 HeightIDWcosineLaw(latlon): True
    test 59 HeightIDWcosineLaw(wrap=True): (6.108538037, 5.0,)
    test 60 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 61 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 62 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 63 HeightIDWcosineLaw(wrap=True): [6.108538037, 5.0]
    test 64 HeightIDWcosineLaw(list: <type 'list'>
    test 65 HeightIDWcosineLaw(list-float): <type 'float'>
    test 66 HeightIDWcosineLaw(list-float): <type 'float'>
    test 67 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 68 HeightIDWcosineLaw.adjust: None
    test 69 HeightIDWcosineLaw.kmin: 2
    test 70 HeightIDWcosineLaw.wrap: False
    test 71 HeightIDWcosineLaw.beta: 2
    test 72 HeightIDWcosineLaw.adjust: None
    test 73 HeightIDWcosineLaw.beta: 2
    test 74 HeightIDWcosineLaw.kmin: 2
    test 75 HeightIDWcosineLaw.wrap: False
    test 76 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 77 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 78 HeightIDWcosineLaw(wrap=False): 6.108538037
    test 79 HeightIDWcosineLaw(float): <type 'float'>
    test 80 HeightIDWcosineLaw(latlon): True
    test 81 HeightIDWcosineLaw(wrap=False): 5.0
    test 82 HeightIDWcosineLaw(float): <type 'float'>
    test 83 HeightIDWcosineLaw(latlon): True
    test 84 HeightIDWcosineLaw(wrap=False): (6.108538037, 5.0,)
    test 85 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 86 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 87 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 88 HeightIDWcosineLaw(wrap=False): [6.108538037, 5.0]
    test 89 HeightIDWcosineLaw(list: <type 'list'>
    test 90 HeightIDWcosineLaw(list-float): <type 'float'>
    test 91 HeightIDWcosineLaw(list-float): <type 'float'>
    test 92 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 93 HeightIDWcosineLaw.adjust: None
    test 94 HeightIDWcosineLaw.kmin: 2
    test 95 HeightIDWcosineLaw.wrap: False
    test 96 HeightIDWcosineLaw.beta: 2
    test 97 HeightIDWcosineLaw.adjust: None
    test 98 HeightIDWcosineLaw.beta: 2
    test 99 HeightIDWcosineLaw.kmin: 2
    test 100 HeightIDWcosineLaw.wrap: False
    test 101 copy(HeightIDWdistanceTo): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 102 HeightIDWdistanceTo.copy(): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 103 HeightIDWdistanceTo(): 6.108538037
    test 104 HeightIDWdistanceTo(float): <type 'float'>
    test 105 HeightIDWdistanceTo(latlon): True
    test 106 HeightIDWdistanceTo(): 5.0
    test 107 HeightIDWdistanceTo(float): <type 'float'>
    test 108 HeightIDWdistanceTo(latlon): True
    test 109 HeightIDWdistanceTo(): (6.108538037, 5.0,)
    test 110 HeightIDWdistanceTo(tuple): <type 'tuple'>
    test 111 HeightIDWdistanceTo(tuple-float): <type 'float'>
    test 112 HeightIDWdistanceTo(tuple-float): <type 'float'>
    test 113 HeightIDWdistanceTo(): [6.108538037, 5.0]
    test 114 HeightIDWdistanceTo(list: <type 'list'>
    test 115 HeightIDWdistanceTo(list-float): <type 'float'>
    test 116 HeightIDWdistanceTo(list-float): <type 'float'>
    test 117 HeightError: type(other) (9.0): incompatible with sphericalTrigonometry.LatLon.distanceTo(other), invalid
    test 118 HeightIDWdistanceTo.adjust: None
    test 119 HeightIDWdistanceTo.kmin: 2
    test 120 HeightIDWdistanceTo.wrap: None
    test 121 HeightIDWdistanceTo.beta: 2
    test 122 HeightIDWdistanceTo.adjust: None
    test 123 HeightIDWdistanceTo.beta: 2
    test 124 HeightIDWdistanceTo.kmin: 2
    test 125 HeightIDWdistanceTo.wrap: None
    test 126 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 127 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 128 HeightIDWeuclidean(adjust=False): 6.143010434
    test 129 HeightIDWeuclidean(float): <type 'float'>
    test 130 HeightIDWeuclidean(latlon): True
    test 131 HeightIDWeuclidean(adjust=False): 5.0
    test 132 HeightIDWeuclidean(float): <type 'float'>
    test 133 HeightIDWeuclidean(latlon): True
    test 134 HeightIDWeuclidean(adjust=False): (6.143010434, 5.0,)
    test 135 HeightIDWeuclidean(tuple): <type 'tuple'>
    test 136 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 137 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 138 HeightIDWeuclidean(adjust=False): [6.143010434, 5.0]
    test 139 HeightIDWeuclidean(list: <type 'list'>
    test 140 HeightIDWeuclidean(list-float): <type 'float'>
    test 141 HeightIDWeuclidean(list-float): <type 'float'>
    test 142 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 143 HeightIDWeuclidean.adjust: True
    test 144 HeightIDWeuclidean.kmin: 2
    test 145 HeightIDWeuclidean.wrap: None
    test 146 HeightIDWeuclidean.beta: 2
    test 147 HeightIDWeuclidean.adjust: True
    test 148 HeightIDWeuclidean.beta: 2
    test 149 HeightIDWeuclidean.kmin: 2
    test 150 HeightIDWeuclidean.wrap: None
    test 151 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 152 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 153 HeightIDWequirectangular(adjust=True, wrap=True): 6.108538529
    test 154 HeightIDWequirectangular(float): <type 'float'>
    test 155 HeightIDWequirectangular(latlon): True
    test 156 HeightIDWequirectangular(adjust=True, wrap=True): 5.0
    test 157 HeightIDWequirectangular(float): <type 'float'>
    test 158 HeightIDWequirectangular(latlon): True
    test 159 HeightIDWequirectangular(adjust=True, wrap=True): (6.108538529, 5.0,)
    test 160 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 161 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 162 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 163 HeightIDWequirectangular(adjust=True, wrap=True): [6.108538529, 5.0]
    test 164 HeightIDWequirectangular(list: <type 'list'>
    test 165 HeightIDWequirectangular(list-float): <type 'float'>
    test 166 HeightIDWequirectangular(list-float): <type 'float'>
    test 167 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 168 HeightIDWequirectangular.adjust: True
    test 169 HeightIDWequirectangular.kmin: 2
    test 170 HeightIDWequirectangular.wrap: False
    test 171 HeightIDWequirectangular.beta: 1
    test 172 HeightIDWequirectangular.adjust: True
    test 173 HeightIDWequirectangular.beta: 1
    test 174 HeightIDWequirectangular.kmin: 2
    test 175 HeightIDWequirectangular.wrap: False
    test 176 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 177 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 178 HeightIDWequirectangular(adjust=False, wrap=True): 6.108614369
    test 179 HeightIDWequirectangular(float): <type 'float'>
    test 180 HeightIDWequirectangular(latlon): True
    test 181 HeightIDWequirectangular(adjust=False, wrap=True): 5.0
    test 182 HeightIDWequirectangular(float): <type 'float'>
    test 183 HeightIDWequirectangular(latlon): True
    test 184 HeightIDWequirectangular(adjust=False, wrap=True): (6.108614369, 5.0,)
    test 185 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 186 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 187 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 188 HeightIDWequirectangular(adjust=False, wrap=True): [6.108614369, 5.0]
    test 189 HeightIDWequirectangular(list: <type 'list'>
    test 190 HeightIDWequirectangular(list-float): <type 'float'>
    test 191 HeightIDWequirectangular(list-float): <type 'float'>
    test 192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 193 HeightIDWequirectangular.adjust: True
    test 194 HeightIDWequirectangular.kmin: 2
    test 195 HeightIDWequirectangular.wrap: False
    test 196 HeightIDWequirectangular.beta: 1
    test 197 HeightIDWequirectangular.adjust: True
    test 198 HeightIDWequirectangular.beta: 1
    test 199 HeightIDWequirectangular.kmin: 2
    test 200 HeightIDWequirectangular.wrap: False
    test 201 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 202 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 203 HeightIDWflatLocal(wrap=False): 6.860459007
    test 204 HeightIDWflatLocal(float): <type 'float'>
    test 205 HeightIDWflatLocal(latlon): True
    test 206 HeightIDWflatLocal(wrap=False): 5.0
    test 207 HeightIDWflatLocal(float): <type 'float'>
    test 208 HeightIDWflatLocal(latlon): True
    test 209 HeightIDWflatLocal(wrap=False): (6.860459007, 5.0,)
    test 210 HeightIDWflatLocal(tuple): <type 'tuple'>
    test 211 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 212 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 213 HeightIDWflatLocal(wrap=False): [6.860459007, 5.0]
    test 214 HeightIDWflatLocal(list: <type 'list'>
    test 215 HeightIDWflatLocal(list-float): <type 'float'>
    test 216 HeightIDWflatLocal(list-float): <type 'float'>
    test 217 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 218 HeightIDWflatLocal.adjust: None
    test 219 HeightIDWflatLocal.kmin: 2
    test 220 HeightIDWflatLocal.wrap: False
    test 221 HeightIDWflatLocal.beta: 2
    test 222 HeightIDWflatLocal.adjust: None
    test 223 HeightIDWflatLocal.beta: 2
    test 224 HeightIDWflatLocal.kmin: 2
    test 225 HeightIDWflatLocal.wrap: False
    test 226 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 227 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 228 HeightIDWflatPolar(wrap=False): 6.261469975
    test 229 HeightIDWflatPolar(float): <type 'float'>
    test 230 HeightIDWflatPolar(latlon): True
    test 231 HeightIDWflatPolar(wrap=False): 5.0
    test 232 HeightIDWflatPolar(float): <type 'float'>
    test 233 HeightIDWflatPolar(latlon): True
    test 234 HeightIDWflatPolar(wrap=False): (6.261469975, 5.0,)
    test 235 HeightIDWflatPolar(tuple): <type 'tuple'>
    test 236 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 237 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 238 HeightIDWflatPolar(wrap=False): [6.261469975, 5.0]
    test 239 HeightIDWflatPolar(list: <type 'list'>
    test 240 HeightIDWflatPolar(list-float): <type 'float'>
    test 241 HeightIDWflatPolar(list-float): <type 'float'>
    test 242 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 243 HeightIDWflatPolar.adjust: None
    test 244 HeightIDWflatPolar.kmin: 2
    test 245 HeightIDWflatPolar.wrap: False
    test 246 HeightIDWflatPolar.beta: 2
    test 247 HeightIDWflatPolar.adjust: None
    test 248 HeightIDWflatPolar.beta: 2
    test 249 HeightIDWflatPolar.kmin: 2
    test 250 HeightIDWflatPolar.wrap: False
    test 251 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 252 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 253 HeightIDWhaversine(wrap=False): 6.108538037
    test 254 HeightIDWhaversine(float): <type 'float'>
    test 255 HeightIDWhaversine(latlon): True
    test 256 HeightIDWhaversine(wrap=False): 5.0
    test 257 HeightIDWhaversine(float): <type 'float'>
    test 258 HeightIDWhaversine(latlon): True
    test 259 HeightIDWhaversine(wrap=False): (6.108538037, 5.0,)
    test 260 HeightIDWhaversine(tuple): <type 'tuple'>
    test 261 HeightIDWhaversine(tuple-float): <type 'float'>
    test 262 HeightIDWhaversine(tuple-float): <type 'float'>
    test 263 HeightIDWhaversine(wrap=False): [6.108538037, 5.0]
    test 264 HeightIDWhaversine(list: <type 'list'>
    test 265 HeightIDWhaversine(list-float): <type 'float'>
    test 266 HeightIDWhaversine(list-float): <type 'float'>
    test 267 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 268 HeightIDWhaversine.adjust: None
    test 269 HeightIDWhaversine.kmin: 2
    test 270 HeightIDWhaversine.wrap: False
    test 271 HeightIDWhaversine.beta: 2
    test 272 HeightIDWhaversine.adjust: None
    test 273 HeightIDWhaversine.beta: 2
    test 274 HeightIDWhaversine.kmin: 2
    test 275 HeightIDWhaversine.wrap: False
    test 276 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 277 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 278 HeightIDWhubeny(wrap=False): 6.860459007
    test 279 HeightIDWhubeny(float): <type 'float'>
    test 280 HeightIDWhubeny(latlon): True
    test 281 HeightIDWhubeny(wrap=False): 5.0
    test 282 HeightIDWhubeny(float): <type 'float'>
    test 283 HeightIDWhubeny(latlon): True
    test 284 HeightIDWhubeny(wrap=False): (6.860459007, 5.0,)
    test 285 HeightIDWhubeny(tuple): <type 'tuple'>
    test 286 HeightIDWhubeny(tuple-float): <type 'float'>
    test 287 HeightIDWhubeny(tuple-float): <type 'float'>
    test 288 HeightIDWhubeny(wrap=False): [6.860459007, 5.0]
    test 289 HeightIDWhubeny(list: <type 'list'>
    test 290 HeightIDWhubeny(list-float): <type 'float'>
    test 291 HeightIDWhubeny(list-float): <type 'float'>
    test 292 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 293 HeightIDWhubeny.adjust: None
    test 294 HeightIDWhubeny.kmin: 2
    test 295 HeightIDWhubeny.wrap: False
    test 296 HeightIDWhubeny.beta: 2
    test 297 HeightIDWhubeny.adjust: None
    test 298 HeightIDWhubeny.beta: 2
    test 299 HeightIDWhubeny.kmin: 2
    test 300 HeightIDWhubeny.wrap: False
    test 301 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 302 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 303 HeightIDWthomas(wrap=True): 6.108538037
    test 304 HeightIDWthomas(float): <type 'float'>
    test 305 HeightIDWthomas(latlon): True
    test 306 HeightIDWthomas(wrap=True): 5.0
    test 307 HeightIDWthomas(float): <type 'float'>
    test 308 HeightIDWthomas(latlon): True
    test 309 HeightIDWthomas(wrap=True): (6.108538037, 5.0,)
    test 310 HeightIDWthomas(tuple): <type 'tuple'>
    test 311 HeightIDWthomas(tuple-float): <type 'float'>
    test 312 HeightIDWthomas(tuple-float): <type 'float'>
    test 313 HeightIDWthomas(wrap=True): [6.108538037, 5.0]
    test 314 HeightIDWthomas(list: <type 'list'>
    test 315 HeightIDWthomas(list-float): <type 'float'>
    test 316 HeightIDWthomas(list-float): <type 'float'>
    test 317 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 318 HeightIDWthomas.adjust: None
    test 319 HeightIDWthomas.kmin: 2
    test 320 HeightIDWthomas.wrap: False
    test 321 HeightIDWthomas.beta: 2
    test 322 HeightIDWthomas.adjust: None
    test 323 HeightIDWthomas.beta: 2
    test 324 HeightIDWthomas.kmin: 2
    test 325 HeightIDWthomas.wrap: False
    test 326 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 327 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 328 HeightIDWthomas(wrap=False): 6.108538037
    test 329 HeightIDWthomas(float): <type 'float'>
    test 330 HeightIDWthomas(latlon): True
    test 331 HeightIDWthomas(wrap=False): 5.0
    test 332 HeightIDWthomas(float): <type 'float'>
    test 333 HeightIDWthomas(latlon): True
    test 334 HeightIDWthomas(wrap=False): (6.108538037, 5.0,)
    test 335 HeightIDWthomas(tuple): <type 'tuple'>
    test 336 HeightIDWthomas(tuple-float): <type 'float'>
    test 337 HeightIDWthomas(tuple-float): <type 'float'>
    test 338 HeightIDWthomas(wrap=False): [6.108538037, 5.0]
    test 339 HeightIDWthomas(list: <type 'list'>
    test 340 HeightIDWthomas(list-float): <type 'float'>
    test 341 HeightIDWthomas(list-float): <type 'float'>
    test 342 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 343 HeightIDWthomas.adjust: None
    test 344 HeightIDWthomas.kmin: 2
    test 345 HeightIDWthomas.wrap: False
    test 346 HeightIDWthomas.beta: 2
    test 347 HeightIDWthomas.adjust: None
    test 348 HeightIDWthomas.beta: 2
    test 349 HeightIDWthomas.kmin: 2
    test 350 HeightIDWthomas.wrap: False
    test 351 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 352 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 353 HeightIDWvincentys(wrap=True): 6.108538037
    test 354 HeightIDWvincentys(float): <type 'float'>
    test 355 HeightIDWvincentys(latlon): True
    test 356 HeightIDWvincentys(wrap=True): 5.0
    test 357 HeightIDWvincentys(float): <type 'float'>
    test 358 HeightIDWvincentys(latlon): True
    test 359 HeightIDWvincentys(wrap=True): (6.108538037, 5.0,)
    test 360 HeightIDWvincentys(tuple): <type 'tuple'>
    test 361 HeightIDWvincentys(tuple-float): <type 'float'>
    test 362 HeightIDWvincentys(tuple-float): <type 'float'>
    test 363 HeightIDWvincentys(wrap=True): [6.108538037, 5.0]
    test 364 HeightIDWvincentys(list: <type 'list'>
    test 365 HeightIDWvincentys(list-float): <type 'float'>
    test 366 HeightIDWvincentys(list-float): <type 'float'>
    test 367 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 368 HeightIDWvincentys.adjust: None
    test 369 HeightIDWvincentys.kmin: 2
    test 370 HeightIDWvincentys.wrap: False
    test 371 HeightIDWvincentys.beta: 2
    test 372 HeightIDWvincentys.adjust: None
    test 373 HeightIDWvincentys.beta: 2
    test 374 HeightIDWvincentys.kmin: 2
    test 375 HeightIDWvincentys.wrap: False
    test 376 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 377 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 378 HeightIDWvincentys(wrap=False): 6.108538037
    test 379 HeightIDWvincentys(float): <type 'float'>
    test 380 HeightIDWvincentys(latlon): True
    test 381 HeightIDWvincentys(wrap=False): 5.0
    test 382 HeightIDWvincentys(float): <type 'float'>
    test 383 HeightIDWvincentys(latlon): True
    test 384 HeightIDWvincentys(wrap=False): (6.108538037, 5.0,)
    test 385 HeightIDWvincentys(tuple): <type 'tuple'>
    test 386 HeightIDWvincentys(tuple-float): <type 'float'>
    test 387 HeightIDWvincentys(tuple-float): <type 'float'>
    test 388 HeightIDWvincentys(wrap=False): [6.108538037, 5.0]
    test 389 HeightIDWvincentys(list: <type 'list'>
    test 390 HeightIDWvincentys(list-float): <type 'float'>
    test 391 HeightIDWvincentys(list-float): <type 'float'>
    test 392 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 393 HeightIDWvincentys.adjust: None
    test 394 HeightIDWvincentys.kmin: 2
    test 395 HeightIDWvincentys.wrap: False
    test 396 HeightIDWvincentys.beta: 2
    test 397 HeightIDWvincentys.adjust: None
    test 398 HeightIDWvincentys.beta: 2
    test 399 HeightIDWvincentys.kmin: 2
    test 400 HeightIDWvincentys.wrap: False
    test 401 intersection: 02.64932°N, 002.550079°E, +2.50m
    test 402 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 403 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 404 HeightIDWcosineAndoyerLambert(wrap=False): 2.592742938
    test 405 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 406 HeightIDWcosineAndoyerLambert(latlon): True
    test 407 HeightIDWcosineAndoyerLambert(wrap=False): 3.0
    test 408 HeightIDWcosineAndoyerLambert(float): <type 'float'>
    test 409 HeightIDWcosineAndoyerLambert(latlon): True
    test 410 HeightIDWcosineAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 411 HeightIDWcosineAndoyerLambert(tuple): <type 'tuple'>
    test 412 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 413 HeightIDWcosineAndoyerLambert(tuple-float): <type 'float'>
    test 414 HeightIDWcosineAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 415 HeightIDWcosineAndoyerLambert(list: <type 'list'>
    test 416 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 417 HeightIDWcosineAndoyerLambert(list-float): <type 'float'>
    test 418 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 419 HeightIDWcosineAndoyerLambert.adjust: None
    test 420 HeightIDWcosineAndoyerLambert.kmin: 2
    test 421 HeightIDWcosineAndoyerLambert.wrap: False
    test 422 HeightIDWcosineAndoyerLambert.beta: 2
    test 423 HeightIDWcosineAndoyerLambert.adjust: None
    test 424 HeightIDWcosineAndoyerLambert.beta: 2
    test 425 HeightIDWcosineAndoyerLambert.kmin: 2
    test 426 HeightIDWcosineAndoyerLambert.wrap: False
    test 427 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 428 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 429 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 2.592742938
    test 430 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 431 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 432 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 3.0
    test 433 HeightIDWcosineForsytheAndoyerLambert(float): <type 'float'>
    test 434 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 435 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 436 HeightIDWcosineForsytheAndoyerLambert(tuple): <type 'tuple'>
    test 437 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 438 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <type 'float'>
    test 439 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 440 HeightIDWcosineForsytheAndoyerLambert(list: <type 'list'>
    test 441 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 442 HeightIDWcosineForsytheAndoyerLambert(list-float): <type 'float'>
    test 443 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 444 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 445 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 446 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 447 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 448 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 449 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 450 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 451 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 452 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 453 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 454 HeightIDWcosineLaw(wrap=True): 2.592742938
    test 455 HeightIDWcosineLaw(float): <type 'float'>
    test 456 HeightIDWcosineLaw(latlon): True
    test 457 HeightIDWcosineLaw(wrap=True): 3.0
    test 458 HeightIDWcosineLaw(float): <type 'float'>
    test 459 HeightIDWcosineLaw(latlon): True
    test 460 HeightIDWcosineLaw(wrap=True): (2.592742938, 3.0,)
    test 461 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 462 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 463 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 464 HeightIDWcosineLaw(wrap=True): [2.592742938, 3.0]
    test 465 HeightIDWcosineLaw(list: <type 'list'>
    test 466 HeightIDWcosineLaw(list-float): <type 'float'>
    test 467 HeightIDWcosineLaw(list-float): <type 'float'>
    test 468 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 469 HeightIDWcosineLaw.adjust: None
    test 470 HeightIDWcosineLaw.kmin: 2
    test 471 HeightIDWcosineLaw.wrap: False
    test 472 HeightIDWcosineLaw.beta: 2
    test 473 HeightIDWcosineLaw.adjust: None
    test 474 HeightIDWcosineLaw.beta: 2
    test 475 HeightIDWcosineLaw.kmin: 2
    test 476 HeightIDWcosineLaw.wrap: False
    test 477 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 478 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 479 HeightIDWcosineLaw(wrap=False): 2.592742938
    test 480 HeightIDWcosineLaw(float): <type 'float'>
    test 481 HeightIDWcosineLaw(latlon): True
    test 482 HeightIDWcosineLaw(wrap=False): 3.0
    test 483 HeightIDWcosineLaw(float): <type 'float'>
    test 484 HeightIDWcosineLaw(latlon): True
    test 485 HeightIDWcosineLaw(wrap=False): (2.592742938, 3.0,)
    test 486 HeightIDWcosineLaw(tuple): <type 'tuple'>
    test 487 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 488 HeightIDWcosineLaw(tuple-float): <type 'float'>
    test 489 HeightIDWcosineLaw(wrap=False): [2.592742938, 3.0]
    test 490 HeightIDWcosineLaw(list: <type 'list'>
    test 491 HeightIDWcosineLaw(list-float): <type 'float'>
    test 492 HeightIDWcosineLaw(list-float): <type 'float'>
    test 493 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 494 HeightIDWcosineLaw.adjust: None
    test 495 HeightIDWcosineLaw.kmin: 2
    test 496 HeightIDWcosineLaw.wrap: False
    test 497 HeightIDWcosineLaw.beta: 2
    test 498 HeightIDWcosineLaw.adjust: None
    test 499 HeightIDWcosineLaw.beta: 2
    test 500 HeightIDWcosineLaw.kmin: 2
    test 501 HeightIDWcosineLaw.wrap: False
    test 502 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 503 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 504 HeightIDWeuclidean(adjust=False): 2.592735541
    test 505 HeightIDWeuclidean(float): <type 'float'>
    test 506 HeightIDWeuclidean(latlon): True
    test 507 HeightIDWeuclidean(adjust=False): 3.0
    test 508 HeightIDWeuclidean(float): <type 'float'>
    test 509 HeightIDWeuclidean(latlon): True
    test 510 HeightIDWeuclidean(adjust=False): (2.592735541, 3.0,)
    test 511 HeightIDWeuclidean(tuple): <type 'tuple'>
    test 512 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 513 HeightIDWeuclidean(tuple-float): <type 'float'>
    test 514 HeightIDWeuclidean(adjust=False): [2.592735541, 3.0]
    test 515 HeightIDWeuclidean(list: <type 'list'>
    test 516 HeightIDWeuclidean(list-float): <type 'float'>
    test 517 HeightIDWeuclidean(list-float): <type 'float'>
    test 518 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 519 HeightIDWeuclidean.adjust: True
    test 520 HeightIDWeuclidean.kmin: 2
    test 521 HeightIDWeuclidean.wrap: None
    test 522 HeightIDWeuclidean.beta: 2
    test 523 HeightIDWeuclidean.adjust: True
    test 524 HeightIDWeuclidean.beta: 2
    test 525 HeightIDWeuclidean.kmin: 2
    test 526 HeightIDWeuclidean.wrap: None
    test 527 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 528 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 529 HeightIDWequirectangular(adjust=True, wrap=True): 2.592743455
    test 530 HeightIDWequirectangular(float): <type 'float'>
    test 531 HeightIDWequirectangular(latlon): True
    test 532 HeightIDWequirectangular(adjust=True, wrap=True): 3.0
    test 533 HeightIDWequirectangular(float): <type 'float'>
    test 534 HeightIDWequirectangular(latlon): True
    test 535 HeightIDWequirectangular(adjust=True, wrap=True): (2.592743455, 3.0,)
    test 536 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 537 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 538 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 539 HeightIDWequirectangular(adjust=True, wrap=True): [2.592743455, 3.0]
    test 540 HeightIDWequirectangular(list: <type 'list'>
    test 541 HeightIDWequirectangular(list-float): <type 'float'>
    test 542 HeightIDWequirectangular(list-float): <type 'float'>
    test 543 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 544 HeightIDWequirectangular.adjust: True
    test 545 HeightIDWequirectangular.kmin: 2
    test 546 HeightIDWequirectangular.wrap: False
    test 547 HeightIDWequirectangular.beta: 1
    test 548 HeightIDWequirectangular.adjust: True
    test 549 HeightIDWequirectangular.beta: 1
    test 550 HeightIDWequirectangular.kmin: 2
    test 551 HeightIDWequirectangular.wrap: False
    test 552 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 553 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 554 HeightIDWequirectangular(adjust=False, wrap=True): 2.592732915
    test 555 HeightIDWequirectangular(float): <type 'float'>
    test 556 HeightIDWequirectangular(latlon): True
    test 557 HeightIDWequirectangular(adjust=False, wrap=True): 3.0
    test 558 HeightIDWequirectangular(float): <type 'float'>
    test 559 HeightIDWequirectangular(latlon): True
    test 560 HeightIDWequirectangular(adjust=False, wrap=True): (2.592732915, 3.0,)
    test 561 HeightIDWequirectangular(tuple): <type 'tuple'>
    test 562 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 563 HeightIDWequirectangular(tuple-float): <type 'float'>
    test 564 HeightIDWequirectangular(adjust=False, wrap=True): [2.592732915, 3.0]
    test 565 HeightIDWequirectangular(list: <type 'list'>
    test 566 HeightIDWequirectangular(list-float): <type 'float'>
    test 567 HeightIDWequirectangular(list-float): <type 'float'>
    test 568 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 569 HeightIDWequirectangular.adjust: True
    test 570 HeightIDWequirectangular.kmin: 2
    test 571 HeightIDWequirectangular.wrap: False
    test 572 HeightIDWequirectangular.beta: 1
    test 573 HeightIDWequirectangular.adjust: True
    test 574 HeightIDWequirectangular.beta: 1
    test 575 HeightIDWequirectangular.kmin: 2
    test 576 HeightIDWequirectangular.wrap: False
    test 577 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 578 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 579 HeightIDWflatLocal(wrap=False): 2.689429914
    test 580 HeightIDWflatLocal(float): <type 'float'>
    test 581 HeightIDWflatLocal(latlon): True
    test 582 HeightIDWflatLocal(wrap=False): 3.0
    test 583 HeightIDWflatLocal(float): <type 'float'>
    test 584 HeightIDWflatLocal(latlon): True
    test 585 HeightIDWflatLocal(wrap=False): (2.689429914, 3.0,)
    test 586 HeightIDWflatLocal(tuple): <type 'tuple'>
    test 587 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 588 HeightIDWflatLocal(tuple-float): <type 'float'>
    test 589 HeightIDWflatLocal(wrap=False): [2.689429914, 3.0]
    test 590 HeightIDWflatLocal(list: <type 'list'>
    test 591 HeightIDWflatLocal(list-float): <type 'float'>
    test 592 HeightIDWflatLocal(list-float): <type 'float'>
    test 593 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 594 HeightIDWflatLocal.adjust: None
    test 595 HeightIDWflatLocal.kmin: 2
    test 596 HeightIDWflatLocal.wrap: False
    test 597 HeightIDWflatLocal.beta: 2
    test 598 HeightIDWflatLocal.adjust: None
    test 599 HeightIDWflatLocal.beta: 2
    test 600 HeightIDWflatLocal.kmin: 2
    test 601 HeightIDWflatLocal.wrap: False
    test 602 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 603 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 604 HeightIDWflatPolar(wrap=False): 2.592973059
    test 605 HeightIDWflatPolar(float): <type 'float'>
    test 606 HeightIDWflatPolar(latlon): True
    test 607 HeightIDWflatPolar(wrap=False): 3.0
    test 608 HeightIDWflatPolar(float): <type 'float'>
    test 609 HeightIDWflatPolar(latlon): True
    test 610 HeightIDWflatPolar(wrap=False): (2.592973059, 3.0,)
    test 611 HeightIDWflatPolar(tuple): <type 'tuple'>
    test 612 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 613 HeightIDWflatPolar(tuple-float): <type 'float'>
    test 614 HeightIDWflatPolar(wrap=False): [2.592973059, 3.0]
    test 615 HeightIDWflatPolar(list: <type 'list'>
    test 616 HeightIDWflatPolar(list-float): <type 'float'>
    test 617 HeightIDWflatPolar(list-float): <type 'float'>
    test 618 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 619 HeightIDWflatPolar.adjust: None
    test 620 HeightIDWflatPolar.kmin: 2
    test 621 HeightIDWflatPolar.wrap: False
    test 622 HeightIDWflatPolar.beta: 2
    test 623 HeightIDWflatPolar.adjust: None
    test 624 HeightIDWflatPolar.beta: 2
    test 625 HeightIDWflatPolar.kmin: 2
    test 626 HeightIDWflatPolar.wrap: False
    test 627 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 628 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 629 HeightIDWhaversine(wrap=False): 2.592742938
    test 630 HeightIDWhaversine(float): <type 'float'>
    test 631 HeightIDWhaversine(latlon): True
    test 632 HeightIDWhaversine(wrap=False): 3.0
    test 633 HeightIDWhaversine(float): <type 'float'>
    test 634 HeightIDWhaversine(latlon): True
    test 635 HeightIDWhaversine(wrap=False): (2.592742938, 3.0,)
    test 636 HeightIDWhaversine(tuple): <type 'tuple'>
    test 637 HeightIDWhaversine(tuple-float): <type 'float'>
    test 638 HeightIDWhaversine(tuple-float): <type 'float'>
    test 639 HeightIDWhaversine(wrap=False): [2.592742938, 3.0]
    test 640 HeightIDWhaversine(list: <type 'list'>
    test 641 HeightIDWhaversine(list-float): <type 'float'>
    test 642 HeightIDWhaversine(list-float): <type 'float'>
    test 643 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 644 HeightIDWhaversine.adjust: None
    test 645 HeightIDWhaversine.kmin: 2
    test 646 HeightIDWhaversine.wrap: False
    test 647 HeightIDWhaversine.beta: 2
    test 648 HeightIDWhaversine.adjust: None
    test 649 HeightIDWhaversine.beta: 2
    test 650 HeightIDWhaversine.kmin: 2
    test 651 HeightIDWhaversine.wrap: False
    test 652 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 653 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 654 HeightIDWhubeny(wrap=False): 2.689429914
    test 655 HeightIDWhubeny(float): <type 'float'>
    test 656 HeightIDWhubeny(latlon): True
    test 657 HeightIDWhubeny(wrap=False): 3.0
    test 658 HeightIDWhubeny(float): <type 'float'>
    test 659 HeightIDWhubeny(latlon): True
    test 660 HeightIDWhubeny(wrap=False): (2.689429914, 3.0,)
    test 661 HeightIDWhubeny(tuple): <type 'tuple'>
    test 662 HeightIDWhubeny(tuple-float): <type 'float'>
    test 663 HeightIDWhubeny(tuple-float): <type 'float'>
    test 664 HeightIDWhubeny(wrap=False): [2.689429914, 3.0]
    test 665 HeightIDWhubeny(list: <type 'list'>
    test 666 HeightIDWhubeny(list-float): <type 'float'>
    test 667 HeightIDWhubeny(list-float): <type 'float'>
    test 668 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 669 HeightIDWhubeny.adjust: None
    test 670 HeightIDWhubeny.kmin: 2
    test 671 HeightIDWhubeny.wrap: False
    test 672 HeightIDWhubeny.beta: 2
    test 673 HeightIDWhubeny.adjust: None
    test 674 HeightIDWhubeny.beta: 2
    test 675 HeightIDWhubeny.kmin: 2
    test 676 HeightIDWhubeny.wrap: False
    test 677 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 678 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 679 HeightIDWthomas(wrap=True): 2.592742938
    test 680 HeightIDWthomas(float): <type 'float'>
    test 681 HeightIDWthomas(latlon): True
    test 682 HeightIDWthomas(wrap=True): 3.0
    test 683 HeightIDWthomas(float): <type 'float'>
    test 684 HeightIDWthomas(latlon): True
    test 685 HeightIDWthomas(wrap=True): (2.592742938, 3.0,)
    test 686 HeightIDWthomas(tuple): <type 'tuple'>
    test 687 HeightIDWthomas(tuple-float): <type 'float'>
    test 688 HeightIDWthomas(tuple-float): <type 'float'>
    test 689 HeightIDWthomas(wrap=True): [2.592742938, 3.0]
    test 690 HeightIDWthomas(list: <type 'list'>
    test 691 HeightIDWthomas(list-float): <type 'float'>
    test 692 HeightIDWthomas(list-float): <type 'float'>
    test 693 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 694 HeightIDWthomas.adjust: None
    test 695 HeightIDWthomas.kmin: 2
    test 696 HeightIDWthomas.wrap: False
    test 697 HeightIDWthomas.beta: 2
    test 698 HeightIDWthomas.adjust: None
    test 699 HeightIDWthomas.beta: 2
    test 700 HeightIDWthomas.kmin: 2
    test 701 HeightIDWthomas.wrap: False
    test 702 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 703 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 704 HeightIDWthomas(wrap=False): 2.592742938
    test 705 HeightIDWthomas(float): <type 'float'>
    test 706 HeightIDWthomas(latlon): True
    test 707 HeightIDWthomas(wrap=False): 3.0
    test 708 HeightIDWthomas(float): <type 'float'>
    test 709 HeightIDWthomas(latlon): True
    test 710 HeightIDWthomas(wrap=False): (2.592742938, 3.0,)
    test 711 HeightIDWthomas(tuple): <type 'tuple'>
    test 712 HeightIDWthomas(tuple-float): <type 'float'>
    test 713 HeightIDWthomas(tuple-float): <type 'float'>
    test 714 HeightIDWthomas(wrap=False): [2.592742938, 3.0]
    test 715 HeightIDWthomas(list: <type 'list'>
    test 716 HeightIDWthomas(list-float): <type 'float'>
    test 717 HeightIDWthomas(list-float): <type 'float'>
    test 718 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 719 HeightIDWthomas.adjust: None
    test 720 HeightIDWthomas.kmin: 2
    test 721 HeightIDWthomas.wrap: False
    test 722 HeightIDWthomas.beta: 2
    test 723 HeightIDWthomas.adjust: None
    test 724 HeightIDWthomas.beta: 2
    test 725 HeightIDWthomas.kmin: 2
    test 726 HeightIDWthomas.wrap: False
    test 727 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 728 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 729 HeightIDWvincentys(wrap=True): 2.592742938
    test 730 HeightIDWvincentys(float): <type 'float'>
    test 731 HeightIDWvincentys(latlon): True
    test 732 HeightIDWvincentys(wrap=True): 3.0
    test 733 HeightIDWvincentys(float): <type 'float'>
    test 734 HeightIDWvincentys(latlon): True
    test 735 HeightIDWvincentys(wrap=True): (2.592742938, 3.0,)
    test 736 HeightIDWvincentys(tuple): <type 'tuple'>
    test 737 HeightIDWvincentys(tuple-float): <type 'float'>
    test 738 HeightIDWvincentys(tuple-float): <type 'float'>
    test 739 HeightIDWvincentys(wrap=True): [2.592742938, 3.0]
    test 740 HeightIDWvincentys(list: <type 'list'>
    test 741 HeightIDWvincentys(list-float): <type 'float'>
    test 742 HeightIDWvincentys(list-float): <type 'float'>
    test 743 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 744 HeightIDWvincentys.adjust: None
    test 745 HeightIDWvincentys.kmin: 2
    test 746 HeightIDWvincentys.wrap: False
    test 747 HeightIDWvincentys.beta: 2
    test 748 HeightIDWvincentys.adjust: None
    test 749 HeightIDWvincentys.beta: 2
    test 750 HeightIDWvincentys.kmin: 2
    test 751 HeightIDWvincentys.wrap: False
    test 752 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 753 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 754 HeightIDWvincentys(wrap=False): 2.592742938
    test 755 HeightIDWvincentys(float): <type 'float'>
    test 756 HeightIDWvincentys(latlon): True
    test 757 HeightIDWvincentys(wrap=False): 3.0
    test 758 HeightIDWvincentys(float): <type 'float'>
    test 759 HeightIDWvincentys(latlon): True
    test 760 HeightIDWvincentys(wrap=False): (2.592742938, 3.0,)
    test 761 HeightIDWvincentys(tuple): <type 'tuple'>
    test 762 HeightIDWvincentys(tuple-float): <type 'float'>
    test 763 HeightIDWvincentys(tuple-float): <type 'float'>
    test 764 HeightIDWvincentys(wrap=False): [2.592742938, 3.0]
    test 765 HeightIDWvincentys(list: <type 'list'>
    test 766 HeightIDWvincentys(list-float): <type 'float'>
    test 767 HeightIDWvincentys(list-float): <type 'float'>
    test 768 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 769 HeightIDWvincentys.adjust: None
    test 770 HeightIDWvincentys.kmin: 2
    test 771 HeightIDWvincentys.wrap: False
    test 772 HeightIDWvincentys.beta: 2
    test 773 HeightIDWvincentys.adjust: None
    test 774 HeightIDWvincentys.beta: 2
    test 775 HeightIDWvincentys.kmin: 2
    test 776 HeightIDWvincentys.wrap: False
    80 tests skipped (80): scipy version 0.13 below 1.2 required by heights.HeightLinear

    all 776 testHeights.py tests passed, 80 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 36.677 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testInterns.py

    testing testInterns.py 21.07.24 (module pygeodesy.interns 21.07.24)
    test 1 _0_ = '0': True
    test 2 _0_ = '0': 0
    test 3 _0_0 = 0.0: True
    test 4 _0_0 = 0.0: 0.0
    test 5 _0_001 = 0.001: True
    test 6 _0_001 = 0.001: 0.001
    test 7 _0_01 = 0.01: True
    test 8 _0_01 = 0.01: 0.01
    test 9 _0_1 = 0.1: True
    test 10 _0_1 = 0.1: 0.1
    test 11 _0_125 = 0.125: True
    test 12 _0_125 = 0.125: 0.125
    test 13 _0_25 = 0.25: True
    test 14 _0_25 = 0.25: 0.25
    test 15 _0_26 = 0.26: True
    test 16 _0_26 = 0.26: 0.26
    test 17 _0_5 = 0.5: True
    test 18 _0_5 = 0.5: 0.5
    test 19 _0to9_ = '0123456789': True
    test 20 _0to9_ = '0123456789': 0123456789  FAILED, KNOWN, expected 0to9
    test 21 _1000_0 = 1000.0: True
    test 22 _1000_0 = 1000.0: 1000.0
    test 23 _10_0 = 10.0: True
    test 24 _10_0 = 10.0: 10.0
    test 25 _120_0 = 120.0: True
    test 26 _120_0 = 120.0: 120.0
    test 27 _16_0 = 16.0: True
    test 28 _16_0 = 16.0: 16.0
    test 29 _180_0 = 180.0: True
    test 30 _180_0 = 180.0: 180.0
    test 31 _1_ = '1': True
    test 32 _1_ = '1': 1
    test 33 _1_0 = 1.0: True
    test 34 _1_0 = 1.0: 1.0
    test 35 _1_5 = 1.5: True
    test 36 _1_5 = 1.5: 1.5
    test 37 _24_0 = 24.0: True
    test 38 _24_0 = 24.0: 24.0
    test 39 _2_ = '2': True
    test 40 _2_ = '2': 2
    test 41 _2_0 = 2.0: True
    test 42 _2_0 = 2.0: 2.0
    test 43 _32_0 = 32.0: True
    test 44 _32_0 = 32.0: 32.0
    test 45 _3600_0 = 3600.0: True
    test 46 _3600_0 = 3600.0: 3600.0
    test 47 _360_0 = 360.0: True
    test 48 _360_0 = 360.0: 360.0
    test 49 _3_ = '3': True
    test 50 _3_ = '3': 3
    test 51 _3_0 = 3.0: True
    test 52 _3_0 = 3.0: 3.0
    test 53 _400_0 = 400.0: True
    test 54 _400_0 = 400.0: 400.0
    test 55 _4_ = '4': True
    test 56 _4_ = '4': 4
    test 57 _4_0 = 4.0: True
    test 58 _4_0 = 4.0: 4.0
    test 59 _5_0 = 5.0: True
    test 60 _5_0 = 5.0: 5.0
    test 61 _60_0 = 60.0: True
    test 62 _60_0 = 60.0: 60.0
    test 63 _6_0 = 6.0: True
    test 64 _6_0 = 6.0: 6.0
    test 65 _720_0 = 720.0: True
    test 66 _720_0 = 720.0: 720.0
    test 67 _8_0 = 8.0: True
    test 68 _8_0 = 8.0: 8.0
    test 69 _90_0 = 90.0: True
    test 70 _90_0 = 90.0: 90.0
    test 71 _9_0 = 9.0: True
    test 72 _9_0 = 9.0: 9.0
    test 73 __all__ = ('DIG', 'EPS', 'EPS2', 'E....', 'PI4', 'PI_2', 'PI_4'): False  FAILED, KNOWN, expected True
    test 74 __builtins__ = {'bytearray': <type 'byte....ceptions.OverflowError'>}: False  FAILED, KNOWN, expected True
    test 75 __doc__ = u"Single-instance C{float....rn}'ed across modules.\n": False  FAILED, KNOWN, expected True
    test 76 __file__ = './pygeodesy/interns.pyc': True
    test 77 __name__ = 'pygeodesy.interns': True
    test 78 __package__ = 'pygeodesy': True
    test 79 __version__ = '21.07.24': True
    test 80 __vs__ = ' vs ': True
    test 81 _A_ = 'A': True
    test 82 _A_ = 'A': a
    test 83 _a_ = 'a': True
    test 84 _a_ = 'a': a
    test 85 _Airy1830_ = 'Airy1830': True
    test 86 _Airy1830_ = 'Airy1830': airy1830
    test 87 _AiryModified_ = 'AiryModified': True
    test 88 _AiryModified_ = 'AiryModified': airymodified
    test 89 _ambiguous_ = 'ambiguous': True
    test 90 _ambiguous_ = 'ambiguous': ambiguous
    test 91 _an_ = 'an': True
    test 92 _an_ = 'an': an
    test 93 _and_ = 'and': True
    test 94 _and_ = 'and': and
    test 95 _angle_ = 'angle': True
    test 96 _angle_ = 'angle': angle
    test 97 _areaOf_ = 'areaOf': True
    test 98 _areaOf_ = 'areaOf': areaof
    test 99 _AT_ = '@': True
    test 100 _AT_ = '@': @  FAILED, KNOWN, expected at
    test 101 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': True
    test 102 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': abcdefghjklmnpqrstuvwxyz  FAILED, KNOWN, expected atoznoio
    test 103 _attribute_ = 'attribute': True
    test 104 _attribute_ = 'attribute': attribute
    test 105 _azi2_ = 'azi2': True
    test 106 _azi2_ = 'azi2': azi2
    test 107 _azimuth_ = 'azimuth': True
    test 108 _azimuth_ = 'azimuth': azimuth
    test 109 _B_ = 'B': True
    test 110 _B_ = 'B': b
    test 111 _band_ = 'band': True
    test 112 _band_ = 'band': band
    test 113 _BAR_ = '|': True
    test 114 _BAR_ = '|': |  FAILED, KNOWN, expected bar
    test 115 _bearing_ = 'bearing': True
    test 116 _bearing_ = 'bearing': bearing
    test 117 _Bessel1841_ = 'Bessel1841': True
    test 118 _Bessel1841_ = 'Bessel1841': bessel1841
    test 119 _by_ = 'by': True
    test 120 _by_ = 'by': by
    test 121 _C_ = 'C': True
    test 122 _C_ = 'C': c
    test 123 _Cartesian_ = 'Cartesian': True
    test 124 _Cartesian_ = 'Cartesian': cartesian
    test 125 _Clarke1866_ = 'Clarke1866': True
    test 126 _Clarke1866_ = 'Clarke1866': clarke1866
    test 127 _Clarke1880IGN_ = 'Clarke1880IGN': True
    test 128 _Clarke1880IGN_ = 'Clarke1880IGN': clarke1880ign
    test 129 _coincident_ = 'coincident': True
    test 130 _coincident_ = 'coincident': coincident
    test 131 _colinear_ = 'colinear': True
    test 132 _colinear_ = 'colinear': colinear
    test 133 _COLON_ = ':': True
    test 134 _COLON_ = ':': :  FAILED, KNOWN, expected colon
    test 135 _COLONSPACE_ = ': ': True
    test 136 _COLONSPACE_ = ': ': :   FAILED, KNOWN, expected colonspace
    test 137 _COMMA_ = ',': True
    test 138 _COMMA_ = ',': ,  FAILED, KNOWN, expected comma
    test 139 _COMMASPACE_ = ', ': True
    test 140 _COMMASPACE_ = ', ': ,   FAILED, KNOWN, expected commaspace
    test 141 _convergence_ = 'convergence': True
    test 142 _convergence_ = 'convergence': convergence
    test 143 _conversion_ = 'conversion': True
    test 144 _conversion_ = 'conversion': conversion
    test 145 _convex_ = 'convex': True
    test 146 _convex_ = 'convex': convex
    test 147 _cubic_ = 'cubic': True
    test 148 _cubic_ = 'cubic': cubic
    test 149 _DASH_ = '-': True
    test 150 _DASH_ = '-': -  FAILED, KNOWN, expected dash
    test 151 _datum_ = 'datum': True
    test 152 _datum_ = 'datum': datum
    test 153 _DDOT_ = '..': True
    test 154 _DDOT_ = '..': ..  FAILED, KNOWN, expected ddot
    test 155 _decode3_ = 'decode3': True
    test 156 _decode3_ = 'decode3': decode3
    test 157 _deg_ = 'deg': True
    test 158 _deg_ = 'deg': deg
    test 159 _degrees2_ = 'degrees2': True
    test 160 _degrees2_ = 'degrees2': degrees2
    test 161 _degrees_ = 'degrees': True
    test 162 _degrees_ = 'degrees': degrees
    test 163 _DEQUALSPACED_ = ' == ': True
    test 164 _DEQUALSPACED_ = ' == ':  ==   FAILED, KNOWN, expected dequalspaced
    test 165 _distance_ = 'distance': True
    test 166 _distance_ = 'distance': distance
    test 167 _distanceTo_ = 'distanceTo': True
    test 168 _distanceTo_ = 'distanceTo': distanceto
    test 169 _distant_ = 'distant': True
    test 170 _distant_ = 'distant': distant
    test 171 _doesn_t_exist_ = "doesn't exist": True
    test 172 _doesn_t_exist_ = "doesn't exist": doesn't exist  FAILED, KNOWN, expected doesn_t_exist
    test 173 _DOT_ = '.': True
    test 174 _DOT_ = '.': .  FAILED, KNOWN, expected dot
    test 175 _down_ = 'down': True
    test 176 _down_ = 'down': down
    test 177 _DUNDER_ = '__': True
    test 178 _DUNDER_ = '__': __  FAILED, KNOWN, expected dunder
    test 179 _E_ = 'E': True
    test 180 _E_ = 'E': e
    test 181 _e_ = 'e': True
    test 182 _e_ = 'e': e
    test 183 _east_ = 'east': True
    test 184 _east_ = 'east': east
    test 185 _easting_ = 'easting': True
    test 186 _easting_ = 'easting': easting
    test 187 _ecef_ = 'ecef': True
    test 188 _ecef_ = 'ecef': ecef
    test 189 _edge_ = 'edge': True
    test 190 _edge_ = 'edge': edge
    test 191 _elevation_ = 'elevation': True
    test 192 _elevation_ = 'elevation': elevation
    test 193 _ELLIPSIS_ = '...': True
    test 194 _ELLIPSIS_ = '...': ...  FAILED, KNOWN, expected ellipsis
    test 195 _ellipsoid_ = 'ellipsoid': True
    test 196 _ellipsoid_ = 'ellipsoid': ellipsoid
    test 197 _ellipsoidal_ = 'ellipsoidal': True
    test 198 _ellipsoidal_ = 'ellipsoidal': ellipsoidal
    test 199 _enabled_ = 'enabled': True
    test 200 _enabled_ = 'enabled': enabled
    test 201 _encode_ = 'encode': True
    test 202 _encode_ = 'encode': encode
    test 203 _end_ = 'end': True
    test 204 _end_ = 'end': end
    test 205 _epoch_ = 'epoch': True
    test 206 _epoch_ = 'epoch': epoch
    test 207 _EPS0_ = 'EPS0': True
    test 208 _EPS0_ = 'EPS0': eps0
    test 209 _EPS_ = 'EPS': True
    test 210 _EPS_ = 'EPS': eps
    test 211 _EQUAL_ = '=': True
    test 212 _EQUAL_ = '=': =  FAILED, KNOWN, expected equal
    test 213 _EQUALSPACED_ = ' = ': True
    test 214 _EQUALSPACED_ = ' = ':  =   FAILED, KNOWN, expected equalspaced
    test 215 _EW_ = 'EW': True
    test 216 _EW_ = 'EW': ew
    test 217 _exceed_PI_radians_ = 'exceed PI radians': True
    test 218 _exceed_PI_radians_ = 'exceed PI radians': exceed pi radians  FAILED, KNOWN, expected exceed_pi_radians
    test 219 _exceeds_ = 'exceeds': True
    test 220 _exceeds_ = 'exceeds': exceeds
    test 221 _exists_ = 'exists': True
    test 222 _exists_ = 'exists': exists
    test 223 _f_ = 'f': True
    test 224 _f_ = 'f': f
    test 225 _feet_ = 'feet': True
    test 226 _feet_ = 'feet': feet
    test 227 _few_ = 'few': True
    test 228 _few_ = 'few': few
    test 229 _finite_ = 'finite': True
    test 230 _finite_ = 'finite': finite
    test 231 _fraction_ = 'fraction': True
    test 232 _fraction_ = 'fraction': fraction
    test 233 _from_ = 'from': True
    test 234 _from_ = 'from': from
    test 235 _g_ = 'g': True
    test 236 _g_ = 'g': g
    test 237 _gamma_ = 'gamma': True
    test 238 _gamma_ = 'gamma': gamma
    test 239 _GRS80_ = 'GRS80': True
    test 240 _GRS80_ = 'GRS80': grs80
    test 241 _H_ = 'H': True
    test 242 _H_ = 'H': h
    test 243 _h_ = 'h': True
    test 244 _h_ = 'h': h
    test 245 _height_ = 'height': True
    test 246 _height_ = 'height': height
    test 247 _hemipole_ = 'hemipole': True
    test 248 _hemipole_ = 'hemipole': hemipole
    test 249 _i_ = 'i': True
    test 250 _i_ = 'i': i
    test 251 _immutable_ = 'immutable': True
    test 252 _immutable_ = 'immutable': immutable
    test 253 _in_ = 'in': True
    test 254 _in_ = 'in': in
    test 255 _INF_ = 'INF': True
    test 256 _INF_ = 'INF': inf
    test 257 _initial_ = 'initial': True
    test 258 _initial_ = 'initial': initial
    test 259 _inside_ = 'inside': True
    test 260 _inside_ = 'inside': inside
    test 261 _intersection_ = 'intersection': True
    test 262 _intersection_ = 'intersection': intersection
    test 263 _Intl1924_ = 'Intl1924': True
    test 264 _Intl1924_ = 'Intl1924': intl1924
    test 265 _invalid_ = 'invalid': True
    test 266 _invalid_ = 'invalid': invalid
    test 267 _isclockwise_ = 'isclockwise': True
    test 268 _isclockwise_ = 'isclockwise': isclockwise
    test 269 _ispolar_ = 'ispolar': True
    test 270 _ispolar_ = 'ispolar': ispolar
    test 271 _j_ = 'j': True
    test 272 _j_ = 'j': j
    test 273 _k0_ = 'k0': True
    test 274 _k0_ = 'k0': k0
    test 275 _kind_ = 'kind': True
    test 276 _kind_ = 'kind': kind
    test 277 _knots_ = 'knots': True
    test 278 _knots_ = 'knots': knots
    test 279 _Krassovski1940_ = 'Krassovski1940': True
    test 280 _Krassovski1940_ = 'Krassovski1940': krassovski1940
    test 281 _Krassowsky1940_ = 'Krassowsky1940': True
    test 282 _Krassowsky1940_ = 'Krassowsky1940': krassowsky1940
    test 283 _lam_ = 'lam': True
    test 284 _lam_ = 'lam': lam
    test 285 _lat0_ = 'lat0': True
    test 286 _lat0_ = 'lat0': lat0
    test 287 _lat1_ = 'lat1': True
    test 288 _lat1_ = 'lat1': lat1
    test 289 _lat2_ = 'lat2': True
    test 290 _lat2_ = 'lat2': lat2
    test 291 _lat_ = 'lat': True
    test 292 _lat_ = 'lat': lat
    test 293 _LatLon_ = 'LatLon': True
    test 294 _LatLon_ = 'LatLon': latlon
    test 295 _latlon_ = 'latlon': True
    test 296 _latlon_ = 'latlon': latlon
    test 297 _len_ = 'len': True
    test 298 _len_ = 'len': len
    test 299 _linear_ = 'linear': True
    test 300 _linear_ = 'linear': linear
    test 301 _lon0_ = 'lon0': True
    test 302 _lon0_ = 'lon0': lon0
    test 303 _lon2_ = 'lon2': True
    test 304 _lon2_ = 'lon2': lon2
    test 305 _lon_ = 'lon': True
    test 306 _lon_ = 'lon': lon
    test 307 _ltp_ = 'ltp': True
    test 308 _ltp_ = 'ltp': ltp
    test 309 _M_ = 'M': True
    test 310 _M_ = 'M': m
    test 311 _m_ = 'm': True
    test 312 _m_ = 'm': m
    test 313 _mean_ = 'mean': True
    test 314 _mean_ = 'mean': mean
    test 315 _meanOf_ = 'meanOf': True
    test 316 _meanOf_ = 'meanOf': meanof
    test 317 _meridional_ = 'meridional': True
    test 318 _meridional_ = 'meridional': meridional
    test 319 _meter2_ = 'meter2': True
    test 320 _meter2_ = 'meter2': meter2
    test 321 _meter_ = 'meter': True
    test 322 _meter_ = 'meter': meter
    test 323 _MGRS_ = 'MGRS': True
    test 324 _MGRS_ = 'MGRS': mgrs
    test 325 _MINUS_ = '-': True
    test 326 _MINUS_ = '-': -  FAILED, KNOWN, expected minus
    test 327 _module_ = 'module': True
    test 328 _module_ = 'module': module
    test 329 _N_ = 'N': True
    test 330 _N_ = 'N': n
    test 331 _n_ = 'n': True
    test 332 _n_ = 'n': n
    test 333 _N_A_ = 'N/A': True
    test 334 _N_A_ = 'N/A': n/a  FAILED, KNOWN, expected n_a
    test 335 _n_a_ = 'n/a': True
    test 336 _n_a_ = 'n/a': n/a  FAILED, KNOWN, expected n_a
    test 337 _NAD27_ = 'NAD27': True
    test 338 _NAD27_ = 'NAD27': nad27
    test 339 _NAD83_ = 'NAD83': True
    test 340 _NAD83_ = 'NAD83': nad83
    test 341 _name_ = 'name': True
    test 342 _name_ = 'name': name
    test 343 _NAN_ = 'NAN': True
    test 344 _NAN_ = 'NAN': nan
    test 345 _NE_ = 'NE': True
    test 346 _NE_ = 'NE': ne
    test 347 _near_concentric_ = 'near-concentric': True
    test 348 _near_concentric_ = 'near-concentric': near-concentric  FAILED, KNOWN, expected near_concentric
    test 349 _nearestOn2_ = 'nearestOn2': True
    test 350 _nearestOn2_ = 'nearestOn2': neareston2
    test 351 _negative_ = 'negative': True
    test 352 _negative_ = 'negative': negative
    test 353 _NL_ = '\n': True
    test 354 _NL_ = '\n': 
  FAILED, KNOWN, expected nl
    test 355 _NL_hash_ = '\n# ': True
    test 356 _NL_hash_ = '\n# ': 
#   FAILED, KNOWN, expected nl_hash
    test 357 _NL_var_ = '\n@var ': True
    test 358 _NL_var_ = '\n@var ': 
@var   FAILED, KNOWN, expected nl_var
    test 359 _no_ = 'no': True
    test 360 _no_ = 'no': no
    test 361 _north_ = 'north': True
    test 362 _north_ = 'north': north
    test 363 _northing_ = 'northing': True
    test 364 _northing_ = 'northing': northing
    test 365 _NorthPole_ = 'NorthPole': True
    test 366 _NorthPole_ = 'NorthPole': northpole
    test 367 _not_ = 'not': True
    test 368 _not_ = 'not': not
    test 369 _NS_ = 'NS': True
    test 370 _NS_ = 'NS': ns
    test 371 _NSEW_ = 'NSEW': True
    test 372 _NSEW_ = 'NSEW': nsew
    test 373 _NTF_ = 'NTF': True
    test 374 _NTF_ = 'NTF': ntf
    test 375 _number_ = 'number': True
    test 376 _number_ = 'number': number
    test 377 _numpy_ = 'numpy': True
    test 378 _numpy_ = 'numpy': numpy
    test 379 _Nv00_ = 'Nv00': True
    test 380 _Nv00_ = 'Nv00': nv00
    test 381 _NW_ = 'NW': True
    test 382 _NW_ = 'NW': nw
    test 383 _OKd_ = '._-': True
    test 384 _OKd_ = '._-': ._-  FAILED, KNOWN, expected okd
    test 385 _on_ = 'on': True
    test 386 _on_ = 'on': on
    test 387 _or_ = 'or': True
    test 388 _or_ = 'or': or
    test 389 _other_ = 'other': True
    test 390 _other_ = 'other': other
    test 391 _outside_ = 'outside': True
    test 392 _outside_ = 'outside': outside
    test 393 _overlap_ = 'overlap': True
    test 394 _overlap_ = 'overlap': overlap
    test 395 _PERCENT_ = '%': True
    test 396 _PERCENT_ = '%': %  FAILED, KNOWN, expected percent
    test 397 _PERCENTDOTSTAR_ = '%.*': True
    test 398 _PERCENTDOTSTAR_ = '%.*': %.*  FAILED, KNOWN, expected percentdotstar
    test 399 _perimeterOf_ = 'perimeterOf': True
    test 400 _perimeterOf_ = 'perimeterOf': perimeterof
    test 401 _phi_ = 'phi': True
    test 402 _phi_ = 'phi': phi
    test 403 _PLUS_ = '+': True
    test 404 _PLUS_ = '+': +  FAILED, KNOWN, expected plus
    test 405 _PLUSMINUS_ = '+-': True
    test 406 _PLUSMINUS_ = '+-': +-  FAILED, KNOWN, expected plusminus
    test 407 _point_ = 'point': True
    test 408 _point_ = 'point': point
    test 409 _points_ = 'points': True
    test 410 _points_ = 'points': points
    test 411 _pole_ = 'pole': True
    test 412 _pole_ = 'pole': pole
    test 413 _precision_ = 'precision': True
    test 414 _precision_ = 'precision': precision
    test 415 _prime_vertical_ = 'prime_vertical': True
    test 416 _prime_vertical_ = 'prime_vertical': prime_vertical
    test 417 _pygeodesy_abspath_ = 'pygeodesy_abspath': True
    test 418 _pygeodesy_abspath_ = 'pygeodesy_abspath': pygeodesy_abspath
    test 419 _Python_ = 'Python': True
    test 420 _Python_ = 'Python': python
    test 421 _QUOTE2_ = '"': True
    test 422 _QUOTE2_ = '"': "  FAILED, KNOWN, expected quote2
    test 423 _radians2_ = 'radians2': True
    test 424 _radians2_ = 'radians2': radians2
    test 425 _radians_ = 'radians': True
    test 426 _radians_ = 'radians': radians
    test 427 _radius1_ = 'radius1': True
    test 428 _radius1_ = 'radius1': radius1
    test 429 _radius2_ = 'radius2': True
    test 430 _radius2_ = 'radius2': radius2
    test 431 _radius_ = 'radius': True
    test 432 _radius_ = 'radius': radius
    test 433 _range_ = 'range': True
    test 434 _range_ = 'range': range
    test 435 _reciprocal_ = 'reciprocal': True
    test 436 _reciprocal_ = 'reciprocal': reciprocal
    test 437 _reframe_ = 'reframe': True
    test 438 _reframe_ = 'reframe': reframe
    test 439 _resolution_ = 'resolution': True
    test 440 _resolution_ = 'resolution': resolution
    test 441 _S_ = 'S': True
    test 442 _S_ = 'S': s
    test 443 _s_ = 's': True
    test 444 _s_ = 's': s
    test 445 _scalar_ = 'scalar': True
    test 446 _scalar_ = 'scalar': scalar
    test 447 _scale_ = 'scale': True
    test 448 _scale_ = 'scale': scale
    test 449 _scipy_ = 'scipy': True
    test 450 _scipy_ = 'scipy': scipy
    test 451 _SE_ = 'SE': True
    test 452 _SE_ = 'SE': se
    test 453 _semi_circular_ = 'semi-circular': True
    test 454 _semi_circular_ = 'semi-circular': semi-circular  FAILED, KNOWN, expected semi_circular
    test 455 _sep_ = 'sep': True
    test 456 _sep_ = 'sep': sep
    test 457 _singular_ = 'singular': True
    test 458 _singular_ = 'singular': singular
    test 459 _small_ = 'small': True
    test 460 _small_ = 'small': small
    test 461 _SouthPole_ = 'SouthPole': True
    test 462 _SouthPole_ = 'SouthPole': southpole
    test 463 _SPACE_ = ' ': True
    test 464 _SPACE_ = ' ':    FAILED, KNOWN, expected space
    test 465 _Sphere_ = 'Sphere': True
    test 466 _Sphere_ = 'Sphere': sphere
    test 467 _spherical_ = 'spherical': True
    test 468 _spherical_ = 'spherical': spherical
    test 469 _STAR_ = '*': True
    test 470 _STAR_ = '*': *  FAILED, KNOWN, expected star
    test 471 _start_ = 'start': True
    test 472 _start_ = 'start': start
    test 473 _std_ = 'std': True
    test 474 _std_ = 'std': std
    test 475 _stdev_ = 'stdev': True
    test 476 _stdev_ = 'stdev': stdev
    test 477 _supported_ = 'supported': True
    test 478 _supported_ = 'supported': supported
    test 479 _SW_ = 'SW': True
    test 480 _SW_ = 'SW': sw
    test 481 _sx_ = 'sx': True
    test 482 _sx_ = 'sx': sx
    test 483 _sy_ = 'sy': True
    test 484 _sy_ = 'sy': sy
    test 485 _sz_ = 'sz': True
    test 486 _sz_ = 'sz': sz
    test 487 _tbd_ = 'tbd': True
    test 488 _tbd_ = 'tbd': tbd
    test 489 _till_ = 'till': True
    test 490 _till_ = 'till': till
    test 491 _to_ = 'to': True
    test 492 _to_ = 'to': to
    test 493 _too_ = 'too': True
    test 494 _too_ = 'too': too
    test 495 _transform_ = 'transform': True
    test 496 _transform_ = 'transform': transform
    test 497 _tx_ = 'tx': True
    test 498 _tx_ = 'tx': tx
    test 499 _ty_ = 'ty': True
    test 500 _ty_ = 'ty': ty
    test 501 _tz_ = 'tz': True
    test 502 _tz_ = 'tz': tz
    test 503 _UNDER_ = '_': True
    test 504 _UNDER_ = '_': _  FAILED, KNOWN, expected under
    test 505 _units_ = 'units': True
    test 506 _units_ = 'units': units
    test 507 _up_ = 'up': True
    test 508 _up_ = 'up': up
    test 509 _UPS_ = 'UPS': True
    test 510 _UPS_ = 'UPS': ups
    test 511 _utf_8_ = 'utf-8': True
    test 512 _utf_8_ = 'utf-8': utf-8  FAILED, KNOWN, expected utf_8
    test 513 _UTM_ = 'UTM': True
    test 514 _UTM_ = 'UTM': utm
    test 515 _V_ = 'V': True
    test 516 _V_ = 'V': v
    test 517 _valid_ = 'valid': True
    test 518 _valid_ = 'valid': valid
    test 519 _version_ = 'version': True
    test 520 _version_ = 'version': version
    test 521 _vs_ = 'vs': True
    test 522 _vs_ = 'vs': vs
    test 523 _W_ = 'W': True
    test 524 _W_ = 'W': w
    test 525 _WGS72_ = 'WGS72': True
    test 526 _WGS72_ = 'WGS72': wgs72
    test 527 _WGS84_ = 'WGS84': True
    test 528 _WGS84_ = 'WGS84': wgs84
    test 529 _width_ = 'width': True
    test 530 _width_ = 'width': width
    test 531 _X_ = 'X': True
    test 532 _X_ = 'X': x
    test 533 _x_ = 'x': True
    test 534 _x_ = 'x': x
    test 535 _xyz_ = 'xyz': True
    test 536 _xyz_ = 'xyz': xyz
    test 537 _y_ = 'y': True
    test 538 _y_ = 'y': y
    test 539 _z_ = 'z': True
    test 540 _z_ = 'z': z
    test 541 _zone_ = 'zone': True
    test 542 _zone_ = 'zone': zone
    test 543 EPS: True
    test 544 EPS+1: True
    test 545 EPS0: True
    test 546 EPS02: True
    test 547 EPS1: True
    test 548 EPS1-1: True
    test 549 EPS2: True
    test 550 EPS4: True
    test 551 .tillC: ABC
    test 552 .fromX: XYZ
    test 553 .fromH.tillJ: HJ
    test 554 .fromN.tillP: NP

    39 of 554 testInterns.py tests (7.0%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 9.979 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testIters.py

    testing testIters.py 21.02.07 (module pygeodesy.iters 21.06.15)
    test 1 i : 7
    test 2 dedup: False
    test 3 i : 0
    test 4 p0: True
    test 5 dedup: True
    test 6 copies: [0, 1, 2, 3, 4, 5, 6, 7]
    test 7 i : 0
    test 8 copies: 8
    test 9 p0: True
    test 10 copies: True
    test 11 copies: (0, 1, 2, 3, 4, 5, 6, 7)
    test 12 iter: 1
    test 13 iter: 2
    test 14 iter: 3
    test 15 re-iter: PointsError('points (0): too few')

    all 15 testIters.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.279 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testKarney.py

    testing testKarney.py 21.05.19 (module pygeodesy.karney 21.07.15)
    103 tests skipped (103): no geographiclib

    testDirect(pygeodesy.geodesicx, 21.07.15)
    test 1 Direct.lat2: -11.174909999999988  FAILED, KNOWN, expected -11.174910000000001
    test 2 Direct.lon2: -69.959210000000013  FAILED, KNOWN, expected -69.959209999999999
    test 3 Direct.azi2: 129.289270889708774
    test 4 Direct.a12: 80.507297142819723  FAILED, KNOWN, expected 80.507297142819738
    test 5 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 6 Direct.M12: 0.166063184473861
    test 7 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 8 Direct.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 9 Direct.lat2: 77.031959999999998
    test 10 Direct.lon2: 197.182339999999982  FAILED, KNOWN, expected 197.182340000000011
    test 11 Direct.azi2: 109.112041110671498  FAILED, KNOWN, expected 109.112041110671512
    test 12 Direct.a12: 36.892740690445891
    test 13 Direct.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 14 Direct.M12: 0.800763496080926
    test 15 Direct.M21: 0.801010069842010
    test 16 Direct.S12: 61674961290615.601562500000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 17 Direct.lat2: 41.841380000000008  FAILED, KNOWN, expected 41.841380000000001
    test 18 Direct.lon2: 98.566349999999986  FAILED, KNOWN, expected 98.566350000000000
    test 19 Direct.azi2: -41.843599514404680  FAILED, KNOWN, expected -41.843599514404659
    test 20 Direct.a12: 75.629304910115252  FAILED, KNOWN, expected 75.629304910115223
    test 21 Direct.m12: 6161154.577311061322689
    test 22 Direct.M12: 0.248163392339503  FAILED, KNOWN, expected 0.248163392339504
    test 23 Direct.M21: 0.249302512036278  FAILED, KNOWN, expected 0.249302512036279
    test 24 Direct.S12: -6637997720646.726562500000000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 25 Direct.lat2: -12.706309999999979  FAILED, KNOWN, expected -12.706310000000000
    test 26 Direct.lon2: 285.903439999999989
    test 27 Direct.azi2: 2.512956620913672  FAILED, KNOWN, expected 2.512956620913668
    test 28 Direct.a12: 100.278634181155780  FAILED, KNOWN, expected 100.278634181155752
    test 29 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 30 Direct.M12: -0.171994902747004
    test 31 Direct.M21: -0.177225695263458  FAILED, KNOWN, expected -0.177225695263457
    test 32 Direct.S12: -121287239862139.750000000000000
    test 33 Direct.lat2: -15.847839999999952  FAILED, KNOWN, expected -15.847840000000000
    test 34 Direct.lon2: 5.935570000000013  FAILED, KNOWN, expected 5.935570000000000
    test 35 Direct.azi2: -20.787484651536982  FAILED, KNOWN, expected -20.787484651536989
    test 36 Direct.a12: 144.640108810286307  FAILED, KNOWN, expected 144.640108810286250
    test 37 Direct.m12: 3732902.158387714996934  FAILED, KNOWN, expected 3732902.158387718722224
    test 38 Direct.M12: -0.812736387000705
    test 39 Direct.M21: -0.812998005191545
    test 40 Direct.S12: 97825992354058.718750000000000  FAILED, KNOWN, expected 97825992354058.703125000000000

    testInverse(pygeodesy.geodesicx, 21.07.15)
    test 41 Inverse.lat2: -11.174910000000001
    test 42 Inverse.lon2: -69.959209999999999
    test 43 Inverse.azi1: 111.098748429560317  FAILED, KNOWN, expected 111.098748429560331
    test 44 Inverse.azi2: 129.289270889708774
    test 45 Inverse.s12: 8935244.560481831431389  FAILED, KNOWN, expected 8935244.560481829568744
    test 46 Inverse.a12: 80.507297142819752  FAILED, KNOWN, expected 80.507297142819738
    test 47 Inverse.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 48 Inverse.M12: 0.166063184473861
    test 49 Inverse.M21: 0.164791169456129
    test 50 Inverse.S12: 12841384694976.435546875000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 51 Inverse.lat2: 77.031959999999998
    test 52 Inverse.lon2: 197.182340000000011
    test 53 Inverse.azi1: 22.020059880982807  FAILED, KNOWN, expected 22.020059880982799
    test 54 Inverse.azi2: 109.112041110671527  FAILED, KNOWN, expected 109.112041110671512
    test 55 Inverse.s12: 4105086.171392442658544  FAILED, KNOWN, expected 4105086.171392440795898
    test 56 Inverse.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 57 Inverse.m12: 3828869.334438760764897
    test 58 Inverse.M12: 0.800763496080926
    test 59 Inverse.M21: 0.801010069842010
    test 60 Inverse.S12: 61674961290615.632812500000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 61 Inverse.lat2: 41.841380000000001
    test 62 Inverse.lon2: 98.566350000000000
    test 63 Inverse.azi1: -32.444568764331898  FAILED, KNOWN, expected -32.444568764331891
    test 64 Inverse.azi2: -41.843599514404673  FAILED, KNOWN, expected -41.843599514404659
    test 65 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 66 Inverse.a12: 75.629304910115238  FAILED, KNOWN, expected 75.629304910115223
    test 67 Inverse.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 68 Inverse.M12: 0.248163392339504
    test 69 Inverse.M21: 0.249302512036279
    test 70 Inverse.S12: -6637997720646.720703125000000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 71 Inverse.lat2: -12.706310000000000
    test 72 Inverse.lon2: 285.903439999999989
    test 73 Inverse.azi1: 173.734912408784027
    test 74 Inverse.azi2: 2.512956620913673  FAILED, KNOWN, expected 2.512956620913668
    test 75 Inverse.s12: 11150344.231208022683859  FAILED, KNOWN, expected 11150344.231208024546504
    test 76 Inverse.a12: 100.278634181155752
    test 77 Inverse.m12: 6289939.567044667899609  FAILED, KNOWN, expected 6289939.567044668830931
    test 78 Inverse.M12: -0.171994902747004
    test 79 Inverse.M21: -0.177225695263457
    test 80 Inverse.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 81 Inverse.lat2: -15.847840000000000
    test 82 Inverse.lon2: 5.935570000000000
    test 83 Inverse.azi1: -159.033557661192930
    test 84 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 85 Inverse.s12: 16076603.163118060678244  FAILED, KNOWN, expected 16076603.163118068128824
    test 86 Inverse.a12: 144.640108810286250
    test 87 Inverse.m12: 3732902.158387719653547  FAILED, KNOWN, expected 3732902.158387718722224
    test 88 Inverse.M12: -0.812736387000705
    test 89 Inverse.M21: -0.812998005191545
    test 90 Inverse.S12: 97825992354058.718750000000000  FAILED, KNOWN, expected 97825992354058.703125000000000

    testGeodCalc(pygeodesy.ellipsoidalExact, 21.06.27)
    test 91 area: 13662703680020
    test 92 perimeter: 16830891.356049

    testMask(pygeodesy.geodesicx, 21.07.15)
    test 93 Geodesic.EMPTY: 0
    test 94 Geodesic.LATITUDE: 128
    test 95 Geodesic.LONGITUDE: 256
    test 96 Geodesic.AZIMUTH: 512
    test 97 Geodesic.DISTANCE: 1024
    test 98 Geodesic.STANDARD: 3968
    test 99 Geodesic.DISTANCE_IN: 2048
    test 100 Geodesic.REDUCEDLENGTH: 4096
    test 101 Geodesic.GEODESICSCALE: 8192
    test 102 Geodesic.AREA: 16384
    test 103 Geodesic.ALL: 32640
    test 104 Geodesic.LONG_UNROLL: 32768

    testDirect(pygeodesy.geodsolve, 21.07.03)
    test 105 Direct.lat2: -11.174909999999988  FAILED, KNOWN, expected -11.174910000000001
    test 106 Direct.lon2: -69.959210000000027  FAILED, KNOWN, expected -69.959209999999999
    test 107 Direct.azi2: 129.289270889708774
    test 108 Direct.a12: 80.507297142819723  FAILED, KNOWN, expected 80.507297142819738
    test 109 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 110 Direct.M12: 0.166063184473861
    test 111 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 112 Direct.S12: 12841384694976.431640625000000
    test 113 Direct.lat2: 77.031959999999998
    test 114 Direct.lon2: -162.817659999999961  FAILED, KNOWN, expected 197.182340000000011
    test 115 Direct.azi2: 109.112041110671555  FAILED, KNOWN, expected 109.112041110671512
    test 116 Direct.a12: 36.892740690445905  FAILED, KNOWN, expected 36.892740690445891
    test 117 Direct.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 118 Direct.M12: 0.800763496080926
    test 119 Direct.M21: 0.801010069842010
    test 120 Direct.S12: 61674961290615.625000000000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 121 Direct.lat2: 41.841380000000029  FAILED, KNOWN, expected 41.841380000000001
    test 122 Direct.lon2: 98.566349999999971  FAILED, KNOWN, expected 98.566350000000000
    test 123 Direct.azi2: -41.843599514404680  FAILED, KNOWN, expected -41.843599514404659
    test 124 Direct.a12: 75.629304910115252  FAILED, KNOWN, expected 75.629304910115223
    test 125 Direct.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 126 Direct.M12: 0.248163392339503  FAILED, KNOWN, expected 0.248163392339504
    test 127 Direct.M21: 0.249302512036278  FAILED, KNOWN, expected 0.249302512036279
    test 128 Direct.S12: -6637997720646.726562500000000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 129 Direct.lat2: -12.706309999999982  FAILED, KNOWN, expected -12.706310000000000
    test 130 Direct.lon2: -74.096560000000011  FAILED, KNOWN, expected 285.903439999999989
    test 131 Direct.azi2: 2.512956620913670  FAILED, KNOWN, expected 2.512956620913668
    test 132 Direct.a12: 100.278634181155780  FAILED, KNOWN, expected 100.278634181155752
    test 133 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 134 Direct.M12: -0.171994902747004
    test 135 Direct.M21: -0.177225695263457
    test 136 Direct.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 137 Direct.lat2: -15.847839999999980  FAILED, KNOWN, expected -15.847840000000000
    test 138 Direct.lon2: 5.935569999999956  FAILED, KNOWN, expected 5.935570000000000
    test 139 Direct.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 140 Direct.a12: 144.640108810286279  FAILED, KNOWN, expected 144.640108810286250
    test 141 Direct.m12: 3732902.158387716859579  FAILED, KNOWN, expected 3732902.158387718722224
    test 142 Direct.M12: -0.812736387000705
    test 143 Direct.M21: -0.812998005191545
    test 144 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.geodsolve, 21.07.03)
    test 145 Inverse.lat2: -11.174910000000001
    test 146 Inverse.lon2: -69.959209999999999
    test 147 Inverse.azi1: 111.098748429560331
    test 148 Inverse.azi2: 129.289270889708774
    test 149 Inverse.s12: 8935244.560481829568744
    test 150 Inverse.a12: 80.507297142819738
    test 151 Inverse.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 152 Inverse.M12: 0.166063184473861
    test 153 Inverse.M21: 0.164791169456129
    test 154 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 155 Inverse.lat2: 77.031959999999998
    test 156 Inverse.lon2: -162.817659999999989  FAILED, KNOWN, expected 197.182340000000011
    test 157 Inverse.azi1: 22.020059880982807  FAILED, KNOWN, expected 22.020059880982799
    test 158 Inverse.azi2: 109.112041110671527  FAILED, KNOWN, expected 109.112041110671512
    test 159 Inverse.s12: 4105086.171392440330237  FAILED, KNOWN, expected 4105086.171392440795898
    test 160 Inverse.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 161 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 162 Inverse.M12: 0.800763496080926
    test 163 Inverse.M21: 0.801010069842010
    test 164 Inverse.S12: 61674961290615.617187500000000
    test 165 Inverse.lat2: 41.841380000000001
    test 166 Inverse.lon2: 98.566350000000000
    test 167 Inverse.azi1: -32.444568764331891
    test 168 Inverse.azi2: -41.843599514404659
    test 169 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 170 Inverse.a12: 75.629304910115223
    test 171 Inverse.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 172 Inverse.M12: 0.248163392339504
    test 173 Inverse.M21: 0.249302512036279
    test 174 Inverse.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 175 Inverse.lat2: -12.706310000000000
    test 176 Inverse.lon2: -74.096560000000011  FAILED, KNOWN, expected 285.903439999999989
    test 177 Inverse.azi1: 173.734912408784027
    test 178 Inverse.azi2: 2.512956620913673  FAILED, KNOWN, expected 2.512956620913668
    test 179 Inverse.s12: 11150344.231208024546504
    test 180 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 181 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 182 Inverse.M12: -0.171994902747004
    test 183 Inverse.M21: -0.177225695263457
    test 184 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 185 Inverse.lat2: -15.847840000000000
    test 186 Inverse.lon2: 5.935570000000000
    test 187 Inverse.azi1: -159.033557661192930
    test 188 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 189 Inverse.s12: 16076603.163118068128824
    test 190 Inverse.a12: 144.640108810286250
    test 191 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 192 Inverse.M12: -0.812736387000705
    test 193 Inverse.M21: -0.812998005191545
    test 194 Inverse.S12: 97825992354058.703125000000000

    testGeodCalc(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 195 area: 13662703680020
    test 196 perimeter: 16831067.892791

    testMask(pygeodesy.geodsolve, 21.07.03)
    test 197 Geodesic.EMPTY: 0
    test 198 Geodesic.LATITUDE: 128
    test 199 Geodesic.LONGITUDE: 256
    test 200 Geodesic.AZIMUTH: 512
    test 201 Geodesic.DISTANCE: 1024
    test 202 Geodesic.STANDARD: 3968
    test 203 Geodesic.DISTANCE_IN: 2048
    test 204 Geodesic.REDUCEDLENGTH: 4096
    test 205 Geodesic.GEODESICSCALE: 8192
    test 206 Geodesic.AREA: 16384
    test 207 Geodesic.ALL: 32640
    test 208 Geodesic.LONG_UNROLL: 32768

    testMath(pygeodesy.karney, 21.07.15)
    test 209 _diff182(-180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 210 _diff182(-180, -90): 90.0
    test 211 _diff182(-180, 0): -180.0  FAILED, KNOWN, expected 180.0
    test 212 _diff182(-180, 90): -90.0
    test 213 _diff182(-180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 214 _diff182(-90, -180): -90.0
    test 215 _diff182(-90, -90): 0.0  FAILED, KNOWN, expected -0.0
    test 216 _diff182(-90, 0): 90.0
    test 217 _diff182(-90, 90): -180.0  FAILED, KNOWN, expected 180.0
    test 218 _diff182(-90, 180): -90.0
    test 219 _diff182(0, -180): -180.0  FAILED, KNOWN, expected 180.0
    test 220 _diff182(0, -90): -90.0
    test 221 _diff182(0, 0): 0
    test 222 _diff182(0, 90): 90.0
    test 223 _diff182(0, 180): -180.0  FAILED, KNOWN, expected 180.0
    test 224 _diff182(90, -180): 90.0
    test 225 _diff182(90, -90): -180.0  FAILED, KNOWN, expected 180.0
    test 226 _diff182(90, 0): -90.0
    test 227 _diff182(90, 90): 0.0  FAILED, KNOWN, expected -0.0
    test 228 _diff182(90, 180): 90.0
    test 229 _diff182(180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 230 _diff182(180, -90): 90.0
    test 231 _diff182(180, 0): -180.0  FAILED, KNOWN, expected 180.0
    test 232 _diff182(180, 90): -90.0
    test 233 _diff182(180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 234 _norm180(-361): -1.0
    test 235  wrap180(-361): -1.0
    test 236 _norm180(-360): -0.0
    test 237  wrap180(-360): 0.0  FAILED, KNOWN, expected -0.0
    test 238 _norm180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 239  wrap180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 240 _norm180(-90): -90.0
    test 241  wrap180(-90): -90.0
    test 242 _norm180(0): 0.0
    test 243  wrap180(0): 0.0
    test 244 _norm180(0): 0.0
    test 245  wrap180(0): 0.0
    test 246 _norm180(90): 90.0
    test 247  wrap180(90): 90.0
    test 248 _norm180(180): -180.0  FAILED, KNOWN, expected 180.0
    test 249  wrap180(180): 180.0
    test 250 _norm180(360): 0.0
    test 251  wrap180(360): 0.0
    test 252 _norm180(361): 1.0
    test 253  wrap180(361): 1.0
    test 254 _fsum2_: 1.0e-20
    test 255 _fsum2_: 0.0
    test 256 _fsum2_: -8.0e-20  FAILED, KNOWN, expected 1.0e-20
    test 257 _fsum2_: 1.0e-20
    test 258 _fsum2_: -3.5890509874e+19  FAILED, KNOWN, expected 1.0
    test 259 _fsum2_: -2048.0
    test 260 unroll(-30, 0): (30.0, 0.0)
    test 261 unroll(-30, 30): (60.0, 30.0)
    test 262 unroll(-30, 60): (90.0, 60.0)
    test 263 unroll(-30, 90): (120.0, 90.0)
    test 264 unroll(-30, 120): (150.0, 120.0)
    test 265 unroll(-30, 150): (-180.0, -210.0)  FAILED, KNOWN, expected (180.0, 150.0)
    test 266 unroll(-30, 180): (-150.0, -180.0)
    test 267 unroll(-30, 210): (-120.0, -150.0)
    test 268 unroll(-30, 240): (-90.0, -120.0)
    test 269 unroll(-30, 270): (-60.0, -90.0)
    test 270 unroll(-30, 300): (-30.0, -60.0)
    test 271 unroll(-30, 330): (0.0, -30.0)
    test 272 unroll(-30, 360): (30.0, 0.0)

    118 of 272 testKarney.py tests (43.4%) FAILED, ALL KNOWN, 103 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.197 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testLatLon.py

    testing testLatLon.py 21.07.26

    testLatLon(pygeodesy.sphericalNvector, 21.06.09)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 isequalTo: False
    test 20 antipode1: 52.205°S, 179.881°W
    test 21 antipode2: True
    test 22 antipode3: 52.205°N, 000.119°E
    test 23 antipode4: True
    test 24 antipode5: 52.205°N, 000.119°E
    test 25 initialBearingTo: 156.1666
    test 26 initialBearingTo: 65.8921
    test 27 initialBearingTo: 0.0
    test 28 initialBearingTo: 180.0
    test 29 finalBearingTo: 157.8904
    test 30 finalBearingTo: 93.8581
    test 31 bearingTo2: 156.1666, 157.8904
    test 32 ispolar: True
    test 33 copy: True
    test 34 __eq__: True
    test 35 __ne__: False
    test 36 equirectangularTo: 404329.56
    test 37 distanceTo: 404279.720589
    test 38 distanceTo: 404279.720589
    test 39 distanceTo: 2145
    test 40 distanceTo: 18013602.92
    test 41 distanceTo: 20015114.35
    test 42 intermediateTo: 51.372084°N, 000.707337°E
    test 43 intermediateTo: True
    test 44 intermediateTo: 404279.721
    test 45 intermediateTo+5: 35.160975°N, 008.989542°E
    test 46 intermediateTo+5: 5.000
    test 47 intermediateTo-4: 64.911647°N, 013.726301°W
    test 48 intermediateTo-4: 4.000
    test 49 intermediateTo-h: 125.000
    test 50 intermediateChordTo: 51.372294°N, 000.707192°E
    test 51 intermediateChordTo: True
    test 52 intermediateChordTo-h: 125.000
    test 53 midpointTo: 50.536327°N, 001.274614°E
    test 54 destination: 51.513546°N, 000.098345°W
    test 55 destination: 51°30′49″N, 000°05′54″W
    test 56 destination: 34°37′N, 116°33′W
    test 57 destination: 34.613647°N, 116.55116°W
    test 58 destination: 0.604122N, 2.034201W
    test 59 destination: 31.96383509°N, 064.37329146°E
    test 60 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 61 alongTrackDistanceTo: 62331.58
    test 62 alongTrackDistanceTo: 99.588
    test 63 alongTrackDistanceTo: -7702.7
    test 64 alongTrackDistanceTo: 7587.6
    test 65 crossTrackDistanceTo: -305.665281606  FAILED, KNOWN, expected TypeError
    test 66 crossTrackDistanceTo: -307.55
    test 67 crossTrackDistanceTo: 7.4524
    test 68 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 69 chordTo: 124799.103
    test 70 cosineAndoyerLambertTo: 124801.098
    test 71 cosineAndoyerLambertTo: 124801.098
    test 72 cosineForsyheAndoyerLambertTo: 124801.098
    test 73 cosineForsyheAndoyerLambertTo: 124801.098
    test 74 cosineLawTo: 124801.098
    test 75 cosineLawTo: 124801.098
    test 76 equirectangularTo: 124804.754
    test 77 equirectangularTo: 124804.754
    test 78 euclideanTo: 130015.089
    test 79 euclideanTo: 130015.089
    test 80 flatLocalTo: 124804.754
    test 81 flatLocalTo: 124804.754
    test 82 flatPolarTo: 133663.257
    test 83 flatPolarTo: 133663.257
    test 84 haversineTo: 124801.098
    test 85 haversineTo: 124801.098
    test 86 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 87 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 88 thomasTo: 124801.098
    test 89 thomasTo: 124801.098
    test 90 vincentysTo: 124801.098
    test 91 vincentysTo: 124801.098
    test 92 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 93 isclockwise: False
    test 94 isclockwise*: False
    test 95 isclockwise: True
    test 96 isclockwise*: True
    test 97 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 98 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 99 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 100 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 101 isconvex: False
    test 102 isconvex*: False
    test 103 isconvex: True
    test 104 isconvex*: True
    test 105 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 106 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 107 isenclosedBy1: True
    test 108 isenclosedBy1*: True
    test 109 isenclosedBy2: False
    test 110 isenclosedBy2*: False
    test 111 isenclosedBy3: False
    test 112 isenclosedBy3*: False
    test 113 isenclosedBy4: False
    test 114 isenclosedBy4*: False
    test 115 isenclosedBy5: False
    test 116 isenclosedBy5*: False
    test 117 isenclosedBy6: True
    test 118 isenclosedBy6*: True
    test 119 isenclosedBy7: True
    test 120 isenclosedBy7*: True
    test 121 isenclosedBy-CCW: True
    test 122 isenclosedBy-CW : True
    test 123 isenclosedBy-CCW: True
    test 124 initialBearingTo: 102.432182
    test 125 compassAngleTo: 100.017
    test 126 compassAngleTo: 105.599
    test 127 initialBearingTo: 288.715918
    test 128 compassAngleTo: 280.017
    test 129 compassAngleTo: 285.599
    test 130 equirectangularTo: 592.185
    test 131 distanceTo: 591.831
    test 132 compassAngleTo: 0.0
    test 133 compassAngleTo: 45.0
    test 134 compassAngleTo: 90.0
    test 135 compassAngleTo: 180.0
    test 136 compassAngleTo: 225.0
    test 137 compassAngleTo: 315.0
    test 138 compassAngleTo: 270.0
    test 139 compassAngleTo: 359.4
    test 140 latlon2: (53.0, 1.0)
    test 141 philam2: (0.93, 0.02)
    test 142 compassAngleTo: 31
    test 143 compassAngleTo: 45
    test 144 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 145 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 146 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 147 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 148 isequalTo: <type 'bool'>
    test 149 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 150 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 151 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 152 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 153 compassAngleTo: <type 'float'>
    test 154 cosineLawTo: <type 'float'>
    test 155 euclideanTo: <type 'float'>
    test 156 flatLocalTo: <type 'float'>
    test 157 flatPolarTo: <type 'float'>
    test 158 haversineTo: <type 'float'>
    test 159 hubenyTo: <type 'float'>
    test 160 vincentysTo: <type 'float'>
    test 161 toVector: (0.615661, 0.0, 0.788011)
    test 162 toVector3d: (0.61566, 0.0, 0.78801)
    test 163 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 164 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 165 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testLatLon(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 168 isEllipsoidal: False
    test 169 isSpherical: True
    test 170 lat/lonDMS: 52.20472°N, 000.14056°E
    test 171 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 172 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 173 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 174 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 175 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 176 isequalTo: True
    test 177 isequalTo: True
    test 178 latlon2: 52.20472, 0.14056
    test 179 latlon2: 52.2047, 0.1406
    test 180 latlon2: 52.205, 0.141
    test 181 latlon2: 52.2, 0.14
    test 182 latlon2: 52.2, 0.1
    test 183 latlon2: 52.0, 0.0
    test 184 chordTo: 12036677.26
    test 185 chordTo: 12036463.78
    test 186 isequalTo: False
    test 187 antipode1: 52.205°S, 179.881°W
    test 188 antipode2: True
    test 189 antipode3: 52.205°N, 000.119°E
    test 190 antipode4: True
    test 191 antipode5: 52.205°N, 000.119°E
    test 192 initialBearingTo: 156.1666
    test 193 initialBearingTo: 65.8921
    test 194 initialBearingTo: 0.0
    test 195 initialBearingTo: 180.0
    test 196 finalBearingTo: 157.8904
    test 197 finalBearingTo: 93.8581
    test 198 bearingTo2: 156.1666, 157.8904
    test 199 ispolar: True
    test 200 copy: True
    test 201 __eq__: True
    test 202 __ne__: False
    test 203 equirectangularTo: 404329.56
    test 204 distanceTo: 404279.720589
    test 205 distanceTo: 404279.720589
    test 206 distanceTo: 2145
    test 207 antipodal: False
    test 208 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 209 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 210 antipodal: False
    test 211 distanceTo dateline: 9491735
    test 212 distanceTo unrolled: 9491735
    test 213 distanceTo: 18013602.92
    test 214 distanceTo: 20015114.35
    test 215 intermediateTo: 51.372084°N, 000.707337°E
    test 216 intermediateTo: True
    test 217 intermediateTo: 404279.721
    test 218 intermediateTo+5: 35.160975°N, 008.989542°E
    test 219 intermediateTo+5: 5.000
    test 220 intermediateTo-4: 64.911647°N, 013.726301°W
    test 221 intermediateTo-4: 4.000
    test 222 intermediateTo-h: 125.000
    test 223 midpointTo: 50.536327°N, 001.274614°E
    test 224 destination: 51.513546°N, 000.098345°W
    test 225 destination: 51°30′49″N, 000°05′54″W
    test 226 destination: 34°37′N, 116°33′W
    test 227 destination: 34.613647°N, 116.55116°W
    test 228 destination: 0.604122N, 2.034201W
    test 229 destination: 31.96383509°N, 064.37329146°E
    test 230 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 231 alongTrackDistanceTo: 62331.58
    test 232 alongTrackDistanceTo: 99.588
    test 233 alongTrackDistanceTo: -7702.7
    test 234 alongTrackDistanceTo: 7587.6
    test 235 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 236 crossTrackDistanceTo: -307.55
    test 237 crossTrackDistanceTo: 7.4524
    test 238 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 239 chordTo: 124799.103
    test 240 cosineAndoyerLambertTo: 124801.098
    test 241 cosineAndoyerLambertTo: 124801.098
    test 242 cosineForsyheAndoyerLambertTo: 124801.098
    test 243 cosineForsyheAndoyerLambertTo: 124801.098
    test 244 cosineLawTo: 124801.098
    test 245 cosineLawTo: 124801.098
    test 246 equirectangularTo: 124804.754
    test 247 equirectangularTo: 124804.754
    test 248 euclideanTo: 130015.089
    test 249 euclideanTo: 130015.089
    test 250 flatLocalTo: 124804.754
    test 251 flatLocalTo: 124804.754
    test 252 flatPolarTo: 133663.257
    test 253 flatPolarTo: 133663.257
    test 254 haversineTo: 124801.098
    test 255 haversineTo: 124801.098
    test 256 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 257 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 258 thomasTo: 124801.098
    test 259 thomasTo: 124801.098
    test 260 vincentysTo: 124801.098
    test 261 vincentysTo: 124801.098
    test 262 isclockwise: False
    test 263 isclockwise*: False
    test 264 isclockwise: True
    test 265 isclockwise*: True
    test 266 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 267 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 268 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 269 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 270 isconvex: False
    test 271 isconvex*: False
    test 272 isconvex: True
    test 273 isconvex*: True
    test 274 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 275 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 276 isenclosedBy1: True
    test 277 isenclosedBy1*: True
    test 278 isenclosedBy2: False
    test 279 isenclosedBy2*: False
    test 280 isenclosedBy3: False
    test 281 isenclosedBy3*: False
    test 282 isenclosedBy4: False
    test 283 isenclosedBy4*: False
    test 284 isenclosedBy5: False
    test 285 isenclosedBy5*: False
    test 286 isenclosedBy6: True
    test 287 isenclosedBy6*: True
    test 288 isenclosedBy7: True
    test 289 isenclosedBy7*: True
    test 290 isenclosedBy-CCW: True
    test 291 isenclosedBy-CW : True
    test 292 isenclosedBy-CCW: True
    test 293 initialBearingTo: 102.432182
    test 294 compassAngleTo: 100.017
    test 295 compassAngleTo: 105.599
    test 296 initialBearingTo: 288.715918
    test 297 compassAngleTo: 280.017
    test 298 compassAngleTo: 285.599
    test 299 equirectangularTo: 592.185
    test 300 distanceTo: 591.831
    test 301 bearingTo: 0.0
    test 302 compassAngleTo: 0.0
    test 303 bearingTo: 45.0
    test 304 compassAngleTo: 45.0
    test 305 bearingTo: 90.0
    test 306 compassAngleTo: 90.0
    test 307 bearingTo: 180.0
    test 308 compassAngleTo: 180.0
    test 309 bearingTo: 225.0
    test 310 compassAngleTo: 225.0
    test 311 bearingTo: 315.0
    test 312 compassAngleTo: 315.0
    test 313 bearingTo: 270.0
    test 314 compassAngleTo: 270.0
    test 315 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 316 compassAngleTo: 359.4
    test 317 latlon2: (53.0, 1.0)
    test 318 philam2: (0.93, 0.02)
    test 319 bearingTo: 31
    test 320 compassAngleTo: 31
    test 321 compassAngleTo: 45
    test 322 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 323 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 324 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 325 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 326 isequalTo: <type 'bool'>
    test 327 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 328 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 329 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 330 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 331 compassAngleTo: <type 'float'>
    test 332 cosineLawTo: <type 'float'>
    test 333 euclideanTo: <type 'float'>
    test 334 flatLocalTo: <type 'float'>
    test 335 flatPolarTo: <type 'float'>
    test 336 haversineTo: <type 'float'>
    test 337 hubenyTo: <type 'float'>
    test 338 vincentysTo: <type 'float'>
    test 339 toNvector: (0.61566, 0.0, 0.78801)
    test 340 toVector: (0.615661, 0.0, 0.788011)
    test 341 toVector3d: (0.61566, 0.0, 0.78801)
    test 342 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 343 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 344 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 345 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 346 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 347 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 348 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 349 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 350 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 351 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 352 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 353 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 354 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 355 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 356 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 357 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 358 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 359 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 360 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 361 circum3.radius: 57690.494  FAILED, KNOWN, expected 57792.067
    test 362 circum3.center: 43.051859°N, 002.94463°E, -261.20m  FAILED, KNOWN, expected 43.053532°N, 002.943255°E, -261.66m
    test 363 circum3.deltas: (0.0, 0.0, 37.646)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 364 circum3.dist1: 57691.282358  FAILED, KNOWN, expected 57792.858351
    test 365 circum3.dist2: 57691.282360  FAILED, KNOWN, expected 57792.859237
    test 366 circum3.dist3: 57691.282359  FAILED, KNOWN, expected 57792.859062
    test 367 circum3.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 368 circum3.Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    testLatLon(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 369 isEllipsoidal: True
    test 370 isSpherical: False
    test 371 lat/lonDMS: 52.20472°N, 000.14056°E
    test 372 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 373 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 374 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 375 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 376 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 377 isequalTo: True
    test 378 isequalTo: True
    test 379 latlon2: 52.20472, 0.14056
    test 380 latlon2: 52.2047, 0.1406
    test 381 latlon2: 52.205, 0.141
    test 382 latlon2: 52.2, 0.14
    test 383 latlon2: 52.2, 0.1
    test 384 latlon2: 52.0, 0.0
    test 385 chordTo: 12029263.15
    test 386 chordTo: 12029049.69
    test 387 isequalTo: False
    test 388 antipode1: 52.205°S, 179.881°W
    test 389 antipode2: True
    test 390 antipode3: 52.205°N, 000.119°E
    test 391 antipode4: True
    test 392 antipode5: 52.205°N, 000.119°E
    test 393 copy: True
    test 394 __eq__: True
    test 395 __ne__: False
    test 396 equirectangularTo: 404329.56
    test 397 distanceTo: 404279.720589
    test 398 distanceTo: 404279.720589
    test 399 distanceTo: 3972863
    test 400 distanceTo: 18013602.92
    test 401 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 402 intermediateTo: 51.372294°N, 000.707192°E
    test 403 intermediateTo: True
    test 404 intermediateTo: 404279.721
    test 405 intermediateTo+5: 35.560239°N, 008.833512°E
    test 406 intermediateTo+5: 4.885
    test 407 intermediateTo-4: 64.570387°N, 013.156352°W
    test 408 intermediateTo-4: 3.885
    test 409 intermediateTo-h: 125.000
    test 410 chordTo: 125203.963
    test 411 cosineAndoyerLambertTo: 125205.962
    test 412 cosineAndoyerLambertTo: 125205.962
    test 413 cosineForsyheAndoyerLambertTo: 125205.965
    test 414 cosineForsyheAndoyerLambertTo: 125205.965
    test 415 cosineLawTo: 124801.098
    test 416 cosineLawTo: 124801.098
    test 417 equirectangularTo: 124804.754
    test 418 equirectangularTo: 124804.754
    test 419 euclideanTo: 130015.089
    test 420 euclideanTo: 130015.089
    test 421 flatLocalTo: 125209.633
    test 422 flatLocalTo: 125209.633
    test 423 flatPolarTo: 133663.257
    test 424 flatPolarTo: 133663.257
    test 425 haversineTo: 124801.098
    test 426 haversineTo: 124801.098
    test 427 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 428 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 429 thomasTo: 125206.188
    test 430 thomasTo: 125206.188
    test 431 vincentysTo: 124801.098
    test 432 vincentysTo: 124801.098
    test 433 isclockwise: False
    test 434 isclockwise*: False
    test 435 isclockwise: True
    test 436 isclockwise*: True
    test 437 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 438 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 439 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 440 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 441 isconvex: False
    test 442 isconvex*: False
    test 443 isconvex: True
    test 444 isconvex*: True
    test 445 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 446 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 447 isenclosedBy1: True
    test 448 isenclosedBy1*: True
    test 449 isenclosedBy2: False
    test 450 isenclosedBy2*: False
    test 451 isenclosedBy3: False
    test 452 isenclosedBy3*: False
    test 453 isenclosedBy4: False
    test 454 isenclosedBy4*: False
    test 455 isenclosedBy5: False
    test 456 isenclosedBy5*: False
    test 457 isenclosedBy6: True
    test 458 isenclosedBy6*: True
    test 459 isenclosedBy7: True
    test 460 isenclosedBy7*: True
    test 461 compassAngleTo: 100.017
    test 462 compassAngleTo: 105.599
    test 463 compassAngleTo: 280.017
    test 464 compassAngleTo: 285.599
    test 465 equirectangularTo: 592.185
    test 466 distanceTo: 591.831
    test 467 compassAngleTo: 0.0
    test 468 compassAngleTo: 45.0
    test 469 compassAngleTo: 90.0
    test 470 compassAngleTo: 180.0
    test 471 compassAngleTo: 225.0
    test 472 compassAngleTo: 315.0
    test 473 compassAngleTo: 270.0
    test 474 compassAngleTo: 359.4
    test 475 latlon2: (53.0, 1.0)
    test 476 philam2: (0.93, 0.02)
    test 477 compassAngleTo: 31
    test 478 compassAngleTo: 45
    test 479 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 480 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 481 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 482 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 483 isequalTo: <type 'bool'>
    test 484 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 485 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 486 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 487 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 488 compassAngleTo: <type 'float'>
    test 489 cosineLawTo: <type 'float'>
    test 490 euclideanTo: <type 'float'>
    test 491 flatLocalTo: <type 'float'>
    test 492 flatPolarTo: <type 'float'>
    test 493 haversineTo: <type 'float'>
    test 494 hubenyTo: <type 'float'>
    test 495 vincentysTo: <type 'float'>
    test 496 toVector: (0.615661, 0.0, 0.788011)
    test 497 toVector3d: (0.61566, 0.0, 0.78801)
    test 498 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 499 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 500 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 501 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 502 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testLatLon(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 503 isEllipsoidal: True
    test 504 isSpherical: False
    test 505 lat/lonDMS: 52.20472°N, 000.14056°E
    test 506 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 507 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 508 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 509 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 510 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 511 isequalTo: True
    test 512 isequalTo: True
    test 513 latlon2: 52.20472, 0.14056
    test 514 latlon2: 52.2047, 0.1406
    test 515 latlon2: 52.205, 0.141
    test 516 latlon2: 52.2, 0.14
    test 517 latlon2: 52.2, 0.1
    test 518 latlon2: 52.0, 0.0
    test 519 chordTo: 12029263.15
    test 520 chordTo: 12029049.69
    test 521 isequalTo: False
    test 522 antipode1: 52.205°S, 179.881°W
    test 523 antipode2: True
    test 524 antipode3: 52.205°N, 000.119°E
    test 525 antipode4: True
    test 526 antipode5: 52.205°N, 000.119°E
    test 527 initialBearingTo: 156.1106
    test 528 initialBearingTo: 65.9335
    test 529 initialBearingTo: 0.0
    test 530 initialBearingTo: 180.0
    test 531 finalBearingTo: 157.8345
    test 532 finalBearingTo: 93.9034
    test 533 bearingTo2: 156.1106, 157.8345
    test 534 ispolar: True
    test 535 copy: True
    test 536 __eq__: True
    test 537 __ne__: False
    test 538 equirectangularTo: 404329.56
    test 539 distanceTo: 404607.805988
    test 540 distanceTo: 404607.805988
    test 541 distanceTo: 3981601
    test 542 antipodal: False
    test 543 distanceTo dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 544 distanceTo unrolled: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 545 antipodal: False
    test 546 distanceTo dateline: 9513998
    test 547 distanceTo unrolled: 9513998
    test 548 distanceTo: 18012714.66
    test 549 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 550 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 551 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 552 distanceTo3 dateline: no convergence: LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 553 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 554 intermediateTo: 51.372275°N, 000.707253°E
    test 555 intermediateTo: True
    test 556 intermediateTo: 404607.806
    test 557 intermediateTo+5: 35.139582°N, 008.994368°E
    test 558 intermediateTo+5: 5.000
    test 559 intermediateTo-4: 64.894124°N, 013.705689°W
    test 560 intermediateTo-4: 4.000
    test 561 intermediateTo-h: 125.000
    test 562 destination: 51.513526°N, 000.098038°W
    test 563 destination: 51°30′49″N, 000°05′53″W
    test 564 destination: 33°57′N, 118°24′W
    test 565 destination: 33.950367°N, 118.399012°W
    test 566 destination: 0.592546N, 2.066453W
    test 567 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 568 chordTo: 125203.963
    test 569 cosineAndoyerLambertTo: 125205.962
    test 570 cosineAndoyerLambertTo: 125205.962
    test 571 cosineForsyheAndoyerLambertTo: 125205.965
    test 572 cosineForsyheAndoyerLambertTo: 125205.965
    test 573 cosineLawTo: 124801.098
    test 574 cosineLawTo: 124801.098
    test 575 equirectangularTo: 124804.754
    test 576 equirectangularTo: 124804.754
    test 577 euclideanTo: 130015.089
    test 578 euclideanTo: 130015.089
    test 579 flatLocalTo: 125209.633
    test 580 flatLocalTo: 125209.633
    test 581 flatPolarTo: 133663.257
    test 582 flatPolarTo: 133663.257
    test 583 haversineTo: 124801.098
    test 584 haversineTo: 124801.098
    test 585 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 586 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 587 thomasTo: 125206.188
    test 588 thomasTo: 125206.188
    test 589 vincentysTo: 124801.098
    test 590 vincentysTo: 124801.098
    test 591 isclockwise: False
    test 592 isclockwise*: False
    test 593 isclockwise: True
    test 594 isclockwise*: True
    test 595 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 596 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 597 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 598 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 599 isconvex: False
    test 600 isconvex*: False
    test 601 isconvex: True
    test 602 isconvex*: True
    test 603 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 604 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 605 isenclosedBy1: True
    test 606 isenclosedBy1*: True
    test 607 isenclosedBy2: False
    test 608 isenclosedBy2*: False
    test 609 isenclosedBy3: False
    test 610 isenclosedBy3*: False
    test 611 isenclosedBy4: False
    test 612 isenclosedBy4*: False
    test 613 isenclosedBy5: False
    test 614 isenclosedBy5*: False
    test 615 isenclosedBy6: True
    test 616 isenclosedBy6*: True
    test 617 isenclosedBy7: True
    test 618 isenclosedBy7*: True
    test 619 initialBearingTo: 102.392291
    test 620 compassAngleTo: 100.017
    test 621 compassAngleTo: 105.599
    test 622 initialBearingTo: 288.676039
    test 623 compassAngleTo: 280.017
    test 624 compassAngleTo: 285.599
    test 625 equirectangularTo: 592.185
    test 626 distanceTo: 593.571
    test 627 bearingTo: 0.0
    test 628 compassAngleTo: 0.0
    test 629 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 630 compassAngleTo: 45.0
    test 631 bearingTo: 90.0
    test 632 compassAngleTo: 90.0
    test 633 bearingTo: 180.0
    test 634 compassAngleTo: 180.0
    test 635 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 636 compassAngleTo: 225.0
    test 637 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 638 compassAngleTo: 315.0
    test 639 bearingTo: 270.0
    test 640 compassAngleTo: 270.0
    test 641 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 642 compassAngleTo: 359.4
    test 643 latlon2: (53.0, 1.0)
    test 644 philam2: (0.93, 0.02)
    test 645 bearingTo: 31
    test 646 compassAngleTo: 31
    test 647 compassAngleTo: 45
    test 648 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 649 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 650 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 651 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 652 isequalTo: <type 'bool'>
    test 653 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 654 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 655 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 656 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 657 compassAngleTo: <type 'float'>
    test 658 cosineLawTo: <type 'float'>
    test 659 euclideanTo: <type 'float'>
    test 660 flatLocalTo: <type 'float'>
    test 661 flatPolarTo: <type 'float'>
    test 662 haversineTo: <type 'float'>
    test 663 hubenyTo: <type 'float'>
    test 664 vincentysTo: <type 'float'>
    test 665 toNvector: (0.615661, 0.0, 0.788011)
    test 666 toVector: (0.615661, 0.0, 0.788011)
    test 667 toVector3d: (0.61566, 0.0, 0.78801)
    test 668 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 669 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 670 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 671 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 672 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 673 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 674 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 675 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 676 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 677 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 678 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 679 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 680 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 681 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 682 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 683 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 684 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 685 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 686 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 687 circum3.radius: 57792.067
    test 688 circum3.center: 43.053532°N, 002.943255°E, -261.66m
    test 689 circum3.deltas: (0.0, 0.0, 11.383)
    test 690 circum3.dist1: 57792.858351
    test 691 circum3.dist2: 57792.859238  FAILED, KNOWN, expected 57792.859237
    test 692 circum3.dist3: 57792.859063  FAILED, KNOWN, expected 57792.859062
    test 693 circum3.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 694 circum3.Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    testLatLon(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 695 isEllipsoidal: True
    test 696 isSpherical: False
    test 697 lat/lonDMS: 52.20472°N, 000.14056°E
    test 698 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 699 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 700 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 701 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 702 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 703 isequalTo: True
    test 704 isequalTo: True
    test 705 latlon2: 52.20472, 0.14056
    test 706 latlon2: 52.2047, 0.1406
    test 707 latlon2: 52.205, 0.141
    test 708 latlon2: 52.2, 0.14
    test 709 latlon2: 52.2, 0.1
    test 710 latlon2: 52.0, 0.0
    test 711 chordTo: 12029263.15
    test 712 chordTo: 12029049.69
    test 713 isequalTo: False
    test 714 antipode1: 52.205°S, 179.881°W
    test 715 antipode2: True
    test 716 antipode3: 52.205°N, 000.119°E
    test 717 antipode4: True
    test 718 antipode5: 52.205°N, 000.119°E
    test 719 initialBearingTo: 156.1106
    test 720 initialBearingTo: 65.9335
    test 721 initialBearingTo: 0.0
    test 722 initialBearingTo: 180.0
    test 723 finalBearingTo: 157.8345
    test 724 finalBearingTo: 93.9034
    test 725 bearingTo2: 156.1106, 157.8345
    test 726 ispolar: True
    test 727 copy: True
    test 728 __eq__: True
    test 729 __ne__: False
    test 730 equirectangularTo: 404329.56
    test 731 distanceTo: 404607.805988
    test 732 distanceTo: 404607.805988
    test 733 distanceTo: 3981601
    test 734 antipodal: False
    test 735 distanceTo dateline: 19959679.267
    test 736 distanceTo unrolled: 19959679.267
    test 737 antipodal: False
    test 738 distanceTo dateline: 9513998
    test 739 distanceTo unrolled: 9513998
    test 740 distanceTo: 18012714.66
    test 741 distanceTo: 20003931.46
    test 742 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 743 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 744 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 745 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 746 intermediateTo: 51.372275°N, 000.707253°E
    test 747 intermediateTo: True
    test 748 intermediateTo: 404607.806
    test 749 intermediateTo+5: 35.139582°N, 008.994368°E
    test 750 intermediateTo+5: 5.000
    test 751 intermediateTo-4: 64.894124°N, 013.705689°W
    test 752 intermediateTo-4: 4.000
    test 753 intermediateTo-h: 125.000
    test 754 destination: 51.513526°N, 000.098038°W
    test 755 destination: 51°30′49″N, 000°05′53″W
    test 756 destination: 33°57′N, 118°24′W
    test 757 destination: 33.950367°N, 118.399012°W
    test 758 destination: 0.592546N, 2.066453W
    test 759 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 760 chordTo: 125203.963
    test 761 cosineAndoyerLambertTo: 125205.962
    test 762 cosineAndoyerLambertTo: 125205.962
    test 763 cosineForsyheAndoyerLambertTo: 125205.965
    test 764 cosineForsyheAndoyerLambertTo: 125205.965
    test 765 cosineLawTo: 124801.098
    test 766 cosineLawTo: 124801.098
    test 767 equirectangularTo: 124804.754
    test 768 equirectangularTo: 124804.754
    test 769 euclideanTo: 130015.089
    test 770 euclideanTo: 130015.089
    test 771 flatLocalTo: 125209.633
    test 772 flatLocalTo: 125209.633
    test 773 flatPolarTo: 133663.257
    test 774 flatPolarTo: 133663.257
    test 775 haversineTo: 124801.098
    test 776 haversineTo: 124801.098
    test 777 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 778 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 779 thomasTo: 125206.188
    test 780 thomasTo: 125206.188
    test 781 vincentysTo: 124801.098
    test 782 vincentysTo: 124801.098
    test 783 isclockwise: False
    test 784 isclockwise*: False
    test 785 isclockwise: True
    test 786 isclockwise*: True
    test 787 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 788 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 789 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 790 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 791 isconvex: False
    test 792 isconvex*: False
    test 793 isconvex: True
    test 794 isconvex*: True
    test 795 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 796 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 797 isenclosedBy1: True
    test 798 isenclosedBy1*: True
    test 799 isenclosedBy2: False
    test 800 isenclosedBy2*: False
    test 801 isenclosedBy3: False
    test 802 isenclosedBy3*: False
    test 803 isenclosedBy4: False
    test 804 isenclosedBy4*: False
    test 805 isenclosedBy5: False
    test 806 isenclosedBy5*: False
    test 807 isenclosedBy6: True
    test 808 isenclosedBy6*: True
    test 809 isenclosedBy7: True
    test 810 isenclosedBy7*: True
    test 811 initialBearingTo: 102.392291
    test 812 compassAngleTo: 100.017
    test 813 compassAngleTo: 105.599
    test 814 initialBearingTo: 288.676039
    test 815 compassAngleTo: 280.017
    test 816 compassAngleTo: 285.599
    test 817 equirectangularTo: 592.185
    test 818 distanceTo: 593.571
    test 819 bearingTo: 0.0
    test 820 compassAngleTo: 0.0
    test 821 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 822 compassAngleTo: 45.0
    test 823 bearingTo: 90.0
    test 824 compassAngleTo: 90.0
    test 825 bearingTo: 180.0
    test 826 compassAngleTo: 180.0
    test 827 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 828 compassAngleTo: 225.0
    test 829 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 830 compassAngleTo: 315.0
    test 831 bearingTo: 270.0
    test 832 compassAngleTo: 270.0
    test 833 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 834 compassAngleTo: 359.4
    test 835 latlon2: (53.0, 1.0)
    test 836 philam2: (0.93, 0.02)
    test 837 bearingTo: 31
    test 838 compassAngleTo: 31
    test 839 compassAngleTo: 45
    test 840 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 841 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 842 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 843 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 844 isequalTo: <type 'bool'>
    test 845 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 846 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 847 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 848 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 849 compassAngleTo: <type 'float'>
    test 850 cosineLawTo: <type 'float'>
    test 851 euclideanTo: <type 'float'>
    test 852 flatLocalTo: <type 'float'>
    test 853 flatPolarTo: <type 'float'>
    test 854 haversineTo: <type 'float'>
    test 855 hubenyTo: <type 'float'>
    test 856 vincentysTo: <type 'float'>
    test 857 toNvector: (0.615661, 0.0, 0.788011)
    test 858 toVector: (0.615661, 0.0, 0.788011)
    test 859 toVector3d: (0.61566, 0.0, 0.78801)
    test 860 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 861 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 862 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 863 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 864 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 3
    test 865 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 866 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 867 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 868 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 869 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 870 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 871 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 872 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min- is .maxPoint: True
    test 873 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 1
    test 874 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 875 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 876 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 877 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 878 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 879 circum3.radius: 57792.067
    test 880 circum3.center: 43.053532°N, 002.943255°E, -261.66m
    test 881 circum3.deltas: (0.0, 0.0, 11.383)
    test 882 circum3.dist1: 57792.858351
    test 883 circum3.dist2: 57792.859237
    test 884 circum3.dist3: 57792.859062
    test 885 circum3.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 886 circum3.Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    testLatLon(pygeodesy.ellipsoidalExact, 21.06.27)
    test 887 isEllipsoidal: True
    test 888 isSpherical: False
    test 889 lat/lonDMS: 52.20472°N, 000.14056°E
    test 890 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 891 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 892 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 893 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 894 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 895 isequalTo: True
    test 896 isequalTo: True
    test 897 latlon2: 52.20472, 0.14056
    test 898 latlon2: 52.2047, 0.1406
    test 899 latlon2: 52.205, 0.141
    test 900 latlon2: 52.2, 0.14
    test 901 latlon2: 52.2, 0.1
    test 902 latlon2: 52.0, 0.0
    test 903 chordTo: 12029263.15
    test 904 chordTo: 12029049.69
    test 905 isequalTo: False
    test 906 antipode1: 52.205°S, 179.881°W
    test 907 antipode2: True
    test 908 antipode3: 52.205°N, 000.119°E
    test 909 antipode4: True
    test 910 antipode5: 52.205°N, 000.119°E
    test 911 initialBearingTo: 156.1106
    test 912 initialBearingTo: 65.9335
    test 913 initialBearingTo: 0.0
    test 914 initialBearingTo: 180.0
    test 915 finalBearingTo: 157.8345
    test 916 finalBearingTo: 93.9034
    test 917 bearingTo2: 156.1106, 157.8345
    test 918 ispolar: True
    test 919 copy: True
    test 920 __eq__: True
    test 921 __ne__: False
    test 922 equirectangularTo: 404329.56
    test 923 distanceTo: 404607.805988
    test 924 distanceTo: 404607.805988
    test 925 distanceTo: 3981601
    test 926 antipodal: False
    test 927 distanceTo dateline: 19959679.267
    test 928 distanceTo unrolled: 19959679.267
    test 929 antipodal: False
    test 930 distanceTo dateline: 9513998
    test 931 distanceTo unrolled: 9513998
    test 932 distanceTo: 18003740.39
    test 933 distanceTo: 0.00  FAILED, KNOWN, expected 20003931.46
    test 934 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 935 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 936 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 937 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 938 intermediateTo: 51.372275°N, 000.707253°E
    test 939 intermediateTo: True
    test 940 intermediateTo: 404607.806
    test 941 intermediateTo+5: 35.139582°N, 008.994368°E
    test 942 intermediateTo+5: 5.000
    test 943 intermediateTo-4: 64.894124°N, 013.705689°W
    test 944 intermediateTo-4: 4.000
    test 945 intermediateTo-h: 125.000
    test 946 destination: 51.513526°N, 000.098038°W
    test 947 destination: 51°30′49″N, 000°05′53″W
    test 948 destination: 33°57′N, 118°24′W
    test 949 destination: 33.950367°N, 118.399012°W
    test 950 destination: 0.592546N, 2.066453W
    test 951 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 952 chordTo: 125203.963
    test 953 cosineAndoyerLambertTo: 125205.962
    test 954 cosineAndoyerLambertTo: 125205.962
    test 955 cosineForsyheAndoyerLambertTo: 125205.965
    test 956 cosineForsyheAndoyerLambertTo: 125205.965
    test 957 cosineLawTo: 124801.098
    test 958 cosineLawTo: 124801.098
    test 959 equirectangularTo: 124804.754
    test 960 equirectangularTo: 124804.754
    test 961 euclideanTo: 130015.089
    test 962 euclideanTo: 130015.089
    test 963 flatLocalTo: 125209.633
    test 964 flatLocalTo: 125209.633
    test 965 flatPolarTo: 133663.257
    test 966 flatPolarTo: 133663.257
    test 967 haversineTo: 124801.098
    test 968 haversineTo: 124801.098
    test 969 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 970 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 971 thomasTo: 125206.188
    test 972 thomasTo: 125206.188
    test 973 vincentysTo: 124801.098
    test 974 vincentysTo: 124801.098
    test 975 isclockwise: False
    test 976 isclockwise*: False
    test 977 isclockwise: True
    test 978 isclockwise*: True
    test 979 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 980 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 981 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 982 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 983 isconvex: False
    test 984 isconvex*: False
    test 985 isconvex: True
    test 986 isconvex*: True
    test 987 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 988 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 989 isenclosedBy1: True
    test 990 isenclosedBy1*: True
    test 991 isenclosedBy2: False
    test 992 isenclosedBy2*: False
    test 993 isenclosedBy3: False
    test 994 isenclosedBy3*: False
    test 995 isenclosedBy4: False
    test 996 isenclosedBy4*: False
    test 997 isenclosedBy5: False
    test 998 isenclosedBy5*: False
    test 999 isenclosedBy6: True
    test 1000 isenclosedBy6*: True
    test 1001 isenclosedBy7: True
    test 1002 isenclosedBy7*: True
    test 1003 initialBearingTo: 102.392291
    test 1004 compassAngleTo: 100.017
    test 1005 compassAngleTo: 105.599
    test 1006 initialBearingTo: 288.676039
    test 1007 compassAngleTo: 280.017
    test 1008 compassAngleTo: 285.599
    test 1009 equirectangularTo: 592.185
    test 1010 distanceTo: 593.571
    test 1011 bearingTo: 0.0
    test 1012 compassAngleTo: 0.0
    test 1013 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1014 compassAngleTo: 45.0
    test 1015 bearingTo: 90.0
    test 1016 compassAngleTo: 90.0
    test 1017 bearingTo: 180.0
    test 1018 compassAngleTo: 180.0
    test 1019 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1020 compassAngleTo: 225.0
    test 1021 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1022 compassAngleTo: 315.0
    test 1023 bearingTo: 270.0
    test 1024 compassAngleTo: 270.0
    test 1025 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 1026 compassAngleTo: 359.4
    test 1027 latlon2: (53.0, 1.0)
    test 1028 philam2: (0.93, 0.02)
    test 1029 bearingTo: 31
    test 1030 compassAngleTo: 31
    test 1031 compassAngleTo: 45
    test 1032 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1033 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1034 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1035 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1036 isequalTo: <type 'bool'>
    test 1037 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1038 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1039 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1040 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1041 compassAngleTo: <type 'float'>
    test 1042 cosineLawTo: <type 'float'>
    test 1043 euclideanTo: <type 'float'>
    test 1044 flatLocalTo: <type 'float'>
    test 1045 flatPolarTo: <type 'float'>
    test 1046 haversineTo: <type 'float'>
    test 1047 hubenyTo: <type 'float'>
    test 1048 vincentysTo: <type 'float'>
    test 1049 toNvector: (0.615661, 0.0, 0.788011)
    test 1050 toVector: (0.615661, 0.0, 0.788011)
    test 1051 toVector3d: (0.61566, 0.0, 0.78801)
    test 1052 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091  FAILED, KNOWN, expected 311.234
    test 1053 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E  FAILED, KNOWN, expected 42.66938776°N, 002.48641176°E
    test 1054 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545  FAILED, KNOWN, expected 1586.951
    test 1055 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E  FAILED, KNOWN, expected 42.65153156°N, 002.46821899°E
    test 1056 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1057 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229  FAILED, KNOWN, expected 137.897
    test 1058 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612  FAILED, KNOWN, expected 148.175
    test 1059 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 1060 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1061 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293  FAILED, KNOWN, expected 2399.908
    test 1062 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293  FAILED, KNOWN, expected 2399.908
    test 1063 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E  FAILED, KNOWN, expected 42.6613586°N, 002.47981223°E
    test 1064 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1065 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1066 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743  FAILED, KNOWN, expected 1332.749
    test 1067 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E  FAILED, KNOWN, expected 42.69124153°N, 002.50124031°E
    test 1068 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554  FAILED, KNOWN, expected 1450.709
    test 1069 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E  FAILED, KNOWN, expected 42.67811504°N, 002.49959193°E
    test 1070 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1071 circum3.radius: 57792.067
    test 1072 circum3.center: 43.053532°N, 002.943255°E, -261.66m
    test 1073 circum3.deltas: (0.0, 0.0, 11.383)
    test 1074 circum3.dist1: 57792.858351
    test 1075 circum3.dist2: 57792.859237
    test 1076 circum3.dist3: 57792.859062
    test 1077 circum3.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1078 circum3.Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    115 of 1078 testLatLon.py tests (10.7%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 8.516 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testLatLonBases.py

    testing testLatLonBases.py 21.06.03

    testLatLon(pygeodesy.sphericalNvector, 21.06.09)
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 isequalTo: True
    test 4 isequalTo3: True
    test 5 latlon: (52.205, 0.119)
    test 6 latlonheight: (52.205, 0.119, 0)
    test 7 phimlam: (0.911149, 0.002077)
    test 8 phimlamheight: (0.911149, 0.002077, 0)
    test 9 toStr: 51°28′40″N, 000°00′06″W
    test 10 toStr: 51.4778°N, 000.0016°W
    test 11 precision: 0
    test 12 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 13 isequalTo: True
    test 14 isequalTo3: False
    test 15 latlon: (51.4778, -0.0016)
    test 16 phimlam: (0.898457, -0.000028)
    test 17 isequalTo: True
    test 18 isequalTo3: True
    test 19 latlon: (51.4778, -0.0016)
    test 20 latlonheight: (51.4778, -0.0016, 42.0)
    test 21 phimlam: (0.898457, -0.000028)
    test 22 phimlamheight: (0.898457, -0.000028, 42.0)
    test 23 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 24 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 25 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 26 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 27 lat, lon: 50.06632°N, 005.71475°W
    test 28 lat, lon: 50.066389°N, 005.714722°W
    test 29 isequalTo: True
    test 30 isequalTo3: True
    test 31 latlon: (52.205, 0.119)
    test 32 latlonheight: (52.205, 0.119, 0)
    test 33 phimlam: (0.911149, 0.002077)
    test 34 phimlamheight: (0.911149, 0.002077, 0)
    test 35 toStr: 51°28′40″N, 000°00′06″W
    test 36 toStr: 51.4778°N, 000.0016°W
    test 37 precision: 0
    test 38 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 39 isequalTo: True
    test 40 isequalTo3: False
    test 41 latlon: (51.4778, -0.0016)
    test 42 phimlam: (0.898457, -0.000028)
    test 43 isequalTo: True
    test 44 isequalTo3: True
    test 45 latlon: (51.4778, -0.0016)
    test 46 latlonheight: (51.4778, -0.0016, 42.0)
    test 47 phimlam: (0.898457, -0.000028)
    test 48 phimlamheight: (0.898457, -0.000028, 42.0)
    test 49 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 50 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 51 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 52 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 53 lat, lon: 50.06632°N, 005.71475°W
    test 54 lat, lon: 50.066389°N, 005.714722°W
    test 55 isequalTo: True
    test 56 isequalTo3: True
    test 57 latlon: (52.205, 0.119)
    test 58 latlonheight: (52.205, 0.119, 0)
    test 59 phimlam: (0.911149, 0.002077)
    test 60 phimlamheight: (0.911149, 0.002077, 0)
    test 61 toStr: 51°28′40″N, 000°00′06″W
    test 62 toStr: 51.4778°N, 000.0016°W
    test 63 precision: 0
    test 64 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 65 isequalTo: True
    test 66 isequalTo3: False
    test 67 latlon: (51.4778, -0.0016)
    test 68 phimlam: (0.898457, -0.000028)
    test 69 isequalTo: True
    test 70 isequalTo3: True
    test 71 latlon: (51.4778, -0.0016)
    test 72 latlonheight: (51.4778, -0.0016, 42.0)
    test 73 phimlam: (0.898457, -0.000028)
    test 74 phimlamheight: (0.898457, -0.000028, 42.0)
    test 75 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 76 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 77 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 78 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 79 lat, lon: 50.06632°N, 005.71475°W
    test 80 lat, lon: 50.066389°N, 005.714722°W
    test 81 isequalTo: True
    test 82 isequalTo3: True
    test 83 latlon: (52.205, 0.119)
    test 84 latlonheight: (52.205, 0.119, 0)
    test 85 phimlam: (0.911149, 0.002077)
    test 86 phimlamheight: (0.911149, 0.002077, 0)
    test 87 toStr: 51°28′40″N, 000°00′06″W
    test 88 toStr: 51.4778°N, 000.0016°W
    test 89 precision: 0
    test 90 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 91 isequalTo: True
    test 92 isequalTo3: False
    test 93 latlon: (51.4778, -0.0016)
    test 94 phimlam: (0.898457, -0.000028)
    test 95 isequalTo: True
    test 96 isequalTo3: True
    test 97 latlon: (51.4778, -0.0016)
    test 98 latlonheight: (51.4778, -0.0016, 42.0)
    test 99 phimlam: (0.898457, -0.000028)
    test 100 phimlamheight: (0.898457, -0.000028, 42.0)
    test 101 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 102 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 103 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 104 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalKarney, 21.06.27)
    test 105 lat, lon: 50.06632°N, 005.71475°W
    test 106 lat, lon: 50.066389°N, 005.714722°W
    test 107 isequalTo: True
    test 108 isequalTo3: True
    test 109 latlon: (52.205, 0.119)
    test 110 latlonheight: (52.205, 0.119, 0)
    test 111 phimlam: (0.911149, 0.002077)
    test 112 phimlamheight: (0.911149, 0.002077, 0)
    test 113 toStr: 51°28′40″N, 000°00′06″W
    test 114 toStr: 51.4778°N, 000.0016°W
    test 115 precision: 0
    test 116 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 117 isequalTo: True
    test 118 isequalTo3: False
    test 119 latlon: (51.4778, -0.0016)
    test 120 phimlam: (0.898457, -0.000028)
    test 121 isequalTo: True
    test 122 isequalTo3: True
    test 123 latlon: (51.4778, -0.0016)
    test 124 latlonheight: (51.4778, -0.0016, 42.0)
    test 125 phimlam: (0.898457, -0.000028)
    test 126 phimlamheight: (0.898457, -0.000028, 42.0)
    test 127 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 128 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 129 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 130 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalExact, 21.06.27)
    test 131 lat, lon: 50.06632°N, 005.71475°W
    test 132 lat, lon: 50.066389°N, 005.714722°W
    test 133 isequalTo: True
    test 134 isequalTo3: True
    test 135 latlon: (52.205, 0.119)
    test 136 latlonheight: (52.205, 0.119, 0)
    test 137 phimlam: (0.911149, 0.002077)
    test 138 phimlamheight: (0.911149, 0.002077, 0)
    test 139 toStr: 51°28′40″N, 000°00′06″W
    test 140 toStr: 51.4778°N, 000.0016°W
    test 141 precision: 0
    test 142 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 143 isequalTo: True
    test 144 isequalTo3: False
    test 145 latlon: (51.4778, -0.0016)
    test 146 phimlam: (0.898457, -0.000028)
    test 147 isequalTo: True
    test 148 isequalTo3: True
    test 149 latlon: (51.4778, -0.0016)
    test 150 latlonheight: (51.4778, -0.0016, 42.0)
    test 151 phimlam: (0.898457, -0.000028)
    test 152 phimlamheight: (0.898457, -0.000028, 42.0)
    test 153 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 154 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 155 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 156 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLon(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 157 lat, lon: 50.06632°N, 005.71475°W
    test 158 lat, lon: 50.066389°N, 005.714722°W
    test 159 isequalTo: True
    test 160 isequalTo3: True
    test 161 latlon: (52.205, 0.119)
    test 162 latlonheight: (52.205, 0.119, 0)
    test 163 phimlam: (0.911149, 0.002077)
    test 164 phimlamheight: (0.911149, 0.002077, 0)
    test 165 toStr: 51°28′40″N, 000°00′06″W
    test 166 toStr: 51.4778°N, 000.0016°W
    test 167 precision: 0
    test 168 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 169 isequalTo: True
    test 170 isequalTo3: False
    test 171 latlon: (51.4778, -0.0016)
    test 172 phimlam: (0.898457, -0.000028)
    test 173 isequalTo: True
    test 174 isequalTo3: True
    test 175 latlon: (51.4778, -0.0016)
    test 176 latlonheight: (51.4778, -0.0016, 42.0)
    test 177 phimlam: (0.898457, -0.000028)
    test 178 phimlamheight: (0.898457, -0.000028, 42.0)
    test 179 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 180 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 181 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 182 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonEllipsoidalBase(pygeodesy.ellipsoidalBase, 21.07.20)
    test 183 lat, lon: 50.06632°N, 005.71475°W
    test 184 lat, lon: 50.066389°N, 005.714722°W
    test 185 isequalTo: True
    test 186 isequalTo3: True
    test 187 latlon: (52.205, 0.119)
    test 188 latlonheight: (52.205, 0.119, 0)
    test 189 phimlam: (0.911149, 0.002077)
    test 190 phimlamheight: (0.911149, 0.002077, 0)
    test 191 toStr: 51°28′40″N, 000°00′06″W
    test 192 toStr: 51.4778°N, 000.0016°W
    test 193 precision: 0
    test 194 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 195 isequalTo: True
    test 196 isequalTo3: False
    test 197 latlon: (51.4778, -0.0016)
    test 198 phimlam: (0.898457, -0.000028)
    test 199 isequalTo: True
    test 200 isequalTo3: True
    test 201 latlon: (51.4778, -0.0016)
    test 202 latlonheight: (51.4778, -0.0016, 42.0)
    test 203 phimlam: (0.898457, -0.000028)
    test 204 phimlamheight: (0.898457, -0.000028, 42.0)
    test 205 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 206 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 207 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 208 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonEllipsoidalBaseDI(pygeodesy.ellipsoidalBaseDI, 21.06.28)
    test 209 lat, lon: 50.06632°N, 005.71475°W
    test 210 lat, lon: 50.066389°N, 005.714722°W
    test 211 isequalTo: True
    test 212 isequalTo3: True
    test 213 latlon: (52.205, 0.119)
    test 214 latlonheight: (52.205, 0.119, 0)
    test 215 phimlam: (0.911149, 0.002077)
    test 216 phimlamheight: (0.911149, 0.002077, 0)
    test 217 toStr: 51°28′40″N, 000°00′06″W
    test 218 toStr: 51.4778°N, 000.0016°W
    test 219 precision: 0
    test 220 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 221 isequalTo: True
    test 222 isequalTo3: False
    test 223 latlon: (51.4778, -0.0016)
    test 224 phimlam: (0.898457, -0.000028)
    test 225 isequalTo: True
    test 226 isequalTo3: True
    test 227 latlon: (51.4778, -0.0016)
    test 228 latlonheight: (51.4778, -0.0016, 42.0)
    test 229 phimlam: (0.898457, -0.000028)
    test 230 phimlamheight: (0.898457, -0.000028, 42.0)
    test 231 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 232 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 233 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 234 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonBase(pygeodesy.latlonBase, 21.07.26)
    test 235 lat, lon: 50.06632°N, 005.71475°W
    test 236 lat, lon: 50.066389°N, 005.714722°W
    test 237 isequalTo: True
    test 238 isequalTo3: True
    test 239 latlon: (52.205, 0.119)
    test 240 latlonheight: (52.205, 0.119, 0)
    test 241 phimlam: (0.911149, 0.002077)
    test 242 phimlamheight: (0.911149, 0.002077, 0)
    test 243 toStr: 51°28′40″N, 000°00′06″W
    test 244 toStr: 51.4778°N, 000.0016°W
    test 245 precision: 0
    test 246 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 247 isequalTo: True
    test 248 isequalTo3: False
    test 249 latlon: (51.4778, -0.0016)
    test 250 phimlam: (0.898457, -0.000028)
    test 251 isequalTo: True
    test 252 isequalTo3: True
    test 253 latlon: (51.4778, -0.0016)
    test 254 latlonheight: (51.4778, -0.0016, 42.0)
    test 255 phimlam: (0.898457, -0.000028)
    test 256 phimlamheight: (0.898457, -0.000028, 42.0)
    test 257 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 258 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 259 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 260 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonNvectorBase(pygeodesy.nvectorBase, 21.06.25)
    test 261 lat, lon: 50.06632°N, 005.71475°W
    test 262 lat, lon: 50.066389°N, 005.714722°W
    test 263 isequalTo: True
    test 264 isequalTo3: True
    test 265 latlon: (52.205, 0.119)
    test 266 latlonheight: (52.205, 0.119, 0)
    test 267 phimlam: (0.911149, 0.002077)
    test 268 phimlamheight: (0.911149, 0.002077, 0)
    test 269 toStr: 51°28′40″N, 000°00′06″W
    test 270 toStr: 51.4778°N, 000.0016°W
    test 271 precision: 0
    test 272 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 273 isequalTo: True
    test 274 isequalTo3: False
    test 275 latlon: (51.4778, -0.0016)
    test 276 phimlam: (0.898457, -0.000028)
    test 277 isequalTo: True
    test 278 isequalTo3: True
    test 279 latlon: (51.4778, -0.0016)
    test 280 latlonheight: (51.4778, -0.0016, 42.0)
    test 281 phimlam: (0.898457, -0.000028)
    test 282 phimlamheight: (0.898457, -0.000028, 42.0)
    test 283 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 284 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 285 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 286 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonSphericalBase(pygeodesy.sphericalBase, 21.06.30)
    test 287 lat, lon: 50.06632°N, 005.71475°W
    test 288 lat, lon: 50.066389°N, 005.714722°W
    test 289 isequalTo: True
    test 290 isequalTo3: True
    test 291 latlon: (52.205, 0.119)
    test 292 latlonheight: (52.205, 0.119, 0)
    test 293 phimlam: (0.911149, 0.002077)
    test 294 phimlamheight: (0.911149, 0.002077, 0)
    test 295 toStr: 51°28′40″N, 000°00′06″W
    test 296 toStr: 51.4778°N, 000.0016°W
    test 297 precision: 0
    test 298 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 299 isequalTo: True
    test 300 isequalTo3: False
    test 301 latlon: (51.4778, -0.0016)
    test 302 phimlam: (0.898457, -0.000028)
    test 303 isequalTo: True
    test 304 isequalTo3: True
    test 305 latlon: (51.4778, -0.0016)
    test 306 latlonheight: (51.4778, -0.0016, 42.0)
    test 307 phimlam: (0.898457, -0.000028)
    test 308 phimlamheight: (0.898457, -0.000028, 42.0)
    test 309 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 310 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 311 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 312 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    all 312 testLatLonBases.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 28.784 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testLazily.py

    testing testLazily.py 20.01.07
    test 1 a_b2e: function
    test 2 a_b2e2: function
    test 3 a_b2e22: function
    test 4 a_b2e32: function
    test 5 a_b2f: function
    test 6 a_b2f2: function
    test 7 a_b2f_: function
    test 8 a_b2n: function
    test 9 a_f2b: function
    test 10 a_f2Tuple: class
    test 11 a_f_2b: function
    test 12 acos1: function
    test 13 acre2ha: function
    test 14 acre2m2: function
    test 15 Aer: class
    test 16 Aer4Tuple: class
    test 17 albers: module
    test 18 Albers7Tuple: class
    test 19 AlbersEqualArea: class
    test 20 AlbersEqualArea2: class
    test 21 AlbersEqualArea4: class
    test 22 AlbersEqualAreaCylindrical: class
    test 23 AlbersEqualAreaNorth: class
    test 24 AlbersEqualAreaSouth: class
    test 25 AlbersError: class
    test 26 anstr: function
    test 27 anStr: function
    test 28 antipode: function
    test 29 antipode_: function
    test 30 areaof: function
    test 31 areaOf: function
    test 32 asin1: function
    test 33 atan2b: function
    test 34 atan2d: function
    test 35 atand: function
    test 36 attrs: function
    test 37 azimuthal: module
    test 38 Azimuthal7Tuple: class
    test 39 AzimuthalError: class
    test 40 b_f2a: function
    test 41 b_f_2a: function
    test 42 Band: class
    test 43 bases: module
    test 44 basics: module
    test 45 Bearing: class
    test 46 bearing: function
    test 47 Bearing2Tuple: class
    test 48 bearing_: function
    test 49 Bearing_: class
    test 50 bearingDMS: function
    test 51 Bool: class
    test 52 bounds: function
    test 53 Bounds2Tuple: class
    test 54 Bounds4Tuple: class
    test 55 boundsOf: function
    test 56 callername: function
    test 57 Caps: class pygeodesy.geodesicx.gxbases.Caps
    test 58 CassiniSoldner: class
    test 59 cbrt: function
    test 60 cbrt2: function
    test 61 centroidOf: function
    test 62 chain2m: function
    test 63 circle4: function
    test 64 Circle4Tuple: class
    test 65 circum3: function
    test 66 Circum3Tuple: class
    test 67 classname: function
    test 68 classnaming: function
    test 69 clipCS3: function
    test 70 ClipCS3Tuple: class
    test 71 clipCS4: function
    test 72 ClipCS4Tuple: class
    test 73 clipDegrees: function
    test 74 clipDMS: function
    test 75 ClipError: class
    test 76 clipLB6: function
    test 77 ClipLB6Tuple: class
    test 78 clipRadians: function
    test 79 clips: function
    test 80 clipSH: function
    test 81 clipSH3: function
    test 82 ClipSH3Tuple: class
    test 83 clipStr: function
    test 84 clipy: module
    test 85 compassAngle: function
    test 86 compassDMS: function
    test 87 compassPoint: function
    test 88 Conic: class
    test 89 Conics: class pygeodesy.lcc.Conics
    test 90 copysign0: function
    test 91 copytype: function
    test 92 cosineAndoyerLambert: function
    test 93 cosineAndoyerLambert_: function
    test 94 cosineForsytheAndoyerLambert: function
    test 95 cosineForsytheAndoyerLambert_: function
    test 96 cosineLaw: function
    test 97 cosineLaw_: function
    test 98 CrossError: class
    test 99 crosserrors: function
    test 100 css: module
    test 101 Css: class
    test 102 CSSError: class
    test 103 Curvature2Tuple: class
    test 104 date2epoch: function
    test 105 datum: module
    test 106 Datum: class
    test 107 Datums: class pygeodesy.datums.Datums
    test 108 datums: module
    test 109 decodeEPSG2: function
    test 110 degDMS: function
    test 111 degrees: type builtin_function_or_method
    test 112 Degrees: class
    test 113 degrees180: function
    test 114 Degrees2: class
    test 115 degrees2grades: function
    test 116 degrees2m: function
    test 117 degrees360: function
    test 118 degrees90: function
    test 119 Degrees_: class
    test 120 deprecated: module
    test 121 deprecated_class: function
    test 122 deprecated_function: function
    test 123 deprecated_method: function
    test 124 deprecated_Property_RO: function
    test 125 deprecated_property_RO: function
    test 126 DeprecationWarnings: function
    test 127 Destination2Tuple: class
    test 128 Destination3Tuple: class
    test 129 DIG: int
    test 130 Direct9Tuple: class
    test 131 Distance: class
    test 132 Distance2Tuple: class
    test 133 Distance3Tuple: class
    test 134 Distance4Tuple: class
    test 135 Distance_: class
    test 136 dms: module
    test 137 EasNor2Tuple: class
    test 138 EasNor3Tuple: class
    test 139 EasNorAziRk4Tuple: class
    test 140 EasNorExact4Tuple: class
    test 141 EasNorRadius3Tuple: class
    test 142 Easting: class
    test 143 ecef: module
    test 144 Ecef9Tuple: class
    test 145 EcefCartesian: class
    test 146 EcefError: class
    test 147 EcefFarrell21: class
    test 148 EcefFarrell22: class
    test 149 EcefKarney: class
    test 150 EcefMatrix: class
    test 151 EcefSudano: class
    test 152 EcefVeness: class
    test 153 EcefYou: class
    test 154 egmGeoidHeights: function
    test 155 elevation2: function
    test 156 Elevation2Tuple: class
    test 157 elevations: module
    test 158 Ellipsoid: class
    test 159 Ellipsoid2: class
    test 160 ellipsoidalExact: module
    test 161 ellipsoidalGeodSolve: module
    test 162 ellipsoidalKarney: module
    test 163 ellipsoidalNvector: module
    test 164 ellipsoidalVincenty: module
    test 165 Ellipsoids: class pygeodesy.ellipsoids.Ellipsoids
    test 166 ellipsoids: module
    test 167 elliptic: module
    test 168 Elliptic: class
    test 169 Elliptic3Tuple: class
    test 170 EllipticError: class
    test 171 encodeEPSG: function
    test 172 enstr2: function
    test 173 enStr2: function
    test 174 Enu: class
    test 175 Enu4Tuple: class
    test 176 Epoch: class
    test 177 epoch2date: function
    test 178 EPS: float
    test 179 EPS0: float
    test 180 EPS02: float
    test 181 EPS1: float
    test 182 EPS1_2: float
    test 183 EPS2: float
    test 184 EPS4: float
    test 185 EPS_2: float
    test 186 epsg: module
    test 187 Epsg: class
    test 188 EPSGError: class
    test 189 equidistant: function
    test 190 Equidistant: class
    test 191 EquidistantExact: class
    test 192 EquidistantGeodSolve: class
    test 193 EquidistantKarney: class
    test 194 equirectangular: function
    test 195 equirectangular3: function
    test 196 equirectangular_: function
    test 197 errors: module
    test 198 Etm: class
    test 199 etm: module
    test 200 ETMError: class
    test 201 euclid: function
    test 202 euclid_: function
    test 203 euclidean: function
    test 204 euclidean_: function
    test 205 ExactTransverseMercator: class
    test 206 exception_chaining: function
    test 207 excessAbc: function
    test 208 excessGirard: function
    test 209 excessKarney: function
    test 210 excessKarney_: function
    test 211 excessLHuilier: function
    test 212 excessQuad: function
    test 213 excessQuad_: function
    test 214 f2e2: function
    test 215 f2e22: function
    test 216 f2e32: function
    test 217 f2f2: function
    test 218 f2f_: function
    test 219 f2n: function
    test 220 f_2f: function
    test 221 F__E: str
    test 222 F__E_: str
    test 223 F__E__: str
    test 224 F__F: str
    test 225 F__F_: str
    test 226 F__F__: str
    test 227 F__G: str
    test 228 F__G_: str
    test 229 F__G__: str
    test 230 F_D: str
    test 231 F_D_: str
    test 232 F_D__: str
    test 233 F_DEG: str
    test 234 F_DEG_: str
    test 235 F_DEG__: str
    test 236 F_DM: str
    test 237 F_DM_: str
    test 238 F_DM__: str
    test 239 F_DMS: str
    test 240 F_DMS_: str
    test 241 F_DMS__: str
    test 242 F_MIN: str
    test 243 F_MIN_: str
    test 244 F_MIN__: str
    test 245 F_RAD: str
    test 246 F_RAD_: str
    test 247 F_RAD__: str
    test 248 F_SEC: str
    test 249 F_SEC_: str
    test 250 F_SEC__: str
    test 251 facos1: function
    test 252 false2f: function
    test 253 falsed2f: function
    test 254 fasin1: function
    test 255 fatan: function
    test 256 fatan1: function
    test 257 fatan2: function
    test 258 fathom2m: function
    test 259 favg: function
    test 260 Fdot: class
    test 261 fdot: function
    test 262 fdot3: function
    test 263 Feet: class
    test 264 Fhorner: class
    test 265 fhorner: function
    test 266 fidw: function
    test 267 FIx: class
    test 268 flatLocal: function
    test 269 flatLocal_: function
    test 270 flatPolar: function
    test 271 flatPolar_: function
    test 272 Float: class
    test 273 Float_: class
    test 274 fmath: module
    test 275 fmean: function
    test 276 fmean_: function
    test 277 Footprint5Tuple: class
    test 278 formy: module
    test 279 fpolynomial: function
    test 280 Fpolynomial: class
    test 281 fpowers: function
    test 282 fprod: function
    test 283 fractional: function
    test 284 frange: function
    test 285 Frechet: class
    test 286 frechet: module
    test 287 Frechet6Tuple: class
    test 288 frechet_: function
    test 289 FrechetCosineAndoyerLambert: class
    test 290 FrechetCosineForsytheAndoyerLambert: class
    test 291 FrechetCosineLaw: class
    test 292 FrechetDegrees: class
    test 293 FrechetDistanceTo: class
    test 294 FrechetEquirectangular: class
    test 295 FrechetError: class
    test 296 FrechetEuclidean: class
    test 297 FrechetExact: class
    test 298 FrechetFlatLocal: class
    test 299 FrechetFlatPolar: class
    test 300 FrechetHaversine: class
    test 301 FrechetHubeny: class
    test 302 FrechetKarney: class
    test 303 FrechetRadians: class
    test 304 FrechetThomas: class
    test 305 FrechetVincentys: class
    test 306 freduce: type builtin_function_or_method
    test 307 Frustum: class
    test 308 fStr: function
    test 309 fstr: function
    test 310 fStrzs: function
    test 311 fstrzs: function
    test 312 Fsum: class
    test 313 fsum: type builtin_function_or_method
    test 314 fsum2: function
    test 315 fsum_: function
    test 316 ft2m: function
    test 317 furlong2m: function
    test 318 Garef: class
    test 319 gars: module
    test 320 GARSError: class
    test 321 GDict: class
    test 322 GeodesicAreaExact: class
    test 323 GeodesicError: class
    test 324 GeodesicExact: class
    test 325 GeodesicLineExact: class
    test 326 GeodesicLineSolve: class
    test 327 GeodesicSolve: class
    test 328 geodesicx: module
    test 329 geodsolve: module
    test 330 GeodSolve12Tuple: class
    test 331 geohash: module
    test 332 Geohash: class
    test 333 GeohashError: class
    test 334 GeoidError: class
    test 335 GeoidG2012B: class
    test 336 geoidHeight2: function
    test 337 GeoidHeight2Tuple: class
    test 338 GeoidHeight5Tuple: class
    test 339 GeoidKarney: class
    test 340 GeoidPGM: class
    test 341 geoids: module
    test 342 Georef: class
    test 343 gnomonic: function
    test 344 Gnomonic: class
    test 345 GnomonicExact: class
    test 346 GnomonicGeodSolve: class
    test 347 GnomonicKarney: class
    test 348 grades: function
    test 349 grades2degrees: function
    test 350 grades2radians: function
    test 351 grades400: function
    test 352 gx: module
    test 353 gxarea: module
    test 354 gxline: module
    test 355 halfs2: function
    test 356 Hausdorff: class
    test 357 hausdorff: module
    test 358 Hausdorff6Tuple: class
    test 359 hausdorff_: function
    test 360 HausdorffCosineAndoyerLambert: class
    test 361 HausdorffCosineForsytheAndoyerLambert: class
    test 362 HausdorffCosineLaw: class
    test 363 HausdorffDegrees: class
    test 364 HausdorffDistanceTo: class
    test 365 HausdorffEquirectangular: class
    test 366 HausdorffError: class
    test 367 HausdorffEuclidean: class
    test 368 HausdorffExact: class
    test 369 HausdorffFlatLocal: class
    test 370 HausdorffFlatPolar: class
    test 371 HausdorffHaversine: class
    test 372 HausdorffHubeny: class
    test 373 HausdorffKarney: class
    test 374 HausdorffRadians: class
    test 375 HausdorffThomas: class
    test 376 HausdorffVincentys: class
    test 377 haversine: function
    test 378 haversine_: function
    test 379 Height: class
    test 380 HeightCubic: class
    test 381 HeightError: class
    test 382 HeightIDW: class
    test 383 HeightIDW2: class
    test 384 HeightIDW3: class
    test 385 HeightIDWcosineAndoyerLambert: class
    test 386 HeightIDWcosineForsytheAndoyerLambert: class
    test 387 HeightIDWcosineLaw: class
    test 388 HeightIDWdistanceTo: class
    test 389 HeightIDWequirectangular: class
    test 390 HeightIDWeuclidean: class
    test 391 HeightIDWflatLocal: class
    test 392 HeightIDWflatPolar: class
    test 393 HeightIDWhaversine: class
    test 394 HeightIDWhubeny: class
    test 395 HeightIDWkarney: class
    test 396 HeightIDWthomas: class
    test 397 HeightIDWvincentys: class
    test 398 HeightLinear: class
    test 399 HeightLSQBiSpline: class
    test 400 heightOf: function
    test 401 heights: module
    test 402 HeightSmoothBiSpline: class
    test 403 horizon: function
    test 404 hstr: function
    test 405 hubeny: function
    test 406 hubeny_: function
    test 407 hypot: type builtin_function_or_method
    test 408 hypot1: function
    test 409 hypot2: function
    test 410 hypot2_: function
    test 411 hypot3: function
    test 412 hypot_: function
    test 413 INF: float
    test 414 inStr: function
    test 415 instr: function
    test 416 Int: class
    test 417 Int_: class
    test 418 interns: module
    test 419 intersection3d3: function
    test 420 Intersection3Tuple: class
    test 421 IntersectionError: class
    test 422 intersections2: function
    test 423 Inverse10Tuple: class
    test 424 isantipode: function
    test 425 isantipode_: function
    test 426 isbool: function
    test 427 isclass: function
    test 428 isclockwise: function
    test 429 iscolinearWith: function
    test 430 isconvex: function
    test 431 isconvex_: function
    test 432 isenclosedBy: function
    test 433 isenclosedby: function
    test 434 isfinite: function
    test 435 isidentifier: function
    test 436 isinf: type builtin_function_or_method
    test 437 isint: function
    test 438 iskeyword: type builtin_function_or_method
    test 439 isLazy: type NoneType
    test 440 isnan: type builtin_function_or_method
    test 441 isnear0: function
    test 442 isneg0: function
    test 443 isnon0: function
    test 444 isNumpy2: function
    test 445 isodd: function
    test 446 isPoints2: function
    test 447 ispolar: function
    test 448 isscalar: function
    test 449 issequence: function
    test 450 isstr: function
    test 451 issubclassof: function
    test 452 isTuple2: function
    test 453 iterNumpy2: function
    test 454 iterNumpy2over: function
    test 455 iters: module
    test 456 joined: function
    test 457 joined_: function
    test 458 karney: module
    test 459 Lam: class
    test 460 Lam_: class
    test 461 LambertEqualArea: class
    test 462 Lat: class
    test 463 Lat_: class
    test 464 latDMS: function
    test 465 latlon2n_xyz: function
    test 466 LatLon2psxy: class
    test 467 LatLon2PsxyIter: class
    test 468 LatLon2Tuple: class
    test 469 LatLon3Tuple: class
    test 470 LatLon4Tuple: class
    test 471 LatLon_: class
    test 472 LatLonAziRk4Tuple: class
    test 473 LatLonDatum3Tuple: class
    test 474 LatLonDatum5Tuple: class
    test 475 latlonDMS: function
    test 476 LatLonExact4Tuple: class
    test 477 LatLonPrec3Tuple: class
    test 478 LatLonPrec5Tuple: class
    test 479 lazily: module
    test 480 LazyImportError: class
    test 481 Lcc: class
    test 482 lcc: module
    test 483 LCCError: class
    test 484 len2: function
    test 485 LenError: class
    test 486 LimitError: class
    test 487 limiterrors: function
    test 488 Local9Tuple: class
    test 489 LocalCartesian: class
    test 490 LocalError: class
    test 491 Lon: class
    test 492 Lon_: class
    test 493 lonDMS: function
    test 494 ltp: module
    test 495 Ltp: class
    test 496 ltpTuples: module
    test 497 luneOf: function
    test 498 m2degrees: function
    test 499 m2ft: function
    test 500 m2km: function
    test 501 m2NM: function
    test 502 m2radians: function
    test 503 m2SM: function
    test 504 m2yard: function
    test 505 MANT_DIG: int
    test 506 MANTIS: int
    test 507 map1: function
    test 508 map2: function
    test 509 MAX: float
    test 510 meeus2: function
    test 511 Meeus2Tuple: class
    test 512 Meter: class
    test 513 Meter2: class
    test 514 Meter3: class
    test 515 Meter_: class
    test 516 mgrs: module
    test 517 Mgrs: class
    test 518 Mgrs4Tuple: class
    test 519 Mgrs6Tuple: class
    test 520 MGRSError: class
    test 521 MIN: float
    test 522 modulename: function
    test 523 n2e2: function
    test 524 n2f: function
    test 525 n2f_: function
    test 526 n_xyz2latlon: function
    test 527 n_xyz2philam: function
    test 528 named: module
    test 529 namedTuples: module
    test 530 nameof: function
    test 531 NAN: float
    test 532 nearestOn3: function
    test 533 NearestOn3Tuple: class
    test 534 nearestOn4: function
    test 535 nearestOn5: function
    test 536 NearestOn5Tuple: class
    test 537 Ned: class
    test 538 Ned3Tuple: class
    test 539 Ned4Tuple: class
    test 540 neg: function
    test 541 NEG0: float
    test 542 neg_: function
    test 543 Neighbors8Dict: class
    test 544 NN: str
    test 545 norm2: function
    test 546 norm_: function
    test 547 normDMS: function
    test 548 Northing: class
    test 549 notImplemented: function
    test 550 notOverloaded: function
    test 551 Number_: class
    test 552 Numpy2LatLon: class
    test 553 NumPyError: class
    test 554 nvector: module
    test 555 OK: str
    test 556 Orthographic: class
    test 557 osgr: module
    test 558 Osgr: class
    test 559 OSGRError: class
    test 560 pairs: function
    test 561 parse3d: function
    test 562 parse3llh: function
    test 563 parseDDDMMSS: function
    test 564 parseDMS: function
    test 565 parseDMS2: function
    test 566 ParseError: class
    test 567 parseETM5: function
    test 568 parseMGRS: function
    test 569 parseOSGR: function
    test 570 parseRad: function
    test 571 parseUPS5: function
    test 572 parseUTM: function
    test 573 parseUTM5: function
    test 574 parseUTMUPS5: function
    test 575 parseWM: function
    test 576 perimeterOf: function
    test 577 perimeterof: function
    test 578 PGMError: class
    test 579 Phi: class
    test 580 Phi_: class
    test 581 philam2n_xyz: function
    test 582 PhiLam2Tuple: class
    test 583 PhiLam3Tuple: class
    test 584 PhiLam4Tuple: class
    test 585 PI: float
    test 586 PI2: float
    test 587 PI3: float
    test 588 PI3_2: float
    test 589 PI4: float
    test 590 PI_2: float
    test 591 PI_4: float
    test 592 Point3Tuple: class
    test 593 points: module
    test 594 points2: function
    test 595 Points2Tuple: class
    test 596 PointsError: class
    test 597 PointsIter: class
    test 598 polygon: function
    test 599 PolygonArea: class
    test 600 precision: function
    test 601 Precision_: class
    test 602 print_: function
    test 603 printf: function
    test 604 Property: class
    test 605 property_doc_: function
    test 606 Property_RO: class
    test 607 property_RO: class
    test 608 props: module
    test 609 pygeodesy_abspath: str
    test 610 quadOf: function
    test 611 R_FM: float
    test 612 R_GM: float
    test 613 R_KM: float
    test 614 R_M: float
    test 615 R_MA: float
    test 616 R_MB: float
    test 617 R_NM: float
    test 618 R_SM: float
    test 619 R_VM: float
    test 620 radians: type builtin_function_or_method
    test 621 Radians: class
    test 622 Radians2: class
    test 623 radians2m: function
    test 624 Radians_: class
    test 625 radiansPI: function
    test 626 radiansPI2: function
    test 627 radiansPI_2: function
    test 628 radical2: function
    test 629 Radical2Tuple: class
    test 630 Radius: class
    test 631 Radius_: class
    test 632 randomrangenerator: function
    test 633 RangeError: class
    test 634 rangerrors: function
    test 635 RefFrame: class
    test 636 RefFrameError: class
    test 637 RefFrames: class pygeodesy.trf.RefFrames
    test 638 reprs: function
    test 639 Resolutions2Tuple: class
    test 640 S_DEG: str
    test 641 S_MIN: str
    test 642 S_RAD: str
    test 643 S_SEC: str
    test 644 S_SEP: str
    test 645 scalar: function
    test 646 Scalar: class
    test 647 Scalar_: class
    test 648 SciPyError: class
    test 649 SciPyWarning: class
    test 650 Shape2Tuple: class
    test 651 signOf: function
    test 652 simplify: module
    test 653 simplify1: function
    test 654 simplify2: function
    test 655 simplifyRDP: function
    test 656 simplifyRDPm: function
    test 657 simplifyRW: function
    test 658 simplifyVW: function
    test 659 simplifyVWm: function
    test 660 sincos2: function
    test 661 sincos2d: function
    test 662 sphericalNvector: module
    test 663 sphericalTrigonometry: module
    test 664 splice: function
    test 665 sqrt0: function
    test 666 sqrt3: function
    test 667 Stereographic: class
    test 668 Str: class
    test 669 streprs: module
    test 670 strs: function
    test 671 tan_2: function
    test 672 tanPI_2_2: function
    test 673 thomas: function
    test 674 thomas_: function
    test 675 toCss: function
    test 676 toDMS: function
    test 677 toEtm8: function
    test 678 toLcc: function
    test 679 toMgrs: function
    test 680 toOsgr: function
    test 681 toUps8: function
    test 682 toUtm: function
    test 683 toUtm8: function
    test 684 toUtmUps8: function
    test 685 toWm: function
    test 686 Transform: class
    test 687 Transform7Tuple: class
    test 688 Transforms: class pygeodesy.datums.Transforms
    test 689 trf: module
    test 690 TRFError: class
    test 691 trfXform: function
    test 692 Triangle7Tuple: class
    test 693 Triangle8Tuple: class
    test 694 trilaterate2d2: function
    test 695 trilaterate3d2: function
    test 696 Trilaterate5Tuple: class
    test 697 Tuple2LatLon: class
    test 698 ub2str: function
    test 699 UnitError: class
    test 700 units: module
    test 701 unroll180: function
    test 702 unrollPI: function
    test 703 unsign0: function
    test 704 unstr: function
    test 705 unStr: function
    test 706 ups: module
    test 707 Ups: class
    test 708 UPSError: class
    test 709 upsZoneBand5: function
    test 710 utily: module
    test 711 Utm: class
    test 712 utm: module
    test 713 UTMError: class
    test 714 UtmUps: function
    test 715 utmups: module
    test 716 UtmUps2Tuple: class
    test 717 UtmUps4Tuple: class
    test 718 UtmUps5Tuple: class
    test 719 UtmUps8Tuple: class
    test 720 UTMUPSError: class
    test 721 UtmUpsLatLon5Tuple: class
    test 722 utmupsValidate: function
    test 723 utmupsValidateOK: function
    test 724 utmupsZoneBand5: function
    test 725 utmZoneBand2: function
    test 726 utmZoneBand5: function
    test 727 Vector2Tuple: class
    test 728 vector3d: module
    test 729 Vector3d: class
    test 730 Vector3Tuple: class
    test 731 Vector4Tuple: class
    test 732 VectorError: class
    test 733 version: str
    test 734 VincentyError: class
    test 735 vincentys: function
    test 736 vincentys_: function
    test 737 webmercator: module
    test 738 WebMercatorError: class
    test 739 wgrs: module
    test 740 WGRSError: class
    test 741 Wm: class
    test 742 wrap180: function
    test 743 wrap360: function
    test 744 wrap90: function
    test 745 wrapPI: function
    test 746 wrapPI2: function
    test 747 wrapPI_2: function
    test 748 Xyz4Tuple: class
    test 749 XyzLocal: class
    test 750 yard2m: function
    test 751 Zone: class
    test 752 isLazy: None
    test 753 missing in lazily._all_imports: None
    test 754 missing in pygeodesy.__all__: None
    test 755 cmd: /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c 'import pygeodesy, sys; sys.exit(0 if pygeodesy.isLazy == %s else 1)'
    test 756 PYGEODESY_LAZY_IMPORT=0: 0
    test 757 PYGEODESY_LAZY_IMPORT=1: 0
    test 758 PYGEODESY_LAZY_IMPORT=2: 0
    test 759 PYGEODESY_LAZY_IMPORT=3: 0
    test 760 PYGEODESY_LAZY_IMPORT=4: 0

    all 760 testLazily.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 804.751 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testLcc.py

    testing testLcc.py 22.02.11 (module pygeodesy.lcc 21.07.22)

    testLcc(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: [E:448251, N:5411932]
    test 4 lb1: WRF_Lb.WGS84
    test 5 lb1: lb1
    test 6 lb1: (81.929348, -79.558697)
    test 7 lb1: (1.429937, -1.388561)
    test 8 LatLon: 46.5°N, 003.0°E
    test 9 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 10 toLcc1: 700000 6600000
    test 11 toLcc1: 46.5°N, 003.0°E
    test 12 lb2: 1894411 1564650
    test 13 lb2: Clarke1866
    test 14 lb2: lb2
    test 15 toLatLon2: 35.0°N, 075.0°W
    test 16 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 17 toLatLon2: NAD27
    test 18 toLcc2: 1894410.9 1564649.5
    test 19 toLcc2: [E:1894411, N:1564649]
    test 20 toLcc2: Snyder.NAD27
    test 21 Fr93Lb: 49.0°N, 002.0°W
    test 22 Fr93Lb: WGS84
    test 23 Fr93Lb: 49.0°N, 003.0°E
    test 24 Fr93Lb: WGS84
    test 25 Fr93Lb: 49.0°N, 008.0°E
    test 26 Fr93Lb: WGS84
    test 27 Fr93Lb: 44.0°N, 002.0°W
    test 28 Fr93Lb: WGS84
    test 29 Fr93Lb: 44.0°N, 003.0°E
    test 30 Fr93Lb: WGS84
    test 31 Fr93Lb: 44.0°N, 008.0°E
    test 32 Fr93Lb: WGS84
    test 33 Snyder: 33.0°N, 108.0°W
    test 34 Snyder: NAD27
    test 35 Snyder: 33.0°N, 096.0°W
    test 36 Snyder: NAD27
    test 37 Snyder: 33.0°N, 084.0°W
    test 38 Snyder: NAD27
    test 39 Snyder: 45.0°N, 108.0°W
    test 40 Snyder: NAD27
    test 41 Snyder: 45.0°N, 096.0°W
    test 42 Snyder: NAD27
    test 43 Snyder: 45.0°N, 084.0°W
    test 44 Snyder: NAD27
    test 45 WRF_Lb: 33.0°N, 109.0°W
    test 46 WRF_Lb: WGS84
    test 47 WRF_Lb: 33.0°N, 097.0°W
    test 48 WRF_Lb: WGS84
    test 49 WRF_Lb: 33.0°N, 085.0°W
    test 50 WRF_Lb: WGS84
    test 51 WRF_Lb: 45.0°N, 109.0°W
    test 52 WRF_Lb: WGS84
    test 53 WRF_Lb: 45.0°N, 097.0°W
    test 54 WRF_Lb: WGS84
    test 55 WRF_Lb: 45.0°N, 085.0°W
    test 56 WRF_Lb: WGS84

    testLcc(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 57 lb1: 448251.0 5411932.0001
    test 58 lb1: 448251, 5411932
    test 59 lb1: [E:448251, N:5411932]
    test 60 lb1: WRF_Lb.WGS84
    test 61 lb1: lb1
    test 62 lb1: (81.929348, -79.558697)
    test 63 lb1: (1.429937, -1.388561)
    test 64 LatLon: 46.5°N, 003.0°E
    test 65 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 66 toLcc1: 700000 6600000
    test 67 toLcc1: 46.5°N, 003.0°E
    test 68 lb2: 1894411 1564650
    test 69 lb2: Clarke1866
    test 70 lb2: lb2
    test 71 toLatLon2: 35.0°N, 075.0°W
    test 72 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 73 toLatLon2: NAD27
    test 74 toLcc2: 1894410.9 1564649.5
    test 75 toLcc2: [E:1894411, N:1564649]
    test 76 toLcc2: Snyder.NAD27
    test 77 Fr93Lb: 49.0°N, 002.0°W
    test 78 Fr93Lb: WGS84
    test 79 Fr93Lb: 49.0°N, 003.0°E
    test 80 Fr93Lb: WGS84
    test 81 Fr93Lb: 49.0°N, 008.0°E
    test 82 Fr93Lb: WGS84
    test 83 Fr93Lb: 44.0°N, 002.0°W
    test 84 Fr93Lb: WGS84
    test 85 Fr93Lb: 44.0°N, 003.0°E
    test 86 Fr93Lb: WGS84
    test 87 Fr93Lb: 44.0°N, 008.0°E
    test 88 Fr93Lb: WGS84
    test 89 Snyder: 33.0°N, 108.0°W
    test 90 Snyder: NAD27
    test 91 Snyder: 33.0°N, 096.0°W
    test 92 Snyder: NAD27
    test 93 Snyder: 33.0°N, 084.0°W
    test 94 Snyder: NAD27
    test 95 Snyder: 45.0°N, 108.0°W
    test 96 Snyder: NAD27
    test 97 Snyder: 45.0°N, 096.0°W
    test 98 Snyder: NAD27
    test 99 Snyder: 45.0°N, 084.0°W
    test 100 Snyder: NAD27
    test 101 WRF_Lb: 33.0°N, 109.0°W
    test 102 WRF_Lb: WGS84
    test 103 WRF_Lb: 33.0°N, 097.0°W
    test 104 WRF_Lb: WGS84
    test 105 WRF_Lb: 33.0°N, 085.0°W
    test 106 WRF_Lb: WGS84
    test 107 WRF_Lb: 45.0°N, 109.0°W
    test 108 WRF_Lb: WGS84
    test 109 WRF_Lb: 45.0°N, 097.0°W
    test 110 WRF_Lb: WGS84
    test 111 WRF_Lb: 45.0°N, 085.0°W
    test 112 WRF_Lb: WGS84

    testConic(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 113 SnyderN: name='SnyderN', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 114 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 115 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 116 _SnyderN .auth: ''
    test 117 _SnyderN .opt3: 0.0
    test 118 _SnyderN .latlon0: (23.0, -96.0)
    test 119 _SnyderN .philam0: (0.401426, -1.675516)

    testConic(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 120 SnyderV: name='SnyderV', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 121 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 122 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 123 _SnyderV .auth: ''
    test 124 _SnyderV .opt3: 0.0
    test 125 _SnyderV .latlon0: (23.0, -96.0)
    test 126 _SnyderV .philam0: (0.401426, -1.675516)

    all 126 testLcc.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 18.559 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testLtp.py
./pygeodesy/deprecated/__init__.py:61: DeprecationWarning: class L{pygeodesy.deprecated.EcefCartesian} has been DEPRECATED, use class L{LocalCartesian}.
  deprecated_class(self.__class__)
./test/testLtp.py:33: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(33.3, 44.4, 6000)
./test/testLtp.py:37: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(37288.97, 33374.29, 5783.65)
./test/testLtp.py:46: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(LatLon_(50.9, 1.8, name='Calais'))  # Local9Tuple
./test/testLtp.py:50: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(-37518.64, 229949.65, -4260.43)  # Local9Tuple
./test/testLtp.py:54: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(-38e3, 230e3, -4e3)
./test/testLtp.py:58: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(50.9, 1.79, 264.92)  # Local9Tuple
./pygeodesy/deprecated/__init__.py:61: DeprecationWarning: class L{pygeodesy.deprecated.EcefCartesian} has been DEPRECATED, use class L{LocalCartesian}.
  deprecated_class(self.__class__)
./test/testLtp.py:66: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = Z.reverse(M).toLatLon(datum=None)  # Matterhorn Xyz to LatLon
./test/testLtp.py:68: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  self.test('xyz', Z.forward(t).xyz.toStr(prec=1), '(-7134.8, -4556.3, 2852.4)', known=Sudano)

    testing testLtp.py 21.04.17

    test 1 EcefCartesian: {}
    test 2 name: Test
    test 3 toStr: EcefCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected EcefCartesian
    test 4 copy(EcefCartesian): (<class 'pygeodesy.deprecated.EcefCartesian'>, True)
    test 5 EcefCartesian.copy(): (<class 'pygeodesy.deprecated.EcefCartesian'>, True)
    test 6 forward: 37288.97, 33374.29, 5783.65
    test 7 name: Test
    test 8 reverse: 33.3, 44.4, 6000.0
    test 9 name: Test
    test 10 name: Paris
    test 11 Paris: 48.833, 2.333, 0.0
    test 12 forward: -37518.64, 229949.65, -4260.43
    test 13 name: Calais
    test 14 reverse: 50.9, 1.8, -0.0
    test 15 name: Paris
    test 16 reverse: -38000.0, 230000.0, -4000.0
    test 17 reverse: 50.9, 1.79, 264.92
    test 18 forward: -38223.7, 229964.2, -4000.0
    test 19 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected EcefCartesian
    test 20 Matterhorn: (45.976, 7.658, 4531.01)
    test 21 xyz: (-7134.8, -4556.3, 2852.4)
    test 22 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 23 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 24 _local2ecef: Ecef9Tuple
    test 25 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, EcefCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 26 _ecef2local: Local9Tuple
    test 27 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 28 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 29 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 30 Ned: [-4556.3, -7134.8, -2852.4]
    test 31 Enu: [-7134.8, -4556.3, 2852.4]
    test 32 Ned: [-4556.3, -7134.8, -2852.4]
    test 33 hfov: 90.0
    test 34 vfov: 90.0
    test 35 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 36 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 37 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 38 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 39 LocalCartesian: {}
    test 40 name: Test
    test 41 toStr: LocalCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected LocalCartesian
    test 42 copy(LocalCartesian): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 43 LocalCartesian.copy(): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 44 forward: 37288.97, 33374.29, 5783.65
    test 45 name: Test
    test 46 reverse: 33.3, 44.4, 6000.0
    test 47 name: Test
    test 48 name: Paris
    test 49 Paris: 48.833, 2.333, 0.0
    test 50 forward: -37518.64, 229949.65, -4260.43
    test 51 name: Calais
    test 52 reverse: 50.9, 1.8, -0.0
    test 53 name: Paris
    test 54 reverse: -38000.0, 230000.0, -4000.0
    test 55 reverse: 50.9, 1.79, 264.92
    test 56 forward: -38223.7, 229964.2, -4000.0
    test 57 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected LocalCartesian
    test 58 Matterhorn: (45.976, 7.658, 4531.01)
    test 59 xyz: (-7134.8, -4556.3, 2852.4)
    test 60 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 61 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 62 _local2ecef: Ecef9Tuple
    test 63 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, LocalCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 64 _ecef2local: Local9Tuple
    test 65 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 66 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 67 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 68 Ned: [-4556.3, -7134.8, -2852.4]
    test 69 Enu: [-7134.8, -4556.3, 2852.4]
    test 70 Ned: [-4556.3, -7134.8, -2852.4]
    test 71 hfov: 90.0
    test 72 vfov: 90.0
    test 73 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 74 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 75 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 76 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 77 Ltp: {}
    test 78 name: Test
    test 79 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 80 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 81 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 82 forward: 37288.97, 33374.29, 5783.65
    test 83 name: Test
    test 84 reverse: 33.3, 44.4, 6000.0
    test 85 name: Test
    test 86 name: Paris
    test 87 Paris: 48.833, 2.333, 0.0
    test 88 forward: -37518.64, 229949.65, -4260.43
    test 89 name: Calais
    test 90 reverse: 50.9, 1.8, -0.0
    test 91 name: Paris
    test 92 reverse: -38000.0, 230000.0, -4000.0
    test 93 reverse: 50.9, 1.79, 264.92
    test 94 forward: -38223.7, 229964.2, -4000.0
    test 95 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 96 Matterhorn: (45.976, 7.658, 4531.01)
    test 97 xyz: (-7134.8, -4556.3, 2852.4)
    test 98 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 99 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 100 _local2ecef: Ecef9Tuple
    test 101 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 102 _ecef2local: Local9Tuple
    test 103 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 104 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 105 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 106 Ned: [-4556.3, -7134.8, -2852.4]
    test 107 Enu: [-7134.8, -4556.3, 2852.4]
    test 108 Ned: [-4556.3, -7134.8, -2852.4]
    test 109 hfov: 90.0
    test 110 vfov: 90.0
    test 111 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 112 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 113 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 114 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 115 Ltp: {'ecef': EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='')}
    test 116 name: Test
    test 117 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 118 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 119 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 120 forward: 37288.97, 33374.29, 5783.65
    test 121 name: Test
    test 122 reverse: 33.3, 44.4, 6000.0
    test 123 name: Test
    test 124 name: Paris
    test 125 Paris: 48.833, 2.333, 0.0
    test 126 forward: -37518.64, 229949.65, -4260.43
    test 127 name: Calais
    test 128 reverse: 50.9, 1.8, -0.0
    test 129 name: Paris
    test 130 reverse: -38000.0, 230000.0, -4000.0
    test 131 reverse: 50.9, 1.79, 264.92
    test 132 forward: -38223.7, 229964.2, -4000.0
    test 133 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 134 Matterhorn: (45.976, 7.658, 4531.01)
    test 135 xyz: (-7134.8, -4556.3, 2852.4)
    test 136 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 137 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 138 _local2ecef: Ecef9Tuple
    test 139 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 140 _ecef2local: Local9Tuple
    test 141 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 142 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 143 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 144 Ned: [-4556.3, -7134.8, -2852.4]
    test 145 Enu: [-7134.8, -4556.3, 2852.4]
    test 146 Ned: [-4556.3, -7134.8, -2852.4]
    test 147 hfov: 90.0
    test 148 vfov: 90.0
    test 149 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 150 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 151 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 152 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 153 Ltp: {'ecef': EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='')}
    test 154 name: Test
    test 155 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 156 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 157 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 158 forward: 37288.97, 33374.29, 5783.65
    test 159 name: Test
    test 160 reverse: 33.3, 44.4, 6000.0
    test 161 name: Test
    test 162 name: Paris
    test 163 Paris: 48.833, 2.333, 0.0
    test 164 forward: -37518.64, 229949.65, -4260.43
    test 165 name: Calais
    test 166 reverse: 50.9, 1.8, -0.0
    test 167 name: Paris
    test 168 reverse: -38000.0, 230000.0, -4000.0
    test 169 reverse: 50.9, 1.79, 264.92
    test 170 forward: -38223.7, 229964.2, -4000.0
    test 171 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 172 Matterhorn: (45.976, 7.658, 4531.01)
    test 173 xyz: (-7134.8, -4556.3, 2852.4)
    test 174 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 175 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 176 _local2ecef: Ecef9Tuple
    test 177 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 178 _ecef2local: Local9Tuple
    test 179 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 180 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 181 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 182 Ned: [-4556.3, -7134.8, -2852.4]
    test 183 Enu: [-7134.8, -4556.3, 2852.4]
    test 184 Ned: [-4556.3, -7134.8, -2852.4]
    test 185 hfov: 90.0
    test 186 vfov: 90.0
    test 187 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 188 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 189 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 190 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 191 Ltp: {'ecef': EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='')}
    test 192 name: Test
    test 193 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 194 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 195 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 196 forward: 37288.97, 33374.29, 5783.65
    test 197 name: Test
    test 198 reverse: 33.3, 44.4, 6000.0
    test 199 name: Test
    test 200 name: Paris
    test 201 Paris: 48.833, 2.333, 0.0
    test 202 forward: -37518.64, 229949.65, -4260.43
    test 203 name: Calais
    test 204 reverse: 50.9, 1.8, -0.0
    test 205 name: Paris
    test 206 reverse: -38000.0, 230000.0, -4000.0
    test 207 reverse: 50.9, 1.79, 264.92
    test 208 forward: -38223.7, 229964.2, -4000.0
    test 209 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 210 Matterhorn: (45.976, 7.658, 4531.01)
    test 211 xyz: (-7134.8, -4556.3, 2852.4)
    test 212 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 213 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 214 _local2ecef: Ecef9Tuple
    test 215 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009609, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 216 _ecef2local: Local9Tuple
    test 217 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 218 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 219 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 220 Ned: [-4556.3, -7134.8, -2852.4]
    test 221 Enu: [-7134.8, -4556.3, 2852.4]
    test 222 Ned: [-4556.3, -7134.8, -2852.4]
    test 223 hfov: 90.0
    test 224 vfov: 90.0
    test 225 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 226 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 227 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 228 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 229 Ltp: {'ecef': EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='')}
    test 230 name: Test
    test 231 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 232 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 233 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 234 forward: 37288.97, 33374.29, 5783.65
    test 235 name: Test
    test 236 reverse: 33.3, 44.4, 6000.0
    test 237 name: Test
    test 238 name: Paris
    test 239 Paris: 48.833, 2.333, 0.0
    test 240 forward: -37518.64, 229949.65, -4260.43
    test 241 name: Calais
    test 242 reverse: 50.9, 1.8, -0.0
    test 243 name: Paris
    test 244 reverse: -38000.0, 230000.0, -4000.0
    test 245 reverse: 50.9, 1.79, 264.92
    test 246 forward: -38223.7, 229964.2, -4000.0
    test 247 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 248 Matterhorn: (45.976, 7.658, 4531.01)
    test 249 xyz: (-7134.8, -4556.3, 2852.4)
    test 250 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 251 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 252 _local2ecef: Ecef9Tuple
    test 253 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 254 _ecef2local: Local9Tuple
    test 255 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 256 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 257 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 258 Ned: [-4556.3, -7134.8, -2852.4]
    test 259 Enu: [-7134.8, -4556.3, 2852.4]
    test 260 Ned: [-4556.3, -7134.8, -2852.4]
    test 261 hfov: 90.0
    test 262 vfov: 90.0
    test 263 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 264 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 265 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 266 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 267 Ltp: {'ecef': EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='')}
    test 268 name: Test
    test 269 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 270 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 271 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 272 forward: 37288.97, 33374.29, 5783.65
    test 273 name: Test
    test 274 reverse: 33.33, 44.4, 5998.84  FAILED, KNOWN, expected 33.3, 44.4, 6000.0
    test 275 name: Test
    test 276 name: Paris
    test 277 Paris: 48.833, 2.333, 0.0
    test 278 forward: -37518.64, 229949.65, -4260.43
    test 279 name: Calais
    test 280 reverse: 51.01, 1.8, -11.8  FAILED, KNOWN, expected 50.9, 1.8, -0.0
    test 281 name: Paris
    test 282 reverse: -38000.0, 230000.0, -4000.0
    test 283 reverse: 51.01, 1.79, 253.12  FAILED, KNOWN, expected 50.9, 1.79, 264.92
    test 284 forward: -38223.7, 229964.2, -4000.0
    test 285 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 286 Matterhorn: (46.06, 7.658, 4524.116)  FAILED, KNOWN, expected (45.976, 7.658, 4531.01)
    test 287 xyz: (-7124.0, 4817.7, 2845.3)  FAILED, KNOWN, expected (-7134.8, -4556.3, 2852.4)
    test 288 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 289 _local2ecef: (4403757.602, 592124.536, 4566652.082, 46.06, 7.658, 4524.116, 7, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 290 _local2ecef: Ecef9Tuple
    test 291 _ecef2local: (-7134.8, -4556.3, 2852.4, 46.06, 7.658, 4524.116, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=46.060275, lon=7.657999, height=4524.115631, C=7, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 292 _ecef2local: Local9Tuple
    test 293 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 294 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 295 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 296 Ned: [-4556.3, -7134.8, -2852.4]
    test 297 Enu: [-7134.8, -4556.3, 2852.4]
    test 298 Ned: [-4556.3, -7134.8, -2852.4]
    test 299 hfov: 90.0
    test 300 vfov: 90.0
    test 301 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 302 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 303 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 304 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 305 Ltp: {'ecef': EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name='')}
    test 306 name: Test
    test 307 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 308 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 309 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 310 forward: 37288.97, 33374.29, 5783.65
    test 311 name: Test
    test 312 reverse: 33.3, 44.4, 6000.0
    test 313 name: Test
    test 314 name: Paris
    test 315 Paris: 48.833, 2.333, 0.0
    test 316 forward: -37518.64, 229949.65, -4260.43
    test 317 name: Calais
    test 318 reverse: 50.9, 1.8, -0.0
    test 319 name: Paris
    test 320 reverse: -38000.0, 230000.0, -4000.0
    test 321 reverse: 50.9, 1.79, 264.92
    test 322 forward: -38223.7, 229964.2, -4000.0
    test 323 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 324 Matterhorn: (45.976, 7.658, 4531.01)
    test 325 xyz: (-7134.8, -4556.3, 2852.4)
    test 326 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 327 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 328 _local2ecef: Ecef9Tuple
    test 329 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 330 _ecef2local: Local9Tuple
    test 331 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 332 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 333 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 334 Ned: [-4556.3, -7134.8, -2852.4]
    test 335 Enu: [-7134.8, -4556.3, 2852.4]
    test 336 Ned: [-4556.3, -7134.8, -2852.4]
    test 337 hfov: 90.0
    test 338 vfov: 90.0
    test 339 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 340 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 341 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 342 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    51 of 342 testLtp.py tests (14.9%) FAILED, incl. 41 KNOWN plus 10 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 68.349 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testLtpTuples.py

    testing testLtpTuples.py 21.04.17

    test 1 Aer.toRepr: [A:60.0°, E:40.0°, R:1000.0]
    test 2 Aer.toStr: [60.0, 40.0, 1000.0]
    test 3 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 4 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 5 Aer.xyzLocal.toEnu: [663.41, 383.02, 642.79]
    test 6 Enu.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 7 Aer.xyzLocal.toNed: [383.02, 663.41, -642.79]
    test 8 Ned.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 9 Aer.xyzLocal.toXyz: [663.41, 383.02, 642.79]
    test 10 Xyz.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 11 Aer.toCartesian: [4397663.96, 599165.33, 4568492.25]
    test 12 Cartesian.toLocal Aer: [60.0, 40.0, 1000.0]
    test 13 Aer.toLatLon: 46°01′13.6″N, 007°45′30.83″E, +2315.83m
    test 14 LatLon.toLocal Aer: [60.0, 40.0, 1000.0]
    test 15 Aer.azimuth: 60.0
    test 16 Aer.elevation: 40.0
    test 17 Aer.slantrange: 1000.0
    test 18 Aer.groundrange: 766.044
    test 19 Aer.east: 663.414
    test 20 Aer.north: 383.022
    test 21 Aer.up: 642.788
    test 22 Aer.down: -642.788
    test 23 Aer.x: 663.414
    test 24 Aer.y: 383.022
    test 25 Aer.z: 642.788
    test 26 Aer.xyz: 663.414, 383.022, 642.788

    test 27 Enu.toRepr: [E:100.0, N:200.0, U:1000.0]
    test 28 Enu.toStr: [100.0, 200.0, 1000.0]
    test 29 Enu.xyzLocal.toAer: [26.57, 77.4, 1024.7]
    test 30 Aer.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 31 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 32 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 33 Enu.xyzLocal.toNed: [200.0, 100.0, -1000.0]
    test 34 Ned.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 35 Enu.xyzLocal.toXyz: [100.0, 200.0, 1000.0]
    test 36 Xyz.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 37 Enu.toCartesian: [4398116.23, 598658.27, 4568622.18]
    test 38 Cartesian.toLocal Enu: [100.0, 200.0, 1000.0]
    test 39 Enu.toLatLon: 46°01′07.67″N, 007°45′04.65″E, +2673.00m
    test 40 LatLon.toLocal Enu: [100.0, 200.0, 1000.0]
    test 41 Enu.azimuth: 26.565
    test 42 Enu.elevation: 77.396
    test 43 Enu.slantrange: 1024.695
    test 44 Enu.groundrange: 223.607
    test 45 Enu.east: 100.0
    test 46 Enu.north: 200.0
    test 47 Enu.up: 1000.0
    test 48 Enu.down: -1000.0
    test 49 Enu.x: 100.0
    test 50 Enu.y: 200.0
    test 51 Enu.z: 1000.0
    test 52 Enu.xyz: 100.0, 200.0, 1000.0

    test 53 Ned.toRepr: [N:200.0, E:100.0, D:1000.0]
    test 54 Ned.toStr: [200.0, 100.0, 1000.0]
    test 55 Ned.xyzLocal.toAer: [26.57, -77.4, 1024.7]
    test 56 Aer.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 57 Ned.xyzLocal.toEnu: [100.0, 200.0, -1000.0]
    test 58 Enu.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 59 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 60 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 61 Ned.xyzLocal.toXyz: [100.0, 200.0, -1000.0]
    test 62 Xyz.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 63 Ned.toCartesian: [4396740.02, 598470.98, 4567183.09]
    test 64 Cartesian.toLocal Ned: [200.0, 100.0, 1000.0]
    test 65 Ned.toLatLon: 46°01′07.68″N, 007°45′04.65″E, +673.00m
    test 66 LatLon.toLocal Ned: [200.0, 100.0, 1000.0]
    test 67 Ned.azimuth: 26.565
    test 68 Ned.elevation: -77.396
    test 69 Ned.slantrange: 1024.695
    test 70 Ned.groundrange: 223.607
    test 71 Ned.east: 100.0
    test 72 Ned.north: 200.0
    test 73 Ned.up: -1000.0
    test 74 Ned.down: 1000.0
    test 75 Ned.x: 100.0
    test 76 Ned.y: 200.0
    test 77 Ned.z: -1000.0
    test 78 Ned.xyz: 100.0, 200.0, -1000.0

    test 79 Xyz.toRepr: [X:10.0, Y:20.0, Z:100.0]
    test 80 Xyz.toStr: [10.0, 20.0, 100.0]
    test 81 Xyz.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 82 Aer.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 83 Xyz.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 84 Enu.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 85 Xyz.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 86 Ned.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 87 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 88 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 89 Xyz.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 90 Cartesian.toLocal Xyz: [10.0, 20.0, 100.0]
    test 91 Xyz.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 92 LatLon.toLocal Xyz: [10.0, 20.0, 100.0]
    test 93 Xyz.azimuth: 26.565
    test 94 Xyz.elevation: 77.396
    test 95 Xyz.slantrange: 102.47
    test 96 Xyz.groundrange: 22.361
    test 97 Xyz.east: 10.0
    test 98 Xyz.north: 20.0
    test 99 Xyz.up: 100.0
    test 100 Xyz.down: -100.0
    test 101 Xyz.x: 10.0
    test 102 Xyz.y: 20.0
    test 103 Xyz.z: 100.0
    test 104 Xyz.xyz: 10.0, 20.0, 100.0

    test 105 Local9Tuple.toRepr: Local9Tuple(x=10.0, y=20.0, z=100.0, lat=46.02, lon=7.75, height=1773.0, ltp=Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.0033640 ...
    test 106 Local9Tuple.toStr: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0. ...
    test 107 Local9Tuple.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 108 Aer.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0. ...
    test 109 Local9Tuple.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 110 Enu.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0. ...
    test 111 Local9Tuple.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 112 Ned.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0. ...
    test 113 Local9Tuple.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 114 Xyz.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0. ...
    test 115 Local9Tuple.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 116 Local9Tuple.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 117 Local9Tuple.azimuth: 26.565
    test 118 Local9Tuple.elevation: 77.396
    test 119 Local9Tuple.slantrange: 102.47
    test 120 Local9Tuple.groundrange: 22.361
    test 121 Local9Tuple.east: 10.0
    test 122 Local9Tuple.north: 20.0
    test 123 Local9Tuple.up: 100.0
    test 124 Local9Tuple.down: -100.0
    test 125 Local9Tuple.x: 10.0
    test 126 Local9Tuple.y: 20.0
    test 127 Local9Tuple.z: 100.0
    test 128 Local9Tuple.xyz: 10.0, 20.0, 100.0
    test 129 Local9Tuple.lat: 46.02
    test 130 Local9Tuple.lon: 7.75
    test 131 Local9Tuple.latlon: 46.02, 7.75
    test 132 Local9Tuple.latlonheight: 46.02, 7.75, 1773.0
    test 133 Local9Tuple.phi: 0.803
    test 134 Local9Tuple.lam: 0.135
    test 135 Local9Tuple.philam: 0.803, 0.135
    test 136 Local9Tuple.philamheight: 0.803, 0.135, 1773.0

    all 136 testLtpTuples.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 24.525 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testMgrs.py

    testing testMgrs.py 20.06.19 (module pygeodesy.mgrs 21.06.19)
    test 1 Mgrs1: 42S XD 09705 38646
    test 2 Mgrs1: [Z:42S, G:XD, E:09705, N:38646]
    test 3 Mgrs2: 42S XD 19705 08646
    test 4 Mgrs2: [Z:42S, G:XD, E:19705, N:08646]
    test 5 Mgrs3: 42S XD 19000 38000
    test 6 Mgrs3: [Z:42S, G:XD, E:19000, N:38000]
    test 7 Mgrs4: 31U DQ 48251 11932
    test 8 Mgrs4: [Z:31U, G:DQ, E:48251, N:11932]
    test 9 Mgrs5: 31U DQ 48251 11932
    test 10 Mgrs5: [Z:31U, G:DQ, E:48251, N:11932]
    test 11 Mgrs6: 31U DQ 48251 11932
    test 12 Mgrs6: [Z:31U, G:DQ, E:48251, N:11932]
    test 13 Mgrs7: 31U DQ 48251 11932
    test 14 Mgrs7: [Z:31U, G:DQ, E:48251, N:11932]
    test 15 Mgrs8: 31 N 431000 4582000
    test 16 Mgrs8: (41.38657, 2.174726, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.54564, 0.999659)
    test 17 Mgrs8: 31 N 431500 4582500
    test 18 Mgrs8: 31T DF 31000 82000
    test 19 Mgrs8: 41.391116°N, 002.180649°E
    test 20 Mgrs8: 31T DF 31000 82000
    test 21 Mgrs9: 31U DQ 48251 11932
    test 22 Mgrs9: [Z:31U, G:DQ, E:48251, N:11932]
    test 23 toUtm1: 31 N 448251 5411932
    test 24 toUtm1: [Z:31U, H:N, E:448251, N:5411932]
    test 25 toMgrs1: 31U DQ 48251 11932
    test 26 toMgrs1: [Z:31U, G:DQ, E:48251, N:11932]
    test 27 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')  FAILED, KNOWN, expected (31, 'N', 448251.0, 5411932.0)
    test 28 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')
    test 29 easting: 48251.0
    test 30 northing: 11932.0
    test 31 en100k: DQ
    test 32 digraph: DQ
    test 33 zone: 31
    test 34 band: U
    test 35 bandLatitude: 48
    test 36 toMgrs: 31U DQ 48251 11932
    test 37 toMgrs(None): Mgrs6Tuple
    test 38 toUtm(60.0°N, 001.0°E).toMgrs: 31V CG 88455 53097
    test 39 toUtm(60.0°N, 003.0°E).toMgrs: 32V JM 65640 66593
    test 40 toUtm(60.0°N, 009.0°E).toMgrs: 32V NM 00000 51411
    test 41 toUtm(76.0°N, 001.0°E).toMgrs: 31X DE 45999 36099
    test 42 toUtm(76.0°N, 013.0°E).toMgrs: 33X VE 45999 36099
    test 43 toUtm(76.0°N, 025.0°E).toMgrs: 35X ME 45999 36099
    test 44 toUtm(76.0°N, 037.0°E).toMgrs: 37X DE 45999 36099

    1 of 44 testMgrs.py tests (2.3%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 15.128 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testModules.py

    testing testModules.py 21.05.28

    testModule(pygeodesy, 21.07.27)
    test 1 pygeodesy.Aer() class (pygeodesy.ltpTuples): True
    test 2 pygeodesy.Aer4Tuple() class (pygeodesy.ltpTuples): True
    test 3 pygeodesy.Albers7Tuple() class (pygeodesy.albers): True
    test 4 pygeodesy.AlbersEqualArea() class (pygeodesy.albers): True
    test 5 pygeodesy.AlbersEqualArea2() class (pygeodesy.albers): True
    test 6 pygeodesy.AlbersEqualArea4() class (pygeodesy.albers): True
    test 7 pygeodesy.AlbersEqualAreaCylindrical() class (pygeodesy.albers): True
    test 8 pygeodesy.AlbersEqualAreaNorth() class (pygeodesy.albers): True
    test 9 pygeodesy.AlbersEqualAreaSouth() class (pygeodesy.albers): True
    test 10 pygeodesy.AlbersError() class (pygeodesy.albers): True
    test 11 pygeodesy.Azimuthal7Tuple() class (pygeodesy.azimuthal): True
    test 12 pygeodesy.AzimuthalError() class (pygeodesy.azimuthal): True
    test 13 pygeodesy.Band() class (pygeodesy.units): True
    test 14 pygeodesy.Bearing() class (pygeodesy.units): True
    test 15 pygeodesy.Bearing2Tuple() class (pygeodesy.namedTuples): True
    test 16 pygeodesy.Bearing_() class (pygeodesy.units): True
    test 17 pygeodesy.Bool() class (pygeodesy.units): True
    test 18 pygeodesy.Bounds2Tuple() class (pygeodesy.namedTuples): True
    test 19 pygeodesy.Bounds4Tuple() class (pygeodesy.namedTuples): True
    test 20 pygeodesy.CSSError() class (pygeodesy.css): True
    test 21 pygeodesy.Caps class pygeodesy.geodesicx.gxbases.Caps (pygeodesy.geodesicx.gxbases): True
    test 22 pygeodesy.CassiniSoldner() class (pygeodesy.css): True
    test 23 pygeodesy.Circle4Tuple() class (pygeodesy.ellipsoids): True
    test 24 pygeodesy.Circum3Tuple() class (pygeodesy.vector3d): True
    test 25 pygeodesy.ClipCS3Tuple() class (pygeodesy.deprecated): True
    test 26 pygeodesy.ClipCS4Tuple() class (pygeodesy.clipy): True
    test 27 pygeodesy.ClipError() class (pygeodesy.clipy): True
    test 28 pygeodesy.ClipLB6Tuple() class (pygeodesy.clipy): True
    test 29 pygeodesy.ClipSH3Tuple() class (pygeodesy.clipy): True
    test 30 pygeodesy.Conic() class (pygeodesy.lcc): True
    test 31 pygeodesy.Conics class pygeodesy.lcc.Conics (pygeodesy.lcc): True
    test 32 pygeodesy.CrossError() class (pygeodesy.errors): True
    test 33 pygeodesy.Css() class (pygeodesy.css): True
    test 34 pygeodesy.Curvature2Tuple() class (pygeodesy.ellipsoids): True
    test 35 pygeodesy.DIG int: True
    test 36 pygeodesy.Datum() class (pygeodesy.datums): True
    test 37 pygeodesy.Datums class pygeodesy.datums.Datums (pygeodesy.datums): True
    test 38 pygeodesy.Degrees() class (pygeodesy.units): True
    test 39 pygeodesy.Degrees2() class (pygeodesy.units): True
    test 40 pygeodesy.Degrees_() class (pygeodesy.units): True
    test 41 pygeodesy.DeprecationWarnings() function (pygeodesy.props): True
    test 42 pygeodesy.Destination2Tuple() class (pygeodesy.namedTuples): True
    test 43 pygeodesy.Destination3Tuple() class (pygeodesy.namedTuples): True
    test 44 pygeodesy.Direct9Tuple() class (pygeodesy.karney): True
    test 45 pygeodesy.Distance() class (pygeodesy.units): True
    test 46 pygeodesy.Distance2Tuple() class (pygeodesy.namedTuples): True
    test 47 pygeodesy.Distance3Tuple() class (pygeodesy.namedTuples): True
    test 48 pygeodesy.Distance4Tuple() class (pygeodesy.namedTuples): True
    test 49 pygeodesy.Distance_() class (pygeodesy.units): True
    test 50 pygeodesy.EPS float: True
    test 51 pygeodesy.EPS0 float: True
    test 52 pygeodesy.EPS02 float: True
    test 53 pygeodesy.EPS1 float: True
    test 54 pygeodesy.EPS1_2 float: True
    test 55 pygeodesy.EPS2 float: True
    test 56 pygeodesy.EPS4 float: True
    test 57 pygeodesy.EPSGError() class (pygeodesy.epsg): True
    test 58 pygeodesy.EPS_2 float: True
    test 59 pygeodesy.ETMError() class (pygeodesy.etm): True
    test 60 pygeodesy.EasNor2Tuple() class (pygeodesy.namedTuples): True
    test 61 pygeodesy.EasNor3Tuple() class (pygeodesy.namedTuples): True
    test 62 pygeodesy.EasNorAziRk4Tuple() class (pygeodesy.css): True
    test 63 pygeodesy.EasNorExact4Tuple() class (pygeodesy.etm): True
    test 64 pygeodesy.EasNorRadius3Tuple() class (pygeodesy.webmercator): True
    test 65 pygeodesy.Easting() class (pygeodesy.units): True
    test 66 pygeodesy.Ecef9Tuple() class (pygeodesy.ecef): True
    test 67 pygeodesy.EcefCartesian() class (pygeodesy.deprecated): True
    test 68 pygeodesy.EcefError() class (pygeodesy.ecef): True
    test 69 pygeodesy.EcefFarrell21() class (pygeodesy.ecef): True
    test 70 pygeodesy.EcefFarrell22() class (pygeodesy.ecef): True
    test 71 pygeodesy.EcefKarney() class (pygeodesy.ecef): True
    test 72 pygeodesy.EcefMatrix() class (pygeodesy.ecef): True
    test 73 pygeodesy.EcefSudano() class (pygeodesy.ecef): True
    test 74 pygeodesy.EcefVeness() class (pygeodesy.ecef): True
    test 75 pygeodesy.EcefYou() class (pygeodesy.ecef): True
    test 76 pygeodesy.Elevation2Tuple() class (pygeodesy.elevations): True
    test 77 pygeodesy.Ellipsoid() class (pygeodesy.ellipsoids): True
    test 78 pygeodesy.Ellipsoid2() class (pygeodesy.ellipsoids): True
    test 79 pygeodesy.Ellipsoids class pygeodesy.ellipsoids.Ellipsoids (pygeodesy.ellipsoids): True
    test 80 pygeodesy.Elliptic() class (pygeodesy.elliptic): True
    test 81 pygeodesy.Elliptic3Tuple() class (pygeodesy.elliptic): True
    test 82 pygeodesy.EllipticError() class (pygeodesy.elliptic): True
    test 83 pygeodesy.Enu() class (pygeodesy.ltpTuples): True
    test 84 pygeodesy.Enu4Tuple() class (pygeodesy.ltpTuples): True
    test 85 pygeodesy.Epoch() class (pygeodesy.units): True
    test 86 pygeodesy.Epsg() class (pygeodesy.epsg): True
    test 87 pygeodesy.Equidistant() class (pygeodesy.azimuthal): True
    test 88 pygeodesy.EquidistantExact() class (pygeodesy.azimuthal): True
    test 89 pygeodesy.EquidistantGeodSolve() class (pygeodesy.azimuthal): True
    test 90 pygeodesy.EquidistantKarney() class (pygeodesy.azimuthal): True
    test 91 pygeodesy.Etm() class (pygeodesy.etm): True
    test 92 pygeodesy.ExactTransverseMercator() class (pygeodesy.etm): True
    test 93 pygeodesy.FIx() class (pygeodesy.units): True
    test 94 pygeodesy.F_D str: True
    test 95 pygeodesy.F_DEG str: True
    test 96 pygeodesy.F_DEG_ str: True
    test 97 pygeodesy.F_DEG__ str: True
    test 98 pygeodesy.F_DM str: True
    test 99 pygeodesy.F_DMS str: True
    test 100 pygeodesy.F_DMS_ str: True
    test 101 pygeodesy.F_DMS__ str: True
    test 102 pygeodesy.F_DM_ str: True
    test 103 pygeodesy.F_DM__ str: True
    test 104 pygeodesy.F_D_ str: True
    test 105 pygeodesy.F_D__ str: True
    test 106 pygeodesy.F_MIN str: True
    test 107 pygeodesy.F_MIN_ str: True
    test 108 pygeodesy.F_MIN__ str: True
    test 109 pygeodesy.F_RAD str: True
    test 110 pygeodesy.F_RAD_ str: True
    test 111 pygeodesy.F_RAD__ str: True
    test 112 pygeodesy.F_SEC str: True
    test 113 pygeodesy.F_SEC_ str: True
    test 114 pygeodesy.F_SEC__ str: True
    test 115 pygeodesy.F__E str: True
    test 116 pygeodesy.F__E_ str: True
    test 117 pygeodesy.F__E__ str: True
    test 118 pygeodesy.F__F str: True
    test 119 pygeodesy.F__F_ str: True
    test 120 pygeodesy.F__F__ str: True
    test 121 pygeodesy.F__G str: True
    test 122 pygeodesy.F__G_ str: True
    test 123 pygeodesy.F__G__ str: True
    test 124 pygeodesy.Fdot() class (pygeodesy.fmath): True
    test 125 pygeodesy.Feet() class (pygeodesy.units): True
    test 126 pygeodesy.Fhorner() class (pygeodesy.fmath): True
    test 127 pygeodesy.Float() class (pygeodesy.units): True
    test 128 pygeodesy.Float_() class (pygeodesy.units): True
    test 129 pygeodesy.Footprint5Tuple() class (pygeodesy.ltpTuples): True
    test 130 pygeodesy.Fpolynomial() class (pygeodesy.fmath): True
    test 131 pygeodesy.Frechet() class (pygeodesy.frechet): True
    test 132 pygeodesy.Frechet6Tuple() class (pygeodesy.frechet): True
    test 133 pygeodesy.FrechetCosineAndoyerLambert() class (pygeodesy.frechet): True
    test 134 pygeodesy.FrechetCosineForsytheAndoyerLambert() class (pygeodesy.frechet): True
    test 135 pygeodesy.FrechetCosineLaw() class (pygeodesy.frechet): True
    test 136 pygeodesy.FrechetDegrees() class (pygeodesy.frechet): True
    test 137 pygeodesy.FrechetDistanceTo() class (pygeodesy.frechet): True
    test 138 pygeodesy.FrechetEquirectangular() class (pygeodesy.frechet): True
    test 139 pygeodesy.FrechetError() class (pygeodesy.frechet): True
    test 140 pygeodesy.FrechetEuclidean() class (pygeodesy.frechet): True
    test 141 pygeodesy.FrechetExact() class (pygeodesy.frechet): True
    test 142 pygeodesy.FrechetFlatLocal() class (pygeodesy.frechet): True
    test 143 pygeodesy.FrechetFlatPolar() class (pygeodesy.frechet): True
    test 144 pygeodesy.FrechetHaversine() class (pygeodesy.frechet): True
    test 145 pygeodesy.FrechetHubeny() class (pygeodesy.frechet): True
    test 146 pygeodesy.FrechetKarney() class (pygeodesy.frechet): True
    test 147 pygeodesy.FrechetRadians() class (pygeodesy.frechet): True
    test 148 pygeodesy.FrechetThomas() class (pygeodesy.frechet): True
    test 149 pygeodesy.FrechetVincentys() class (pygeodesy.frechet): True
    test 150 pygeodesy.Frustum() class (pygeodesy.ltp): True
    test 151 pygeodesy.Fsum() class (pygeodesy.fmath): True
    test 152 pygeodesy.GARSError() class (pygeodesy.gars): True
    test 153 pygeodesy.GDict() class (pygeodesy.karney): True
    test 154 pygeodesy.Garef() class (pygeodesy.gars): True
    test 155 pygeodesy.GeodSolve12Tuple() class (pygeodesy.karney): True
    test 156 pygeodesy.GeodesicAreaExact() class (pygeodesy.geodesicx.gxarea): True
    test 157 pygeodesy.GeodesicError() class (pygeodesy.karney): True
    test 158 pygeodesy.GeodesicExact() class (pygeodesy.geodesicx.gx): True
    test 159 pygeodesy.GeodesicLineExact() class (pygeodesy.geodesicx.gx): True
    test 160 pygeodesy.GeodesicLineSolve() class (pygeodesy.geodsolve): True
    test 161 pygeodesy.GeodesicSolve() class (pygeodesy.geodsolve): True
    test 162 pygeodesy.Geohash() class (pygeodesy.geohash): True
    test 163 pygeodesy.GeohashError() class (pygeodesy.geohash): True
    test 164 pygeodesy.GeoidError() class (pygeodesy.geoids): True
    test 165 pygeodesy.GeoidG2012B() class (pygeodesy.geoids): True
    test 166 pygeodesy.GeoidHeight2Tuple() class (pygeodesy.elevations): True
    test 167 pygeodesy.GeoidHeight5Tuple() class (pygeodesy.geoids): True
    test 168 pygeodesy.GeoidKarney() class (pygeodesy.geoids): True
    test 169 pygeodesy.GeoidPGM() class (pygeodesy.geoids): True
    test 170 pygeodesy.Georef() class (pygeodesy.wgrs): True
    test 171 pygeodesy.Gnomonic() class (pygeodesy.azimuthal): True
    test 172 pygeodesy.GnomonicExact() class (pygeodesy.azimuthal): True
    test 173 pygeodesy.GnomonicGeodSolve() class (pygeodesy.azimuthal): True
    test 174 pygeodesy.GnomonicKarney() class (pygeodesy.azimuthal): True
    test 175 pygeodesy.Hausdorff() class (pygeodesy.hausdorff): True
    test 176 pygeodesy.Hausdorff6Tuple() class (pygeodesy.hausdorff): True
    test 177 pygeodesy.HausdorffCosineAndoyerLambert() class (pygeodesy.hausdorff): True
    test 178 pygeodesy.HausdorffCosineForsytheAndoyerLambert() class (pygeodesy.hausdorff): True
    test 179 pygeodesy.HausdorffCosineLaw() class (pygeodesy.hausdorff): True
    test 180 pygeodesy.HausdorffDegrees() class (pygeodesy.hausdorff): True
    test 181 pygeodesy.HausdorffDistanceTo() class (pygeodesy.hausdorff): True
    test 182 pygeodesy.HausdorffEquirectangular() class (pygeodesy.hausdorff): True
    test 183 pygeodesy.HausdorffError() class (pygeodesy.hausdorff): True
    test 184 pygeodesy.HausdorffEuclidean() class (pygeodesy.hausdorff): True
    test 185 pygeodesy.HausdorffExact() class (pygeodesy.hausdorff): True
    test 186 pygeodesy.HausdorffFlatLocal() class (pygeodesy.hausdorff): True
    test 187 pygeodesy.HausdorffFlatPolar() class (pygeodesy.hausdorff): True
    test 188 pygeodesy.HausdorffHaversine() class (pygeodesy.hausdorff): True
    test 189 pygeodesy.HausdorffHubeny() class (pygeodesy.hausdorff): True
    test 190 pygeodesy.HausdorffKarney() class (pygeodesy.hausdorff): True
    test 191 pygeodesy.HausdorffRadians() class (pygeodesy.hausdorff): True
    test 192 pygeodesy.HausdorffThomas() class (pygeodesy.hausdorff): True
    test 193 pygeodesy.HausdorffVincentys() class (pygeodesy.hausdorff): True
    test 194 pygeodesy.Height() class (pygeodesy.units): True
    test 195 pygeodesy.HeightCubic() class (pygeodesy.heights): True
    test 196 pygeodesy.HeightError() class (pygeodesy.heights): True
    test 197 pygeodesy.HeightIDW() class (pygeodesy.deprecated): True
    test 198 pygeodesy.HeightIDW2() class (pygeodesy.deprecated): True
    test 199 pygeodesy.HeightIDW3() class (pygeodesy.deprecated): True
    test 200 pygeodesy.HeightIDWcosineAndoyerLambert() class (pygeodesy.heights): True
    test 201 pygeodesy.HeightIDWcosineForsytheAndoyerLambert() class (pygeodesy.heights): True
    test 202 pygeodesy.HeightIDWcosineLaw() class (pygeodesy.heights): True
    test 203 pygeodesy.HeightIDWdistanceTo() class (pygeodesy.heights): True
    test 204 pygeodesy.HeightIDWequirectangular() class (pygeodesy.heights): True
    test 205 pygeodesy.HeightIDWeuclidean() class (pygeodesy.heights): True
    test 206 pygeodesy.HeightIDWflatLocal() class (pygeodesy.heights): True
    test 207 pygeodesy.HeightIDWflatPolar() class (pygeodesy.heights): True
    test 208 pygeodesy.HeightIDWhaversine() class (pygeodesy.heights): True
    test 209 pygeodesy.HeightIDWhubeny() class (pygeodesy.heights): True
    test 210 pygeodesy.HeightIDWkarney() class (pygeodesy.heights): True
    test 211 pygeodesy.HeightIDWthomas() class (pygeodesy.heights): True
    test 212 pygeodesy.HeightIDWvincentys() class (pygeodesy.heights): True
    test 213 pygeodesy.HeightLSQBiSpline() class (pygeodesy.heights): True
    test 214 pygeodesy.HeightLinear() class (pygeodesy.heights): True
    test 215 pygeodesy.HeightSmoothBiSpline() class (pygeodesy.heights): True
    test 216 pygeodesy.INF float: True
    test 217 pygeodesy.Int() class (pygeodesy.units): True
    test 218 pygeodesy.Int_() class (pygeodesy.units): True
    test 219 pygeodesy.Intersection3Tuple() class (pygeodesy.namedTuples): True
    test 220 pygeodesy.IntersectionError() class (pygeodesy.errors): True
    test 221 pygeodesy.Inverse10Tuple() class (pygeodesy.karney): True
    test 222 pygeodesy.LCCError() class (pygeodesy.lcc): True
    test 223 pygeodesy.Lam() class (pygeodesy.units): True
    test 224 pygeodesy.Lam_() class (pygeodesy.units): True
    test 225 pygeodesy.LambertEqualArea() class (pygeodesy.azimuthal): True
    test 226 pygeodesy.Lat() class (pygeodesy.units): True
    test 227 pygeodesy.LatLon2PsxyIter() class (pygeodesy.iters): True
    test 228 pygeodesy.LatLon2Tuple() class (pygeodesy.namedTuples): True
    test 229 pygeodesy.LatLon2psxy() class (pygeodesy.points): True
    test 230 pygeodesy.LatLon3Tuple() class (pygeodesy.namedTuples): True
    test 231 pygeodesy.LatLon4Tuple() class (pygeodesy.namedTuples): True
    test 232 pygeodesy.LatLonAziRk4Tuple() class (pygeodesy.css): True
    test 233 pygeodesy.LatLonDatum3Tuple() class (pygeodesy.namedTuples): True
    test 234 pygeodesy.LatLonDatum5Tuple() class (pygeodesy.namedTuples): True
    test 235 pygeodesy.LatLonExact4Tuple() class (pygeodesy.etm): True
    test 236 pygeodesy.LatLonPrec3Tuple() class (pygeodesy.namedTuples): True
    test 237 pygeodesy.LatLonPrec5Tuple() class (pygeodesy.namedTuples): True
    test 238 pygeodesy.LatLon_() class (pygeodesy.points): True
    test 239 pygeodesy.Lat_() class (pygeodesy.units): True
    test 240 pygeodesy.LazyImportError() class (pygeodesy.lazily): True
    test 241 pygeodesy.Lcc() class (pygeodesy.lcc): True
    test 242 pygeodesy.LenError() class (pygeodesy.errors): True
    test 243 pygeodesy.LimitError() class (pygeodesy.errors): True
    test 244 pygeodesy.Local9Tuple() class (pygeodesy.ltpTuples): True
    test 245 pygeodesy.LocalCartesian() class (pygeodesy.ltp): True
    test 246 pygeodesy.LocalError() class (pygeodesy.ltp): True
    test 247 pygeodesy.Lon() class (pygeodesy.units): True
    test 248 pygeodesy.Lon_() class (pygeodesy.units): True
    test 249 pygeodesy.Ltp() class (pygeodesy.ltp): True
    test 250 pygeodesy.MANTIS int: True
    test 251 pygeodesy.MANT_DIG int: True
    test 252 pygeodesy.MAX float: True
    test 253 pygeodesy.MGRSError() class (pygeodesy.mgrs): True
    test 254 pygeodesy.MIN float: True
    test 255 pygeodesy.Meeus2Tuple() class (pygeodesy.vector3d): True
    test 256 pygeodesy.Meter() class (pygeodesy.units): True
    test 257 pygeodesy.Meter2() class (pygeodesy.units): True
    test 258 pygeodesy.Meter3() class (pygeodesy.units): True
    test 259 pygeodesy.Meter_() class (pygeodesy.units): True
    test 260 pygeodesy.Mgrs() class (pygeodesy.mgrs): True
    test 261 pygeodesy.Mgrs4Tuple() class (pygeodesy.mgrs): True
    test 262 pygeodesy.Mgrs6Tuple() class (pygeodesy.mgrs): True
    test 263 pygeodesy.NAN float: True
    test 264 pygeodesy.NEG0 float: True
    test 265 pygeodesy.NN str (pygeodesy.interns): True
    test 266 pygeodesy.NearestOn3Tuple() class (pygeodesy.namedTuples): True
    test 267 pygeodesy.NearestOn5Tuple() class (pygeodesy.points): True
    test 268 pygeodesy.Ned() class (pygeodesy.ltpTuples): True
    test 269 pygeodesy.Ned3Tuple() class (pygeodesy.ellipsoidalNvector): True
    test 270 pygeodesy.Ned4Tuple() class (pygeodesy.ltpTuples): True
    test 271 pygeodesy.Neighbors8Dict() class (pygeodesy.geohash): True
    test 272 pygeodesy.Northing() class (pygeodesy.units): True
    test 273 pygeodesy.NumPyError() class (pygeodesy.errors): True
    test 274 pygeodesy.Number_() class (pygeodesy.units): True
    test 275 pygeodesy.Numpy2LatLon() class (pygeodesy.points): True
    test 276 pygeodesy.OK str: True
    test 277 pygeodesy.OSGRError() class (pygeodesy.osgr): True
    test 278 pygeodesy.Orthographic() class (pygeodesy.azimuthal): True
    test 279 pygeodesy.Osgr() class (pygeodesy.osgr): True
    test 280 pygeodesy.PGMError() class (pygeodesy.geoids): True
    test 281 pygeodesy.PI float: True
    test 282 pygeodesy.PI2 float: True
    test 283 pygeodesy.PI3 float: True
    test 284 pygeodesy.PI3_2 float: True
    test 285 pygeodesy.PI4 float: True
    test 286 pygeodesy.PI_2 float: True
    test 287 pygeodesy.PI_4 float: True
    test 288 pygeodesy.ParseError() class (pygeodesy.errors): True
    test 289 pygeodesy.Phi() class (pygeodesy.units): True
    test 290 pygeodesy.PhiLam2Tuple() class (pygeodesy.namedTuples): True
    test 291 pygeodesy.PhiLam3Tuple() class (pygeodesy.namedTuples): True
    test 292 pygeodesy.PhiLam4Tuple() class (pygeodesy.namedTuples): True
    test 293 pygeodesy.Phi_() class (pygeodesy.units): True
    test 294 pygeodesy.Point3Tuple() class (pygeodesy.namedTuples): True
    test 295 pygeodesy.Points2Tuple() class (pygeodesy.namedTuples): True
    test 296 pygeodesy.PointsError() class (pygeodesy.errors): True
    test 297 pygeodesy.PointsIter() class (pygeodesy.iters): True
    test 298 pygeodesy.PolygonArea() class (pygeodesy.geodesicx.gxarea): True
    test 299 pygeodesy.Precision_() class (pygeodesy.units): True
    test 300 pygeodesy.Property() class (pygeodesy.props): True
    test 301 pygeodesy.Property_RO() class (pygeodesy.props): True
    test 302 pygeodesy.R_FM float (pygeodesy.units): True
    test 303 pygeodesy.R_GM float (pygeodesy.units): True
    test 304 pygeodesy.R_KM float (pygeodesy.units): True
    test 305 pygeodesy.R_M float (pygeodesy.units): True
    test 306 pygeodesy.R_MA float (pygeodesy.units): True
    test 307 pygeodesy.R_MB float (pygeodesy.units): True
    test 308 pygeodesy.R_NM float (pygeodesy.units): True
    test 309 pygeodesy.R_SM float (pygeodesy.units): True
    test 310 pygeodesy.R_VM float (pygeodesy.units): True
    test 311 pygeodesy.Radians() class (pygeodesy.units): True
    test 312 pygeodesy.Radians2() class (pygeodesy.units): True
    test 313 pygeodesy.Radians_() class (pygeodesy.units): True
    test 314 pygeodesy.Radical2Tuple() class (pygeodesy.formy): True
    test 315 pygeodesy.Radius() class (pygeodesy.units): True
    test 316 pygeodesy.Radius_() class (pygeodesy.units): True
    test 317 pygeodesy.RangeError() class (pygeodesy.errors): True
    test 318 pygeodesy.RefFrame() class (pygeodesy.trf): True
    test 319 pygeodesy.RefFrameError() class (pygeodesy.deprecated): True
    test 320 pygeodesy.RefFrames class pygeodesy.trf.RefFrames (pygeodesy.trf): True
    test 321 pygeodesy.Resolutions2Tuple() class (pygeodesy.geohash): True
    test 322 pygeodesy.S_DEG str: True
    test 323 pygeodesy.S_MIN str: True
    test 324 pygeodesy.S_RAD str (pygeodesy.interns): True
    test 325 pygeodesy.S_SEC str: True
    test 326 pygeodesy.S_SEP str (pygeodesy.interns): True
    test 327 pygeodesy.Scalar() class (pygeodesy.units): True
    test 328 pygeodesy.Scalar_() class (pygeodesy.units): True
    test 329 pygeodesy.SciPyError() class (pygeodesy.errors): True
    test 330 pygeodesy.SciPyWarning() class (pygeodesy.errors): True
    test 331 pygeodesy.Shape2Tuple() class (pygeodesy.points): True
    test 332 pygeodesy.Stereographic() class (pygeodesy.azimuthal): True
    test 333 pygeodesy.Str() class (pygeodesy.units): True
    test 334 pygeodesy.TRFError() class (pygeodesy.errors): True
    test 335 pygeodesy.Transform() class (pygeodesy.datums): True
    test 336 pygeodesy.Transform7Tuple() class (pygeodesy.trf): True
    test 337 pygeodesy.Transforms class pygeodesy.datums.Transforms (pygeodesy.datums): True
    test 338 pygeodesy.Triangle7Tuple() class (pygeodesy.namedTuples): True
    test 339 pygeodesy.Triangle8Tuple() class (pygeodesy.namedTuples): True
    test 340 pygeodesy.Trilaterate5Tuple() class (pygeodesy.namedTuples): True
    test 341 pygeodesy.Tuple2LatLon() class (pygeodesy.points): True
    test 342 pygeodesy.UPSError() class (pygeodesy.ups): True
    test 343 pygeodesy.UTMError() class (pygeodesy.utm): True
    test 344 pygeodesy.UTMUPSError() class (pygeodesy.utmups): True
    test 345 pygeodesy.UnitError() class (pygeodesy.errors): True
    test 346 pygeodesy.Ups() class (pygeodesy.ups): True
    test 347 pygeodesy.Utm() class (pygeodesy.utm): True
    test 348 pygeodesy.UtmUps() function (pygeodesy.utmups): True
    test 349 pygeodesy.UtmUps2Tuple() class (pygeodesy.namedTuples): True
    test 350 pygeodesy.UtmUps4Tuple() class (pygeodesy.deprecated): True
    test 351 pygeodesy.UtmUps5Tuple() class (pygeodesy.namedTuples): True
    test 352 pygeodesy.UtmUps8Tuple() class (pygeodesy.namedTuples): True
    test 353 pygeodesy.UtmUpsLatLon5Tuple() class (pygeodesy.namedTuples): True
    test 354 pygeodesy.Vector2Tuple() class (pygeodesy.namedTuples): True
    test 355 pygeodesy.Vector3Tuple() class (pygeodesy.namedTuples): True
    test 356 pygeodesy.Vector3d() class (pygeodesy.vector3d): True
    test 357 pygeodesy.Vector4Tuple() class (pygeodesy.namedTuples): True
    test 358 pygeodesy.VectorError() class (pygeodesy.errors): True
    test 359 pygeodesy.VincentyError() class (pygeodesy.ellipsoidalVincenty): True
    test 360 pygeodesy.WGRSError() class (pygeodesy.wgrs): True
    test 361 pygeodesy.WebMercatorError() class (pygeodesy.webmercator): True
    test 362 pygeodesy.Wm() class (pygeodesy.webmercator): True
    test 363 pygeodesy.Xyz4Tuple() class (pygeodesy.ltpTuples): True
    test 364 pygeodesy.XyzLocal() class (pygeodesy.ltpTuples): True
    test 365 pygeodesy.Zone() class (pygeodesy.units): True
    test 366 pygeodesy.a_b2e() function (pygeodesy.ellipsoids): True
    test 367 pygeodesy.a_b2e2() function (pygeodesy.ellipsoids): True
    test 368 pygeodesy.a_b2e22() function (pygeodesy.ellipsoids): True
    test 369 pygeodesy.a_b2e32() function (pygeodesy.ellipsoids): True
    test 370 pygeodesy.a_b2f() function (pygeodesy.ellipsoids): True
    test 371 pygeodesy.a_b2f2() function (pygeodesy.ellipsoids): True
    test 372 pygeodesy.a_b2f_() function (pygeodesy.ellipsoids): True
    test 373 pygeodesy.a_b2n() function (pygeodesy.ellipsoids): True
    test 374 pygeodesy.a_f2Tuple() class (pygeodesy.ellipsoids): True
    test 375 pygeodesy.a_f2b() function (pygeodesy.ellipsoids): True
    test 376 pygeodesy.a_f_2b() function (pygeodesy.ellipsoids): True
    test 377 pygeodesy.acos1() function (pygeodesy.utily): True
    test 378 pygeodesy.acre2ha() function (pygeodesy.utily): True
    test 379 pygeodesy.acre2m2() function (pygeodesy.utily): True
    test 380 pygeodesy.albers module: True
    test 381 pygeodesy.anStr() function (pygeodesy.deprecated): True
    test 382 pygeodesy.anstr() function (pygeodesy.streprs): True
    test 383 pygeodesy.antipode() function (pygeodesy.formy): True
    test 384 pygeodesy.antipode_() function (pygeodesy.formy): True
    test 385 pygeodesy.areaOf() function (pygeodesy.points): True
    test 386 pygeodesy.areaof() function (pygeodesy.deprecated): True
    test 387 pygeodesy.asin1() function (pygeodesy.utily): True
    test 388 pygeodesy.atan2b() function (pygeodesy.utily): True
    test 389 pygeodesy.atan2d() function (pygeodesy.utily): True
    test 390 pygeodesy.atand() function (pygeodesy.utily): True
    test 391 pygeodesy.attrs() function (pygeodesy.streprs): True
    test 392 pygeodesy.azimuthal module: True
    test 393 pygeodesy.b_f2a() function (pygeodesy.ellipsoids): True
    test 394 pygeodesy.b_f_2a() function (pygeodesy.ellipsoids): True
    test 395 pygeodesy.bases module: True
    test 396 pygeodesy.basics module: True
    test 397 pygeodesy.bearing() function (pygeodesy.formy): True
    test 398 pygeodesy.bearingDMS() function (pygeodesy.dms): True
    test 399 pygeodesy.bearing_() function (pygeodesy.formy): True
    test 400 pygeodesy.bounds() function (pygeodesy.deprecated): True
    test 401 pygeodesy.boundsOf() function (pygeodesy.points): True
    test 402 pygeodesy.callername() function (pygeodesy.named): True
    test 403 pygeodesy.cbrt() function (pygeodesy.fmath): True
    test 404 pygeodesy.cbrt2() function (pygeodesy.fmath): True
    test 405 pygeodesy.centroidOf() function (pygeodesy.points): True
    test 406 pygeodesy.chain2m() function (pygeodesy.utily): True
    test 407 pygeodesy.circle4() function (pygeodesy.utily): True
    test 408 pygeodesy.circum3() function (pygeodesy.vector3d): True
    test 409 pygeodesy.classname() function (pygeodesy.named): True
    test 410 pygeodesy.classnaming() function (pygeodesy.named): True
    test 411 pygeodesy.clipCS3() function (pygeodesy.deprecated): True
    test 412 pygeodesy.clipCS4() function (pygeodesy.clipy): True
    test 413 pygeodesy.clipDMS() function (pygeodesy.deprecated): True
    test 414 pygeodesy.clipDegrees() function (pygeodesy.dms): True
    test 415 pygeodesy.clipLB6() function (pygeodesy.clipy): True
    test 416 pygeodesy.clipRadians() function (pygeodesy.dms): True
    test 417 pygeodesy.clipSH() function (pygeodesy.clipy): True
    test 418 pygeodesy.clipSH3() function (pygeodesy.clipy): True
    test 419 pygeodesy.clipStr() function (pygeodesy.deprecated): True
    test 420 pygeodesy.clips() function (pygeodesy.basics): True
    test 421 pygeodesy.clipy module: True
    test 422 pygeodesy.compassAngle() function (pygeodesy.formy): True
    test 423 pygeodesy.compassDMS() function (pygeodesy.dms): True
    test 424 pygeodesy.compassPoint() function (pygeodesy.dms): True
    test 425 pygeodesy.copysign0() function (pygeodesy.basics): True
    test 426 pygeodesy.copytype() function (pygeodesy.basics): True
    test 427 pygeodesy.cosineAndoyerLambert() function (pygeodesy.formy): True
    test 428 pygeodesy.cosineAndoyerLambert_() function (pygeodesy.formy): True
    test 429 pygeodesy.cosineForsytheAndoyerLambert() function (pygeodesy.formy): True
    test 430 pygeodesy.cosineForsytheAndoyerLambert_() function (pygeodesy.formy): True
    test 431 pygeodesy.cosineLaw() function (pygeodesy.formy): True
    test 432 pygeodesy.cosineLaw_() function (pygeodesy.formy): True
    test 433 pygeodesy.crosserrors() function (pygeodesy.errors): True
    test 434 pygeodesy.css module: True
    test 435 pygeodesy.date2epoch() function (pygeodesy.trf): True
    test 436 pygeodesy.datum module: True
    test 437 pygeodesy.datums module: True
    test 438 pygeodesy.decodeEPSG2() function (pygeodesy.deprecated): True
    test 439 pygeodesy.degDMS() function (pygeodesy.dms): True
    test 440 pygeodesy.degrees type builtin_function_or_method (math): True
    test 441 pygeodesy.degrees180() function (pygeodesy.utily): True
    test 442 pygeodesy.degrees2grades() function (pygeodesy.utily): True
    test 443 pygeodesy.degrees2m() function (pygeodesy.utily): True
    test 444 pygeodesy.degrees360() function (pygeodesy.utily): True
    test 445 pygeodesy.degrees90() function (pygeodesy.utily): True
    test 446 pygeodesy.deprecated module: True
    test 447 pygeodesy.deprecated_Property_RO() function (pygeodesy.props): True
    test 448 pygeodesy.deprecated_class() function (pygeodesy.props): True
    test 449 pygeodesy.deprecated_function() function (pygeodesy.props): True
    test 450 pygeodesy.deprecated_method() function (pygeodesy.props): True
    test 451 pygeodesy.deprecated_property_RO() function (pygeodesy.props): True
    test 452 pygeodesy.dms module: True
    test 453 pygeodesy.ecef module: True
    test 454 pygeodesy.egmGeoidHeights() function (pygeodesy.geoids): True
    test 455 pygeodesy.elevation2() function (pygeodesy.elevations): True
    test 456 pygeodesy.elevations module: True
    test 457 pygeodesy.ellipsoidalExact module: True
    test 458 pygeodesy.ellipsoidalGeodSolve module: True
    test 459 pygeodesy.ellipsoidalKarney module: True
    test 460 pygeodesy.ellipsoidalNvector module: True
    test 461 pygeodesy.ellipsoidalVincenty module: True
    test 462 pygeodesy.ellipsoids module: True
    test 463 pygeodesy.elliptic module: True
    test 464 pygeodesy.enStr2() function (pygeodesy.deprecated): True
    test 465 pygeodesy.encodeEPSG() function (pygeodesy.deprecated): True
    test 466 pygeodesy.enstr2() function (pygeodesy.streprs): True
    test 467 pygeodesy.epoch2date() function (pygeodesy.trf): True
    test 468 pygeodesy.epsg module: True
    test 469 pygeodesy.equidistant() function (pygeodesy.azimuthal): True
    test 470 pygeodesy.equirectangular() function (pygeodesy.formy): True
    test 471 pygeodesy.equirectangular3() function (pygeodesy.deprecated): True
    test 472 pygeodesy.equirectangular_() function (pygeodesy.formy): True
    test 473 pygeodesy.errors module: True
    test 474 pygeodesy.etm module: True
    test 475 pygeodesy.euclid() function (pygeodesy.fmath): True
    test 476 pygeodesy.euclid_() function (pygeodesy.fmath): True
    test 477 pygeodesy.euclidean() function (pygeodesy.formy): True
    test 478 pygeodesy.euclidean_() function (pygeodesy.formy): True
    test 479 pygeodesy.exception_chaining() function (pygeodesy.errors): True
    test 480 pygeodesy.excessAbc() function (pygeodesy.formy): True
    test 481 pygeodesy.excessGirard() function (pygeodesy.formy): True
    test 482 pygeodesy.excessKarney() function (pygeodesy.formy): True
    test 483 pygeodesy.excessKarney_() function (pygeodesy.formy): True
    test 484 pygeodesy.excessLHuilier() function (pygeodesy.formy): True
    test 485 pygeodesy.excessQuad() function (pygeodesy.formy): True
    test 486 pygeodesy.excessQuad_() function (pygeodesy.formy): True
    test 487 pygeodesy.f2e2() function (pygeodesy.ellipsoids): True
    test 488 pygeodesy.f2e22() function (pygeodesy.ellipsoids): True
    test 489 pygeodesy.f2e32() function (pygeodesy.ellipsoids): True
    test 490 pygeodesy.f2f2() function (pygeodesy.ellipsoids): True
    test 491 pygeodesy.f2f_() function (pygeodesy.ellipsoids): True
    test 492 pygeodesy.f2n() function (pygeodesy.ellipsoids): True
    test 493 pygeodesy.fStr() function (pygeodesy.deprecated): True
    test 494 pygeodesy.fStrzs() function (pygeodesy.deprecated): True
    test 495 pygeodesy.f_2f() function (pygeodesy.ellipsoids): True
    test 496 pygeodesy.facos1() function (pygeodesy.fmath): True
    test 497 pygeodesy.false2f() function (pygeodesy.deprecated): True
    test 498 pygeodesy.falsed2f() function (pygeodesy.deprecated): True
    test 499 pygeodesy.fasin1() function (pygeodesy.fmath): True
    test 500 pygeodesy.fatan() function (pygeodesy.fmath): True
    test 501 pygeodesy.fatan1() function (pygeodesy.fmath): True
    test 502 pygeodesy.fatan2() function (pygeodesy.fmath): True
    test 503 pygeodesy.fathom2m() function (pygeodesy.utily): True
    test 504 pygeodesy.favg() function (pygeodesy.fmath): True
    test 505 pygeodesy.fdot() function (pygeodesy.fmath): True
    test 506 pygeodesy.fdot3() function (pygeodesy.fmath): True
    test 507 pygeodesy.fhorner() function (pygeodesy.fmath): True
    test 508 pygeodesy.fidw() function (pygeodesy.fmath): True
    test 509 pygeodesy.flatLocal() function (pygeodesy.formy): True
    test 510 pygeodesy.flatLocal_() function (pygeodesy.formy): True
    test 511 pygeodesy.flatPolar() function (pygeodesy.formy): True
    test 512 pygeodesy.flatPolar_() function (pygeodesy.formy): True
    test 513 pygeodesy.fmath module: True
    test 514 pygeodesy.fmean() function (pygeodesy.fmath): True
    test 515 pygeodesy.fmean_() function (pygeodesy.fmath): True
    test 516 pygeodesy.formy module: True
    test 517 pygeodesy.fpolynomial() function (pygeodesy.fmath): True
    test 518 pygeodesy.fpowers() function (pygeodesy.fmath): True
    test 519 pygeodesy.fprod() function (pygeodesy.fmath): True
    test 520 pygeodesy.fractional() function (pygeodesy.points): True
    test 521 pygeodesy.frange() function (pygeodesy.fmath): True
    test 522 pygeodesy.frechet module: True
    test 523 pygeodesy.frechet_() function (pygeodesy.frechet): True
    test 524 pygeodesy.freduce type builtin_function_or_method (_functools): True
    test 525 pygeodesy.fstr() function (pygeodesy.streprs): True
    test 526 pygeodesy.fstrzs() function (pygeodesy.streprs): True
    test 527 pygeodesy.fsum type builtin_function_or_method (math): True
    test 528 pygeodesy.fsum2() function (pygeodesy.fmath): True
    test 529 pygeodesy.fsum_() function (pygeodesy.fmath): True
    test 530 pygeodesy.ft2m() function (pygeodesy.utily): True
    test 531 pygeodesy.furlong2m() function (pygeodesy.utily): True
    test 532 pygeodesy.gars module: True
    test 533 pygeodesy.geodesicx module: True
    test 534 pygeodesy.geodsolve module: True
    test 535 pygeodesy.geohash module: True
    test 536 pygeodesy.geoidHeight2() function (pygeodesy.elevations): True
    test 537 pygeodesy.geoids module: True
    test 538 pygeodesy.gnomonic() function (pygeodesy.azimuthal): True
    test 539 pygeodesy.grades() function (pygeodesy.utily): True
    test 540 pygeodesy.grades2degrees() function (pygeodesy.utily): True
    test 541 pygeodesy.grades2radians() function (pygeodesy.utily): True
    test 542 pygeodesy.grades400() function (pygeodesy.utily): True
    test 543 pygeodesy.gx module: True
    test 544 pygeodesy.gxarea module: True
    test 545 pygeodesy.gxline module: True
    test 546 pygeodesy.halfs2() function (pygeodesy.basics): True
    test 547 pygeodesy.hausdorff module: True
    test 548 pygeodesy.hausdorff_() function (pygeodesy.hausdorff): True
    test 549 pygeodesy.haversine() function (pygeodesy.formy): True
    test 550 pygeodesy.haversine_() function (pygeodesy.formy): True
    test 551 pygeodesy.heightOf() function (pygeodesy.formy): True
    test 552 pygeodesy.heights module: True
    test 553 pygeodesy.horizon() function (pygeodesy.formy): True
    test 554 pygeodesy.hstr() function (pygeodesy.streprs): True
    test 555 pygeodesy.hubeny() function (pygeodesy.formy): True
    test 556 pygeodesy.hubeny_() function (pygeodesy.formy): True
    test 557 pygeodesy.hypot type builtin_function_or_method (math): True
    test 558 pygeodesy.hypot1() function (pygeodesy.fmath): True
    test 559 pygeodesy.hypot2() function (pygeodesy.fmath): True
    test 560 pygeodesy.hypot2_() function (pygeodesy.fmath): True
    test 561 pygeodesy.hypot3() function (pygeodesy.deprecated): True
    test 562 pygeodesy.hypot_() function (pygeodesy.fmath): True
    test 563 pygeodesy.inStr() function (pygeodesy.deprecated): True
    test 564 pygeodesy.instr() function (pygeodesy.streprs): True
    test 565 pygeodesy.interns module: True
    test 566 pygeodesy.intersection3d3() function (pygeodesy.vector3d): True
    test 567 pygeodesy.intersections2() function (pygeodesy.formy): True
    test 568 pygeodesy.isLazy type NoneType: True
    test 569 pygeodesy.isNumpy2() function (pygeodesy.iters): True
    test 570 pygeodesy.isPoints2() function (pygeodesy.iters): True
    test 571 pygeodesy.isTuple2() function (pygeodesy.iters): True
    test 572 pygeodesy.isantipode() function (pygeodesy.formy): True
    test 573 pygeodesy.isantipode_() function (pygeodesy.formy): True
    test 574 pygeodesy.isbool() function (pygeodesy.basics): True
    test 575 pygeodesy.isclass() function (inspect): True
    test 576 pygeodesy.isclockwise() function (pygeodesy.points): True
    test 577 pygeodesy.iscolinearWith() function (pygeodesy.vector3d): True
    test 578 pygeodesy.isconvex() function (pygeodesy.points): True
    test 579 pygeodesy.isconvex_() function (pygeodesy.points): True
    test 580 pygeodesy.isenclosedBy() function (pygeodesy.points): True
    test 581 pygeodesy.isenclosedby() function (pygeodesy.deprecated): True
    test 582 pygeodesy.isfinite() function (pygeodesy.basics): True
    test 583 pygeodesy.isidentifier() function (pygeodesy.basics): True
    test 584 pygeodesy.isinf type builtin_function_or_method (math): True
    test 585 pygeodesy.isint() function (pygeodesy.basics): True
    test 586 pygeodesy.iskeyword type builtin_function_or_method: True
    test 587 pygeodesy.isnan type builtin_function_or_method (math): True
    test 588 pygeodesy.isnear0() function (pygeodesy.basics): True
    test 589 pygeodesy.isneg0() function (pygeodesy.basics): True
    test 590 pygeodesy.isnon0() function (pygeodesy.basics): True
    test 591 pygeodesy.isodd() function (pygeodesy.basics): True
    test 592 pygeodesy.ispolar() function (pygeodesy.points): True
    test 593 pygeodesy.isscalar() function (pygeodesy.basics): True
    test 594 pygeodesy.issequence() function (pygeodesy.basics): True
    test 595 pygeodesy.isstr() function (pygeodesy.basics): True
    test 596 pygeodesy.issubclassof() function (pygeodesy.basics): True
    test 597 pygeodesy.iterNumpy2() function (pygeodesy.iters): True
    test 598 pygeodesy.iterNumpy2over() function (pygeodesy.iters): True
    test 599 pygeodesy.iters module: True
    test 600 pygeodesy.joined() function (pygeodesy.deprecated): True
    test 601 pygeodesy.joined_() function (pygeodesy.deprecated): True
    test 602 pygeodesy.karney module: True
    test 603 pygeodesy.latDMS() function (pygeodesy.dms): True
    test 604 pygeodesy.latlon2n_xyz() function (pygeodesy.formy): True
    test 605 pygeodesy.latlonDMS() function (pygeodesy.dms): True
    test 606 pygeodesy.lazily module: True
    test 607 pygeodesy.lcc module: True
    test 608 pygeodesy.len2() function (pygeodesy.basics): True
    test 609 pygeodesy.limiterrors() function (pygeodesy.errors): True
    test 610 pygeodesy.lonDMS() function (pygeodesy.dms): True
    test 611 pygeodesy.ltp module: True
    test 612 pygeodesy.ltpTuples module: True
    test 613 pygeodesy.luneOf() function (pygeodesy.points): True
    test 614 pygeodesy.m2NM() function (pygeodesy.utily): True
    test 615 pygeodesy.m2SM() function (pygeodesy.utily): True
    test 616 pygeodesy.m2degrees() function (pygeodesy.utily): True
    test 617 pygeodesy.m2ft() function (pygeodesy.utily): True
    test 618 pygeodesy.m2km() function (pygeodesy.utily): True
    test 619 pygeodesy.m2radians() function (pygeodesy.utily): True
    test 620 pygeodesy.m2yard() function (pygeodesy.utily): True
    test 621 pygeodesy.map1() function (pygeodesy.basics): True
    test 622 pygeodesy.map2() function (pygeodesy.basics): True
    test 623 pygeodesy.meeus2() function (pygeodesy.vector3d): True
    test 624 pygeodesy.mgrs module: True
    test 625 pygeodesy.modulename() function (pygeodesy.named): True
    test 626 pygeodesy.n2e2() function (pygeodesy.ellipsoids): True
    test 627 pygeodesy.n2f() function (pygeodesy.ellipsoids): True
    test 628 pygeodesy.n2f_() function (pygeodesy.ellipsoids): True
    test 629 pygeodesy.n_xyz2latlon() function (pygeodesy.formy): True
    test 630 pygeodesy.n_xyz2philam() function (pygeodesy.formy): True
    test 631 pygeodesy.named module: True
    test 632 pygeodesy.namedTuples module: True
    test 633 pygeodesy.nameof() function (pygeodesy.named): True
    test 634 pygeodesy.nearestOn3() function (pygeodesy.deprecated): True
    test 635 pygeodesy.nearestOn4() function (pygeodesy.deprecated): True
    test 636 pygeodesy.nearestOn5() function (pygeodesy.points): True
    test 637 pygeodesy.neg() function (pygeodesy.basics): True
    test 638 pygeodesy.neg_() function (pygeodesy.basics): True
    test 639 pygeodesy.norm2() function (pygeodesy.fmath): True
    test 640 pygeodesy.normDMS() function (pygeodesy.dms): True
    test 641 pygeodesy.norm_() function (pygeodesy.fmath): True
    test 642 pygeodesy.notImplemented() function (pygeodesy.named): True
    test 643 pygeodesy.notOverloaded() function (pygeodesy.named): True
    test 644 pygeodesy.nvector module: True
    test 645 pygeodesy.osgr module: True
    test 646 pygeodesy.pairs() function (pygeodesy.streprs): True
    test 647 pygeodesy.parse3d() function (pygeodesy.vector3d): True
    test 648 pygeodesy.parse3llh() function (pygeodesy.dms): True
    test 649 pygeodesy.parseDDDMMSS() function (pygeodesy.dms): True
    test 650 pygeodesy.parseDMS() function (pygeodesy.dms): True
    test 651 pygeodesy.parseDMS2() function (pygeodesy.dms): True
    test 652 pygeodesy.parseETM5() function (pygeodesy.etm): True
    test 653 pygeodesy.parseMGRS() function (pygeodesy.mgrs): True
    test 654 pygeodesy.parseOSGR() function (pygeodesy.osgr): True
    test 655 pygeodesy.parseRad() function (pygeodesy.dms): True
    test 656 pygeodesy.parseUPS5() function (pygeodesy.ups): True
    test 657 pygeodesy.parseUTM() function (pygeodesy.deprecated): True
    test 658 pygeodesy.parseUTM5() function (pygeodesy.utm): True
    test 659 pygeodesy.parseUTMUPS5() function (pygeodesy.utmups): True
    test 660 pygeodesy.parseWM() function (pygeodesy.webmercator): True
    test 661 pygeodesy.perimeterOf() function (pygeodesy.points): True
    test 662 pygeodesy.perimeterof() function (pygeodesy.deprecated): True
    test 663 pygeodesy.philam2n_xyz() function (pygeodesy.formy): True
    test 664 pygeodesy.points module: True
    test 665 pygeodesy.points2() function (pygeodesy.iters): True
    test 666 pygeodesy.polygon() function (pygeodesy.deprecated): True
    test 667 pygeodesy.precision() function (pygeodesy.dms): True
    test 668 pygeodesy.print_() function (pygeodesy.lazily): True
    test 669 pygeodesy.printf() function (pygeodesy.lazily): True
    test 670 pygeodesy.property_RO() class (pygeodesy.props): True
    test 671 pygeodesy.property_doc_() function (pygeodesy.props): True
    test 672 pygeodesy.props module: True
    test 673 pygeodesy.pygeodesy_abspath str: True
    test 674 pygeodesy.quadOf() function (pygeodesy.points): True
    test 675 pygeodesy.radians type builtin_function_or_method (math): True
    test 676 pygeodesy.radians2m() function (pygeodesy.utily): True
    test 677 pygeodesy.radiansPI() function (pygeodesy.utily): True
    test 678 pygeodesy.radiansPI2() function (pygeodesy.utily): True
    test 679 pygeodesy.radiansPI_2() function (pygeodesy.utily): True
    test 680 pygeodesy.radical2() function (pygeodesy.formy): True
    test 681 pygeodesy.randomrangenerator() function (pygeodesy.hausdorff): True
    test 682 pygeodesy.rangerrors() function (pygeodesy.errors): True
    test 683 pygeodesy.reprs() function (pygeodesy.streprs): True
    test 684 pygeodesy.scalar() function (pygeodesy.deprecated): True
    test 685 pygeodesy.signOf() function (pygeodesy.basics): True
    test 686 pygeodesy.simplify module: True
    test 687 pygeodesy.simplify1() function (pygeodesy.simplify): True
    test 688 pygeodesy.simplify2() function (pygeodesy.deprecated): True
    test 689 pygeodesy.simplifyRDP() function (pygeodesy.simplify): True
    test 690 pygeodesy.simplifyRDPm() function (pygeodesy.simplify): True
    test 691 pygeodesy.simplifyRW() function (pygeodesy.simplify): True
    test 692 pygeodesy.simplifyVW() function (pygeodesy.simplify): True
    test 693 pygeodesy.simplifyVWm() function (pygeodesy.simplify): True
    test 694 pygeodesy.sincos2() function (pygeodesy.utily): True
    test 695 pygeodesy.sincos2d() function (pygeodesy.utily): True
    test 696 pygeodesy.sphericalNvector module: True
    test 697 pygeodesy.sphericalTrigonometry module: True
    test 698 pygeodesy.splice() function (pygeodesy.basics): True
    test 699 pygeodesy.sqrt0() function (pygeodesy.fmath): True
    test 700 pygeodesy.sqrt3() function (pygeodesy.fmath): True
    test 701 pygeodesy.streprs module: True
    test 702 pygeodesy.strs() function (pygeodesy.streprs): True
    test 703 pygeodesy.tanPI_2_2() function (pygeodesy.utily): True
    test 704 pygeodesy.tan_2() function (pygeodesy.utily): True
    test 705 pygeodesy.thomas() function (pygeodesy.formy): True
    test 706 pygeodesy.thomas_() function (pygeodesy.formy): True
    test 707 pygeodesy.toCss() function (pygeodesy.css): True
    test 708 pygeodesy.toDMS() function (pygeodesy.dms): True
    test 709 pygeodesy.toEtm8() function (pygeodesy.etm): True
    test 710 pygeodesy.toLcc() function (pygeodesy.lcc): True
    test 711 pygeodesy.toMgrs() function (pygeodesy.mgrs): True
    test 712 pygeodesy.toOsgr() function (pygeodesy.osgr): True
    test 713 pygeodesy.toUps8() function (pygeodesy.ups): True
    test 714 pygeodesy.toUtm() function (pygeodesy.deprecated): True
    test 715 pygeodesy.toUtm8() function (pygeodesy.utm): True
    test 716 pygeodesy.toUtmUps8() function (pygeodesy.utmups): True
    test 717 pygeodesy.toWm() function (pygeodesy.webmercator): True
    test 718 pygeodesy.trf module: True
    test 719 pygeodesy.trfXform() function (pygeodesy.trf): True
    test 720 pygeodesy.trilaterate2d2() function (pygeodesy.vector3d): True
    test 721 pygeodesy.trilaterate3d2() function (pygeodesy.vector3d): True
    test 722 pygeodesy.ub2str() function (pygeodesy.basics): True
    test 723 pygeodesy.unStr() function (pygeodesy.deprecated): True
    test 724 pygeodesy.units module: True
    test 725 pygeodesy.unroll180() function (pygeodesy.utily): True
    test 726 pygeodesy.unrollPI() function (pygeodesy.utily): True
    test 727 pygeodesy.unsign0() function (pygeodesy.basics): True
    test 728 pygeodesy.unstr() function (pygeodesy.streprs): True
    test 729 pygeodesy.ups module: True
    test 730 pygeodesy.upsZoneBand5() function (pygeodesy.ups): True
    test 731 pygeodesy.utily module: True
    test 732 pygeodesy.utm module: True
    test 733 pygeodesy.utmZoneBand2() function (pygeodesy.deprecated): True
    test 734 pygeodesy.utmZoneBand5() function (pygeodesy.utm): True
    test 735 pygeodesy.utmups module: True
    test 736 pygeodesy.utmupsValidate() function (pygeodesy.utmups): True
    test 737 pygeodesy.utmupsValidateOK() function (pygeodesy.utmups): True
    test 738 pygeodesy.utmupsZoneBand5() function (pygeodesy.utmups): True
    test 739 pygeodesy.vector3d module: True
    test 740 pygeodesy.version str: True
    test 741 pygeodesy.vincentys() function (pygeodesy.formy): True
    test 742 pygeodesy.vincentys_() function (pygeodesy.formy): True
    test 743 pygeodesy.webmercator module: True
    test 744 pygeodesy.wgrs module: True
    test 745 pygeodesy.wrap180() function (pygeodesy.utily): True
    test 746 pygeodesy.wrap360() function (pygeodesy.utily): True
    test 747 pygeodesy.wrap90() function (pygeodesy.utily): True
    test 748 pygeodesy.wrapPI() function (pygeodesy.utily): True
    test 749 pygeodesy.wrapPI2() function (pygeodesy.utily): True
    test 750 pygeodesy.wrapPI_2() function (pygeodesy.utily): True
    test 751 pygeodesy.yard2m() function (pygeodesy.utily): True

    testModule(pygeodesy.albers, 21.07.22)
    test 752 albers.Albers7Tuple() class: True
    test 753 albers.AlbersEqualArea() class: True
    test 754 albers.AlbersEqualArea2() class: True
    test 755 albers.AlbersEqualArea4() class: True
    test 756 albers.AlbersEqualAreaCylindrical() class: True
    test 757 albers.AlbersEqualAreaNorth() class: True
    test 758 albers.AlbersEqualAreaSouth() class: True
    test 759 albers.AlbersError() class: True

    testModule(pygeodesy.azimuthal, 21.07.03)
    test 760 azimuthal.Azimuthal7Tuple() class: True
    test 761 azimuthal.AzimuthalError() class: True
    test 762 azimuthal.Equidistant() class: True
    test 763 azimuthal.EquidistantExact() class: True
    test 764 azimuthal.EquidistantGeodSolve() class: True
    test 765 azimuthal.EquidistantKarney() class: True
    test 766 azimuthal.Gnomonic() class: True
    test 767 azimuthal.GnomonicExact() class: True
    test 768 azimuthal.GnomonicGeodSolve() class: True
    test 769 azimuthal.GnomonicKarney() class: True
    test 770 azimuthal.LambertEqualArea() class: True
    test 771 azimuthal.Orthographic() class: True
    test 772 azimuthal.Stereographic() class: True
    test 773 azimuthal.equidistant() function: True
    test 774 azimuthal.gnomonic() function: True

    testModule(pygeodesy.deprecated.bases, 21.02.10)

    testModule(pygeodesy.basics, 21.06.30)
    test 775 basics.clips() function: True
    test 776 basics.copysign0() function: True
    test 777 basics.copytype() function: True
    test 778 basics.halfs2() function: True
    test 779 basics.isbool() function: True
    test 780 basics.isclass() function (inspect): True
    test 781 basics.isfinite() function: True
    test 782 basics.isidentifier() function: True
    test 783 basics.isinf type builtin_function_or_method (math): True
    test 784 basics.isint() function: True
    test 785 basics.iskeyword type builtin_function_or_method: True
    test 786 basics.isnan type builtin_function_or_method (math): True
    test 787 basics.isnear0() function: True
    test 788 basics.isneg0() function: True
    test 789 basics.isnon0() function: True
    test 790 basics.isodd() function: True
    test 791 basics.isscalar() function: True
    test 792 basics.issequence() function: True
    test 793 basics.isstr() function: True
    test 794 basics.issubclassof() function: True
    test 795 basics.len2() function: True
    test 796 basics.map1() function: True
    test 797 basics.map2() function: True
    test 798 basics.neg() function: True
    test 799 basics.neg_() function: True
    test 800 basics.signOf() function: True
    test 801 basics.splice() function: True
    test 802 basics.ub2str() function: True
    test 803 basics.unsign0() function: True

    testModule(pygeodesy.clipy, 21.07.02)
    test 804 clipy.ClipCS4Tuple() class: True
    test 805 clipy.ClipError() class: True
    test 806 clipy.ClipLB6Tuple() class: True
    test 807 clipy.ClipSH3Tuple() class: True
    test 808 clipy.clipCS4() function: True
    test 809 clipy.clipLB6() function: True
    test 810 clipy.clipSH() function: True
    test 811 clipy.clipSH3() function: True

    testModule(pygeodesy.css, 21.06.25)
    test 812 css.CSSError() class: True
    test 813 css.CassiniSoldner() class: True
    test 814 css.Css() class: True
    test 815 css.EasNorAziRk4Tuple() class: True
    test 816 css.LatLonAziRk4Tuple() class: True
    test 817 css.toCss() function: True

    testModule(pygeodesy.deprecated.datum, 21.02.10)
    test 818 datum.Curvature2Tuple() class (pygeodesy.ellipsoids): True
    test 819 datum.Datum() class (pygeodesy.datums): True
    test 820 datum.Datums class pygeodesy.datums.Datums (pygeodesy.datums): True
    test 821 datum.Ellipsoid() class (pygeodesy.ellipsoids): True
    test 822 datum.Ellipsoids class pygeodesy.ellipsoids.Ellipsoids (pygeodesy.ellipsoids): True
    test 823 datum.R_FM float (pygeodesy.units): True
    test 824 datum.R_KM float (pygeodesy.units): True
    test 825 datum.R_M float (pygeodesy.units): True
    test 826 datum.R_MA float (pygeodesy.units): True
    test 827 datum.R_MB float (pygeodesy.units): True
    test 828 datum.R_NM float (pygeodesy.units): True
    test 829 datum.R_SM float (pygeodesy.units): True
    test 830 datum.R_VM float (pygeodesy.units): True
    test 831 datum.Transform() class (pygeodesy.datums): True
    test 832 datum.Transforms class pygeodesy.datums.Transforms (pygeodesy.datums): True

    testModule(pygeodesy.datums, 21.06.18)
    test 833 datums.Datum() class: True
    test 834 datums.Datums class pygeodesy.datums.Datums: True
    test 835 datums.Transform() class: True
    test 836 datums.Transforms class pygeodesy.datums.Transforms: True

    testModule(pygeodesy.deprecated, 21.06.10)
    test 837 deprecated.ClipCS3Tuple() class: True
    test 838 deprecated.EcefCartesian() class: True
    test 839 deprecated.HeightIDW() class: True
    test 840 deprecated.HeightIDW2() class: True
    test 841 deprecated.HeightIDW3() class: True
    test 842 deprecated.OK str: True
    test 843 deprecated.RefFrameError() class: True
    test 844 deprecated.UtmUps4Tuple() class: True
    test 845 deprecated.anStr() function: True
    test 846 deprecated.areaof() function: True
    test 847 deprecated.bases module: True
    test 848 deprecated.bounds() function: True
    test 849 deprecated.clipCS3() function: True
    test 850 deprecated.clipDMS() function: True
    test 851 deprecated.clipStr() function: True
    test 852 deprecated.datum module: True
    test 853 deprecated.decodeEPSG2() function: True
    test 854 deprecated.enStr2() function: True
    test 855 deprecated.encodeEPSG() function: True
    test 856 deprecated.equirectangular3() function: True
    test 857 deprecated.fStr() function: True
    test 858 deprecated.fStrzs() function: True
    test 859 deprecated.false2f() function: True
    test 860 deprecated.falsed2f() function: True
    test 861 deprecated.hypot3() function: True
    test 862 deprecated.inStr() function: True
    test 863 deprecated.isenclosedby() function: True
    test 864 deprecated.joined() function: True
    test 865 deprecated.joined_() function: True
    test 866 deprecated.nearestOn3() function: True
    test 867 deprecated.nearestOn4() function: True
    test 868 deprecated.nvector module: True
    test 869 deprecated.parseUTM() function: True
    test 870 deprecated.perimeterof() function: True
    test 871 deprecated.polygon() function: True
    test 872 deprecated.scalar() function: True
    test 873 deprecated.simplify2() function: True
    test 874 deprecated.toUtm() function: True
    test 875 deprecated.unStr() function: True
    test 876 deprecated.utmZoneBand2() function: True

    testModule(pygeodesy.dms, 21.06.23)
    test 877 dms.F_D str: True
    test 878 dms.F_DEG str: True
    test 879 dms.F_DEG_ str: True
    test 880 dms.F_DEG__ str: True
    test 881 dms.F_DM str: True
    test 882 dms.F_DMS str: True
    test 883 dms.F_DMS_ str: True
    test 884 dms.F_DMS__ str: True
    test 885 dms.F_DM_ str: True
    test 886 dms.F_DM__ str: True
    test 887 dms.F_D_ str: True
    test 888 dms.F_D__ str: True
    test 889 dms.F_MIN str: True
    test 890 dms.F_MIN_ str: True
    test 891 dms.F_MIN__ str: True
    test 892 dms.F_RAD str: True
    test 893 dms.F_RAD_ str: True
    test 894 dms.F_RAD__ str: True
    test 895 dms.F_SEC str: True
    test 896 dms.F_SEC_ str: True
    test 897 dms.F_SEC__ str: True
    test 898 dms.F__E str: True
    test 899 dms.F__E_ str: True
    test 900 dms.F__E__ str: True
    test 901 dms.F__F str: True
    test 902 dms.F__F_ str: True
    test 903 dms.F__F__ str: True
    test 904 dms.F__G str: True
    test 905 dms.F__G_ str: True
    test 906 dms.F__G__ str: True
    test 907 dms.ParseError() class (pygeodesy.errors): True
    test 908 dms.S_DEG str: True
    test 909 dms.S_MIN str: True
    test 910 dms.S_RAD str (pygeodesy.interns): True
    test 911 dms.S_SEC str: True
    test 912 dms.S_SEP str (pygeodesy.interns): True
    test 913 dms.bearingDMS() function: True
    test 914 dms.clipDegrees() function: True
    test 915 dms.clipRadians() function: True
    test 916 dms.compassDMS() function: True
    test 917 dms.compassPoint() function: True
    test 918 dms.degDMS() function: True
    test 919 dms.latDMS() function: True
    test 920 dms.latlonDMS() function: True
    test 921 dms.lonDMS() function: True
    test 922 dms.normDMS() function: True
    test 923 dms.parse3llh() function: True
    test 924 dms.parseDDDMMSS() function: True
    test 925 dms.parseDMS() function: True
    test 926 dms.parseDMS2() function: True
    test 927 dms.parseRad() function: True
    test 928 dms.precision() function: True
    test 929 dms.toDMS() function: True

    testModule(pygeodesy.ecef, 21.07.22)
    test 930 ecef.Ecef9Tuple() class: True
    test 931 ecef.EcefError() class: True
    test 932 ecef.EcefFarrell21() class: True
    test 933 ecef.EcefFarrell22() class: True
    test 934 ecef.EcefKarney() class: True
    test 935 ecef.EcefMatrix() class: True
    test 936 ecef.EcefSudano() class: True
    test 937 ecef.EcefVeness() class: True
    test 938 ecef.EcefYou() class: True

    testModule(pygeodesy.elevations, 21.04.24)
    test 939 elevations.Elevation2Tuple() class: True
    test 940 elevations.GeoidHeight2Tuple() class: True
    test 941 elevations.elevation2() function: True
    test 942 elevations.geoidHeight2() function: True

    testModule(pygeodesy.ellipsoidalExact, 21.06.27)
    test 943 ellipsoidalExact.Cartesian() class: True
    test 944 ellipsoidalExact.LatLon() class: True
    test 945 ellipsoidalExact.areaOf() function: True
    test 946 ellipsoidalExact.intersection3() function: True
    test 947 ellipsoidalExact.intersections2() function: True
    test 948 ellipsoidalExact.isclockwise() function: True
    test 949 ellipsoidalExact.ispolar() function (pygeodesy.points): True
    test 950 ellipsoidalExact.nearestOn() function: True
    test 951 ellipsoidalExact.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 952 ellipsoidalGeodSolve.Cartesian() class: True
    test 953 ellipsoidalGeodSolve.LatLon() class: True
    test 954 ellipsoidalGeodSolve.areaOf() function: True
    test 955 ellipsoidalGeodSolve.intersection3() function: True
    test 956 ellipsoidalGeodSolve.intersections2() function: True
    test 957 ellipsoidalGeodSolve.isclockwise() function: True
    test 958 ellipsoidalGeodSolve.ispolar() function (pygeodesy.points): True
    test 959 ellipsoidalGeodSolve.nearestOn() function: True
    test 960 ellipsoidalGeodSolve.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalKarney, 21.06.27)
    test 961 ellipsoidalKarney.Cartesian() class: True
    test 962 ellipsoidalKarney.LatLon() class: True
    test 963 ellipsoidalKarney.areaOf() function: True
    test 964 ellipsoidalKarney.intersection3() function: True
    test 965 ellipsoidalKarney.intersections2() function: True
    test 966 ellipsoidalKarney.isclockwise() function: True
    test 967 ellipsoidalKarney.ispolar() function (pygeodesy.points): True
    test 968 ellipsoidalKarney.nearestOn() function: True
    test 969 ellipsoidalKarney.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 970 ellipsoidalNvector.Cartesian() class: True
    test 971 ellipsoidalNvector.LatLon() class: True
    test 972 ellipsoidalNvector.Ned() class: True
    test 973 ellipsoidalNvector.Ned3Tuple() class: True
    test 974 ellipsoidalNvector.Nvector() class: True
    test 975 ellipsoidalNvector.meanOf() function: True
    test 976 ellipsoidalNvector.sumOf() function: True
    test 977 ellipsoidalNvector.toNed() function: True

    testModule(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 978 ellipsoidalVincenty.Cartesian() class: True
    test 979 ellipsoidalVincenty.LatLon() class: True
    test 980 ellipsoidalVincenty.VincentyError() class: True
    test 981 ellipsoidalVincenty.intersection3() function: True
    test 982 ellipsoidalVincenty.intersections2() function: True
    test 983 ellipsoidalVincenty.ispolar() function (pygeodesy.points): True
    test 984 ellipsoidalVincenty.nearestOn() function: True

    testModule(pygeodesy.ellipsoids, 21.07.22)
    test 985 ellipsoids.Circle4Tuple() class: True
    test 986 ellipsoids.Curvature2Tuple() class: True
    test 987 ellipsoids.Ellipsoid() class: True
    test 988 ellipsoids.Ellipsoid2() class: True
    test 989 ellipsoids.Ellipsoids class pygeodesy.ellipsoids.Ellipsoids: True
    test 990 ellipsoids.R_FM float (pygeodesy.units): True
    test 991 ellipsoids.R_GM float (pygeodesy.units): True
    test 992 ellipsoids.R_KM float (pygeodesy.units): True
    test 993 ellipsoids.R_M float (pygeodesy.units): True
    test 994 ellipsoids.R_MA float (pygeodesy.units): True
    test 995 ellipsoids.R_MB float (pygeodesy.units): True
    test 996 ellipsoids.R_NM float (pygeodesy.units): True
    test 997 ellipsoids.R_SM float (pygeodesy.units): True
    test 998 ellipsoids.R_VM float (pygeodesy.units): True
    test 999 ellipsoids.a_b2e() function: True
    test 1000 ellipsoids.a_b2e2() function: True
    test 1001 ellipsoids.a_b2e22() function: True
    test 1002 ellipsoids.a_b2e32() function: True
    test 1003 ellipsoids.a_b2f() function: True
    test 1004 ellipsoids.a_b2f2() function: True
    test 1005 ellipsoids.a_b2f_() function: True
    test 1006 ellipsoids.a_b2n() function: True
    test 1007 ellipsoids.a_f2Tuple() class: True
    test 1008 ellipsoids.a_f2b() function: True
    test 1009 ellipsoids.a_f_2b() function: True
    test 1010 ellipsoids.b_f2a() function: True
    test 1011 ellipsoids.b_f_2a() function: True
    test 1012 ellipsoids.f2e2() function: True
    test 1013 ellipsoids.f2e22() function: True
    test 1014 ellipsoids.f2e32() function: True
    test 1015 ellipsoids.f2f2() function: True
    test 1016 ellipsoids.f2f_() function: True
    test 1017 ellipsoids.f2n() function: True
    test 1018 ellipsoids.f_2f() function: True
    test 1019 ellipsoids.n2e2() function: True
    test 1020 ellipsoids.n2f() function: True
    test 1021 ellipsoids.n2f_() function: True

    testModule(pygeodesy.elliptic, 21.06.30)
    test 1022 elliptic.Elliptic() class: True
    test 1023 elliptic.Elliptic3Tuple() class: True
    test 1024 elliptic.EllipticError() class: True

    testModule(pygeodesy.epsg, 21.06.09)
    test 1025 epsg.EPSGError() class: True
    test 1026 epsg.Epsg() class: True
    test 1027 epsg.decode2() function: True
    test 1028 epsg.encode() function: True

    testModule(pygeodesy.errors, 21.07.26)
    test 1029 errors.CrossError() class: True
    test 1030 errors.IntersectionError() class: True
    test 1031 errors.LenError() class: True
    test 1032 errors.LimitError() class: True
    test 1033 errors.NumPyError() class: True
    test 1034 errors.PointsError() class: True
    test 1035 errors.RangeError() class: True
    test 1036 errors.SciPyError() class: True
    test 1037 errors.SciPyWarning() class: True
    test 1038 errors.TRFError() class: True
    test 1039 errors.UnitError() class: True
    test 1040 errors.VectorError() class: True
    test 1041 errors.crosserrors() function: True
    test 1042 errors.exception_chaining() function: True
    test 1043 errors.limiterrors() function: True
    test 1044 errors.rangerrors() function: True

    testModule(pygeodesy.etm, 21.07.22)
    test 1045 etm.ETMError() class: True
    test 1046 etm.EasNorExact4Tuple() class: True
    test 1047 etm.Etm() class: True
    test 1048 etm.ExactTransverseMercator() class: True
    test 1049 etm.LatLonExact4Tuple() class: True
    test 1050 etm.parseETM5() function: True
    test 1051 etm.toEtm8() function: True

    testModule(pygeodesy.fmath, 21.07.26)
    test 1052 fmath.Fdot() class: True
    test 1053 fmath.Fhorner() class: True
    test 1054 fmath.Fpolynomial() class: True
    test 1055 fmath.Fsum() class: True
    test 1056 fmath.cbrt() function: True
    test 1057 fmath.cbrt2() function: True
    test 1058 fmath.euclid() function: True
    test 1059 fmath.euclid_() function: True
    test 1060 fmath.facos1() function: True
    test 1061 fmath.fasin1() function: True
    test 1062 fmath.fatan() function: True
    test 1063 fmath.fatan1() function: True
    test 1064 fmath.fatan2() function: True
    test 1065 fmath.favg() function: True
    test 1066 fmath.fdot() function: True
    test 1067 fmath.fdot3() function: True
    test 1068 fmath.fhorner() function: True
    test 1069 fmath.fidw() function: True
    test 1070 fmath.fmean() function: True
    test 1071 fmath.fmean_() function: True
    test 1072 fmath.fpolynomial() function: True
    test 1073 fmath.fpowers() function: True
    test 1074 fmath.fprod() function: True
    test 1075 fmath.frange() function: True
    test 1076 fmath.freduce type builtin_function_or_method (_functools): True
    test 1077 fmath.fsum type builtin_function_or_method (math): True
    test 1078 fmath.fsum2() function: True
    test 1079 fmath.fsum_() function: True
    test 1080 fmath.hypot type builtin_function_or_method (math): True
    test 1081 fmath.hypot1() function: True
    test 1082 fmath.hypot2() function: True
    test 1083 fmath.hypot2_() function: True
    test 1084 fmath.hypot_() function: True
    test 1085 fmath.norm2() function: True
    test 1086 fmath.norm_() function: True
    test 1087 fmath.sqrt0() function: True
    test 1088 fmath.sqrt3() function: True

    testModule(pygeodesy.formy, 21.07.09)
    test 1089 formy.Radical2Tuple() class: True
    test 1090 formy.antipode() function: True
    test 1091 formy.antipode_() function: True
    test 1092 formy.bearing() function: True
    test 1093 formy.bearing_() function: True
    test 1094 formy.compassAngle() function: True
    test 1095 formy.cosineAndoyerLambert() function: True
    test 1096 formy.cosineAndoyerLambert_() function: True
    test 1097 formy.cosineForsytheAndoyerLambert() function: True
    test 1098 formy.cosineForsytheAndoyerLambert_() function: True
    test 1099 formy.cosineLaw() function: True
    test 1100 formy.cosineLaw_() function: True
    test 1101 formy.equirectangular() function: True
    test 1102 formy.equirectangular_() function: True
    test 1103 formy.euclidean() function: True
    test 1104 formy.euclidean_() function: True
    test 1105 formy.excessAbc() function: True
    test 1106 formy.excessGirard() function: True
    test 1107 formy.excessKarney() function: True
    test 1108 formy.excessKarney_() function: True
    test 1109 formy.excessLHuilier() function: True
    test 1110 formy.excessQuad() function: True
    test 1111 formy.excessQuad_() function: True
    test 1112 formy.flatLocal() function: True
    test 1113 formy.flatLocal_() function: True
    test 1114 formy.flatPolar() function: True
    test 1115 formy.flatPolar_() function: True
    test 1116 formy.haversine() function: True
    test 1117 formy.haversine_() function: True
    test 1118 formy.heightOf() function: True
    test 1119 formy.horizon() function: True
    test 1120 formy.hubeny() function: True
    test 1121 formy.hubeny_() function: True
    test 1122 formy.intersections2() function: True
    test 1123 formy.isantipode() function: True
    test 1124 formy.isantipode_() function: True
    test 1125 formy.latlon2n_xyz() function: True
    test 1126 formy.n_xyz2latlon() function: True
    test 1127 formy.n_xyz2philam() function: True
    test 1128 formy.philam2n_xyz() function: True
    test 1129 formy.radical2() function: True
    test 1130 formy.thomas() function: True
    test 1131 formy.thomas_() function: True
    test 1132 formy.vincentys() function: True
    test 1133 formy.vincentys_() function: True

    testModule(pygeodesy.frechet, 21.06.01)
    test 1134 frechet.Frechet() class: True
    test 1135 frechet.Frechet6Tuple() class: True
    test 1136 frechet.FrechetCosineAndoyerLambert() class: True
    test 1137 frechet.FrechetCosineForsytheAndoyerLambert() class: True
    test 1138 frechet.FrechetCosineLaw() class: True
    test 1139 frechet.FrechetDegrees() class: True
    test 1140 frechet.FrechetDistanceTo() class: True
    test 1141 frechet.FrechetEquirectangular() class: True
    test 1142 frechet.FrechetError() class: True
    test 1143 frechet.FrechetEuclidean() class: True
    test 1144 frechet.FrechetExact() class: True
    test 1145 frechet.FrechetFlatLocal() class: True
    test 1146 frechet.FrechetFlatPolar() class: True
    test 1147 frechet.FrechetHaversine() class: True
    test 1148 frechet.FrechetHubeny() class: True
    test 1149 frechet.FrechetKarney() class: True
    test 1150 frechet.FrechetRadians() class: True
    test 1151 frechet.FrechetThomas() class: True
    test 1152 frechet.FrechetVincentys() class: True
    test 1153 frechet.frechet_() function: True

    testModule(pygeodesy.gars, 21.05.26)
    test 1154 gars.GARSError() class: True
    test 1155 gars.Garef() class: True
    test 1156 gars.decode3() function: True
    test 1157 gars.encode() function: True
    test 1158 gars.precision() function: True
    test 1159 gars.resolution() function: True

    testModule(pygeodesy.geodesicx, 21.07.15)
    test 1160 geodesicx.Caps class pygeodesy.geodesicx.gxbases.Caps (pygeodesy.geodesicx.gxbases): True
    test 1161 geodesicx.GeodesicAreaExact() class (pygeodesy.geodesicx.gxarea): True
    test 1162 geodesicx.GeodesicExact() class (pygeodesy.geodesicx.gx): True
    test 1163 geodesicx.GeodesicLineExact() class (pygeodesy.geodesicx.gx): True
    test 1164 geodesicx.PolygonArea() class (pygeodesy.geodesicx.gxarea): True
    test 1165 geodesicx.gx module: True
    test 1166 geodesicx.gxarea module: True
    test 1167 geodesicx.gxline module: True

    testModule(pygeodesy.geodsolve, 21.07.03)
    test 1168 geodsolve.GeodesicLineSolve() class: True
    test 1169 geodsolve.GeodesicSolve() class: True

    testModule(pygeodesy.geohash, 21.06.23)
    test 1170 geohash.Geohash() class: True
    test 1171 geohash.GeohashError() class: True
    test 1172 geohash.Neighbors8Dict() class: True
    test 1173 geohash.Resolutions2Tuple() class: True
    test 1174 geohash.bounds() function: True
    test 1175 geohash.decode() function: True
    test 1176 geohash.decode2() function: True
    test 1177 geohash.decode_error() function: True
    test 1178 geohash.distance_() function: True
    test 1179 geohash.encode() function: True
    test 1180 geohash.equirectangular_() function: True
    test 1181 geohash.haversine_() function: True
    test 1182 geohash.neighbors() function: True
    test 1183 geohash.precision() function: True
    test 1184 geohash.resolution2() function: True
    test 1185 geohash.sizes() function: True

    testModule(pygeodesy.geoids, 21.06.28)
    test 1186 geoids.GeoidError() class: True
    test 1187 geoids.GeoidG2012B() class: True
    test 1188 geoids.GeoidHeight5Tuple() class: True
    test 1189 geoids.GeoidKarney() class: True
    test 1190 geoids.GeoidPGM() class: True
    test 1191 geoids.PGMError() class: True
    test 1192 geoids.egmGeoidHeights() function: True

    testModule(pygeodesy.geodesicx.gx, 21.07.15)

    testModule(pygeodesy.geodesicx.gxarea, 21.06.30)

    testModule(pygeodesy.geodesicx.gxline, 21.06.30)

    testModule(pygeodesy.hausdorff, 21.06.01)
    test 1193 hausdorff.Hausdorff() class: True
    test 1194 hausdorff.Hausdorff6Tuple() class: True
    test 1195 hausdorff.HausdorffCosineAndoyerLambert() class: True
    test 1196 hausdorff.HausdorffCosineForsytheAndoyerLambert() class: True
    test 1197 hausdorff.HausdorffCosineLaw() class: True
    test 1198 hausdorff.HausdorffDegrees() class: True
    test 1199 hausdorff.HausdorffDistanceTo() class: True
    test 1200 hausdorff.HausdorffEquirectangular() class: True
    test 1201 hausdorff.HausdorffError() class: True
    test 1202 hausdorff.HausdorffEuclidean() class: True
    test 1203 hausdorff.HausdorffExact() class: True
    test 1204 hausdorff.HausdorffFlatLocal() class: True
    test 1205 hausdorff.HausdorffFlatPolar() class: True
    test 1206 hausdorff.HausdorffHaversine() class: True
    test 1207 hausdorff.HausdorffHubeny() class: True
    test 1208 hausdorff.HausdorffKarney() class: True
    test 1209 hausdorff.HausdorffRadians() class: True
    test 1210 hausdorff.HausdorffThomas() class: True
    test 1211 hausdorff.HausdorffVincentys() class: True
    test 1212 hausdorff.hausdorff_() function: True
    test 1213 hausdorff.randomrangenerator() function: True

    testModule(pygeodesy.heights, 21.06.01)
    test 1214 heights.HeightCubic() class: True
    test 1215 heights.HeightError() class: True
    test 1216 heights.HeightIDWcosineAndoyerLambert() class: True
    test 1217 heights.HeightIDWcosineForsytheAndoyerLambert() class: True
    test 1218 heights.HeightIDWcosineLaw() class: True
    test 1219 heights.HeightIDWdistanceTo() class: True
    test 1220 heights.HeightIDWequirectangular() class: True
    test 1221 heights.HeightIDWeuclidean() class: True
    test 1222 heights.HeightIDWflatLocal() class: True
    test 1223 heights.HeightIDWflatPolar() class: True
    test 1224 heights.HeightIDWhaversine() class: True
    test 1225 heights.HeightIDWhubeny() class: True
    test 1226 heights.HeightIDWkarney() class: True
    test 1227 heights.HeightIDWthomas() class: True
    test 1228 heights.HeightIDWvincentys() class: True
    test 1229 heights.HeightLSQBiSpline() class: True
    test 1230 heights.HeightLinear() class: True
    test 1231 heights.HeightSmoothBiSpline() class: True

    testModule(pygeodesy.interns, 21.07.24)
    test 1232 interns.DIG int: True
    test 1233 interns.EPS float: True
    test 1234 interns.EPS0 float: True
    test 1235 interns.EPS02 float: True
    test 1236 interns.EPS1 float: True
    test 1237 interns.EPS1_2 float: True
    test 1238 interns.EPS2 float: True
    test 1239 interns.EPS4 float: True
    test 1240 interns.EPS_2 float: True
    test 1241 interns.INF float: True
    test 1242 interns.MANTIS int: True
    test 1243 interns.MANT_DIG int: True
    test 1244 interns.MAX float: True
    test 1245 interns.MIN float: True
    test 1246 interns.NAN float: True
    test 1247 interns.NEG0 float: True
    test 1248 interns.NN str: True
    test 1249 interns.PI float: True
    test 1250 interns.PI2 float: True
    test 1251 interns.PI3 float: True
    test 1252 interns.PI3_2 float: True
    test 1253 interns.PI4 float: True
    test 1254 interns.PI_2 float: True
    test 1255 interns.PI_4 float: True

    testModule(pygeodesy.iters, 21.06.15)
    test 1256 iters.LatLon2PsxyIter() class: True
    test 1257 iters.PointsIter() class: True
    test 1258 iters.isNumpy2() function: True
    test 1259 iters.isPoints2() function: True
    test 1260 iters.isTuple2() function: True
    test 1261 iters.iterNumpy2() function: True
    test 1262 iters.iterNumpy2over() function: True
    test 1263 iters.points2() function: True

    testModule(pygeodesy.karney, 21.07.15)
    test 1264 karney.Direct9Tuple() class: True
    test 1265 karney.GDict() class: True
    test 1266 karney.GeodSolve12Tuple() class: True
    test 1267 karney.GeodesicError() class: True
    test 1268 karney.Inverse10Tuple() class: True

    testModule(pygeodesy.lazily, 21.07.27)
    test 1269 lazily.LazyImportError() class: True
    test 1270 lazily.isLazy type NoneType: True
    test 1271 lazily.print_() function: True
    test 1272 lazily.printf() function: True

    testModule(pygeodesy.lcc, 21.07.22)
    test 1273 lcc.Conic() class: True
    test 1274 lcc.Conics class pygeodesy.lcc.Conics: True
    test 1275 lcc.LCCError() class: True
    test 1276 lcc.Lcc() class: True
    test 1277 lcc.toLcc() function: True

    testModule(pygeodesy.ltp, 21.06.25)
    test 1278 ltp.Frustum() class: True
    test 1279 ltp.LocalCartesian() class: True
    test 1280 ltp.LocalError() class: True
    test 1281 ltp.Ltp() class: True

    testModule(pygeodesy.ltpTuples, 21.06.04)
    test 1282 ltpTuples.Aer() class: True
    test 1283 ltpTuples.Aer4Tuple() class: True
    test 1284 ltpTuples.Enu() class: True
    test 1285 ltpTuples.Enu4Tuple() class: True
    test 1286 ltpTuples.Footprint5Tuple() class: True
    test 1287 ltpTuples.Local9Tuple() class: True
    test 1288 ltpTuples.Ned() class: True
    test 1289 ltpTuples.Ned4Tuple() class: True
    test 1290 ltpTuples.Xyz4Tuple() class: True
    test 1291 ltpTuples.XyzLocal() class: True

    testModule(pygeodesy.mgrs, 21.06.19)
    test 1292 mgrs.MGRSError() class: True
    test 1293 mgrs.Mgrs() class: True
    test 1294 mgrs.Mgrs4Tuple() class: True
    test 1295 mgrs.Mgrs6Tuple() class: True
    test 1296 mgrs.parseMGRS() function: True
    test 1297 mgrs.toMgrs() function: True

    testModule(pygeodesy.named, 21.06.27)
    test 1298 named.callername() function: True
    test 1299 named.classname() function: True
    test 1300 named.classnaming() function: True
    test 1301 named.modulename() function: True
    test 1302 named.nameof() function: True
    test 1303 named.notImplemented() function: True
    test 1304 named.notOverloaded() function: True

    testModule(pygeodesy.namedTuples, 21.06.23)
    test 1305 namedTuples.Bearing2Tuple() class: True
    test 1306 namedTuples.Bounds2Tuple() class: True
    test 1307 namedTuples.Bounds4Tuple() class: True
    test 1308 namedTuples.Destination2Tuple() class: True
    test 1309 namedTuples.Destination3Tuple() class: True
    test 1310 namedTuples.Distance2Tuple() class: True
    test 1311 namedTuples.Distance3Tuple() class: True
    test 1312 namedTuples.Distance4Tuple() class: True
    test 1313 namedTuples.EasNor2Tuple() class: True
    test 1314 namedTuples.EasNor3Tuple() class: True
    test 1315 namedTuples.Intersection3Tuple() class: True
    test 1316 namedTuples.LatLon2Tuple() class: True
    test 1317 namedTuples.LatLon3Tuple() class: True
    test 1318 namedTuples.LatLon4Tuple() class: True
    test 1319 namedTuples.LatLonDatum3Tuple() class: True
    test 1320 namedTuples.LatLonDatum5Tuple() class: True
    test 1321 namedTuples.LatLonPrec3Tuple() class: True
    test 1322 namedTuples.LatLonPrec5Tuple() class: True
    test 1323 namedTuples.NearestOn3Tuple() class: True
    test 1324 namedTuples.PhiLam2Tuple() class: True
    test 1325 namedTuples.PhiLam3Tuple() class: True
    test 1326 namedTuples.PhiLam4Tuple() class: True
    test 1327 namedTuples.Point3Tuple() class: True
    test 1328 namedTuples.Points2Tuple() class: True
    test 1329 namedTuples.Triangle7Tuple() class: True
    test 1330 namedTuples.Triangle8Tuple() class: True
    test 1331 namedTuples.Trilaterate5Tuple() class: True
    test 1332 namedTuples.UtmUps2Tuple() class: True
    test 1333 namedTuples.UtmUps5Tuple() class: True
    test 1334 namedTuples.UtmUps8Tuple() class: True
    test 1335 namedTuples.UtmUpsLatLon5Tuple() class: True
    test 1336 namedTuples.Vector2Tuple() class: True
    test 1337 namedTuples.Vector3Tuple() class: True
    test 1338 namedTuples.Vector4Tuple() class: True

    testModule(pygeodesy.deprecated.nvector, 21.05.20)
    test 1339 nvector.NorthPole class pygeodesy.nvectorBase.NvectorBase (pygeodesy.nvectorBase): True
    test 1340 nvector.SouthPole class pygeodesy.nvectorBase.NvectorBase (pygeodesy.nvectorBase): True

    testModule(pygeodesy.osgr, 21.06.09)
    test 1341 osgr.OSGRError() class: True
    test 1342 osgr.Osgr() class: True
    test 1343 osgr.parseOSGR() function: True
    test 1344 osgr.toOsgr() function: True

    testModule(pygeodesy.points, 21.06.30)
    test 1345 points.LatLon2psxy() class: True
    test 1346 points.LatLon_() class: True
    test 1347 points.NearestOn5Tuple() class: True
    test 1348 points.Numpy2LatLon() class: True
    test 1349 points.Shape2Tuple() class: True
    test 1350 points.Tuple2LatLon() class: True
    test 1351 points.areaOf() function: True
    test 1352 points.boundsOf() function: True
    test 1353 points.centroidOf() function: True
    test 1354 points.fractional() function: True
    test 1355 points.isclockwise() function: True
    test 1356 points.isconvex() function: True
    test 1357 points.isconvex_() function: True
    test 1358 points.isenclosedBy() function: True
    test 1359 points.ispolar() function: True
    test 1360 points.luneOf() function: True
    test 1361 points.nearestOn5() function: True
    test 1362 points.perimeterOf() function: True
    test 1363 points.quadOf() function: True

    testModule(pygeodesy.props, 21.06.09)
    test 1364 props.DeprecationWarnings() function: True
    test 1365 props.Property() class: True
    test 1366 props.Property_RO() class: True
    test 1367 props.deprecated_Property_RO() function: True
    test 1368 props.deprecated_class() function: True
    test 1369 props.deprecated_function() function: True
    test 1370 props.deprecated_method() function: True
    test 1371 props.deprecated_property_RO() function: True
    test 1372 props.property_RO() class: True
    test 1373 props.property_doc_() function: True

    testModule(pygeodesy.simplify, 21.06.10)
    test 1374 simplify.simplify1() function: True
    test 1375 simplify.simplifyRDP() function: True
    test 1376 simplify.simplifyRDPm() function: True
    test 1377 simplify.simplifyRW() function: True
    test 1378 simplify.simplifyVW() function: True
    test 1379 simplify.simplifyVWm() function: True

    testModule(pygeodesy.sphericalNvector, 21.06.09)
    test 1380 sphericalNvector.Cartesian() class: True
    test 1381 sphericalNvector.LatLon() class: True
    test 1382 sphericalNvector.Nvector() class: True
    test 1383 sphericalNvector.areaOf() function: True
    test 1384 sphericalNvector.intersection() function: True
    test 1385 sphericalNvector.ispolar() function (pygeodesy.points): True
    test 1386 sphericalNvector.meanOf() function: True
    test 1387 sphericalNvector.nearestOn2() function: True
    test 1388 sphericalNvector.perimeterOf() function: True
    test 1389 sphericalNvector.sumOf() function: True
    test 1390 sphericalNvector.triangulate() function: True
    test 1391 sphericalNvector.trilaterate() function: True

    testModule(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 1392 sphericalTrigonometry.Cartesian() class: True
    test 1393 sphericalTrigonometry.LatLon() class: True
    test 1394 sphericalTrigonometry.areaOf() function: True
    test 1395 sphericalTrigonometry.intersection() function: True
    test 1396 sphericalTrigonometry.intersections2() function: True
    test 1397 sphericalTrigonometry.isPoleEnclosedBy() function: True
    test 1398 sphericalTrigonometry.ispolar() function (pygeodesy.points): True
    test 1399 sphericalTrigonometry.meanOf() function: True
    test 1400 sphericalTrigonometry.nearestOn2() function: True
    test 1401 sphericalTrigonometry.nearestOn3() function: True
    test 1402 sphericalTrigonometry.perimeterOf() function: True
    test 1403 sphericalTrigonometry.sumOf() function (pygeodesy.vector3d): True
    test 1404 sphericalTrigonometry.triangle7() function: True
    test 1405 sphericalTrigonometry.triangle8_() function: True

    testModule(pygeodesy.streprs, 21.06.27)
    test 1406 streprs.anstr() function: True
    test 1407 streprs.attrs() function: True
    test 1408 streprs.enstr2() function: True
    test 1409 streprs.fstr() function: True
    test 1410 streprs.fstrzs() function: True
    test 1411 streprs.hstr() function: True
    test 1412 streprs.instr() function: True
    test 1413 streprs.pairs() function: True
    test 1414 streprs.reprs() function: True
    test 1415 streprs.strs() function: True
    test 1416 streprs.unstr() function: True

    testModule(pygeodesy.trf, 21.06.18)
    test 1417 trf.RefFrame() class: True
    test 1418 trf.RefFrames class pygeodesy.trf.RefFrames: True
    test 1419 trf.Transform7Tuple() class: True
    test 1420 trf.date2epoch() function: True
    test 1421 trf.epoch2date() function: True
    test 1422 trf.trfXform() function: True

    testModule(pygeodesy.units, 21.06.04)
    test 1423 units.Band() class: True
    test 1424 units.Bearing() class: True
    test 1425 units.Bearing_() class: True
    test 1426 units.Bool() class: True
    test 1427 units.Degrees() class: True
    test 1428 units.Degrees2() class: True
    test 1429 units.Degrees_() class: True
    test 1430 units.Distance() class: True
    test 1431 units.Distance_() class: True
    test 1432 units.Easting() class: True
    test 1433 units.Epoch() class: True
    test 1434 units.FIx() class: True
    test 1435 units.Feet() class: True
    test 1436 units.Float() class: True
    test 1437 units.Float_() class: True
    test 1438 units.Height() class: True
    test 1439 units.Int() class: True
    test 1440 units.Int_() class: True
    test 1441 units.Lam() class: True
    test 1442 units.Lam_() class: True
    test 1443 units.Lat() class: True
    test 1444 units.Lat_() class: True
    test 1445 units.Lon() class: True
    test 1446 units.Lon_() class: True
    test 1447 units.Meter() class: True
    test 1448 units.Meter2() class: True
    test 1449 units.Meter3() class: True
    test 1450 units.Meter_() class: True
    test 1451 units.Northing() class: True
    test 1452 units.Number_() class: True
    test 1453 units.Phi() class: True
    test 1454 units.Phi_() class: True
    test 1455 units.Precision_() class: True
    test 1456 units.Radians() class: True
    test 1457 units.Radians2() class: True
    test 1458 units.Radians_() class: True
    test 1459 units.Radius() class: True
    test 1460 units.Radius_() class: True
    test 1461 units.Scalar() class: True
    test 1462 units.Scalar_() class: True
    test 1463 units.Str() class: True
    test 1464 units.Zone() class: True

    testModule(pygeodesy.ups, 21.07.22)
    test 1465 ups.UPSError() class: True
    test 1466 ups.Ups() class: True
    test 1467 ups.parseUPS5() function: True
    test 1468 ups.toUps8() function: True
    test 1469 ups.upsZoneBand5() function: True

    testModule(pygeodesy.utily, 21.07.09)
    test 1470 utily.acos1() function: True
    test 1471 utily.acre2ha() function: True
    test 1472 utily.acre2m2() function: True
    test 1473 utily.asin1() function: True
    test 1474 utily.atan2b() function: True
    test 1475 utily.atan2d() function: True
    test 1476 utily.atand() function: True
    test 1477 utily.chain2m() function: True
    test 1478 utily.circle4() function: True
    test 1479 utily.degrees type builtin_function_or_method (math): True
    test 1480 utily.degrees180() function: True
    test 1481 utily.degrees2grades() function: True
    test 1482 utily.degrees2m() function: True
    test 1483 utily.degrees360() function: True
    test 1484 utily.degrees90() function: True
    test 1485 utily.fathom2m() function: True
    test 1486 utily.ft2m() function: True
    test 1487 utily.furlong2m() function: True
    test 1488 utily.grades() function: True
    test 1489 utily.grades2degrees() function: True
    test 1490 utily.grades2radians() function: True
    test 1491 utily.grades400() function: True
    test 1492 utily.m2NM() function: True
    test 1493 utily.m2SM() function: True
    test 1494 utily.m2degrees() function: True
    test 1495 utily.m2ft() function: True
    test 1496 utily.m2km() function: True
    test 1497 utily.m2radians() function: True
    test 1498 utily.m2yard() function: True
    test 1499 utily.radians type builtin_function_or_method (math): True
    test 1500 utily.radians2m() function: True
    test 1501 utily.radiansPI() function: True
    test 1502 utily.radiansPI2() function: True
    test 1503 utily.radiansPI_2() function: True
    test 1504 utily.sincos2() function: True
    test 1505 utily.sincos2d() function: True
    test 1506 utily.tanPI_2_2() function: True
    test 1507 utily.tan_2() function: True
    test 1508 utily.unroll180() function: True
    test 1509 utily.unrollPI() function: True
    test 1510 utily.wrap180() function: True
    test 1511 utily.wrap360() function: True
    test 1512 utily.wrap90() function: True
    test 1513 utily.wrapPI() function: True
    test 1514 utily.wrapPI2() function: True
    test 1515 utily.wrapPI_2() function: True
    test 1516 utily.yard2m() function: True

    testModule(pygeodesy.utm, 21.06.21)
    test 1517 utm.UTMError() class: True
    test 1518 utm.Utm() class: True
    test 1519 utm.parseUTM5() function: True
    test 1520 utm.toUtm8() function: True
    test 1521 utm.utmZoneBand5() function: True

    testModule(pygeodesy.utmups, 21.06.09)
    test 1522 utmups.UTMUPSError() class: True
    test 1523 utmups.UtmUps() function: True
    test 1524 utmups.parseUTMUPS5() function: True
    test 1525 utmups.toUtmUps8() function: True
    test 1526 utmups.utmupsValidate() function: True
    test 1527 utmups.utmupsValidateOK() function: True
    test 1528 utmups.utmupsZoneBand5() function: True

    testModule(pygeodesy.vector3d, 21.07.26)
    test 1529 vector3d.Circum3Tuple() class: True
    test 1530 vector3d.Meeus2Tuple() class: True
    test 1531 vector3d.Vector3d() class: True
    test 1532 vector3d.circum3() function: True
    test 1533 vector3d.intersection3d3() function: True
    test 1534 vector3d.iscolinearWith() function: True
    test 1535 vector3d.meeus2() function: True
    test 1536 vector3d.parse3d() function: True
    test 1537 vector3d.trilaterate2d2() function: True
    test 1538 vector3d.trilaterate3d2() function: True

    testModule(pygeodesy.webmercator, 21.04.24)
    test 1539 webmercator.EasNorRadius3Tuple() class: True
    test 1540 webmercator.WebMercatorError() class: True
    test 1541 webmercator.Wm() class: True
    test 1542 webmercator.parseWM() function: True
    test 1543 webmercator.toWm() function: True

    testModule(pygeodesy.wgrs, 21.05.26)
    test 1544 wgrs.Georef() class: True
    test 1545 wgrs.WGRSError() class: True
    test 1546 wgrs.decode3() function: True
    test 1547 wgrs.decode5() function: True
    test 1548 wgrs.encode() function: True
    test 1549 wgrs.precision() function: True
    test 1550 wgrs.resolution() function: True

    testPublic(pygeodesy, 21.07.27)
    test 1551 Aer() class: True
    test 1552 Aer4Tuple() class: True
    test 1553 Albers7Tuple() class: True
    test 1554 AlbersEqualArea() class: True
    test 1555 AlbersEqualArea2() class: True
    test 1556 AlbersEqualArea4() class: True
    test 1557 AlbersEqualAreaCylindrical() class: True
    test 1558 AlbersEqualAreaNorth() class: True
    test 1559 AlbersEqualAreaSouth() class: True
    test 1560 AlbersError() class: True
    test 1561 Azimuthal7Tuple() class: True
    test 1562 AzimuthalError() class: True
    test 1563 Band() class: True
    test 1564 Bearing() class: True
    test 1565 Bearing2Tuple() class: True
    test 1566 Bearing_() class: True
    test 1567 Bool() class: True
    test 1568 Bounds2Tuple() class: True
    test 1569 Bounds4Tuple() class: True
    test 1570 CSSError() class: True
    test 1571 Caps class pygeodesy.geodesicx.gxbases.Caps: True
    test 1572 CassiniSoldner() class: True
    test 1573 Circle4Tuple() class: True
    test 1574 Circum3Tuple() class: True
    test 1575 ClipCS3Tuple() class: True
    test 1576 ClipCS4Tuple() class: True
    test 1577 ClipError() class: True
    test 1578 ClipLB6Tuple() class: True
    test 1579 ClipSH3Tuple() class: True
    test 1580 Conic() class: True
    test 1581 Conics class pygeodesy.lcc.Conics: True
    test 1582 CrossError() class: True
    test 1583 Css() class: True
    test 1584 Curvature2Tuple() class: True
    test 1585 Datum() class: True
    test 1586 Datums class pygeodesy.datums.Datums: True
    test 1587 Degrees() class: True
    test 1588 Degrees2() class: True
    test 1589 Degrees_() class: True
    test 1590 DeprecationWarnings() function: True
    test 1591 Destination2Tuple() class: True
    test 1592 Destination3Tuple() class: True
    test 1593 Direct9Tuple() class: True
    test 1594 Distance() class: True
    test 1595 Distance2Tuple() class: True
    test 1596 Distance3Tuple() class: True
    test 1597 Distance4Tuple() class: True
    test 1598 Distance_() class: True
    test 1599 EPSGError() class: True
    test 1600 ETMError() class: True
    test 1601 EasNor2Tuple() class: True
    test 1602 EasNor3Tuple() class: True
    test 1603 EasNorAziRk4Tuple() class: True
    test 1604 EasNorExact4Tuple() class: True
    test 1605 EasNorRadius3Tuple() class: True
    test 1606 Easting() class: True
    test 1607 Ecef9Tuple() class: True
    test 1608 EcefCartesian() class: True
    test 1609 EcefError() class: True
    test 1610 EcefFarrell21() class: True
    test 1611 EcefFarrell22() class: True
    test 1612 EcefKarney() class: True
    test 1613 EcefMatrix() class: True
    test 1614 EcefSudano() class: True
    test 1615 EcefVeness() class: True
    test 1616 EcefYou() class: True
    test 1617 Elevation2Tuple() class: True
    test 1618 Ellipsoid() class: True
    test 1619 Ellipsoid2() class: True
    test 1620 Ellipsoids class pygeodesy.ellipsoids.Ellipsoids: True
    test 1621 Elliptic() class: True
    test 1622 Elliptic3Tuple() class: True
    test 1623 EllipticError() class: True
    test 1624 Enu() class: True
    test 1625 Enu4Tuple() class: True
    test 1626 Epoch() class: True
    test 1627 Epsg() class: True
    test 1628 Equidistant() class: True
    test 1629 EquidistantExact() class: True
    test 1630 EquidistantGeodSolve() class: True
    test 1631 EquidistantKarney() class: True
    test 1632 Etm() class: True
    test 1633 ExactTransverseMercator() class: True
    test 1634 FIx() class: True
    test 1635 Fdot() class: True
    test 1636 Feet() class: True
    test 1637 Fhorner() class: True
    test 1638 Float() class: True
    test 1639 Float_() class: True
    test 1640 Footprint5Tuple() class: True
    test 1641 Fpolynomial() class: True
    test 1642 Frechet() class: True
    test 1643 Frechet6Tuple() class: True
    test 1644 FrechetCosineAndoyerLambert() class: True
    test 1645 FrechetCosineForsytheAndoyerLambert() class: True
    test 1646 FrechetCosineLaw() class: True
    test 1647 FrechetDegrees() class: True
    test 1648 FrechetDistanceTo() class: True
    test 1649 FrechetEquirectangular() class: True
    test 1650 FrechetError() class: True
    test 1651 FrechetEuclidean() class: True
    test 1652 FrechetExact() class: True
    test 1653 FrechetFlatLocal() class: True
    test 1654 FrechetFlatPolar() class: True
    test 1655 FrechetHaversine() class: True
    test 1656 FrechetHubeny() class: True
    test 1657 FrechetKarney() class: True
    test 1658 FrechetRadians() class: True
    test 1659 FrechetThomas() class: True
    test 1660 FrechetVincentys() class: True
    test 1661 Frustum() class: True
    test 1662 Fsum() class: True
    test 1663 GARSError() class: True
    test 1664 GDict() class: True
    test 1665 Garef() class: True
    test 1666 GeodSolve12Tuple() class: True
    test 1667 GeodesicAreaExact() class: True
    test 1668 GeodesicError() class: True
    test 1669 GeodesicExact() class: True
    test 1670 GeodesicLineExact() class: True
    test 1671 GeodesicLineSolve() class: True
    test 1672 GeodesicSolve() class: True
    test 1673 Geohash() class: True
    test 1674 GeohashError() class: True
    test 1675 GeoidError() class: True
    test 1676 GeoidG2012B() class: True
    test 1677 GeoidHeight2Tuple() class: True
    test 1678 GeoidHeight5Tuple() class: True
    test 1679 GeoidKarney() class: True
    test 1680 GeoidPGM() class: True
    test 1681 Georef() class: True
    test 1682 Gnomonic() class: True
    test 1683 GnomonicExact() class: True
    test 1684 GnomonicGeodSolve() class: True
    test 1685 GnomonicKarney() class: True
    test 1686 Hausdorff() class: True
    test 1687 Hausdorff6Tuple() class: True
    test 1688 HausdorffCosineAndoyerLambert() class: True
    test 1689 HausdorffCosineForsytheAndoyerLambert() class: True
    test 1690 HausdorffCosineLaw() class: True
    test 1691 HausdorffDegrees() class: True
    test 1692 HausdorffDistanceTo() class: True
    test 1693 HausdorffEquirectangular() class: True
    test 1694 HausdorffError() class: True
    test 1695 HausdorffEuclidean() class: True
    test 1696 HausdorffExact() class: True
    test 1697 HausdorffFlatLocal() class: True
    test 1698 HausdorffFlatPolar() class: True
    test 1699 HausdorffHaversine() class: True
    test 1700 HausdorffHubeny() class: True
    test 1701 HausdorffKarney() class: True
    test 1702 HausdorffRadians() class: True
    test 1703 HausdorffThomas() class: True
    test 1704 HausdorffVincentys() class: True
    test 1705 Height() class: True
    test 1706 HeightCubic() class: True
    test 1707 HeightError() class: True
    test 1708 HeightIDW() class: True
    test 1709 HeightIDW2() class: True
    test 1710 HeightIDW3() class: True
    test 1711 HeightIDWcosineAndoyerLambert() class: True
    test 1712 HeightIDWcosineForsytheAndoyerLambert() class: True
    test 1713 HeightIDWcosineLaw() class: True
    test 1714 HeightIDWdistanceTo() class: True
    test 1715 HeightIDWequirectangular() class: True
    test 1716 HeightIDWeuclidean() class: True
    test 1717 HeightIDWflatLocal() class: True
    test 1718 HeightIDWflatPolar() class: True
    test 1719 HeightIDWhaversine() class: True
    test 1720 HeightIDWhubeny() class: True
    test 1721 HeightIDWkarney() class: True
    test 1722 HeightIDWthomas() class: True
    test 1723 HeightIDWvincentys() class: True
    test 1724 HeightLSQBiSpline() class: True
    test 1725 HeightLinear() class: True
    test 1726 HeightSmoothBiSpline() class: True
    test 1727 Int() class: True
    test 1728 Int_() class: True
    test 1729 Intersection3Tuple() class: True
    test 1730 IntersectionError() class: True
    test 1731 Inverse10Tuple() class: True
    test 1732 LCCError() class: True
    test 1733 Lam() class: True
    test 1734 Lam_() class: True
    test 1735 LambertEqualArea() class: True
    test 1736 Lat() class: True
    test 1737 LatLon2PsxyIter() class: True
    test 1738 LatLon2Tuple() class: True
    test 1739 LatLon2psxy() class: True
    test 1740 LatLon3Tuple() class: True
    test 1741 LatLon4Tuple() class: True
    test 1742 LatLonAziRk4Tuple() class: True
    test 1743 LatLonDatum3Tuple() class: True
    test 1744 LatLonDatum5Tuple() class: True
    test 1745 LatLonExact4Tuple() class: True
    test 1746 LatLonPrec3Tuple() class: True
    test 1747 LatLonPrec5Tuple() class: True
    test 1748 LatLon_() class: True
    test 1749 Lat_() class: True
    test 1750 LazyImportError() class: True
    test 1751 Lcc() class: True
    test 1752 LenError() class: True
    test 1753 LimitError() class: True
    test 1754 Local9Tuple() class: True
    test 1755 LocalCartesian() class: True
    test 1756 LocalError() class: True
    test 1757 Lon() class: True
    test 1758 Lon_() class: True
    test 1759 Ltp() class: True
    test 1760 MGRSError() class: True
    test 1761 Meeus2Tuple() class: True
    test 1762 Meter() class: True
    test 1763 Meter2() class: True
    test 1764 Meter3() class: True
    test 1765 Meter_() class: True
    test 1766 Mgrs() class: True
    test 1767 Mgrs4Tuple() class: True
    test 1768 Mgrs6Tuple() class: True
    test 1769 NN str: True
    test 1770 NearestOn3Tuple() class: True
    test 1771 NearestOn5Tuple() class: True
    test 1772 Ned() class: True
    test 1773 Ned3Tuple() class: True
    test 1774 Ned4Tuple() class: True
    test 1775 Neighbors8Dict() class: True
    test 1776 Northing() class: True
    test 1777 NumPyError() class: True
    test 1778 Number_() class: True
    test 1779 Numpy2LatLon() class: True
    test 1780 OSGRError() class: True
    test 1781 Orthographic() class: True
    test 1782 Osgr() class: True
    test 1783 PGMError() class: True
    test 1784 ParseError() class: True
    test 1785 Phi() class: True
    test 1786 PhiLam2Tuple() class: True
    test 1787 PhiLam3Tuple() class: True
    test 1788 PhiLam4Tuple() class: True
    test 1789 Phi_() class: True
    test 1790 Point3Tuple() class: True
    test 1791 Points2Tuple() class: True
    test 1792 PointsError() class: True
    test 1793 PointsIter() class: True
    test 1794 PolygonArea() class: True
    test 1795 Precision_() class: True
    test 1796 Property() class: True
    test 1797 Property_RO() class: True
    test 1798 R_FM float: True
    test 1799 R_GM float: True
    test 1800 R_KM float: True
    test 1801 R_M float: True
    test 1802 R_MA float: True
    test 1803 R_MB float: True
    test 1804 R_NM float: True
    test 1805 R_SM float: True
    test 1806 R_VM float: True
    test 1807 Radians() class: True
    test 1808 Radians2() class: True
    test 1809 Radians_() class: True
    test 1810 Radical2Tuple() class: True
    test 1811 Radius() class: True
    test 1812 Radius_() class: True
    test 1813 RangeError() class: True
    test 1814 RefFrame() class: True
    test 1815 RefFrameError() class: True
    test 1816 RefFrames class pygeodesy.trf.RefFrames: True
    test 1817 Resolutions2Tuple() class: True
    test 1818 S_RAD str: True
    test 1819 S_SEP str: True
    test 1820 Scalar() class: True
    test 1821 Scalar_() class: True
    test 1822 SciPyError() class: True
    test 1823 SciPyWarning() class: True
    test 1824 Shape2Tuple() class: True
    test 1825 Stereographic() class: True
    test 1826 Str() class: True
    test 1827 TRFError() class: True
    test 1828 Transform() class: True
    test 1829 Transform7Tuple() class: True
    test 1830 Transforms class pygeodesy.datums.Transforms: True
    test 1831 Triangle7Tuple() class: True
    test 1832 Triangle8Tuple() class: True
    test 1833 Trilaterate5Tuple() class: True
    test 1834 Tuple2LatLon() class: True
    test 1835 UPSError() class: True
    test 1836 UTMError() class: True
    test 1837 UTMUPSError() class: True
    test 1838 UnitError() class: True
    test 1839 Ups() class: True
    test 1840 Utm() class: True
    test 1841 UtmUps() function: True
    test 1842 UtmUps2Tuple() class: True
    test 1843 UtmUps4Tuple() class: True
    test 1844 UtmUps5Tuple() class: True
    test 1845 UtmUps8Tuple() class: True
    test 1846 UtmUpsLatLon5Tuple() class: True
    test 1847 Vector2Tuple() class: True
    test 1848 Vector3Tuple() class: True
    test 1849 Vector3d() class: True
    test 1850 Vector4Tuple() class: True
    test 1851 VectorError() class: True
    test 1852 VincentyError() class: True
    test 1853 WGRSError() class: True
    test 1854 WebMercatorError() class: True
    test 1855 Wm() class: True
    test 1856 Xyz4Tuple() class: True
    test 1857 XyzLocal() class: True
    test 1858 Zone() class: True
    test 1859 a_b2e() function: True
    test 1860 a_b2e2() function: True
    test 1861 a_b2e22() function: True
    test 1862 a_b2e32() function: True
    test 1863 a_b2f() function: True
    test 1864 a_b2f2() function: True
    test 1865 a_b2f_() function: True
    test 1866 a_b2n() function: True
    test 1867 a_f2Tuple() class: True
    test 1868 a_f2b() function: True
    test 1869 a_f_2b() function: True
    test 1870 acos1() function: True
    test 1871 acre2ha() function: True
    test 1872 acre2m2() function: True
    test 1873 anStr() function: True
    test 1874 anstr() function: True
    test 1875 antipode() function: True
    test 1876 antipode_() function: True
    test 1877 areaOf() function: True
    test 1878 areaof() function: True
    test 1879 asin1() function: True
    test 1880 atan2b() function: True
    test 1881 atan2d() function: True
    test 1882 atand() function: True
    test 1883 attrs() function: True
    test 1884 b_f2a() function: True
    test 1885 b_f_2a() function: True
    test 1886 bearing() function: True
    test 1887 bearingDMS() function: True
    test 1888 bearing_() function: True
    test 1889 bounds() function: True
    test 1890 boundsOf() function: True
    test 1891 callername() function: True
    test 1892 cbrt() function: True
    test 1893 cbrt2() function: True
    test 1894 centroidOf() function: True
    test 1895 chain2m() function: True
    test 1896 circle4() function: True
    test 1897 circum3() function: True
    test 1898 classname() function: True
    test 1899 classnaming() function: True
    test 1900 clipCS3() function: True
    test 1901 clipCS4() function: True
    test 1902 clipDMS() function: True
    test 1903 clipDegrees() function: True
    test 1904 clipLB6() function: True
    test 1905 clipRadians() function: True
    test 1906 clipSH() function: True
    test 1907 clipSH3() function: True
    test 1908 clipStr() function: True
    test 1909 clips() function: True
    test 1910 compassAngle() function: True
    test 1911 compassDMS() function: True
    test 1912 compassPoint() function: True
    test 1913 copysign0() function: True
    test 1914 copytype() function: True
    test 1915 cosineAndoyerLambert() function: True
    test 1916 cosineAndoyerLambert_() function: True
    test 1917 cosineForsytheAndoyerLambert() function: True
    test 1918 cosineForsytheAndoyerLambert_() function: True
    test 1919 cosineLaw() function: True
    test 1920 cosineLaw_() function: True
    test 1921 crosserrors() function: True
    test 1922 date2epoch() function: True
    test 1923 decodeEPSG2() function: True
    test 1924 degDMS() function: True
    test 1925 degrees180() function: True
    test 1926 degrees2grades() function: True
    test 1927 degrees2m() function: True
    test 1928 degrees360() function: True
    test 1929 degrees90() function: True
    test 1930 deprecated_Property_RO() function: True
    test 1931 deprecated_class() function: True
    test 1932 deprecated_function() function: True
    test 1933 deprecated_method() function: True
    test 1934 deprecated_property_RO() function: True
    test 1935 egmGeoidHeights() function: True
    test 1936 elevation2() function: True
    test 1937 enStr2() function: True
    test 1938 encodeEPSG() function: True
    test 1939 enstr2() function: True
    test 1940 epoch2date() function: True
    test 1941 equidistant() function: True
    test 1942 equirectangular() function: True
    test 1943 equirectangular3() function: True
    test 1944 equirectangular_() function: True
    test 1945 euclid() function: True
    test 1946 euclid_() function: True
    test 1947 euclidean() function: True
    test 1948 euclidean_() function: True
    test 1949 exception_chaining() function: True
    test 1950 excessAbc() function: True
    test 1951 excessGirard() function: True
    test 1952 excessKarney() function: True
    test 1953 excessKarney_() function: True
    test 1954 excessLHuilier() function: True
    test 1955 excessQuad() function: True
    test 1956 excessQuad_() function: True
    test 1957 f2e2() function: True
    test 1958 f2e22() function: True
    test 1959 f2e32() function: True
    test 1960 f2f2() function: True
    test 1961 f2f_() function: True
    test 1962 f2n() function: True
    test 1963 fStr() function: True
    test 1964 fStrzs() function: True
    test 1965 f_2f() function: True
    test 1966 facos1() function: True
    test 1967 false2f() function: True
    test 1968 falsed2f() function: True
    test 1969 fasin1() function: True
    test 1970 fatan() function: True
    test 1971 fatan1() function: True
    test 1972 fatan2() function: True
    test 1973 fathom2m() function: True
    test 1974 favg() function: True
    test 1975 fdot() function: True
    test 1976 fdot3() function: True
    test 1977 fhorner() function: True
    test 1978 fidw() function: True
    test 1979 flatLocal() function: True
    test 1980 flatLocal_() function: True
    test 1981 flatPolar() function: True
    test 1982 flatPolar_() function: True
    test 1983 fmean() function: True
    test 1984 fmean_() function: True
    test 1985 fpolynomial() function: True
    test 1986 fpowers() function: True
    test 1987 fprod() function: True
    test 1988 fractional() function: True
    test 1989 frange() function: True
    test 1990 frechet_() function: True
    test 1991 freduce type builtin_function_or_method: True
    test 1992 fstr() function: True
    test 1993 fstrzs() function: True
    test 1994 fsum2() function: True
    test 1995 fsum_() function: True
    test 1996 ft2m() function: True
    test 1997 furlong2m() function: True
    test 1998 geoidHeight2() function: True
    test 1999 gnomonic() function: True
    test 2000 grades() function: True
    test 2001 grades2degrees() function: True
    test 2002 grades2radians() function: True
    test 2003 grades400() function: True
    test 2004 halfs2() function: True
    test 2005 hausdorff_() function: True
    test 2006 haversine() function: True
    test 2007 haversine_() function: True
    test 2008 heightOf() function: True
    test 2009 horizon() function: True
    test 2010 hstr() function: True
    test 2011 hubeny() function: True
    test 2012 hubeny_() function: True
    test 2013 hypot1() function: True
    test 2014 hypot2() function: True
    test 2015 hypot2_() function: True
    test 2016 hypot3() function: True
    test 2017 hypot_() function: True
    test 2018 inStr() function: True
    test 2019 instr() function: True
    test 2020 intersection3d3() function: True
    test 2021 intersections2() function: True
    test 2022 isNumpy2() function: True
    test 2023 isPoints2() function: True
    test 2024 isTuple2() function: True
    test 2025 isantipode() function: True
    test 2026 isantipode_() function: True
    test 2027 isbool() function: True
    test 2028 isclass() function: True
    test 2029 isclockwise() function: True
    test 2030 iscolinearWith() function: True
    test 2031 isconvex() function: True
    test 2032 isconvex_() function: True
    test 2033 isenclosedBy() function: True
    test 2034 isenclosedby() function: True
    test 2035 isfinite() function: True
    test 2036 isidentifier() function: True
    test 2037 isint() function: True
    test 2038 iskeyword type builtin_function_or_method: True
    test 2039 isnear0() function: True
    test 2040 isneg0() function: True
    test 2041 isnon0() function: True
    test 2042 isodd() function: True
    test 2043 ispolar() function: True
    test 2044 isscalar() function: True
    test 2045 issequence() function: True
    test 2046 isstr() function: True
    test 2047 issubclassof() function: True
    test 2048 iterNumpy2() function: True
    test 2049 iterNumpy2over() function: True
    test 2050 joined() function: True
    test 2051 joined_() function: True
    test 2052 latDMS() function: True
    test 2053 latlon2n_xyz() function: True
    test 2054 latlonDMS() function: True
    test 2055 len2() function: True
    test 2056 limiterrors() function: True
    test 2057 lonDMS() function: True
    test 2058 luneOf() function: True
    test 2059 m2NM() function: True
    test 2060 m2SM() function: True
    test 2061 m2degrees() function: True
    test 2062 m2ft() function: True
    test 2063 m2km() function: True
    test 2064 m2radians() function: True
    test 2065 m2yard() function: True
    test 2066 map1() function: True
    test 2067 map2() function: True
    test 2068 meeus2() function: True
    test 2069 modulename() function: True
    test 2070 n2e2() function: True
    test 2071 n2f() function: True
    test 2072 n2f_() function: True
    test 2073 n_xyz2latlon() function: True
    test 2074 n_xyz2philam() function: True
    test 2075 nameof() function: True
    test 2076 nearestOn3() function: True
    test 2077 nearestOn4() function: True
    test 2078 nearestOn5() function: True
    test 2079 neg() function: True
    test 2080 neg_() function: True
    test 2081 norm2() function: True
    test 2082 normDMS() function: True
    test 2083 norm_() function: True
    test 2084 notImplemented() function: True
    test 2085 notOverloaded() function: True
    test 2086 pairs() function: True
    test 2087 parse3d() function: True
    test 2088 parse3llh() function: True
    test 2089 parseDDDMMSS() function: True
    test 2090 parseDMS() function: True
    test 2091 parseDMS2() function: True
    test 2092 parseETM5() function: True
    test 2093 parseMGRS() function: True
    test 2094 parseOSGR() function: True
    test 2095 parseRad() function: True
    test 2096 parseUPS5() function: True
    test 2097 parseUTM() function: True
    test 2098 parseUTM5() function: True
    test 2099 parseUTMUPS5() function: True
    test 2100 parseWM() function: True
    test 2101 perimeterOf() function: True
    test 2102 perimeterof() function: True
    test 2103 philam2n_xyz() function: True
    test 2104 points2() function: True
    test 2105 polygon() function: True
    test 2106 precision() function: True
    test 2107 print_() function: True
    test 2108 printf() function: True
    test 2109 property_RO() class: True
    test 2110 property_doc_() function: True
    test 2111 quadOf() function: True
    test 2112 radians2m() function: True
    test 2113 radiansPI() function: True
    test 2114 radiansPI2() function: True
    test 2115 radiansPI_2() function: True
    test 2116 radical2() function: True
    test 2117 randomrangenerator() function: True
    test 2118 rangerrors() function: True
    test 2119 reprs() function: True
    test 2120 scalar() function: True
    test 2121 signOf() function: True
    test 2122 simplify1() function: True
    test 2123 simplify2() function: True
    test 2124 simplifyRDP() function: True
    test 2125 simplifyRDPm() function: True
    test 2126 simplifyRW() function: True
    test 2127 simplifyVW() function: True
    test 2128 simplifyVWm() function: True
    test 2129 sincos2() function: True
    test 2130 sincos2d() function: True
    test 2131 splice() function: True
    test 2132 sqrt0() function: True
    test 2133 sqrt3() function: True
    test 2134 strs() function: True
    test 2135 tanPI_2_2() function: True
    test 2136 tan_2() function: True
    test 2137 thomas() function: True
    test 2138 thomas_() function: True
    test 2139 toCss() function: True
    test 2140 toDMS() function: True
    test 2141 toEtm8() function: True
    test 2142 toLcc() function: True
    test 2143 toMgrs() function: True
    test 2144 toOsgr() function: True
    test 2145 toUps8() function: True
    test 2146 toUtm() function: True
    test 2147 toUtm8() function: True
    test 2148 toUtmUps8() function: True
    test 2149 toWm() function: True
    test 2150 trfXform() function: True
    test 2151 trilaterate2d2() function: True
    test 2152 trilaterate3d2() function: True
    test 2153 ub2str() function: True
    test 2154 unStr() function: True
    test 2155 unroll180() function: True
    test 2156 unrollPI() function: True
    test 2157 unsign0() function: True
    test 2158 unstr() function: True
    test 2159 upsZoneBand5() function: True
    test 2160 utmZoneBand2() function: True
    test 2161 utmZoneBand5() function: True
    test 2162 utmupsValidate() function: True
    test 2163 utmupsValidateOK() function: True
    test 2164 utmupsZoneBand5() function: True
    test 2165 vincentys() function: True
    test 2166 vincentys_() function: True
    test 2167 wrap180() function: True
    test 2168 wrap360() function: True
    test 2169 wrap90() function: True
    test 2170 wrapPI() function: True
    test 2171 wrapPI2() function: True
    test 2172 wrapPI_2() function: True
    test 2173 yard2m() function: True

    all 2173 testModules.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 41.792 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testNamed.py

    testing testNamed.py 21.03.26

    testing _Named() (pygeodesy.named, 21.06.27)
    test 1 _Named: _Named
    test 2 _Named: True
    test 3 _Named: ''
    test 4 Test: Test
    test 5 _Named 'Test': _Named 'Test'
    test 6 _Named 'Test': Test
    test 7 _Named 'Test': Test
    test 8 _Named 'Test': _Named 'Test'
    test 9 _Named 'Test': <_Named 'Test' at 0x1182c7c50>  FAILED, KNOWN, expected _Named 'Test'
    test 10 _Named 'Test': 

    testing _NamedBase() (pygeodesy.named, 21.06.27)
    test 11 _NamedBase: _NamedBase
    test 12 _NamedBase: True
    test 13 _NamedBase: ''
    test 14 Test: Test
    test 15 _NamedBase 'Test': _NamedBase 'Test'
    test 16 _NamedBase 'Test': Test
    test 17 _NamedBase 'Test': Test
    test 18 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 19 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 20 _NamedBase 'Test': 

    testing _NamedDict() (pygeodesy.named, 21.06.27)
    test 21 _NamedDict: _NamedDict
    test 22 _NamedDict: True
    test 23 _NamedDict: ''
    test 24 Test: Test
    test 25 _NamedDict 'Test': _NamedDict 'Test'
    test 26 _NamedDict 'Test': Test
    test 27 _NamedDict 'Test': Test
    test 28 _NamedDict 'Test': {}
    test 29 _NamedDict 'Test': Test()  FAILED, KNOWN, expected {}
    test 30 _NamedDict: 

    testing _NamedEnum(<class 'pygeodesy.datums.Datum'>,) (pygeodesy.named, 21.06.27)
    test 31 Datums: _NamedEnum
    test 32 Datums: True
    test 33 Datums: 'Datums'  FAILED, KNOWN, expected ''
    test 34 Test: Test
    test 35 _NamedEnum 'Test': _NamedEnum 'Test'
    test 36 _NamedEnum 'Test': Test
    test 37 _NamedEnum 'Test': Test
    test 38 _NamedEnum 'Test': Test.
    test 39 _NamedEnum 'Test':   FAILED, KNOWN, expected Test.
    test 40 _NamedEnum: 

    testing _NamedEnumItem() (pygeodesy.named, 21.06.27)
    test 41 _NamedEnumItem: _NamedEnumItem
    test 42 _NamedEnumItem: True
    test 43 _NamedEnumItem: ''
    test 44 Test: Test
    test 45 _NamedEnumItem 'Test': _NamedEnumItem 'Test'
    test 46 _NamedEnumItem 'Test': Test
    test 47 _NamedEnumItem 'Test': Test
    test 48 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 49 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 50 _NamedEnumItem 'Test': 

    testing LatLon2Tuple(0, 0) (pygeodesy.named, 21.06.27)
    test 51 LatLon2Tuple: LatLon2Tuple
    test 52 LatLon2Tuple: True
    test 53 LatLon2Tuple: ''
    test 54 Test: Test
    test 55 LatLon2Tuple 'Test': LatLon2Tuple 'Test'
    test 56 LatLon2Tuple 'Test': Test
    test 57 LatLon2Tuple 'Test': Test
    test 58 LatLon2Tuple 'Test': (0, 0)
    test 59 LatLon2Tuple 'Test': Test(lat=0, lon=0)  FAILED, KNOWN, expected (0, 0)
    test 60 LatLon2Tuple 'Test': 

    testing NamedDicts (pygeodesy.named, 21.06.27)
    test 61 Neighbors8Dict: Neighbors8Dict
    test 62 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 63 Neighbors8Dict: 8

    testing NamedTuples (pygeodesy.namedTuples, 21.06.23)
    test 64 Albers7Tuple: Albers7Tuple
    test 65 Albers7Tuple: 7-Tuple C{(x, y, lat, lon, gamma, scale, datum)}
    test 66 Albers7Tuple: 7
    test 67 Azimuthal7Tuple: Azimuthal7Tuple
    test 68 Azimuthal7Tuple: 7-Tuple C{(x, y, lat, lon, azimuth, scale, datum)}
    test 69 Azimuthal7Tuple: 7
    test 70 ClipCS4Tuple: ClipCS4Tuple
    test 71 ClipCS4Tuple: 4-Tuple C{(start, end, i, j)}
    test 72 ClipCS4Tuple: 4
    test 73 ClipLB6Tuple: ClipLB6Tuple
    test 74 ClipLB6Tuple: 6-Tuple C{(start, end, i, fi, fj, j)}
    test 75 ClipLB6Tuple: 6
    test 76 ClipSH3Tuple: ClipSH3Tuple
    test 77 ClipSH3Tuple: 3-Tuple C{(start, end, original)}
    test 78 ClipSH3Tuple: 3
    test 79 EasNorAziRk4Tuple: EasNorAziRk4Tuple
    test 80 EasNorAziRk4Tuple: 4-Tuple C{(easting, northing, azimuth, reciprocal)}
    test 81 EasNorAziRk4Tuple: 4
    test 82 LatLonAziRk4Tuple: LatLonAziRk4Tuple
    test 83 LatLonAziRk4Tuple: 4-Tuple C{(lat, lon, azimuth, reciprocal)}
    test 84 LatLonAziRk4Tuple: 4
    test 85 Ecef9Tuple: Ecef9Tuple
    test 86 Ecef9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, C, M, datum)}
    test 87 Ecef9Tuple: 9
    test 88 Elevation2Tuple: Elevation2Tuple
    test 89 Elevation2Tuple: 2-Tuple C{(elevation, data_source)}
    test 90 Elevation2Tuple: 2
    test 91 GeoidHeight2Tuple: GeoidHeight2Tuple
    test 92 GeoidHeight2Tuple: 2-Tuple C{(height, model_name)}
    test 93 GeoidHeight2Tuple: 2
    test 94 Ned3Tuple: Ned3Tuple
    test 95 Ned3Tuple: 3-Tuple C{(north, east, down)}
    test 96 Ned3Tuple: 3
    test 97 Circle4Tuple: Circle4Tuple
    test 98 Circle4Tuple: 4-Tuple C{(radius, height, lat, beta)}
    test 99 Circle4Tuple: 4
    test 100 Curvature2Tuple: Curvature2Tuple
    test 101 Curvature2Tuple: 2-Tuple C{(meridional, prime_vertical)}
    test 102 Curvature2Tuple: 2
    test 103 a_f2Tuple: a_f2Tuple
    test 104 a_f2Tuple: 2-Tuple C{(a, f)}
    test 105 a_f2Tuple: 2
    test 106 Elliptic3Tuple: Elliptic3Tuple
    test 107 Elliptic3Tuple: 3-Tuple C{(sn, cn, dn)}
    test 108 Elliptic3Tuple: 3
    test 109 EasNorExact4Tuple: EasNorExact4Tuple
    test 110 EasNorExact4Tuple: 4-Tuple C{(easting, northing, convergence, scale)}
    test 111 EasNorExact4Tuple: 4
    test 112 LatLonExact4Tuple: LatLonExact4Tuple
    test 113 LatLonExact4Tuple: 4-Tuple C{(lat, lon, convergence, scale)}
    test 114 LatLonExact4Tuple: 4
    test 115 Radical2Tuple: Radical2Tuple
    test 116 Radical2Tuple: 2-Tuple C{(ratio, xline)}
    test 117 Radical2Tuple: 2
    test 118 Frechet6Tuple: Frechet6Tuple
    test 119 Frechet6Tuple: 6-Tuple C{(fd, fi1, fi2, r, n, units)}
    test 120 Frechet6Tuple: 6
    test 121 Resolutions2Tuple: Resolutions2Tuple
    test 122 Resolutions2Tuple: 2-Tuple C{(res1, res2)}
    test 123 Resolutions2Tuple: 2
    test 124 GeoidHeight5Tuple: GeoidHeight5Tuple
    test 125 GeoidHeight5Tuple: 5-Tuple C{(lat, lon, egm84, egm96, egm2008)}
    test 126 GeoidHeight5Tuple: 5
    test 127 Hausdorff6Tuple: Hausdorff6Tuple
    test 128 Hausdorff6Tuple: 6-Tuple C{(hd, i, j, mn, md, units)}
    test 129 Hausdorff6Tuple: 6
    test 130 Direct9Tuple: Direct9Tuple
    test 131 Direct9Tuple: 9-Tuple C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 132 Direct9Tuple: 9
    test 133 GeodSolve12Tuple: GeodSolve12Tuple
    test 134 GeodSolve12Tuple: 12-Tuple C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 135 GeodSolve12Tuple: 12
    test 136 Inverse10Tuple: Inverse10Tuple
    test 137 Inverse10Tuple: 10-Tuple C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 138 Inverse10Tuple: 10
    test 139 Aer4Tuple: Aer4Tuple
    test 140 Aer4Tuple: 4-Tuple C{(azimuth, elevation, slantrange, ltp)}
    test 141 Aer4Tuple: 4
    test 142 Enu4Tuple: Enu4Tuple
    test 143 Enu4Tuple: 4-Tuple C{(east, north, up, ltp)}
    test 144 Enu4Tuple: 4
    test 145 Footprint5Tuple: Footprint5Tuple
    test 146 Footprint5Tuple: 5-Tuple C{(center, upperleft, upperight, loweright, lowerleft)}
    test 147 Footprint5Tuple: 5
    test 148 Local9Tuple: Local9Tuple
    test 149 Local9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 150 Local9Tuple: 9
    test 151 Ned4Tuple: Ned4Tuple
    test 152 Ned4Tuple: 4-Tuple C{(north, east, down, ltp)}
    test 153 Ned4Tuple: 4
    test 154 Xyz4Tuple: Xyz4Tuple
    test 155 Xyz4Tuple: 4-Tuple C{(x, y, z, ltp)}
    test 156 Xyz4Tuple: 4
    test 157 Mgrs4Tuple: Mgrs4Tuple
    test 158 Mgrs4Tuple: 4-Tuple C{(zone, digraph, easting, northing)}
    test 159 Mgrs4Tuple: 4
    test 160 Mgrs6Tuple: Mgrs6Tuple
    test 161 Mgrs6Tuple: 6-Tuple C{(zone, digraph, easting, northing, band, datum)}
    test 162 Mgrs6Tuple: 6
    test 163 Bearing2Tuple: Bearing2Tuple
    test 164 Bearing2Tuple: 2-Tuple C{(initial, final)}
    test 165 Bearing2Tuple: 2
    test 166 Bounds2Tuple: Bounds2Tuple
    test 167 Bounds2Tuple: 2-Tuple C{(latlonSW, latlonNE)}
    test 168 Bounds2Tuple: 2
    test 169 Bounds4Tuple: Bounds4Tuple
    test 170 Bounds4Tuple: 4-Tuple C{(latS, lonW, latN, lonE)}
    test 171 Bounds4Tuple: 4
    test 172 Destination2Tuple: Destination2Tuple
    test 173 Destination2Tuple: 2-Tuple C{(destination, final)}
    test 174 Destination2Tuple: 2
    test 175 Destination3Tuple: Destination3Tuple
    test 176 Destination3Tuple: 3-Tuple C{(lat, lon, final)}
    test 177 Destination3Tuple: 3
    test 178 Distance2Tuple: Distance2Tuple
    test 179 Distance2Tuple: 2-Tuple C{(distance, initial)}
    test 180 Distance2Tuple: 2
    test 181 Distance3Tuple: Distance3Tuple
    test 182 Distance3Tuple: 3-Tuple C{(distance, initial, final)}
    test 183 Distance3Tuple: 3
    test 184 Distance4Tuple: Distance4Tuple
    test 185 Distance4Tuple: 4-Tuple C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 186 Distance4Tuple: 4
    test 187 EasNor2Tuple: EasNor2Tuple
    test 188 EasNor2Tuple: 2-Tuple C{(easting, northing)}
    test 189 EasNor2Tuple: 2
    test 190 EasNor3Tuple: EasNor3Tuple
    test 191 EasNor3Tuple: 3-Tuple C{(easting, northing, height)}
    test 192 EasNor3Tuple: 3
    test 193 Intersection3Tuple: Intersection3Tuple
    test 194 Intersection3Tuple: 3-Tuple C{(point, outside1, outside2)}
    test 195 Intersection3Tuple: 3
    test 196 LatLon2Tuple: LatLon2Tuple
    test 197 LatLon2Tuple: 2-Tuple C{(lat, lon)}
    test 198 LatLon2Tuple: 2
    test 199 LatLon3Tuple: LatLon3Tuple
    test 200 LatLon3Tuple: 3-Tuple C{(lat, lon, height)}
    test 201 LatLon3Tuple: 3
    test 202 LatLon4Tuple: LatLon4Tuple
    test 203 LatLon4Tuple: 4-Tuple C{(lat, lon, height, datum)}
    test 204 LatLon4Tuple: 4
    test 205 LatLonDatum3Tuple: LatLonDatum3Tuple
    test 206 LatLonDatum3Tuple: 3-Tuple C{(lat, lon, datum)}
    test 207 LatLonDatum3Tuple: 3
    test 208 LatLonDatum5Tuple: LatLonDatum5Tuple
    test 209 LatLonDatum5Tuple: 5-Tuple C{(lat, lon, datum, convergence, scale)}
    test 210 LatLonDatum5Tuple: 5
    test 211 LatLonPrec3Tuple: LatLonPrec3Tuple
    test 212 LatLonPrec3Tuple: 3-Tuple C{(lat, lon, precision)}
    test 213 LatLonPrec3Tuple: 3
    test 214 LatLonPrec5Tuple: LatLonPrec5Tuple
    test 215 LatLonPrec5Tuple: 5-Tuple C{(lat, lon, precision, height, radius)}
    test 216 LatLonPrec5Tuple: 5
    test 217 NearestOn3Tuple: NearestOn3Tuple
    test 218 NearestOn3Tuple: 3-Tuple C{(closest, distance, angle)}
    test 219 NearestOn3Tuple: 3
    test 220 PhiLam2Tuple: PhiLam2Tuple
    test 221 PhiLam2Tuple: 2-Tuple C{(phi, lam)}
    test 222 PhiLam2Tuple: 2
    test 223 PhiLam3Tuple: PhiLam3Tuple
    test 224 PhiLam3Tuple: 3-Tuple C{(phi, lam, height)}
    test 225 PhiLam3Tuple: 3
    test 226 PhiLam4Tuple: PhiLam4Tuple
    test 227 PhiLam4Tuple: 4-Tuple C{(phi, lam, height, datum)}
    test 228 PhiLam4Tuple: 4
    test 229 Point3Tuple: Point3Tuple
    test 230 Point3Tuple: 3-Tuple C{(x, y, ll)}
    test 231 Point3Tuple: 3
    test 232 Points2Tuple: Points2Tuple
    test 233 Points2Tuple: 2-Tuple C{(number, points)}
    test 234 Points2Tuple: 2
    test 235 Triangle7Tuple: Triangle7Tuple
    test 236 Triangle7Tuple: 7-Tuple C{(A, a, B, b, C, c, area)}
    test 237 Triangle7Tuple: 7
    test 238 Triangle8Tuple: Triangle8Tuple
    test 239 Triangle8Tuple: 8-Tuple C{(A, a, B, b, C, c, D, E)}
    test 240 Triangle8Tuple: 8
    test 241 Trilaterate5Tuple: Trilaterate5Tuple
    test 242 Trilaterate5Tuple: 5-Tuple C{(min, minPoint, max, maxPoint, n)}
    test 243 Trilaterate5Tuple: 5
    test 244 UtmUps2Tuple: UtmUps2Tuple
    test 245 UtmUps2Tuple: 2-Tuple C{(zone, hemipole)}
    test 246 UtmUps2Tuple: 2
    test 247 UtmUps5Tuple: UtmUps5Tuple
    test 248 UtmUps5Tuple: 5-Tuple C{(zone, hemipole, easting, northing, band)}
    test 249 UtmUps5Tuple: 5
    test 250 UtmUps8Tuple: UtmUps8Tuple
    test 251 UtmUps8Tuple: 8-Tuple C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 252 UtmUps8Tuple: 8
    test 253 UtmUpsLatLon5Tuple: UtmUpsLatLon5Tuple
    test 254 UtmUpsLatLon5Tuple: 5-Tuple C{(zone, band, hemipole, lat, lon)}
    test 255 UtmUpsLatLon5Tuple: 5
    test 256 Vector2Tuple: Vector2Tuple
    test 257 Vector2Tuple: 2-Tuple C{(x, y)}
    test 258 Vector2Tuple: 2
    test 259 Vector3Tuple: Vector3Tuple
    test 260 Vector3Tuple: 3-Tuple C{(x, y, z)}
    test 261 Vector3Tuple: 3
    test 262 Vector4Tuple: Vector4Tuple
    test 263 Vector4Tuple: 4-Tuple C{(x, y, z, h)}
    test 264 Vector4Tuple: 4
    test 265 NearestOn5Tuple: NearestOn5Tuple
    test 266 NearestOn5Tuple: 5-Tuple C{(lat, lon, distance, angle, height)}
    test 267 NearestOn5Tuple: 5
    test 268 Shape2Tuple: Shape2Tuple
    test 269 Shape2Tuple: 2-Tuple C{(nrows, ncols)}
    test 270 Shape2Tuple: 2
    test 271 Transform7Tuple: Transform7Tuple
    test 272 Transform7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 273 Transform7Tuple: 7
    test 274 Circum3Tuple: Circum3Tuple
    test 275 Circum3Tuple: 3-Tuple C{(radius, center, deltas)}
    test 276 Circum3Tuple: 3
    test 277 Meeus2Tuple: Meeus2Tuple
    test 278 Meeus2Tuple: 2-Tuple C{(radius, Type)}
    test 279 Meeus2Tuple: 2
    test 280 EasNorRadius3Tuple: EasNorRadius3Tuple
    test 281 EasNorRadius3Tuple: 3-Tuple C{(easting, northing, radius)}
    test 282 EasNorRadius3Tuple: 3

    testing albers.py (pygeodesy.named, 21.06.27)
    test 283 albers.py:294: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}
    test 284 albers.py:406: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}

    testing azimuthal.py (pygeodesy.named, 21.06.27)
    test 285 azimuthal.py:168: L{LatLon2Tuple}C{(lat, lon)}
    test 286 azimuthal.py:331: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 287 azimuthal.py:364: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 288 azimuthal.py:453: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 289 azimuthal.py:480: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 290 azimuthal.py:629: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 291 azimuthal.py:655: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 292 azimuthal.py:720: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 293 azimuthal.py:761: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 294 azimuthal.py:926: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 295 azimuthal.py:953: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 296 azimuthal.py:986: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 297 azimuthal.py:1010: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 298 azimuthal.py:1044: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 299 azimuthal.py:1084: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}

    testing basics.py (pygeodesy.named, 21.06.27)

    testing cartesianBase.py (pygeodesy.named, 21.06.27)
    test 300 cartesianBase.py:122: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 301 cartesianBase.py:182: L{LatLon2Tuple}C{(lat, lon)}
    test 302 cartesianBase.py:188: L{LatLon3Tuple}C{(lat, lon, height)}
    test 303 cartesianBase.py:194: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 304 cartesianBase.py:257: L{PhiLam2Tuple}C{(phi, lam)}
    test 305 cartesianBase.py:263: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 306 cartesianBase.py:269: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 307 cartesianBase.py:277: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 308 cartesianBase.py:332: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 309 cartesianBase.py:352: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 310 cartesianBase.py:383: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 311 cartesianBase.py:415: L{Vector4Tuple}C{(x, y, z, h)}
    test 312 cartesianBase.py:453: L{Vector3Tuple}C{(x, y, z)}

    testing clipy.py (pygeodesy.named, 21.06.27)
    test 313 clipy.py:191: L{ClipCS4Tuple}C{(start, end, i, j)}
    test 314 clipy.py:257: L{ClipLB6Tuple}C{(start, end, i, fi, fj, j)}
    test 315 clipy.py:564: L{ClipSH3Tuple}C{(start, end, original)}

    testing css.py (pygeodesy.named, 21.06.27)
    test 316 css.py:125: L{EasNor2Tuple}C{(easting, northing)}
    test 317 css.py:143: L{EasNorAziRk4Tuple}C{(easting, northing, azimuth, reciprocal)}
    test 318 css.py:199: L{LatLon2Tuple}C{(lat, lon)}
    test 319 css.py:257: L{LatLon2Tuple}C{(lat, lon)}
    test 320 css.py:284: L{LatLonAziRk4Tuple}C{(lat, lon, azimuth, reciprocal)}
    test 321 css.py:430: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 322 css.py:514: L{EasNor3Tuple}C{(easting, northing, height)}

    testing datums.py (pygeodesy.named, 21.06.27)
    test 323 datums.py:220: L{Vector3Tuple}C{(x, y, z)}

    testing dms.py (pygeodesy.named, 21.06.27)
    test 324 dms.py:611: L{LatLon2Tuple}C{(lat, lon)}
    test 325 dms.py:645: L{LatLon3Tuple}C{(lat, lon, height)}

    testing ecef.py (pygeodesy.named, 21.06.27)
    test 326 ecef.py:253: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 327 ecef.py:324: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 328 ecef.py:359: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 329 ecef.py:496: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 330 ecef.py:565: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 331 ecef.py:619: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 332 ecef.py:705: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 333 ecef.py:786: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 334 ecef.py:1045: L{LatLon2Tuple}C{(lat, lon)}
    test 335 ecef.py:1051: L{LatLon3Tuple}C{(lat, lon, height)}
    test 336 ecef.py:1057: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 337 ecef.py:1063: L{LatLon2Tuple}C{(lat, lon)}
    test 338 ecef.py:1094: L{PhiLam2Tuple}C{(phi, lam)}
    test 339 ecef.py:1100: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 340 ecef.py:1106: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 341 ecef.py:1112: L{PhiLam2Tuple}C{(phi, lam)}
    test 342 ecef.py:1130: L{Vector4Tuple}C{(x, y, z, h)}
    test 343 ecef.py:1172: L{LatLon3Tuple}C{(lat, lon, height)}
    test 344 ecef.py:1173: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 345 ecef.py:1201: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 346 ecef.py:1218: L{Vector3Tuple}C{(x, y, z)}
    test 347 ecef.py:1227: L{Vector3Tuple}C{(x, y, z)}
    test 348 ecef.py:1233: L{Vector4Tuple}C{(x, y, z, h)}

    testing elevations.py (pygeodesy.named, 21.06.27)
    test 349 elevations.py:141: L{Elevation2Tuple}C{(elevation, data_source)}
    test 350 elevations.py:199: L{GeoidHeight2Tuple}C{(height, model_name)}

    testing ellipsoidalBase.py (pygeodesy.named, 21.06.27)
    test 351 ellipsoidalBase.py:197: L{Distance2Tuple}C{(distance, initial)}
    test 352 ellipsoidalBase.py:226: L{Elevation2Tuple}C{(elevation, data_source)}
    test 353 ellipsoidalBase.py:330: L{GeoidHeight2Tuple}C{(height, model_name)}
    test 354 ellipsoidalBase.py:367: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 355 ellipsoidalBase.py:823: L{Vector3Tuple}C{(x, y, z)}
    test 356 ellipsoidalBase.py:850: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}

    testing ellipsoidalBaseDI.py (pygeodesy.named, 21.06.27)
    test 357 ellipsoidalBaseDI.py:48: L{Bearing2Tuple}C{(initial, final)}
    test 358 ellipsoidalBaseDI.py:94: L{Destination2Tuple}C{(destination, final)}
    test 359 ellipsoidalBaseDI.py:102: L{Destination2Tuple}C{(destination, final)}
    test 360 ellipsoidalBaseDI.py:103: L{Destination3Tuple}C{(lat, lon, final)}
    test 361 ellipsoidalBaseDI.py:152: L{Distance3Tuple}C{(distance, initial, final)}
    test 362 ellipsoidalBaseDI.py:247: L{Distance3Tuple}C{(distance, initial, final)}

    testing ellipsoidalExact.py (pygeodesy.named, 21.06.27)
    test 363 ellipsoidalExact.py:41: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 364 ellipsoidalExact.py:83: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 365 ellipsoidalExact.py:140: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 366 ellipsoidalExact.py:142: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 367 ellipsoidalExact.py:180: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 368 ellipsoidalExact.py:256: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalGeodSolve.py (pygeodesy.named, 21.06.27)
    test 369 ellipsoidalGeodSolve.py:42: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 370 ellipsoidalGeodSolve.py:83: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 371 ellipsoidalGeodSolve.py:140: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 372 ellipsoidalGeodSolve.py:142: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 373 ellipsoidalGeodSolve.py:180: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 374 ellipsoidalGeodSolve.py:256: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalKarney.py (pygeodesy.named, 21.06.27)
    test 375 ellipsoidalKarney.py:63: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 376 ellipsoidalKarney.py:116: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 377 ellipsoidalKarney.py:180: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 378 ellipsoidalKarney.py:182: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 379 ellipsoidalKarney.py:225: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 380 ellipsoidalKarney.py:312: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalNvector.py (pygeodesy.named, 21.06.27)
    test 381 ellipsoidalNvector.py:70: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 382 ellipsoidalNvector.py:87: L{Vector4Tuple}C{(x, y, z, h)}
    test 383 ellipsoidalNvector.py:427: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 384 ellipsoidalNvector.py:444: L{Vector4Tuple}C{(x, y, z, h)}
    test 385 ellipsoidalNvector.py:552: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 386 ellipsoidalNvector.py:576: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 387 ellipsoidalNvector.py:617: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 388 ellipsoidalNvector.py:667: L{Ned3Tuple}C{(north, east, down)}

    testing ellipsoidalVincenty.py (pygeodesy.named, 21.06.27)
    test 389 ellipsoidalVincenty.py:113: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 390 ellipsoidalVincenty.py:205: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 391 ellipsoidalVincenty.py:417: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 392 ellipsoidalVincenty.py:419: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 393 ellipsoidalVincenty.py:462: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 394 ellipsoidalVincenty.py:517: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoids.py (pygeodesy.named, 21.06.27)
    test 395 ellipsoids.py:155: L{a_f2Tuple}C{(a, f)}
    test 396 ellipsoids.py:643: L{Circle4Tuple}C{(radius, height, lat, beta)}
    test 397 ellipsoids.py:705: L{Distance2Tuple}C{(distance, initial)}
    test 398 ellipsoids.py:1340: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 399 ellipsoids.py:1359: L{Curvature2Tuple}C{(meridional, prime_vertical)}

    testing elliptic.py (pygeodesy.named, 21.06.27)
    test 400 elliptic.py:674: L{Elliptic3Tuple}C{(sn, cn, dn)}

    testing epsg.py (pygeodesy.named, 21.06.27)
    test 401 epsg.py:146: L{UtmUps2Tuple}C{(zone, hemipole)}

    testing errors.py (pygeodesy.named, 21.06.27)

    testing etm.py (pygeodesy.named, 21.06.27)
    test 402 etm.py:218: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 403 etm.py:394: L{EasNorExact4Tuple}C{(easting, northing, convergence, scale)}
    test 404 etm.py:545: L{LatLonExact4Tuple}C{(lat, lon, convergence, scale)}
    test 405 etm.py:960: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 406 etm.py:998: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}

    testing fmath.py (pygeodesy.named, 21.06.27)

    testing formy.py (pygeodesy.named, 21.06.27)
    test 407 formy.py:43: L{LatLon2Tuple}C{(lat, lon)}
    test 408 formy.py:57: L{PhiLam2Tuple}C{(phi, lam)}
    test 409 formy.py:437: L{Distance4Tuple}C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 410 formy.py:965: L{LatLon2Tuple}C{(lat, lon)}
    test 411 formy.py:1061: L{Vector3Tuple}C{(x, y, z)}
    test 412 formy.py:1079: L{LatLon2Tuple}C{(lat, lon)}
    test 413 formy.py:1095: L{PhiLam2Tuple}C{(phi, lam)}
    test 414 formy.py:1110: L{Vector3Tuple}C{(x, y, z)}
    test 415 formy.py:1142: L{Radical2Tuple}C{(ratio, xline)}

    testing frechet.py (pygeodesy.named, 21.06.27)
    test 416 frechet.py:202: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}
    test 417 frechet.py:337: L{PhiLam2Tuple}C{(phi, lam)}
    test 418 frechet.py:977: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}

    testing gars.py (pygeodesy.named, 21.06.27)
    test 419 gars.py:212: L{LatLonPrec3Tuple}C{(lat, lon, precision)}

    testing geodsolve.py (pygeodesy.named, 21.06.27)
    test 420 geodsolve.py:416: L{Destination3Tuple}C{(lat, lon, final)}
    test 421 geodsolve.py:453: L{Distance3Tuple}C{(distance, initial, final)}

    testing geohash.py (pygeodesy.named, 21.06.27)
    test 422 geohash.py:373: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 423 geohash.py:807: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 424 geohash.py:240: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 425 geohash.py:241: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 426 geohash.py:366: L{LatLon2Tuple}C{(lat, lon)}
    test 427 geohash.py:383: L{PhiLam2Tuple}C{(phi, lam)}
    test 428 geohash.py:396: L{LatLon2Tuple}C{(lat, lon)}
    test 429 geohash.py:412: L{LatLon2Tuple}C{(lat, lon)}
    test 430 geohash.py:524: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 431 geohash.py:525: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 432 geohash.py:614: L{LatLon2Tuple}C{(lat, lon)}
    test 433 geohash.py:633: L{LatLon2Tuple}C{(lat, lon)}
    test 434 geohash.py:867: L{Resolutions2Tuple}C{(res1, res2)}
    test 435 geohash.py:895: L{LatLon2Tuple}C{(lat, lon)}

    testing geoids.py (pygeodesy.named, 21.06.27)
    test 436 geoids.py:389: L{LatLon3Tuple}C{(lat, lon, height)}
    test 437 geoids.py:452: L{LatLon3Tuple}C{(lat, lon, height)}
    test 438 geoids.py:489: L{LatLon3Tuple}C{(lat, lon, height)}
    test 439 geoids.py:508: L{LatLon3Tuple}C{(lat, lon, height)}
    test 440 geoids.py:530: L{LatLon3Tuple}C{(lat, lon, height)}
    test 441 geoids.py:644: L{LatLon3Tuple}C{(lat, lon, height)}
    test 442 geoids.py:663: L{LatLon3Tuple}C{(lat, lon, height)}
    test 443 geoids.py:1174: L{LatLon3Tuple}C{(lat, lon, height)}
    test 444 geoids.py:1195: L{LatLon3Tuple}C{(lat, lon, height)}
    test 445 geoids.py:1636: L{GeoidHeight5Tuple}C{(lat, lon, egm84, egm96, egm2008)}

    testing hausdorff.py (pygeodesy.named, 21.06.27)
    test 446 hausdorff.py:171: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 447 hausdorff.py:230: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 448 hausdorff.py:291: L{PhiLam2Tuple}C{(phi, lam)}
    test 449 hausdorff.py:981: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}

    testing heights.py (pygeodesy.named, 21.06.27)

    testing interns.py (pygeodesy.named, 21.06.27)

    testing iters.py (pygeodesy.named, 21.06.27)
    test 450 iters.py:341: L{Point3Tuple}C{(x, y, ll)}
    test 451 iters.py:466: L{Points2Tuple}C{(number, points)}

    testing karney.py (pygeodesy.named, 21.06.27)
    test 452 karney.py:177: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 453 karney.py:194: L{GeodSolve12Tuple}C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 454 karney.py:212: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 455 karney.py:321: L{Destination3Tuple}C{(lat, lon, final)}
    test 456 karney.py:378: L{Distance3Tuple}C{(distance, initial, final)}

    testing latlonBase.py (pygeodesy.named, 21.06.27)
    test 457 latlonBase.py:120: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 458 latlonBase.py:168: L{Circum3Tuple}C{(radius, center, deltas)}
    test 459 latlonBase.py:185: L{LatLon3Tuple}C{(lat, lon, height)}
    test 460 latlonBase.py:329: L{LatLon3Tuple}C{(lat, lon, height)}
    test 461 latlonBase.py:349: L{LatLon3Tuple}C{(lat, lon, height)}
    test 462 latlonBase.py:350: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 463 latlonBase.py:686: L{LatLon2Tuple}C{(lat, lon)}
    test 464 latlonBase.py:728: L{LatLon2Tuple}C{(lat, lon)}
    test 465 latlonBase.py:746: L{LatLon3Tuple}C{(lat, lon, height)}
    test 466 latlonBase.py:790: L{PhiLam2Tuple}C{(phi, lam)}
    test 467 latlonBase.py:800: L{PhiLam2Tuple}C{(phi, lam)}
    test 468 latlonBase.py:811: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 469 latlonBase.py:828: L{Points2Tuple}C{(number, points)}
    test 470 latlonBase.py:886: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 471 latlonBase.py:907: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 472 latlonBase.py:932: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 473 latlonBase.py:965: L{Vector4Tuple}C{(x, y, z, h)}
    test 474 latlonBase.py:1009: L{Vector3Tuple}C{(x, y, z)}
    test 475 latlonBase.py:1083: L{Vector3Tuple}C{(x, y, z)}
    test 476 latlonBase.py:1092: L{Vector4Tuple}C{(x, y, z, h)}

    testing lazily.py (pygeodesy.named, 21.06.27)

    testing lcc.py (pygeodesy.named, 21.06.27)
    test 477 lcc.py:170: L{LatLon2Tuple}C{(lat, lon)}
    test 478 lcc.py:224: L{PhiLam2Tuple}C{(phi, lam)}
    test 479 lcc.py:463: L{LatLon3Tuple}C{(lat, lon, height)}
    test 480 lcc.py:469: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 481 lcc.py:488: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 482 lcc.py:494: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 483 lcc.py:505: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 484 lcc.py:532: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 485 lcc.py:612: L{EasNor3Tuple}C{(easting, northing, height)}

    testing ltp.py (pygeodesy.named, 21.06.27)
    test 486 ltp.py:110: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 487 ltp.py:140: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 488 ltp.py:180: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 489 ltp.py:237: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 490 ltp.py:383: L{Footprint5Tuple}C{(center, upperleft, upperight, loweright, lowerleft)}

    testing ltpTuples.py (pygeodesy.named, 21.06.27)
    test 491 ltpTuples.py:212: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 492 ltpTuples.py:239: L{Vector3Tuple}C{(x, y, z)}
    test 493 ltpTuples.py:464: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 494 ltpTuples.py:491: L{Vector3Tuple}C{(x, y, z)}
    test 495 ltpTuples.py:680: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 496 ltpTuples.py:697: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 497 ltpTuples.py:719: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 498 ltpTuples.py:734: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 499 ltpTuples.py:755: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 500 ltpTuples.py:772: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 501 ltpTuples.py:814: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 502 ltpTuples.py:839: L{Vector3Tuple}C{(x, y, z)}
    test 503 ltpTuples.py:989: L{LatLon2Tuple}C{(lat, lon)}
    test 504 ltpTuples.py:995: L{LatLon3Tuple}C{(lat, lon, height)}
    test 505 ltpTuples.py:1013: L{PhiLam2Tuple}C{(phi, lam)}
    test 506 ltpTuples.py:1019: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 507 ltpTuples.py:1037: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 508 ltpTuples.py:1050: L{Vector4Tuple}C{(x, y, z, h)}
    test 509 ltpTuples.py:1064: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 510 ltpTuples.py:1077: L{LatLon3Tuple}C{(lat, lon, height)}
    test 511 ltpTuples.py:1078: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 512 ltpTuples.py:1093: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 513 ltpTuples.py:1105: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 514 ltpTuples.py:1117: L{Vector3Tuple}C{(x, y, z)}

    testing mgrs.py (pygeodesy.named, 21.06.27)
    test 515 mgrs.py:182: L{EasNor2Tuple}C{(easting, northing)}
    test 516 mgrs.py:244: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 517 mgrs.py:300: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 518 mgrs.py:371: L{Mgrs6Tuple}C{(zone, digraph, easting, northing, band, datum)}
    test 519 mgrs.py:397: L{Mgrs4Tuple}C{(zone, digraph, easting, northing)}
    test 520 mgrs.py:461: L{Mgrs6Tuple}C{(zone, digraph, easting, northing, band, datum)}

    testing named.py (pygeodesy.named, 21.06.27)

    testing namedTuples.py (pygeodesy.named, 21.06.27)
    test 521 namedTuples.py:147: L{LatLon3Tuple}C{(lat, lon, height)}
    test 522 namedTuples.py:159: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 523 namedTuples.py:180: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 524 namedTuples.py:243: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}
    test 525 namedTuples.py:261: L{LatLon3Tuple}C{(lat, lon, height)}
    test 526 namedTuples.py:285: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 527 namedTuples.py:297: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 528 namedTuples.py:323: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 529 namedTuples.py:479: L{Vector3Tuple}C{(x, y, z)}
    test 530 namedTuples.py:498: L{Vector4Tuple}C{(x, y, z, h)}

    testing nvectorBase.py (pygeodesy.named, 21.06.27)
    test 531 nvectorBase.py:165: L{LatLon2Tuple}C{(lat, lon)}
    test 532 nvectorBase.py:171: L{LatLon3Tuple}C{(lat, lon, height)}
    test 533 nvectorBase.py:177: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 534 nvectorBase.py:195: L{PhiLam2Tuple}C{(phi, lam)}
    test 535 nvectorBase.py:201: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 536 nvectorBase.py:207: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 537 nvectorBase.py:215: L{PhiLam2Tuple}C{(phi, lam)}
    test 538 nvectorBase.py:226: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 539 nvectorBase.py:245: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 540 nvectorBase.py:283: L{LatLon2Tuple}C{(lat, lon)}
    test 541 nvectorBase.py:294: L{LatLon3Tuple}C{(lat, lon, height)}
    test 542 nvectorBase.py:313: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 543 nvectorBase.py:387: L{Vector4Tuple}C{(x, y, z, h)}
    test 544 nvectorBase.py:465: L{Vector4Tuple}C{(x, y, z, h)}
    test 545 nvectorBase.py:539: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 546 nvectorBase.py:581: L{Vector4Tuple}C{(x, y, z, h)}

    testing osgr.py (pygeodesy.named, 21.06.27)
    test 547 osgr.py:200: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 548 osgr.py:370: L{EasNor2Tuple}C{(easting, northing)}
    test 549 osgr.py:454: L{EasNor2Tuple}C{(easting, northing)}

    testing points.py (pygeodesy.named, 21.06.27)
    test 550 points.py:179: L{LatLon2Tuple}C{(lat, lon)}
    test 551 points.py:185: L{LatLon3Tuple}C{(lat, lon, height)}
    test 552 points.py:215: L{PhiLam2Tuple}C{(phi, lam)}
    test 553 points.py:221: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 554 points.py:240: L{Points2Tuple}C{(number, points)}
    test 555 points.py:279: L{Vector4Tuple}C{(x, y, z, h)}
    test 556 points.py:695: L{Shape2Tuple}C{(nrows, ncols)}
    test 557 points.py:895: L{Point3Tuple}C{(x, y, ll)}
    test 558 points.py:1135: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 559 points.py:1137: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 560 points.py:1177: L{LatLon2Tuple}C{(lat, lon)}
    test 561 points.py:1251: L{LatLon2Tuple}C{(lat, lon)}
    test 562 points.py:1563: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 563 points.py:1565: L{NearestOn5Tuple}C{(lat, lon, distance, angle, height)}

    testing props.py (pygeodesy.named, 21.06.27)

    testing simplify.py (pygeodesy.named, 21.06.27)

    testing sphericalBase.py (pygeodesy.named, 21.06.27)
    test 564 sphericalBase.py:167: L{Bearing2Tuple}C{(initial, final)}
    test 565 sphericalBase.py:447: L{Vector4Tuple}C{(x, y, z, h)}

    testing sphericalNvector.py (pygeodesy.named, 21.06.27)
    test 566 sphericalNvector.py:77: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 567 sphericalNvector.py:94: L{Vector4Tuple}C{(x, y, z, h)}
    test 568 sphericalNvector.py:662: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 569 sphericalNvector.py:695: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 570 sphericalNvector.py:712: L{Vector4Tuple}C{(x, y, z, h)}
    test 571 sphericalNvector.py:754: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 572 sphericalNvector.py:771: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 573 sphericalNvector.py:1002: L{NearestOn3Tuple}C{(closest, distance, angle)}

    testing sphericalTrigonometry.py (pygeodesy.named, 21.06.27)
    test 574 sphericalTrigonometry.py:109: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 575 sphericalTrigonometry.py:680: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 576 sphericalTrigonometry.py:718: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 577 sphericalTrigonometry.py:750: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 578 sphericalTrigonometry.py:751: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 579 sphericalTrigonometry.py:785: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 580 sphericalTrigonometry.py:958: L{LatLon3Tuple}C{(lat, lon, height)}
    test 581 sphericalTrigonometry.py:1081: L{LatLon3Tuple}C{(lat, lon, height)}
    test 582 sphericalTrigonometry.py:1197: L{LatLon3Tuple}C{(lat, lon, height)}
    test 583 sphericalTrigonometry.py:1222: L{LatLon2Tuple}C{(lat, lon)}
    test 584 sphericalTrigonometry.py:1247: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 585 sphericalTrigonometry.py:1248: L{LatLon3Tuple}C{(lat, lon, height)}
    test 586 sphericalTrigonometry.py:1329: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 587 sphericalTrigonometry.py:1334: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 588 sphericalTrigonometry.py:1360: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}

    testing streprs.py (pygeodesy.named, 21.06.27)

    testing trf.py (pygeodesy.named, 21.06.27)

    testing units.py (pygeodesy.named, 21.06.27)

    testing ups.py (pygeodesy.named, 21.06.27)
    test 589 ups.py:138: L{EasNor2Tuple}C{(easting, northing)}
    test 590 ups.py:215: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 591 ups.py:375: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 592 ups.py:413: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 593 ups.py:490: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utily.py (pygeodesy.named, 21.06.27)
    test 594 utily.py:133: L{Circle4Tuple}C{(radius, height, lat, beta)}

    testing utm.py (pygeodesy.named, 21.06.27)
    test 595 utm.py:341: L{EasNor2Tuple}C{(easting, northing)}
    test 596 utm.py:417: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 597 utm.py:667: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 598 utm.py:712: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 599 utm.py:805: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmups.py (pygeodesy.named, 21.06.27)
    test 600 utmups.py:87: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 601 utmups.py:128: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 602 utmups.py:280: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmupsBase.py (pygeodesy.named, 21.06.27)
    test 603 utmupsBase.py:213: L{EasNor2Tuple}C{(easting, northing)}
    test 604 utmupsBase.py:223: L{EasNor2Tuple}C{(easting, northing)}
    test 605 utmupsBase.py:296: L{EasNor2Tuple}C{(easting, northing)}

    testing vector3d.py (pygeodesy.named, 21.06.27)
    test 606 vector3d.py:86: L{Circum3Tuple}C{(radius, center, deltas)}
    test 607 vector3d.py:135: L{Meeus2Tuple}C{(radius, Type)}
    test 608 vector3d.py:287: L{Circum3Tuple}C{(radius, center, deltas)}
    test 609 vector3d.py:357: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 610 vector3d.py:585: L{Meeus2Tuple}C{(radius, Type)}
    test 611 vector3d.py:745: L{Vector3Tuple}C{(x, y, z)}
    test 612 vector3d.py:768: L{Vector3Tuple}C{(x, y, z)}
    test 613 vector3d.py:802: L{Vector2Tuple}C{(x, y)}

    testing vector3dBase.py (pygeodesy.named, 21.06.27)
    test 614 vector3dBase.py:546: L{PhiLam2Tuple}C{(phi, lam)}
    test 615 vector3dBase.py:554: L{LatLon2Tuple}C{(lat, lon)}
    test 616 vector3dBase.py:611: L{Vector3Tuple}C{(x, y, z)}

    testing webmercator.py (pygeodesy.named, 21.06.27)
    test 617 webmercator.py:94: L{LatLon2Tuple}C{(lat, lon)}
    test 618 webmercator.py:105: L{LatLon2Tuple}C{(lat, lon)}
    test 619 webmercator.py:151: L{PhiLam2Tuple}C{(phi, lam)}
    test 620 webmercator.py:166: L{LatLon2Tuple}C{(lat, lon)}
    test 621 webmercator.py:276: L{EasNorRadius3Tuple}C{(easting, northing, radius)}
    test 622 webmercator.py:316: L{EasNorRadius3Tuple}C{(easting, northing, radius)}

    testing wgrs.py (pygeodesy.named, 21.06.27)
    test 623 wgrs.py:221: L{LatLon3Tuple}C{(lat, lon, height)}
    test 624 wgrs.py:241: L{LatLonPrec3Tuple}C{(lat, lon, precision)}
    test 625 wgrs.py:294: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}

    testing xtend (pygeodesy.namedTuples, 21.06.23)
    test 626 LatLon2Tuple(lat=0, lon=1): (0, 1, 2)
    test 627 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 628 LatLon2Tuple(lat=0, lon=1): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 629 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 630 LatLon3Tuple(lat=0, lon=1, height=2): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 631 LatLon3Tuple(lat=0, lon=1, height=2): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 632 PhiLam2Tuple(phi=0, lam=1): (0, 1, 2)
    test 633 PhiLam2Tuple(phi=0, lam=1): <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 634 Vector3Tuple(x=0, y=1, z=2): (0, 1, 2, 4)
    test 635 Vector3Tuple(x=0, y=1, z=2): <class 'pygeodesy.namedTuples.Vector4Tuple'>

    testing bases (pygeodesy.named, 21.06.27)
    test 636 nd.dict: test(1=1, 2=2)
    test 637 nd.name: test
    test 638 nd.dict: test(1=1, 2=2)
    test 639 nd.name: test
    test 640 nd.kwds: test(one=1, two=2)
    test 641 nd.name: test
    test 642 nd.dict: test(1=1, 2=2)
    test 643 nd.name: test
    test 644 nd.list: test(1=1, 2=2)
    test 645 nd.name: test
    test 646 nd.updated: test(1=1, 2=2, name='kwds')
    test 647 nd.name: test

    testing coverage (pygeodesy.named, 21.06.27)
    test 648 nd.name: name
    test 649 nd.named: name
    test 650 nd.named: Neighbors8Dict
    test 651 nd.name: test
    test 652 nd.test: test
    test 653 nd.test: None
    test 654 nd.classnaming: False
    test 655 nd.classname: Neighbors8Dict
    test 656 nd.named2: Neighbors8Dict 'test'
    test 657 nd.classnaming: True
    test 658 nd.classname: Neighbors8Dict
    test 659 nd.named2: Neighbors8Dict 'test'
    test 660 classnaming: False
    test 661 classnaming: True

    testing unregister (pygeodesy.named, 21.06.27)
    test 662 Conics: 1
    test 663 Conics: 8
    test 664 Conics.Fr93Lb.unregister: None
    test 665 Conics.PyT_Lb.unregister: None
    test 666 Conics.WRF_Lb.unregister: None
    test 667 Conics.MaNLb.unregister: None
    test 668 Conics.USA_Lb.unregister: None
    test 669 Conics.MxLb.unregister: None
    test 670 Conics.Be72Lb.unregister: None
    test 671 Conics.Be08Lb.unregister: None
    test 672 Conics: 0
    test 673 Datums: 6
    test 674 Datums: 18
    test 675 Datums.unregister(BD72): None
    test 676 Datums.unregister(WGS84): None
    test 677 Datums.unregister(NAD27): None
    test 678 Datums.unregister(ED50): None
    test 679 Datums.unregister(MGI): None
    test 680 Datums.unregister(GRS80): None
    test 681 Datums.unregister(Krassovski1940): None
    test 682 Datums.unregister(GDA2020): None
    test 683 Datums.unregister(WGS72): None
    test 684 Datums.unregister(TokyoJapan): None
    test 685 Datums.unregister(Sphere): None
    test 686 Datums.unregister(DHDN): None
    test 687 Datums.unregister(NAD83): None
    test 688 Datums.unregister(OSGB36): None
    test 689 Datums.unregister(Potsdam): None
    test 690 Datums.unregister(Irl1975): None
    test 691 Datums.unregister(Krassowsky1940): None
    test 692 Datums.unregister(NTF): None
    test 693 Datums: 0
    test 694 RefFrames: 0
    test 695 RefFrames: 13
    test 696 RefFrames.ITRF2008.unregister: None
    test 697 RefFrames.WGS84g1674.unregister: None
    test 698 RefFrames.GDA2020.unregister: None
    test 699 RefFrames.ITRF2000.unregister: None
    test 700 RefFrames.ITRF2005.unregister: None
    test 701 RefFrames.ITRF93.unregister: None
    test 702 RefFrames.WGS84g1150.unregister: None
    test 703 RefFrames.ITRF2014.unregister: None
    test 704 RefFrames.NAD83.unregister: None
    test 705 RefFrames.WGS84g1762.unregister: None
    test 706 RefFrames.ITRF91.unregister: None
    test 707 RefFrames.GDA94.unregister: None
    test 708 RefFrames.ETRF2000.unregister: None
    test 709 RefFrames: 0
    test 710 Ellipsoids: 12
    test 711 Ellipsoids: 41
    test 712 Ellipsoids.AiryModified.unregister: None
    test 713 Ellipsoids.OSU91A.unregister: None
    test 714 Ellipsoids.Struve1860.unregister: None
    test 715 Ellipsoids.Maupertuis1738.unregister: None
    test 716 Ellipsoids.Clarke1880IGN.unregister: None
    test 717 Ellipsoids.GRS80.unregister: None
    test 718 Ellipsoids.Everest1969.unregister: None
    test 719 Ellipsoids.SoAmerican1969.unregister: None
    test 720 Ellipsoids.Intl1924.unregister: None
    test 721 Ellipsoids.IERS1989.unregister: None
    test 722 Ellipsoids.IERS1992TOPEX.unregister: None
    test 723 Ellipsoids.GRS67.unregister: None
    test 724 Ellipsoids.Mercury1960.unregister: None
    test 725 Ellipsoids.Krassowsky1940.unregister: None
    test 726 Ellipsoids.Australia1966.unregister: None
    test 727 Ellipsoids.Clarke1880Mod.unregister: None
    test 728 Ellipsoids.WGS72.unregister: None
    test 729 Ellipsoids.SpherePopular.unregister: None
    test 730 Ellipsoids.Intl1967.unregister: None
    test 731 Ellipsoids.Plessis1817.unregister: None
    test 732 Ellipsoids.Bessel1841.unregister: None
    test 733 Ellipsoids.Airy1830.unregister: None
    test 734 Ellipsoids.Helmert1906.unregister: None
    test 735 Ellipsoids.Delambre1810.unregister: None
    test 736 Ellipsoids.SphereAuthalic.unregister: None
    test 737 Ellipsoids.Fisher1968.unregister: None
    test 738 Ellipsoids.Mercury1968Mod.unregister: None
    test 739 Ellipsoids.CPM1799.unregister: None
    test 740 Ellipsoids.Engelis1985.unregister: None
    test 741 Ellipsoids.IERS2003.unregister: None
    test 742 Ellipsoids.NWL1965.unregister: None
    test 743 Ellipsoids.GEM10C.unregister: None
    test 744 Ellipsoids.WGS84.unregister: None
    test 745 Ellipsoids.WGS66.unregister: None
    test 746 Ellipsoids.Krassovski1940.unregister: None
    test 747 Ellipsoids.WGS60.unregister: None
    test 748 Ellipsoids.Sphere.unregister: None
    test 749 Ellipsoids.SGS85.unregister: None
    test 750 Ellipsoids.OSU86F.unregister: None
    test 751 Ellipsoids.Clarke1880.unregister: None
    test 752 Ellipsoids.Clarke1866.unregister: None
    test 753 Ellipsoids: 0
    test 754 Transforms: 15
    test 755 Transforms: 18
    test 756 Transforms.WGS84.unregister: None
    test 757 Transforms.NAD27.unregister: None
    test 758 Transforms.ED50.unregister: None
    test 759 Transforms.MGI.unregister: None
    test 760 Transforms.Krassovski1940.unregister: None
    test 761 Transforms.BD72.unregister: None
    test 762 Transforms.WGS72.unregister: None
    test 763 Transforms.TokyoJapan.unregister: None
    test 764 Transforms.DHDN.unregister: None
    test 765 Transforms.NAD83.unregister: None
    test 766 Transforms.OSGB36.unregister: None
    test 767 Transforms.Clarke1866.unregister: None
    test 768 Transforms.Irl1965.unregister: None
    test 769 Transforms.Irl1975.unregister: None
    test 770 Transforms.Krassowsky1940.unregister: None
    test 771 Transforms.Bessel1841.unregister: None
    test 772 Transforms.Identity.unregister: None
    test 773 Transforms.NTF.unregister: None
    test 774 Transforms: 0
    test 775 nameof: KsOrder

    5 of 775 testNamed.py tests (0.6%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 53.938 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testNamedTuples.py
./pygeodesy/ellipsoidalNvector.py:492: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned3Tuple} has been 3-Tuple C{(north, east, down)}. DEPRECATED, use L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
./pygeodesy/ellipsoidalNvector.py:492: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned3Tuple} has been 3-Tuple C{(north, east, down)}. DEPRECATED, use L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)

    testing testNamedTuples.py 21.05.10
    test 1 pygeodesy.albers: Albers7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, gamma=0.5, scale=0.5, datum=0.5)
    test 2 pygeodesy.albers: Albers7Tuple(x=Meter, y=Meter, lat=Lat, lon=Lon, gamma=Bearing, scale=_Pass, datum=_Pass)
    test 3 pygeodesy.albers, Albers7Tuple.x: 0.5
    test 4 pygeodesy.albers, Albers7Tuple.y: 0.5
    test 5 pygeodesy.albers, Albers7Tuple.lat: 0.5
    test 6 pygeodesy.albers, Albers7Tuple.lon: 0.5
    test 7 pygeodesy.albers, Albers7Tuple.gamma: 0.5
    test 8 pygeodesy.albers, Albers7Tuple.scale: 0.5
    test 9 pygeodesy.albers, Albers7Tuple.datum: 0.5
    test 10 pygeodesy.albers, Albers7Tuple._validated: True
    test 11 pygeodesy.albers, Albers7Tuple._validated: True
    test 12 pygeodesy.azimuthal: Azimuthal7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, azimuth=0.5, scale=0.5, datum=0.5)
    test 13 pygeodesy.azimuthal: Azimuthal7Tuple(x=Easting, y=Northing, lat=Lat_, lon=Lon_, azimuth=Bearing, scale=Scalar, datum=_Pass)
    test 14 pygeodesy.azimuthal, Azimuthal7Tuple.x: 0.5
    test 15 pygeodesy.azimuthal, Azimuthal7Tuple.y: 0.5
    test 16 pygeodesy.azimuthal, Azimuthal7Tuple.lat: 0.5
    test 17 pygeodesy.azimuthal, Azimuthal7Tuple.lon: 0.5
    test 18 pygeodesy.azimuthal, Azimuthal7Tuple.azimuth: 0.5
    test 19 pygeodesy.azimuthal, Azimuthal7Tuple.scale: 0.5
    test 20 pygeodesy.azimuthal, Azimuthal7Tuple.datum: 0.5
    test 21 pygeodesy.azimuthal, Azimuthal7Tuple._validated: True
    test 22 pygeodesy.azimuthal, Azimuthal7Tuple._validated: True
    test 23 pygeodesy.clipy: ClipCS4Tuple(start=0.5, end=0.5, i=0, j=0)
    test 24 pygeodesy.clipy: ClipCS4Tuple(start=_Pass, end=_Pass, i=Number_, j=Number_)
    test 25 pygeodesy.clipy, ClipCS4Tuple.start: 0.5
    test 26 pygeodesy.clipy, ClipCS4Tuple.end: 0.5
    test 27 pygeodesy.clipy, ClipCS4Tuple.i: 0.5
    test 28 pygeodesy.clipy, ClipCS4Tuple.j: 0.5
    test 29 pygeodesy.clipy, ClipCS4Tuple._validated: True
    test 30 pygeodesy.clipy, ClipCS4Tuple._validated: True
    test 31 pygeodesy.clipy: ClipLB6Tuple(start=0.5, end=0.5, i=0, fi=0.5, fj=0.5, j=0)
    test 32 pygeodesy.clipy: ClipLB6Tuple(start=_Pass, end=_Pass, i=Number_, fi=_Pass, fj=_Pass, j=Number_)
    test 33 pygeodesy.clipy, ClipLB6Tuple.start: 0.5
    test 34 pygeodesy.clipy, ClipLB6Tuple.end: 0.5
    test 35 pygeodesy.clipy, ClipLB6Tuple.i: 0.5
    test 36 pygeodesy.clipy, ClipLB6Tuple.fi: 0.5
    test 37 pygeodesy.clipy, ClipLB6Tuple.fj: 0.5
    test 38 pygeodesy.clipy, ClipLB6Tuple.j: 0.5
    test 39 pygeodesy.clipy, ClipLB6Tuple._validated: True
    test 40 pygeodesy.clipy, ClipLB6Tuple._validated: True
    test 41 pygeodesy.clipy: ClipSH3Tuple(start=0.5, end=0.5, original=True)
    test 42 pygeodesy.clipy: ClipSH3Tuple(start=_Pass, end=_Pass, original=Bool)
    test 43 pygeodesy.clipy, ClipSH3Tuple.start: 0.5
    test 44 pygeodesy.clipy, ClipSH3Tuple.end: 0.5
    test 45 pygeodesy.clipy, ClipSH3Tuple.original: 0.5
    test 46 pygeodesy.clipy, ClipSH3Tuple._validated: True
    test 47 pygeodesy.clipy, ClipSH3Tuple._validated: True
    test 48 pygeodesy.css: EasNorAziRk4Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5)
    test 49 pygeodesy.css: EasNorAziRk4Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar)
    test 50 pygeodesy.css, EasNorAziRk4Tuple.easting: 0.5
    test 51 pygeodesy.css, EasNorAziRk4Tuple.northing: 0.5
    test 52 pygeodesy.css, EasNorAziRk4Tuple.azimuth: 0.5
    test 53 pygeodesy.css, EasNorAziRk4Tuple.reciprocal: 0.5
    test 54 pygeodesy.css, EasNorAziRk4Tuple._validated: True
    test 55 pygeodesy.css, EasNorAziRk4Tuple._validated: True
    test 56 pygeodesy.css: LatLonAziRk4Tuple(lat=0.5, lon=0.5, azimuth=0.5, reciprocal=0.5)
    test 57 pygeodesy.css: LatLonAziRk4Tuple(lat=Lat_, lon=Lon_, azimuth=Bearing, reciprocal=Scalar)
    test 58 pygeodesy.css, LatLonAziRk4Tuple.lat: 0.5
    test 59 pygeodesy.css, LatLonAziRk4Tuple.lon: 0.5
    test 60 pygeodesy.css, LatLonAziRk4Tuple.azimuth: 0.5
    test 61 pygeodesy.css, LatLonAziRk4Tuple.reciprocal: 0.5
    test 62 pygeodesy.css, LatLonAziRk4Tuple._validated: True
    test 63 pygeodesy.css, LatLonAziRk4Tuple._validated: True
    test 64 pygeodesy.ecef: Ecef9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, C=0, M=0.5, datum=0.5)
    test 65 pygeodesy.ecef: Ecef9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, C=Int, M=_Pass, datum=_Pass)
    test 66 pygeodesy.ecef, Ecef9Tuple.x: 0.5
    test 67 pygeodesy.ecef, Ecef9Tuple.y: 0.5
    test 68 pygeodesy.ecef, Ecef9Tuple.z: 0.5
    test 69 pygeodesy.ecef, Ecef9Tuple.lat: 0.5
    test 70 pygeodesy.ecef, Ecef9Tuple.lon: 0.5
    test 71 pygeodesy.ecef, Ecef9Tuple.height: 0.5
    test 72 pygeodesy.ecef, Ecef9Tuple.C: 0.5
    test 73 pygeodesy.ecef, Ecef9Tuple.M: 0.5
    test 74 pygeodesy.ecef, Ecef9Tuple.datum: 0.5
    test 75 pygeodesy.ecef, Ecef9Tuple._validated: True
    test 76 pygeodesy.ecef, Ecef9Tuple._validated: True
    test 77 pygeodesy.ecef: EcefMatrix(_0_0_=0.5, _0_1_=0.5, _0_2_=0.5, _1_0_=0.5, _1_1_=0.5, _1_2_=0.5, _2_0_=0.5, _2_1_=0.5, _2_2_=0.5)
    test 78 pygeodesy.ecef: EcefMatrix(_0_0_=Scalar, _0_1_=Scalar, _0_2_=Scalar, _1_0_=Scalar, _1_1_=Scalar, _1_2_=Scalar, _2_0_=Scalar, _2_1_=Scalar, _2_2_=Scalar)
    test 79 pygeodesy.ecef, EcefMatrix._0_0_: 0.5
    test 80 pygeodesy.ecef, EcefMatrix._0_1_: 0.5
    test 81 pygeodesy.ecef, EcefMatrix._0_2_: 0.5
    test 82 pygeodesy.ecef, EcefMatrix._1_0_: 0.5
    test 83 pygeodesy.ecef, EcefMatrix._1_1_: 0.5
    test 84 pygeodesy.ecef, EcefMatrix._1_2_: 0.5
    test 85 pygeodesy.ecef, EcefMatrix._2_0_: 0.5
    test 86 pygeodesy.ecef, EcefMatrix._2_1_: 0.5
    test 87 pygeodesy.ecef, EcefMatrix._2_2_: 0.5
    test 88 pygeodesy.ecef, EcefMatrix._validated: True
    test 89 pygeodesy.ecef, EcefMatrix._validated: True
    test 90 pygeodesy.elevations: Elevation2Tuple(elevation=0.5, data_source='0.5')
    test 91 pygeodesy.elevations: Elevation2Tuple(elevation=Meter, data_source=Str)
    test 92 pygeodesy.elevations, Elevation2Tuple.elevation: 0.5
    test 93 pygeodesy.elevations, Elevation2Tuple.data_source: 0.5
    test 94 pygeodesy.elevations, Elevation2Tuple._validated: True
    test 95 pygeodesy.elevations, Elevation2Tuple._validated: True
    test 96 pygeodesy.elevations: GeoidHeight2Tuple(height=0.5, model_name='0.5')
    test 97 pygeodesy.elevations: GeoidHeight2Tuple(height=Meter, model_name=Str)
    test 98 pygeodesy.elevations, GeoidHeight2Tuple.height: 0.5
    test 99 pygeodesy.elevations, GeoidHeight2Tuple.model_name: 0.5
    test 100 pygeodesy.elevations, GeoidHeight2Tuple._validated: True
    test 101 pygeodesy.elevations, GeoidHeight2Tuple._validated: True
    test 102 pygeodesy.ellipsoidalNvector: Ned3Tuple(north=0.5, east=0.5, down=0.5)
    test 103 pygeodesy.ellipsoidalNvector: Ned3Tuple(north=Meter, east=Meter, down=Meter)
    test 104 pygeodesy.ellipsoidalNvector, Ned3Tuple.north: 0.5
    test 105 pygeodesy.ellipsoidalNvector, Ned3Tuple.east: 0.5
    test 106 pygeodesy.ellipsoidalNvector, Ned3Tuple.down: 0.5
    test 107 pygeodesy.ellipsoidalNvector, Ned3Tuple._validated: True
    test 108 pygeodesy.ellipsoidalNvector, Ned3Tuple._validated: True
    test 109 pygeodesy.ellipsoids: Circle4Tuple(radius=0.5, height=0.5, lat=0.5, beta=0.5)
    test 110 pygeodesy.ellipsoids: Circle4Tuple(radius=Radius, height=Height, lat=Lat, beta=Lat)
    test 111 pygeodesy.ellipsoids, Circle4Tuple.radius: 0.5
    test 112 pygeodesy.ellipsoids, Circle4Tuple.height: 0.5
    test 113 pygeodesy.ellipsoids, Circle4Tuple.lat: 0.5
    test 114 pygeodesy.ellipsoids, Circle4Tuple.beta: 0.5
    test 115 pygeodesy.ellipsoids, Circle4Tuple._validated: True
    test 116 pygeodesy.ellipsoids, Circle4Tuple._validated: True
    test 117 pygeodesy.ellipsoids: Curvature2Tuple(meridional=0.5, prime_vertical=0.5)
    test 118 pygeodesy.ellipsoids: Curvature2Tuple(meridional=Meter, prime_vertical=Meter)
    test 119 pygeodesy.ellipsoids, Curvature2Tuple.meridional: 0.5
    test 120 pygeodesy.ellipsoids, Curvature2Tuple.prime_vertical: 0.5
    test 121 pygeodesy.ellipsoids, Curvature2Tuple._validated: True
    test 122 pygeodesy.ellipsoids, Curvature2Tuple._validated: True
    test 123 pygeodesy.ellipsoids: a_f2Tuple(a=0.5, f=0.5)
    test 124 pygeodesy.ellipsoids: a_f2Tuple(a=_Pass, f=_Pass)
    test 125 pygeodesy.ellipsoids, a_f2Tuple.a: 0.5
    test 126 pygeodesy.ellipsoids, a_f2Tuple.f: 0.5
    test 127 pygeodesy.ellipsoids, a_f2Tuple._validated: True
    test 128 pygeodesy.ellipsoids, a_f2Tuple._validated: True
    test 129 pygeodesy.elliptic: Elliptic3Tuple(sn=0.5, cn=0.5, dn=0.5)
    test 130 pygeodesy.elliptic: Elliptic3Tuple(sn=Scalar, cn=Scalar, dn=Scalar)
    test 131 pygeodesy.elliptic, Elliptic3Tuple.sn: 0.5
    test 132 pygeodesy.elliptic, Elliptic3Tuple.cn: 0.5
    test 133 pygeodesy.elliptic, Elliptic3Tuple.dn: 0.5
    test 134 pygeodesy.elliptic, Elliptic3Tuple._validated: True
    test 135 pygeodesy.elliptic, Elliptic3Tuple._validated: True
    test 136 pygeodesy.etm: EasNorExact4Tuple(easting=0.5, northing=0.5, convergence=0.5, scale=0.5)
    test 137 pygeodesy.etm: EasNorExact4Tuple(easting=Easting, northing=Northing, convergence=Degrees, scale=Scalar)
    test 138 pygeodesy.etm, EasNorExact4Tuple.easting: 0.5
    test 139 pygeodesy.etm, EasNorExact4Tuple.northing: 0.5
    test 140 pygeodesy.etm, EasNorExact4Tuple.convergence: 0.5
    test 141 pygeodesy.etm, EasNorExact4Tuple.scale: 0.5
    test 142 pygeodesy.etm, EasNorExact4Tuple._validated: True
    test 143 pygeodesy.etm, EasNorExact4Tuple._validated: True
    test 144 pygeodesy.etm: LatLonExact4Tuple(lat=0.5, lon=0.5, convergence=0.5, scale=0.5)
    test 145 pygeodesy.etm: LatLonExact4Tuple(lat=Lat, lon=Lon, convergence=Degrees, scale=Scalar)
    test 146 pygeodesy.etm, LatLonExact4Tuple.lat: 0.5
    test 147 pygeodesy.etm, LatLonExact4Tuple.lon: 0.5
    test 148 pygeodesy.etm, LatLonExact4Tuple.convergence: 0.5
    test 149 pygeodesy.etm, LatLonExact4Tuple.scale: 0.5
    test 150 pygeodesy.etm, LatLonExact4Tuple._validated: True
    test 151 pygeodesy.etm, LatLonExact4Tuple._validated: True
    test 152 pygeodesy.formy: Radical2Tuple(ratio=0.5, xline=0.5)
    test 153 pygeodesy.formy: Radical2Tuple(ratio=Scalar, xline=Scalar)
    test 154 pygeodesy.formy, Radical2Tuple.ratio: 0.5
    test 155 pygeodesy.formy, Radical2Tuple.xline: 0.5
    test 156 pygeodesy.formy, Radical2Tuple._validated: True
    test 157 pygeodesy.formy, Radical2Tuple._validated: True
    test 158 pygeodesy.frechet: Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0, n=0, units='test')
    test 159 pygeodesy.frechet: Frechet6Tuple(fd=_Pass, fi1=FIx, fi2=FIx, r=Number_, n=Number_, units=_Pass)
    test 160 pygeodesy.frechet, Frechet6Tuple.fd: 0.5
    test 161 pygeodesy.frechet, Frechet6Tuple.fi1: 0.5
    test 162 pygeodesy.frechet, Frechet6Tuple.fi2: 0.5
    test 163 pygeodesy.frechet, Frechet6Tuple.r: 0.5
    test 164 pygeodesy.frechet, Frechet6Tuple.n: 0.5
    test 165 pygeodesy.frechet, Frechet6Tuple.units: <bound method Frechet6Tuple.units of Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0.5, n=0.5, units='test')>
    test 166 pygeodesy.frechet, Frechet6Tuple._validated: True
    test 167 pygeodesy.frechet, Frechet6Tuple._validated: True
    test 168 pygeodesy.geohash: Resolutions2Tuple(res1=0.5, res2=0.5)
    test 169 pygeodesy.geohash: Resolutions2Tuple(res1=Degrees_, res2=Degrees_)
    test 170 pygeodesy.geohash, Resolutions2Tuple.res1: 0.5
    test 171 pygeodesy.geohash, Resolutions2Tuple.res2: 0.5
    test 172 pygeodesy.geohash, Resolutions2Tuple._validated: True
    test 173 pygeodesy.geohash, Resolutions2Tuple._validated: True
    test 174 pygeodesy.geoids: GeoidHeight5Tuple(lat=0.5, lon=0.5, egm84=0.5, egm96=0.5, egm2008=0.5)
    test 175 pygeodesy.geoids: GeoidHeight5Tuple(lat=Lat, lon=Lon, egm84=Height, egm96=Height, egm2008=Height)
    test 176 pygeodesy.geoids, GeoidHeight5Tuple.lat: 0.5
    test 177 pygeodesy.geoids, GeoidHeight5Tuple.lon: 0.5
    test 178 pygeodesy.geoids, GeoidHeight5Tuple.egm84: 0.5
    test 179 pygeodesy.geoids, GeoidHeight5Tuple.egm96: 0.5
    test 180 pygeodesy.geoids, GeoidHeight5Tuple.egm2008: 0.5
    test 181 pygeodesy.geoids, GeoidHeight5Tuple._validated: True
    test 182 pygeodesy.geoids, GeoidHeight5Tuple._validated: True
    test 183 pygeodesy.hausdorff: Hausdorff6Tuple(hd=0.5, i=0, j=0, mn=0, md=0.5, units='test')
    test 184 pygeodesy.hausdorff: Hausdorff6Tuple(hd=_Pass, i=Number_, j=Number_, mn=Number_, md=_Pass, units=_Pass)
    test 185 pygeodesy.hausdorff, Hausdorff6Tuple.hd: 0.5
    test 186 pygeodesy.hausdorff, Hausdorff6Tuple.i: 0.5
    test 187 pygeodesy.hausdorff, Hausdorff6Tuple.j: 0.5
    test 188 pygeodesy.hausdorff, Hausdorff6Tuple.mn: 0.5
    test 189 pygeodesy.hausdorff, Hausdorff6Tuple.md: 0.5
    test 190 pygeodesy.hausdorff, Hausdorff6Tuple.units: <bound method Hausdorff6Tuple.units of Hausdorff6Tuple(hd=0.5, i=0.5, j=0.5, mn=0.5, md=0.5, units='test')>
    test 191 pygeodesy.hausdorff, Hausdorff6Tuple._validated: True
    test 192 pygeodesy.hausdorff, Hausdorff6Tuple._validated: True
    test 193 pygeodesy.karney: Direct9Tuple(a12=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 194 pygeodesy.karney: Direct9Tuple(a12=Degrees, lat2=Degrees, lon2=Degrees, azi2=Degrees, s12=Meter, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 195 pygeodesy.karney, Direct9Tuple.a12: 0.5
    test 196 pygeodesy.karney, Direct9Tuple.lat2: 0.5
    test 197 pygeodesy.karney, Direct9Tuple.lon2: 0.5
    test 198 pygeodesy.karney, Direct9Tuple.azi2: 0.5
    test 199 pygeodesy.karney, Direct9Tuple.s12: 0.5
    test 200 pygeodesy.karney, Direct9Tuple.m12: 0.5
    test 201 pygeodesy.karney, Direct9Tuple.M12: 0.5
    test 202 pygeodesy.karney, Direct9Tuple.M21: 0.5
    test 203 pygeodesy.karney, Direct9Tuple.S12: 0.5
    test 204 pygeodesy.karney, Direct9Tuple._validated: True
    test 205 pygeodesy.karney, Direct9Tuple._validated: True
    test 206 pygeodesy.karney: GeodSolve12Tuple(lat1=0.5, lon1=0.5, azi1=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, a12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 207 pygeodesy.karney: GeodSolve12Tuple(lat1=Degrees, lon1=Degrees, azi1=Degrees, lat2=Degrees, lon2=Degrees, azi2=Degrees, s12=Meter, a12=Degrees, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 208 pygeodesy.karney, GeodSolve12Tuple.lat1: 0.5
    test 209 pygeodesy.karney, GeodSolve12Tuple.lon1: 0.5
    test 210 pygeodesy.karney, GeodSolve12Tuple.azi1: 0.5
    test 211 pygeodesy.karney, GeodSolve12Tuple.lat2: 0.5
    test 212 pygeodesy.karney, GeodSolve12Tuple.lon2: 0.5
    test 213 pygeodesy.karney, GeodSolve12Tuple.azi2: 0.5
    test 214 pygeodesy.karney, GeodSolve12Tuple.s12: 0.5
    test 215 pygeodesy.karney, GeodSolve12Tuple.a12: 0.5
    test 216 pygeodesy.karney, GeodSolve12Tuple.m12: 0.5
    test 217 pygeodesy.karney, GeodSolve12Tuple.M12: 0.5
    test 218 pygeodesy.karney, GeodSolve12Tuple.M21: 0.5
    test 219 pygeodesy.karney, GeodSolve12Tuple.S12: 0.5
    test 220 pygeodesy.karney, GeodSolve12Tuple._validated: True
    test 221 pygeodesy.karney, GeodSolve12Tuple._validated: True
    test 222 pygeodesy.karney: Inverse10Tuple(a12=0.5, s12=0.5, salp1=0.5, calp1=0.5, salp2=0.5, calp2=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 223 pygeodesy.karney: Inverse10Tuple(a12=Degrees, s12=Meter, salp1=_Pass, calp1=_Pass, salp2=_Pass, calp2=_Pass, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 224 pygeodesy.karney, Inverse10Tuple.a12: 0.5
    test 225 pygeodesy.karney, Inverse10Tuple.s12: 0.5
    test 226 pygeodesy.karney, Inverse10Tuple.salp1: 0.5
    test 227 pygeodesy.karney, Inverse10Tuple.calp1: 0.5
    test 228 pygeodesy.karney, Inverse10Tuple.salp2: 0.5
    test 229 pygeodesy.karney, Inverse10Tuple.calp2: 0.5
    test 230 pygeodesy.karney, Inverse10Tuple.m12: 0.5
    test 231 pygeodesy.karney, Inverse10Tuple.M12: 0.5
    test 232 pygeodesy.karney, Inverse10Tuple.M21: 0.5
    test 233 pygeodesy.karney, Inverse10Tuple.S12: 0.5
    test 234 pygeodesy.karney, Inverse10Tuple._validated: True
    test 235 pygeodesy.karney, Inverse10Tuple._validated: True
    test 236 pygeodesy.ltpTuples: Aer4Tuple(azimuth=0.5, elevation=0.5, slantrange=0.5, ltp=0.5)
    test 237 pygeodesy.ltpTuples: Aer4Tuple(azimuth=Meter, elevation=Meter, slantrange=Meter, ltp=_Pass)
    test 238 pygeodesy.ltpTuples, Aer4Tuple.azimuth: 0.5
    test 239 pygeodesy.ltpTuples, Aer4Tuple.elevation: 0.5
    test 240 pygeodesy.ltpTuples, Aer4Tuple.slantrange: 0.5
    test 241 pygeodesy.ltpTuples, Aer4Tuple.ltp: 0.5
    test 242 pygeodesy.ltpTuples, Aer4Tuple._validated: True
    test 243 pygeodesy.ltpTuples, Aer4Tuple._validated: True
    test 244 pygeodesy.ltpTuples: Enu4Tuple(east=0.5, north=0.5, up=0.5, ltp=0.5)
    test 245 pygeodesy.ltpTuples: Enu4Tuple(east=Meter, north=Meter, up=Meter, ltp=_Pass)
    test 246 pygeodesy.ltpTuples, Enu4Tuple.east: 0.5
    test 247 pygeodesy.ltpTuples, Enu4Tuple.north: 0.5
    test 248 pygeodesy.ltpTuples, Enu4Tuple.up: 0.5
    test 249 pygeodesy.ltpTuples, Enu4Tuple.ltp: 0.5
    test 250 pygeodesy.ltpTuples, Enu4Tuple._validated: True
    test 251 pygeodesy.ltpTuples, Enu4Tuple._validated: True
    test 252 pygeodesy.ltpTuples: Footprint5Tuple(center=0.5, upperleft=0.5, upperight=0.5, loweright=0.5, lowerleft=0.5)
    test 253 pygeodesy.ltpTuples: Footprint5Tuple(center=_Pass, upperleft=_Pass, upperight=_Pass, loweright=_Pass, lowerleft=_Pass)
    test 254 pygeodesy.ltpTuples, Footprint5Tuple.center: 0.5
    test 255 pygeodesy.ltpTuples, Footprint5Tuple.upperleft: 0.5
    test 256 pygeodesy.ltpTuples, Footprint5Tuple.upperight: 0.5
    test 257 pygeodesy.ltpTuples, Footprint5Tuple.loweright: 0.5
    test 258 pygeodesy.ltpTuples, Footprint5Tuple.lowerleft: 0.5
    test 259 pygeodesy.ltpTuples, Footprint5Tuple._validated: True
    test 260 pygeodesy.ltpTuples, Footprint5Tuple._validated: True
    test 261 pygeodesy.ltpTuples: Local9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 262 pygeodesy.ltpTuples: Local9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 263 pygeodesy.ltpTuples, Local9Tuple.x: 0.5
    test 264 pygeodesy.ltpTuples, Local9Tuple.y: 0.5
    test 265 pygeodesy.ltpTuples, Local9Tuple.z: 0.5
    test 266 pygeodesy.ltpTuples, Local9Tuple.lat: 0.5
    test 267 pygeodesy.ltpTuples, Local9Tuple.lon: 0.5
    test 268 pygeodesy.ltpTuples, Local9Tuple.height: 0.5
    test 269 pygeodesy.ltpTuples, Local9Tuple.ltp: 0.5
    test 270 pygeodesy.ltpTuples, Local9Tuple.ecef: 0.5
    test 271 pygeodesy.ltpTuples, Local9Tuple.M: 0.5
    test 272 pygeodesy.ltpTuples, Local9Tuple._validated: True
    test 273 pygeodesy.ltpTuples, Local9Tuple._validated: True
    test 274 pygeodesy.ltpTuples: Ned4Tuple(north=0.5, east=0.5, down=0.5, ltp=0.5)
    test 275 pygeodesy.ltpTuples: Ned4Tuple(north=Meter, east=Meter, down=Meter, ltp=_Pass)
    test 276 pygeodesy.ltpTuples, Ned4Tuple.north: 0.5
    test 277 pygeodesy.ltpTuples, Ned4Tuple.east: 0.5
    test 278 pygeodesy.ltpTuples, Ned4Tuple.down: 0.5
    test 279 pygeodesy.ltpTuples, Ned4Tuple.ltp: 0.5
    test 280 pygeodesy.ltpTuples, Ned4Tuple._validated: True
    test 281 pygeodesy.ltpTuples, Ned4Tuple._validated: True
    test 282 pygeodesy.ltpTuples: Xyz4Tuple(x=0.5, y=0.5, z=0.5, ltp=0.5)
    test 283 pygeodesy.ltpTuples: Xyz4Tuple(x=Meter, y=Meter, z=Meter, ltp=_Pass)
    test 284 pygeodesy.ltpTuples, Xyz4Tuple.x: 0.5
    test 285 pygeodesy.ltpTuples, Xyz4Tuple.y: 0.5
    test 286 pygeodesy.ltpTuples, Xyz4Tuple.z: 0.5
    test 287 pygeodesy.ltpTuples, Xyz4Tuple.ltp: 0.5
    test 288 pygeodesy.ltpTuples, Xyz4Tuple._validated: True
    test 289 pygeodesy.ltpTuples, Xyz4Tuple._validated: True
    test 290 pygeodesy.mgrs: Mgrs4Tuple(zone='0.5', digraph='0.5', easting=0.5, northing=0.5)
    test 291 pygeodesy.mgrs: Mgrs4Tuple(zone=Str, digraph=Str, easting=Easting, northing=Northing)
    test 292 pygeodesy.mgrs, Mgrs4Tuple.zone: 0.5
    test 293 pygeodesy.mgrs, Mgrs4Tuple.digraph: 0.5
    test 294 pygeodesy.mgrs, Mgrs4Tuple.easting: 0.5
    test 295 pygeodesy.mgrs, Mgrs4Tuple.northing: 0.5
    test 296 pygeodesy.mgrs, Mgrs4Tuple._validated: True
    test 297 pygeodesy.mgrs, Mgrs4Tuple._validated: True
    test 298 pygeodesy.mgrs: Mgrs6Tuple(zone='0.5', digraph='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5)
    test 299 pygeodesy.mgrs: Mgrs6Tuple(zone=Str, digraph=Str, easting=Easting, northing=Northing, band=Str, datum=_Pass)
    test 300 pygeodesy.mgrs, Mgrs6Tuple.zone: 0.5
    test 301 pygeodesy.mgrs, Mgrs6Tuple.digraph: 0.5
    test 302 pygeodesy.mgrs, Mgrs6Tuple.easting: 0.5
    test 303 pygeodesy.mgrs, Mgrs6Tuple.northing: 0.5
    test 304 pygeodesy.mgrs, Mgrs6Tuple.band: 0.5
    test 305 pygeodesy.mgrs, Mgrs6Tuple.datum: 0.5
    test 306 pygeodesy.mgrs, Mgrs6Tuple._validated: True
    test 307 pygeodesy.mgrs, Mgrs6Tuple._validated: True
    test 308 pygeodesy.namedTuples: Bearing2Tuple(initial=0.5, final=0.5)
    test 309 pygeodesy.namedTuples: Bearing2Tuple(initial=Bearing, final=Bearing)
    test 310 pygeodesy.namedTuples, Bearing2Tuple.initial: 0.5
    test 311 pygeodesy.namedTuples, Bearing2Tuple.final: 0.5
    test 312 pygeodesy.namedTuples, Bearing2Tuple._validated: True
    test 313 pygeodesy.namedTuples, Bearing2Tuple._validated: True
    test 314 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=0.5, latlonNE=0.5)
    test 315 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=_Pass, latlonNE=_Pass)
    test 316 pygeodesy.namedTuples, Bounds2Tuple.latlonSW: 0.5
    test 317 pygeodesy.namedTuples, Bounds2Tuple.latlonNE: 0.5
    test 318 pygeodesy.namedTuples, Bounds2Tuple._validated: True
    test 319 pygeodesy.namedTuples, Bounds2Tuple._validated: True
    test 320 pygeodesy.namedTuples: Bounds4Tuple(latS=0.5, lonW=0.5, latN=0.5, lonE=0.5)
    test 321 pygeodesy.namedTuples: Bounds4Tuple(latS=Lat, lonW=Lon, latN=Lat, lonE=Lon)
    test 322 pygeodesy.namedTuples, Bounds4Tuple.latS: 0.5
    test 323 pygeodesy.namedTuples, Bounds4Tuple.lonW: 0.5
    test 324 pygeodesy.namedTuples, Bounds4Tuple.latN: 0.5
    test 325 pygeodesy.namedTuples, Bounds4Tuple.lonE: 0.5
    test 326 pygeodesy.namedTuples, Bounds4Tuple._validated: True
    test 327 pygeodesy.namedTuples, Bounds4Tuple._validated: True
    test 328 pygeodesy.namedTuples: Destination2Tuple(destination=0.5, final=0.5)
    test 329 pygeodesy.namedTuples: Destination2Tuple(destination=_Pass, final=Bearing)
    test 330 pygeodesy.namedTuples, Destination2Tuple.destination: 0.5
    test 331 pygeodesy.namedTuples, Destination2Tuple.final: 0.5
    test 332 pygeodesy.namedTuples, Destination2Tuple._validated: True
    test 333 pygeodesy.namedTuples, Destination2Tuple._validated: True
    test 334 pygeodesy.namedTuples: Destination3Tuple(lat=0.5, lon=0.5, final=0.5)
    test 335 pygeodesy.namedTuples: Destination3Tuple(lat=Lat, lon=Lon, final=Bearing)
    test 336 pygeodesy.namedTuples, Destination3Tuple.lat: 0.5
    test 337 pygeodesy.namedTuples, Destination3Tuple.lon: 0.5
    test 338 pygeodesy.namedTuples, Destination3Tuple.final: 0.5
    test 339 pygeodesy.namedTuples, Destination3Tuple._validated: True
    test 340 pygeodesy.namedTuples, Destination3Tuple._validated: True
    test 341 pygeodesy.namedTuples: Distance2Tuple(distance=0.5, initial=0.5)
    test 342 pygeodesy.namedTuples: Distance2Tuple(distance=Meter, initial=Bearing)
    test 343 pygeodesy.namedTuples, Distance2Tuple.distance: 0.5
    test 344 pygeodesy.namedTuples, Distance2Tuple.initial: 0.5
    test 345 pygeodesy.namedTuples, Distance2Tuple._validated: True
    test 346 pygeodesy.namedTuples, Distance2Tuple._validated: True
    test 347 pygeodesy.namedTuples: Distance3Tuple(distance=0.5, initial=0.5, final=0.5)
    test 348 pygeodesy.namedTuples: Distance3Tuple(distance=Meter, initial=Bearing, final=Bearing)
    test 349 pygeodesy.namedTuples, Distance3Tuple.distance: 0.5
    test 350 pygeodesy.namedTuples, Distance3Tuple.initial: 0.5
    test 351 pygeodesy.namedTuples, Distance3Tuple.final: 0.5
    test 352 pygeodesy.namedTuples, Distance3Tuple._validated: True
    test 353 pygeodesy.namedTuples, Distance3Tuple._validated: True
    test 354 pygeodesy.namedTuples: Distance4Tuple(distance2=0.5, delta_lat=0.5, delta_lon=0.5, unroll_lon2=0.5)
    test 355 pygeodesy.namedTuples: Distance4Tuple(distance2=Degrees2, delta_lat=Degrees, delta_lon=Degrees, unroll_lon2=Degrees)
    test 356 pygeodesy.namedTuples, Distance4Tuple.distance2: 0.5
    test 357 pygeodesy.namedTuples, Distance4Tuple.delta_lat: 0.5
    test 358 pygeodesy.namedTuples, Distance4Tuple.delta_lon: 0.5
    test 359 pygeodesy.namedTuples, Distance4Tuple.unroll_lon2: 0.5
    test 360 pygeodesy.namedTuples, Distance4Tuple._validated: True
    test 361 pygeodesy.namedTuples, Distance4Tuple._validated: True
    test 362 pygeodesy.namedTuples: EasNor2Tuple(easting=0.5, northing=0.5)
    test 363 pygeodesy.namedTuples: EasNor2Tuple(easting=Easting, northing=Northing)
    test 364 pygeodesy.namedTuples, EasNor2Tuple.easting: 0.5
    test 365 pygeodesy.namedTuples, EasNor2Tuple.northing: 0.5
    test 366 pygeodesy.namedTuples, EasNor2Tuple._validated: True
    test 367 pygeodesy.namedTuples, EasNor2Tuple._validated: True
    test 368 pygeodesy.namedTuples: EasNor3Tuple(easting=0.5, northing=0.5, height=0.5)
    test 369 pygeodesy.namedTuples: EasNor3Tuple(easting=Easting, northing=Northing, height=Height)
    test 370 pygeodesy.namedTuples, EasNor3Tuple.easting: 0.5
    test 371 pygeodesy.namedTuples, EasNor3Tuple.northing: 0.5
    test 372 pygeodesy.namedTuples, EasNor3Tuple.height: 0.5
    test 373 pygeodesy.namedTuples, EasNor3Tuple._validated: True
    test 374 pygeodesy.namedTuples, EasNor3Tuple._validated: True
    test 375 pygeodesy.namedTuples: Intersection3Tuple(point=0.5, outside1=0, outside2=0)
    test 376 pygeodesy.namedTuples: Intersection3Tuple(point=_Pass, outside1=Int, outside2=Int)
    test 377 pygeodesy.namedTuples, Intersection3Tuple.point: 0.5
    test 378 pygeodesy.namedTuples, Intersection3Tuple.outside1: 0.5
    test 379 pygeodesy.namedTuples, Intersection3Tuple.outside2: 0.5
    test 380 pygeodesy.namedTuples, Intersection3Tuple._validated: True
    test 381 pygeodesy.namedTuples, Intersection3Tuple._validated: True
    test 382 pygeodesy.namedTuples: LatLon2Tuple(lat=0.5, lon=0.5)
    test 383 pygeodesy.namedTuples: LatLon2Tuple(lat=Lat, lon=Lon)
    test 384 pygeodesy.namedTuples, LatLon2Tuple.lat: 0.5
    test 385 pygeodesy.namedTuples, LatLon2Tuple.lon: 0.5
    test 386 pygeodesy.namedTuples, LatLon2Tuple._validated: True
    test 387 pygeodesy.namedTuples, LatLon2Tuple._validated: True
    test 388 pygeodesy.namedTuples: LatLon3Tuple(lat=0.5, lon=0.5, height=0.5)
    test 389 pygeodesy.namedTuples: LatLon3Tuple(lat=Lat, lon=Lon, height=Height)
    test 390 pygeodesy.namedTuples, LatLon3Tuple.lat: 0.5
    test 391 pygeodesy.namedTuples, LatLon3Tuple.lon: 0.5
    test 392 pygeodesy.namedTuples, LatLon3Tuple.height: 0.5
    test 393 pygeodesy.namedTuples, LatLon3Tuple._validated: True
    test 394 pygeodesy.namedTuples, LatLon3Tuple._validated: True
    test 395 pygeodesy.namedTuples: LatLon4Tuple(lat=0.5, lon=0.5, height=0.5, datum=0.5)
    test 396 pygeodesy.namedTuples: LatLon4Tuple(lat=Lat, lon=Lon, height=Height, datum=_Pass)
    test 397 pygeodesy.namedTuples, LatLon4Tuple.lat: 0.5
    test 398 pygeodesy.namedTuples, LatLon4Tuple.lon: 0.5
    test 399 pygeodesy.namedTuples, LatLon4Tuple.height: 0.5
    test 400 pygeodesy.namedTuples, LatLon4Tuple.datum: 0.5
    test 401 pygeodesy.namedTuples, LatLon4Tuple._validated: True
    test 402 pygeodesy.namedTuples, LatLon4Tuple._validated: True
    test 403 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=0.5, lon=0.5, datum=0.5)
    test 404 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=Lat, lon=Lon, datum=_Pass)
    test 405 pygeodesy.namedTuples, LatLonDatum3Tuple.lat: 0.5
    test 406 pygeodesy.namedTuples, LatLonDatum3Tuple.lon: 0.5
    test 407 pygeodesy.namedTuples, LatLonDatum3Tuple.datum: 0.5
    test 408 pygeodesy.namedTuples, LatLonDatum3Tuple._validated: True
    test 409 pygeodesy.namedTuples, LatLonDatum3Tuple._validated: True
    test 410 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=0.5, lon=0.5, datum=0.5, convergence=0.5, scale=0.5)
    test 411 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=Lat, lon=Lon, datum=_Pass, convergence=Degrees, scale=Scalar)
    test 412 pygeodesy.namedTuples, LatLonDatum5Tuple.lat: 0.5
    test 413 pygeodesy.namedTuples, LatLonDatum5Tuple.lon: 0.5
    test 414 pygeodesy.namedTuples, LatLonDatum5Tuple.datum: 0.5
    test 415 pygeodesy.namedTuples, LatLonDatum5Tuple.convergence: 0.5
    test 416 pygeodesy.namedTuples, LatLonDatum5Tuple.scale: 0.5
    test 417 pygeodesy.namedTuples, LatLonDatum5Tuple._validated: True
    test 418 pygeodesy.namedTuples, LatLonDatum5Tuple._validated: True
    test 419 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=0.5, lon=0.5, precision=0)
    test 420 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=Lat, lon=Lon, precision=Precision_)
    test 421 pygeodesy.namedTuples, LatLonPrec3Tuple.lat: 0.5
    test 422 pygeodesy.namedTuples, LatLonPrec3Tuple.lon: 0.5
    test 423 pygeodesy.namedTuples, LatLonPrec3Tuple.precision: 0.5
    test 424 pygeodesy.namedTuples, LatLonPrec3Tuple._validated: True
    test 425 pygeodesy.namedTuples, LatLonPrec3Tuple._validated: True
    test 426 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=0.5, lon=0.5, precision=0, height=0.5, radius=0.5)
    test 427 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=Lat, lon=Lon, precision=Precision_, height=Height, radius=Radius)
    test 428 pygeodesy.namedTuples, LatLonPrec5Tuple.lat: 0.5
    test 429 pygeodesy.namedTuples, LatLonPrec5Tuple.lon: 0.5
    test 430 pygeodesy.namedTuples, LatLonPrec5Tuple.precision: 0.5
    test 431 pygeodesy.namedTuples, LatLonPrec5Tuple.height: 0.5
    test 432 pygeodesy.namedTuples, LatLonPrec5Tuple.radius: 0.5
    test 433 pygeodesy.namedTuples, LatLonPrec5Tuple._validated: True
    test 434 pygeodesy.namedTuples, LatLonPrec5Tuple._validated: True
    test 435 pygeodesy.namedTuples: NearestOn3Tuple(closest=0.5, distance=0.5, angle=0.5)
    test 436 pygeodesy.namedTuples: NearestOn3Tuple(closest=_Pass, distance=Meter, angle=Degrees)
    test 437 pygeodesy.namedTuples, NearestOn3Tuple.closest: 0.5
    test 438 pygeodesy.namedTuples, NearestOn3Tuple.distance: 0.5
    test 439 pygeodesy.namedTuples, NearestOn3Tuple.angle: 0.5
    test 440 pygeodesy.namedTuples, NearestOn3Tuple._validated: True
    test 441 pygeodesy.namedTuples, NearestOn3Tuple._validated: True
    test 442 pygeodesy.namedTuples: PhiLam2Tuple(phi=0.5, lam=0.5)
    test 443 pygeodesy.namedTuples: PhiLam2Tuple(phi=Phi, lam=Lam)
    test 444 pygeodesy.namedTuples, PhiLam2Tuple.phi: 0.5
    test 445 pygeodesy.namedTuples, PhiLam2Tuple.lam: 0.5
    test 446 pygeodesy.namedTuples, PhiLam2Tuple._validated: True
    test 447 pygeodesy.namedTuples, PhiLam2Tuple._validated: True
    test 448 pygeodesy.namedTuples: PhiLam3Tuple(phi=0.5, lam=0.5, height=0.5)
    test 449 pygeodesy.namedTuples: PhiLam3Tuple(phi=Phi, lam=Lam, height=Height)
    test 450 pygeodesy.namedTuples, PhiLam3Tuple.phi: 0.5
    test 451 pygeodesy.namedTuples, PhiLam3Tuple.lam: 0.5
    test 452 pygeodesy.namedTuples, PhiLam3Tuple.height: 0.5
    test 453 pygeodesy.namedTuples, PhiLam3Tuple._validated: True
    test 454 pygeodesy.namedTuples, PhiLam3Tuple._validated: True
    test 455 pygeodesy.namedTuples: PhiLam4Tuple(phi=0.5, lam=0.5, height=0.5, datum=0.5)
    test 456 pygeodesy.namedTuples: PhiLam4Tuple(phi=Phi, lam=Lam, height=Height, datum=_Pass)
    test 457 pygeodesy.namedTuples, PhiLam4Tuple.phi: 0.5
    test 458 pygeodesy.namedTuples, PhiLam4Tuple.lam: 0.5
    test 459 pygeodesy.namedTuples, PhiLam4Tuple.height: 0.5
    test 460 pygeodesy.namedTuples, PhiLam4Tuple.datum: 0.5
    test 461 pygeodesy.namedTuples, PhiLam4Tuple._validated: True
    test 462 pygeodesy.namedTuples, PhiLam4Tuple._validated: True
    test 463 pygeodesy.namedTuples: Point3Tuple(x=0.5, y=0.5, ll=0.5)
    test 464 pygeodesy.namedTuples: Point3Tuple(x=Meter, y=Meter, ll=_Pass)
    test 465 pygeodesy.namedTuples, Point3Tuple.x: 0.5
    test 466 pygeodesy.namedTuples, Point3Tuple.y: 0.5
    test 467 pygeodesy.namedTuples, Point3Tuple.ll: 0.5
    test 468 pygeodesy.namedTuples, Point3Tuple._validated: True
    test 469 pygeodesy.namedTuples, Point3Tuple._validated: True
    test 470 pygeodesy.namedTuples: Points2Tuple(number=0, points=0.5)
    test 471 pygeodesy.namedTuples: Points2Tuple(number=Number_, points=_Pass)
    test 472 pygeodesy.namedTuples, Points2Tuple.number: 0.5
    test 473 pygeodesy.namedTuples, Points2Tuple.points: 0.5
    test 474 pygeodesy.namedTuples, Points2Tuple._validated: True
    test 475 pygeodesy.namedTuples, Points2Tuple._validated: True
    test 476 pygeodesy.namedTuples: Triangle7Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, area=0.5)
    test 477 pygeodesy.namedTuples: Triangle7Tuple(A=Degrees, a=Meter, B=Degrees, b=Meter, C=Degrees, c=Meter, area=Meter2)
    test 478 pygeodesy.namedTuples, Triangle7Tuple.A: 0.5
    test 479 pygeodesy.namedTuples, Triangle7Tuple.a: 0.5
    test 480 pygeodesy.namedTuples, Triangle7Tuple.B: 0.5
    test 481 pygeodesy.namedTuples, Triangle7Tuple.b: 0.5
    test 482 pygeodesy.namedTuples, Triangle7Tuple.C: 0.5
    test 483 pygeodesy.namedTuples, Triangle7Tuple.c: 0.5
    test 484 pygeodesy.namedTuples, Triangle7Tuple.area: 0.5
    test 485 pygeodesy.namedTuples, Triangle7Tuple._validated: True
    test 486 pygeodesy.namedTuples, Triangle7Tuple._validated: True
    test 487 pygeodesy.namedTuples: Triangle8Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, D=0.5, E=0.5)
    test 488 pygeodesy.namedTuples: Triangle8Tuple(A=Radians, a=Radians, B=Radians, b=Radians, C=Radians, c=Radians, D=Radians, E=Radians)
    test 489 pygeodesy.namedTuples, Triangle8Tuple.A: 0.5
    test 490 pygeodesy.namedTuples, Triangle8Tuple.a: 0.5
    test 491 pygeodesy.namedTuples, Triangle8Tuple.B: 0.5
    test 492 pygeodesy.namedTuples, Triangle8Tuple.b: 0.5
    test 493 pygeodesy.namedTuples, Triangle8Tuple.C: 0.5
    test 494 pygeodesy.namedTuples, Triangle8Tuple.c: 0.5
    test 495 pygeodesy.namedTuples, Triangle8Tuple.D: 0.5
    test 496 pygeodesy.namedTuples, Triangle8Tuple.E: 0.5
    test 497 pygeodesy.namedTuples, Triangle8Tuple._validated: True
    test 498 pygeodesy.namedTuples, Triangle8Tuple._validated: True
    test 499 pygeodesy.namedTuples: Trilaterate5Tuple(min=0.5, minPoint=0.5, max=0.5, maxPoint=0.5, n=0)
    test 500 pygeodesy.namedTuples: Trilaterate5Tuple(min=Meter, minPoint=_Pass, max=Meter, maxPoint=_Pass, n=Number_)
    test 501 pygeodesy.namedTuples, Trilaterate5Tuple.min: 0.5
    test 502 pygeodesy.namedTuples, Trilaterate5Tuple.minPoint: 0.5
    test 503 pygeodesy.namedTuples, Trilaterate5Tuple.max: 0.5
    test 504 pygeodesy.namedTuples, Trilaterate5Tuple.maxPoint: 0.5
    test 505 pygeodesy.namedTuples, Trilaterate5Tuple.n: 0.5
    test 506 pygeodesy.namedTuples, Trilaterate5Tuple._validated: True
    test 507 pygeodesy.namedTuples, Trilaterate5Tuple._validated: True
    test 508 pygeodesy.namedTuples: UtmUps2Tuple(zone=0, hemipole='0.5')
    test 509 pygeodesy.namedTuples: UtmUps2Tuple(zone=Number_, hemipole=Str)
    test 510 pygeodesy.namedTuples, UtmUps2Tuple.zone: 0.5
    test 511 pygeodesy.namedTuples, UtmUps2Tuple.hemipole: 0.5
    test 512 pygeodesy.namedTuples, UtmUps2Tuple._validated: True
    test 513 pygeodesy.namedTuples, UtmUps2Tuple._validated: True
    test 514 pygeodesy.namedTuples: UtmUps5Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5')
    test 515 pygeodesy.namedTuples: UtmUps5Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band)
    test 516 pygeodesy.namedTuples, UtmUps5Tuple.zone: 0.5
    test 517 pygeodesy.namedTuples, UtmUps5Tuple.hemipole: 0.5
    test 518 pygeodesy.namedTuples, UtmUps5Tuple.easting: 0.5
    test 519 pygeodesy.namedTuples, UtmUps5Tuple.northing: 0.5
    test 520 pygeodesy.namedTuples, UtmUps5Tuple.band: 0.5
    test 521 pygeodesy.namedTuples, UtmUps5Tuple._validated: True
    test 522 pygeodesy.namedTuples, UtmUps5Tuple._validated: True
    test 523 pygeodesy.namedTuples: UtmUps8Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5, convergence=0.5, scale=0.5)
    test 524 pygeodesy.namedTuples: UtmUps8Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band, datum=_Pass, convergence=Degrees, scale=Scalar)
    test 525 pygeodesy.namedTuples, UtmUps8Tuple.zone: 0.5
    test 526 pygeodesy.namedTuples, UtmUps8Tuple.hemipole: 0.5
    test 527 pygeodesy.namedTuples, UtmUps8Tuple.easting: 0.5
    test 528 pygeodesy.namedTuples, UtmUps8Tuple.northing: 0.5
    test 529 pygeodesy.namedTuples, UtmUps8Tuple.band: 0.5
    test 530 pygeodesy.namedTuples, UtmUps8Tuple.datum: 0.5
    test 531 pygeodesy.namedTuples, UtmUps8Tuple.convergence: 0.5
    test 532 pygeodesy.namedTuples, UtmUps8Tuple.scale: 0.5
    test 533 pygeodesy.namedTuples, UtmUps8Tuple._validated: True
    test 534 pygeodesy.namedTuples, UtmUps8Tuple._validated: True
    test 535 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=0, band='0.5', hemipole='0.5', lat=0.5, lon=0.5)
    test 536 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=Number_, band=Band, hemipole=Str, lat=Lat, lon=Lon)
    test 537 pygeodesy.namedTuples, UtmUpsLatLon5Tuple.zone: 0.5
    test 538 pygeodesy.namedTuples, UtmUpsLatLon5Tuple.band: 0.5
    test 539 pygeodesy.namedTuples, UtmUpsLatLon5Tuple.hemipole: 0.5
    test 540 pygeodesy.namedTuples, UtmUpsLatLon5Tuple.lat: 0.5
    test 541 pygeodesy.namedTuples, UtmUpsLatLon5Tuple.lon: 0.5
    test 542 pygeodesy.namedTuples, UtmUpsLatLon5Tuple._validated: True
    test 543 pygeodesy.namedTuples, UtmUpsLatLon5Tuple._validated: True
    test 544 pygeodesy.namedTuples: Vector2Tuple(x=0.5, y=0.5)
    test 545 pygeodesy.namedTuples: Vector2Tuple(x=Scalar, y=Scalar)
    test 546 pygeodesy.namedTuples, Vector2Tuple.x: 0.5
    test 547 pygeodesy.namedTuples, Vector2Tuple.y: 0.5
    test 548 pygeodesy.namedTuples, Vector2Tuple._validated: True
    test 549 pygeodesy.namedTuples, Vector2Tuple._validated: True
    test 550 pygeodesy.namedTuples: Vector3Tuple(x=0.5, y=0.5, z=0.5)
    test 551 pygeodesy.namedTuples: Vector3Tuple(x=Scalar, y=Scalar, z=Scalar)
    test 552 pygeodesy.namedTuples, Vector3Tuple.x: 0.5
    test 553 pygeodesy.namedTuples, Vector3Tuple.y: 0.5
    test 554 pygeodesy.namedTuples, Vector3Tuple.z: 0.5
    test 555 pygeodesy.namedTuples, Vector3Tuple._validated: True
    test 556 pygeodesy.namedTuples, Vector3Tuple._validated: True
    test 557 pygeodesy.namedTuples: Vector4Tuple(x=0.5, y=0.5, z=0.5, h=0.5)
    test 558 pygeodesy.namedTuples: Vector4Tuple(x=Scalar, y=Scalar, z=Scalar, h=Height)
    test 559 pygeodesy.namedTuples, Vector4Tuple.x: 0.5
    test 560 pygeodesy.namedTuples, Vector4Tuple.y: 0.5
    test 561 pygeodesy.namedTuples, Vector4Tuple.z: 0.5
    test 562 pygeodesy.namedTuples, Vector4Tuple.h: 0.5
    test 563 pygeodesy.namedTuples, Vector4Tuple._validated: True
    test 564 pygeodesy.namedTuples, Vector4Tuple._validated: True
    test 565 pygeodesy.points: NearestOn5Tuple(lat=0.5, lon=0.5, distance=0.5, angle=0.5, height=0.5)
    test 566 pygeodesy.points: NearestOn5Tuple(lat=Lat, lon=Lon, distance=Degrees, angle=Degrees, height=Degrees)
    test 567 pygeodesy.points, NearestOn5Tuple.lat: 0.5
    test 568 pygeodesy.points, NearestOn5Tuple.lon: 0.5
    test 569 pygeodesy.points, NearestOn5Tuple.distance: 0.5
    test 570 pygeodesy.points, NearestOn5Tuple.angle: 0.5
    test 571 pygeodesy.points, NearestOn5Tuple.height: 0.5
    test 572 pygeodesy.points, NearestOn5Tuple._validated: True
    test 573 pygeodesy.points, NearestOn5Tuple._validated: True
    test 574 pygeodesy.points: Shape2Tuple(nrows=0, ncols=0)
    test 575 pygeodesy.points: Shape2Tuple(nrows=Number_, ncols=Number_)
    test 576 pygeodesy.points, Shape2Tuple.nrows: 0.5
    test 577 pygeodesy.points, Shape2Tuple.ncols: 0.5
    test 578 pygeodesy.points, Shape2Tuple._validated: True
    test 579 pygeodesy.points, Shape2Tuple._validated: True
    test 580 pygeodesy.trf: Transform7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 581 pygeodesy.trf: Transform7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 582 pygeodesy.trf, Transform7Tuple.tx: 0.5
    test 583 pygeodesy.trf, Transform7Tuple.ty: 0.5
    test 584 pygeodesy.trf, Transform7Tuple.tz: 0.5
    test 585 pygeodesy.trf, Transform7Tuple.s: 0.5
    test 586 pygeodesy.trf, Transform7Tuple.sx: 0.5
    test 587 pygeodesy.trf, Transform7Tuple.sy: 0.5
    test 588 pygeodesy.trf, Transform7Tuple.sz: 0.5
    test 589 pygeodesy.trf, Transform7Tuple._validated: True
    test 590 pygeodesy.trf, Transform7Tuple._validated: True
    test 591 pygeodesy.vector3d: Circum3Tuple(radius=0.5, center=0.5, deltas=0.5)
    test 592 pygeodesy.vector3d: Circum3Tuple(radius=Radius, center=_Pass, deltas=_Pass)
    test 593 pygeodesy.vector3d, Circum3Tuple.radius: 0.5
    test 594 pygeodesy.vector3d, Circum3Tuple.center: 0.5
    test 595 pygeodesy.vector3d, Circum3Tuple.deltas: 0.5
    test 596 pygeodesy.vector3d, Circum3Tuple._validated: True
    test 597 pygeodesy.vector3d, Circum3Tuple._validated: True
    test 598 pygeodesy.vector3d: Meeus2Tuple(radius=0.5, Type=0.5)
    test 599 pygeodesy.vector3d: Meeus2Tuple(radius=Radius, Type=_Pass)
    test 600 pygeodesy.vector3d, Meeus2Tuple.radius: 0.5
    test 601 pygeodesy.vector3d, Meeus2Tuple.Type: 0.5
    test 602 pygeodesy.vector3d, Meeus2Tuple._validated: True
    test 603 pygeodesy.vector3d, Meeus2Tuple._validated: True
    test 604 pygeodesy.webmercator: EasNorRadius3Tuple(easting=0.5, northing=0.5, radius=0.5)
    test 605 pygeodesy.webmercator: EasNorRadius3Tuple(easting=Easting, northing=Northing, radius=Radius)
    test 606 pygeodesy.webmercator, EasNorRadius3Tuple.easting: 0.5
    test 607 pygeodesy.webmercator, EasNorRadius3Tuple.northing: 0.5
    test 608 pygeodesy.webmercator, EasNorRadius3Tuple.radius: 0.5
    test 609 pygeodesy.webmercator, EasNorRadius3Tuple._validated: True
    test 610 pygeodesy.webmercator, EasNorRadius3Tuple._validated: True
    test 611 pygeodesy.named, _NamedTuple._validated: False

    2 of 611 testNamedTuples.py tests (0.3%) FAILED, incl. 2 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 33.139 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testNavlabExamples.py
./pygeodesy/ellipsoidalNvector.py:462: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED, use L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:40: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use L{ltpTuples.Aer}.
  t.test(1, 'delta', delta.toRepr(prec=3), '[L:470357.384, B:45.109°, E:-2.12°]')  # DEPRECATED
./test/testNavlabExamples.py:42: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  t.test(1, 'bearing', delta.bearing, 45.109, fmt='%.3f')  # 45.109°
./test/testNavlabExamples.py:43: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  t.test(1, 'length', delta.length, 470357.384, fmt='%.3f')  # 470357.384 m
./pygeodesy/ellipsoidalNvector.py:462: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED, use L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:53: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use L{ltpTuples.Aer}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:3606.938, B:33.69°, E:-1.589°]')  # DEPRECATED
./pygeodesy/ellipsoidalNvector.py:247: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned
./pygeodesy/ellipsoidalNvector.py:492: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned3Tuple} has been 3-Tuple C{(north, east, down)}. DEPRECATED, use L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
./pygeodesy/ellipsoidalNvector.py:462: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED, use L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:61: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use L{ltpTuples.Aer}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:116807.681, B:222.493°, E:-0.524°]')  # DEPRECATED
./pygeodesy/ellipsoidalNvector.py:247: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned
./pygeodesy/ellipsoidalNvector.py:492: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned3Tuple} has been 3-Tuple C{(north, east, down)}. DEPRECATED, use L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
./test/testNavlabExamples.py:133: DeprecationWarning: function L{pygeodesy.ellipsoidalNvector.toNed} has been DEPRECATED, use L{pygeodesy.Aer}C{(bearing, elevation, distance).xyzLocal.toNed(B{Ned}, name=B{name})} or L{XyzLocal}C{(pygeodesy.Aer(bearing, elevation, distance)).toNed(B{Ned}, name=B{name})}.
  d = ellipsoidalNvector.toNed(116809.178, 222.493, -0.5416)
./pygeodesy/ellipsoidalNvector.py:462: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED, use L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:135: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  TestsBase.test(t, 'bearing',   d.bearing, '227.507',  fmt='%.3f')  # '222.493'
./test/testNavlabExamples.py:137: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  TestsBase.test(t, 'length',    d.length, '116809.178',  fmt='%.3f')
./test/testNavlabExamples.py:138: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toVector3d} has been DEPRECATED, use property L{xyz}.
  v = d.toVector3d()

    testing testNavlabExamples.py 21.05.17
    test 1 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384
    test 6 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 7 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 8 Example 2 delta: [3000.0, 2000.0, 100.0]
    test 9 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
    test 10 Example 2 destinationNed: 53.327702°N, 063.465119°E, +296.01m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 11 Example 2 delta: [-86126, -78900, 1069]
    test 12 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 13 Example 2 destinationNed: 48.88667°N, 002.37472°E, +0.00m  FAILED, KNOWN, expected 48.88667°N, 002.37472°E
    test 14 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m
    test 15 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]
    test 16 Example 5 distanceTo: 332457
    test 17 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 18 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 19 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 20 Example 6 intermediateTo: 51.372084°N, 000.707337°E
    test 21 Example 7 meanOf: 67.2362°N, 006.9175°W
    test 22 Example 8 destination(pygeodesy.sphericalNvector): 79.991549°N, 090.017698°W
    test 23 Example 8 destination(pygeodesy.sphericalTrigonometry): 79.991549°N, 090.017698°W
    test 24 Example 8 destination(pygeodesy.ellipsoidalVincenty): 79.991584°N, 090.017621°W
    test 25 Example 8 destination(pygeodesy.ellipsoidalExact): 79.991584°N, 090.017621°W
    test 26 Example 8 destination(pygeodesy.ellipsoidalGeodSolve): 79.991584°N, 090.017621°W
    test 27 Example 9 intersection: 40.318643°N, 055.901868°E
    test 28 Example 10 crossTrackDistance: 11118
    test 29 toNed: [-78901.1, -86126.6, 1104.1]
    test 30 bearing: 227.507
    test 31 elevation: -0.5416
    test 32 length: 116809.178
    test 33 toVector3d: (-86126.6, -78901.1, -1104.1)

    19 of 33 testNavlabExamples.py tests (57.6%) FAILED, incl. 2 KNOWN plus 17 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 32.077 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testOsgr.py
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)

    testing testOsgr.py 21.05.17 (module pygeodesy.osgr 21.06.09)

    testOSgr(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 1 WGS84: 51.4778°N, 000.0016°W
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 iteration: None
    test 7 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 8 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 9 iteration: 4
    test 10 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 11 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 12 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 13 iteration: 4
    test 14 toOsgr2: 651409,313177
    test 15 toOsgr3: TG 51409 13177
    test 16 toOsgr4: TG 51409 13177
    test 17 OSGR1: TG 48251 11932
    test 18 OSGR1: [G:TG, E:48251, N:11932]
    test 19 OSGR2: TG 51409 13177
    test 20 OSGR2: [G:TG, E:51409, N:13177]
    test 21 OSGR3: TG 51409 13177
    test 22 OSGR3: [G:TG, E:51409, N:13177]
    test 23 OSGR4: TG 51409 13177
    test 24 OSGR4: [G:TG, E:51409, N:13177]
    test 25 OSGR5: 651409,313177
    test 26 OSGR5: [OSGR:651409.000,313177.000]
    test 27 OSGR5: [OSGR:651409.000,313177.000]
    test 28 OSGR6: 651409,313177
    test 29 OSGR6: (651409, 313177)
    test 30 OSGR6: 651409,313177
    test 31 issue: 38
    test 32 toOsgr: [G:TL, E:29158, N:35174]
    test 33 toOsgr: 529158.072, 235174.785
    test 34 toOsgr: OSGB36
    test 35 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 36 toLatLonOSGB36: OSGB36
    test 37 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 38 toLatLonWGS84 : WGS84
    test 39 Osgr: [G:TQ, E:32014, N:23971]
    test 40 Osgr: 532014.0, 123971.0
    test 41 Osgr: OSGB36
    test 42 toLatLonOSGB36: 50.999425N, 000.118417W
    test 43 toLatLonOSGB36: OSGB36
    test 44 toLatLonWGS84 : 50.999995N, 000.120004W
    test 45 toLatLonWGS84 : WGS84
    test 46 parseOSGR: [G:TQ, E:32014, N:23971]
    test 47 parseOSGR: 532014.0, 123971.0
    test 48 parseOSGR: OSGB36
    test 49 toLatLonOSGB36: 50.999425N, 000.118417W
    test 50 toLatLonOSGB36: OSGB36
    test 51 toLatLonWGS84: 50.999995N, 000.120004W
    test 52 toLatLonWGS84: WGS84
    test 53 toOsgr: [G:TQ, E:32013, N:23971]
    test 54 toOsgr: 532013.969, 123971.046
    test 55 toOsgr: OSGB36
    test 56 toLatLonOSGB36: 50.999426N, 000.118417W
    test 57 toLatLonOSGB36: OSGB36
    test 58 toLatLonWGS84 : 50.999995N, 000.120004W
    test 59 toLatLonWGS84 : WGS84
    test 60 toOsgr: [G:TQ, E:48853, N:24427]
    test 61 toOsgr: 548853.602, 124427.985
    test 62 toOsgr: OSGB36
    test 63 toLatLonOSGB36: 50.999422N, 000.121618E
    test 64 toLatLonOSGB36: OSGB36
    test 65 toLatLonWGS84 : 50.999995N, 000.120004E
    test 66 toLatLonWGS84 : WGS84
    test 67 toLatLon: 52.0N, 000.12W
    test 68 toLatLon: 52.0N, 000.12W
    test 69 toLatLon: 52.0N, 000.12W
    test 70 toLatLon: 52.0N, 000.12W
    test 71 toLatLon: 52.0N, 000.12W
    test 72 toLatLon: 52.0N, 000.12W
    test 73 toLatLon: 52.0N, 000.12W
    test 74 toLatLon: 52.0N, 000.12W
    test 75 LatLon: 49.926244°N, 006.297934°W
    test 76 datum: WGS84
    test 77 datum: OSGB36
    test 78 toOsgr: [G:SV, E:91645, N:11753]
    test 79 datum: OSGB36
    test 80 LatLon: 49.926244°N, 006.297934°W
    test 81 datum: WGS84
    test 82 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testOSgr(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 83 WGS84: 51.4778°N, 000.0016°W
    test 84 OSGB36: 51.477284°N, 000.00002°E
    test 85 WGS84: 51.4778°N, 000.0016°W
    test 86 OSgr1: TG 51409 13177
    test 87 OSgr1: [G:TG, E:51409, N:13177]
    test 88 iteration: None
    test 89 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 90 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 91 iteration: 4
    test 92 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 93 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 94 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 95 iteration: 4
    test 96 toOsgr2: 651409,313177
    test 97 toOsgr3: TG 51409 13177
    test 98 toOsgr4: TG 51409 13177
    test 99 OSGR1: TG 48251 11932
    test 100 OSGR1: [G:TG, E:48251, N:11932]
    test 101 OSGR2: TG 51409 13177
    test 102 OSGR2: [G:TG, E:51409, N:13177]
    test 103 OSGR3: TG 51409 13177
    test 104 OSGR3: [G:TG, E:51409, N:13177]
    test 105 OSGR4: TG 51409 13177
    test 106 OSGR4: [G:TG, E:51409, N:13177]
    test 107 OSGR5: 651409,313177
    test 108 OSGR5: [OSGR:651409.000,313177.000]
    test 109 OSGR5: [OSGR:651409.000,313177.000]
    test 110 OSGR6: 651409,313177
    test 111 OSGR6: (651409, 313177)
    test 112 OSGR6: 651409,313177
    test 113 issue: 38
    test 114 toOsgr: [G:TL, E:29158, N:35174]
    test 115 toOsgr: 529158.072, 235174.785
    test 116 toOsgr: OSGB36
    test 117 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 118 toLatLonOSGB36: OSGB36
    test 119 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 120 toLatLonWGS84 : WGS84
    test 121 Osgr: [G:TQ, E:32014, N:23971]
    test 122 Osgr: 532014.0, 123971.0
    test 123 Osgr: OSGB36
    test 124 toLatLonOSGB36: 50.999425N, 000.118417W
    test 125 toLatLonOSGB36: OSGB36
    test 126 toLatLonWGS84 : 50.999995N, 000.120004W
    test 127 toLatLonWGS84 : WGS84
    test 128 parseOSGR: [G:TQ, E:32014, N:23971]
    test 129 parseOSGR: 532014.0, 123971.0
    test 130 parseOSGR: OSGB36
    test 131 toLatLonOSGB36: 50.999425N, 000.118417W
    test 132 toLatLonOSGB36: OSGB36
    test 133 toLatLonWGS84: 50.999995N, 000.120004W
    test 134 toLatLonWGS84: WGS84
    test 135 toOsgr: [G:TQ, E:32013, N:23971]
    test 136 toOsgr: 532013.969, 123971.046
    test 137 toOsgr: OSGB36
    test 138 toLatLonOSGB36: 50.999426N, 000.118417W
    test 139 toLatLonOSGB36: OSGB36
    test 140 toLatLonWGS84 : 50.999995N, 000.120004W
    test 141 toLatLonWGS84 : WGS84
    test 142 toOsgr: [G:TQ, E:48853, N:24427]
    test 143 toOsgr: 548853.602, 124427.985
    test 144 toOsgr: OSGB36
    test 145 toLatLonOSGB36: 50.999422N, 000.121618E
    test 146 toLatLonOSGB36: OSGB36
    test 147 toLatLonWGS84 : 50.999995N, 000.120004E
    test 148 toLatLonWGS84 : WGS84
    test 149 toLatLon: 52.0N, 000.12W
    test 150 toLatLon: 52.0N, 000.12W
    test 151 toLatLon: 52.0N, 000.12W
    test 152 toLatLon: 52.0N, 000.12W
    test 153 toLatLon: 52.0N, 000.12W
    test 154 toLatLon: 52.0N, 000.12W
    test 155 toLatLon: 52.0N, 000.12W
    test 156 toLatLon: 52.0N, 000.12W
    test 157 LatLon: 49.926244°N, 006.297934°W
    test 158 datum: WGS84
    test 159 datum: OSGB36
    test 160 toOsgr: [G:SV, E:91645, N:11753]
    test 161 datum: OSGB36
    test 162 LatLon: 49.926244°N, 006.297934°W
    test 163 datum: WGS84
    test 164 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testOSgr(pygeodesy.ellipsoidalExact, 21.06.27)
    test 165 WGS84: 51.4778°N, 000.0016°W
    test 166 OSGB36: 51.477284°N, 000.00002°E
    test 167 WGS84: 51.4778°N, 000.0016°W
    test 168 OSgr1: TG 51409 13177
    test 169 OSgr1: [G:TG, E:51409, N:13177]
    test 170 iteration: None
    test 171 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 172 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 173 iteration: 4
    test 174 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 175 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 176 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 177 iteration: 4
    test 178 toOsgr2: 651409,313177
    test 179 toOsgr3: TG 51409 13177
    test 180 toOsgr4: TG 51409 13177
    test 181 OSGR1: TG 48251 11932
    test 182 OSGR1: [G:TG, E:48251, N:11932]
    test 183 OSGR2: TG 51409 13177
    test 184 OSGR2: [G:TG, E:51409, N:13177]
    test 185 OSGR3: TG 51409 13177
    test 186 OSGR3: [G:TG, E:51409, N:13177]
    test 187 OSGR4: TG 51409 13177
    test 188 OSGR4: [G:TG, E:51409, N:13177]
    test 189 OSGR5: 651409,313177
    test 190 OSGR5: [OSGR:651409.000,313177.000]
    test 191 OSGR5: [OSGR:651409.000,313177.000]
    test 192 OSGR6: 651409,313177
    test 193 OSGR6: (651409, 313177)
    test 194 OSGR6: 651409,313177
    test 195 issue: 38
    test 196 toOsgr: [G:TL, E:29158, N:35174]
    test 197 toOsgr: 529158.072, 235174.785
    test 198 toOsgr: OSGB36
    test 199 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 200 toLatLonOSGB36: OSGB36
    test 201 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 202 toLatLonWGS84 : WGS84
    test 203 Osgr: [G:TQ, E:32014, N:23971]
    test 204 Osgr: 532014.0, 123971.0
    test 205 Osgr: OSGB36
    test 206 toLatLonOSGB36: 50.999425N, 000.118417W
    test 207 toLatLonOSGB36: OSGB36
    test 208 toLatLonWGS84 : 50.999995N, 000.120004W
    test 209 toLatLonWGS84 : WGS84
    test 210 parseOSGR: [G:TQ, E:32014, N:23971]
    test 211 parseOSGR: 532014.0, 123971.0
    test 212 parseOSGR: OSGB36
    test 213 toLatLonOSGB36: 50.999425N, 000.118417W
    test 214 toLatLonOSGB36: OSGB36
    test 215 toLatLonWGS84: 50.999995N, 000.120004W
    test 216 toLatLonWGS84: WGS84
    test 217 toOsgr: [G:TQ, E:32013, N:23971]
    test 218 toOsgr: 532013.969, 123971.046
    test 219 toOsgr: OSGB36
    test 220 toLatLonOSGB36: 50.999426N, 000.118417W
    test 221 toLatLonOSGB36: OSGB36
    test 222 toLatLonWGS84 : 50.999995N, 000.120004W
    test 223 toLatLonWGS84 : WGS84
    test 224 toOsgr: [G:TQ, E:48853, N:24427]
    test 225 toOsgr: 548853.602, 124427.985
    test 226 toOsgr: OSGB36
    test 227 toLatLonOSGB36: 50.999422N, 000.121618E
    test 228 toLatLonOSGB36: OSGB36
    test 229 toLatLonWGS84 : 50.999995N, 000.120004E
    test 230 toLatLonWGS84 : WGS84
    test 231 toLatLon: 52.0N, 000.12W
    test 232 toLatLon: 52.0N, 000.12W
    test 233 toLatLon: 52.0N, 000.12W
    test 234 toLatLon: 52.0N, 000.12W
    test 235 toLatLon: 52.0N, 000.12W
    test 236 toLatLon: 52.0N, 000.12W
    test 237 toLatLon: 52.0N, 000.12W
    test 238 toLatLon: 52.0N, 000.12W
    test 239 LatLon: 49.926244°N, 006.297934°W
    test 240 datum: WGS84
    test 241 datum: OSGB36
    test 242 toOsgr: [G:SV, E:91645, N:11753]
    test 243 datum: OSGB36
    test 244 LatLon: 49.926244°N, 006.297934°W
    test 245 datum: WGS84
    test 246 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testOSgr(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 247 WGS84: 51.4778°N, 000.0016°W
    test 248 OSGB36: 51.477284°N, 000.00002°E
    test 249 WGS84: 51.4778°N, 000.0016°W
    test 250 OSgr1: TG 51409 13177
    test 251 OSgr1: [G:TG, E:51409, N:13177]
    test 252 iteration: None
    test 253 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 254 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 255 iteration: 4
    test 256 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 257 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 258 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 259 iteration: 4
    test 260 toOsgr2: 651409,313177
    test 261 toOsgr3: TG 51409 13177
    test 262 toOsgr4: TG 51409 13177
    test 263 OSGR1: TG 48251 11932
    test 264 OSGR1: [G:TG, E:48251, N:11932]
    test 265 OSGR2: TG 51409 13177
    test 266 OSGR2: [G:TG, E:51409, N:13177]
    test 267 OSGR3: TG 51409 13177
    test 268 OSGR3: [G:TG, E:51409, N:13177]
    test 269 OSGR4: TG 51409 13177
    test 270 OSGR4: [G:TG, E:51409, N:13177]
    test 271 OSGR5: 651409,313177
    test 272 OSGR5: [OSGR:651409.000,313177.000]
    test 273 OSGR5: [OSGR:651409.000,313177.000]
    test 274 OSGR6: 651409,313177
    test 275 OSGR6: (651409, 313177)
    test 276 OSGR6: 651409,313177
    test 277 issue: 38
    test 278 toOsgr: [G:TL, E:29158, N:35174]
    test 279 toOsgr: 529158.072, 235174.785
    test 280 toOsgr: OSGB36
    test 281 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 282 toLatLonOSGB36: OSGB36
    test 283 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 284 toLatLonWGS84 : WGS84
    test 285 Osgr: [G:TQ, E:32014, N:23971]
    test 286 Osgr: 532014.0, 123971.0
    test 287 Osgr: OSGB36
    test 288 toLatLonOSGB36: 50.999425N, 000.118417W
    test 289 toLatLonOSGB36: OSGB36
    test 290 toLatLonWGS84 : 50.999995N, 000.120004W
    test 291 toLatLonWGS84 : WGS84
    test 292 parseOSGR: [G:TQ, E:32014, N:23971]
    test 293 parseOSGR: 532014.0, 123971.0
    test 294 parseOSGR: OSGB36
    test 295 toLatLonOSGB36: 50.999425N, 000.118417W
    test 296 toLatLonOSGB36: OSGB36
    test 297 toLatLonWGS84: 50.999995N, 000.120004W
    test 298 toLatLonWGS84: WGS84
    test 299 toOsgr: [G:TQ, E:32013, N:23971]
    test 300 toOsgr: 532013.969, 123971.046
    test 301 toOsgr: OSGB36
    test 302 toLatLonOSGB36: 50.999426N, 000.118417W
    test 303 toLatLonOSGB36: OSGB36
    test 304 toLatLonWGS84 : 50.999995N, 000.120004W
    test 305 toLatLonWGS84 : WGS84
    test 306 toOsgr: [G:TQ, E:48853, N:24427]
    test 307 toOsgr: 548853.602, 124427.985
    test 308 toOsgr: OSGB36
    test 309 toLatLonOSGB36: 50.999422N, 000.121618E
    test 310 toLatLonOSGB36: OSGB36
    test 311 toLatLonWGS84 : 50.999995N, 000.120004E
    test 312 toLatLonWGS84 : WGS84
    test 313 toLatLon: 52.0N, 000.12W
    test 314 toLatLon: 52.0N, 000.12W
    test 315 toLatLon: 52.0N, 000.12W
    test 316 toLatLon: 52.0N, 000.12W
    test 317 toLatLon: 52.0N, 000.12W
    test 318 toLatLon: 52.0N, 000.12W
    test 319 toLatLon: 52.0N, 000.12W
    test 320 toLatLon: 52.0N, 000.12W
    test 321 LatLon: 49.926244°N, 006.297934°W
    test 322 datum: WGS84
    test 323 datum: OSGB36
    test 324 toOsgr: [G:SV, E:91645, N:11753]
    test 325 datum: OSGB36
    test 326 LatLon: 49.926244°N, 006.297934°W
    test 327 datum: WGS84
    test 328 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    32 of 328 testOsgr.py tests (9.8%) FAILED, incl. 24 KNOWN plus 8 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 87.627 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testPoints.py

    testing testPoints.py 21.05.17 (module pygeodesy.points 21.06.30)
    test 1 sizeof(LatLon_.__dict__): 64
    test 2 LatLon2psxy.ABC: True
    test 3 LatLon2psxy.epsilon: 2.22044604925e-16
    test 4 LatLon2psxy.epsilon: 0.0
    test 5 LatLon2psxy.len: 69
    test 6 LatLon2psxy.iter: 69
    test 7 LatLon2psxy.slice1: 11
    test 8 LatLon2psxy.slice2: <class 'pygeodesy.points.LatLon2psxy'>
    test 9 LatLon2psxy.slice3: (-0.701418, 52.220485, LatLon_(52.220485°N, 000.701418°W))
    test 10 LatLon2psxy.str/repr: LatLon2psxy('[LatLon_(52.220489\xc2\xb0N, 000.701206\xc2\xb0W) ... ][69]', closed=False, radius=None, wrap=False)
    test 11 LatLon2psxy.find LL: 10
    test 12 LatLon2psxy.find LL: -1
    test 13 LatLon2psxy.count: 1
    test 14 LatLon2psxy.index: 10
    test 15 LatLon2psxy.rfind: 10
    test 16 LatLon2psxy.in: True
    test 17 LatLon2psxy.count: 0
    test 18 LatLon2psxy.find: -1
    test 19 LatLon2psxy.rfind: -1
    test 20 LatLon2psxy.not in: True
    test 21 LatLon2psxy.find LL: 20
    test 22 LatLon2psxy.find LL: -1
    test 23 LatLon2psxy.count: 1
    test 24 LatLon2psxy.index: 20
    test 25 LatLon2psxy.rfind: 20
    test 26 LatLon2psxy.in: True
    test 27 LatLon2psxy.count: 0
    test 28 LatLon2psxy.find: -1
    test 29 LatLon2psxy.rfind: -1
    test 30 LatLon2psxy.not in: True
    test 31 LatLon2psxy.find LL: 30
    test 32 LatLon2psxy.find LL: -1
    test 33 LatLon2psxy.count: 1
    test 34 LatLon2psxy.index: 30
    test 35 LatLon2psxy.rfind: 30
    test 36 LatLon2psxy.in: True
    test 37 LatLon2psxy.count: 0
    test 38 LatLon2psxy.find: -1
    test 39 LatLon2psxy.rfind: -1
    test 40 LatLon2psxy.not in: True
    test 41 LatLon2psxy.find LL: 40
    test 42 LatLon2psxy.find LL: -1
    test 43 LatLon2psxy.count: 1
    test 44 LatLon2psxy.index: 40
    test 45 LatLon2psxy.rfind: 40
    test 46 LatLon2psxy.in: True
    test 47 LatLon2psxy.count: 0
    test 48 LatLon2psxy.find: -1
    test 49 LatLon2psxy.rfind: -1
    test 50 LatLon2psxy.not in: True
    test 51 LatLon2psxy.find LL: 50
    test 52 LatLon2psxy.find LL: -1
    test 53 LatLon2psxy.count: 1
    test 54 LatLon2psxy.index: 50
    test 55 LatLon2psxy.rfind: 50
    test 56 LatLon2psxy.in: True
    test 57 LatLon2psxy.count: 0
    test 58 LatLon2psxy.find: -1
    test 59 LatLon2psxy.rfind: -1
    test 60 LatLon2psxy.not in: True
    test 61 LatLon2psxy.find LL: 60
    test 62 LatLon2psxy.find LL: -1
    test 63 LatLon2psxy.count: 1
    test 64 LatLon2psxy.index: 60
    test 65 LatLon2psxy.rfind: 60
    test 66 LatLon2psxy.in: True
    test 67 LatLon2psxy.count: 0
    test 68 LatLon2psxy.find: -1
    test 69 LatLon2psxy.rfind: -1
    test 70 LatLon2psxy.not in: True
    test 71 LatLon2psxy.enumerate[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 72 LatLon2psxy.enumerate[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 73 LatLon2psxy.enumerate[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 74 LatLon2psxy.enumerate[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 75 LatLon2psxy.enumerate[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 76 LatLon2psxy.enumerate[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 77 LatLon2psxy.enumerate[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 78 LatLon2psxy.enumerate[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 79 LatLon2psxy.enumerate[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 80 LatLon2psxy.enumerate[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 81 LatLon2psxy.enumerate[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 82 LatLon2psxy.enumerate[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 83 LatLon2psxy.enumerate[*]: 11
    test 84 LatLon2psxy.reversed[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 85 LatLon2psxy.reversed[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 86 LatLon2psxy.reversed[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 87 LatLon2psxy.reversed[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 88 LatLon2psxy.reversed[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 89 LatLon2psxy.reversed[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 90 LatLon2psxy.reversed[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 91 LatLon2psxy.reversed[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 92 LatLon2psxy.reversed[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 93 LatLon2psxy.reversed[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 94 LatLon2psxy.reversed[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 95 LatLon2psxy.reversed[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 96 LatLon2psxy.findall[0]: (0,)
    test 97 LatLon2psxy.findall[1]: (1,)
    test 98 LatLon2psxy.findall[2]: (2,)
    test 99 LatLon2psxy.findall[3]: (3,)
    test 100 LatLon2psxy.findall[4]: (4,)
    test 101 LatLon2psxy.findall[5]: (5,)
    test 102 LatLon2psxy.findall[6]: (6,)
    test 103 LatLon2psxy.findall[7]: (7,)
    test 104 LatLon2psxy.findall[8]: (8,)
    test 105 LatLon2psxy.findall[9]: (9,)
    test 106 LatLon2psxy.findall[10]: (10,)
    test 107 LatLon2psxy.findall[11]: (11,)
    test 108 LatLon2psxy.findall[*]: 11
    test 109 LatLon2psxy.isNumpy2: False
    test 110 LatLon2psxy.isPoints2: True
    test 111 LatLon2psxy.isTuple2: False
    test 112 numpy.__version__: 1.16.6
    test 113 Numpy2LatLon.ABC: True
    test 114 Numpy2LatLon.epsilon: 2.22044604925e-16
    test 115 Numpy2LatLon.epsilon: 0.0
    test 116 Numpy2LatLon.len: 69
    test 117 Numpy2LatLon.iter: 69
    test 118 Numpy2LatLon.shape: (69, 4)
    test 119 Numpy2LatLon.slice1: 11
    test 120 Numpy2LatLon.slice2: <class 'pygeodesy.points.Numpy2LatLon'>
    test 121 Numpy2LatLon.slice3: 52.220485°N, 000.701418°W
    test 122 Numpy2LatLon.str/repr: Numpy2LatLon('array([[-0.701206, 0. , 52.220489, 0. ]] ... )[69]', ilat=2, ilon=0)
    test 123 Numpy2LatLon.subset: <type 'numpy.ndarray'>
    test 124 Numpy2LatLon.count: 1
    test 125 Numpy2LatLon.index: 10
    test 126 Numpy2LatLon.rfind: 10
    test 127 Numpy2LatLon.in: True
    test 128 Numpy2LatLon.count: 0
    test 129 Numpy2LatLon.find: -1
    test 130 Numpy2LatLon.rfind: -1
    test 131 Numpy2LatLon.not in: True
    test 132 Numpy2LatLon.count: 1
    test 133 Numpy2LatLon.index: 20
    test 134 Numpy2LatLon.rfind: 20
    test 135 Numpy2LatLon.in: True
    test 136 Numpy2LatLon.count: 0
    test 137 Numpy2LatLon.find: -1
    test 138 Numpy2LatLon.rfind: -1
    test 139 Numpy2LatLon.not in: True
    test 140 Numpy2LatLon.count: 1
    test 141 Numpy2LatLon.index: 30
    test 142 Numpy2LatLon.rfind: 30
    test 143 Numpy2LatLon.in: True
    test 144 Numpy2LatLon.count: 0
    test 145 Numpy2LatLon.find: -1
    test 146 Numpy2LatLon.rfind: -1
    test 147 Numpy2LatLon.not in: True
    test 148 Numpy2LatLon.count: 1
    test 149 Numpy2LatLon.index: 40
    test 150 Numpy2LatLon.rfind: 40
    test 151 Numpy2LatLon.in: True
    test 152 Numpy2LatLon.count: 0
    test 153 Numpy2LatLon.find: -1
    test 154 Numpy2LatLon.rfind: -1
    test 155 Numpy2LatLon.not in: True
    test 156 Numpy2LatLon.count: 1
    test 157 Numpy2LatLon.index: 50
    test 158 Numpy2LatLon.rfind: 50
    test 159 Numpy2LatLon.in: True
    test 160 Numpy2LatLon.count: 0
    test 161 Numpy2LatLon.find: -1
    test 162 Numpy2LatLon.rfind: -1
    test 163 Numpy2LatLon.not in: True
    test 164 Numpy2LatLon.count: 1
    test 165 Numpy2LatLon.index: 60
    test 166 Numpy2LatLon.rfind: 60
    test 167 Numpy2LatLon.in: True
    test 168 Numpy2LatLon.count: 0
    test 169 Numpy2LatLon.find: -1
    test 170 Numpy2LatLon.rfind: -1
    test 171 Numpy2LatLon.not in: True
    test 172 Numpy2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 173 Numpy2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 174 Numpy2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 175 Numpy2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 176 Numpy2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 177 Numpy2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 178 Numpy2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 179 Numpy2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 180 Numpy2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 181 Numpy2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 182 Numpy2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 183 Numpy2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 184 Numpy2LatLon.enumerate[*]: 11
    test 185 Numpy2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 186 Numpy2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 187 Numpy2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 188 Numpy2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 189 Numpy2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 190 Numpy2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 191 Numpy2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 192 Numpy2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 193 Numpy2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 194 Numpy2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 195 Numpy2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 196 Numpy2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 197 Numpy2LatLon.findall[0]: (0,)
    test 198 Numpy2LatLon.findall[1]: (1,)
    test 199 Numpy2LatLon.findall[2]: (2,)
    test 200 Numpy2LatLon.findall[3]: (3,)
    test 201 Numpy2LatLon.findall[4]: (4,)
    test 202 Numpy2LatLon.findall[5]: (5,)
    test 203 Numpy2LatLon.findall[6]: (6,)
    test 204 Numpy2LatLon.findall[7]: (7,)
    test 205 Numpy2LatLon.findall[8]: (8,)
    test 206 Numpy2LatLon.findall[9]: (9,)
    test 207 Numpy2LatLon.findall[10]: (10,)
    test 208 Numpy2LatLon.findall[11]: (11,)
    test 209 Numpy2LatLon.findall[*]: 11
    test 210 Numpy2LatLon.isNumpy2: True
    test 211 Numpy2LatLon.isPoints2: False
    test 212 Numpy2LatLon.isTuple2: False
    test 213 Tuple2LatLon.ABC: True
    test 214 Tuple2LatLon.epsilon: 2.22044604925e-16
    test 215 Tuple2LatLon.epsilon: 0.0
    test 216 Tuple2LatLon.len: 69
    test 217 Tuple2LatLon.iter: 69
    test 218 Tuple2LatLon.slice1: 11
    test 219 Tuple2LatLon.slice2: <class 'pygeodesy.points.Tuple2LatLon'>
    test 220 Tuple2LatLon.slice3: 52.220485°N, 000.701418°W
    test 221 Tuple2LatLon.str/repr: Tuple2LatLon('[(0, -0.701206, 0, 52.220489) ... ][69]', ilat=3, ilon=1)
    test 222 Tuple2LatLon.subset: <type 'list'>
    test 223 Tuple2LatLon.count: 1
    test 224 Tuple2LatLon.index: 10
    test 225 Tuple2LatLon.rfind: 10
    test 226 Tuple2LatLon.in: True
    test 227 Tuple2LatLon.count: 0
    test 228 Tuple2LatLon.find: -1
    test 229 Tuple2LatLon.rfind: -1
    test 230 Tuple2LatLon.not in: True
    test 231 Tuple2LatLon.count: 1
    test 232 Tuple2LatLon.index: 20
    test 233 Tuple2LatLon.rfind: 20
    test 234 Tuple2LatLon.in: True
    test 235 Tuple2LatLon.count: 0
    test 236 Tuple2LatLon.find: -1
    test 237 Tuple2LatLon.rfind: -1
    test 238 Tuple2LatLon.not in: True
    test 239 Tuple2LatLon.count: 1
    test 240 Tuple2LatLon.index: 30
    test 241 Tuple2LatLon.rfind: 30
    test 242 Tuple2LatLon.in: True
    test 243 Tuple2LatLon.count: 0
    test 244 Tuple2LatLon.find: -1
    test 245 Tuple2LatLon.rfind: -1
    test 246 Tuple2LatLon.not in: True
    test 247 Tuple2LatLon.count: 1
    test 248 Tuple2LatLon.index: 40
    test 249 Tuple2LatLon.rfind: 40
    test 250 Tuple2LatLon.in: True
    test 251 Tuple2LatLon.count: 0
    test 252 Tuple2LatLon.find: -1
    test 253 Tuple2LatLon.rfind: -1
    test 254 Tuple2LatLon.not in: True
    test 255 Tuple2LatLon.count: 1
    test 256 Tuple2LatLon.index: 50
    test 257 Tuple2LatLon.rfind: 50
    test 258 Tuple2LatLon.in: True
    test 259 Tuple2LatLon.count: 0
    test 260 Tuple2LatLon.find: -1
    test 261 Tuple2LatLon.rfind: -1
    test 262 Tuple2LatLon.not in: True
    test 263 Tuple2LatLon.count: 1
    test 264 Tuple2LatLon.index: 60
    test 265 Tuple2LatLon.rfind: 60
    test 266 Tuple2LatLon.in: True
    test 267 Tuple2LatLon.count: 0
    test 268 Tuple2LatLon.find: -1
    test 269 Tuple2LatLon.rfind: -1
    test 270 Tuple2LatLon.not in: True
    test 271 Tuple2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 272 Tuple2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 273 Tuple2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 274 Tuple2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 275 Tuple2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 276 Tuple2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 277 Tuple2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 278 Tuple2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 279 Tuple2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 280 Tuple2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 281 Tuple2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 282 Tuple2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 283 Tuple2LatLon.enumerate[*]: 11
    test 284 Tuple2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 285 Tuple2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 286 Tuple2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 287 Tuple2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 288 Tuple2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 289 Tuple2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 290 Tuple2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 291 Tuple2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 292 Tuple2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 293 Tuple2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 294 Tuple2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 295 Tuple2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 296 Tuple2LatLon.findall[0]: (0,)
    test 297 Tuple2LatLon.findall[1]: (1,)
    test 298 Tuple2LatLon.findall[2]: (2,)
    test 299 Tuple2LatLon.findall[3]: (3,)
    test 300 Tuple2LatLon.findall[4]: (4,)
    test 301 Tuple2LatLon.findall[5]: (5,)
    test 302 Tuple2LatLon.findall[6]: (6,)
    test 303 Tuple2LatLon.findall[7]: (7,)
    test 304 Tuple2LatLon.findall[8]: (8,)
    test 305 Tuple2LatLon.findall[9]: (9,)
    test 306 Tuple2LatLon.findall[10]: (10,)
    test 307 Tuple2LatLon.findall[11]: (11,)
    test 308 Tuple2LatLon.findall[*]: 11
    test 309 Tuple2LatLon.isNumpy2: False
    test 310 Tuple2LatLon.isPoints2: False
    test 311 Tuple2LatLon.isTuple2: True

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.points.LatLon_'>)
    test 312 areaOf: 8.811228e+09
    test 313 centroidOf: 45.5, 1.5
    test 314 perimeterOf: 2.673633e+05
    test 315 isclockwise: False
    test 316 isconvex: True
    test 317 areaOf: 7.086883e+09
    test 318 perimeterOf: 2.687460e+05
    test 319 centroidOf: 0.333333, 0.333333
    test 320 isclockwise: True
    test 321 isconvex: True
    test 322 areaOf: 2.827856e+10
    test 323 perimeterOf: 4.717039e+05
    test 324 centroidOf: 1.0, 1.0
    test 325 isclockwise: False
    test 326 isconvex: True
    test 327 areaOf: 2.747297e+13
    test 328 perimeterOf: 2.332643e+07
    test 329 centroidOf: 52.113, 102.123
    test 330 isclockwise: False
    test 331 isconvex: False
    test 332 areaOf: 8.482014e+10
    test 333 perimeterOf: 1.334104e+06
    test 334 centroidOf: 1.167, 1.667
    test 335 isclockwise: False
    test 336 isconvex: False
    test 337 areaOf: 5.151974e+13
    test 338 perimeterOf: 2.638608e+07
    test 339 centroidOf: -19.444, -133.333
    test 340 isclockwise: True
    test 341 isconvex: True
    test 342 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 343 perimeterOf: 1.562029e+07
    test 344 centroidOf: -71.443, -69.683
    test 345 isclockwise: True
    test 346 isconvex: False
    test 347 points2: 18
    test 348 boundsOf: (-77.9, -163.0, -63.1, 172.0)
    test 349 quadOf: 77.9°S, 163.0°W, 63.1°S, 163.0°W, 63.1°S, 172.0°E, 77.9°S, 172.0°E
    test 350 latlon: (-66.6, -88.0)
    test 351 philam: (-1.162389, -1.53589)
    test 352 toStr: 66.6°S, 088.0°W, kwds='test'
    test 353 __ne__: False
    test 354 isequalTo: True
    test 355 isequalTo: True
    test 356 latlonheight: (-66.6, -88.0, 0)
    test 357 philamheight: (-1.162389, -1.53589, 0)
    test 358 _N_vector: (0.01386, -0.39691, -0.91775)
    test 359 toNvector: (0.01386, -0.39691, -0.91775)
    test 360 toNvector: (0.01386, -0.396906, -0.917755, 0)  FAILED, KNOWN, expected (0.01386, -0.396906, -0.917755)
    test 361 classof: 66.6°S, 088.0°W
    test 362 others: 66.6°S, 088.0°W
    test 363 copy(LatLon_): (<class 'pygeodesy.points.LatLon_'>, True)
    test 364 LatLon_.copy(): (<class 'pygeodesy.points.LatLon_'>, True)

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.sphericalNvector.LatLon'>)
    test 365 areaOf: 8.811228e+09
    test 366 centroidOf: 45.5, 1.5
    test 367 perimeterOf: 2.673633e+05
    test 368 isclockwise: False
    test 369 isconvex: True
    test 370 areaOf: 7.086883e+09
    test 371 perimeterOf: 2.687460e+05
    test 372 centroidOf: 0.333333, 0.333333
    test 373 isclockwise: True
    test 374 isconvex: True
    test 375 areaOf: 2.827856e+10
    test 376 perimeterOf: 4.717039e+05
    test 377 centroidOf: 1.0, 1.0
    test 378 isclockwise: False
    test 379 isconvex: True
    test 380 areaOf: 2.747297e+13
    test 381 perimeterOf: 2.332643e+07
    test 382 centroidOf: 52.113, 102.123
    test 383 isclockwise: False
    test 384 isconvex: False
    test 385 areaOf: 8.482014e+10
    test 386 perimeterOf: 1.334104e+06
    test 387 centroidOf: 1.167, 1.667
    test 388 isclockwise: False
    test 389 isconvex: False
    test 390 areaOf: 5.151974e+13
    test 391 perimeterOf: 2.638608e+07
    test 392 centroidOf: -19.444, -133.333
    test 393 isclockwise: True
    test 394 isconvex: True
    test 395 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 396 perimeterOf: 1.562029e+07
    test 397 centroidOf: -71.443, -69.683
    test 398 isclockwise: True
    test 399 isconvex: False
    test 400 points2: 18
    test 401 latlon: (-66.6, -88.0)
    test 402 philam: (-1.162389, -1.53589)
    test 403 latlonheight: (-66.6, -88.0, 0)
    test 404 philamheight: (-1.162389, -1.53589, 0)
    test 405 _N_vector: (0.01386, -0.39691, -0.91775)
    test 406 toNvector: (0.01386, -0.39691, -0.91775)
    test 407 toNvector: (0.01386, -0.396906, -0.917755)
    test 408 classof: 66.6°S, 088.0°W
    test 409 others: 66.6°S, 088.0°W
    test 410 copy(LatLon): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)
    test 411 LatLon.copy(): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.sphericalTrigonometry.LatLon'>)
    test 412 areaOf: 8.811228e+09
    test 413 centroidOf: 45.5, 1.5
    test 414 perimeterOf: 2.673633e+05
    test 415 isclockwise: False
    test 416 isconvex: True
    test 417 areaOf: 7.086883e+09
    test 418 perimeterOf: 2.687460e+05
    test 419 centroidOf: 0.333333, 0.333333
    test 420 isclockwise: True
    test 421 isconvex: True
    test 422 areaOf: 2.827856e+10
    test 423 perimeterOf: 4.717039e+05
    test 424 centroidOf: 1.0, 1.0
    test 425 isclockwise: False
    test 426 isconvex: True
    test 427 areaOf: 2.747297e+13
    test 428 perimeterOf: 2.332643e+07
    test 429 centroidOf: 52.113, 102.123
    test 430 isclockwise: False
    test 431 isconvex: False
    test 432 areaOf: 8.482014e+10
    test 433 perimeterOf: 1.334104e+06
    test 434 centroidOf: 1.167, 1.667
    test 435 isclockwise: False
    test 436 isconvex: False
    test 437 areaOf: 5.151974e+13
    test 438 perimeterOf: 2.638608e+07
    test 439 centroidOf: -19.444, -133.333
    test 440 isclockwise: True
    test 441 isconvex: True
    test 442 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 443 perimeterOf: 1.562029e+07
    test 444 centroidOf: -71.443, -69.683
    test 445 isclockwise: True
    test 446 isconvex: False
    test 447 points2: 18
    test 448 latlon: (-66.6, -88.0)
    test 449 philam: (-1.162389, -1.53589)
    test 450 latlonheight: (-66.6, -88.0, 0)
    test 451 philamheight: (-1.162389, -1.53589, 0)
    test 452 _N_vector: (0.01386, -0.39691, -0.91775)
    test 453 toNvector: (0.01386, -0.39691, -0.91775)
    test 454 toNvector: (0.01386, -0.396906, -0.917755)
    test 455 classof: 66.6°S, 088.0°W
    test 456 others: 66.6°S, 088.0°W
    test 457 copy(LatLon): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)
    test 458 LatLon.copy(): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.ellipsoidalNvector.LatLon'>)
    test 459 areaOf: 8.811228e+09
    test 460 centroidOf: 45.5, 1.5
    test 461 perimeterOf: 2.673633e+05
    test 462 isclockwise: False
    test 463 isconvex: True
    test 464 areaOf: 7.086883e+09
    test 465 perimeterOf: 2.687460e+05
    test 466 centroidOf: 0.333333, 0.333333
    test 467 isclockwise: True
    test 468 isconvex: True
    test 469 areaOf: 2.827856e+10
    test 470 perimeterOf: 4.717039e+05
    test 471 centroidOf: 1.0, 1.0
    test 472 isclockwise: False
    test 473 isconvex: True
    test 474 areaOf: 2.747297e+13
    test 475 perimeterOf: 2.332643e+07
    test 476 centroidOf: 52.113, 102.123
    test 477 isclockwise: False
    test 478 isconvex: False
    test 479 areaOf: 8.482014e+10
    test 480 perimeterOf: 1.334104e+06
    test 481 centroidOf: 1.167, 1.667
    test 482 isclockwise: False
    test 483 isconvex: False
    test 484 areaOf: 5.151974e+13
    test 485 perimeterOf: 2.638608e+07
    test 486 centroidOf: -19.444, -133.333
    test 487 isclockwise: True
    test 488 isconvex: True
    test 489 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 490 perimeterOf: 1.562029e+07
    test 491 centroidOf: -71.443, -69.683
    test 492 isclockwise: True
    test 493 isconvex: False
    test 494 points2: 18
    test 495 latlon: (-66.6, -88.0)
    test 496 philam: (-1.162389, -1.53589)
    test 497 latlonheight: (-66.6, -88.0, 0)
    test 498 philamheight: (-1.162389, -1.53589, 0)
    test 499 _N_vector: (0.01386, -0.39691, -0.91775)
    test 500 toNvector: (0.01386, -0.39691, -0.91775)
    test 501 toNvector: (0.01386, -0.396906, -0.917755)
    test 502 classof: 66.6°S, 088.0°W
    test 503 others: 66.6°S, 088.0°W
    test 504 copy(LatLon): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)
    test 505 LatLon.copy(): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.ellipsoidalVincenty.LatLon'>)
    test 506 areaOf: 8.811228e+09
    test 507 centroidOf: 45.5, 1.5
    test 508 perimeterOf: 2.673633e+05
    test 509 isclockwise: False
    test 510 isconvex: True
    test 511 areaOf: 7.086883e+09
    test 512 perimeterOf: 2.687460e+05
    test 513 centroidOf: 0.333333, 0.333333
    test 514 isclockwise: True
    test 515 isconvex: True
    test 516 areaOf: 2.827856e+10
    test 517 perimeterOf: 4.717039e+05
    test 518 centroidOf: 1.0, 1.0
    test 519 isclockwise: False
    test 520 isconvex: True
    test 521 areaOf: 2.747297e+13
    test 522 perimeterOf: 2.332643e+07
    test 523 centroidOf: 52.113, 102.123
    test 524 isclockwise: False
    test 525 isconvex: False
    test 526 areaOf: 8.482014e+10
    test 527 perimeterOf: 1.334104e+06
    test 528 centroidOf: 1.167, 1.667
    test 529 isclockwise: False
    test 530 isconvex: False
    test 531 areaOf: 5.151974e+13
    test 532 perimeterOf: 2.638608e+07
    test 533 centroidOf: -19.444, -133.333
    test 534 isclockwise: True
    test 535 isconvex: True
    test 536 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 537 perimeterOf: 1.562029e+07
    test 538 centroidOf: -71.443, -69.683
    test 539 isclockwise: True
    test 540 isconvex: False
    test 541 points2: 18
    test 542 latlon: (-66.6, -88.0)
    test 543 philam: (-1.162389, -1.53589)
    test 544 latlonheight: (-66.6, -88.0, 0)
    test 545 philamheight: (-1.162389, -1.53589, 0)
    test 546 _N_vector: (0.01386, -0.39691, -0.91775)
    test 547 toNvector: (0.01386, -0.39691, -0.91775)
    test 548 toNvector: (0.01386, -0.396906, -0.917755)
    test 549 classof: 66.6°S, 088.0°W
    test 550 others: 66.6°S, 088.0°W
    test 551 copy(LatLon): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)
    test 552 LatLon.copy(): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.ellipsoidalKarney.LatLon'>)
    test 553 areaOf: 8.811228e+09
    test 554 centroidOf: 45.5, 1.5
    test 555 perimeterOf: 2.673633e+05
    test 556 isclockwise: False
    test 557 isconvex: True
    test 558 areaOf: 7.086883e+09
    test 559 perimeterOf: 2.687460e+05
    test 560 centroidOf: 0.333333, 0.333333
    test 561 isclockwise: True
    test 562 isconvex: True
    test 563 areaOf: 2.827856e+10
    test 564 perimeterOf: 4.717039e+05
    test 565 centroidOf: 1.0, 1.0
    test 566 isclockwise: False
    test 567 isconvex: True
    test 568 areaOf: 2.747297e+13
    test 569 perimeterOf: 2.332643e+07
    test 570 centroidOf: 52.113, 102.123
    test 571 isclockwise: False
    test 572 isconvex: False
    test 573 areaOf: 8.482014e+10
    test 574 perimeterOf: 1.334104e+06
    test 575 centroidOf: 1.167, 1.667
    test 576 isclockwise: False
    test 577 isconvex: False
    test 578 areaOf: 5.151974e+13
    test 579 perimeterOf: 2.638608e+07
    test 580 centroidOf: -19.444, -133.333
    test 581 isclockwise: True
    test 582 isconvex: True
    test 583 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 584 perimeterOf: 1.562029e+07
    test 585 centroidOf: -71.443, -69.683
    test 586 isclockwise: True
    test 587 isconvex: False
    test 588 points2: 18
    test 589 latlon: (-66.6, -88.0)
    test 590 philam: (-1.162389, -1.53589)
    test 591 latlonheight: (-66.6, -88.0, 0)
    test 592 philamheight: (-1.162389, -1.53589, 0)
    test 593 _N_vector: (0.01386, -0.39691, -0.91775)
    test 594 toNvector: (0.01386, -0.39691, -0.91775)
    test 595 toNvector: (0.01386, -0.396906, -0.917755)
    test 596 classof: 66.6°S, 088.0°W
    test 597 others: 66.6°S, 088.0°W
    test 598 copy(LatLon): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)
    test 599 LatLon.copy(): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)

    testing(pygeodesy.points, 21.06.30, LatLon=<class 'pygeodesy.ellipsoidalExact.LatLon'>)
    test 600 areaOf: 8.811228e+09
    test 601 centroidOf: 45.5, 1.5
    test 602 perimeterOf: 2.673633e+05
    test 603 isclockwise: False
    test 604 isconvex: True
    test 605 areaOf: 7.086883e+09
    test 606 perimeterOf: 2.687460e+05
    test 607 centroidOf: 0.333333, 0.333333
    test 608 isclockwise: True
    test 609 isconvex: True
    test 610 areaOf: 2.827856e+10
    test 611 perimeterOf: 4.717039e+05
    test 612 centroidOf: 1.0, 1.0
    test 613 isclockwise: False
    test 614 isconvex: True
    test 615 areaOf: 2.747297e+13
    test 616 perimeterOf: 2.332643e+07
    test 617 centroidOf: 52.113, 102.123
    test 618 isclockwise: False
    test 619 isconvex: False
    test 620 areaOf: 8.482014e+10
    test 621 perimeterOf: 1.334104e+06
    test 622 centroidOf: 1.167, 1.667
    test 623 isclockwise: False
    test 624 isconvex: False
    test 625 areaOf: 5.151974e+13
    test 626 perimeterOf: 2.638608e+07
    test 627 centroidOf: -19.444, -133.333
    test 628 isclockwise: True
    test 629 isconvex: True
    test 630 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 631 perimeterOf: 1.562029e+07
    test 632 centroidOf: -71.443, -69.683
    test 633 isclockwise: True
    test 634 isconvex: False
    test 635 points2: 18
    test 636 latlon: (-66.6, -88.0)
    test 637 philam: (-1.162389, -1.53589)
    test 638 latlonheight: (-66.6, -88.0, 0)
    test 639 philamheight: (-1.162389, -1.53589, 0)
    test 640 _N_vector: (0.01386, -0.39691, -0.91775)
    test 641 toNvector: (0.01386, -0.39691, -0.91775)
    test 642 toNvector: (0.01386, -0.396906, -0.917755)
    test 643 classof: 66.6°S, 088.0°W
    test 644 others: 66.6°S, 088.0°W
    test 645 copy(LatLon): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)
    test 646 LatLon.copy(): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)

    testArea(pygeodesy.ellipsoidalExact, 21.06.27)
    test 647 luneOf: 1.27516405431022e+14

    testArea(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 648 luneOf: 1.27516405431022e+14

    8 of 648 testPoints.py tests (1.2%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 276.489 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testProps.py

    testing testProps.py 21.01.08

    test<class 'pygeodesy.named._NamedBase'>(pygeodesy.props, 21.06.09)
    test 1 P1: 1
    test 2 p1: 2
    test 3 P2: 1
    test 4 p2: 3
    test 5 q1: 1
    test 6 q2: 2
    test 7 q3: True
    test 8 P3: 4
    test 9 p3: 5
    test 10 q4: False
    test 11 q5: 2
    test 12 X1: immutable Property_RO: X.setter X
    test 13 X2: invalid Property_RO: X.deleter X
    test 14 y1: immutable property_RO: y.setter y
    test 15 y2: invalid property_RO: y.deleter y
    test 16 Z1: invalid Property: Z.deleter Z
    test 17 Z2: invalid Property: Z.getter Z

    test<class 'pygeodesy.ellipsoids.Ellipsoid'>(pygeodesy.props, 21.06.09)
    test 18 P1: 1
    test 19 p1: 2
    test 20 P2: 1
    test 21 p2: 3
    test 22 q1: 1
    test 23 q2: 2
    test 24 q3: True
    test 25 P3: 4
    test 26 p3: 5
    test 27 q4: False
    test 28 q5: 2
    test 29 X1: immutable Property_RO: X.setter X
    test 30 X2: invalid Property_RO: X.deleter X
    test 31 y1: immutable property_RO: y.setter y
    test 32 y2: invalid property_RO: y.deleter y
    test 33 Z1: invalid Property: Z.deleter Z
    test 34 Z2: invalid Property: Z.getter Z

    all 34 testProps.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.207 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testRoutes.py
./test/testRoutes.py:17099: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = f(pts, wrap=True, **kwds)
./test/testRoutes.py:17099: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  r = f(pts, wrap=True, **kwds)

    testing testRoutes.py 21.02.11
    test 1 points.areaOf('Antarctica', adjust=True, radius=6371.008771, wrap=True): 1751693.701  FAILED, KNOWN, expected 13552524.800
    test 2 points.areaOf('PtsFFI', adjust=True, radius=6371.008771, wrap=True): 1.288
    test 3 points.areaOf('RdpFFI', adjust=True, radius=6371.008771, wrap=True): 1.241
    test 4 points.areaOf('Pts', adjust=True, radius=6371.008771, wrap=True): 131184.240
    test 5 points.areaOf('VwPts', adjust=True, radius=6371.008771, wrap=True): 140310.144
    test 6 points.areaOf('_JFK_LHR1', adjust=True, radius=6371.008771, wrap=True): 41383852.921  FAILED, KNOWN, expected 40041368.849
    test 7 points.areaOf('_JFK_LHR2', adjust=True, radius=6371.008771, wrap=True): 82767705.842  FAILED, KNOWN, expected 80082737.697
    test 8 points.areaOf('Antarctica', adjust=False, radius=6371.008771, wrap=True): 10446635.730  FAILED, KNOWN, expected 13552524.800
    test 9 points.areaOf('PtsFFI', adjust=False, radius=6371.008771, wrap=True): 2.185  FAILED, KNOWN, expected 1.288
    test 10 points.areaOf('RdpFFI', adjust=False, radius=6371.008771, wrap=True): 2.105  FAILED, KNOWN, expected 1.241
    test 11 points.areaOf('Pts', adjust=False, radius=6371.008771, wrap=True): 233595.011  FAILED, KNOWN, expected 131184.240
    test 12 points.areaOf('VwPts', adjust=False, radius=6371.008771, wrap=True): 258465.911  FAILED, KNOWN, expected 140310.144
    test 13 points.areaOf('_JFK_LHR1', adjust=False, radius=6371.008771, wrap=True): 41780731.678  FAILED, KNOWN, expected 40041368.849
    test 14 points.areaOf('_JFK_LHR2', adjust=False, radius=6371.008771, wrap=True): 83561463.357  FAILED, KNOWN, expected 80082737.697
    test 15 sphericalTrigonometry.areaOf('Antarctica', radius=6371.008771, wrap=True): 13552524.810
    test 16 sphericalTrigonometry.areaOf('PtsFFI', radius=6371.008771, wrap=True): 1.338
    test 17 sphericalTrigonometry.areaOf('RdpFFI', radius=6371.008771, wrap=True): 1.289
    test 18 sphericalTrigonometry.areaOf('Pts', radius=6371.008771, wrap=True): 125942.444
    test 19 sphericalTrigonometry.areaOf('VwPts', radius=6371.008771, wrap=True): 118897.757
    test 20 sphericalTrigonometry.areaOf('_JFK_LHR1', radius=6371.008771, wrap=True): 40105639.197
    test 21 sphericalTrigonometry.areaOf('_JFK_LHR2', radius=6371.008771, wrap=True): 80211278.393
    test 22 ellipsoidalVincenty.areaOf: No module named geographiclib  FAILED, KNOWN, expected DEPRECATED
    test 23 points.perimeterOf('Antarctica', closed=False, radius=6371008.771415, wrap=True): 15620294.792  FAILED, KNOWN, expected 16765661.499
    test 24 points.perimeterOf('PtsFFI', closed=False, radius=6371008.771415, wrap=True): 3224.123
    test 25 points.perimeterOf('RdpFFI', closed=False, radius=6371008.771415, wrap=True): 3185.467
    test 26 points.perimeterOf('Pts', closed=False, radius=6371008.771415, wrap=True): 2762313.129
    test 27 points.perimeterOf('VwPts', closed=False, radius=6371008.771415, wrap=True): 2672557.850
    test 28 points.perimeterOf('_JFK_LHR1', closed=False, radius=6371008.771415, wrap=True): 16034670.768  FAILED, KNOWN, expected 15766750.804
    test 29 points.perimeterOf('_JFK_LHR2', closed=False, radius=6371008.771415, wrap=True): 26286857.120  FAILED, KNOWN, expected 25981742.208
    test 30 sphericalTrigonometry.perimeterOf('Antarctica', closed=False, radius=6371008.771415, wrap=True): 15470624.834
    test 31 sphericalTrigonometry.perimeterOf('PtsFFI', closed=False, radius=6371008.771415, wrap=True): 3224.123
    test 32 sphericalTrigonometry.perimeterOf('RdpFFI', closed=False, radius=6371008.771415, wrap=True): 3185.467
    test 33 sphericalTrigonometry.perimeterOf('Pts', closed=False, radius=6371008.771415, wrap=True): 2762313.116
    test 34 sphericalTrigonometry.perimeterOf('VwPts', closed=False, radius=6371008.771415, wrap=True): 2672556.441
    test 35 sphericalTrigonometry.perimeterOf('_JFK_LHR1', closed=False, radius=6371008.771415, wrap=True): 15789078.314
    test 36 sphericalTrigonometry.perimeterOf('_JFK_LHR2', closed=False, radius=6371008.771415, wrap=True): 26041264.665
    test 37 ellipsoidalVincenty.perimeterOf: No module named geographiclib  FAILED, KNOWN, expected DEPRECATED
    test 38 no module: geographiclib.Geodesic
    test 39 isclockwise('Antarctica', adjust=False, wrap=True): 1.000
    test 40 isclockwise('PtsFFI', adjust=False, wrap=True): 1.000
    test 41 isclockwise('RdpFFI', adjust=False, wrap=True): 1.000
    test 42 isclockwise('Pts', adjust=False, wrap=True): 1.000
    test 43 isclockwise('VwPts', adjust=False, wrap=True): 1.000
    test 44 isclockwise('_JFK_LHR1', adjust=False, wrap=True): 0.000
    test 45 isclockwise('_JFK_LHR2', adjust=False, wrap=True): 0.000

    17 of 45 testRoutes.py tests (37.8%) FAILED, incl. 15 KNOWN plus 2 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 5.757 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testSimplify.py

    testing testSimplify.py 20.04.06 (module pygeodesy.simplify 21.06.10)
    test 1 simplify1(16614, adjust=True) 1m (149.215 ms): 16597
    test 2 simplifyRW(16614, indices=True, adjust=True, shortest=False) 1m (612.154 ms): 7095
    test 3 simplifyRW(16614, adjust=True, shortest=False) 1m (592.873 ms): 7095
    test 4 simplifyRW(16614, adjust=True, shortest=True) 1m (753.537 ms): 8302
    test 5 simplifyVWm(16614, indices=True, adjust=True) 1m (382.248 ms): 16328
    test 6 simplifyVWm(16614, adjust=True) 1m (342.502 ms): 16328
    test 7 simplifyVWm(16614, adjust=False) 1m (320.706 ms): 16373
    test 8 simplifyRDPm(16614, adjust=True, shortest=False) 1m (1.320 sec): 15864
    test 9 simplifyRDPm(16614, adjust=True, shortest=True) 1m (1.327 sec): 15867
    test 10 simplifyRDPgr(16614, adjust=True, modified=True, shortest=True) 1m (1.243 sec): 15867
    test 11 simplifyRDPm(16614, adjust=False, shortest=False) 1m (1.619 sec): 15869
    test 12 simplifyRDPfw(16614, adjust=False, modified=True, shortest=False) 1m (1.087 sec): 15869
    test 13 simplifyRDP(16614, indices=True, adjust=True, shortest=True) 1m (2.516 sec): 10960
    test 14 simplifyRDP(16614, adjust=True, shortest=True) 1m (2.483 sec): 10960
    test 15 simplifyRDPgr(16614, adjust=True, modified=False, shortest=True) 1m (1.210 sec): 10960
    test 16 simplifyRDP(16614, indices=True, adjust=False, shortest=False) 1m (2.175 sec): 11248
    test 17 simplifyRDP(16614, adjust=False, shortest=False) 1m (2.189 sec): 11248
    test 18 simplifyRDPfw(16614, adjust=False, modified=False, shortest=False) 1m (689.498 ms): 11248
    test 19 simplifyVW(1661, adjust=True) 1m (46.423 ms): 1641
    test 20 simplifyVW(1661, adjust=False) 1m (36.484 ms): 1646
    test 21 simplifyRDP(1661, adjust=True, shortest=False) 1m (193.971 ms): 1231
    test 22 simplifyRDP(1661, adjust=True, shortest=True) 1m (180.122 ms): 1231
    test 23 simplifyRDPgr(1661, adjust=True, shortest=True) 1m (98.274 ms): 1231
    test 24 simplifyRDP(1661, adjust=False, shortest=False) 1m (172.489 ms): 1267
    test 25 simplifyRDPfw(1661, adjust=False, shortest=False) 1m (55.444 ms): 1267
    test 26 simplifyRDPgr(1661, adjust=False, shortest=True) 1m (72.310 ms): 1267
    test 27 simplifyVW(69, adjust=False) 1m (1.101 ms): 69
    test 28 simplifyRDP(69, adjust=False, shortest=False) 1m (3.489 ms): 50
    test 29 simplifyRDPfw(69, adjust=False, shortest=False) 1m (1.129 ms): 50
    test 30 simplifyRDPgr(69, adjust=False, shortest=True) 1m (1.598 ms): 50
    test 31 simplifyRDPgr(69, adjust=True, shortest=True) 1m (1.906 ms): 45
    test 32 simplifyRDP(5, adjust=False, shortest=True) 1m (112.057 us): 5
    test 33 simplifyVW(5, adjust=False, attr='name') 30m (102.043 us): 5
    test 34 numpy.__version__: 1.16.6
    test 35 simplify1(69, adjust=False) 1m (1.338 ms): 69
    test 36 simplify1(69, adjust=False) result: <type 'numpy.ndarray'>
    test 37 simplifyRW(69, adjust=False) 1m (1.295 ms): 33
    test 38 simplifyRW(69, adjust=False) result: <type 'numpy.ndarray'>
    test 39 simplifyRDP(69, adjust=False) 1m (7.378 ms): 50
    test 40 simplifyRDP(69, adjust=False) result: <type 'numpy.ndarray'>
    test 41 simplifyRDPm(69, adjust=False) 1m (2.608 ms): 67
    test 42 simplifyRDPm(69, adjust=False) result: <type 'numpy.ndarray'>
    test 43 simplifyRDPfw(69, adjust=False) 1m (5.214 ms): 50
    test 44 simplifyRDPgr(69, adjust=False) 1m (8.888 ms): 50
    test 45 simplifyVW(69, adjust=False) 1m (2.704 ms): 69
    test 46 simplifyVW(69, adjust=False) result: <type 'numpy.ndarray'>
    test 47 simplifyVWm(69, adjust=False) 1m (2.656 ms): 69
    test 48 simplifyVWm(69, adjust=False) result: <type 'numpy.ndarray'>
    test 49 simplify1(69, adjust=True) 1m (1.469 ms): 69
    test 50 simplify1(69, adjust=True) result: <type 'numpy.ndarray'>
    test 51 simplifyRW(69, adjust=True) 1m (1.492 ms): 31
    test 52 simplifyRW(69, adjust=True) result: <type 'numpy.ndarray'>
    test 53 simplifyRDP(69, adjust=True) 1m (8.498 ms): 45
    test 54 simplifyRDP(69, adjust=True) result: <type 'numpy.ndarray'>
    test 55 simplifyRDPm(69, adjust=True) 1m (3.026 ms): 67
    test 56 simplifyRDPm(69, adjust=True) result: <type 'numpy.ndarray'>
    test 57 simplifyRDPfw(69, adjust=True) 1m (5.576 ms): 45
    test 58 simplifyRDPgr(69, adjust=True) 1m (9.859 ms): 45
    test 59 simplifyVW(69, adjust=True) 1m (2.965 ms): 69
    test 60 simplifyVW(69, adjust=True) result: <type 'numpy.ndarray'>
    test 61 simplifyVWm(69, adjust=True) 1m (2.862 ms): 69
    test 62 simplifyVWm(69, adjust=True) result: <type 'numpy.ndarray'>
    test 63 simplify1(69, indices=True, adjust=False) 1m (1.181 ms): 69
    test 64 simplify1(69, indices=True, adjust=False) result: <type 'list'>
    test 65 simplifyRW(69, indices=True, adjust=False) 1m (1.304 ms): 33
    test 66 simplifyRW(69, indices=True, adjust=False) result: <type 'list'>
    test 67 simplifyRDP(69, indices=True, adjust=False) 1m (8.021 ms): 50
    test 68 simplifyRDP(69, indices=True, adjust=False) result: <type 'list'>
    test 69 simplifyRDPm(69, indices=True, adjust=False) 1m (2.683 ms): 67
    test 70 simplifyRDPm(69, indices=True, adjust=False) result: <type 'list'>
    test 71 simplifyRDPfw(69, indices=True, adjust=True) 1m (5.500 ms): 45
    test 72 simplifyRDPgr(69, indices=True, adjust=True) 1m (9.573 ms): 45
    test 73 simplifyVW(69, indices=True, adjust=False) 1m (2.604 ms): 69
    test 74 simplifyVW(69, indices=True, adjust=False) result: <type 'list'>
    test 75 simplifyVWm(69, indices=True, adjust=False) 1m (2.450 ms): 69
    test 76 simplifyVWm(69, indices=True, adjust=False) result: <type 'list'>

    all 76 testSimplify.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 21.982 sec

running /System/Library/....Python -W always ~/PyGeodesy/test/testSpherical.py

    testing testSpherical.py 21.05.17

    testLatLon(pygeodesy.sphericalNvector, 21.06.09)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 isequalTo: False
    test 20 antipode1: 52.205°S, 179.881°W
    test 21 antipode2: True
    test 22 antipode3: 52.205°N, 000.119°E
    test 23 antipode4: True
    test 24 antipode5: 52.205°N, 000.119°E
    test 25 initialBearingTo: 156.1666
    test 26 initialBearingTo: 65.8921
    test 27 initialBearingTo: 0.0
    test 28 initialBearingTo: 180.0
    test 29 finalBearingTo: 157.8904
    test 30 finalBearingTo: 93.8581
    test 31 bearingTo2: 156.1666, 157.8904
    test 32 ispolar: True
    test 33 copy: True
    test 34 __eq__: True
    test 35 __ne__: False
    test 36 equirectangularTo: 404329.56
    test 37 distanceTo: 404279.720589
    test 38 distanceTo: 404279.720589
    test 39 distanceTo: 2145
    test 40 distanceTo: 18013602.92
    test 41 distanceTo: 20015114.35
    test 42 intermediateTo: 51.372084°N, 000.707337°E
    test 43 intermediateTo: True
    test 44 intermediateTo: 404279.721
    test 45 intermediateTo+5: 35.160975°N, 008.989542°E
    test 46 intermediateTo+5: 5.000
    test 47 intermediateTo-4: 64.911647°N, 013.726301°W
    test 48 intermediateTo-4: 4.000
    test 49 intermediateTo-h: 125.000
    test 50 intermediateChordTo: 51.372294°N, 000.707192°E
    test 51 intermediateChordTo: True
    test 52 intermediateChordTo-h: 125.000
    test 53 midpointTo: 50.536327°N, 001.274614°E
    test 54 destination: 51.513546°N, 000.098345°W
    test 55 destination: 51°30′49″N, 000°05′54″W
    test 56 destination: 34°37′N, 116°33′W
    test 57 destination: 34.613647°N, 116.55116°W
    test 58 destination: 0.604122N, 2.034201W
    test 59 destination: 31.96383509°N, 064.37329146°E
    test 60 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 61 alongTrackDistanceTo: 62331.58
    test 62 alongTrackDistanceTo: 99.588
    test 63 alongTrackDistanceTo: -7702.7
    test 64 alongTrackDistanceTo: 7587.6
    test 65 crossTrackDistanceTo: -305.665281606  FAILED, KNOWN, expected TypeError
    test 66 crossTrackDistanceTo: -307.55
    test 67 crossTrackDistanceTo: 7.4524
    test 68 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 69 chordTo: 124799.103
    test 70 cosineAndoyerLambertTo: 124801.098
    test 71 cosineAndoyerLambertTo: 124801.098
    test 72 cosineForsyheAndoyerLambertTo: 124801.098
    test 73 cosineForsyheAndoyerLambertTo: 124801.098
    test 74 cosineLawTo: 124801.098
    test 75 cosineLawTo: 124801.098
    test 76 equirectangularTo: 124804.754
    test 77 equirectangularTo: 124804.754
    test 78 euclideanTo: 130015.089
    test 79 euclideanTo: 130015.089
    test 80 flatLocalTo: 124804.754
    test 81 flatLocalTo: 124804.754
    test 82 flatPolarTo: 133663.257
    test 83 flatPolarTo: 133663.257
    test 84 haversineTo: 124801.098
    test 85 haversineTo: 124801.098
    test 86 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 87 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 88 thomasTo: 124801.098
    test 89 thomasTo: 124801.098
    test 90 vincentysTo: 124801.098
    test 91 vincentysTo: 124801.098
    test 92 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 93 isclockwise: False
    test 94 isclockwise*: False
    test 95 isclockwise: True
    test 96 isclockwise*: True
    test 97 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 98 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 99 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 100 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 101 isconvex: False
    test 102 isconvex*: False
    test 103 isconvex: True
    test 104 isconvex*: True
    test 105 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 106 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 107 isenclosedBy1: True
    test 108 isenclosedBy1*: True
    test 109 isenclosedBy2: False
    test 110 isenclosedBy2*: False
    test 111 isenclosedBy3: False
    test 112 isenclosedBy3*: False
    test 113 isenclosedBy4: False
    test 114 isenclosedBy4*: False
    test 115 isenclosedBy5: False
    test 116 isenclosedBy5*: False
    test 117 isenclosedBy6: True
    test 118 isenclosedBy6*: True
    test 119 isenclosedBy7: True
    test 120 isenclosedBy7*: True
    test 121 isenclosedBy-CCW: True
    test 122 isenclosedBy-CW : True
    test 123 isenclosedBy-CCW: True
    test 124 initialBearingTo: 102.432182
    test 125 compassAngleTo: 100.017
    test 126 compassAngleTo: 105.599
    test 127 initialBearingTo: 288.715918
    test 128 compassAngleTo: 280.017
    test 129 compassAngleTo: 285.599
    test 130 equirectangularTo: 592.185
    test 131 distanceTo: 591.831
    test 132 compassAngleTo: 0.0
    test 133 compassAngleTo: 45.0
    test 134 compassAngleTo: 90.0
    test 135 compassAngleTo: 180.0
    test 136 compassAngleTo: 225.0
    test 137 compassAngleTo: 315.0
    test 138 compassAngleTo: 270.0
    test 139 compassAngleTo: 359.4
    test 140 latlon2: (53.0, 1.0)
    test 141 philam2: (0.93, 0.02)
    test 142 compassAngleTo: 31
    test 143 compassAngleTo: 45
    test 144 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 145 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 146 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 147 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 148 isequalTo: <type 'bool'>
    test 149 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 150 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 151 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 152 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 153 compassAngleTo: <type 'float'>
    test 154 cosineLawTo: <type 'float'>
    test 155 euclideanTo: <type 'float'>
    test 156 flatLocalTo: <type 'float'>
    test 157 flatPolarTo: <type 'float'>
    test 158 haversineTo: <type 'float'>
    test 159 hubenyTo: <type 'float'>
    test 160 vincentysTo: <type 'float'>
    test 161 toVector: (0.615661, 0.0, 0.788011)
    test 162 toVector3d: (0.61566, 0.0, 0.78801)
    test 163 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 164 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 165 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    testVectorial(pygeodesy.sphericalNvector, 21.06.09)
    test 168 crossTrackDistanceTo: -305.67
    test 169 crossTrackDistanceTo: -307.55
    test 170 toLatLon: 44.995674°N, 045.0°E
    test 171 toNvector: (0.50004, 0.50004, 0.70705)
    test 172 isequalTo: False
    test 173 isequalTo: True
    test 174 length: 0.99992449715
    test 175 euclid: 0.99995577
    test 176 length: 1.00
    test 177 euclid: 1.0000
    test 178 meanOf: 44.995674°N, 045.0°E
    test 179 meanOf: LatLon
    test 180 sumOf: (52.70504, 0.61904, 0.70705)
    test 181 sumOf: Nv
    test 182 sumOf: sumOf
    test 183 length: 52.7134151513
    test 184 copy: True
    test 185 length: 52.2051356286
    test 186 length: 52.2051356286
    test 187 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 188 toLatLon: 44.995674°N, 045.0°E, -0.00m  FAILED, KNOWN, expected 44.995674°N, 045.0°E
    test 189 toNvector: (0.50004, 0.50004, 0.70705, -0.00)
    test 190 intersection: 02.499372°N, 002.5°E
    test 191 isenclosedBy: True
    test 192 isenclosedBy*: True
    test 193 isenclosedBy: True
    test 194 isenclosedBy*: True
    test 195 iswithin: False
    test 196 iswithin: True
    test 197 nearestOn: 51.0°N, 001.0°E
    test 198 nearestOn: 50.987°N, 000.298°W
    test 199 nearestOn: 51.0°N, 002.0°E
    test 200 nearestOn: 50.995°N, 002.655°E
    test 201 nearestOn: 51.0°N, 001.9°E
    test 202 nearestOn: True
    test 203 distanceTo: 42.712
    test 204 nearestOn: 51.0°N, 002.0°E
    test 205 nearestOn: True
    test 206 nearestOn: 00.0°N, 000.0°E
    test 207 nearestOn: True
    test 208 nearestOn: 00.0°N, 020.0°E
    test 209 nearestOn: True
    test 210 nearestOn: 02.0°N, 002.0°E
    test 211 nearestOn: 02.0°N, 002.0°E
    test 212 BasseC: 47.3038°N, 002.5721°W
    test 213 BasseH: 47.311067°N, 002.528617°W
    test 214 triangulate: 47.323667°N, 002.568501°W
    test 215 triangulate: True
    test 216 trilaterate: 37.419078°N, 121.960579°W
    test 217 trilaterate: True
    test 218 trilaterate: 08.068912°S, 034.888699°W
    test 219 trilaterate: True
    test 220 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 221 trilaterate: True
    test 222 trilaterate: 42.67456065°N, 002.49539502°E
    test 223 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.sphericalNvector, 21.06.09)
    test 224 sumOf: Nvector
    test 225 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 226 ecef.lat, .lon: 44.995674, 45.0
    test 227 ecef.height: 0.0
    test 228 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 229 .isEllipsoidal: False
    test 230 .isSpherical: True
    test 231 .latlon: (44.995674, 45.0)
    test 232 .philam: (0.785323, 0.785398)
    test 233 .latlonheight: (44.995674, 45.0, 0)
    test 234 .philamheight: (0.785323, 0.785398, 0)
    test 235 parse: (0.5, 0.5, 0.707)
    test 236 cmp: 0
    test 237 eq: True
    test 238 ge: True
    test 239 gt: False
    test 240 le: True
    test 241 lt: False
    test 242 ne: False
    test 243 *: (1.0, 1.0, 1.414)
    test 244 +: (1.0, 1.0, 1.414)
    test 245 /: (0.5, 0.5, 0.707)
    test 246 -: (0.5, 0.5, 0.707)
    test 247 @: (0.0, 0.0, 0.0)
    test 248 @: (0.0, 0.0, 0.0)
    test 249 rotate: (0.26268, 0.26268, 0.37143)
    test 250 crosserrors: True
    test 251 0: factor (0): float division by zero
    test 252 intersections2: (500.0, 0.0, 0.0)
    test 253 nearestOn: (0.0, 0.0, 0.0)
    test 254 nearestOn: True
    test 255 nearestOn: (100.0, 100.0, 100.0)
    test 256 nearestOn: True
    test 257 iscolinearWith: False
    test 258 iscolinearWith: True

    testSpherical(pygeodesy.sphericalNvector, 21.06.09)
    test 259 isSpherical: True
    test 260 isEllipsoidal: False
    test 261 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 262 ellipsoid: name='SphereAuthalic', a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 263 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 264 isSpherical: True
    test 265 isEllipsoidal: False
    test 266 intersection1: 50.907608°N, 004.508575°E
    test 267 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 268 intersection1: True
    test 269 intersection2: True
    test 270 intersection2: 43.5719°N, 116.188757°W
    test 271 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 272 intersection3: 51.882166°N, 000.267801°E
    test 273 intersection4: 00.0°N, 026.565051°E
    test 274 intersection5: 26.565051°N, 000.0°W
    test 275 intersection6: 50.907809°N, 004.50841°E
    test 276 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 277 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 278 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 279 toward/away 1,1 N,W antipodal: 00.999848°S, 179.0°W
    test 280 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 281 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 282 toward/away 1,1 E,S antipodal: 00.999848°S, 179.0°W
    test 283 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 284 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 285 1E/90E N,E antipodal: 00.017454°S, 179.0°W
    test 286 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 287 brng+end 1a: 01.000305°N, 002.0°E
    test 288 brng+end 1b: 01.000305°N, 002.0°E
    test 289 brng+end 2a: 01.000305°S, 178.0°W
    test 290 brng+end 2b: 01.000305°S, 178.0°W
    test 291 intersection7: 02.499372°N, 002.5°E
    test 292 maxLat0: 90.0
    test 293 maxLat1: 89.0
    test 294 maxLat90: 0.0
    test 295 minLat0: -90.0
    test 296 minLat1: -89.0
    test 297 minLat90: -0.0
    test 298 parse: 00.0°N, 000.0°E
    test 299 isenclosedBy: True
    test 300 isenclosedBy*: True
    test 301 isenclosedBy: True
    test 302 isenclosedBy*: True
    test 303 rhumbBearingTo: 116.722
    test 304 rhumbDestination: 50.964155°N, 001.853°E
    test 305 rhumbDestination: True
    test 306 rhumbDistanceTo: 40307.8
    test 307 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 308 rhumbMidpointo: True
    test 309 areaOf: 8.66605875e+09
    test 310 perimeterOf: 3.78258541e+05
    test 311 perimeterOf: 2.67063461e+05
    test 312 areaOf: 6.18e+09
    test 313 perimeterOf: 3.79639757e+05
    test 314 perimeterOf: 2.68444678e+05
    test 315 nearestOn3: 46.000996°N, 001.353049°E
    test 316 nearestOn3: 569987.49
    test 317 distanceTo: 569987.49
    test 318 nearestOn3: 46.0°N, 002.0°E
    test 319 nearestOn3: 134989.80
    test 320 distanceTo: 134989.80
    test 321 nearestOn3: 45.330691°N, 001.318551°E
    test 322 distance: 64856.28
    test 323 distanceTo: 64856.28
    test 324 compassAngleTo: 304.54
    test 325 difference: 1000.53
    test 326 ispolar: True
    test 327 ispolar*: True
    test 328 ispolar: False  FAILED, KNOWN, expected True
    test 329 ispolar*: False  FAILED, KNOWN, expected True
    test 330 ispolar: True
    test 331 ispolar*: True
    test 332 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 333 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 334 midpointTo: 01.5°N, 001.5°E, +150.00m

    testLatLon(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 335 isEllipsoidal: False
    test 336 isSpherical: True
    test 337 lat/lonDMS: 52.20472°N, 000.14056°E
    test 338 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 339 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 340 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 341 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 342 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 343 isequalTo: True
    test 344 isequalTo: True
    test 345 latlon2: 52.20472, 0.14056
    test 346 latlon2: 52.2047, 0.1406
    test 347 latlon2: 52.205, 0.141
    test 348 latlon2: 52.2, 0.14
    test 349 latlon2: 52.2, 0.1
    test 350 latlon2: 52.0, 0.0
    test 351 chordTo: 12036677.26
    test 352 chordTo: 12036463.78
    test 353 isequalTo: False
    test 354 antipode1: 52.205°S, 179.881°W
    test 355 antipode2: True
    test 356 antipode3: 52.205°N, 000.119°E
    test 357 antipode4: True
    test 358 antipode5: 52.205°N, 000.119°E
    test 359 initialBearingTo: 156.1666
    test 360 initialBearingTo: 65.8921
    test 361 initialBearingTo: 0.0
    test 362 initialBearingTo: 180.0
    test 363 finalBearingTo: 157.8904
    test 364 finalBearingTo: 93.8581
    test 365 bearingTo2: 156.1666, 157.8904
    test 366 ispolar: True
    test 367 copy: True
    test 368 __eq__: True
    test 369 __ne__: False
    test 370 equirectangularTo: 404329.56
    test 371 distanceTo: 404279.720589
    test 372 distanceTo: 404279.720589
    test 373 distanceTo: 2145
    test 374 antipodal: False
    test 375 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 376 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 377 antipodal: False
    test 378 distanceTo dateline: 9491735
    test 379 distanceTo unrolled: 9491735
    test 380 distanceTo: 18013602.92
    test 381 distanceTo: 20015114.35
    test 382 intermediateTo: 51.372084°N, 000.707337°E
    test 383 intermediateTo: True
    test 384 intermediateTo: 404279.721
    test 385 intermediateTo+5: 35.160975°N, 008.989542°E
    test 386 intermediateTo+5: 5.000
    test 387 intermediateTo-4: 64.911647°N, 013.726301°W
    test 388 intermediateTo-4: 4.000
    test 389 intermediateTo-h: 125.000
    test 390 midpointTo: 50.536327°N, 001.274614°E
    test 391 destination: 51.513546°N, 000.098345°W
    test 392 destination: 51°30′49″N, 000°05′54″W
    test 393 destination: 34°37′N, 116°33′W
    test 394 destination: 34.613647°N, 116.55116°W
    test 395 destination: 0.604122N, 2.034201W
    test 396 destination: 31.96383509°N, 064.37329146°E
    test 397 alongTrackDistanceTo: alongTrackDistanceTo() got an unexpected keyword argument 'known'  FAILED, KNOWN, expected incompatible ...
    test 398 alongTrackDistanceTo: 62331.58
    test 399 alongTrackDistanceTo: 99.588
    test 400 alongTrackDistanceTo: -7702.7
    test 401 alongTrackDistanceTo: 7587.6
    test 402 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 403 crossTrackDistanceTo: -307.55
    test 404 crossTrackDistanceTo: 7.4524
    test 405 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 406 chordTo: 124799.103
    test 407 cosineAndoyerLambertTo: 124801.098
    test 408 cosineAndoyerLambertTo: 124801.098
    test 409 cosineForsyheAndoyerLambertTo: 124801.098
    test 410 cosineForsyheAndoyerLambertTo: 124801.098
    test 411 cosineLawTo: 124801.098
    test 412 cosineLawTo: 124801.098
    test 413 equirectangularTo: 124804.754
    test 414 equirectangularTo: 124804.754
    test 415 euclideanTo: 130015.089
    test 416 euclideanTo: 130015.089
    test 417 flatLocalTo: 124804.754
    test 418 flatLocalTo: 124804.754
    test 419 flatPolarTo: 133663.257
    test 420 flatPolarTo: 133663.257
    test 421 haversineTo: 124801.098
    test 422 haversineTo: 124801.098
    test 423 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 424 hubenyTo: <bound method LatLon.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 425 thomasTo: 124801.098
    test 426 thomasTo: 124801.098
    test 427 vincentysTo: 124801.098
    test 428 vincentysTo: 124801.098
    test 429 isclockwise: False
    test 430 isclockwise*: False
    test 431 isclockwise: True
    test 432 isclockwise*: True
    test 433 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 434 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 435 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 436 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 437 isconvex: False
    test 438 isconvex*: False
    test 439 isconvex: True
    test 440 isconvex*: True
    test 441 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 442 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 443 isenclosedBy1: True
    test 444 isenclosedBy1*: True
    test 445 isenclosedBy2: False
    test 446 isenclosedBy2*: False
    test 447 isenclosedBy3: False
    test 448 isenclosedBy3*: False
    test 449 isenclosedBy4: False
    test 450 isenclosedBy4*: False
    test 451 isenclosedBy5: False
    test 452 isenclosedBy5*: False
    test 453 isenclosedBy6: True
    test 454 isenclosedBy6*: True
    test 455 isenclosedBy7: True
    test 456 isenclosedBy7*: True
    test 457 isenclosedBy-CCW: True
    test 458 isenclosedBy-CW : True
    test 459 isenclosedBy-CCW: True
    test 460 initialBearingTo: 102.432182
    test 461 compassAngleTo: 100.017
    test 462 compassAngleTo: 105.599
    test 463 initialBearingTo: 288.715918
    test 464 compassAngleTo: 280.017
    test 465 compassAngleTo: 285.599
    test 466 equirectangularTo: 592.185
    test 467 distanceTo: 591.831
    test 468 bearingTo: 0.0
    test 469 compassAngleTo: 0.0
    test 470 bearingTo: 45.0
    test 471 compassAngleTo: 45.0
    test 472 bearingTo: 90.0
    test 473 compassAngleTo: 90.0
    test 474 bearingTo: 180.0
    test 475 compassAngleTo: 180.0
    test 476 bearingTo: 225.0
    test 477 compassAngleTo: 225.0
    test 478 bearingTo: 315.0
    test 479 compassAngleTo: 315.0
    test 480 bearingTo: 270.0
    test 481 compassAngleTo: 270.0
    test 482 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 483 compassAngleTo: 359.4
    test 484 latlon2: (53.0, 1.0)
    test 485 philam2: (0.93, 0.02)
    test 486 bearingTo: 31
    test 487 compassAngleTo: 31
    test 488 compassAngleTo: 45
    test 489 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 490 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 491 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 492 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 493 isequalTo: <type 'bool'>
    test 494 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 495 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 496 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 497 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 498 compassAngleTo: <type 'float'>
    test 499 cosineLawTo: <type 'float'>
    test 500 euclideanTo: <type 'float'>
    test 501 flatLocalTo: <type 'float'>
    test 502 flatPolarTo: <type 'float'>
    test 503 haversineTo: <type 'float'>
    test 504 hubenyTo: <type 'float'>
    test 505 vincentysTo: <type 'float'>
    test 506 toNvector: (0.61566, 0.0, 0.78801)
    test 507 toVector: (0.615661, 0.0, 0.788011)
    test 508 toVector3d: (0.61566, 0.0, 0.78801)
    test 509 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 510 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 511 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 512 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 513 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 514 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 515 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 516 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 517 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 518 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 519 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 520 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 521 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 522 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 523 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 524 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 525 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 526 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 527 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 528 circum3.radius: 57690.494  FAILED, KNOWN, expected 57792.067
    test 529 circum3.center: 43.051859°N, 002.94463°E, -261.20m  FAILED, KNOWN, expected 43.053532°N, 002.943255°E, -261.66m
    test 530 circum3.deltas: (0.0, 0.0, 37.646)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 531 circum3.dist1: 57691.282358  FAILED, KNOWN, expected 57792.858351
    test 532 circum3.dist2: 57691.282360  FAILED, KNOWN, expected 57792.859237
    test 533 circum3.dist3: 57691.282359  FAILED, KNOWN, expected 57792.859062
    test 534 circum3.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 535 circum3.Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    testSpherical(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 536 isSpherical: True
    test 537 isEllipsoidal: False
    test 538 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 539 ellipsoid: name='SphereAuthalic', a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 540 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 541 isSpherical: True
    test 542 isEllipsoidal: False
    test 543 intersection1: 50.907608°N, 004.508575°E
    test 544 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 545 intersection1: True
    test 546 intersection2: True
    test 547 intersection2: 43.5719°N, 116.188757°W
    test 548 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 549 intersection3: 51.882166°N, 000.267801°E
    test 550 intersection4: 00.0°N, 026.565051°E
    test 551 intersection5: 26.565051°N, 000.0°W
    test 552 intersection6: 50.907809°N, 004.50841°E
    test 553 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 554 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 555 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 556 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E  FAILED, KNOWN, expected 00.999848°S, 179.0°W
    test 557 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 558 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 559 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E  FAILED, KNOWN, expected 00.999848°S, 179.0°W
    test 560 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 561 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 562 1E/90E N,E antipodal: 00.017454°N, 001.0°E  FAILED, KNOWN, expected 00.017454°S, 179.0°W
    test 563 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 564 brng+end 1a: 01.000305°N, 002.0°E
    test 565 brng+end 1b: 01.000305°N, 002.0°E
    test 566 brng+end 2a: 01.000305°S, 178.0°W
    test 567 brng+end 2b: 01.000305°S, 178.0°W
    test 568 intersection7: 02.499372°N, 002.5°E
    test 569 maxLat0: 90.0
    test 570 maxLat1: 89.0
    test 571 maxLat90: 0.0
    test 572 minLat0: -90.0
    test 573 minLat1: -89.0
    test 574 minLat90: -0.0
    test 575 parse: 00.0°N, 000.0°E
    test 576 crossingParallels: 009°35′38.65″E, 170°24′21.35″E
    test 577 intersections2 (pygeodesy.sphericalTrigonometry): 36.98931°N, 088.151425°W, 38.23838°N, 092.390487°W
    test 578 intersections2 (pygeodesy.sphericalTrigonometry): 36.989310429, -088.151425243, 38.238379679, -092.390486808
    test 579 intersections2 (pygeodesy.sphericalTrigonometry): 00.0°N, 035.26439°W, 00.0°N, 035.26439°E
    test 580 intersections2 (pygeodesy.sphericalTrigonometry): 22.622036°N, 000.0°E, 22.622036°S, 000.0°E
    test 581 intersections2 (pygeodesy.sphericalTrigonometry): 14.612841°N, 026.110934°W, 14.612841°S, 026.110934°E
    test 582 intersections2 (pygeodesy.sphericalTrigonometry): 00.000001°S, 045.0°E, 00.000001°N, 045.0°E
    test 583 intersections2 (pygeodesy.sphericalTrigonometry) 5: 04.999927°S, 005.038296°W, 04.999927°N, 005.038296°E
    test 584 intersections2 (pygeodesy.sphericalTrigonometry) 5: 8.37557e-16 (% of radius)
    test 585 intersections2 (pygeodesy.sphericalTrigonometry) 10: 09.997596°S, 010.311703°W, 09.997596°N, 010.311703°E
    test 586 intersections2 (pygeodesy.sphericalTrigonometry) 10: 8.37557e-16 (% of radius)
    test 587 intersections2 (pygeodesy.sphericalTrigonometry) 15: 14.98089°S, 016.083107°W, 14.98089°N, 016.083107°E
    test 588 intersections2 (pygeodesy.sphericalTrigonometry) 15: 4.18779e-16 (% of radius)
    test 589 intersections2 (pygeodesy.sphericalTrigonometry) 20: 19.914036°S, 022.676142°W, 19.914036°N, 022.676142°E
    test 590 intersections2 (pygeodesy.sphericalTrigonometry) 20: 6.28168e-16 (% of radius)
    test 591 intersections2 (pygeodesy.sphericalTrigonometry) 25: 24.713956°S, 030.518915°W, 24.713956°N, 030.518915°E
    test 592 intersections2 (pygeodesy.sphericalTrigonometry) 25: 5.02534e-16 (% of radius)
    test 593 intersections2 (pygeodesy.sphericalTrigonometry) 30: 29.205932°S, 040.202966°W, 29.205932°N, 040.202966°E
    test 594 intersections2 (pygeodesy.sphericalTrigonometry) 30: 8.37557e-16 (% of radius)
    test 595 intersections2 (pygeodesy.sphericalTrigonometry) 35: 33.037697°S, 052.55362°W, 33.037697°N, 052.55362°E
    test 596 intersections2 (pygeodesy.sphericalTrigonometry) 35: 7.17906e-16 (% of radius)
    test 597 intersections2 (pygeodesy.sphericalTrigonometry) 40: 35.512876°S, 068.682565°W, 35.512876°N, 068.682565°E
    test 598 intersections2 (pygeodesy.sphericalTrigonometry) 40: 4.18779e-16 (% of radius)
    test 599 intersections2 (pygeodesy.sphericalTrigonometry) 45: 35.26439°S, 090.0°W, 35.26439°N, 090.0°E
    test 600 intersections2 (pygeodesy.sphericalTrigonometry) 45: 3.72248e-16 (% of radius)
    test 601 intersections2 (pygeodesy.sphericalTrigonometry) 50: 29.382901°S, 118.837195°W, 29.382901°N, 118.837195°E
    test 602 intersections2 (pygeodesy.sphericalTrigonometry) 50: 5.02534e-16 (% of radius)
    test 603 intersections2 (pygeodesy.sphericalTrigonometry) 55: 00.687458°S, 179.605668°E abutting
    test 604 intersections2 (pygeodesy.sphericalTrigonometry) 55: 0.0144095 (% of radius)
    test 605 intersections2 (pygeodesy.sphericalTrigonometry) 60: 13.848979°S, 172.919423°E abutting
    test 606 intersections2 (pygeodesy.sphericalTrigonometry) 60: 0.258708 (% of radius)
    test 607 intersections2 (pygeodesy.sphericalTrigonometry) 65: 27.163786°S, 167.475402°E abutting
    test 608 intersections2 (pygeodesy.sphericalTrigonometry) 65: 0.457099 (% of radius)
    test 609 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E Random +/- 89
    test 610 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 60.984388°S, 073.83264°E  d 3.01319e-09 meter
    test 611 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 57.625822°S, 033.135483°E  d 2.40259e-08 meter
    test 612 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 56.807832°S, 063.548406°W  d 1.26499e-08 meter
    test 613 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 54.726929°S, 019.158791°E  d 5.09767e-08 meter
    test 614 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 62.495343°S, 082.45592°E  d 1.94635e-09 meter
    test 615 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 49.619415°S, 105.691728°E  d 1.61672e-09 meter
    test 616 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 55.851993°S, 013.198448°E  d 3.03768e-09 meter
    test 617 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 47.245229°S, 024.019673°E  d 1.06099e-09 meter
    test 618 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 60.849885°S, 048.696149°E  d 8.83028e-09 meter
    test 619 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 58.364923°S, 047.103925°W  d 2.55974e-09 meter
    test 620 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 14.79836°S, 146.276733°E  d 1.41465e-09 meter
    test 621 intersections2 (pygeodesy.sphericalTrigonometry): 54.908966°S, 037.830669°E, 57.325041°S, 127.854571°E  d 6.81337e-09 meter
    test 622 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 623 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 624 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 625 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 626 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 627 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 628 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: 42.6767291°N, 002.49916157°E
    test 629 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 630 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 631 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 632 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 633 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 634 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 635 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: area (False), eps (1000) or wrap (False): no intersection (min 1340.608)
    test 636 isenclosedBy: True
    test 637 isenclosedBy*: True
    test 638 isenclosedBy: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 639 isenclosedBy*: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 640 rhumbBearingTo: 116.722
    test 641 rhumbDestination: 50.964155°N, 001.853°E
    test 642 rhumbDestination: True
    test 643 rhumbDistanceTo: 40307.8
    test 644 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 645 rhumbMidpointo: True
    test 646 areaOf: 8.66605875e+09
    test 647 perimeterOf: 3.78258541e+05
    test 648 perimeterOf: 2.67063461e+05
    test 649 areaOf: 6.18e+09
    test 650 perimeterOf: 3.79639757e+05
    test 651 perimeterOf: 2.68444678e+05
    test 652 nearestOn3: 46.0°N, 001.369324°E
    test 653 nearestOn3: 570101.83
    test 654 distanceTo: 570101.82
    test 655 nearestOn3: 46.0°N, 002.0°E
    test 656 nearestOn3: 134992.48
    test 657 distanceTo: 134989.80
    test 658 nearestOn3: 45.5°N, 001.5°E
    test 659 distance: 78626.79
    test 660 angle: 315.00
    test 661 compassAngleTo: 315.00
    test 662 nearestOn3: 45.331319°N, 001.331319°E
    test 663 distance: 64074.48
    test 664 angle: 305.10
    test 665 distanceTo: 64074.12
    test 666 compassAngleTo: 305.10
    test 667 difference: 1000.53
    test 668 nearestOn3: 00.5°N, 001.5°E
    test 669 distance: 235880.385
    test 670 angle: 135.00
    test 671 nearestOn3: 01.5°N, 002.5°E
    test 672 distance: 235880.385
    test 673 angle: 135.00
    test 674 nearestOn3: 02.5°N, 003.5°E
    test 675 distance: 235880.385
    test 676 angle: 135.00
    test 677 nearestOn3: 03.5°N, 004.5°E
    test 678 distance: 235880.385
    test 679 angle: 135.00
    test 680 nearestOn3: 04.5°N, 005.5°E
    test 681 distance: 235880.385
    test 682 angle: 135.00
    test 683 nearestOn3: 05.5°N, 006.5°E
    test 684 distance: 235880.385
    test 685 angle: 135.00
    test 686 nearestOn3: 06.5°N, 007.5°E
    test 687 distance: 235880.385
    test 688 angle: 135.00
    test 689 nearestOn3: 07.5°N, 008.5°E
    test 690 distance: 235880.385
    test 691 angle: 135.00
    test 692 meanOf: 04.004858°N, 004.990226°E
    test 693 nearestOn3: 07.5°N, 008.5°E
    test 694 toCartesian: [6245667.211, 766871.506, 996645.349]
    test 695 ispolar: True
    test 696 ispolar*: True
    test 697 ispolar: False  FAILED, KNOWN, expected True
    test 698 ispolar*: False  FAILED, KNOWN, expected True
    test 699 ispolar: True
    test 700 ispolar*: True
    test 701 triangle7: (22.142114, 2189776.256122, 84.91384, 6998970.168483, 84.91384, 6998970.168483, 8479698853790.72168)
    test 702 triangle7: Triangle8Tuple(A=0.38645, a=0.34371, B=1.48203, b=1.09857, C=1.48203, c=1.09857, D=3.74234, E=0.20891)
    test 703 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 704 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 705 midpointTo: 01.5°N, 001.5°E, +150.00m

    34 of 705 testSpherical.py tests (4.8%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 226.944 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testStreprs.py

    testing testStreprs.py 21.02.11 (module pygeodesy.streprs 21.06.27)
    test 1 anstr: a-b__
    test 2 fstr: 0.123000
    test 3 fstr: 0.123
    test 4 fstr: 0.123, 456.789
    test 5 fstr: 1.23000e-01
    test 6 fstr: 1.23e-01
    test 7 fstr: fmt ('X'): not '[%[<flags>][<width>].*]F|f|E|e|G|g'
    test 8 fstr(1.000000): 1.0
    test 9 fstr(1.000000): 1.0
    test 10 fstr(-1.000000): -1.0
    test 11 fstr(INF): INF
    test 12 fstr(INF): INF
    test 13 fstr(NAN): NAN
    test 14 fstr(-0.000000): -0.0
    test 15 fstr(0.000000): 0.0
    test 16 fstrzs(0.0): 0.0
    test 17 fstrzs(0.00): 0.0
    test 18 fstrzs(0.000): 0.0
    test 19 fstrzs(00.0): 00.0
    test 20 fstrzs(000.00): 000.0
    test 21 fstrzs(0.000): 0.0
    test 22 fstrzs(0.010): 0.01
    test 23 fstrzs(0.0200): 0.02
    test 24 fstrzs(0.0e+01): 0.0e+01
    test 25 fstrzs(0.00e+02): 0.0e+02
    test 26 fstrzs(0.000e+03): 0.0e+03
    test 27 fstrzs(00.0e+00): 00.0e+00
    test 28 fstrzs(000.00e+01): 000.0e+01
    test 29 fstrzs(0.000e+02): 0.0e+02
    test 30 fstrzs(0.010e+03): 0.01e+03
    test 31 fstrzs(0.0200e+00): 0.02e+00
    test 32 fstrzs(0, ap1z=True): 0.0
    test 33 fstrzs(0.0, ap1z=True): 0.0
    test 34 fstrzs(0., ap1z=True): 0.
    test 35 fstrzs(1e10, ap1z=True): 1.0e10
    test 36 fstrzs(2E+2, ap1z=True): 2.0E+2
    test 37 fstrzs(3.E3, ap1z=True): 3.E3
    test 38 instr: LatLon_(45.0°N, 090.0°E, +1.20)
    test 39 instr: LatLon_(45, 90, h=1.2)
    test 40 unstr: f(1.1, 2.2)
    test 41 unstr: f(x=1.1, y=2.2)
    test 42 F: 0.001
    test 43 F: 0.001
    test 44 F: 0.001
    test 45 F: 0.001
    test 46 f: 0.001
    test 47 f: 0.001
    test 48 f: 0.001
    test 49 f: 0.001
    test 50 E: 1.0E-03
    test 51 E: 1.0E-03
    test 52 E: 1.0E-03
    test 53 E: 1.0E-03
    test 54 e: 1.0e-03
    test 55 e: 1.0e-03
    test 56 e: 1.0e-03
    test 57 e: 1.0e-03
    test 58 G: 0.001
    test 59 G: 0.001
    test 60 G: 0.001
    test 61 G: 0.001
    test 62 g: 0.001
    test 63 g: 0.001
    test 64 g: 0.001
    test 65 g: 0.001

    all 65 testStreprs.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 1.857 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testTMcoords.py

    testing testTMcoords.py 19.05.23
    test 1 TMcoords: 258

    all 1 testTMcoords.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 519.991 us

running /System/Library/....Python -W always ~/PyGeodesy/test/testTrf.py
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')

    testing testTrf.py 21.06.09 (module pygeodesy.trf 21.06.18)

    testTrf(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 1 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 2 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 3 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 4 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 5 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 6 Nil: True
    test 7 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 8 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 9 Nil: True
    test 10 reframe: True
    test 11 Roundtrip: True
    test 12 reframe: True
    test 13 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 14 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 15 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 16 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 17 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 18 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 19 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 20 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 21 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 22 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 23 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 24 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 25 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 26 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 27 TRFError: epoch (1899): below 1900 limit
    test 28 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 29 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 30 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 31 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 32 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 33 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 34 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 35 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 36 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 37 Nil: True
    test 38 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 39 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 40 Nil: True
    test 41 reframe: True
    test 42 Roundtrip: True
    test 43 reframe: True
    test 44 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 45 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 46 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 47 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 48 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 49 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 50 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 51 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 52 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 53 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 54 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 55 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 56 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 57 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 58 TRFError: epoch (1899): below 1900 limit
    test 59 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 60 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 61 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 62 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalKarney, 21.06.27)
    test 63 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 64 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 65 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 66 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 67 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 68 Nil: True
    test 69 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 70 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 71 Nil: True
    test 72 reframe: True
    test 73 Roundtrip: True
    test 74 reframe: True
    test 75 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 76 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 77 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 78 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 79 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 80 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 81 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 82 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 83 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 84 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 85 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 86 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 87 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 88 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 89 TRFError: epoch (1899): below 1900 limit
    test 90 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 91 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 92 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 93 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalExact, 21.06.27)
    test 94 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 95 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 96 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 97 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 98 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 99 Nil: True
    test 100 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 101 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 102 Nil: True
    test 103 reframe: True
    test 104 Roundtrip: True
    test 105 reframe: True
    test 106 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 107 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 108 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 109 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 110 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 111 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 112 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 113 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 114 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 115 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 116 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 117 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 118 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 119 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 120 TRFError: epoch (1899): below 1900 limit
    test 121 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 122 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 123 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 124 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 125 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 126 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 127 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 128 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 129 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 130 Nil: True
    test 131 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 132 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 133 Nil: True
    test 134 reframe: True
    test 135 Roundtrip: True
    test 136 reframe: True
    test 137 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 138 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 139 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 140 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 141 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 142 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 143 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 144 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 145 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 146 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 147 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 148 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 149 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 150 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 151 TRFError: epoch (1899): below 1900 limit
    test 152 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 153 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 154 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 155 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 156 TRFError: day (2), month (1) or year (None): int() argument must be a string or a number, not 'NoneType'
    test 157 toStr: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 158 str: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 159 toStr2: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 160 repr: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 161 epoch: 2020.003
    test 162 y-m-d: (2020, 1, 1)
    test 163 epoch: 2020.251
    test 164 y-m-d: (2020, 4, 1)
    test 165 epoch: 2020.500
    test 166 y-m-d: (2020, 7, 1)
    test 167 epoch: 2020.751
    test 168 y-m-d: (2020, 10, 1)
    test 169 epoch: 2021.000
    test 170 y-m-d: (2021, 1, 1)  FAILED, KNOWN, expected (2020, 12, 31)
    test 171 Epoch (2020).std_repr: False
    test 172 Epoch (2020.001): (2020, 1, 1)
    test 173 Epoch (2020.086): (2020, 2, 1)
    test 174 Epoch (2020.165): (2020, 3, 1)
    test 175 Epoch (2020.250): (2020, 4, 1)
    test 176 Epoch (2020.332): (2020, 5, 1)
    test 177 Epoch (2020.416): (2020, 6, 1)
    test 178 Epoch (2020.498): (2020, 7, 1)
    test 179 Epoch (2020.583): (2020, 8, 1)
    test 180 Epoch (2020.668): (2020, 9, 1)
    test 181 Epoch (2020.750): (2020, 10, 1)
    test 182 Epoch (2020.834): (2020, 11, 1)
    test 183 Epoch (2020.916): (2020, 12, 1)
    test 184 Epoch (2021.001): (2021, 1, 1)  FAILED, KNOWN, expected (2020, 13, 1)

    97 of 184 testTrf.py tests (52.7%) FAILED, incl. 7 KNOWN plus 90 DeprecationWarnings (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 38.321 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUnits.py

    testing testUnits.py 21.01.10

    testing Bearing(1.0,) (pygeodesy.units, 21.06.04)
    test 1 .classname: Bearing
    test 2 isinstance: True
    test 3 .name: bearing
    test 4 .named: bearing
    test 5 .named2: Bearing 'bearing'
    test 6 .str: 1.0
    test 7 .toStr: 1.0
    test 8 .std_repr: True
    test 9 .repr: 1.0
    test 10 .toRepr: bearing (1.0)
    test 11 .units: bearing
    test 12 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: X
    test 13 bearing: U ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: X
    test 14 bearing: TypeError
    test 15 .named: Test
    test 16 .named2: Bearing 'Test'
    test 17 .str: 1.0
    test 18 .toStr: 1.0
    test 19 .repr: 1.0
    test 20 .toRepr: Test (1.0)
    test 21 .units: bearing
    test 22 .name: Test
    test 23 ._name: Test
    test 24 .str: 1.0
    test 25 .repr: 1.0
    test 26 delattr: ''

    testing Degrees(1.0,) (pygeodesy.units, 21.06.04)
    test 27 .classname: Degrees
    test 28 isinstance: True
    test 29 .name: degrees
    test 30 .named: degrees
    test 31 .named2: Degrees 'degrees'
    test 32 .str: 1.0
    test 33 .toStr: 1.0
    test 34 .std_repr: True
    test 35 .repr: 1.0
    test 36 .toRepr: degrees (1.0)
    test 37 .units: degrees
    test 38 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 39 degrees: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 40 degrees: TypeError
    test 41 .named: Test
    test 42 .named2: Degrees 'Test'
    test 43 .str: 1.0
    test 44 .toStr: 1.0
    test 45 .repr: 1.0
    test 46 .toRepr: Test (1.0)
    test 47 .units: degrees
    test 48 .name: Test
    test 49 ._name: Test
    test 50 .str: 1.0
    test 51 .repr: 1.0
    test 52 delattr: ''

    testing Degrees2(1.0,) (pygeodesy.units, 21.06.04)
    test 53 .classname: Degrees2
    test 54 isinstance: True
    test 55 .name: degrees2
    test 56 .named: degrees2
    test 57 .named2: Degrees2 'degrees2'
    test 58 .str: 1.0
    test 59 .toStr: 1.0
    test 60 .std_repr: True
    test 61 .repr: 1.0
    test 62 .toRepr: degrees2 (1.0)
    test 63 .units: degrees2
    test 64 degrees2: degrees2 ('X'): could not convert string to float: X
    test 65 degrees2: U ('X'): could not convert string to float: X
    test 66 degrees2: TypeError
    test 67 .named: Test
    test 68 .named2: Degrees2 'Test'
    test 69 .str: 1.0
    test 70 .toStr: 1.0
    test 71 .repr: 1.0
    test 72 .toRepr: Test (1.0)
    test 73 .units: degrees2
    test 74 .name: Test
    test 75 ._name: Test
    test 76 .str: 1.0
    test 77 .repr: 1.0
    test 78 delattr: ''

    testing Degrees_(1.0,) (pygeodesy.units, 21.06.04)
    test 79 .classname: Degrees_
    test 80 isinstance: True
    test 81 .name: degrees_
    test 82 .named: degrees_
    test 83 .named2: Degrees_ 'degrees_'
    test 84 .str: 1.0
    test 85 .toStr: 1.0
    test 86 .std_repr: True
    test 87 .repr: 1.0
    test 88 .toRepr: degrees_ (1.0)
    test 89 .units: degrees_
    test 90 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 91 degrees_: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: X
    test 92 degrees_: TypeError
    test 93 .named: Test
    test 94 .named2: Degrees_ 'Test'
    test 95 .str: 1.0
    test 96 .toStr: 1.0
    test 97 .repr: 1.0
    test 98 .toRepr: Test (1.0)
    test 99 .units: degrees_
    test 100 .name: Test
    test 101 ._name: Test
    test 102 .str: 1.0
    test 103 .repr: 1.0
    test 104 delattr: ''

    testing Distance(1.0,) (pygeodesy.units, 21.06.04)
    test 105 .classname: Distance
    test 106 isinstance: True
    test 107 .name: distance
    test 108 .named: distance
    test 109 .named2: Distance 'distance'
    test 110 .str: 1.0
    test 111 .toStr: 1.0
    test 112 .std_repr: True
    test 113 .repr: 1.0
    test 114 .toRepr: distance (1.0)
    test 115 .units: distance
    test 116 distance: distance ('X'): could not convert string to float: X
    test 117 distance: U ('X'): could not convert string to float: X
    test 118 distance: TypeError
    test 119 .named: Test
    test 120 .named2: Distance 'Test'
    test 121 .str: 1.0
    test 122 .toStr: 1.0
    test 123 .repr: 1.0
    test 124 .toRepr: Test (1.0)
    test 125 .units: distance
    test 126 .name: Test
    test 127 ._name: Test
    test 128 .str: 1.0
    test 129 .repr: 1.0
    test 130 delattr: ''

    testing Distance_(1.0,) (pygeodesy.units, 21.06.04)
    test 131 .classname: Distance_
    test 132 isinstance: True
    test 133 .name: distance_
    test 134 .named: distance_
    test 135 .named2: Distance_ 'distance_'
    test 136 .str: 1.0
    test 137 .toStr: 1.0
    test 138 .std_repr: True
    test 139 .repr: 1.0
    test 140 .toRepr: distance_ (1.0)
    test 141 .units: distance_
    test 142 distance_: distance ('X'): could not convert string to float: X
    test 143 distance_: U ('X'): could not convert string to float: X
    test 144 distance_: TypeError
    test 145 .named: Test
    test 146 .named2: Distance_ 'Test'
    test 147 .str: 1.0
    test 148 .toStr: 1.0
    test 149 .repr: 1.0
    test 150 .toRepr: Test (1.0)
    test 151 .units: distance_
    test 152 .name: Test
    test 153 ._name: Test
    test 154 .str: 1.0
    test 155 .repr: 1.0
    test 156 delattr: ''

    testing Easting(1.0,) (pygeodesy.units, 21.06.04)
    test 157 .classname: Easting
    test 158 isinstance: True
    test 159 .name: easting
    test 160 .named: easting
    test 161 .named2: Easting 'easting'
    test 162 .str: 1.0
    test 163 .toStr: 1.0
    test 164 .std_repr: True
    test 165 .repr: 1.0
    test 166 .toRepr: easting (1.0)
    test 167 .units: easting
    test 168 easting: easting ('X'): could not convert string to float: X
    test 169 easting: U ('X'): could not convert string to float: X
    test 170 easting: TypeError
    test 171 .named: Test
    test 172 .named2: Easting 'Test'
    test 173 .str: 1.0
    test 174 .toStr: 1.0
    test 175 .repr: 1.0
    test 176 .toRepr: Test (1.0)
    test 177 .units: easting
    test 178 .name: Test
    test 179 ._name: Test
    test 180 .str: 1.0
    test 181 .repr: 1.0
    test 182 delattr: ''

    testing Feet(1.0,) (pygeodesy.units, 21.06.04)
    test 183 .classname: Feet
    test 184 isinstance: True
    test 185 .name: feet
    test 186 .named: feet
    test 187 .named2: Feet 'feet'
    test 188 .str: 1.0
    test 189 .toStr: 1.0
    test 190 .std_repr: True
    test 191 .repr: 1.0
    test 192 .toRepr: feet (1.0)
    test 193 .units: feet
    test 194 feet: feet ('X'): could not convert string to float: X
    test 195 feet: U ('X'): could not convert string to float: X
    test 196 feet: TypeError
    test 197 .named: Test
    test 198 .named2: Feet 'Test'
    test 199 .str: 1.0
    test 200 .toStr: 1.0
    test 201 .repr: 1.0
    test 202 .toRepr: Test (1.0)
    test 203 .units: feet
    test 204 .name: Test
    test 205 ._name: Test
    test 206 .str: 1.0
    test 207 .repr: 1.0
    test 208 delattr: ''

    testing Float(1.0,) (pygeodesy.units, 21.06.04)
    test 209 .classname: Float
    test 210 isinstance: True
    test 211 .name: float
    test 212 .named: float
    test 213 .named2: Float 'float'
    test 214 .str: 1.0
    test 215 .toStr: 1.0
    test 216 .std_repr: True
    test 217 .repr: 1.0
    test 218 .toRepr: float (1.0)
    test 219 .units: float
    test 220 float: Float ('X'): could not convert string to float: X
    test 221 float: U ('X'): could not convert string to float: X
    test 222 float: TypeError
    test 223 .named: Test
    test 224 .named2: Float 'Test'
    test 225 .str: 1.0
    test 226 .toStr: 1.0
    test 227 .repr: 1.0
    test 228 .toRepr: Test (1.0)
    test 229 .units: float
    test 230 .name: Test
    test 231 ._name: Test
    test 232 .str: 1.0
    test 233 .repr: 1.0
    test 234 delattr: ''

    testing Float_(1.0,) (pygeodesy.units, 21.06.04)
    test 235 .classname: Float_
    test 236 isinstance: True
    test 237 .name: float_
    test 238 .named: float_
    test 239 .named2: Float_ 'float_'
    test 240 .str: 1.0
    test 241 .toStr: 1.0
    test 242 .std_repr: True
    test 243 .repr: 1.0
    test 244 .toRepr: float_ (1.0)
    test 245 .units: float_
    test 246 float_: Float_ ('X'): could not convert string to float: X
    test 247 float_: U ('X'): could not convert string to float: X
    test 248 float_: TypeError
    test 249 .named: Test
    test 250 .named2: Float_ 'Test'
    test 251 .str: 1.0
    test 252 .toStr: 1.0
    test 253 .repr: 1.0
    test 254 .toRepr: Test (1.0)
    test 255 .units: float_
    test 256 .name: Test
    test 257 ._name: Test
    test 258 .str: 1.0
    test 259 .repr: 1.0
    test 260 delattr: ''

    testing Height(1.0,) (pygeodesy.units, 21.06.04)
    test 261 .classname: Height
    test 262 isinstance: True
    test 263 .name: height
    test 264 .named: height
    test 265 .named2: Height 'height'
    test 266 .str: 1.0
    test 267 .toStr: 1.0
    test 268 .std_repr: True
    test 269 .repr: 1.0
    test 270 .toRepr: height (1.0)
    test 271 .units: height
    test 272 height: height ('X'): could not convert string to float: X
    test 273 height: U ('X'): could not convert string to float: X
    test 274 height: TypeError
    test 275 .named: Test
    test 276 .named2: Height 'Test'
    test 277 .str: 1.0
    test 278 .toStr: 1.0
    test 279 .repr: 1.0
    test 280 .toRepr: Test (1.0)
    test 281 .units: height
    test 282 .name: Test
    test 283 ._name: Test
    test 284 .str: 1.0
    test 285 .repr: 1.0
    test 286 delattr: ''

    testing Lam(1.0,) (pygeodesy.units, 21.06.04)
    test 287 .classname: Lam
    test 288 isinstance: True
    test 289 .name: lam
    test 290 .named: lam
    test 291 .named2: Lam 'lam'
    test 292 .str: 1.0
    test 293 .toStr: 1.0
    test 294 .std_repr: True
    test 295 .repr: 1.0
    test 296 .toRepr: lam (1.0)
    test 297 .units: lam
    test 298 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: X
    test 299 lam: U ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: X
    test 300 lam: TypeError
    test 301 .named: Test
    test 302 .named2: Lam 'Test'
    test 303 .str: 1.0
    test 304 .toStr: 1.0
    test 305 .repr: 1.0
    test 306 .toRepr: Test (1.0)
    test 307 .units: lam
    test 308 .name: Test
    test 309 ._name: Test
    test 310 .str: 1.0
    test 311 .repr: 1.0
    test 312 delattr: ''

    testing Lat(1.0,) (pygeodesy.units, 21.06.04)
    test 313 .classname: Lat
    test 314 isinstance: True
    test 315 .name: lat
    test 316 .named: lat
    test 317 .named2: Lat 'lat'
    test 318 .str: 1.0
    test 319 .toStr: 1.0
    test 320 .std_repr: True
    test 321 .repr: 1.0
    test 322 .toRepr: lat (1.0)
    test 323 .units: lat
    test 324 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 325 lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 326 lat: TypeError
    test 327 .named: Test
    test 328 .named2: Lat 'Test'
    test 329 .str: 1.0
    test 330 .toStr: 1.0
    test 331 .repr: 1.0
    test 332 .toRepr: Test (1.0)
    test 333 .units: lat
    test 334 .name: Test
    test 335 ._name: Test
    test 336 .str: 1.0
    test 337 .repr: 1.0
    test 338 delattr: ''

    testing Lat_(1.0,) (pygeodesy.units, 21.06.04)
    test 339 .classname: Lat_
    test 340 isinstance: True
    test 341 .name: lat_
    test 342 .named: lat_
    test 343 .named2: Lat_ 'lat_'
    test 344 .str: 1.0
    test 345 .toStr: 1.0
    test 346 .std_repr: True
    test 347 .repr: 1.0
    test 348 .toRepr: lat_ (1.0)
    test 349 .units: lat_
    test 350 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 351 lat_: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: X
    test 352 lat_: TypeError
    test 353 .named: Test
    test 354 .named2: Lat_ 'Test'
    test 355 .str: 1.0
    test 356 .toStr: 1.0
    test 357 .repr: 1.0
    test 358 .toRepr: Test (1.0)
    test 359 .units: lat_
    test 360 .name: Test
    test 361 ._name: Test
    test 362 .str: 1.0
    test 363 .repr: 1.0
    test 364 delattr: ''

    testing Lon(1.0,) (pygeodesy.units, 21.06.04)
    test 365 .classname: Lon
    test 366 isinstance: True
    test 367 .name: lon
    test 368 .named: lon
    test 369 .named2: Lon 'lon'
    test 370 .str: 1.0
    test 371 .toStr: 1.0
    test 372 .std_repr: True
    test 373 .repr: 1.0
    test 374 .toRepr: lon (1.0)
    test 375 .units: lon
    test 376 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 377 lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 378 lon: TypeError
    test 379 .named: Test
    test 380 .named2: Lon 'Test'
    test 381 .str: 1.0
    test 382 .toStr: 1.0
    test 383 .repr: 1.0
    test 384 .toRepr: Test (1.0)
    test 385 .units: lon
    test 386 .name: Test
    test 387 ._name: Test
    test 388 .str: 1.0
    test 389 .repr: 1.0
    test 390 delattr: ''

    testing Lon_(1.0,) (pygeodesy.units, 21.06.04)
    test 391 .classname: Lon_
    test 392 isinstance: True
    test 393 .name: lon_
    test 394 .named: lon_
    test 395 .named2: Lon_ 'lon_'
    test 396 .str: 1.0
    test 397 .toStr: 1.0
    test 398 .std_repr: True
    test 399 .repr: 1.0
    test 400 .toRepr: lon_ (1.0)
    test 401 .units: lon_
    test 402 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 403 lon_: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: X
    test 404 lon_: TypeError
    test 405 .named: Test
    test 406 .named2: Lon_ 'Test'
    test 407 .str: 1.0
    test 408 .toStr: 1.0
    test 409 .repr: 1.0
    test 410 .toRepr: Test (1.0)
    test 411 .units: lon_
    test 412 .name: Test
    test 413 ._name: Test
    test 414 .str: 1.0
    test 415 .repr: 1.0
    test 416 delattr: ''

    testing Meter(1.0,) (pygeodesy.units, 21.06.04)
    test 417 .classname: Meter
    test 418 isinstance: True
    test 419 .name: meter
    test 420 .named: meter
    test 421 .named2: Meter 'meter'
    test 422 .str: 1.0
    test 423 .toStr: 1.0
    test 424 .std_repr: True
    test 425 .repr: 1.0
    test 426 .toRepr: meter (1.0)
    test 427 .units: meter
    test 428 meter: meter ('X'): could not convert string to float: X
    test 429 meter: U ('X'): could not convert string to float: X
    test 430 meter: TypeError
    test 431 .named: Test
    test 432 .named2: Meter 'Test'
    test 433 .str: 1.0
    test 434 .toStr: 1.0
    test 435 .repr: 1.0
    test 436 .toRepr: Test (1.0)
    test 437 .units: meter
    test 438 .name: Test
    test 439 ._name: Test
    test 440 .str: 1.0
    test 441 .repr: 1.0
    test 442 delattr: ''

    testing Meter2(1.0,) (pygeodesy.units, 21.06.04)
    test 443 .classname: Meter2
    test 444 isinstance: True
    test 445 .name: meter2
    test 446 .named: meter2
    test 447 .named2: Meter2 'meter2'
    test 448 .str: 1.0
    test 449 .toStr: 1.0
    test 450 .std_repr: True
    test 451 .repr: 1.0
    test 452 .toRepr: meter2 (1.0)
    test 453 .units: meter2
    test 454 meter2: meter2 ('X'): could not convert string to float: X
    test 455 meter2: U ('X'): could not convert string to float: X
    test 456 meter2: TypeError
    test 457 .named: Test
    test 458 .named2: Meter2 'Test'
    test 459 .str: 1.0
    test 460 .toStr: 1.0
    test 461 .repr: 1.0
    test 462 .toRepr: Test (1.0)
    test 463 .units: meter2
    test 464 .name: Test
    test 465 ._name: Test
    test 466 .str: 1.0
    test 467 .repr: 1.0
    test 468 delattr: ''

    testing Meter3(1.0,) (pygeodesy.units, 21.06.04)
    test 469 .classname: Meter3
    test 470 isinstance: True
    test 471 .name: meter3
    test 472 .named: meter3
    test 473 .named2: Meter3 'meter3'
    test 474 .str: 1.0
    test 475 .toStr: 1.0
    test 476 .std_repr: True
    test 477 .repr: 1.0
    test 478 .toRepr: meter3 (1.0)
    test 479 .units: meter3
    test 480 meter3: meter3 ('X'): could not convert string to float: X
    test 481 meter3: U ('X'): could not convert string to float: X
    test 482 meter3: TypeError
    test 483 .named: Test
    test 484 .named2: Meter3 'Test'
    test 485 .str: 1.0
    test 486 .toStr: 1.0
    test 487 .repr: 1.0
    test 488 .toRepr: Test (1.0)
    test 489 .units: meter3
    test 490 .name: Test
    test 491 ._name: Test
    test 492 .str: 1.0
    test 493 .repr: 1.0
    test 494 delattr: ''

    testing Meter_(1.0,) (pygeodesy.units, 21.06.04)
    test 495 .classname: Meter_
    test 496 isinstance: True
    test 497 .name: meter_
    test 498 .named: meter_
    test 499 .named2: Meter_ 'meter_'
    test 500 .str: 1.0
    test 501 .toStr: 1.0
    test 502 .std_repr: True
    test 503 .repr: 1.0
    test 504 .toRepr: meter_ (1.0)
    test 505 .units: meter_
    test 506 meter_: meter ('X'): could not convert string to float: X
    test 507 meter_: U ('X'): could not convert string to float: X
    test 508 meter_: TypeError
    test 509 .named: Test
    test 510 .named2: Meter_ 'Test'
    test 511 .str: 1.0
    test 512 .toStr: 1.0
    test 513 .repr: 1.0
    test 514 .toRepr: Test (1.0)
    test 515 .units: meter_
    test 516 .name: Test
    test 517 ._name: Test
    test 518 .str: 1.0
    test 519 .repr: 1.0
    test 520 delattr: ''

    testing Northing(1.0,) (pygeodesy.units, 21.06.04)
    test 521 .classname: Northing
    test 522 isinstance: True
    test 523 .name: northing
    test 524 .named: northing
    test 525 .named2: Northing 'northing'
    test 526 .str: 1.0
    test 527 .toStr: 1.0
    test 528 .std_repr: True
    test 529 .repr: 1.0
    test 530 .toRepr: northing (1.0)
    test 531 .units: northing
    test 532 northing: northing ('X'): could not convert string to float: X
    test 533 northing: U ('X'): could not convert string to float: X
    test 534 northing: TypeError
    test 535 .named: Test
    test 536 .named2: Northing 'Test'
    test 537 .str: 1.0
    test 538 .toStr: 1.0
    test 539 .repr: 1.0
    test 540 .toRepr: Test (1.0)
    test 541 .units: northing
    test 542 .name: Test
    test 543 ._name: Test
    test 544 .str: 1.0
    test 545 .repr: 1.0
    test 546 delattr: ''

    testing Phi(1.0,) (pygeodesy.units, 21.06.04)
    test 547 .classname: Phi
    test 548 isinstance: True
    test 549 .name: phi
    test 550 .named: phi
    test 551 .named2: Phi 'phi'
    test 552 .str: 1.0
    test 553 .toStr: 1.0
    test 554 .std_repr: True
    test 555 .repr: 1.0
    test 556 .toRepr: phi (1.0)
    test 557 .units: phi
    test 558 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: X
    test 559 phi: U ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: X
    test 560 phi: TypeError
    test 561 .named: Test
    test 562 .named2: Phi 'Test'
    test 563 .str: 1.0
    test 564 .toStr: 1.0
    test 565 .repr: 1.0
    test 566 .toRepr: Test (1.0)
    test 567 .units: phi
    test 568 .name: Test
    test 569 ._name: Test
    test 570 .str: 1.0
    test 571 .repr: 1.0
    test 572 delattr: ''

    testing Radians(1.0,) (pygeodesy.units, 21.06.04)
    test 573 .classname: Radians
    test 574 isinstance: True
    test 575 .name: radians
    test 576 .named: radians
    test 577 .named2: Radians 'radians'
    test 578 .str: 1.0
    test 579 .toStr: 1.0
    test 580 .std_repr: True
    test 581 .repr: 1.0
    test 582 .toRepr: radians (1.0)
    test 583 .units: radians
    test 584 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: X
    test 585 radians: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: X
    test 586 radians: TypeError
    test 587 .named: Test
    test 588 .named2: Radians 'Test'
    test 589 .str: 1.0
    test 590 .toStr: 1.0
    test 591 .repr: 1.0
    test 592 .toRepr: Test (1.0)
    test 593 .units: radians
    test 594 .name: Test
    test 595 ._name: Test
    test 596 .str: 1.0
    test 597 .repr: 1.0
    test 598 delattr: ''

    testing Radians2(1.0,) (pygeodesy.units, 21.06.04)
    test 599 .classname: Radians2
    test 600 isinstance: True
    test 601 .name: radians2
    test 602 .named: radians2
    test 603 .named2: Radians2 'radians2'
    test 604 .str: 1.0
    test 605 .toStr: 1.0
    test 606 .std_repr: True
    test 607 .repr: 1.0
    test 608 .toRepr: radians2 (1.0)
    test 609 .units: radians2
    test 610 radians2: radians2 ('X'): could not convert string to float: X
    test 611 radians2: U ('X'): could not convert string to float: X
    test 612 radians2: TypeError
    test 613 .named: Test
    test 614 .named2: Radians2 'Test'
    test 615 .str: 1.0
    test 616 .toStr: 1.0
    test 617 .repr: 1.0
    test 618 .toRepr: Test (1.0)
    test 619 .units: radians2
    test 620 .name: Test
    test 621 ._name: Test
    test 622 .str: 1.0
    test 623 .repr: 1.0
    test 624 delattr: ''

    testing Radians_(1.0,) (pygeodesy.units, 21.06.04)
    test 625 .classname: Radians_
    test 626 isinstance: True
    test 627 .name: radians_
    test 628 .named: radians_
    test 629 .named2: Radians_ 'radians_'
    test 630 .str: 1.0
    test 631 .toStr: 1.0
    test 632 .std_repr: True
    test 633 .repr: 1.0
    test 634 .toRepr: radians_ (1.0)
    test 635 .units: radians_
    test 636 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: X
    test 637 radians_: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: X
    test 638 radians_: TypeError
    test 639 .named: Test
    test 640 .named2: Radians_ 'Test'
    test 641 .str: 1.0
    test 642 .toStr: 1.0
    test 643 .repr: 1.0
    test 644 .toRepr: Test (1.0)
    test 645 .units: radians_
    test 646 .name: Test
    test 647 ._name: Test
    test 648 .str: 1.0
    test 649 .repr: 1.0
    test 650 delattr: ''

    testing Radius(1.0,) (pygeodesy.units, 21.06.04)
    test 651 .classname: Radius
    test 652 isinstance: True
    test 653 .name: radius
    test 654 .named: radius
    test 655 .named2: Radius 'radius'
    test 656 .str: 1.0
    test 657 .toStr: 1.0
    test 658 .std_repr: True
    test 659 .repr: 1.0
    test 660 .toRepr: radius (1.0)
    test 661 .units: radius
    test 662 radius: radius ('X'): could not convert string to float: X
    test 663 radius: U ('X'): could not convert string to float: X
    test 664 radius: TypeError
    test 665 .named: Test
    test 666 .named2: Radius 'Test'
    test 667 .str: 1.0
    test 668 .toStr: 1.0
    test 669 .repr: 1.0
    test 670 .toRepr: Test (1.0)
    test 671 .units: radius
    test 672 .name: Test
    test 673 ._name: Test
    test 674 .str: 1.0
    test 675 .repr: 1.0
    test 676 delattr: ''

    testing Radius_(1.0,) (pygeodesy.units, 21.06.04)
    test 677 .classname: Radius_
    test 678 isinstance: True
    test 679 .name: radius_
    test 680 .named: radius_
    test 681 .named2: Radius_ 'radius_'
    test 682 .str: 1.0
    test 683 .toStr: 1.0
    test 684 .std_repr: True
    test 685 .repr: 1.0
    test 686 .toRepr: radius_ (1.0)
    test 687 .units: radius_
    test 688 radius_: radius ('X'): could not convert string to float: X
    test 689 radius_: U ('X'): could not convert string to float: X
    test 690 radius_: TypeError
    test 691 .named: Test
    test 692 .named2: Radius_ 'Test'
    test 693 .str: 1.0
    test 694 .toStr: 1.0
    test 695 .repr: 1.0
    test 696 .toRepr: Test (1.0)
    test 697 .units: radius_
    test 698 .name: Test
    test 699 ._name: Test
    test 700 .str: 1.0
    test 701 .repr: 1.0
    test 702 delattr: ''

    testing Scalar(1.0,) (pygeodesy.units, 21.06.04)
    test 703 .classname: Scalar
    test 704 isinstance: True
    test 705 .name: scalar
    test 706 .named: scalar
    test 707 .named2: Scalar 'scalar'
    test 708 .str: 1.0
    test 709 .toStr: 1.0
    test 710 .std_repr: True
    test 711 .repr: 1.0
    test 712 .toRepr: scalar (1.0)
    test 713 .units: scalar
    test 714 scalar: scalar ('X'): could not convert string to float: X
    test 715 scalar: U ('X'): could not convert string to float: X
    test 716 scalar: TypeError
    test 717 .named: Test
    test 718 .named2: Scalar 'Test'
    test 719 .str: 1.0
    test 720 .toStr: 1.0
    test 721 .repr: 1.0
    test 722 .toRepr: Test (1.0)
    test 723 .units: scalar
    test 724 .name: Test
    test 725 ._name: Test
    test 726 .str: 1.0
    test 727 .repr: 1.0
    test 728 delattr: ''

    testing Scalar_(1.0,) (pygeodesy.units, 21.06.04)
    test 729 .classname: Scalar_
    test 730 isinstance: True
    test 731 .name: scalar_
    test 732 .named: scalar_
    test 733 .named2: Scalar_ 'scalar_'
    test 734 .str: 1.0
    test 735 .toStr: 1.0
    test 736 .std_repr: True
    test 737 .repr: 1.0
    test 738 .toRepr: scalar_ (1.0)
    test 739 .units: scalar_
    test 740 scalar_: scalar ('X'): could not convert string to float: X
    test 741 scalar_: U ('X'): could not convert string to float: X
    test 742 scalar_: TypeError
    test 743 .named: Test
    test 744 .named2: Scalar_ 'Test'
    test 745 .str: 1.0
    test 746 .toStr: 1.0
    test 747 .repr: 1.0
    test 748 .toRepr: Test (1.0)
    test 749 .units: scalar_
    test 750 .name: Test
    test 751 ._name: Test
    test 752 .str: 1.0
    test 753 .repr: 1.0
    test 754 delattr: ''

    testing Band('U',) (pygeodesy.units, 21.06.04)
    test 755 .classname: Band
    test 756 isinstance: True
    test 757 .name: band
    test 758 .named: band
    test 759 .named2: Band 'band'
    test 760 .str: U
    test 761 .toStr: U
    test 762 .std_repr: True
    test 763 .repr: 'U'
    test 764 .toRepr: band ('U')
    test 765 .units: band
    test 766 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 767 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 768 Error: X  FAILED, KNOWN, expected <type 'exceptions.TypeError'>
    test 769 .named: Test
    test 770 .named2: Band 'Test'
    test 771 .str: U
    test 772 .toStr: U
    test 773 .repr: 'U'
    test 774 .toRepr: Test ('U')
    test 775 .units: band
    test 776 .name: Test
    test 777 ._name: Test
    test 778 .str: U
    test 779 .repr: 'U'
    test 780 delattr: ''

    testing Str('U',) (pygeodesy.units, 21.06.04)
    test 781 .classname: Str
    test 782 isinstance: True
    test 783 .name: str
    test 784 .named: str
    test 785 .named2: Str 'str'
    test 786 .str: U
    test 787 .toStr: U
    test 788 .std_repr: True
    test 789 .repr: 'U'
    test 790 .toRepr: str ('U')
    test 791 .units: str
    test 792 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 793 error: X  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 794 Error: X  FAILED, KNOWN, expected <type 'exceptions.TypeError'>
    test 795 .named: Test
    test 796 .named2: Str 'Test'
    test 797 .str: U
    test 798 .toStr: U
    test 799 .repr: 'U'
    test 800 .toRepr: Test ('U')
    test 801 .units: str
    test 802 .name: Test
    test 803 ._name: Test
    test 804 .str: U
    test 805 .repr: 'U'
    test 806 delattr: ''

    testing Bool(True,) (pygeodesy.units, 21.06.04)
    test 807 .classname: Bool
    test 808 isinstance: True
    test 809 .name: bool
    test 810 .named: bool
    test 811 .named2: Bool 'bool'
    test 812 .str: True
    test 813 .toStr: True
    test 814 .std_repr: True
    test 815 .repr: True
    test 816 .toRepr: bool (True)
    test 817 .units: bool
    test 818 error: True  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 819 error: True  FAILED, KNOWN, expected <type 'exceptions.ValueError'>
    test 820 Error: True  FAILED, KNOWN, expected <type 'exceptions.TypeError'>
    test 821 .named: Test
    test 822 .named2: Bool 'Test'
    test 823 .str: True
    test 824 .toStr: True
    test 825 .repr: True
    test 826 .toRepr: Test (True)
    test 827 .units: bool
    test 828 .name: Test
    test 829 ._name: Test
    test 830 .str: True
    test 831 .repr: True
    test 832 delattr: ''

    testing Int(2,) (pygeodesy.units, 21.06.04)
    test 833 .classname: Int
    test 834 isinstance: True
    test 835 .name: int
    test 836 .named: int
    test 837 .named2: Int 'int'
    test 838 .str: 2
    test 839 .toStr: 2
    test 840 .std_repr: True
    test 841 .repr: 2
    test 842 .toRepr: int (2)
    test 843 .units: int
    test 844 int: Int ('X'): invalid literal for int() with base 10: 'X'
    test 845 int: U ('X'): invalid literal for int() with base 10: 'X'
    test 846 int: TypeError
    test 847 .named: Test
    test 848 .named2: Int 'Test'
    test 849 .str: 2
    test 850 .toStr: 2
    test 851 .repr: 2
    test 852 .toRepr: Test (2)
    test 853 .units: int
    test 854 .name: Test
    test 855 ._name: Test
    test 856 .str: 2
    test 857 .repr: 2
    test 858 delattr: ''

    testing Int_(2,) (pygeodesy.units, 21.06.04)
    test 859 .classname: Int_
    test 860 isinstance: True
    test 861 .name: int_
    test 862 .named: int_
    test 863 .named2: Int_ 'int_'
    test 864 .str: 2
    test 865 .toStr: 2
    test 866 .std_repr: True
    test 867 .repr: 2
    test 868 .toRepr: int_ (2)
    test 869 .units: int_
    test 870 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'
    test 871 int_: U ('X'): invalid literal for int() with base 10: 'X'
    test 872 int_: TypeError
    test 873 .named: Test
    test 874 .named2: Int_ 'Test'
    test 875 .str: 2
    test 876 .toStr: 2
    test 877 .repr: 2
    test 878 .toRepr: Test (2)
    test 879 .units: int_
    test 880 .name: Test
    test 881 ._name: Test
    test 882 .str: 2
    test 883 .repr: 2
    test 884 delattr: ''

    testing Number_(2,) (pygeodesy.units, 21.06.04)
    test 885 .classname: Number_
    test 886 isinstance: True
    test 887 .name: number_
    test 888 .named: number_
    test 889 .named2: Number_ 'number_'
    test 890 .str: 2
    test 891 .toStr: 2
    test 892 .std_repr: True
    test 893 .repr: 2
    test 894 .toRepr: number_ (2)
    test 895 .units: number_
    test 896 number_: number ('X'): invalid literal for int() with base 10: 'X'
    test 897 number_: U ('X'): invalid literal for int() with base 10: 'X'
    test 898 number_: TypeError
    test 899 .named: Test
    test 900 .named2: Number_ 'Test'
    test 901 .str: 2
    test 902 .toStr: 2
    test 903 .repr: 2
    test 904 .toRepr: Test (2)
    test 905 .units: number_
    test 906 .name: Test
    test 907 ._name: Test
    test 908 .str: 2
    test 909 .repr: 2
    test 910 delattr: ''

    testing Precision_(2,) (pygeodesy.units, 21.06.04)
    test 911 .classname: Precision_
    test 912 isinstance: True
    test 913 .name: precision_
    test 914 .named: precision_
    test 915 .named2: Precision_ 'precision_'
    test 916 .str: 2
    test 917 .toStr: 2
    test 918 .std_repr: True
    test 919 .repr: 2
    test 920 .toRepr: precision_ (2)
    test 921 .units: precision_
    test 922 precision_: precision ('X'): invalid literal for int() with base 10: 'X'
    test 923 precision_: U ('X'): invalid literal for int() with base 10: 'X'
    test 924 precision_: TypeError
    test 925 .named: Test
    test 926 .named2: Precision_ 'Test'
    test 927 .str: 2
    test 928 .toStr: 2
    test 929 .repr: 2
    test 930 .toRepr: Test (2)
    test 931 .units: precision_
    test 932 .name: Test
    test 933 ._name: Test
    test 934 .str: 2
    test 935 .repr: 2
    test 936 delattr: ''

    testing Zone(2,) (pygeodesy.units, 21.06.04)
    test 937 .classname: Zone
    test 938 isinstance: True
    test 939 .name: zone
    test 940 .named: zone
    test 941 .named2: Zone 'zone'
    test 942 .str: 2
    test 943 .toStr: 2
    test 944 .std_repr: True
    test 945 .repr: 2
    test 946 .toRepr: zone (2)
    test 947 .units: zone
    test 948 zone: zone ('X'): invalid literal for int() with base 10: 'X'
    test 949 zone: U ('X'): invalid literal for int() with base 10: 'X'
    test 950 zone: TypeError
    test 951 .named: Test
    test 952 .named2: Zone 'Test'
    test 953 .str: 2
    test 954 .toStr: 2
    test 955 .repr: 2
    test 956 .toRepr: Test (2)
    test 957 .units: zone
    test 958 .name: Test
    test 959 ._name: Test
    test 960 .str: 2
    test 961 .repr: 2
    test 962 delattr: ''

    testing Epoch(1901,) (pygeodesy.units, 21.06.04)
    test 963 .classname: Epoch
    test 964 isinstance: True
    test 965 .name: epoch
    test 966 .named: epoch
    test 967 .named2: Epoch 'epoch'
    test 968 .str: 1901
    test 969 .toStr: 1901
    test 970 .std_repr: False
    test 971 .repr: epoch (1901)
    test 972 .toRepr: epoch (1901)
    test 973 .units: epoch
    test 974 epoch: epoch ('X'): could not convert string to float: X
    test 975 epoch: U ('X'): could not convert string to float: X
    test 976 epoch: TypeError
    test 977 .named: Test
    test 978 .named2: Epoch 'Test'
    test 979 .str: 1901
    test 980 .toStr: 1901
    test 981 .repr: Test (1901)
    test 982 .toRepr: Test (1901)
    test 983 .units: epoch
    test 984 .name: Test
    test 985 ._name: Test
    test 986 .str: 1901
    test 987 .repr: Test (1901)
    test 988 delattr: ''

    testing(pygeodesy.units, 21.06.04)
    test 989 Bearing: 1.0
    test 990 Bearing_: 0.01745
    test 991 Lam_: 6.30
    test 992 Phi_: 6.30
    test 993 FIx: 1.0  FAILED, KNOWN, expected 1
    test 994 FIx: 1.5

    10 of 994 testUnits.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 28.409 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUps.py

    testing testUps.py 22.02.11 (module pygeodesy.ups 21.07.22)
    test 1 Ups: 00 N 448251.0 5411932.0001
    test 2 Ups: 00 N 448252 5411933
    test 3 Ups: 00 N 448251.795 5411932.678
    test 4 Ups: 00Z N 448251.8 5411932.7 n/a n/a
    test 5 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 6 Ups.toLatLon: 43.684097°N, 175.265195°E
    test 7 Ups.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 8 Ups.toMgrs: 60T UP 60176 38249
    test 9 Ups.toUps: 00 N 448252 5411933
    test 10 Ups.toUtm: 60 N 360177 4838249
    test 11 toUpsID1: 00 N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 12 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 13 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 14 toUpsID3: 00 S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 15 Ups.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 16 Ups.toLatLonID4: 84.287234°N, 132.247989°W
    test 17 Ups.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 18 Ups.toLatLonID5: 73.0°N, 044.0°E
    test 19 Ups.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 20 Ups.toLatLonID6: 87.287333°S, 132.247861°E
    test 21 latlon: 84.0°N, 084.0°E
    test 22 toUps: 00 N 2663075 1930308
    test 23 toUps: 00 N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 24 toUps(None): (0, 'N', 2663075.299562, 1930307.977716, 'Z', ...)
    test 25 .scale0: 0.994000
    test 26 rescale0: 0.997261
    test 27 NGA-10.2-1: 00 N 2000000.0 2000000.0 +0.0″ 0.994
    test 28 NGA-10.2-2: 00 N 1998062.320046 2111009.610243 -179.0° 0.994076
    test 29 NGA-10.2-3: 00 N 1777930.731071 2000000.0 -90.0° 0.994303
    test 30 NGA-10.2-4: 00 N 1994185.827038 1666906.254073 -1.0° 0.994682
    test 31 NGA-10.2-5: 00 N 2000000.0 1555731.570643 +0.0″ 0.995212
    test 32 NGA-10.2-6: 00 N 2009694.068153 1444627.207468 +1.0° 0.995895
    test 33 NGA-10.2-7: 00 N 2666626.157825 1988363.997132 +89.0° 0.996730
    test 34 NGA-10.2-8: 46 N 459200.256323 9217519.441609 -2.97767886° 0.997718
    test 35 NGA-10.2-9: 46 N 468930.934996 9105366.008486 -1.98055172° 0.998860
    test 36 NGA-10.2-10: 60 N 534921.971582 8993806.415149 +1.97539632° 1.000156
    test 37 NGA-10.2-11: 01 N 441867.784867 8883084.955948 -2.95450468° 1.001608
    test 38 NGA-10.2-12: 31 N 243900.35203 4432069.056899 -1.92940969° 1.0004075
    test 39 NGA-10.2-13: 01 N 277707.830749 331796.291679 -6.28291137′ 1.00021172
    test 40 NGA-10.2-14: 16 N 166223.907623 221366.16603 -6.28776606′ 1.00097936
    test 41 NGA-10.2-15: 30 N 722561.736479 110597.972524 +2.09515682′ 1.00021322
    test 42 NGA-10.2-16: 31 N 166021.443081 0.0 +0.0″ 1.00098106
    test 43 NGA-10.2-17: 31 S 277438.263521 9889402.027476 +2.09515682′ 1.00021322
    test 44 NGA-10.2-18: 46 S 166223.907623 9778633.83397 +6.28776606′ 1.00097936
    test 45 NGA-10.2-19: 60 S 722292.169251 9668203.708321 -6.28291137′ 1.00021172
    test 46 NGA-10.2-20: 01 S 166831.065275 9557263.747314 +12.56782777′ 1.00097428
    test 47 NGA-10.3-1: -64.9164123332 -135.0
    test 48 NGA-10.3-2: -70.0552944014 -153.4349488229
    test 49 NGA-10.3-3: -72.1263610163 180.0  FAILED, KNOWN, expected -72.1263610163 -180.0
    test 50 NGA-10.3-4: -70.0552944014 153.4349488229
    test 51 NGA-10.3-5: -64.9164123332 135.0
    test 52 NGA-10.3-6: -70.0552944014 -116.5650511771
    test 53 NGA-10.3-7: -77.3120791908 -135.0
    test 54 NGA-10.3-8: -81.0106632645 180.0
    test 55 NGA-10.3-9: -77.3120791908 135.0
    test 56 NGA-10.3-10: -70.0552944014 116.5650511771
    test 57 NGA-10.3-11: -72.1263610163 -90.0
    test 58 NGA-10.3-12: -81.0106632645 -90.0
    test 59 NGA-10.3-13: -90.0 0.0
    test 60 NGA-10.3-14: -81.0106632645 90.0
    test 61 NGA-10.3-15: -72.1263610163 90.0
    test 62 NGA-10.3-16: -70.0552944014 -63.4349488229
    test 63 NGA-10.3-17: -77.3120791908 -45.0
    test 64 NGA-10.3-18: -81.0106632645 0.0
    test 65 NGA-10.3-19: -77.3120791908 45.0
    test 66 NGA-10.3-20: -70.0552944014 63.4349488229
    test 67 NGA-10.3-21: -64.9164123332 -45.0
    test 68 NGA-10.3-22: -70.0552944014 -26.5650511771
    test 69 NGA-10.3-23: -72.1263610163 0.0
    test 70 NGA-10.3-24: -70.0552944014 26.5650511771
    test 71 NGA-10.3-25: -64.9164123332 45.0

    2 of 71 testUps.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 26.943 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUtily.py

    testing testUtily.py 21.02.27 (module pygeodesy.utily 21.07.09)
    test 1 degrees90(PI_2): 90.0
    test 2 degrees90(PI): -180.0
    test 3 degrees90(PI2): 0.0
    test 4 degrees90(-PI_2): -90.0
    test 5 degrees90(-PI): -180.0
    test 6 degrees90(-PI2): 0.0
    test 7 degrees180(PI_2): 90.0
    test 8 degrees180(PI): 180.0
    test 9 degrees180(PI2): 0.0
    test 10 degrees180(-PI_2): -90.0
    test 11 degrees180(-PI): -180.0
    test 12 degrees180(-PI2): 0.0
    test 13 degrees360(PI_2): 90.0
    test 14 degrees360(PI): 180.0
    test 15 degrees360(PI2): 0.0
    test 16 degrees360(-PI_2): 270.0
    test 17 degrees360(-PI): 180.0
    test 18 degrees360(-PI2): 0.0
    test 19 degrees2grades(90): 100.0
    test 20 degrees2grades(180): 200.0
    test 21 degrees2grades(360): 400.0
    test 22 degrees2grades(-90): -100.0
    test 23 degrees2grades(-180): -200.0
    test 24 degrees2grades(-360): -400.0
    test 25 grades400(PI_2): 100.0
    test 26 grades400(PI): 200.0
    test 27 grades400(PI2): 0.0
    test 28 grades400(-PI_2): 300.0
    test 29 grades400(-PI): 200.0
    test 30 grades400(-PI2): 0.0
    test 31 grades2degrees(100): 90.0
    test 32 grades2degrees(200): 180.0
    test 33 grades2degrees(400): 360.0
    test 34 grades2degrees(-100): -90.0
    test 35 grades2degrees(-200): -180.0
    test 36 grades2degrees(-400): -360.0
    test 37 grades2radians(100): 1.57079632679
    test 38 grades2radians(200): 3.14159265359
    test 39 grades2radians(400): 6.28318530718
    test 40 grades2radians(-100): -1.57079632679
    test 41 grades2radians(-200): -3.14159265359
    test 42 grades2radians(-400): -6.28318530718
    test 43 radiansPI_2(90): 1.57079632679
    test 44 radiansPI_2(180): -3.14159265359
    test 45 radiansPI_2(360): 0.0
    test 46 radiansPI_2(-90): -1.57079632679
    test 47 radiansPI_2(-180): -3.14159265359
    test 48 radiansPI_2(-360): 0.0
    test 49 radiansPI(90): 1.57079632679
    test 50 radiansPI(180): 3.14159265359
    test 51 radiansPI(360): 0.0
    test 52 radiansPI(-90): -1.57079632679
    test 53 radiansPI(-180): -3.14159265359
    test 54 radiansPI(-360): 0.0
    test 55 radiansPI2(90): 1.57079632679
    test 56 radiansPI2(180): 3.14159265359
    test 57 radiansPI2(360): 0.0
    test 58 radiansPI2(-90): 4.71238898038
    test 59 radiansPI2(-180): 3.14159265359
    test 60 radiansPI2(-360): 0.0
    test 61 wrap90(90): 90.0
    test 62 wrap90(180): -180.0
    test 63 wrap90(360): 0.0
    test 64 wrap90(-90): -90.0
    test 65 wrap90(-180): -180.0
    test 66 wrap90(-360): 0.0
    test 67 wrap180(90): 90.0
    test 68 wrap180(180): 180.0
    test 69 wrap180(360): 0.0
    test 70 wrap180(-90): -90.0
    test 71 wrap180(-180): -180.0
    test 72 wrap180(-360): 0.0
    test 73 wrap360(90): 90.0
    test 74 wrap360(180): 180.0
    test 75 wrap360(360): 0.0
    test 76 wrap360(-90): 270.0
    test 77 wrap360(-180): 180.0
    test 78 wrap360(-360): 0.0
    test 79 wrapPI_2(PI_2): 1.57079632679
    test 80 wrapPI_2(PI): -3.14159265359
    test 81 wrapPI_2(PI2): 0.0
    test 82 wrapPI_2(-PI_2): -1.57079632679
    test 83 wrapPI_2(-PI): -3.14159265359
    test 84 wrapPI_2(-PI2): 0.0
    test 85 wrapPI(PI_2): 1.57079632679
    test 86 wrapPI(PI): 3.14159265359
    test 87 wrapPI(PI2): 0.0
    test 88 wrapPI(-PI_2): -1.57079632679
    test 89 wrapPI(-PI): -3.14159265359
    test 90 wrapPI(-PI2): 0.0
    test 91 wrapPI2(PI_2): 1.57079632679
    test 92 wrapPI2(PI): 3.14159265359
    test 93 wrapPI2(PI2): 0.0
    test 94 wrapPI2(-PI_2): 4.71238898038
    test 95 wrapPI2(-PI): 3.14159265359
    test 96 wrapPI2(-PI2): 0.0
    test 97 unroll180: -160.0, -250.0
    test 98 unroll180: 200.0, 110.0
    test 99 unroll180: -160.0, -250.0
    test 100 unroll180: 920.0, 830.0
    test 101 unroll180: -160.0, -270.0
    test 102 unroll180: 200.0, 90.0
    test 103 unroll180: -160.0, -990.0
    test 104 unroll180: 920.0, 90.0
    test 105 sincos2: 3.88578058619e-16  FAILED, KNOWN, expected 1.7763568394e-15
    test 106 sincos2d: 9.99200722163e-16  FAILED, KNOWN, expected 1.7763568394e-15
    test 107 iFt2m: 187441
    test 108 iFt2m: 757050
    test 109 sFt2m: 187441
    test 110 sFt2m: 757050
    test 111 m2iFt: 614963.91
    test 112 m2iFt: 2483759.84
    test 113 m2sFt: 614962.68
    test 114 m2sFt: 2483754.87
    test 115 m2yard: 1.093613
    test 116 acre2ha: 0.404686
    test 117 acre2m2: 4046.856422
    test 118 chain2m: 20.116800
    test 119 fathom2m: 1.828800
    test 120 furlong2m: 201.168000
    test 121 yard2m: 0.914400
    test 122 degrees2m: 10007557.1761
    test 123 degrees2m: 8666798.7443
    test 124 m2degrees: 90.0
    test 125 degrees2m: 20015114.3522
    test 126 degrees2m: 19987684.3336
    test 127 m2degrees: 180.0
    test 128 m2degrees2m(45, lat=0): 45.00
    test 129 m2degrees2m(45, lat=7): 45.00
    test 130 m2degrees2m(45, lat=14): 45.00
    test 131 m2degrees2m(45, lat=21): 45.00
    test 132 m2degrees2m(45, lat=28): 45.00
    test 133 m2degrees2m(45, lat=35): 45.00
    test 134 m2degrees2m(45, lat=42): 45.00
    test 135 m2degrees2m(45, lat=49): 45.00
    test 136 m2degrees2m(45, lat=56): 45.00
    test 137 m2degrees2m(45, lat=63): 45.00
    test 138 m2degrees2m(45, lat=70): 45.00
    test 139 m2degrees2m(45, lat=77): 45.00
    test 140 m2degrees2m(45, lat=84): 45.00
    test 141 isPoints2: False
    test 142 tan_2_semi: PI[1] edge (3.141592): semi-circular

    2 of 142 testUtily.py tests (1.4%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 15.386 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUtm.py

    testing testUtm.py 21.02.11 (module pygeodesy.utm 21.06.21)
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 14 toEtm: 13 S 622698 8516965
    test 15 toMgrs1: 13L FF 22697 16965
    test 16 toMgrs2: 31U DQ 48251 11932
    test 17 toUps: 00 S -7702368 -395110
    test 18 toUtm14: 14 S -27436 8512042
    test 19 Utm8: 18 N 516620 4574500
    test 20 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 21 Utm8.toLatLon: 41.321801N, 074.801413W
    test 22 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 23 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 24 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 25 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 26 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 27 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 28 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 29 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 30 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 31 toUtm(80.5434°S, 170.654°W): lat ('-80.5434\xc2\xb0'): outside UTM range [-80, 84)
    test 32 toUtm(90.0°N, 177.0°E): lat ('90.0\xc2\xb0'): outside UTM range [-80, 84)
    test 33 toUtm(90.0°S, 177.0°W): lat ('-90.0\xc2\xb0'): outside UTM range [-80, 84)
    test 34 toUtm(90.0°N, 003.0°E): lat ('90.0\xc2\xb0'): outside UTM range [-80, 84)
    test 35 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 36 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 37 toUtm(89.3454°S, 048.9306°W): lat ('-89.3454\xc2\xb0'): outside UTM range [-80, 84)
    test 38 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 39 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 40 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 41 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 42 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 43 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 44 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 45 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 46 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 47 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 48 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 49 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    test 50 toUtm(50.77535°N, 006.08389°E): 32U N 294409 5628898
    test 51 toUtm(40.71435°N, 074.00597°W): 18T N 583960 4507523
    test 52 toUtm(41.28646°S, 174.77624°E): 60G S 313784 5427057
    test 53 toUtm(33.92487°S, 018.42406°E): 34H S 261878 6243186
    test 54 toUtm(32.89018°S, 068.84405°W): 19H S 514586 6360877
    test 55 toUtm(64.83778°N, 147.71639°W): 06W N 466013 7190568
    test 56 toUtm(56.7968°N, 005.00601°W): 30V N 377486 6296562
    test 57 toUtm(84.0°N, 005.00601°W): lat ('84.0\xc2\xb0'): outside UTM range [-80, 84)
    test 58 toUtm('Mt Assiniboine'): [Z:11U, H:N, E:594934, N:5636174]
    test 59 Utm9: 55 S 321441 5810117
    test 60 Utm9.toLatLon(eps=2.2204e-12): -37.83891644, 144.97077387
    test 61 Utm9.toLatLon(eps=2.2204e-13): -37.83891644, 144.97077387
    test 62 Utm9.toLatLon(eps=2.2204e-14): -37.83891644, 144.97077387
    test 63 Utm9.toLatLon(eps=2.2204e-15): -37.83891644, 144.97077387
    test 64 Utm9.toLatLon(eps=2.2204e-16): -37.83891644, 144.97077387
    test 65 Utm9.toLatLon(eps=2.2204e-17): -37.83891644, 144.97077387
    test 66 Utm9.toLatLon(eps=2.2204e-18): -37.83891644, 144.97077387
    test 67 Utm9.toLatLon(eps=2.2204e-19): -37.83891644, 144.97077387
    test 68 Utm9.toLatLon(eps=2.2204e-20): -37.83891644, 144.97077387
    test 69 Utm10: 31 N 400000 5000000
    test 70 Utm10.toLatLon(eps=2.2204e-12): 45.14639288, 1.72796704
    test 71 Utm10.toLatLon(eps=2.2204e-13): 45.14639288, 1.72796704
    test 72 Utm10.toLatLon(eps=2.2204e-14): 45.14639288, 1.72796704
    test 73 Utm10.toLatLon(eps=2.2204e-15): 45.14639288, 1.72796704
    test 74 Utm10.toLatLon(eps=2.2204e-16): 45.14639288, 1.72796704
    test 75 Utm10.toLatLon(eps=2.2204e-17): 45.14639288, 1.72796704
    test 76 Utm10.toLatLon(eps=2.2204e-18): 45.14639288, 1.72796704
    test 77 Utm10.toLatLon(eps=2.2204e-19): 45.14639288, 1.72796704
    test 78 Utm10.toLatLon(eps=2.2204e-20): 45.14639288, 1.72796704
    test 79 Utm111: 37 N 1399093 8314607
    test 80 Utm111.toLatLon(eps=2.2204e-12): 70.54298527, 40.28205459
    test 81 Utm111.toLatLon(eps=2.2204e-13): 70.54298527, 40.28205459
    test 82 Utm111.toLatLon(eps=2.2204e-14): 70.54298527, 40.28205459
    test 83 Utm111.toLatLon(eps=2.2204e-15): 70.54298527, 40.28205459
    test 84 Utm111.toLatLon(eps=2.2204e-16): 70.54298527, 40.28205459
    test 85 Utm111.toLatLon(eps=2.2204e-17): 70.54298527, 40.28205459
    test 86 Utm111.toLatLon(eps=2.2204e-18): 70.54298527, 40.28205459
    test 87 Utm111.toLatLon(eps=2.2204e-19): 70.54298527, 40.28205459
    test 88 Utm111.toLatLon(eps=2.2204e-20): 70.54298527, 40.28205459
    test 89 CV#86: [Z:01, H:N, E:100000, N:0, C:n/a, S:n/a]
    test 90 CV#86: 00.0°N, 179.407673°E
    test 91 CV#86: [Z:60, H:N, E:767993, N:0, C:+0.0″, S:1.000489]  FAILED, KNOWN, expected [Z:01, H:N, E:100000, N:0, ...]

    1 of 91 testUtm.py tests (1.1%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 40.688 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUtmTMcoords.py

    testing testUtmTMcoords.py 19.05.23 (module pygeodesy.utm 21.06.21)
    test 1 line 1 toUtm8.easting: 1548706.791619
    test 2 line 1 toUtm8.northing: 8451449.198772
    test 3 line 1 toUtm8.convergence: 43.922790
    test 4 line 1 toUtm8.scale: 1.029060
    test 5 line 1 toUtm8.lat: 70.579277
    test 6 line 1 toUtm8.lon: 45.599420
    test 7 line 2 toUtm8.easting: 2624150.740929
    test 8 line 2 toUtm8.northing: 1204434.041605
    test 9 line 2 toUtm8.convergence: 4.292619
    test 10 line 2 toUtm8.scale: 1.086051
    test 11 line 2 toUtm8.lat: 10.018894
    test 12 line 2 toUtm8.lon: 23.313324
    test 13 line 3 toUtm8.easting: 9855841.232935
    test 14 line 3 toUtm8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtm8.convergence: 53.348315
    test 16 line 3 toUtm8.scale: 2.445098
    test 17 line 3 toUtm8.lat: 19.479896
    test 18 line 3 toUtm8.lon: 75.662049
    test 19 line 4 toUtm8.easting: 3206390.691996
    test 20 line 4 toUtm8.northing: 2650745.400406
    test 21 line 4 toUtm8.convergence: 11.666950
    test 22 line 4 toUtm8.scale: 1.129359
    test 23 line 4 toUtm8.lat: 21.072465
    test 24 line 4 toUtm8.lon: 29.828684
    test 25 line 5 toUtm8.easting: 4328154.083501
    test 26 line 5 toUtm8.northing: 749647.623690
    test 27 line 5 toUtm8.convergence: 4.024317
    test 28 line 5 toUtm8.scale: 1.240829
    test 29 line 5 toUtm8.lat: 5.458957
    test 30 line 5 toUtm8.lon: 36.385237
    test 31 line 6 toUtm8.easting: 847598.266514
    test 32 line 6 toUtm8.northing: 7947180.962440
    test 33 line 6 toUtm8.convergence: 21.639091
    test 34 line 6 toUtm8.scale: 1.008399
    test 35 line 6 toUtm8.lat: 70.175454
    test 36 line 6 toUtm8.lon: 22.865350
    test 37 line 7 toUtm8.easting: 2727657.337974
    test 38 line 7 toUtm8.northing: 8283916.696410
    test 39 line 7 toUtm8.convergence: 55.690909
    test 40 line 7 toUtm8.scale: 1.091942
    test 41 line 7 toUtm8.lat: 61.965605
    test 42 line 7 toUtm8.lon: 58.931371
    test 43 line 8 toUtm8.easting: 2331001.751890
    test 44 line 8 toUtm8.northing: 1313608.224751
    test 45 line 8 toUtm8.convergence: 4.214690
    test 46 line 8 toUtm8.scale: 1.067599
    test 47 line 8 toUtm8.lat: 11.116050
    test 48 line 8 toUtm8.lon: 20.901069
    test 49 line 9 toUtm8.easting: 6035557.239480
    test 50 line 9 toUtm8.northing: 5791770.791879
    test 51 line 9 toUtm8.convergence: 43.698170
    test 52 line 9 toUtm8.scale: 1.481260
    test 53 line 9 toUtm8.lat: 32.210543
    test 54 line 9 toUtm8.lon: 60.705849
    test 55 line 10 toUtm8.easting: 1064553.125852
    test 56 line 10 toUtm8.northing: 9417273.737208
    test 57 line 10 toUtm8.convergence: 61.100380
    test 58 line 10 toUtm8.scale: 1.013475
    test 59 line 10 toUtm8.lat: 79.187451
    test 60 line 10 toUtm8.lon: 61.532382
    test 61 line 11 toUtm8.easting: 1400137.116164
    test 62 line 11 toUtm8.northing: 9616907.017686
    test 63 line 11 toUtm8.convergence: 74.527087
    test 64 line 11 toUtm8.scale: 1.023640
    test 65 line 11 toUtm8.lat: 77.103759
    test 66 line 11 toUtm8.lon: 74.899105
    test skipped (1): line 12 toUtm8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'
    test skipped (2): line 13 toUtm8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtm8.easting: 3335099.866623
    test 68 line 14 toUtm8.northing: 6740519.084015
    test 69 line 14 toUtm8.convergence: 40.611821
    test 70 line 14 toUtm8.scale: 1.139021
    test 71 line 14 toUtm8.lat: 49.990485
    test 72 line 14 toUtm8.lon: 48.203179
    test skipped (3): line 15 toUtm8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtm8.easting: 5387578.735298
    test 74 line 16 toUtm8.northing: 4111216.907168
    test 75 line 16 toUtm8.convergence: 27.574337
    test 76 line 16 toUtm8.scale: 1.379357
    test 77 line 16 toUtm8.lat: 25.936824
    test 78 line 16 toUtm8.lon: 49.913598
    test 79 line 17 toUtm8.easting: 2622214.380233
    test 80 line 17 toUtm8.northing: 8678923.984567
    test 81 line 17 toUtm8.convergence: 61.697275
    test 82 line 17 toUtm8.scale: 1.084810
    test 83 line 17 toUtm8.lat: 64.402196
    test 84 line 17 toUtm8.lon: 64.091395
    test skipped (4): line 18 toUtm8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtm8.easting: 738062.047779
    test 86 line 19 toUtm8.northing: 3031007.074116
    test 87 line 19 toUtm8.convergence: 3.416802
    test 88 line 19 toUtm8.scale: 1.006332
    test 89 line 19 toUtm8.lat: 27.203895
    test 90 line 19 toUtm8.lon: 7.440229
    test 91 line 20 toUtm8.easting: 1944413.834565
    test 92 line 20 toUtm8.northing: 9613299.224493
    test 93 line 20 toUtm8.convergence: 78.462831
    test 94 line 20 toUtm8.scale: 1.046134
    test 95 line 20 toUtm8.lat: 72.509000
    test 96 line 20 toUtm8.lon: 78.982283
    test 97 line 21 toUtm8.easting: 2114521.418406
    test 98 line 21 toUtm8.northing: 4954077.440098
    test 99 line 21 toUtm8.convergence: 17.571878
    test 100 line 21 toUtm8.scale: 1.055093
    test 101 line 21 toUtm8.lat: 41.824954
    test 102 line 21 toUtm8.lon: 25.392744
    test 103 line 22 toUtm8.easting: 620365.905090
    test 104 line 22 toUtm8.northing: 4755542.026562
    test 105 line 22 toUtm8.convergence: 5.152022
    test 106 line 22 toUtm8.scale: 1.004338
    test 107 line 22 toUtm8.lat: 42.701376
    test 108 line 22 toUtm8.lon: 7.572738
    test 109 line 23 toUtm8.easting: 263004.770989
    test 110 line 23 toUtm8.northing: 4493669.762451
    test 111 line 23 toUtm8.convergence: 2.020523
    test 112 line 23 toUtm8.scale: 1.000452
    test 113 line 23 toUtm8.lat: 40.552052
    test 114 line 23 toUtm8.lon: 3.106056
    test 115 line 24 toUtm8.easting: 3217221.739462
    test 116 line 24 toUtm8.northing: 437776.119161
    test 117 line 24 toUtm8.convergence: 1.848169
    test 118 line 24 toUtm8.scale: 1.130558
    test 119 line 24 toUtm8.lat: 3.501242
    test 120 line 24 toUtm8.lon: 27.806507
    test skipped (5): line 25 toUtm8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtm8.easting: 967777.158554
    test 122 line 26 toUtm8.northing: 6615684.266592
    test 123 line 26 toUtm8.convergence: 14.410044
    test 124 line 26 toUtm8.scale: 1.011100
    test 125 line 26 toUtm8.lat: 58.582623
    test 126 line 26 toUtm8.lon: 16.755558
    test 127 line 27 toUtm8.easting: 7558840.728461
    test 128 line 27 toUtm8.northing: 4144728.130764
    test 129 line 27 toUtm8.convergence: 32.557264
    test 130 line 27 toUtm8.scale: 1.791490
    test 131 line 27 toUtm8.lat: 19.793004
    test 132 line 27 toUtm8.lon: 61.746763
    test 133 line 28 toUtm8.easting: 1056008.314161
    test 134 line 28 toUtm8.northing: 9290799.692669
    test 135 line 28 toUtm8.convergence: 55.843278
    test 136 line 28 toUtm8.scale: 1.013253
    test 137 line 28 toUtm8.lat: 78.666776
    test 138 line 28 toUtm8.lon: 56.365355
    test 139 line 29 toUtm8.easting: 1943965.134687
    test 140 line 29 toUtm8.northing: 1389972.228690
    test 141 line 29 toUtm8.convergence: 3.774869
    test 142 line 29 toUtm8.scale: 1.046724
    test 143 line 29 toUtm8.lat: 11.998788
    test 144 line 29 toUtm8.lon: 17.597873
    test 145 line 30 toUtm8.easting: 5803077.072902
    test 146 line 30 toUtm8.northing: 5649957.943659
    test 147 line 30 toUtm8.convergence: 41.717943
    test 148 line 30 toUtm8.scale: 1.442572
    test 149 line 30 toUtm8.lat: 32.540378
    test 150 line 30 toUtm8.lon: 58.764613
    test 151 line 31 toUtm8.easting: 2928716.986009
    test 152 line 31 toUtm8.northing: 5731835.058317
    test 153 line 31 toUtm8.convergence: 28.538550
    test 154 line 31 toUtm8.scale: 1.106780
    test 155 line 31 toUtm8.lat: 45.160356
    test 156 line 31 toUtm8.lon: 37.465285
    test 157 line 32 toUtm8.easting: 326141.975756
    test 158 line 32 toUtm8.northing: 8881325.164543
    test 159 line 32 toUtm8.convergence: 16.111415
    test 160 line 32 toUtm8.scale: 1.000900
    test 161 line 32 toUtm8.lat: 79.584190
    test 162 line 32 toUtm8.lon: 16.367006
    test 163 line 33 toUtm8.easting: 3933015.267450
    test 164 line 33 toUtm8.northing: 7932373.909512
    test 165 line 33 toUtm8.convergence: 58.577424
    test 166 line 33 toUtm8.scale: 1.194811
    test 167 line 33 toUtm8.lat: 52.470664
    test 168 line 33 toUtm8.lon: 64.125580
    test 169 line 34 toUtm8.easting: 8598926.983213
    test 170 line 34 toUtm8.northing: 6214135.167503
    test 171 line 34 toUtm8.convergence: 52.612878
    test 172 line 34 toUtm8.scale: 2.051367
    test 173 line 34 toUtm8.lat: 23.702673
    test 174 line 34 toUtm8.lon: 72.630363
    test 175 line 35 toUtm8.easting: 6620553.333772
    test 176 line 35 toUtm8.northing: 6540527.122948
    test 177 line 35 toUtm8.convergence: 52.350140
    test 178 line 35 toUtm8.scale: 1.586614
    test 179 line 35 toUtm8.lat: 32.603520
    test 180 line 35 toUtm8.lon: 67.280123
    test 181 line 36 toUtm8.easting: 1515136.758292
    test 182 line 36 toUtm8.northing: 3858996.087537
    test 183 line 36 toUtm8.convergence: 9.225127
    test 184 line 36 toUtm8.scale: 1.028029
    test 185 line 36 toUtm8.lat: 33.776224
    test 186 line 36 toUtm8.lon: 16.280993
    test 187 line 37 toUtm8.easting: 479854.373445
    test 188 line 37 toUtm8.northing: 8980501.389896
    test 189 line 37 toUtm8.convergence: 25.021222
    test 190 line 37 toUtm8.scale: 1.002415
    test 191 line 37 toUtm8.lat: 79.932747
    test 192 line 37 toUtm8.lon: 25.363622
    test 193 line 38 toUtm8.easting: 5243446.564940
    test 194 line 38 toUtm8.northing: 140657.213960
    test 195 line 38 toUtm8.convergence: 0.862817
    test 196 line 38 toUtm8.scale: 1.360358
    test 197 line 38 toUtm8.lat: 0.935056
    test 198 line 38 toUtm8.lon: 42.538824
    test skipped (6): line 39 toUtm8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtm8.easting: 1202993.459158
    test 200 line 40 toUtm8.northing: 5557316.053599
    test 201 line 40 toUtm8.convergence: 12.579061
    test 202 line 40 toUtm8.scale: 1.017426
    test 203 line 40 toUtm8.lat: 48.979057
    test 204 line 40 toUtm8.lon: 16.474542
    test 205 line 41 toUtm8.easting: 1729088.710196
    test 206 line 41 toUtm8.northing: 7770874.289954
    test 207 line 41 toUtm8.convergence: 36.021783
    test 208 line 41 toUtm8.scale: 1.036397
    test 209 line 41 toUtm8.lat: 65.036016
    test 210 line 41 toUtm8.lon: 38.729091
    test 211 line 42 toUtm8.easting: 2437301.517425
    test 212 line 42 toUtm8.northing: 5539327.748318
    test 213 line 42 toUtm8.convergence: 23.461879
    test 214 line 42 toUtm8.scale: 1.073459
    test 215 line 42 toUtm8.lat: 45.510091
    test 216 line 42 toUtm8.lon: 31.303729
    test 217 line 43 toUtm8.easting: 3647186.135066
    test 218 line 43 toUtm8.northing: 2086412.330983
    test 219 line 43 toUtm8.convergence: 10.023991
    test 220 line 43 toUtm8.scale: 1.168707
    test 221 line 43 toUtm8.lat: 16.058010
    test 222 line 43 toUtm8.lon: 32.520026
    test 223 line 44 toUtm8.easting: 1818497.243556
    test 224 line 44 toUtm8.northing: 4275471.745057
    test 225 line 44 toUtm8.convergence: 12.499656
    test 226 line 44 toUtm8.scale: 1.040604
    test 227 line 44 toUtm8.lat: 36.845200
    test 228 line 44 toUtm8.lon: 20.282283
    test 229 line 45 toUtm8.easting: 3751304.113783
    test 230 line 45 toUtm8.northing: 5130454.001592
    test 231 line 45 toUtm8.convergence: 28.959707
    test 232 line 45 toUtm8.scale: 1.177681
    test 233 line 45 toUtm8.lat: 37.865481
    test 234 line 45 toUtm8.lon: 41.990402
    test 235 line 46 toUtm8.easting: 2616733.138544
    test 236 line 46 toUtm8.northing: 394644.463815
    test 237 line 46 toUtm8.convergence: 1.390425
    test 238 line 46 toUtm8.scale: 1.085595
    test 239 line 46 toUtm8.lat: 3.287272
    test 240 line 46 toUtm8.lon: 22.917604
    test 241 line 47 toUtm8.easting: 1756506.573942
    test 242 line 47 toUtm8.northing: 5570393.986394
    test 243 line 47 toUtm8.convergence: 17.897894
    test 244 line 47 toUtm8.scale: 1.037732
    test 245 line 47 toUtm8.lat: 47.813686
    test 246 line 47 toUtm8.lon: 23.545092
    test 247 line 48 toUtm8.easting: 8752461.894711
    test 248 line 48 toUtm8.northing: 6087728.152284
    test 249 line 48 toUtm8.convergence: 51.628465
    test 250 line 48 toUtm8.scale: 2.095465
    test 251 line 48 toUtm8.lat: 22.836853
    test 252 line 48 toUtm8.lon: 72.604385
    test 253 line 49 toUtm8.easting: 1309272.216432
    test 254 line 49 toUtm8.northing: 59520.028899
    test 255 line 49 toUtm8.convergence: 0.109069
    test 256 line 49 toUtm8.scale: 1.020897
    test 257 line 49 toUtm8.lat: 0.527262
    test 258 line 49 toUtm8.lon: 11.684209
    test 259 line 50 toUtm8.easting: 328652.277129
    test 260 line 50 toUtm8.northing: 2233043.958874
    test 261 line 50 toUtm8.convergence: 1.084863
    test 262 line 50 toUtm8.scale: 1.000935
    test 263 line 50 toUtm8.lat: 20.166742
    test 264 line 50 toUtm8.lon: 3.143948
    test skipped (7): line 51 toUtm8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'
    test skipped (8): line 52 toUtm8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtm8.easting: 796987.281104
    test 266 line 53 toUtm8.northing: 7677446.357675
    test 267 line 53 toUtm8.convergence: 18.084472
    test 268 line 53 toUtm8.scale: 1.007381
    test 269 line 53 toUtm8.lat: 68.071020
    test 270 line 53 toUtm8.lon: 19.392823
    test skipped (9): line 54 toUtm8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtm8.easting: 7087225.330906
    test 272 line 55 toUtm8.northing: 8382823.855822
    test 273 line 55 toUtm8.convergence: 72.253756
    test 274 line 55 toUtm8.scale: 1.678070
    test 275 line 55 toUtm8.lat: 35.074753
    test 276 line 55 toUtm8.lon: 79.496003
    test 277 line 56 toUtm8.easting: 5090358.125724
    test 278 line 56 toUtm8.northing: 4318294.133489
    test 279 line 56 toUtm8.convergence: 28.266280
    test 280 line 56 toUtm8.scale: 1.336264
    test 281 line 56 toUtm8.lat: 28.078790
    test 282 line 56 toUtm8.lon: 48.684350
    test skipped (10): line 57 toUtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtm8.easting: 3447670.550785
    test 284 line 58 toUtm8.northing: 3680238.888223
    test 285 line 58 toUtm8.convergence: 17.934948
    test 286 line 58 toUtm8.scale: 1.149831
    test 287 line 58 toUtm8.lat: 28.473948
    test 288 line 58 toUtm8.lon: 34.127306
    test 289 line 59 toUtm8.easting: 3396522.906798
    test 290 line 59 toUtm8.northing: 8093659.687593
    test 291 line 59 toUtm8.convergence: 57.747117
    test 292 line 59 toUtm8.scale: 1.144006
    test 293 line 59 toUtm8.lat: 56.629354
    test 294 line 59 toUtm8.lon: 62.196474
    test 295 line 60 toUtm8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtm8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtm8.convergence: 14.210358
    test 298 line 60 toUtm8.scale: 3.048347
    test 299 line 60 toUtm8.lat: 4.747762
    test 300 line 60 toUtm8.lon: 70.932555
    test 301 line 61 toUtm8.easting: 6808805.230950
    test 302 line 61 toUtm8.northing: 8044779.777369
    test 303 line 61 toUtm8.convergence: 68.242008
    test 304 line 61 toUtm8.scale: 1.621464
    test 305 line 61 toUtm8.lat: 35.882113
    test 306 line 61 toUtm8.lon: 76.741849
    test 307 line 62 toUtm8.easting: 2306021.556506
    test 308 line 62 toUtm8.northing: 757191.592866
    test 309 line 62 toUtm8.convergence: 2.385686
    test 310 line 62 toUtm8.scale: 1.066159
    test 311 line 62 toUtm8.lat: 6.420705
    test 312 line 62 toUtm8.lon: 20.416028
    test 313 line 63 toUtm8.easting: 1547406.313862
    test 314 line 63 toUtm8.northing: 6048712.751824
    test 315 line 63 toUtm8.convergence: 18.474372
    test 316 line 63 toUtm8.scale: 1.029123
    test 317 line 63 toUtm8.lat: 52.335248
    test 318 line 63 toUtm8.lon: 22.879294
    test 319 line 64 toUtm8.easting: 2430467.650383
    test 320 line 64 toUtm8.northing: 7557167.613972
    test 321 line 64 toUtm8.convergence: 42.110021
    test 322 line 64 toUtm8.scale: 1.072759
    test 323 line 64 toUtm8.lat: 59.846391
    test 324 line 64 toUtm8.lon: 46.262536
    test 325 line 65 toUtm8.easting: 2334053.905830
    test 326 line 65 toUtm8.northing: 1948076.966582
    test 327 line 65 toUtm8.convergence: 6.353185
    test 328 line 65 toUtm8.scale: 1.067733
    test 329 line 65 toUtm8.lat: 16.461790
    test 330 line 65 toUtm8.lon: 21.433269
    test 331 line 66 toUtm8.easting: 5564175.186737
    test 332 line 66 toUtm8.northing: 1836851.660412
    test 333 line 66 toUtm8.convergence: 11.870682
    test 334 line 66 toUtm8.scale: 1.408265
    test 335 line 66 toUtm8.lat: 11.707905
    test 336 line 66 toUtm8.lon: 45.827075
    test 337 line 67 toUtm8.easting: 6118505.590359
    test 338 line 67 toUtm8.northing: 7631684.552421
    test 339 line 67 toUtm8.convergence: 62.477323
    test 340 line 67 toUtm8.scale: 1.493420
    test 341 line 67 toUtm8.lat: 38.519075
    test 342 line 67 toUtm8.lon: 71.935918
    test skipped (11): line 68 toUtm8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtm8.easting: 36187.342415
    test 344 line 69 toUtm8.northing: 2142565.324802
    test 345 line 69 toUtm8.convergence: 0.114334
    test 346 line 69 toUtm8.scale: 0.999616
    test 347 line 69 toUtm8.lat: 19.376880
    test 348 line 69 toUtm8.lon: 0.344605
    test 349 line 70 toUtm8.easting: 2380328.546851
    test 350 line 70 toUtm8.northing: 8440109.872384
    test 351 line 70 toUtm8.convergence: 55.076067
    test 352 line 70 toUtm8.scale: 1.069658
    test 353 line 70 toUtm8.lat: 65.075805
    test 354 line 70 toUtm8.lon: 57.653438
    test 355 line 71 toUtm8.easting: 582511.608826
    test 356 line 71 toUtm8.northing: 8876047.217071
    test 357 line 71 toUtm8.convergence: 27.133300
    test 358 line 71 toUtm8.scale: 1.003749
    test 359 line 71 toUtm8.lat: 78.691870
    test 360 line 71 toUtm8.lon: 27.591736
    test 361 line 72 toUtm8.easting: 899441.350477
    test 362 line 72 toUtm8.northing: 4582046.430516
    test 363 line 72 toUtm8.convergence: 7.031211
    test 364 line 72 toUtm8.scale: 1.009573
    test 365 line 72 toUtm8.lat: 40.893022
    test 366 line 72 toUtm8.lon: 10.668804
    test skipped (12): line 73 toUtm8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtm8.easting: 6701004.587204
    test 368 line 74 toUtm8.northing: 2954368.258231
    test 369 line 74 toUtm8.convergence: 21.560153
    test 370 line 74 toUtm8.scale: 1.608554
    test 371 line 74 toUtm8.lat: 16.208377
    test 372 line 74 toUtm8.lon: 54.494282
    test 373 line 75 toUtm8.easting: 454986.218897
    test 374 line 75 toUtm8.northing: 4885087.887884
    test 375 line 75 toUtm8.convergence: 3.945648
    test 376 line 75 toUtm8.scale: 1.002147
    test 377 line 75 toUtm8.lat: 43.977936
    test 378 line 75 toUtm8.lon: 5.672541
    test skipped (13): line 76 toUtm8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtm8.easting: 1547627.594741
    test 380 line 77 toUtm8.northing: 6036584.538347
    test 381 line 77 toUtm8.convergence: 18.407629
    test 382 line 77 toUtm8.scale: 1.029132
    test 383 line 77 toUtm8.lat: 52.234165
    test 384 line 77 toUtm8.lon: 22.827655
    test 385 line 78 toUtm8.easting: 5221488.778597
    test 386 line 78 toUtm8.northing: 1762592.044392
    test 387 line 78 toUtm8.convergence: 10.927880
    test 388 line 78 toUtm8.scale: 1.356721
    test 389 line 78 toUtm8.lat: 11.674646
    test 390 line 78 toUtm8.lon: 43.500147
    test 391 line 79 toUtm8.easting: 4880570.297161
    test 392 line 79 toUtm8.northing: 3325433.988867
    test 393 line 79 toUtm8.convergence: 20.469862
    test 394 line 79 toUtm8.scale: 1.308476
    test 395 line 79 toUtm8.lat: 22.492753
    test 396 line 79 toUtm8.lon: 44.179153
    test skipped (14): line 80 toUtm8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtm8.easting: 71519.450458
    test 398 line 81 toUtm8.northing: 3654740.444852
    test 399 line 81 toUtm8.convergence: 0.417448
    test 400 line 81 toUtm8.scale: 0.999663
    test 401 line 81 toUtm8.lat: 33.028802
    test 402 line 81 toUtm8.lon: 0.765843
    test 403 line 82 toUtm8.easting: 4152797.795220
    test 404 line 82 toUtm8.northing: 7823098.502751
    test 405 line 82 toUtm8.convergence: 58.238901
    test 406 line 82 toUtm8.scale: 1.218052
    test 407 line 82 toUtm8.lat: 50.649195
    test 408 line 82 toUtm8.lon: 64.389076
    test 409 line 83 toUtm8.easting: 2926725.707639
    test 410 line 83 toUtm8.northing: 7904918.072844
    test 411 line 83 toUtm8.convergence: 51.592748
    test 412 line 83 toUtm8.scale: 1.106206
    test 413 line 83 toUtm8.lat: 58.820640
    test 414 line 83 toUtm8.lon: 55.841048
    test 415 line 84 toUtm8.easting: 1325509.113869
    test 416 line 84 toUtm8.northing: 9675214.948213
    test 417 line 84 toUtm8.convergence: 76.116213
    test 418 line 84 toUtm8.scale: 1.021136
    test 419 line 84 toUtm8.lat: 77.865762
    test 420 line 84 toUtm8.lon: 76.414618
    test 421 line 85 toUtm8.easting: 3045296.448926
    test 422 line 85 toUtm8.northing: 542153.443280
    test 423 line 85 toUtm8.convergence: 2.185095
    test 424 line 85 toUtm8.scale: 1.116664
    test 425 line 85 toUtm8.lat: 4.389639
    test 426 line 85 toUtm8.lon: 26.458976
    test 427 line 86 toUtm8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtm8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtm8.convergence: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtm8.scale: 3.267256
    test 431 line 86 toUtm8.lat: 13.924448
    test 432 line 86 toUtm8.lon: 79.017873
    test 433 line 87 toUtm8.easting: 8891099.704936
    test 434 line 87 toUtm8.northing: 162160.142227
    test 435 line 87 toUtm8.convergence: 1.312094
    test 436 line 87 toUtm8.scale: 2.157363
    test 437 line 87 toUtm8.lat: 0.679713
    test 438 line 87 toUtm8.lon: 62.036792
    test 439 line 88 toUtm8.easting: 4784814.214449
    test 440 line 88 toUtm8.northing: 2984497.432580
    test 441 line 88 toUtm8.convergence: 17.946545
    test 442 line 88 toUtm8.scale: 1.296116
    test 443 line 88 toUtm8.lat: 20.478281
    test 444 line 88 toUtm8.lon: 42.678234
    test 445 line 89 toUtm8.easting: 1772074.682154
    test 446 line 89 toUtm8.northing: 9491552.560143
    test 447 line 89 toUtm8.convergence: 73.634830
    test 448 line 89 toUtm8.scale: 1.038202
    test 449 line 89 toUtm8.lat: 73.695703
    test 450 line 89 toUtm8.lon: 74.259097
    test 451 line 90 toUtm8.easting: 1907649.782106
    test 452 line 90 toUtm8.northing: 6994232.429379
    test 453 line 90 toUtm8.convergence: 29.718929
    test 454 line 90 toUtm8.scale: 1.044503
    test 455 line 90 toUtm8.lat: 58.569370
    test 456 line 90 toUtm8.lon: 33.777549
    test 457 line 91 toUtm8.easting: 2084423.818962
    test 458 line 91 toUtm8.northing: 2211816.035619
    test 459 line 91 toUtm8.convergence: 6.556448
    test 460 line 91 toUtm8.scale: 1.053793
    test 461 line 91 toUtm8.lat: 18.933881
    test 462 line 91 toUtm8.lon: 19.492695
    test 463 line 92 toUtm8.easting: 1064373.671729
    test 464 line 92 toUtm8.northing: 7812482.547461
    test 465 line 92 toUtm8.convergence: 24.874124
    test 466 line 92 toUtm8.scale: 1.013490
    test 467 line 92 toUtm8.lat: 68.317934
    test 468 line 92 toUtm8.lon: 26.515687
    test skipped (15): line 93 toUtm8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtm8.easting: 6398096.677297
    test 470 line 94 toUtm8.northing: 4410894.752104
    test 471 line 94 toUtm8.convergence: 32.558023
    test 472 line 94 toUtm8.scale: 1.548004
    test 473 line 94 toUtm8.lat: 24.411298
    test 474 line 94 toUtm8.lon: 56.881823
    test 475 line 95 toUtm8.easting: 3138623.300415
    test 476 line 95 toUtm8.northing: 3082960.600798
    test 477 line 95 toUtm8.convergence: 13.557672
    test 478 line 95 toUtm8.scale: 1.123724
    test 479 line 95 toUtm8.lat: 24.571871
    test 480 line 95 toUtm8.lon: 30.073097
    test 481 line 96 toUtm8.easting: 2748325.794651
    test 482 line 96 toUtm8.northing: 4202811.912668
    test 483 line 96 toUtm8.convergence: 17.578706
    test 484 line 96 toUtm8.scale: 1.094102
    test 485 line 96 toUtm8.lat: 34.202576
    test 486 line 96 toUtm8.lon: 29.383166
    test 487 line 97 toUtm8.easting: 6677830.630367
    test 488 line 97 toUtm8.northing: 5350071.837395
    test 489 line 97 toUtm8.convergence: 41.306641
    test 490 line 97 toUtm8.scale: 1.599774
    test 491 line 97 toUtm8.lat: 27.756285
    test 492 line 97 toUtm8.lon: 61.881905
    test 493 line 98 toUtm8.easting: 5941536.667431
    test 494 line 98 toUtm8.northing: 3293112.175140
    test 495 line 98 toUtm8.convergence: 22.752845
    test 496 line 98 toUtm8.scale: 1.468473
    test 497 line 98 toUtm8.lat: 19.742270
    test 498 line 98 toUtm8.lon: 50.957821
    test 499 line 99 toUtm8.easting: 3152481.792567
    test 500 line 99 toUtm8.northing: 5903048.837978
    test 501 line 99 toUtm8.convergence: 31.494606
    test 502 line 99 toUtm8.scale: 1.124085
    test 503 line 99 toUtm8.lat: 45.453582
    test 504 line 99 toUtm8.lon: 40.659833
    test 505 line 100 toUtm8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtm8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtm8.convergence: 21.965869
    test 508 line 100 toUtm8.scale: 2.700296
    test 509 line 100 toUtm8.lat: 8.322144
    test 510 line 100 toUtm8.lon: 69.488157
    test 511 line 101 toUtm8.easting: 1964010.778021
    test 512 line 101 toUtm8.northing: 5634042.923056
    test 513 line 101 toUtm8.convergence: 20.117800
    test 514 line 101 toUtm8.scale: 1.047344
    test 515 line 101 toUtm8.lat: 47.749831
    test 516 line 101 toUtm8.lon: 26.322002
    test 517 line 102 toUtm8.easting: 2065306.424934
    test 518 line 102 toUtm8.northing: 2135008.468651
    test 519 line 102 toUtm8.convergence: 6.258981
    test 520 line 102 toUtm8.scale: 1.052800
    test 521 line 102 toUtm8.lat: 18.297493
    test 522 line 102 toUtm8.lon: 19.244669
    test 523 line 103 toUtm8.easting: 5127738.132976
    test 524 line 103 toUtm8.northing: 6793804.304411
    test 525 line 103 toUtm8.convergence: 50.557915
    test 526 line 103 toUtm8.scale: 1.339412
    test 527 line 103 toUtm8.lat: 40.834541
    test 528 line 103 toUtm8.lon: 61.650750
    test 529 line 104 toUtm8.easting: 8385525.148166
    test 530 line 104 toUtm8.northing: 6924932.344306
    test 531 line 104 toUtm8.convergence: 59.087561
    test 532 line 104 toUtm8.scale: 1.990364
    test 533 line 104 toUtm8.lat: 26.273247
    test 534 line 104 toUtm8.lon: 74.926694
    test 535 line 105 toUtm8.easting: 2297510.791909
    test 536 line 105 toUtm8.northing: 2805666.962834
    test 537 line 105 toUtm8.convergence: 9.301553
    test 538 line 105 toUtm8.scale: 1.065508
    test 539 line 105 toUtm8.lat: 23.698347
    test 540 line 105 toUtm8.lon: 22.155657
    test skipped (16): line 106 toUtm8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtm8.easting: 317518.455546
    test 542 line 107 toUtm8.northing: 1097517.583745
    test 543 line 107 toUtm8.convergence: 0.499004
    test 544 line 107 toUtm8.scale: 1.000848
    test 545 line 107 toUtm8.lat: 9.916091
    test 546 line 107 toUtm8.lon: 2.895277
    test 547 line 108 toUtm8.easting: 3856035.184888
    test 548 line 108 toUtm8.northing: 9141364.450290
    test 549 line 108 toUtm8.convergence: 75.972763
    test 550 line 108 toUtm8.scale: 1.186786
    test 551 line 108 toUtm8.lat: 56.553876
    test 552 line 108 toUtm8.lon: 78.215077
    test 553 line 109 toUtm8.easting: 1457484.942823
    test 554 line 109 toUtm8.northing: 9385297.101973
    test 555 line 109 toUtm8.convergence: 66.784662
    test 556 line 109 toUtm8.scale: 1.025660
    test 557 line 109 toUtm8.lat: 75.957631
    test 558 line 109 toUtm8.lon: 67.407383
    test 559 line 110 toUtm8.easting: 1304934.901841
    test 560 line 110 toUtm8.northing: 3604655.155715
    test 561 line 110 toUtm8.convergence: 7.343989
    test 562 line 110 toUtm8.scale: 1.020672
    test 563 line 110 toUtm8.lat: 31.826531
    test 564 line 110 toUtm8.lon: 13.731050
    test 565 line 111 toUtm8.easting: 1399093.491792
    test 566 line 111 toUtm8.northing: 8314607.120342
    test 567 line 111 toUtm8.convergence: 38.630161
    test 568 line 111 toUtm8.scale: 1.023625
    test 569 line 111 toUtm8.lat: 70.542985
    test 570 line 111 toUtm8.lon: 40.282055
    test 571 line 112 toUtm8.easting: 356983.618540
    test 572 line 112 toUtm8.northing: 4282309.048994
    test 573 line 112 toUtm8.convergence: 2.561485
    test 574 line 112 toUtm8.scale: 1.001170
    test 575 line 112 toUtm8.lat: 38.617487
    test 576 line 112 toUtm8.lon: 4.099838
    test 577 line 113 toUtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtm8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtm8.convergence: 12.752154
    test 580 line 113 toUtm8.scale: 2.511357
    test 581 line 113 toUtm8.lat: 5.389447
    test 582 line 113 toUtm8.lon: 66.729612
    test 583 line 114 toUtm8.easting: 6367592.504007
    test 584 line 114 toUtm8.northing: 1200437.077672
    test 585 line 114 toUtm8.convergence: 8.338041
    test 586 line 114 toUtm8.scale: 1.546210
    test 587 line 114 toUtm8.lat: 6.995168
    test 588 line 114 toUtm8.lon: 50.014763
    test 589 line 115 toUtm8.easting: 4391263.676460
    test 590 line 115 toUtm8.northing: 6325455.989408
    test 591 line 115 toUtm8.convergence: 42.653541
    test 592 line 115 toUtm8.scale: 1.245560
    test 593 line 115 toUtm8.lat: 42.321894
    test 594 line 115 toUtm8.lon: 53.784040
    test 595 line 116 toUtm8.easting: 6209880.527527
    test 596 line 116 toUtm8.northing: 2154754.449747
    test 597 line 116 toUtm8.convergence: 14.919512
    test 598 line 116 toUtm8.scale: 1.516560
    test 599 line 116 toUtm8.lat: 12.698515
    test 600 line 116 toUtm8.lon: 50.242047
    test 601 line 117 toUtm8.easting: 1507053.688772
    test 602 line 117 toUtm8.northing: 6261383.513280
    test 603 line 117 toUtm8.convergence: 19.280373
    test 604 line 117 toUtm8.scale: 1.027584
    test 605 line 117 toUtm8.lat: 54.207636
    test 606 line 117 toUtm8.lon: 23.325731
    test 607 line 118 toUtm8.easting: 8332725.003777
    test 608 line 118 toUtm8.northing: 3002712.329753
    test 609 line 118 toUtm8.convergence: 24.059212
    test 610 line 118 toUtm8.scale: 1.990450
    test 611 line 118 toUtm8.lat: 13.224787
    test 612 line 118 toUtm8.lon: 62.426698
    test 613 line 119 toUtm8.easting: 3958910.085235
    test 614 line 119 toUtm8.northing: 3462284.926102
    test 615 line 119 toUtm8.convergence: 18.546398
    test 616 line 119 toUtm8.scale: 1.199351
    test 617 line 119 toUtm8.lat: 25.650282
    test 618 line 119 toUtm8.lon: 37.710391
    test skipped (17): line 120 toUtm8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtm8.easting: 496148.253731
    test 620 line 121 toUtm8.northing: 6388503.365043
    test 621 line 121 toUtm8.convergence: 6.970955
    test 622 line 121 toUtm8.scale: 1.002620
    test 623 line 121 toUtm8.lat: 57.367533
    test 624 line 121 toUtm8.lon: 8.260866
    test 625 line 122 toUtm8.easting: 7375792.085850
    test 626 line 122 toUtm8.northing: 5544624.072155
    test 627 line 122 toUtm8.convergence: 44.510851
    test 628 line 122 toUtm8.scale: 1.745898
    test 629 line 122 toUtm8.lat: 25.958757
    test 630 line 122 toUtm8.lon: 65.760477
    test 631 line 123 toUtm8.easting: 2826258.041979
    test 632 line 123 toUtm8.northing: 5167759.816959
    test 633 line 123 toUtm8.convergence: 23.783897
    test 634 line 123 toUtm8.scale: 1.099415
    test 635 line 123 toUtm8.lat: 41.395848
    test 636 line 123 toUtm8.lon: 33.661790
    test 637 line 124 toUtm8.easting: 3958563.378851
    test 638 line 124 toUtm8.northing: 8499923.231243
    test 639 line 124 toUtm8.convergence: 66.570945
    test 640 line 124 toUtm8.scale: 1.197296
    test 641 line 124 toUtm8.lat: 54.266617
    test 642 line 124 toUtm8.lon: 70.602199
    test 643 line 125 toUtm8.easting: 4408189.533462
    test 644 line 125 toUtm8.northing: 8046312.003642
    test 645 line 125 toUtm8.convergence: 62.216959
    test 646 line 125 toUtm8.scale: 1.246750
    test 647 line 125 toUtm8.lat: 49.840393
    test 648 line 125 toUtm8.lon: 68.036728
    test 649 line 126 toUtm8.easting: 3629225.627512
    test 650 line 126 toUtm8.northing: 6371258.454645
    test 651 line 126 toUtm8.convergence: 38.881675
    test 652 line 126 toUtm8.scale: 1.165511
    test 653 line 126 toUtm8.lat: 46.306035
    test 654 line 126 toUtm8.lon: 48.085828
    test 655 line 127 toUtm8.easting: 602838.450710
    test 656 line 127 toUtm8.northing: 4851370.637205
    test 657 line 127 toUtm8.convergence: 5.160395
    test 658 line 127 toUtm8.scale: 1.004073
    test 659 line 127 toUtm8.lat: 43.570988
    test 660 line 127 toUtm8.lon: 7.464494
    test 661 line 128 toUtm8.easting: 764616.665051
    test 662 line 128 toUtm8.northing: 2164299.337945
    test 663 line 128 toUtm8.convergence: 2.429300
    test 664 line 128 toUtm8.scale: 1.006835
    test 665 line 128 toUtm8.lat: 19.427290
    test 666 line 128 toUtm8.lon: 7.268247
    test 667 line 129 toUtm8.easting: 5048953.021931
    test 668 line 129 toUtm8.northing: 1885974.057398
    test 669 line 129 toUtm8.convergence: 11.459804
    test 670 line 129 toUtm8.scale: 1.332207
    test 671 line 129 toUtm8.lat: 12.713794
    test 672 line 129 toUtm8.lon: 42.507018
    test 673 line 130 toUtm8.easting: 2293996.601155
    test 674 line 130 toUtm8.northing: 2392408.644221
    test 675 line 130 toUtm8.convergence: 7.791838
    test 676 line 130 toUtm8.scale: 1.065348
    test 677 line 130 toUtm8.lat: 20.238782
    test 678 line 130 toUtm8.lon: 21.566068
    test 679 line 131 toUtm8.easting: 1530603.839418
    test 680 line 131 toUtm8.northing: 7287841.459898
    test 681 line 131 toUtm8.convergence: 27.502921
    test 682 line 131 toUtm8.scale: 1.028416
    test 683 line 131 toUtm8.lat: 62.367847
    test 684 line 131 toUtm8.lon: 30.438849
    test 685 line 132 toUtm8.easting: 2660000.093152
    test 686 line 132 toUtm8.northing: 5161982.213248
    test 687 line 132 toUtm8.convergence: 22.629836
    test 688 line 132 toUtm8.scale: 1.087851
    test 689 line 132 toUtm8.lat: 41.891569
    test 690 line 132 toUtm8.lon: 31.959547
    test 691 line 133 toUtm8.easting: 5037478.329414
    test 692 line 133 toUtm8.northing: 8768172.379908
    test 693 line 133 toUtm8.convergence: 73.511182
    test 694 line 133 toUtm8.scale: 1.325919
    test 695 line 133 toUtm8.lat: 47.664248
    test 696 line 133 toUtm8.lon: 77.630062
    test 697 line 134 toUtm8.easting: 2289650.957799
    test 698 line 134 toUtm8.northing: 8784328.593607
    test 699 line 134 toUtm8.convergence: 60.786067
    test 700 line 134 toUtm8.scale: 1.064346
    test 701 line 134 toUtm8.lat: 67.259559
    test 702 line 134 toUtm8.lon: 62.715293
    test 703 line 135 toUtm8.easting: 647913.889744
    test 704 line 135 toUtm8.northing: 6742382.228217
    test 705 line 135 toUtm8.convergence: 10.252667
    test 706 line 135 toUtm8.scale: 1.004748
    test 707 line 135 toUtm8.lat: 60.295381
    test 708 line 135 toUtm8.lon: 11.763097
    test 709 line 136 toUtm8.easting: 1118372.698566
    test 710 line 136 toUtm8.northing: 9040627.942263
    test 711 line 136 toUtm8.convergence: 48.936803
    test 712 line 136 toUtm8.scale: 1.014920
    test 713 line 136 toUtm8.lat: 76.878914
    test 714 line 136 toUtm8.lon: 49.685773
    test 715 line 137 toUtm8.easting: 440696.510070
    test 716 line 137 toUtm8.northing: 5500355.826297
    test 717 line 137 toUtm8.convergence: 4.636104
    test 718 line 137 toUtm8.scale: 1.001986
    test 719 line 137 toUtm8.lat: 49.495349
    test 720 line 137 toUtm8.lon: 6.087551
    test 721 line 138 toUtm8.easting: 601728.149727
    test 722 line 138 toUtm8.northing: 9095352.048149
    test 723 line 138 toUtm8.convergence: 33.435771
    test 724 line 138 toUtm8.scale: 1.004027
    test 725 line 138 toUtm8.lat: 80.297265
    test 726 line 138 toUtm8.lon: 33.816372
    test 727 line 139 toUtm8.easting: 3481444.777827
    test 728 line 139 toUtm8.northing: 291665.708749
    test 729 line 139 toUtm8.convergence: 1.314726
    test 730 line 139 toUtm8.scale: 1.153534
    test 731 line 139 toUtm8.lat: 2.286437
    test 732 line 139 toUtm8.lon: 29.855149
    test 733 line 140 toUtm8.easting: 3515304.901524
    test 734 line 140 toUtm8.northing: 1443981.882918
    test 735 line 140 toUtm8.convergence: 6.641638
    test 736 line 140 toUtm8.scale: 1.156509
    test 737 line 140 toUtm8.lat: 11.264457
    test 738 line 140 toUtm8.lon: 30.743907
    test 739 line 141 toUtm8.easting: 160012.186959
    test 740 line 141 toUtm8.northing: 3922609.253231
    test 741 line 141 toUtm8.convergence: 1.022225
    test 742 line 141 toUtm8.scale: 0.999916
    test 743 line 141 toUtm8.lat: 35.434073
    test 744 line 141 toUtm8.lon: 1.762795
    test 745 line 142 toUtm8.easting: 4163744.245622
    test 746 line 142 toUtm8.northing: 936884.674804
    test 747 line 142 toUtm8.convergence: 4.892559
    test 748 line 142 toUtm8.scale: 1.222164
    test 749 line 142 toUtm8.lat: 6.923695
    test 750 line 142 toUtm8.lon: 35.289456
    test 751 line 143 toUtm8.easting: 6155200.017926
    test 752 line 143 toUtm8.northing: 6926306.628390
    test 753 line 143 toUtm8.convergence: 55.103258
    test 754 line 143 toUtm8.scale: 1.500556
    test 755 line 143 toUtm8.lat: 36.129672
    test 756 line 143 toUtm8.lon: 67.533176
    test skipped (18): line 144 toUtm8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'
    test skipped (19): line 145 toUtm8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtm8.easting: 3173034.802372
    test 758 line 146 toUtm8.northing: 7263421.942957
    test 759 line 146 toUtm8.convergence: 45.215808
    test 760 line 146 toUtm8.scale: 1.125410
    test 761 line 146 toUtm8.lat: 53.907276
    test 762 line 146 toUtm8.lon: 51.252904
    test skipped (20): line 147 toUtm8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtm8.easting: 2415561.483230
    test 764 line 148 toUtm8.northing: 8813225.217097
    test 765 line 148 toUtm8.convergence: 62.548978
    test 766 line 148 toUtm8.scale: 1.071748
    test 767 line 148 toUtm8.lat: 66.444100
    test 768 line 148 toUtm8.lon: 64.532960
    test 769 line 149 toUtm8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtm8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtm8.convergence: 14.838483
    test 772 line 149 toUtm8.scale: 2.380716
    test 773 line 149 toUtm8.lat: 6.670965
    test 774 line 149 toUtm8.lon: 65.660408
    test 775 line 150 toUtm8.easting: 727939.438391
    test 776 line 150 toUtm8.northing: 3684363.236810
    test 777 line 150 toUtm8.convergence: 4.266227
    test 778 line 150 toUtm8.scale: 1.006140
    test 779 line 150 toUtm8.lat: 33.054057
    test 780 line 150 toUtm8.lon: 7.787458
    test 781 line 151 toUtm8.easting: 1250765.991085
    test 782 line 151 toUtm8.northing: 792869.242719
    test 783 line 151 toUtm8.convergence: 1.396497
    test 784 line 151 toUtm8.scale: 1.019026
    test 785 line 151 toUtm8.lat: 7.035525
    test 786 line 151 toUtm8.lon: 11.253707
    test 787 line 152 toUtm8.easting: 710421.705887
    test 788 line 152 toUtm8.northing: 5019406.075928
    test 789 line 152 toUtm8.convergence: 6.393949
    test 790 line 152 toUtm8.scale: 1.005812
    test 791 line 152 toUtm8.lat: 44.971340
    test 792 line 152 toUtm8.lon: 9.009304
    test 793 line 153 toUtm8.easting: 4600995.074643
    test 794 line 153 toUtm8.northing: 4505712.084593
    test 795 line 153 toUtm8.convergence: 27.997458
    test 796 line 153 toUtm8.scale: 1.271841
    test 797 line 153 toUtm8.lat: 30.821397
    test 798 line 153 toUtm8.lon: 45.970577
    test 799 line 154 toUtm8.easting: 557642.627782
    test 800 line 154 toUtm8.northing: 7006911.251644
    test 801 line 154 toUtm8.convergence: 9.769903
    test 802 line 154 toUtm8.scale: 1.003411
    test 803 line 154 toUtm8.lat: 62.763886
    test 804 line 154 toUtm8.lon: 10.960144
    test 805 line 155 toUtm8.easting: 4635062.294291
    test 806 line 155 toUtm8.northing: 2702556.153311
    test 807 line 155 toUtm8.convergence: 15.779547
    test 808 line 155 toUtm8.scale: 1.277178
    test 809 line 155 toUtm8.lat: 18.888611
    test 810 line 155 toUtm8.lon: 41.009871
    test skipped (21): line 156 toUtm8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtm8.easting: 882126.661736
    test 812 line 157 toUtm8.northing: 7947612.369506
    test 813 line 157 toUtm8.convergence: 22.429487
    test 814 line 157 toUtm8.scale: 1.009132
    test 815 line 157 toUtm8.lat: 70.063902
    test 816 line 157 toUtm8.lon: 23.705255
    test skipped (22): line 158 toUtm8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtm8.easting: 6500508.399850
    test 818 line 159 toUtm8.northing: 6956476.342368
    test 819 line 159 toUtm8.convergence: 56.237116
    test 820 line 159 toUtm8.scale: 1.563162
    test 821 line 159 toUtm8.lat: 34.551257
    test 822 line 159 toUtm8.lon: 69.111091
    test 823 line 160 toUtm8.easting: 3884036.641314
    test 824 line 160 toUtm8.northing: 6890167.411733
    test 825 line 160 toUtm8.convergence: 45.760130
    test 826 line 160 toUtm8.scale: 1.190167
    test 827 line 160 toUtm8.lat: 47.929051
    test 828 line 160 toUtm8.lon: 54.103418
    test 829 line 161 toUtm8.easting: 217855.546078
    test 830 line 161 toUtm8.northing: 6184108.122568
    test 831 line 161 toUtm8.convergence: 2.870993
    test 832 line 161 toUtm8.scale: 1.000182
    test 833 line 161 toUtm8.lat: 55.753536
    test 834 line 161 toUtm8.lon: 3.471798
    test skipped (23): line 162 toUtm8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtm8.easting: 3469855.989805
    test 836 line 163 toUtm8.northing: 7723193.799228
    test 837 line 163 toUtm8.convergence: 53.114700
    test 838 line 163 toUtm8.scale: 1.150540
    test 839 line 163 toUtm8.lat: 54.510125
    test 840 line 163 toUtm8.lon: 58.556056
    test skipped (24): line 164 toUtm8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtm8.easting: 5798639.662224
    test 842 line 165 toUtm8.northing: 5305387.640916
    test 843 line 165 toUtm8.convergence: 38.617257
    test 844 line 165 toUtm8.scale: 1.442263
    test 845 line 165 toUtm8.lat: 30.911943
    test 846 line 165 toUtm8.lon: 57.114102
    test 847 line 166 toUtm8.easting: 9464.934388
    test 848 line 166 toUtm8.northing: 6489121.624944
    test 849 line 166 toUtm8.convergence: 0.138696
    test 850 line 166 toUtm8.scale: 0.999601
    test 851 line 166 toUtm8.lat: 58.542493
    test 852 line 166 toUtm8.lon: 0.162593
    test skipped (25): line 167 toUtm8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtm8.easting: 2719653.543469
    test 854 line 168 toUtm8.northing: 9362389.163495
    test 855 line 168 toUtm8.convergence: 76.049670
    test 856 line 168 toUtm8.scale: 1.091315
    test 857 line 168 toUtm8.lat: 65.692275
    test 858 line 168 toUtm8.lon: 77.241377
    test 859 line 169 toUtm8.easting: 4845341.924698
    test 860 line 169 toUtm8.northing: 8710522.326901
    test 861 line 169 toUtm8.convergence: 72.320942
    test 862 line 169 toUtm8.scale: 1.300382
    test 863 line 169 toUtm8.lat: 48.806211
    test 864 line 169 toUtm8.lon: 76.486365
    test skipped (26): line 170 toUtm8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtm8.easting: 7074299.823000
    test 866 line 171 toUtm8.northing: 1648736.065055
    test 867 line 171 toUtm8.convergence: 12.145925
    test 868 line 171 toUtm8.scale: 1.687551
    test 869 line 171 toUtm8.lat: 8.766053
    test 870 line 171 toUtm8.lon: 54.367539
    test 871 line 172 toUtm8.easting: 3689072.579308
    test 872 line 172 toUtm8.northing: 2230802.665211
    test 873 line 172 toUtm8.convergence: 10.856248
    test 874 line 172 toUtm8.scale: 1.172689
    test 875 line 172 toUtm8.lat: 17.095495
    test 876 line 172 toUtm8.lon: 33.059128
    test 877 line 173 toUtm8.easting: 8102565.885587
    test 878 line 173 toUtm8.northing: 5167396.617580
    test 879 line 173 toUtm8.convergence: 42.324886
    test 880 line 173 toUtm8.scale: 1.921927
    test 881 line 173 toUtm8.lat: 22.142861
    test 882 line 173 toUtm8.lon: 67.200684
    test 883 line 174 toUtm8.easting: 8181271.353564
    test 884 line 174 toUtm8.northing: 4425436.547185
    test 885 line 174 toUtm8.convergence: 35.900845
    test 886 line 174 toUtm8.scale: 1.945017
    test 887 line 174 toUtm8.lat: 19.222623
    test 888 line 174 toUtm8.lon: 65.180785
    test 889 line 175 toUtm8.easting: 767067.394003
    test 890 line 175 toUtm8.northing: 3701745.857296
    test 891 line 175 toUtm8.convergence: 4.519201
    test 892 line 175 toUtm8.scale: 1.006863
    test 893 line 175 toUtm8.lat: 33.182474
    test 894 line 175 toUtm8.lon: 8.216952
    test 895 line 176 toUtm8.easting: 6688114.168572
    test 896 line 176 toUtm8.northing: 2052857.299639
    test 897 line 176 toUtm8.convergence: 14.766191
    test 898 line 176 toUtm8.scale: 1.607200
    test 899 line 176 toUtm8.lat: 11.417963
    test 900 line 176 toUtm8.lon: 52.808691
    test 901 line 177 toUtm8.easting: 5608408.773761
    test 902 line 177 toUtm8.northing: 3859055.659110
    test 903 line 177 toUtm8.convergence: 26.244151
    test 904 line 177 toUtm8.scale: 1.413463
    test 905 line 177 toUtm8.lat: 23.836688
    test 906 line 177 toUtm8.lon: 50.500180
    test 907 line 178 toUtm8.easting: 3836942.765275
    test 908 line 178 toUtm8.northing: 6415467.634326
    test 909 line 178 toUtm8.convergence: 40.575885
    test 910 line 178 toUtm8.scale: 1.185615
    test 911 line 178 toUtm8.lat: 45.550020
    test 912 line 178 toUtm8.lon: 50.148036
    test 913 line 179 toUtm8.easting: 1298730.366025
    test 914 line 179 toUtm8.northing: 6021453.000792
    test 915 line 179 toUtm8.convergence: 15.613320
    test 916 line 179 toUtm8.scale: 1.020367
    test 917 line 179 toUtm8.lat: 52.746079
    test 918 line 179 toUtm8.lon: 19.343926
    test 919 line 180 toUtm8.easting: 416934.289208
    test 920 line 180 toUtm8.northing: 7295683.451705
    test 921 line 180 toUtm8.convergence: 8.238232
    test 922 line 180 toUtm8.scale: 1.001729
    test 923 line 180 toUtm8.lat: 65.513348
    test 924 line 180 toUtm8.lon: 9.039529
    test 925 line 181 toUtm8.easting: 4336076.850889
    test 926 line 181 toUtm8.northing: 7617975.722779
    test 927 line 181 toUtm8.convergence: 56.537088
    test 928 line 181 toUtm8.scale: 1.238582
    test 929 line 181 toUtm8.lat: 48.709795
    test 930 line 181 toUtm8.lon: 63.554005
    test 931 line 182 toUtm8.easting: 168047.336980
    test 932 line 182 toUtm8.northing: 2185000.046530
    test 933 line 182 toUtm8.convergence: 0.542187
    test 934 line 182 toUtm8.scale: 0.999949
    test 935 line 182 toUtm8.lat: 19.753509
    test 936 line 182 toUtm8.lon: 1.603846
    test 937 line 183 toUtm8.easting: 8276281.328790
    test 938 line 183 toUtm8.northing: 263444.350545
    test 939 line 183 toUtm8.convergence: 2.071435
    test 940 line 183 toUtm8.scale: 1.980314
    test 941 line 183 toUtm8.lat: 1.202816
    test 942 line 183 toUtm8.lon: 59.377276
    test 943 line 184 toUtm8.easting: 4772573.810710
    test 944 line 184 toUtm8.northing: 6765710.336002
    test 945 line 184 toUtm8.convergence: 48.857561
    test 946 line 184 toUtm8.scale: 1.291911
    test 947 line 184 toUtm8.lat: 42.564975
    test 948 line 184 toUtm8.lon: 59.356947
    test 949 line 185 toUtm8.easting: 5427755.074639
    test 950 line 185 toUtm8.northing: 1556055.820924
    test 951 line 185 toUtm8.convergence: 9.862178
    test 952 line 185 toUtm8.scale: 1.387394
    test 953 line 185 toUtm8.lat: 10.090572
    test 954 line 185 toUtm8.lon: 44.604132
    test 955 line 186 toUtm8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtm8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtm8.convergence: 50.784827
    test 958 line 186 toUtm8.scale: 3.149567
    test 959 line 186 toUtm8.lat: 14.133028
    test 960 line 186 toUtm8.lon: 78.097533
    test 961 line 187 toUtm8.easting: 7152433.802688
    test 962 line 187 toUtm8.northing: 761390.695844
    test 963 line 187 toUtm8.convergence: 5.607350
    test 964 line 187 toUtm8.scale: 1.705261
    test 965 line 187 toUtm8.lat: 4.031123
    test 966 line 187 toUtm8.lon: 54.048782
    test 967 line 188 toUtm8.easting: 3105651.390901
    test 968 line 188 toUtm8.northing: 9426026.169064
    test 969 line 188 toUtm8.convergence: 78.750206
    test 970 line 188 toUtm8.scale: 1.119737
    test 971 line 188 toUtm8.lat: 62.746603
    test 972 line 188 toUtm8.lon: 79.968641
    test 973 line 189 toUtm8.easting: 2959009.639022
    test 974 line 189 toUtm8.northing: 8339242.269282
    test 975 line 189 toUtm8.convergence: 58.460865
    test 976 line 189 toUtm8.scale: 1.108554
    test 977 line 189 toUtm8.lat: 60.626429
    test 978 line 189 toUtm8.lon: 61.851551
    test 979 line 190 toUtm8.easting: 8640472.267145
    test 980 line 190 toUtm8.northing: 6230320.417931
    test 981 line 190 toUtm8.convergence: 52.816810
    test 982 line 190 toUtm8.scale: 2.062973
    test 983 line 190 toUtm8.lat: 23.600626
    test 984 line 190 toUtm8.lon: 72.811634
    test 985 line 191 toUtm8.easting: 811352.108932
    test 986 line 191 toUtm8.northing: 9816129.813481
    test 987 line 191 toUtm8.convergence: 77.299184
    test 988 line 191 toUtm8.scale: 1.007651
    test 989 line 191 toUtm8.lat: 82.572236
    test 990 line 191 toUtm8.lon: 77.402323
    test 991 line 192 toUtm8.easting: 6521874.973458
    test 992 line 192 toUtm8.northing: 1053612.479744
    test 993 line 192 toUtm8.convergence: 7.407328
    test 994 line 192 toUtm8.scale: 1.575529
    test 995 line 192 toUtm8.lat: 6.030051
    test 996 line 192 toUtm8.lon: 50.783505
    test 997 line 193 toUtm8.easting: 3477983.997875
    test 998 line 193 toUtm8.northing: 5651613.325947
    test 999 line 193 toUtm8.convergence: 31.530673
    test 1000 line 193 toUtm8.scale: 1.151875
    test 1001 line 193 toUtm8.lat: 42.411523
    test 1002 line 193 toUtm8.lon: 42.258009
    test 1003 line 194 toUtm8.easting: 629892.822243
    test 1004 line 194 toUtm8.northing: 3283914.910451
    test 1005 line 194 toUtm8.convergence: 3.210482
    test 1006 line 194 toUtm8.scale: 1.004499
    test 1007 line 194 toUtm8.lat: 29.526120
    test 1008 line 194 toUtm8.lon: 6.493069
    test 1009 line 195 toUtm8.easting: 3381879.687227
    test 1010 line 195 toUtm8.northing: 5103629.325665
    test 1011 line 195 toUtm8.convergence: 26.748108
    test 1012 line 195 toUtm8.scale: 1.143559
    test 1013 line 195 toUtm8.lat: 39.021853
    test 1014 line 195 toUtm8.lon: 38.641779
    test 1015 line 196 toUtm8.easting: 2815986.534177
    test 1016 line 196 toUtm8.northing: 9387029.120718
    test 1017 line 196 toUtm8.convergence: 76.967262
    test 1018 line 196 toUtm8.scale: 1.098032
    test 1019 line 196 toUtm8.lat: 64.971850
    test 1020 line 196 toUtm8.lon: 78.151893
    test 1021 line 197 toUtm8.easting: 3398195.889603
    test 1022 line 197 toUtm8.northing: 9138936.031490
    test 1023 line 197 toUtm8.convergence: 74.477499
    test 1024 line 197 toUtm8.scale: 1.144009
    test 1025 line 197 toUtm8.lat: 59.961819
    test 1026 line 197 toUtm8.lon: 76.473422
    test 1027 line 198 toUtm8.easting: 2421734.754637
    test 1028 line 198 toUtm8.northing: 5002372.094991
    test 1029 line 198 toUtm8.convergence: 20.017082
    test 1030 line 198 toUtm8.scale: 1.072592
    test 1031 line 198 toUtm8.lat: 41.374040
    test 1032 line 198 toUtm8.lon: 28.848343
    test 1033 line 199 toUtm8.easting: 2360869.895525
    test 1034 line 199 toUtm8.northing: 9553298.449536
    test 1035 line 199 toUtm8.convergence: 78.848205
    test 1036 line 199 toUtm8.scale: 1.068453
    test 1037 line 199 toUtm8.lat: 68.946087
    test 1038 line 199 toUtm8.lon: 79.574523
    test skipped (27): line 200 toUtm8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtm8.easting: 1327758.704795
    test 1040 line 201 toUtm8.northing: 2375509.241683
    test 1041 line 201 toUtm8.convergence: 4.617572
    test 1042 line 201 toUtm8.scale: 1.021465
    test 1043 line 201 toUtm8.lat: 21.000252
    test 1044 line 201 toUtm8.lon: 12.697444
    test 1045 line 202 toUtm8.easting: 2070860.327644
    test 1046 line 202 toUtm8.northing: 8604500.719581
    test 1047 line 202 toUtm8.convergence: 54.722761
    test 1048 line 202 toUtm8.scale: 1.052469
    test 1049 line 202 toUtm8.lat: 68.015227
    test 1050 line 202 toUtm8.lon: 56.732419
    test 1051 line 203 toUtm8.easting: 6564776.654864
    test 1052 line 203 toUtm8.northing: 8171207.177379
    test 1053 line 203 toUtm8.convergence: 69.237523
    test 1054 line 203 toUtm8.scale: 1.573894
    test 1055 line 203 toUtm8.lat: 37.423675
    test 1056 line 203 toUtm8.lon: 76.947359
    test 1057 line 204 toUtm8.easting: 592653.553821
    test 1058 line 204 toUtm8.northing: 6125529.810052
    test 1059 line 204 toUtm8.convergence: 7.600785
    test 1060 line 204 toUtm8.scale: 1.003912
    test 1061 line 204 toUtm8.lat: 54.922707
    test 1062 line 204 toUtm8.lon: 9.260818
    test 1063 line 205 toUtm8.easting: 693459.671821
    test 1064 line 205 toUtm8.northing: 6943779.991032
    test 1065 line 205 toUtm8.convergence: 11.787587
    test 1066 line 205 toUtm8.scale: 1.005496
    test 1067 line 205 toUtm8.lat: 61.982810
    test 1068 line 205 toUtm8.lon: 13.299659
    test 1069 line 206 toUtm8.easting: 1838956.187625
    test 1070 line 206 toUtm8.northing: 3511959.612381
    test 1071 line 206 toUtm8.convergence: 9.844313
    test 1072 line 206 toUtm8.scale: 1.041603
    test 1073 line 206 toUtm8.lat: 30.324214
    test 1074 line 206 toUtm8.lon: 18.959769
    test 1075 line 207 toUtm8.easting: 4460690.884597
    test 1076 line 207 toUtm8.northing: 5541873.235403
    test 1077 line 207 toUtm8.convergence: 35.768613
    test 1078 line 207 toUtm8.scale: 1.254179
    test 1079 line 207 toUtm8.lat: 37.629667
    test 1080 line 207 toUtm8.lon: 49.649131
    test 1081 line 208 toUtm8.easting: 2311168.998941
    test 1082 line 208 toUtm8.northing: 9480561.869119
    test 1083 line 208 toUtm8.convergence: 76.828257
    test 1084 line 208 toUtm8.scale: 1.065556
    test 1085 line 208 toUtm8.lat: 69.225574
    test 1086 line 208 toUtm8.lon: 77.656135
    test 1087 line 209 toUtm8.easting: 4111775.114451
    test 1088 line 209 toUtm8.northing: 6509014.348792
    test 1089 line 209 toUtm8.convergence: 43.052130
    test 1090 line 209 toUtm8.scale: 1.214125
    test 1091 line 209 toUtm8.lat: 44.698478
    test 1092 line 209 toUtm8.lon: 52.979304
    test 1093 line 210 toUtm8.easting: 75358.261962
    test 1094 line 210 toUtm8.northing: 7711258.662251
    test 1095 line 210 toUtm8.convergence: 1.806297
    test 1096 line 210 toUtm8.scale: 0.999669
    test 1097 line 210 toUtm8.lat: 69.499594
    test 1098 line 210 toUtm8.lon: 1.928336
    test skipped (28): line 211 toUtm8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtm8.easting: 954378.415174
    test 1100 line 212 toUtm8.northing: 7449110.669807
    test 1101 line 212 toUtm8.convergence: 19.380657
    test 1102 line 212 toUtm8.scale: 1.010768
    test 1103 line 212 toUtm8.lat: 65.699839
    test 1104 line 212 toUtm8.lon: 21.104725
    test 1105 line 213 toUtm8.easting: 720971.793706
    test 1106 line 213 toUtm8.northing: 5265195.121555
    test 1107 line 213 toUtm8.convergence: 7.002995
    test 1108 line 213 toUtm8.scale: 1.005995
    test 1109 line 213 toUtm8.lat: 47.143648
    test 1110 line 213 toUtm8.lon: 9.512189
    test 1111 line 214 toUtm8.easting: 561561.493937
    test 1112 line 214 toUtm8.northing: 989910.236221
    test 1113 line 214 toUtm8.convergence: 0.793118
    test 1114 line 214 toUtm8.scale: 1.003505
    test 1115 line 214 toUtm8.lat: 8.920167
    test 1116 line 214 toUtm8.lon: 5.101513
    test 1117 line 215 toUtm8.easting: 3446829.634468
    test 1118 line 215 toUtm8.northing: 9232868.155664
    test 1119 line 215 toUtm8.convergence: 76.279075
    test 1120 line 215 toUtm8.scale: 1.148263
    test 1121 line 215 toUtm8.lat: 59.778971
    test 1122 line 215 toUtm8.lon: 78.080322
    test skipped (29): line 216 toUtm8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtm8.easting: 8973188.480293
    test 1124 line 217 toUtm8.northing: 7042230.087021
    test 1125 line 217 toUtm8.convergence: 60.872456
    test 1126 line 217 toUtm8.scale: 2.156098
    test 1127 line 217 toUtm8.lat: 24.310973
    test 1128 line 217 toUtm8.lon: 76.823777
    test 1129 line 218 toUtm8.easting: 126314.191618
    test 1130 line 218 toUtm8.northing: 396006.687921
    test 1131 line 218 toUtm8.convergence: 0.071065
    test 1132 line 218 toUtm8.scale: 0.999798
    test 1133 line 218 toUtm8.lat: 3.582041
    test 1134 line 218 toUtm8.lon: 1.137286
    test 1135 line 219 toUtm8.easting: 5247652.345647
    test 1136 line 219 toUtm8.northing: 8670513.359752
    test 1137 line 219 toUtm8.convergence: 72.700498
    test 1138 line 219 toUtm8.scale: 1.355272
    test 1139 line 219 toUtm8.lat: 46.124233
    test 1140 line 219 toUtm8.lon: 77.313118
    test skipped (30): line 220 toUtm8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtm8.easting: 6300112.758236
    test 1142 line 221 toUtm8.northing: 93835.917364
    test 1143 line 221 toUtm8.convergence: 0.644805
    test 1144 line 221 toUtm8.scale: 1.534073
    test 1145 line 221 toUtm8.lat: 0.553171
    test 1146 line 221 toUtm8.lon: 49.117104
    test 1147 line 222 toUtm8.easting: 3894813.593782
    test 1148 line 222 toUtm8.northing: 4833832.341027
    test 1149 line 222 toUtm8.convergence: 27.453298
    test 1150 line 222 toUtm8.scale: 1.192135
    test 1151 line 222 toUtm8.lat: 35.361587
    test 1152 line 222 toUtm8.lon: 41.860599
    test 1153 line 223 toUtm8.easting: 402511.346712
    test 1154 line 223 toUtm8.northing: 3520621.561911
    test 1155 line 223 toUtm8.convergence: 2.238474
    test 1156 line 223 toUtm8.scale: 1.001599
    test 1157 line 223 toUtm8.lat: 31.750314
    test 1158 line 223 toUtm8.lon: 4.248167
    test 1159 line 224 toUtm8.easting: 5357378.503148
    test 1160 line 224 toUtm8.northing: 2772997.602234
    test 1161 line 224 toUtm8.convergence: 17.823560
    test 1162 line 224 toUtm8.scale: 1.376031
    test 1163 line 224 toUtm8.lat: 17.924336
    test 1164 line 224 toUtm8.lon: 46.096402
    test 1165 line 225 toUtm8.easting: 2807553.985866
    test 1166 line 225 toUtm8.northing: 8177847.980275
    test 1167 line 225 toUtm8.convergence: 54.680045
    test 1168 line 225 toUtm8.scale: 1.097531
    test 1169 line 225 toUtm8.lat: 60.931488
    test 1170 line 225 toUtm8.lon: 58.221214
    test skipped (31): line 226 toUtm8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'
    test skipped (32): line 227 toUtm8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtm8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtm8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtm8.convergence: 42.613968
    test 1174 line 228 toUtm8.scale: 3.314412
    test 1175 line 228 toUtm8.lat: 11.709763
    test 1176 line 228 toUtm8.lon: 76.760295
    test 1177 line 229 toUtm8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtm8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtm8.convergence: 33.383025
    test 1180 line 229 toUtm8.scale: 2.724754
    test 1181 line 229 toUtm8.lat: 12.009498
    test 1182 line 229 toUtm8.lon: 71.782351
    test skipped (33): line 230 toUtm8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtm8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtm8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtm8.convergence: 23.145404
    test 1186 line 231 toUtm8.scale: 2.998408
    test 1187 line 231 toUtm8.lat: 7.721128
    test 1188 line 231 toUtm8.lon: 71.662731
    test 1189 line 232 toUtm8.easting: 4411584.447941
    test 1190 line 232 toUtm8.northing: 4956173.694407
    test 1191 line 232 toUtm8.convergence: 30.713919
    test 1192 line 232 toUtm8.scale: 1.248736
    test 1193 line 232 toUtm8.lat: 34.295026
    test 1194 line 232 toUtm8.lon: 46.442191
    test 1195 line 233 toUtm8.easting: 672108.897905
    test 1196 line 233 toUtm8.northing: 4751554.657054
    test 1197 line 233 toUtm8.convergence: 5.569178
    test 1198 line 233 toUtm8.scale: 1.005162
    test 1199 line 233 toUtm8.lat: 42.622496
    test 1200 line 233 toUtm8.lon: 8.193605
    test 1201 line 234 toUtm8.easting: 5022964.290579
    test 1202 line 234 toUtm8.northing: 6860418.199502
    test 1203 line 234 toUtm8.convergence: 50.862230
    test 1204 line 234 toUtm8.scale: 1.324925
    test 1205 line 234 toUtm8.lat: 41.667780
    test 1206 line 234 toUtm8.lon: 61.518288
    test 1207 line 235 toUtm8.easting: 1669655.595207
    test 1208 line 235 toUtm8.northing: 4152086.537021
    test 1209 line 235 toUtm8.convergence: 11.110237
    test 1210 line 235 toUtm8.scale: 1.034138
    test 1211 line 235 toUtm8.lat: 36.060369
    test 1212 line 235 toUtm8.lon: 18.444112
    test 1213 line 236 toUtm8.easting: 6055876.729655
    test 1214 line 236 toUtm8.northing: 4896837.552619
    test 1215 line 236 toUtm8.convergence: 35.799747
    test 1216 line 236 toUtm8.scale: 1.485967
    test 1217 line 236 toUtm8.lat: 27.948091
    test 1218 line 236 toUtm8.lon: 56.816429
    test 1219 line 237 toUtm8.easting: 1209214.164379
    test 1220 line 237 toUtm8.northing: 7266409.859178
    test 1221 line 237 toUtm8.convergence: 22.319633
    test 1222 line 237 toUtm8.scale: 1.017554
    test 1223 line 237 toUtm8.lat: 63.386030
    test 1224 line 237 toUtm8.lon: 24.662716
    test 1225 line 238 toUtm8.easting: 5154564.559584
    test 1226 line 238 toUtm8.northing: 698118.349975
    test 1227 line 238 toUtm8.convergence: 4.242360
    test 1228 line 238 toUtm8.scale: 1.347481
    test 1229 line 238 toUtm8.lat: 4.680922
    test 1230 line 238 toUtm8.lon: 42.114426
    test 1231 line 239 toUtm8.easting: 2695149.806543
    test 1232 line 239 toUtm8.northing: 8208197.765605
    test 1233 line 239 toUtm8.convergence: 54.178615
    test 1234 line 239 toUtm8.scale: 1.089730
    test 1235 line 239 toUtm8.lat: 61.826625
    test 1236 line 239 toUtm8.lon: 57.525096
    test 1237 line 240 toUtm8.easting: 3394792.327820
    test 1238 line 240 toUtm8.northing: 3217583.415552
    test 1239 line 240 toUtm8.convergence: 15.165863
    test 1240 line 240 toUtm8.scale: 1.145285
    test 1241 line 240 toUtm8.lat: 25.104353
    test 1242 line 240 toUtm8.lon: 32.528660
    test 1243 line 241 toUtm8.easting: 1429160.966985
    test 1244 line 241 toUtm8.northing: 8212685.362032
    test 1245 line 241 toUtm8.convergence: 37.484904
    test 1246 line 241 toUtm8.scale: 1.024676
    test 1247 line 241 toUtm8.lat: 69.678351
    test 1248 line 241 toUtm8.lon: 39.275513
    test skipped (34): line 242 toUtm8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtm8.easting: 1990722.928606
    test 1250 line 243 toUtm8.northing: 7569202.065162
    test 1251 line 243 toUtm8.convergence: 37.075276
    test 1252 line 243 toUtm8.scale: 1.048486
    test 1253 line 243 toUtm8.lat: 62.300208
    test 1254 line 243 toUtm8.lon: 40.474051
    test 1255 line 244 toUtm8.easting: 1554980.099559
    test 1256 line 244 toUtm8.northing: 1449423.919586
    test 1257 line 244 toUtm8.convergence: 3.188328
    test 1258 line 244 toUtm8.scale: 1.029664
    test 1259 line 244 toUtm8.lat: 12.721776
    test 1260 line 244 toUtm8.lon: 14.190003
    test 1261 line 245 toUtm8.easting: 785205.450196
    test 1262 line 245 toUtm8.northing: 5575158.423096
    test 1263 line 245 toUtm8.convergence: 8.388417
    test 1264 line 245 toUtm8.scale: 1.007181
    test 1265 line 245 toUtm8.lat: 49.811296
    test 1266 line 245 toUtm8.lon: 10.925011
    test 1267 line 246 toUtm8.easting: 3310405.988313
    test 1268 line 246 toUtm8.northing: 5955022.233881
    test 1269 line 246 toUtm8.convergence: 33.007587
    test 1270 line 246 toUtm8.scale: 1.137141
    test 1271 line 246 toUtm8.lat: 45.132680
    test 1272 line 246 toUtm8.lon: 42.478624
    test 1273 line 247 toUtm8.easting: 4733460.960666
    test 1274 line 247 toUtm8.northing: 129034.889816
    test 1275 line 247 toUtm8.convergence: 0.737551
    test 1276 line 247 toUtm8.scale: 1.290439
    test 1277 line 247 toUtm8.lat: 0.904279
    test 1278 line 247 toUtm8.lon: 39.078412
    test 1279 line 248 toUtm8.easting: 3322708.343909
    test 1280 line 248 toUtm8.northing: 3864738.078742
    test 1281 line 248 toUtm8.convergence: 18.472566
    test 1282 line 248 toUtm8.scale: 1.138838
    test 1283 line 248 toUtm8.lat: 30.163605
    test 1284 line 248 toUtm8.lon: 33.577996
    test skipped (35): line 249 toUtm8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'
    test skipped (36): line 250 toUtm8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'
    test skipped (37): line 251 toUtm8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtm8.easting: 2212701.180192
    test 1286 line 252 toUtm8.northing: 650348.100229
    test 1287 line 252 toUtm8.convergence: 1.970441
    test 1288 line 252 toUtm8.scale: 1.060830
    test 1289 line 252 toUtm8.lat: 5.542998
    test 1290 line 252 toUtm8.lon: 19.589578
    test 1291 line 253 toUtm8.easting: 6890222.326618
    test 1292 line 253 toUtm8.northing: 7506813.499547
    test 1293 line 253 toUtm8.convergence: 62.684825
    test 1294 line 253 toUtm8.scale: 1.638488
    test 1295 line 253 toUtm8.lat: 34.237147
    test 1296 line 253 toUtm8.lon: 73.678164
    test 1297 line 254 toUtm8.easting: 6692260.067325
    test 1298 line 254 toUtm8.northing: 4244174.008110
    test 1299 line 254 toUtm8.convergence: 31.812920
    test 1300 line 254 toUtm8.scale: 1.604640
    test 1301 line 254 toUtm8.lat: 22.704949
    test 1302 line 254 toUtm8.lon: 57.877010
    test 1303 line 255 toUtm8.easting: 1225564.137190
    test 1304 line 255 toUtm8.northing: 4778923.924144
    test 1305 line 255 toUtm8.convergence: 10.083419
    test 1306 line 255 toUtm8.scale: 1.018134
    test 1307 line 255 toUtm8.lat: 42.192424
    test 1308 line 255 toUtm8.lon: 14.828196
    test 1309 line 256 toUtm8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtm8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtm8.convergence: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtm8.scale: 3.535170
    test 1313 line 256 toUtm8.lat: 11.481151
    test 1314 line 256 toUtm8.lon: 78.189236
    test 1315 line 257 toUtm8.easting: 6673845.021771
    test 1316 line 257 toUtm8.northing: 1177587.190565
    test 1317 line 257 toUtm8.convergence: 8.389141
    test 1318 line 257 toUtm8.scale: 1.605171
    test 1319 line 257 toUtm8.lat: 6.609626
    test 1320 line 257 toUtm8.lon: 51.735783
    test 1321 line 258 toUtm8.easting: 6966354.690417
    test 1322 line 258 toUtm8.northing: 3641802.005093
    test 1323 line 258 toUtm8.convergence: 27.409636
    test 1324 line 258 toUtm8.scale: 1.661469
    test 1325 line 258 toUtm8.lat: 19.059369
    test 1326 line 258 toUtm8.lon: 57.526439
    test 1327 max forward error: 1.678807e-03
    test 1328 max reverse error: 3.170454e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 WGS84.KsOrder: 8

    23 of 1332 testUtmTMcoords.py tests (1.7%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 269.759 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUtmUps.py

    testing testUtmUps.py 21.02.11 (module pygeodesy.utmups 21.06.09)
    test 1 UtmUps: 00 N 448251.0 5411932.0001
    test 2 UtmUps.ValidateOK: True
    test 3 UtmUps: 00 N 448252 5411933
    test 4 UtmUps: 00 N 448251.795 5411932.678
    test 5 UtmUps: 00Z N 448251.8 5411932.7 n/a n/a
    test 6 UtmUps.ValidateOK: True
    test 7 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 8 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 LL.toUtmUps: 60 N 360177 4838249
    test 10 LL.toUtmUps: 60 N 360176.686 4838249.416
    test 11 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 12 LL.toUtmUps.ValidateOK: True
    test 13 toUtmUps8ID1: 00Y N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 14 toUtmUps8ID1.ValidateOK: True
    test 15 toUtmUps8ID1.ValidateOK: True
    test 16 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 17 toUtmUps8ID2.ValidateOK: True
    test 18 toUtmUps8ID2.ValidateOK: True
    test 19 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 20 toUtmUps8ID2.ValidateOK: easting (3320416.7473598532): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 21 toUtmUps8ID3: 00B S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 22 toUtmUps8ID3.ValidateOK: True
    test 23 toUtmUps8ID3.ValidateOK: True
    test 24 UtmUps.toLatLonID4.ValidateOK: True
    test 25 UtmUps.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 26 UtmUps.toLatLonID4: 84.287234°N, 132.247989°W
    test 27 UtmUps.ValidateOK: easting (3320416.75): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 28 UtmUps.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 29 UtmUps.toLatLonID5: 73.0°N, 044.0°E
    test 30 UtmUps.ValidateOK: True
    test 31 UtmUps.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 32 UtmUps.toLatLonID6: 87.287333°S, 132.247861°E
    test 33 latlon1: 61.2°N, 149.9°W
    test 34 toUtmUps8: 06 N 344174 6788521
    test 35 toUtmUps8: 06V N 344173.864114 6788521.418164 -2.54179531° 0.99989751
    test 36 toUtmUps8.ValidateOK: True
    test 37 toMgrs: 06V UN 44173 88521
    test 38 latlon2: LatLon(83°37′37.2″N, 032°39′50.4″W)
    test 39 toUtmUps8: 25 N 504164 9286466
    test 40 toUtmUps8: [Z:25X, H:N, E:504164, N:9286466]
    test 41 toUtmUps8: 25X N 504163.899383 9286465.664902 +20.03542083′ 0.99960021
    test 42 toUtmUps8.ValidateOK: True
    test 43 toMgrs: 25X EN 04163 86465
    test 44 latlon3: 33.33°N, 044.44°E
    test 45 toUtmUps8: 38 N 447882 3688012
    test 46 toUtmUps8: 38S N 447882.413169 3688011.692733 -18.46228466′ 0.99963349
    test 47 toUtmUps8.ValidateOK: True
    test 48 toMgrs: 38S MB 47882 88011
    test 49 latlon4: 79.0°S, 079.0°W
    test 50 toUtmUps8: 17 S 542594 1229296
    test 51 toUtmUps8: 17C S 542594.134555 1229296.157301 -1.96328341° 0.99962217
    test 52 toUtmUps8.ValidateOK: True
    test 53 toMgrs: 17C NN 42594 29296
    test 54 latlon5: 84.0°N, 084.0°E
    test 55 toUtmUps8: 00 N 2663075 1930308
    test 56 toUtmUps8: 00Z N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 57 toUtmUps8.ValidateOK: True
    test 58 latlon6: 13.4125°N, 103.8667°E
    test 59 toUtmUps8: 48 N 377302 1483035
    test 60 toUtmUps8: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 61 toUtmUps8.ValidateOK: True
    test 62 toMgrs: 48P UV 77302 83034
    test 63 latlon7: 13.4125°S, 103.8667°W
    test 64 LL.toUtmUps: 13 S 622698 8516965
    test 65 LL.toUtmUps: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 66 LL.toUtmUps.ValidateOK: True
    test 67 toMgrs: 13L FF 22697 16965
    test 68 latlon8: 43.684097°N, 175.265195°E
    test 69 LL.toUtmUps: 60 N 360177 4838249
    test 70 LL.toUtmUps: 60 N 360176.691 4838249.422
    test 71 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 72 LL.toUtmUps.ValidateOK: True
    test 73 toMgrs: 60T UP 60176 38249
    test 74 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 75 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 76 latlon9: 41.321801°N, 074.801413°W
    test 77 LL.toUtmUps: 18 N 516620 4574500
    test 78 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 79 LL.toUtmUps.ValidateOK: True
    test 80 toMgrs: 18T WL 16619 74500
    test 81 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 82 UtmUps.toLatLon: 41°19′18.48″N, 074°48′05.09″W
    test 83 parseUTMUPS5: 18 N 516620 4574500
    test 84 parseUTMUPS5.ValidateOK: True
    test 85 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 86 UtmUps: 00A S 321441 5810117
    test 87 UtmUps.ValidateOK: easting (321441.0425108216): outside UPS range [800000, 3200000]  FAILED, KNOWN, expected True
    test 88 UtmUps.toLatLon: 53.713776°S, 023.77604°W
    test 89 UtmUps.toLatLon: 53°42′49.59″S, 023°46′33.74″W
    test 90 LL.toUtmUps: 27 S 316807 4044745
    test 91 LL.toUtmUps.ValidateOK: True
    test 92 LL.toUtmUps: 27 S 316807.326 4044744.532
    test 93 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 94 UtmUps: 00Z N 400000 5000000
    test 95 UtmUps.ValidateOK: True
    test 96 parseUTMUPS5: (31, 'N', 446000.0, 8436100.0, 'X')
    test 97 parseUTMUPS5: (0, 'S', 506346.0, 1057743.0, 'A')

    4 of 97 testUtmUps.py tests (4.1%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 20.971 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testUtmUpsTMcoords.py

    testing testUtmUpsTMcoords.py 19.05.23 (module pygeodesy.utmups 21.06.09)
    test 1 line 1 toUtmUps8.easting: 1548706.791619
    test 2 line 1 toUtmUps8.northing: 8451449.198772
    test 3 line 1 toUtmUps8.convergence: 43.922790
    test 4 line 1 toUtmUps8.scale: 1.029060
    test 5 line 1 toUtmUps8.lat: 70.579277
    test 6 line 1 toUtmUps8.lon: 45.599420
    test 7 line 2 toUtmUps8.easting: 2624150.740929
    test 8 line 2 toUtmUps8.northing: 1204434.041605
    test 9 line 2 toUtmUps8.convergence: 4.292619
    test 10 line 2 toUtmUps8.scale: 1.086051
    test 11 line 2 toUtmUps8.lat: 10.018894
    test 12 line 2 toUtmUps8.lon: 23.313324
    test 13 line 3 toUtmUps8.easting: 9855841.232935
    test 14 line 3 toUtmUps8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtmUps8.convergence: 53.348315
    test 16 line 3 toUtmUps8.scale: 2.445098
    test 17 line 3 toUtmUps8.lat: 19.479896
    test 18 line 3 toUtmUps8.lon: 75.662049
    test 19 line 4 toUtmUps8.easting: 3206390.691996
    test 20 line 4 toUtmUps8.northing: 2650745.400406
    test 21 line 4 toUtmUps8.convergence: 11.666950
    test 22 line 4 toUtmUps8.scale: 1.129359
    test 23 line 4 toUtmUps8.lat: 21.072465
    test 24 line 4 toUtmUps8.lon: 29.828684
    test 25 line 5 toUtmUps8.easting: 4328154.083501
    test 26 line 5 toUtmUps8.northing: 749647.623690
    test 27 line 5 toUtmUps8.convergence: 4.024317
    test 28 line 5 toUtmUps8.scale: 1.240829
    test 29 line 5 toUtmUps8.lat: 5.458957
    test 30 line 5 toUtmUps8.lon: 36.385237
    test 31 line 6 toUtmUps8.easting: 847598.266514
    test 32 line 6 toUtmUps8.northing: 7947180.962440
    test 33 line 6 toUtmUps8.convergence: 21.639091
    test 34 line 6 toUtmUps8.scale: 1.008399
    test 35 line 6 toUtmUps8.lat: 70.175454
    test 36 line 6 toUtmUps8.lon: 22.865350
    test 37 line 7 toUtmUps8.easting: 2727657.337974
    test 38 line 7 toUtmUps8.northing: 8283916.696410
    test 39 line 7 toUtmUps8.convergence: 55.690909
    test 40 line 7 toUtmUps8.scale: 1.091942
    test 41 line 7 toUtmUps8.lat: 61.965605
    test 42 line 7 toUtmUps8.lon: 58.931371
    test 43 line 8 toUtmUps8.easting: 2331001.751890
    test 44 line 8 toUtmUps8.northing: 1313608.224751
    test 45 line 8 toUtmUps8.convergence: 4.214690
    test 46 line 8 toUtmUps8.scale: 1.067599
    test 47 line 8 toUtmUps8.lat: 11.116050
    test 48 line 8 toUtmUps8.lon: 20.901069
    test 49 line 9 toUtmUps8.easting: 6035557.239480
    test 50 line 9 toUtmUps8.northing: 5791770.791879
    test 51 line 9 toUtmUps8.convergence: 43.698170
    test 52 line 9 toUtmUps8.scale: 1.481260
    test 53 line 9 toUtmUps8.lat: 32.210543
    test 54 line 9 toUtmUps8.lon: 60.705849
    test 55 line 10 toUtmUps8.easting: 1064553.125852
    test 56 line 10 toUtmUps8.northing: 9417273.737208
    test 57 line 10 toUtmUps8.convergence: 61.100380
    test 58 line 10 toUtmUps8.scale: 1.013475
    test 59 line 10 toUtmUps8.lat: 79.187451
    test 60 line 10 toUtmUps8.lon: 61.532382
    test 61 line 11 toUtmUps8.easting: 1400137.116164
    test 62 line 11 toUtmUps8.northing: 9616907.017686
    test 63 line 11 toUtmUps8.convergence: 74.527087
    test 64 line 11 toUtmUps8.scale: 1.023640
    test 65 line 11 toUtmUps8.lat: 77.103759
    test 66 line 11 toUtmUps8.lon: 74.899105
    test skipped (1): line 12 toUtmUps8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'
    test skipped (2): line 13 toUtmUps8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtmUps8.easting: 3335099.866623
    test 68 line 14 toUtmUps8.northing: 6740519.084015
    test 69 line 14 toUtmUps8.convergence: 40.611821
    test 70 line 14 toUtmUps8.scale: 1.139021
    test 71 line 14 toUtmUps8.lat: 49.990485
    test 72 line 14 toUtmUps8.lon: 48.203179
    test skipped (3): line 15 toUtmUps8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtmUps8.easting: 5387578.735298
    test 74 line 16 toUtmUps8.northing: 4111216.907168
    test 75 line 16 toUtmUps8.convergence: 27.574337
    test 76 line 16 toUtmUps8.scale: 1.379357
    test 77 line 16 toUtmUps8.lat: 25.936824
    test 78 line 16 toUtmUps8.lon: 49.913598
    test 79 line 17 toUtmUps8.easting: 2622214.380233
    test 80 line 17 toUtmUps8.northing: 8678923.984567
    test 81 line 17 toUtmUps8.convergence: 61.697275
    test 82 line 17 toUtmUps8.scale: 1.084810
    test 83 line 17 toUtmUps8.lat: 64.402196
    test 84 line 17 toUtmUps8.lon: 64.091395
    test skipped (4): line 18 toUtmUps8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtmUps8.easting: 738062.047779
    test 86 line 19 toUtmUps8.northing: 3031007.074116
    test 87 line 19 toUtmUps8.convergence: 3.416802
    test 88 line 19 toUtmUps8.scale: 1.006332
    test 89 line 19 toUtmUps8.lat: 27.203895
    test 90 line 19 toUtmUps8.lon: 7.440229
    test 91 line 20 toUtmUps8.easting: 1944413.834565
    test 92 line 20 toUtmUps8.northing: 9613299.224493
    test 93 line 20 toUtmUps8.convergence: 78.462831
    test 94 line 20 toUtmUps8.scale: 1.046134
    test 95 line 20 toUtmUps8.lat: 72.509000
    test 96 line 20 toUtmUps8.lon: 78.982283
    test 97 line 21 toUtmUps8.easting: 2114521.418406
    test 98 line 21 toUtmUps8.northing: 4954077.440098
    test 99 line 21 toUtmUps8.convergence: 17.571878
    test 100 line 21 toUtmUps8.scale: 1.055093
    test 101 line 21 toUtmUps8.lat: 41.824954
    test 102 line 21 toUtmUps8.lon: 25.392744
    test 103 line 22 toUtmUps8.easting: 620365.905090
    test 104 line 22 toUtmUps8.northing: 4755542.026562
    test 105 line 22 toUtmUps8.convergence: 5.152022
    test 106 line 22 toUtmUps8.scale: 1.004338
    test 107 line 22 toUtmUps8.lat: 42.701376
    test 108 line 22 toUtmUps8.lon: 7.572738
    test 109 line 23 toUtmUps8.easting: 263004.770989
    test 110 line 23 toUtmUps8.northing: 4493669.762451
    test 111 line 23 toUtmUps8.convergence: 2.020523
    test 112 line 23 toUtmUps8.scale: 1.000452
    test 113 line 23 toUtmUps8.lat: 40.552052
    test 114 line 23 toUtmUps8.lon: 3.106056
    test 115 line 24 toUtmUps8.easting: 3217221.739462
    test 116 line 24 toUtmUps8.northing: 437776.119161
    test 117 line 24 toUtmUps8.convergence: 1.848169
    test 118 line 24 toUtmUps8.scale: 1.130558
    test 119 line 24 toUtmUps8.lat: 3.501242
    test 120 line 24 toUtmUps8.lon: 27.806507
    test skipped (5): line 25 toUtmUps8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtmUps8.easting: 967777.158554
    test 122 line 26 toUtmUps8.northing: 6615684.266592
    test 123 line 26 toUtmUps8.convergence: 14.410044
    test 124 line 26 toUtmUps8.scale: 1.011100
    test 125 line 26 toUtmUps8.lat: 58.582623
    test 126 line 26 toUtmUps8.lon: 16.755558
    test 127 line 27 toUtmUps8.easting: 7558840.728461
    test 128 line 27 toUtmUps8.northing: 4144728.130764
    test 129 line 27 toUtmUps8.convergence: 32.557264
    test 130 line 27 toUtmUps8.scale: 1.791490
    test 131 line 27 toUtmUps8.lat: 19.793004
    test 132 line 27 toUtmUps8.lon: 61.746763
    test 133 line 28 toUtmUps8.easting: 1056008.314161
    test 134 line 28 toUtmUps8.northing: 9290799.692669
    test 135 line 28 toUtmUps8.convergence: 55.843278
    test 136 line 28 toUtmUps8.scale: 1.013253
    test 137 line 28 toUtmUps8.lat: 78.666776
    test 138 line 28 toUtmUps8.lon: 56.365355
    test 139 line 29 toUtmUps8.easting: 1943965.134687
    test 140 line 29 toUtmUps8.northing: 1389972.228690
    test 141 line 29 toUtmUps8.convergence: 3.774869
    test 142 line 29 toUtmUps8.scale: 1.046724
    test 143 line 29 toUtmUps8.lat: 11.998788
    test 144 line 29 toUtmUps8.lon: 17.597873
    test 145 line 30 toUtmUps8.easting: 5803077.072902
    test 146 line 30 toUtmUps8.northing: 5649957.943659
    test 147 line 30 toUtmUps8.convergence: 41.717943
    test 148 line 30 toUtmUps8.scale: 1.442572
    test 149 line 30 toUtmUps8.lat: 32.540378
    test 150 line 30 toUtmUps8.lon: 58.764613
    test 151 line 31 toUtmUps8.easting: 2928716.986009
    test 152 line 31 toUtmUps8.northing: 5731835.058317
    test 153 line 31 toUtmUps8.convergence: 28.538550
    test 154 line 31 toUtmUps8.scale: 1.106780
    test 155 line 31 toUtmUps8.lat: 45.160356
    test 156 line 31 toUtmUps8.lon: 37.465285
    test 157 line 32 toUtmUps8.easting: 326141.975756
    test 158 line 32 toUtmUps8.northing: 8881325.164543
    test 159 line 32 toUtmUps8.convergence: 16.111415
    test 160 line 32 toUtmUps8.scale: 1.000900
    test 161 line 32 toUtmUps8.lat: 79.584190
    test 162 line 32 toUtmUps8.lon: 16.367006
    test 163 line 33 toUtmUps8.easting: 3933015.267450
    test 164 line 33 toUtmUps8.northing: 7932373.909512
    test 165 line 33 toUtmUps8.convergence: 58.577424
    test 166 line 33 toUtmUps8.scale: 1.194811
    test 167 line 33 toUtmUps8.lat: 52.470664
    test 168 line 33 toUtmUps8.lon: 64.125580
    test 169 line 34 toUtmUps8.easting: 8598926.983213
    test 170 line 34 toUtmUps8.northing: 6214135.167503
    test 171 line 34 toUtmUps8.convergence: 52.612878
    test 172 line 34 toUtmUps8.scale: 2.051367
    test 173 line 34 toUtmUps8.lat: 23.702673
    test 174 line 34 toUtmUps8.lon: 72.630363
    test 175 line 35 toUtmUps8.easting: 6620553.333772
    test 176 line 35 toUtmUps8.northing: 6540527.122948
    test 177 line 35 toUtmUps8.convergence: 52.350140
    test 178 line 35 toUtmUps8.scale: 1.586614
    test 179 line 35 toUtmUps8.lat: 32.603520
    test 180 line 35 toUtmUps8.lon: 67.280123
    test 181 line 36 toUtmUps8.easting: 1515136.758292
    test 182 line 36 toUtmUps8.northing: 3858996.087537
    test 183 line 36 toUtmUps8.convergence: 9.225127
    test 184 line 36 toUtmUps8.scale: 1.028029
    test 185 line 36 toUtmUps8.lat: 33.776224
    test 186 line 36 toUtmUps8.lon: 16.280993
    test 187 line 37 toUtmUps8.easting: 479854.373445
    test 188 line 37 toUtmUps8.northing: 8980501.389896
    test 189 line 37 toUtmUps8.convergence: 25.021222
    test 190 line 37 toUtmUps8.scale: 1.002415
    test 191 line 37 toUtmUps8.lat: 79.932747
    test 192 line 37 toUtmUps8.lon: 25.363622
    test 193 line 38 toUtmUps8.easting: 5243446.564940
    test 194 line 38 toUtmUps8.northing: 140657.213960
    test 195 line 38 toUtmUps8.convergence: 0.862817
    test 196 line 38 toUtmUps8.scale: 1.360358
    test 197 line 38 toUtmUps8.lat: 0.935056
    test 198 line 38 toUtmUps8.lon: 42.538824
    test skipped (6): line 39 toUtmUps8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtmUps8.easting: 1202993.459158
    test 200 line 40 toUtmUps8.northing: 5557316.053599
    test 201 line 40 toUtmUps8.convergence: 12.579061
    test 202 line 40 toUtmUps8.scale: 1.017426
    test 203 line 40 toUtmUps8.lat: 48.979057
    test 204 line 40 toUtmUps8.lon: 16.474542
    test 205 line 41 toUtmUps8.easting: 1729088.710196
    test 206 line 41 toUtmUps8.northing: 7770874.289954
    test 207 line 41 toUtmUps8.convergence: 36.021783
    test 208 line 41 toUtmUps8.scale: 1.036397
    test 209 line 41 toUtmUps8.lat: 65.036016
    test 210 line 41 toUtmUps8.lon: 38.729091
    test 211 line 42 toUtmUps8.easting: 2437301.517425
    test 212 line 42 toUtmUps8.northing: 5539327.748318
    test 213 line 42 toUtmUps8.convergence: 23.461879
    test 214 line 42 toUtmUps8.scale: 1.073459
    test 215 line 42 toUtmUps8.lat: 45.510091
    test 216 line 42 toUtmUps8.lon: 31.303729
    test 217 line 43 toUtmUps8.easting: 3647186.135066
    test 218 line 43 toUtmUps8.northing: 2086412.330983
    test 219 line 43 toUtmUps8.convergence: 10.023991
    test 220 line 43 toUtmUps8.scale: 1.168707
    test 221 line 43 toUtmUps8.lat: 16.058010
    test 222 line 43 toUtmUps8.lon: 32.520026
    test 223 line 44 toUtmUps8.easting: 1818497.243556
    test 224 line 44 toUtmUps8.northing: 4275471.745057
    test 225 line 44 toUtmUps8.convergence: 12.499656
    test 226 line 44 toUtmUps8.scale: 1.040604
    test 227 line 44 toUtmUps8.lat: 36.845200
    test 228 line 44 toUtmUps8.lon: 20.282283
    test 229 line 45 toUtmUps8.easting: 3751304.113783
    test 230 line 45 toUtmUps8.northing: 5130454.001592
    test 231 line 45 toUtmUps8.convergence: 28.959707
    test 232 line 45 toUtmUps8.scale: 1.177681
    test 233 line 45 toUtmUps8.lat: 37.865481
    test 234 line 45 toUtmUps8.lon: 41.990402
    test 235 line 46 toUtmUps8.easting: 2616733.138544
    test 236 line 46 toUtmUps8.northing: 394644.463815
    test 237 line 46 toUtmUps8.convergence: 1.390425
    test 238 line 46 toUtmUps8.scale: 1.085595
    test 239 line 46 toUtmUps8.lat: 3.287272
    test 240 line 46 toUtmUps8.lon: 22.917604
    test 241 line 47 toUtmUps8.easting: 1756506.573942
    test 242 line 47 toUtmUps8.northing: 5570393.986394
    test 243 line 47 toUtmUps8.convergence: 17.897894
    test 244 line 47 toUtmUps8.scale: 1.037732
    test 245 line 47 toUtmUps8.lat: 47.813686
    test 246 line 47 toUtmUps8.lon: 23.545092
    test 247 line 48 toUtmUps8.easting: 8752461.894711
    test 248 line 48 toUtmUps8.northing: 6087728.152284
    test 249 line 48 toUtmUps8.convergence: 51.628465
    test 250 line 48 toUtmUps8.scale: 2.095465
    test 251 line 48 toUtmUps8.lat: 22.836853
    test 252 line 48 toUtmUps8.lon: 72.604385
    test 253 line 49 toUtmUps8.easting: 1309272.216432
    test 254 line 49 toUtmUps8.northing: 59520.028899
    test 255 line 49 toUtmUps8.convergence: 0.109069
    test 256 line 49 toUtmUps8.scale: 1.020897
    test 257 line 49 toUtmUps8.lat: 0.527262
    test 258 line 49 toUtmUps8.lon: 11.684209
    test 259 line 50 toUtmUps8.easting: 328652.277129
    test 260 line 50 toUtmUps8.northing: 2233043.958874
    test 261 line 50 toUtmUps8.convergence: 1.084863
    test 262 line 50 toUtmUps8.scale: 1.000935
    test 263 line 50 toUtmUps8.lat: 20.166742
    test 264 line 50 toUtmUps8.lon: 3.143948
    test skipped (7): line 51 toUtmUps8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'
    test skipped (8): line 52 toUtmUps8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtmUps8.easting: 796987.281104
    test 266 line 53 toUtmUps8.northing: 7677446.357675
    test 267 line 53 toUtmUps8.convergence: 18.084472
    test 268 line 53 toUtmUps8.scale: 1.007381
    test 269 line 53 toUtmUps8.lat: 68.071020
    test 270 line 53 toUtmUps8.lon: 19.392823
    test skipped (9): line 54 toUtmUps8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtmUps8.easting: 7087225.330906
    test 272 line 55 toUtmUps8.northing: 8382823.855822
    test 273 line 55 toUtmUps8.convergence: 72.253756
    test 274 line 55 toUtmUps8.scale: 1.678070
    test 275 line 55 toUtmUps8.lat: 35.074753
    test 276 line 55 toUtmUps8.lon: 79.496003
    test 277 line 56 toUtmUps8.easting: 5090358.125724
    test 278 line 56 toUtmUps8.northing: 4318294.133489
    test 279 line 56 toUtmUps8.convergence: 28.266280
    test 280 line 56 toUtmUps8.scale: 1.336264
    test 281 line 56 toUtmUps8.lat: 28.078790
    test 282 line 56 toUtmUps8.lon: 48.684350
    test skipped (10): line 57 toUtmUps8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtmUps8.easting: 3447670.550785
    test 284 line 58 toUtmUps8.northing: 3680238.888223
    test 285 line 58 toUtmUps8.convergence: 17.934948
    test 286 line 58 toUtmUps8.scale: 1.149831
    test 287 line 58 toUtmUps8.lat: 28.473948
    test 288 line 58 toUtmUps8.lon: 34.127306
    test 289 line 59 toUtmUps8.easting: 3396522.906798
    test 290 line 59 toUtmUps8.northing: 8093659.687593
    test 291 line 59 toUtmUps8.convergence: 57.747117
    test 292 line 59 toUtmUps8.scale: 1.144006
    test 293 line 59 toUtmUps8.lat: 56.629354
    test 294 line 59 toUtmUps8.lon: 62.196474
    test 295 line 60 toUtmUps8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtmUps8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtmUps8.convergence: 14.210358
    test 298 line 60 toUtmUps8.scale: 3.048347
    test 299 line 60 toUtmUps8.lat: 4.747762
    test 300 line 60 toUtmUps8.lon: 70.932555
    test 301 line 61 toUtmUps8.easting: 6808805.230950
    test 302 line 61 toUtmUps8.northing: 8044779.777369
    test 303 line 61 toUtmUps8.convergence: 68.242008
    test 304 line 61 toUtmUps8.scale: 1.621464
    test 305 line 61 toUtmUps8.lat: 35.882113
    test 306 line 61 toUtmUps8.lon: 76.741849
    test 307 line 62 toUtmUps8.easting: 2306021.556506
    test 308 line 62 toUtmUps8.northing: 757191.592866
    test 309 line 62 toUtmUps8.convergence: 2.385686
    test 310 line 62 toUtmUps8.scale: 1.066159
    test 311 line 62 toUtmUps8.lat: 6.420705
    test 312 line 62 toUtmUps8.lon: 20.416028
    test 313 line 63 toUtmUps8.easting: 1547406.313862
    test 314 line 63 toUtmUps8.northing: 6048712.751824
    test 315 line 63 toUtmUps8.convergence: 18.474372
    test 316 line 63 toUtmUps8.scale: 1.029123
    test 317 line 63 toUtmUps8.lat: 52.335248
    test 318 line 63 toUtmUps8.lon: 22.879294
    test 319 line 64 toUtmUps8.easting: 2430467.650383
    test 320 line 64 toUtmUps8.northing: 7557167.613972
    test 321 line 64 toUtmUps8.convergence: 42.110021
    test 322 line 64 toUtmUps8.scale: 1.072759
    test 323 line 64 toUtmUps8.lat: 59.846391
    test 324 line 64 toUtmUps8.lon: 46.262536
    test 325 line 65 toUtmUps8.easting: 2334053.905830
    test 326 line 65 toUtmUps8.northing: 1948076.966582
    test 327 line 65 toUtmUps8.convergence: 6.353185
    test 328 line 65 toUtmUps8.scale: 1.067733
    test 329 line 65 toUtmUps8.lat: 16.461790
    test 330 line 65 toUtmUps8.lon: 21.433269
    test 331 line 66 toUtmUps8.easting: 5564175.186737
    test 332 line 66 toUtmUps8.northing: 1836851.660412
    test 333 line 66 toUtmUps8.convergence: 11.870682
    test 334 line 66 toUtmUps8.scale: 1.408265
    test 335 line 66 toUtmUps8.lat: 11.707905
    test 336 line 66 toUtmUps8.lon: 45.827075
    test 337 line 67 toUtmUps8.easting: 6118505.590359
    test 338 line 67 toUtmUps8.northing: 7631684.552421
    test 339 line 67 toUtmUps8.convergence: 62.477323
    test 340 line 67 toUtmUps8.scale: 1.493420
    test 341 line 67 toUtmUps8.lat: 38.519075
    test 342 line 67 toUtmUps8.lon: 71.935918
    test skipped (11): line 68 toUtmUps8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtmUps8.easting: 36187.342415
    test 344 line 69 toUtmUps8.northing: 2142565.324802
    test 345 line 69 toUtmUps8.convergence: 0.114334
    test 346 line 69 toUtmUps8.scale: 0.999616
    test 347 line 69 toUtmUps8.lat: 19.376880
    test 348 line 69 toUtmUps8.lon: 0.344605
    test 349 line 70 toUtmUps8.easting: 2380328.546851
    test 350 line 70 toUtmUps8.northing: 8440109.872384
    test 351 line 70 toUtmUps8.convergence: 55.076067
    test 352 line 70 toUtmUps8.scale: 1.069658
    test 353 line 70 toUtmUps8.lat: 65.075805
    test 354 line 70 toUtmUps8.lon: 57.653438
    test 355 line 71 toUtmUps8.easting: 582511.608826
    test 356 line 71 toUtmUps8.northing: 8876047.217071
    test 357 line 71 toUtmUps8.convergence: 27.133300
    test 358 line 71 toUtmUps8.scale: 1.003749
    test 359 line 71 toUtmUps8.lat: 78.691870
    test 360 line 71 toUtmUps8.lon: 27.591736
    test 361 line 72 toUtmUps8.easting: 899441.350477
    test 362 line 72 toUtmUps8.northing: 4582046.430516
    test 363 line 72 toUtmUps8.convergence: 7.031211
    test 364 line 72 toUtmUps8.scale: 1.009573
    test 365 line 72 toUtmUps8.lat: 40.893022
    test 366 line 72 toUtmUps8.lon: 10.668804
    test skipped (12): line 73 toUtmUps8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtmUps8.easting: 6701004.587204
    test 368 line 74 toUtmUps8.northing: 2954368.258231
    test 369 line 74 toUtmUps8.convergence: 21.560153
    test 370 line 74 toUtmUps8.scale: 1.608554
    test 371 line 74 toUtmUps8.lat: 16.208377
    test 372 line 74 toUtmUps8.lon: 54.494282
    test 373 line 75 toUtmUps8.easting: 454986.218897
    test 374 line 75 toUtmUps8.northing: 4885087.887884
    test 375 line 75 toUtmUps8.convergence: 3.945648
    test 376 line 75 toUtmUps8.scale: 1.002147
    test 377 line 75 toUtmUps8.lat: 43.977936
    test 378 line 75 toUtmUps8.lon: 5.672541
    test skipped (13): line 76 toUtmUps8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtmUps8.easting: 1547627.594741
    test 380 line 77 toUtmUps8.northing: 6036584.538347
    test 381 line 77 toUtmUps8.convergence: 18.407629
    test 382 line 77 toUtmUps8.scale: 1.029132
    test 383 line 77 toUtmUps8.lat: 52.234165
    test 384 line 77 toUtmUps8.lon: 22.827655
    test 385 line 78 toUtmUps8.easting: 5221488.778597
    test 386 line 78 toUtmUps8.northing: 1762592.044392
    test 387 line 78 toUtmUps8.convergence: 10.927880
    test 388 line 78 toUtmUps8.scale: 1.356721
    test 389 line 78 toUtmUps8.lat: 11.674646
    test 390 line 78 toUtmUps8.lon: 43.500147
    test 391 line 79 toUtmUps8.easting: 4880570.297161
    test 392 line 79 toUtmUps8.northing: 3325433.988867
    test 393 line 79 toUtmUps8.convergence: 20.469862
    test 394 line 79 toUtmUps8.scale: 1.308476
    test 395 line 79 toUtmUps8.lat: 22.492753
    test 396 line 79 toUtmUps8.lon: 44.179153
    test skipped (14): line 80 toUtmUps8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtmUps8.easting: 71519.450458
    test 398 line 81 toUtmUps8.northing: 3654740.444852
    test 399 line 81 toUtmUps8.convergence: 0.417448
    test 400 line 81 toUtmUps8.scale: 0.999663
    test 401 line 81 toUtmUps8.lat: 33.028802
    test 402 line 81 toUtmUps8.lon: 0.765843
    test 403 line 82 toUtmUps8.easting: 4152797.795220
    test 404 line 82 toUtmUps8.northing: 7823098.502751
    test 405 line 82 toUtmUps8.convergence: 58.238901
    test 406 line 82 toUtmUps8.scale: 1.218052
    test 407 line 82 toUtmUps8.lat: 50.649195
    test 408 line 82 toUtmUps8.lon: 64.389076
    test 409 line 83 toUtmUps8.easting: 2926725.707639
    test 410 line 83 toUtmUps8.northing: 7904918.072844
    test 411 line 83 toUtmUps8.convergence: 51.592748
    test 412 line 83 toUtmUps8.scale: 1.106206
    test 413 line 83 toUtmUps8.lat: 58.820640
    test 414 line 83 toUtmUps8.lon: 55.841048
    test 415 line 84 toUtmUps8.easting: 1325509.113869
    test 416 line 84 toUtmUps8.northing: 9675214.948213
    test 417 line 84 toUtmUps8.convergence: 76.116213
    test 418 line 84 toUtmUps8.scale: 1.021136
    test 419 line 84 toUtmUps8.lat: 77.865762
    test 420 line 84 toUtmUps8.lon: 76.414618
    test 421 line 85 toUtmUps8.easting: 3045296.448926
    test 422 line 85 toUtmUps8.northing: 542153.443280
    test 423 line 85 toUtmUps8.convergence: 2.185095
    test 424 line 85 toUtmUps8.scale: 1.116664
    test 425 line 85 toUtmUps8.lat: 4.389639
    test 426 line 85 toUtmUps8.lon: 26.458976
    test 427 line 86 toUtmUps8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtmUps8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtmUps8.convergence: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtmUps8.scale: 3.267256
    test 431 line 86 toUtmUps8.lat: 13.924448
    test 432 line 86 toUtmUps8.lon: 79.017873
    test 433 line 87 toUtmUps8.easting: 8891099.704936
    test 434 line 87 toUtmUps8.northing: 162160.142227
    test 435 line 87 toUtmUps8.convergence: 1.312094
    test 436 line 87 toUtmUps8.scale: 2.157363
    test 437 line 87 toUtmUps8.lat: 0.679713
    test 438 line 87 toUtmUps8.lon: 62.036792
    test 439 line 88 toUtmUps8.easting: 4784814.214449
    test 440 line 88 toUtmUps8.northing: 2984497.432580
    test 441 line 88 toUtmUps8.convergence: 17.946545
    test 442 line 88 toUtmUps8.scale: 1.296116
    test 443 line 88 toUtmUps8.lat: 20.478281
    test 444 line 88 toUtmUps8.lon: 42.678234
    test 445 line 89 toUtmUps8.easting: 1772074.682154
    test 446 line 89 toUtmUps8.northing: 9491552.560143
    test 447 line 89 toUtmUps8.convergence: 73.634830
    test 448 line 89 toUtmUps8.scale: 1.038202
    test 449 line 89 toUtmUps8.lat: 73.695703
    test 450 line 89 toUtmUps8.lon: 74.259097
    test 451 line 90 toUtmUps8.easting: 1907649.782106
    test 452 line 90 toUtmUps8.northing: 6994232.429379
    test 453 line 90 toUtmUps8.convergence: 29.718929
    test 454 line 90 toUtmUps8.scale: 1.044503
    test 455 line 90 toUtmUps8.lat: 58.569370
    test 456 line 90 toUtmUps8.lon: 33.777549
    test 457 line 91 toUtmUps8.easting: 2084423.818962
    test 458 line 91 toUtmUps8.northing: 2211816.035619
    test 459 line 91 toUtmUps8.convergence: 6.556448
    test 460 line 91 toUtmUps8.scale: 1.053793
    test 461 line 91 toUtmUps8.lat: 18.933881
    test 462 line 91 toUtmUps8.lon: 19.492695
    test 463 line 92 toUtmUps8.easting: 1064373.671729
    test 464 line 92 toUtmUps8.northing: 7812482.547461
    test 465 line 92 toUtmUps8.convergence: 24.874124
    test 466 line 92 toUtmUps8.scale: 1.013490
    test 467 line 92 toUtmUps8.lat: 68.317934
    test 468 line 92 toUtmUps8.lon: 26.515687
    test skipped (15): line 93 toUtmUps8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtmUps8.easting: 6398096.677297
    test 470 line 94 toUtmUps8.northing: 4410894.752104
    test 471 line 94 toUtmUps8.convergence: 32.558023
    test 472 line 94 toUtmUps8.scale: 1.548004
    test 473 line 94 toUtmUps8.lat: 24.411298
    test 474 line 94 toUtmUps8.lon: 56.881823
    test 475 line 95 toUtmUps8.easting: 3138623.300415
    test 476 line 95 toUtmUps8.northing: 3082960.600798
    test 477 line 95 toUtmUps8.convergence: 13.557672
    test 478 line 95 toUtmUps8.scale: 1.123724
    test 479 line 95 toUtmUps8.lat: 24.571871
    test 480 line 95 toUtmUps8.lon: 30.073097
    test 481 line 96 toUtmUps8.easting: 2748325.794651
    test 482 line 96 toUtmUps8.northing: 4202811.912668
    test 483 line 96 toUtmUps8.convergence: 17.578706
    test 484 line 96 toUtmUps8.scale: 1.094102
    test 485 line 96 toUtmUps8.lat: 34.202576
    test 486 line 96 toUtmUps8.lon: 29.383166
    test 487 line 97 toUtmUps8.easting: 6677830.630367
    test 488 line 97 toUtmUps8.northing: 5350071.837395
    test 489 line 97 toUtmUps8.convergence: 41.306641
    test 490 line 97 toUtmUps8.scale: 1.599774
    test 491 line 97 toUtmUps8.lat: 27.756285
    test 492 line 97 toUtmUps8.lon: 61.881905
    test 493 line 98 toUtmUps8.easting: 5941536.667431
    test 494 line 98 toUtmUps8.northing: 3293112.175140
    test 495 line 98 toUtmUps8.convergence: 22.752845
    test 496 line 98 toUtmUps8.scale: 1.468473
    test 497 line 98 toUtmUps8.lat: 19.742270
    test 498 line 98 toUtmUps8.lon: 50.957821
    test 499 line 99 toUtmUps8.easting: 3152481.792567
    test 500 line 99 toUtmUps8.northing: 5903048.837978
    test 501 line 99 toUtmUps8.convergence: 31.494606
    test 502 line 99 toUtmUps8.scale: 1.124085
    test 503 line 99 toUtmUps8.lat: 45.453582
    test 504 line 99 toUtmUps8.lon: 40.659833
    test 505 line 100 toUtmUps8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtmUps8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtmUps8.convergence: 21.965869
    test 508 line 100 toUtmUps8.scale: 2.700296
    test 509 line 100 toUtmUps8.lat: 8.322144
    test 510 line 100 toUtmUps8.lon: 69.488157
    test 511 line 101 toUtmUps8.easting: 1964010.778021
    test 512 line 101 toUtmUps8.northing: 5634042.923056
    test 513 line 101 toUtmUps8.convergence: 20.117800
    test 514 line 101 toUtmUps8.scale: 1.047344
    test 515 line 101 toUtmUps8.lat: 47.749831
    test 516 line 101 toUtmUps8.lon: 26.322002
    test 517 line 102 toUtmUps8.easting: 2065306.424934
    test 518 line 102 toUtmUps8.northing: 2135008.468651
    test 519 line 102 toUtmUps8.convergence: 6.258981
    test 520 line 102 toUtmUps8.scale: 1.052800
    test 521 line 102 toUtmUps8.lat: 18.297493
    test 522 line 102 toUtmUps8.lon: 19.244669
    test 523 line 103 toUtmUps8.easting: 5127738.132976
    test 524 line 103 toUtmUps8.northing: 6793804.304411
    test 525 line 103 toUtmUps8.convergence: 50.557915
    test 526 line 103 toUtmUps8.scale: 1.339412
    test 527 line 103 toUtmUps8.lat: 40.834541
    test 528 line 103 toUtmUps8.lon: 61.650750
    test 529 line 104 toUtmUps8.easting: 8385525.148166
    test 530 line 104 toUtmUps8.northing: 6924932.344306
    test 531 line 104 toUtmUps8.convergence: 59.087561
    test 532 line 104 toUtmUps8.scale: 1.990364
    test 533 line 104 toUtmUps8.lat: 26.273247
    test 534 line 104 toUtmUps8.lon: 74.926694
    test 535 line 105 toUtmUps8.easting: 2297510.791909
    test 536 line 105 toUtmUps8.northing: 2805666.962834
    test 537 line 105 toUtmUps8.convergence: 9.301553
    test 538 line 105 toUtmUps8.scale: 1.065508
    test 539 line 105 toUtmUps8.lat: 23.698347
    test 540 line 105 toUtmUps8.lon: 22.155657
    test skipped (16): line 106 toUtmUps8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtmUps8.easting: 317518.455546
    test 542 line 107 toUtmUps8.northing: 1097517.583745
    test 543 line 107 toUtmUps8.convergence: 0.499004
    test 544 line 107 toUtmUps8.scale: 1.000848
    test 545 line 107 toUtmUps8.lat: 9.916091
    test 546 line 107 toUtmUps8.lon: 2.895277
    test 547 line 108 toUtmUps8.easting: 3856035.184888
    test 548 line 108 toUtmUps8.northing: 9141364.450290
    test 549 line 108 toUtmUps8.convergence: 75.972763
    test 550 line 108 toUtmUps8.scale: 1.186786
    test 551 line 108 toUtmUps8.lat: 56.553876
    test 552 line 108 toUtmUps8.lon: 78.215077
    test 553 line 109 toUtmUps8.easting: 1457484.942823
    test 554 line 109 toUtmUps8.northing: 9385297.101973
    test 555 line 109 toUtmUps8.convergence: 66.784662
    test 556 line 109 toUtmUps8.scale: 1.025660
    test 557 line 109 toUtmUps8.lat: 75.957631
    test 558 line 109 toUtmUps8.lon: 67.407383
    test 559 line 110 toUtmUps8.easting: 1304934.901841
    test 560 line 110 toUtmUps8.northing: 3604655.155715
    test 561 line 110 toUtmUps8.convergence: 7.343989
    test 562 line 110 toUtmUps8.scale: 1.020672
    test 563 line 110 toUtmUps8.lat: 31.826531
    test 564 line 110 toUtmUps8.lon: 13.731050
    test 565 line 111 toUtmUps8.easting: 1399093.491792
    test 566 line 111 toUtmUps8.northing: 8314607.120342
    test 567 line 111 toUtmUps8.convergence: 38.630161
    test 568 line 111 toUtmUps8.scale: 1.023625
    test 569 line 111 toUtmUps8.lat: 70.542985
    test 570 line 111 toUtmUps8.lon: 40.282055
    test 571 line 112 toUtmUps8.easting: 356983.618540
    test 572 line 112 toUtmUps8.northing: 4282309.048994
    test 573 line 112 toUtmUps8.convergence: 2.561485
    test 574 line 112 toUtmUps8.scale: 1.001170
    test 575 line 112 toUtmUps8.lat: 38.617487
    test 576 line 112 toUtmUps8.lon: 4.099838
    test 577 line 113 toUtmUps8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtmUps8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtmUps8.convergence: 12.752154
    test 580 line 113 toUtmUps8.scale: 2.511357
    test 581 line 113 toUtmUps8.lat: 5.389447
    test 582 line 113 toUtmUps8.lon: 66.729612
    test 583 line 114 toUtmUps8.easting: 6367592.504007
    test 584 line 114 toUtmUps8.northing: 1200437.077672
    test 585 line 114 toUtmUps8.convergence: 8.338041
    test 586 line 114 toUtmUps8.scale: 1.546210
    test 587 line 114 toUtmUps8.lat: 6.995168
    test 588 line 114 toUtmUps8.lon: 50.014763
    test 589 line 115 toUtmUps8.easting: 4391263.676460
    test 590 line 115 toUtmUps8.northing: 6325455.989408
    test 591 line 115 toUtmUps8.convergence: 42.653541
    test 592 line 115 toUtmUps8.scale: 1.245560
    test 593 line 115 toUtmUps8.lat: 42.321894
    test 594 line 115 toUtmUps8.lon: 53.784040
    test 595 line 116 toUtmUps8.easting: 6209880.527527
    test 596 line 116 toUtmUps8.northing: 2154754.449747
    test 597 line 116 toUtmUps8.convergence: 14.919512
    test 598 line 116 toUtmUps8.scale: 1.516560
    test 599 line 116 toUtmUps8.lat: 12.698515
    test 600 line 116 toUtmUps8.lon: 50.242047
    test 601 line 117 toUtmUps8.easting: 1507053.688772
    test 602 line 117 toUtmUps8.northing: 6261383.513280
    test 603 line 117 toUtmUps8.convergence: 19.280373
    test 604 line 117 toUtmUps8.scale: 1.027584
    test 605 line 117 toUtmUps8.lat: 54.207636
    test 606 line 117 toUtmUps8.lon: 23.325731
    test 607 line 118 toUtmUps8.easting: 8332725.003777
    test 608 line 118 toUtmUps8.northing: 3002712.329753
    test 609 line 118 toUtmUps8.convergence: 24.059212
    test 610 line 118 toUtmUps8.scale: 1.990450
    test 611 line 118 toUtmUps8.lat: 13.224787
    test 612 line 118 toUtmUps8.lon: 62.426698
    test 613 line 119 toUtmUps8.easting: 3958910.085235
    test 614 line 119 toUtmUps8.northing: 3462284.926102
    test 615 line 119 toUtmUps8.convergence: 18.546398
    test 616 line 119 toUtmUps8.scale: 1.199351
    test 617 line 119 toUtmUps8.lat: 25.650282
    test 618 line 119 toUtmUps8.lon: 37.710391
    test skipped (17): line 120 toUtmUps8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtmUps8.easting: 496148.253731
    test 620 line 121 toUtmUps8.northing: 6388503.365043
    test 621 line 121 toUtmUps8.convergence: 6.970955
    test 622 line 121 toUtmUps8.scale: 1.002620
    test 623 line 121 toUtmUps8.lat: 57.367533
    test 624 line 121 toUtmUps8.lon: 8.260866
    test 625 line 122 toUtmUps8.easting: 7375792.085850
    test 626 line 122 toUtmUps8.northing: 5544624.072155
    test 627 line 122 toUtmUps8.convergence: 44.510851
    test 628 line 122 toUtmUps8.scale: 1.745898
    test 629 line 122 toUtmUps8.lat: 25.958757
    test 630 line 122 toUtmUps8.lon: 65.760477
    test 631 line 123 toUtmUps8.easting: 2826258.041979
    test 632 line 123 toUtmUps8.northing: 5167759.816959
    test 633 line 123 toUtmUps8.convergence: 23.783897
    test 634 line 123 toUtmUps8.scale: 1.099415
    test 635 line 123 toUtmUps8.lat: 41.395848
    test 636 line 123 toUtmUps8.lon: 33.661790
    test 637 line 124 toUtmUps8.easting: 3958563.378851
    test 638 line 124 toUtmUps8.northing: 8499923.231243
    test 639 line 124 toUtmUps8.convergence: 66.570945
    test 640 line 124 toUtmUps8.scale: 1.197296
    test 641 line 124 toUtmUps8.lat: 54.266617
    test 642 line 124 toUtmUps8.lon: 70.602199
    test 643 line 125 toUtmUps8.easting: 4408189.533462
    test 644 line 125 toUtmUps8.northing: 8046312.003642
    test 645 line 125 toUtmUps8.convergence: 62.216959
    test 646 line 125 toUtmUps8.scale: 1.246750
    test 647 line 125 toUtmUps8.lat: 49.840393
    test 648 line 125 toUtmUps8.lon: 68.036728
    test 649 line 126 toUtmUps8.easting: 3629225.627512
    test 650 line 126 toUtmUps8.northing: 6371258.454645
    test 651 line 126 toUtmUps8.convergence: 38.881675
    test 652 line 126 toUtmUps8.scale: 1.165511
    test 653 line 126 toUtmUps8.lat: 46.306035
    test 654 line 126 toUtmUps8.lon: 48.085828
    test 655 line 127 toUtmUps8.easting: 602838.450710
    test 656 line 127 toUtmUps8.northing: 4851370.637205
    test 657 line 127 toUtmUps8.convergence: 5.160395
    test 658 line 127 toUtmUps8.scale: 1.004073
    test 659 line 127 toUtmUps8.lat: 43.570988
    test 660 line 127 toUtmUps8.lon: 7.464494
    test 661 line 128 toUtmUps8.easting: 764616.665051
    test 662 line 128 toUtmUps8.northing: 2164299.337945
    test 663 line 128 toUtmUps8.convergence: 2.429300
    test 664 line 128 toUtmUps8.scale: 1.006835
    test 665 line 128 toUtmUps8.lat: 19.427290
    test 666 line 128 toUtmUps8.lon: 7.268247
    test 667 line 129 toUtmUps8.easting: 5048953.021931
    test 668 line 129 toUtmUps8.northing: 1885974.057398
    test 669 line 129 toUtmUps8.convergence: 11.459804
    test 670 line 129 toUtmUps8.scale: 1.332207
    test 671 line 129 toUtmUps8.lat: 12.713794
    test 672 line 129 toUtmUps8.lon: 42.507018
    test 673 line 130 toUtmUps8.easting: 2293996.601155
    test 674 line 130 toUtmUps8.northing: 2392408.644221
    test 675 line 130 toUtmUps8.convergence: 7.791838
    test 676 line 130 toUtmUps8.scale: 1.065348
    test 677 line 130 toUtmUps8.lat: 20.238782
    test 678 line 130 toUtmUps8.lon: 21.566068
    test 679 line 131 toUtmUps8.easting: 1530603.839418
    test 680 line 131 toUtmUps8.northing: 7287841.459898
    test 681 line 131 toUtmUps8.convergence: 27.502921
    test 682 line 131 toUtmUps8.scale: 1.028416
    test 683 line 131 toUtmUps8.lat: 62.367847
    test 684 line 131 toUtmUps8.lon: 30.438849
    test 685 line 132 toUtmUps8.easting: 2660000.093152
    test 686 line 132 toUtmUps8.northing: 5161982.213248
    test 687 line 132 toUtmUps8.convergence: 22.629836
    test 688 line 132 toUtmUps8.scale: 1.087851
    test 689 line 132 toUtmUps8.lat: 41.891569
    test 690 line 132 toUtmUps8.lon: 31.959547
    test 691 line 133 toUtmUps8.easting: 5037478.329414
    test 692 line 133 toUtmUps8.northing: 8768172.379908
    test 693 line 133 toUtmUps8.convergence: 73.511182
    test 694 line 133 toUtmUps8.scale: 1.325919
    test 695 line 133 toUtmUps8.lat: 47.664248
    test 696 line 133 toUtmUps8.lon: 77.630062
    test 697 line 134 toUtmUps8.easting: 2289650.957799
    test 698 line 134 toUtmUps8.northing: 8784328.593607
    test 699 line 134 toUtmUps8.convergence: 60.786067
    test 700 line 134 toUtmUps8.scale: 1.064346
    test 701 line 134 toUtmUps8.lat: 67.259559
    test 702 line 134 toUtmUps8.lon: 62.715293
    test 703 line 135 toUtmUps8.easting: 647913.889744
    test 704 line 135 toUtmUps8.northing: 6742382.228217
    test 705 line 135 toUtmUps8.convergence: 10.252667
    test 706 line 135 toUtmUps8.scale: 1.004748
    test 707 line 135 toUtmUps8.lat: 60.295381
    test 708 line 135 toUtmUps8.lon: 11.763097
    test 709 line 136 toUtmUps8.easting: 1118372.698566
    test 710 line 136 toUtmUps8.northing: 9040627.942263
    test 711 line 136 toUtmUps8.convergence: 48.936803
    test 712 line 136 toUtmUps8.scale: 1.014920
    test 713 line 136 toUtmUps8.lat: 76.878914
    test 714 line 136 toUtmUps8.lon: 49.685773
    test 715 line 137 toUtmUps8.easting: 440696.510070
    test 716 line 137 toUtmUps8.northing: 5500355.826297
    test 717 line 137 toUtmUps8.convergence: 4.636104
    test 718 line 137 toUtmUps8.scale: 1.001986
    test 719 line 137 toUtmUps8.lat: 49.495349
    test 720 line 137 toUtmUps8.lon: 6.087551
    test 721 line 138 toUtmUps8.easting: 601728.149727
    test 722 line 138 toUtmUps8.northing: 9095352.048149
    test 723 line 138 toUtmUps8.convergence: 33.435771
    test 724 line 138 toUtmUps8.scale: 1.004027
    test 725 line 138 toUtmUps8.lat: 80.297265
    test 726 line 138 toUtmUps8.lon: 33.816372
    test 727 line 139 toUtmUps8.easting: 3481444.777827
    test 728 line 139 toUtmUps8.northing: 291665.708749
    test 729 line 139 toUtmUps8.convergence: 1.314726
    test 730 line 139 toUtmUps8.scale: 1.153534
    test 731 line 139 toUtmUps8.lat: 2.286437
    test 732 line 139 toUtmUps8.lon: 29.855149
    test 733 line 140 toUtmUps8.easting: 3515304.901524
    test 734 line 140 toUtmUps8.northing: 1443981.882918
    test 735 line 140 toUtmUps8.convergence: 6.641638
    test 736 line 140 toUtmUps8.scale: 1.156509
    test 737 line 140 toUtmUps8.lat: 11.264457
    test 738 line 140 toUtmUps8.lon: 30.743907
    test 739 line 141 toUtmUps8.easting: 160012.186959
    test 740 line 141 toUtmUps8.northing: 3922609.253231
    test 741 line 141 toUtmUps8.convergence: 1.022225
    test 742 line 141 toUtmUps8.scale: 0.999916
    test 743 line 141 toUtmUps8.lat: 35.434073
    test 744 line 141 toUtmUps8.lon: 1.762795
    test 745 line 142 toUtmUps8.easting: 4163744.245622
    test 746 line 142 toUtmUps8.northing: 936884.674804
    test 747 line 142 toUtmUps8.convergence: 4.892559
    test 748 line 142 toUtmUps8.scale: 1.222164
    test 749 line 142 toUtmUps8.lat: 6.923695
    test 750 line 142 toUtmUps8.lon: 35.289456
    test 751 line 143 toUtmUps8.easting: 6155200.017926
    test 752 line 143 toUtmUps8.northing: 6926306.628390
    test 753 line 143 toUtmUps8.convergence: 55.103258
    test 754 line 143 toUtmUps8.scale: 1.500556
    test 755 line 143 toUtmUps8.lat: 36.129672
    test 756 line 143 toUtmUps8.lon: 67.533176
    test skipped (18): line 144 toUtmUps8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'
    test skipped (19): line 145 toUtmUps8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtmUps8.easting: 3173034.802372
    test 758 line 146 toUtmUps8.northing: 7263421.942957
    test 759 line 146 toUtmUps8.convergence: 45.215808
    test 760 line 146 toUtmUps8.scale: 1.125410
    test 761 line 146 toUtmUps8.lat: 53.907276
    test 762 line 146 toUtmUps8.lon: 51.252904
    test skipped (20): line 147 toUtmUps8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtmUps8.easting: 2415561.483230
    test 764 line 148 toUtmUps8.northing: 8813225.217097
    test 765 line 148 toUtmUps8.convergence: 62.548978
    test 766 line 148 toUtmUps8.scale: 1.071748
    test 767 line 148 toUtmUps8.lat: 66.444100
    test 768 line 148 toUtmUps8.lon: 64.532960
    test 769 line 149 toUtmUps8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtmUps8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtmUps8.convergence: 14.838483
    test 772 line 149 toUtmUps8.scale: 2.380716
    test 773 line 149 toUtmUps8.lat: 6.670965
    test 774 line 149 toUtmUps8.lon: 65.660408
    test 775 line 150 toUtmUps8.easting: 727939.438391
    test 776 line 150 toUtmUps8.northing: 3684363.236810
    test 777 line 150 toUtmUps8.convergence: 4.266227
    test 778 line 150 toUtmUps8.scale: 1.006140
    test 779 line 150 toUtmUps8.lat: 33.054057
    test 780 line 150 toUtmUps8.lon: 7.787458
    test 781 line 151 toUtmUps8.easting: 1250765.991085
    test 782 line 151 toUtmUps8.northing: 792869.242719
    test 783 line 151 toUtmUps8.convergence: 1.396497
    test 784 line 151 toUtmUps8.scale: 1.019026
    test 785 line 151 toUtmUps8.lat: 7.035525
    test 786 line 151 toUtmUps8.lon: 11.253707
    test 787 line 152 toUtmUps8.easting: 710421.705887
    test 788 line 152 toUtmUps8.northing: 5019406.075928
    test 789 line 152 toUtmUps8.convergence: 6.393949
    test 790 line 152 toUtmUps8.scale: 1.005812
    test 791 line 152 toUtmUps8.lat: 44.971340
    test 792 line 152 toUtmUps8.lon: 9.009304
    test 793 line 153 toUtmUps8.easting: 4600995.074643
    test 794 line 153 toUtmUps8.northing: 4505712.084593
    test 795 line 153 toUtmUps8.convergence: 27.997458
    test 796 line 153 toUtmUps8.scale: 1.271841
    test 797 line 153 toUtmUps8.lat: 30.821397
    test 798 line 153 toUtmUps8.lon: 45.970577
    test 799 line 154 toUtmUps8.easting: 557642.627782
    test 800 line 154 toUtmUps8.northing: 7006911.251644
    test 801 line 154 toUtmUps8.convergence: 9.769903
    test 802 line 154 toUtmUps8.scale: 1.003411
    test 803 line 154 toUtmUps8.lat: 62.763886
    test 804 line 154 toUtmUps8.lon: 10.960144
    test 805 line 155 toUtmUps8.easting: 4635062.294291
    test 806 line 155 toUtmUps8.northing: 2702556.153311
    test 807 line 155 toUtmUps8.convergence: 15.779547
    test 808 line 155 toUtmUps8.scale: 1.277178
    test 809 line 155 toUtmUps8.lat: 18.888611
    test 810 line 155 toUtmUps8.lon: 41.009871
    test skipped (21): line 156 toUtmUps8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtmUps8.easting: 882126.661736
    test 812 line 157 toUtmUps8.northing: 7947612.369506
    test 813 line 157 toUtmUps8.convergence: 22.429487
    test 814 line 157 toUtmUps8.scale: 1.009132
    test 815 line 157 toUtmUps8.lat: 70.063902
    test 816 line 157 toUtmUps8.lon: 23.705255
    test skipped (22): line 158 toUtmUps8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtmUps8.easting: 6500508.399850
    test 818 line 159 toUtmUps8.northing: 6956476.342368
    test 819 line 159 toUtmUps8.convergence: 56.237116
    test 820 line 159 toUtmUps8.scale: 1.563162
    test 821 line 159 toUtmUps8.lat: 34.551257
    test 822 line 159 toUtmUps8.lon: 69.111091
    test 823 line 160 toUtmUps8.easting: 3884036.641314
    test 824 line 160 toUtmUps8.northing: 6890167.411733
    test 825 line 160 toUtmUps8.convergence: 45.760130
    test 826 line 160 toUtmUps8.scale: 1.190167
    test 827 line 160 toUtmUps8.lat: 47.929051
    test 828 line 160 toUtmUps8.lon: 54.103418
    test 829 line 161 toUtmUps8.easting: 217855.546078
    test 830 line 161 toUtmUps8.northing: 6184108.122568
    test 831 line 161 toUtmUps8.convergence: 2.870993
    test 832 line 161 toUtmUps8.scale: 1.000182
    test 833 line 161 toUtmUps8.lat: 55.753536
    test 834 line 161 toUtmUps8.lon: 3.471798
    test skipped (23): line 162 toUtmUps8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtmUps8.easting: 3469855.989805
    test 836 line 163 toUtmUps8.northing: 7723193.799228
    test 837 line 163 toUtmUps8.convergence: 53.114700
    test 838 line 163 toUtmUps8.scale: 1.150540
    test 839 line 163 toUtmUps8.lat: 54.510125
    test 840 line 163 toUtmUps8.lon: 58.556056
    test skipped (24): line 164 toUtmUps8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtmUps8.easting: 5798639.662224
    test 842 line 165 toUtmUps8.northing: 5305387.640916
    test 843 line 165 toUtmUps8.convergence: 38.617257
    test 844 line 165 toUtmUps8.scale: 1.442263
    test 845 line 165 toUtmUps8.lat: 30.911943
    test 846 line 165 toUtmUps8.lon: 57.114102
    test 847 line 166 toUtmUps8.easting: 9464.934388
    test 848 line 166 toUtmUps8.northing: 6489121.624944
    test 849 line 166 toUtmUps8.convergence: 0.138696
    test 850 line 166 toUtmUps8.scale: 0.999601
    test 851 line 166 toUtmUps8.lat: 58.542493
    test 852 line 166 toUtmUps8.lon: 0.162593
    test skipped (25): line 167 toUtmUps8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtmUps8.easting: 2719653.543469
    test 854 line 168 toUtmUps8.northing: 9362389.163495
    test 855 line 168 toUtmUps8.convergence: 76.049670
    test 856 line 168 toUtmUps8.scale: 1.091315
    test 857 line 168 toUtmUps8.lat: 65.692275
    test 858 line 168 toUtmUps8.lon: 77.241377
    test 859 line 169 toUtmUps8.easting: 4845341.924698
    test 860 line 169 toUtmUps8.northing: 8710522.326901
    test 861 line 169 toUtmUps8.convergence: 72.320942
    test 862 line 169 toUtmUps8.scale: 1.300382
    test 863 line 169 toUtmUps8.lat: 48.806211
    test 864 line 169 toUtmUps8.lon: 76.486365
    test skipped (26): line 170 toUtmUps8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtmUps8.easting: 7074299.823000
    test 866 line 171 toUtmUps8.northing: 1648736.065055
    test 867 line 171 toUtmUps8.convergence: 12.145925
    test 868 line 171 toUtmUps8.scale: 1.687551
    test 869 line 171 toUtmUps8.lat: 8.766053
    test 870 line 171 toUtmUps8.lon: 54.367539
    test 871 line 172 toUtmUps8.easting: 3689072.579308
    test 872 line 172 toUtmUps8.northing: 2230802.665211
    test 873 line 172 toUtmUps8.convergence: 10.856248
    test 874 line 172 toUtmUps8.scale: 1.172689
    test 875 line 172 toUtmUps8.lat: 17.095495
    test 876 line 172 toUtmUps8.lon: 33.059128
    test 877 line 173 toUtmUps8.easting: 8102565.885587
    test 878 line 173 toUtmUps8.northing: 5167396.617580
    test 879 line 173 toUtmUps8.convergence: 42.324886
    test 880 line 173 toUtmUps8.scale: 1.921927
    test 881 line 173 toUtmUps8.lat: 22.142861
    test 882 line 173 toUtmUps8.lon: 67.200684
    test 883 line 174 toUtmUps8.easting: 8181271.353564
    test 884 line 174 toUtmUps8.northing: 4425436.547185
    test 885 line 174 toUtmUps8.convergence: 35.900845
    test 886 line 174 toUtmUps8.scale: 1.945017
    test 887 line 174 toUtmUps8.lat: 19.222623
    test 888 line 174 toUtmUps8.lon: 65.180785
    test 889 line 175 toUtmUps8.easting: 767067.394003
    test 890 line 175 toUtmUps8.northing: 3701745.857296
    test 891 line 175 toUtmUps8.convergence: 4.519201
    test 892 line 175 toUtmUps8.scale: 1.006863
    test 893 line 175 toUtmUps8.lat: 33.182474
    test 894 line 175 toUtmUps8.lon: 8.216952
    test 895 line 176 toUtmUps8.easting: 6688114.168572
    test 896 line 176 toUtmUps8.northing: 2052857.299639
    test 897 line 176 toUtmUps8.convergence: 14.766191
    test 898 line 176 toUtmUps8.scale: 1.607200
    test 899 line 176 toUtmUps8.lat: 11.417963
    test 900 line 176 toUtmUps8.lon: 52.808691
    test 901 line 177 toUtmUps8.easting: 5608408.773761
    test 902 line 177 toUtmUps8.northing: 3859055.659110
    test 903 line 177 toUtmUps8.convergence: 26.244151
    test 904 line 177 toUtmUps8.scale: 1.413463
    test 905 line 177 toUtmUps8.lat: 23.836688
    test 906 line 177 toUtmUps8.lon: 50.500180
    test 907 line 178 toUtmUps8.easting: 3836942.765275
    test 908 line 178 toUtmUps8.northing: 6415467.634326
    test 909 line 178 toUtmUps8.convergence: 40.575885
    test 910 line 178 toUtmUps8.scale: 1.185615
    test 911 line 178 toUtmUps8.lat: 45.550020
    test 912 line 178 toUtmUps8.lon: 50.148036
    test 913 line 179 toUtmUps8.easting: 1298730.366025
    test 914 line 179 toUtmUps8.northing: 6021453.000792
    test 915 line 179 toUtmUps8.convergence: 15.613320
    test 916 line 179 toUtmUps8.scale: 1.020367
    test 917 line 179 toUtmUps8.lat: 52.746079
    test 918 line 179 toUtmUps8.lon: 19.343926
    test 919 line 180 toUtmUps8.easting: 416934.289208
    test 920 line 180 toUtmUps8.northing: 7295683.451705
    test 921 line 180 toUtmUps8.convergence: 8.238232
    test 922 line 180 toUtmUps8.scale: 1.001729
    test 923 line 180 toUtmUps8.lat: 65.513348
    test 924 line 180 toUtmUps8.lon: 9.039529
    test 925 line 181 toUtmUps8.easting: 4336076.850889
    test 926 line 181 toUtmUps8.northing: 7617975.722779
    test 927 line 181 toUtmUps8.convergence: 56.537088
    test 928 line 181 toUtmUps8.scale: 1.238582
    test 929 line 181 toUtmUps8.lat: 48.709795
    test 930 line 181 toUtmUps8.lon: 63.554005
    test 931 line 182 toUtmUps8.easting: 168047.336980
    test 932 line 182 toUtmUps8.northing: 2185000.046530
    test 933 line 182 toUtmUps8.convergence: 0.542187
    test 934 line 182 toUtmUps8.scale: 0.999949
    test 935 line 182 toUtmUps8.lat: 19.753509
    test 936 line 182 toUtmUps8.lon: 1.603846
    test 937 line 183 toUtmUps8.easting: 8276281.328790
    test 938 line 183 toUtmUps8.northing: 263444.350545
    test 939 line 183 toUtmUps8.convergence: 2.071435
    test 940 line 183 toUtmUps8.scale: 1.980314
    test 941 line 183 toUtmUps8.lat: 1.202816
    test 942 line 183 toUtmUps8.lon: 59.377276
    test 943 line 184 toUtmUps8.easting: 4772573.810710
    test 944 line 184 toUtmUps8.northing: 6765710.336002
    test 945 line 184 toUtmUps8.convergence: 48.857561
    test 946 line 184 toUtmUps8.scale: 1.291911
    test 947 line 184 toUtmUps8.lat: 42.564975
    test 948 line 184 toUtmUps8.lon: 59.356947
    test 949 line 185 toUtmUps8.easting: 5427755.074639
    test 950 line 185 toUtmUps8.northing: 1556055.820924
    test 951 line 185 toUtmUps8.convergence: 9.862178
    test 952 line 185 toUtmUps8.scale: 1.387394
    test 953 line 185 toUtmUps8.lat: 10.090572
    test 954 line 185 toUtmUps8.lon: 44.604132
    test 955 line 186 toUtmUps8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtmUps8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtmUps8.convergence: 50.784827
    test 958 line 186 toUtmUps8.scale: 3.149567
    test 959 line 186 toUtmUps8.lat: 14.133028
    test 960 line 186 toUtmUps8.lon: 78.097533
    test 961 line 187 toUtmUps8.easting: 7152433.802688
    test 962 line 187 toUtmUps8.northing: 761390.695844
    test 963 line 187 toUtmUps8.convergence: 5.607350
    test 964 line 187 toUtmUps8.scale: 1.705261
    test 965 line 187 toUtmUps8.lat: 4.031123
    test 966 line 187 toUtmUps8.lon: 54.048782
    test 967 line 188 toUtmUps8.easting: 3105651.390901
    test 968 line 188 toUtmUps8.northing: 9426026.169064
    test 969 line 188 toUtmUps8.convergence: 78.750206
    test 970 line 188 toUtmUps8.scale: 1.119737
    test 971 line 188 toUtmUps8.lat: 62.746603
    test 972 line 188 toUtmUps8.lon: 79.968641
    test 973 line 189 toUtmUps8.easting: 2959009.639022
    test 974 line 189 toUtmUps8.northing: 8339242.269282
    test 975 line 189 toUtmUps8.convergence: 58.460865
    test 976 line 189 toUtmUps8.scale: 1.108554
    test 977 line 189 toUtmUps8.lat: 60.626429
    test 978 line 189 toUtmUps8.lon: 61.851551
    test 979 line 190 toUtmUps8.easting: 8640472.267145
    test 980 line 190 toUtmUps8.northing: 6230320.417931
    test 981 line 190 toUtmUps8.convergence: 52.816810
    test 982 line 190 toUtmUps8.scale: 2.062973
    test 983 line 190 toUtmUps8.lat: 23.600626
    test 984 line 190 toUtmUps8.lon: 72.811634
    test 985 line 191 toUtmUps8.easting: 811352.108932
    test 986 line 191 toUtmUps8.northing: 9816129.813481
    test 987 line 191 toUtmUps8.convergence: 77.299184
    test 988 line 191 toUtmUps8.scale: 1.007651
    test 989 line 191 toUtmUps8.lat: 82.572236
    test 990 line 191 toUtmUps8.lon: 77.402323
    test 991 line 192 toUtmUps8.easting: 6521874.973458
    test 992 line 192 toUtmUps8.northing: 1053612.479744
    test 993 line 192 toUtmUps8.convergence: 7.407328
    test 994 line 192 toUtmUps8.scale: 1.575529
    test 995 line 192 toUtmUps8.lat: 6.030051
    test 996 line 192 toUtmUps8.lon: 50.783505
    test 997 line 193 toUtmUps8.easting: 3477983.997875
    test 998 line 193 toUtmUps8.northing: 5651613.325947
    test 999 line 193 toUtmUps8.convergence: 31.530673
    test 1000 line 193 toUtmUps8.scale: 1.151875
    test 1001 line 193 toUtmUps8.lat: 42.411523
    test 1002 line 193 toUtmUps8.lon: 42.258009
    test 1003 line 194 toUtmUps8.easting: 629892.822243
    test 1004 line 194 toUtmUps8.northing: 3283914.910451
    test 1005 line 194 toUtmUps8.convergence: 3.210482
    test 1006 line 194 toUtmUps8.scale: 1.004499
    test 1007 line 194 toUtmUps8.lat: 29.526120
    test 1008 line 194 toUtmUps8.lon: 6.493069
    test 1009 line 195 toUtmUps8.easting: 3381879.687227
    test 1010 line 195 toUtmUps8.northing: 5103629.325665
    test 1011 line 195 toUtmUps8.convergence: 26.748108
    test 1012 line 195 toUtmUps8.scale: 1.143559
    test 1013 line 195 toUtmUps8.lat: 39.021853
    test 1014 line 195 toUtmUps8.lon: 38.641779
    test 1015 line 196 toUtmUps8.easting: 2815986.534177
    test 1016 line 196 toUtmUps8.northing: 9387029.120718
    test 1017 line 196 toUtmUps8.convergence: 76.967262
    test 1018 line 196 toUtmUps8.scale: 1.098032
    test 1019 line 196 toUtmUps8.lat: 64.971850
    test 1020 line 196 toUtmUps8.lon: 78.151893
    test 1021 line 197 toUtmUps8.easting: 3398195.889603
    test 1022 line 197 toUtmUps8.northing: 9138936.031490
    test 1023 line 197 toUtmUps8.convergence: 74.477499
    test 1024 line 197 toUtmUps8.scale: 1.144009
    test 1025 line 197 toUtmUps8.lat: 59.961819
    test 1026 line 197 toUtmUps8.lon: 76.473422
    test 1027 line 198 toUtmUps8.easting: 2421734.754637
    test 1028 line 198 toUtmUps8.northing: 5002372.094991
    test 1029 line 198 toUtmUps8.convergence: 20.017082
    test 1030 line 198 toUtmUps8.scale: 1.072592
    test 1031 line 198 toUtmUps8.lat: 41.374040
    test 1032 line 198 toUtmUps8.lon: 28.848343
    test 1033 line 199 toUtmUps8.easting: 2360869.895525
    test 1034 line 199 toUtmUps8.northing: 9553298.449536
    test 1035 line 199 toUtmUps8.convergence: 78.848205
    test 1036 line 199 toUtmUps8.scale: 1.068453
    test 1037 line 199 toUtmUps8.lat: 68.946087
    test 1038 line 199 toUtmUps8.lon: 79.574523
    test skipped (27): line 200 toUtmUps8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtmUps8.easting: 1327758.704795
    test 1040 line 201 toUtmUps8.northing: 2375509.241683
    test 1041 line 201 toUtmUps8.convergence: 4.617572
    test 1042 line 201 toUtmUps8.scale: 1.021465
    test 1043 line 201 toUtmUps8.lat: 21.000252
    test 1044 line 201 toUtmUps8.lon: 12.697444
    test 1045 line 202 toUtmUps8.easting: 2070860.327644
    test 1046 line 202 toUtmUps8.northing: 8604500.719581
    test 1047 line 202 toUtmUps8.convergence: 54.722761
    test 1048 line 202 toUtmUps8.scale: 1.052469
    test 1049 line 202 toUtmUps8.lat: 68.015227
    test 1050 line 202 toUtmUps8.lon: 56.732419
    test 1051 line 203 toUtmUps8.easting: 6564776.654864
    test 1052 line 203 toUtmUps8.northing: 8171207.177379
    test 1053 line 203 toUtmUps8.convergence: 69.237523
    test 1054 line 203 toUtmUps8.scale: 1.573894
    test 1055 line 203 toUtmUps8.lat: 37.423675
    test 1056 line 203 toUtmUps8.lon: 76.947359
    test 1057 line 204 toUtmUps8.easting: 592653.553821
    test 1058 line 204 toUtmUps8.northing: 6125529.810052
    test 1059 line 204 toUtmUps8.convergence: 7.600785
    test 1060 line 204 toUtmUps8.scale: 1.003912
    test 1061 line 204 toUtmUps8.lat: 54.922707
    test 1062 line 204 toUtmUps8.lon: 9.260818
    test 1063 line 205 toUtmUps8.easting: 693459.671821
    test 1064 line 205 toUtmUps8.northing: 6943779.991032
    test 1065 line 205 toUtmUps8.convergence: 11.787587
    test 1066 line 205 toUtmUps8.scale: 1.005496
    test 1067 line 205 toUtmUps8.lat: 61.982810
    test 1068 line 205 toUtmUps8.lon: 13.299659
    test 1069 line 206 toUtmUps8.easting: 1838956.187625
    test 1070 line 206 toUtmUps8.northing: 3511959.612381
    test 1071 line 206 toUtmUps8.convergence: 9.844313
    test 1072 line 206 toUtmUps8.scale: 1.041603
    test 1073 line 206 toUtmUps8.lat: 30.324214
    test 1074 line 206 toUtmUps8.lon: 18.959769
    test 1075 line 207 toUtmUps8.easting: 4460690.884597
    test 1076 line 207 toUtmUps8.northing: 5541873.235403
    test 1077 line 207 toUtmUps8.convergence: 35.768613
    test 1078 line 207 toUtmUps8.scale: 1.254179
    test 1079 line 207 toUtmUps8.lat: 37.629667
    test 1080 line 207 toUtmUps8.lon: 49.649131
    test 1081 line 208 toUtmUps8.easting: 2311168.998941
    test 1082 line 208 toUtmUps8.northing: 9480561.869119
    test 1083 line 208 toUtmUps8.convergence: 76.828257
    test 1084 line 208 toUtmUps8.scale: 1.065556
    test 1085 line 208 toUtmUps8.lat: 69.225574
    test 1086 line 208 toUtmUps8.lon: 77.656135
    test 1087 line 209 toUtmUps8.easting: 4111775.114451
    test 1088 line 209 toUtmUps8.northing: 6509014.348792
    test 1089 line 209 toUtmUps8.convergence: 43.052130
    test 1090 line 209 toUtmUps8.scale: 1.214125
    test 1091 line 209 toUtmUps8.lat: 44.698478
    test 1092 line 209 toUtmUps8.lon: 52.979304
    test 1093 line 210 toUtmUps8.easting: 75358.261962
    test 1094 line 210 toUtmUps8.northing: 7711258.662251
    test 1095 line 210 toUtmUps8.convergence: 1.806297
    test 1096 line 210 toUtmUps8.scale: 0.999669
    test 1097 line 210 toUtmUps8.lat: 69.499594
    test 1098 line 210 toUtmUps8.lon: 1.928336
    test skipped (28): line 211 toUtmUps8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtmUps8.easting: 954378.415174
    test 1100 line 212 toUtmUps8.northing: 7449110.669807
    test 1101 line 212 toUtmUps8.convergence: 19.380657
    test 1102 line 212 toUtmUps8.scale: 1.010768
    test 1103 line 212 toUtmUps8.lat: 65.699839
    test 1104 line 212 toUtmUps8.lon: 21.104725
    test 1105 line 213 toUtmUps8.easting: 720971.793706
    test 1106 line 213 toUtmUps8.northing: 5265195.121555
    test 1107 line 213 toUtmUps8.convergence: 7.002995
    test 1108 line 213 toUtmUps8.scale: 1.005995
    test 1109 line 213 toUtmUps8.lat: 47.143648
    test 1110 line 213 toUtmUps8.lon: 9.512189
    test 1111 line 214 toUtmUps8.easting: 561561.493937
    test 1112 line 214 toUtmUps8.northing: 989910.236221
    test 1113 line 214 toUtmUps8.convergence: 0.793118
    test 1114 line 214 toUtmUps8.scale: 1.003505
    test 1115 line 214 toUtmUps8.lat: 8.920167
    test 1116 line 214 toUtmUps8.lon: 5.101513
    test 1117 line 215 toUtmUps8.easting: 3446829.634468
    test 1118 line 215 toUtmUps8.northing: 9232868.155664
    test 1119 line 215 toUtmUps8.convergence: 76.279075
    test 1120 line 215 toUtmUps8.scale: 1.148263
    test 1121 line 215 toUtmUps8.lat: 59.778971
    test 1122 line 215 toUtmUps8.lon: 78.080322
    test skipped (29): line 216 toUtmUps8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtmUps8.easting: 8973188.480293
    test 1124 line 217 toUtmUps8.northing: 7042230.087021
    test 1125 line 217 toUtmUps8.convergence: 60.872456
    test 1126 line 217 toUtmUps8.scale: 2.156098
    test 1127 line 217 toUtmUps8.lat: 24.310973
    test 1128 line 217 toUtmUps8.lon: 76.823777
    test 1129 line 218 toUtmUps8.easting: 126314.191618
    test 1130 line 218 toUtmUps8.northing: 396006.687921
    test 1131 line 218 toUtmUps8.convergence: 0.071065
    test 1132 line 218 toUtmUps8.scale: 0.999798
    test 1133 line 218 toUtmUps8.lat: 3.582041
    test 1134 line 218 toUtmUps8.lon: 1.137286
    test 1135 line 219 toUtmUps8.easting: 5247652.345647
    test 1136 line 219 toUtmUps8.northing: 8670513.359752
    test 1137 line 219 toUtmUps8.convergence: 72.700498
    test 1138 line 219 toUtmUps8.scale: 1.355272
    test 1139 line 219 toUtmUps8.lat: 46.124233
    test 1140 line 219 toUtmUps8.lon: 77.313118
    test skipped (30): line 220 toUtmUps8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtmUps8.easting: 6300112.758236
    test 1142 line 221 toUtmUps8.northing: 93835.917364
    test 1143 line 221 toUtmUps8.convergence: 0.644805
    test 1144 line 221 toUtmUps8.scale: 1.534073
    test 1145 line 221 toUtmUps8.lat: 0.553171
    test 1146 line 221 toUtmUps8.lon: 49.117104
    test 1147 line 222 toUtmUps8.easting: 3894813.593782
    test 1148 line 222 toUtmUps8.northing: 4833832.341027
    test 1149 line 222 toUtmUps8.convergence: 27.453298
    test 1150 line 222 toUtmUps8.scale: 1.192135
    test 1151 line 222 toUtmUps8.lat: 35.361587
    test 1152 line 222 toUtmUps8.lon: 41.860599
    test 1153 line 223 toUtmUps8.easting: 402511.346712
    test 1154 line 223 toUtmUps8.northing: 3520621.561911
    test 1155 line 223 toUtmUps8.convergence: 2.238474
    test 1156 line 223 toUtmUps8.scale: 1.001599
    test 1157 line 223 toUtmUps8.lat: 31.750314
    test 1158 line 223 toUtmUps8.lon: 4.248167
    test 1159 line 224 toUtmUps8.easting: 5357378.503148
    test 1160 line 224 toUtmUps8.northing: 2772997.602234
    test 1161 line 224 toUtmUps8.convergence: 17.823560
    test 1162 line 224 toUtmUps8.scale: 1.376031
    test 1163 line 224 toUtmUps8.lat: 17.924336
    test 1164 line 224 toUtmUps8.lon: 46.096402
    test 1165 line 225 toUtmUps8.easting: 2807553.985866
    test 1166 line 225 toUtmUps8.northing: 8177847.980275
    test 1167 line 225 toUtmUps8.convergence: 54.680045
    test 1168 line 225 toUtmUps8.scale: 1.097531
    test 1169 line 225 toUtmUps8.lat: 60.931488
    test 1170 line 225 toUtmUps8.lon: 58.221214
    test skipped (31): line 226 toUtmUps8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'
    test skipped (32): line 227 toUtmUps8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtmUps8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtmUps8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtmUps8.convergence: 42.613968
    test 1174 line 228 toUtmUps8.scale: 3.314412
    test 1175 line 228 toUtmUps8.lat: 11.709763
    test 1176 line 228 toUtmUps8.lon: 76.760295
    test 1177 line 229 toUtmUps8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtmUps8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtmUps8.convergence: 33.383025
    test 1180 line 229 toUtmUps8.scale: 2.724754
    test 1181 line 229 toUtmUps8.lat: 12.009498
    test 1182 line 229 toUtmUps8.lon: 71.782351
    test skipped (33): line 230 toUtmUps8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtmUps8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtmUps8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtmUps8.convergence: 23.145404
    test 1186 line 231 toUtmUps8.scale: 2.998408
    test 1187 line 231 toUtmUps8.lat: 7.721128
    test 1188 line 231 toUtmUps8.lon: 71.662731
    test 1189 line 232 toUtmUps8.easting: 4411584.447941
    test 1190 line 232 toUtmUps8.northing: 4956173.694407
    test 1191 line 232 toUtmUps8.convergence: 30.713919
    test 1192 line 232 toUtmUps8.scale: 1.248736
    test 1193 line 232 toUtmUps8.lat: 34.295026
    test 1194 line 232 toUtmUps8.lon: 46.442191
    test 1195 line 233 toUtmUps8.easting: 672108.897905
    test 1196 line 233 toUtmUps8.northing: 4751554.657054
    test 1197 line 233 toUtmUps8.convergence: 5.569178
    test 1198 line 233 toUtmUps8.scale: 1.005162
    test 1199 line 233 toUtmUps8.lat: 42.622496
    test 1200 line 233 toUtmUps8.lon: 8.193605
    test 1201 line 234 toUtmUps8.easting: 5022964.290579
    test 1202 line 234 toUtmUps8.northing: 6860418.199502
    test 1203 line 234 toUtmUps8.convergence: 50.862230
    test 1204 line 234 toUtmUps8.scale: 1.324925
    test 1205 line 234 toUtmUps8.lat: 41.667780
    test 1206 line 234 toUtmUps8.lon: 61.518288
    test 1207 line 235 toUtmUps8.easting: 1669655.595207
    test 1208 line 235 toUtmUps8.northing: 4152086.537021
    test 1209 line 235 toUtmUps8.convergence: 11.110237
    test 1210 line 235 toUtmUps8.scale: 1.034138
    test 1211 line 235 toUtmUps8.lat: 36.060369
    test 1212 line 235 toUtmUps8.lon: 18.444112
    test 1213 line 236 toUtmUps8.easting: 6055876.729655
    test 1214 line 236 toUtmUps8.northing: 4896837.552619
    test 1215 line 236 toUtmUps8.convergence: 35.799747
    test 1216 line 236 toUtmUps8.scale: 1.485967
    test 1217 line 236 toUtmUps8.lat: 27.948091
    test 1218 line 236 toUtmUps8.lon: 56.816429
    test 1219 line 237 toUtmUps8.easting: 1209214.164379
    test 1220 line 237 toUtmUps8.northing: 7266409.859178
    test 1221 line 237 toUtmUps8.convergence: 22.319633
    test 1222 line 237 toUtmUps8.scale: 1.017554
    test 1223 line 237 toUtmUps8.lat: 63.386030
    test 1224 line 237 toUtmUps8.lon: 24.662716
    test 1225 line 238 toUtmUps8.easting: 5154564.559584
    test 1226 line 238 toUtmUps8.northing: 698118.349975
    test 1227 line 238 toUtmUps8.convergence: 4.242360
    test 1228 line 238 toUtmUps8.scale: 1.347481
    test 1229 line 238 toUtmUps8.lat: 4.680922
    test 1230 line 238 toUtmUps8.lon: 42.114426
    test 1231 line 239 toUtmUps8.easting: 2695149.806543
    test 1232 line 239 toUtmUps8.northing: 8208197.765605
    test 1233 line 239 toUtmUps8.convergence: 54.178615
    test 1234 line 239 toUtmUps8.scale: 1.089730
    test 1235 line 239 toUtmUps8.lat: 61.826625
    test 1236 line 239 toUtmUps8.lon: 57.525096
    test 1237 line 240 toUtmUps8.easting: 3394792.327820
    test 1238 line 240 toUtmUps8.northing: 3217583.415552
    test 1239 line 240 toUtmUps8.convergence: 15.165863
    test 1240 line 240 toUtmUps8.scale: 1.145285
    test 1241 line 240 toUtmUps8.lat: 25.104353
    test 1242 line 240 toUtmUps8.lon: 32.528660
    test 1243 line 241 toUtmUps8.easting: 1429160.966985
    test 1244 line 241 toUtmUps8.northing: 8212685.362032
    test 1245 line 241 toUtmUps8.convergence: 37.484904
    test 1246 line 241 toUtmUps8.scale: 1.024676
    test 1247 line 241 toUtmUps8.lat: 69.678351
    test 1248 line 241 toUtmUps8.lon: 39.275513
    test skipped (34): line 242 toUtmUps8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtmUps8.easting: 1990722.928606
    test 1250 line 243 toUtmUps8.northing: 7569202.065162
    test 1251 line 243 toUtmUps8.convergence: 37.075276
    test 1252 line 243 toUtmUps8.scale: 1.048486
    test 1253 line 243 toUtmUps8.lat: 62.300208
    test 1254 line 243 toUtmUps8.lon: 40.474051
    test 1255 line 244 toUtmUps8.easting: 1554980.099559
    test 1256 line 244 toUtmUps8.northing: 1449423.919586
    test 1257 line 244 toUtmUps8.convergence: 3.188328
    test 1258 line 244 toUtmUps8.scale: 1.029664
    test 1259 line 244 toUtmUps8.lat: 12.721776
    test 1260 line 244 toUtmUps8.lon: 14.190003
    test 1261 line 245 toUtmUps8.easting: 785205.450196
    test 1262 line 245 toUtmUps8.northing: 5575158.423096
    test 1263 line 245 toUtmUps8.convergence: 8.388417
    test 1264 line 245 toUtmUps8.scale: 1.007181
    test 1265 line 245 toUtmUps8.lat: 49.811296
    test 1266 line 245 toUtmUps8.lon: 10.925011
    test 1267 line 246 toUtmUps8.easting: 3310405.988313
    test 1268 line 246 toUtmUps8.northing: 5955022.233881
    test 1269 line 246 toUtmUps8.convergence: 33.007587
    test 1270 line 246 toUtmUps8.scale: 1.137141
    test 1271 line 246 toUtmUps8.lat: 45.132680
    test 1272 line 246 toUtmUps8.lon: 42.478624
    test 1273 line 247 toUtmUps8.easting: 4733460.960666
    test 1274 line 247 toUtmUps8.northing: 129034.889816
    test 1275 line 247 toUtmUps8.convergence: 0.737551
    test 1276 line 247 toUtmUps8.scale: 1.290439
    test 1277 line 247 toUtmUps8.lat: 0.904279
    test 1278 line 247 toUtmUps8.lon: 39.078412
    test 1279 line 248 toUtmUps8.easting: 3322708.343909
    test 1280 line 248 toUtmUps8.northing: 3864738.078742
    test 1281 line 248 toUtmUps8.convergence: 18.472566
    test 1282 line 248 toUtmUps8.scale: 1.138838
    test 1283 line 248 toUtmUps8.lat: 30.163605
    test 1284 line 248 toUtmUps8.lon: 33.577996
    test skipped (35): line 249 toUtmUps8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'
    test skipped (36): line 250 toUtmUps8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'
    test skipped (37): line 251 toUtmUps8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtmUps8.easting: 2212701.180192
    test 1286 line 252 toUtmUps8.northing: 650348.100229
    test 1287 line 252 toUtmUps8.convergence: 1.970441
    test 1288 line 252 toUtmUps8.scale: 1.060830
    test 1289 line 252 toUtmUps8.lat: 5.542998
    test 1290 line 252 toUtmUps8.lon: 19.589578
    test 1291 line 253 toUtmUps8.easting: 6890222.326618
    test 1292 line 253 toUtmUps8.northing: 7506813.499547
    test 1293 line 253 toUtmUps8.convergence: 62.684825
    test 1294 line 253 toUtmUps8.scale: 1.638488
    test 1295 line 253 toUtmUps8.lat: 34.237147
    test 1296 line 253 toUtmUps8.lon: 73.678164
    test 1297 line 254 toUtmUps8.easting: 6692260.067325
    test 1298 line 254 toUtmUps8.northing: 4244174.008110
    test 1299 line 254 toUtmUps8.convergence: 31.812920
    test 1300 line 254 toUtmUps8.scale: 1.604640
    test 1301 line 254 toUtmUps8.lat: 22.704949
    test 1302 line 254 toUtmUps8.lon: 57.877010
    test 1303 line 255 toUtmUps8.easting: 1225564.137190
    test 1304 line 255 toUtmUps8.northing: 4778923.924144
    test 1305 line 255 toUtmUps8.convergence: 10.083419
    test 1306 line 255 toUtmUps8.scale: 1.018134
    test 1307 line 255 toUtmUps8.lat: 42.192424
    test 1308 line 255 toUtmUps8.lon: 14.828196
    test 1309 line 256 toUtmUps8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtmUps8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtmUps8.convergence: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtmUps8.scale: 3.535170
    test 1313 line 256 toUtmUps8.lat: 11.481151
    test 1314 line 256 toUtmUps8.lon: 78.189236
    test 1315 line 257 toUtmUps8.easting: 6673845.021771
    test 1316 line 257 toUtmUps8.northing: 1177587.190565
    test 1317 line 257 toUtmUps8.convergence: 8.389141
    test 1318 line 257 toUtmUps8.scale: 1.605171
    test 1319 line 257 toUtmUps8.lat: 6.609626
    test 1320 line 257 toUtmUps8.lon: 51.735783
    test 1321 line 258 toUtmUps8.easting: 6966354.690417
    test 1322 line 258 toUtmUps8.northing: 3641802.005093
    test 1323 line 258 toUtmUps8.convergence: 27.409636
    test 1324 line 258 toUtmUps8.scale: 1.661469
    test 1325 line 258 toUtmUps8.lat: 19.059369
    test 1326 line 258 toUtmUps8.lon: 57.526439
    test 1327 max forward error: 1.678807e-03
    test 1328 max reverse error: 3.170454e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 Ups.scale0: 0.994  FAILED, KNOWN, expected 0.9996
    test 1333 Ups.datum: WGS84
    test 1334 Ups.datum.ellipsoid.KsOrder: 8
    test 1335 WGS84.KsOrder: 8

    24 of 1335 testUtmUpsTMcoords.py tests (1.8%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 300.637 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testVectorial.py

    testing testVectorial.py 21.07.25

    testVectorial(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 1 toLatLon: 44.995674°N, 045.0°E
    test 2 toNvector: (0.50004, 0.50004, 0.70705)
    test 3 isequalTo: False
    test 4 isequalTo: True
    test 5 length: 0.99992449715
    test 6 euclid: 0.99995577
    test 7 length: 1.00
    test 8 euclid: 1.0000
    test 9 meanOf: 44.995674°N, 045.0°E
    test 10 meanOf: LatLon
    test 11 sumOf: (52.70504, 0.61904, 0.70705)
    test 12 sumOf: Nv
    test 13 sumOf: sumOf
    test 14 length: 52.7134151513
    test 15 copy: True
    test 16 length: 52.2051356286
    test 17 length: 52.2051356286
    test 18 nearestOn: 51.0°N, 001.0°E
    test 19 nearestOn: 50.987°N, 000.298°W
    test 20 nearestOn: 51.0°N, 002.0°E
    test 21 nearestOn: 50.995°N, 002.655°E
    test 22 nearestOn: 51.0°N, 001.9°E
    test 23 nearestOn: True
    test 24 distanceTo: 42.826
    test 25 nearestOn: 51.0°N, 002.0°E
    test 26 nearestOn: True
    test 27 nearestOn: 00.0°N, 000.0°E
    test 28 nearestOn: True
    test 29 nearestOn: 00.0°N, 020.0°E
    test 30 nearestOn: True
    test 31 nearestOn: 02.0°N, 002.0°E
    test 32 nearestOn: 02.0°N, 002.0°E
    test 33 BasseC: 47.3038°N, 002.5721°W
    test 34 BasseH: 47.311067°N, 002.528617°W
    test 35 triangulate: 47.323667°N, 002.568501°W
    test 36 triangulate: True
    test 37 trilaterate: 37.419078°N, 121.960579°W
    test 38 trilaterate: True
    test 39 trilaterate: 08.068912°S, 034.888699°W
    test 40 trilaterate: True
    test 41 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 42 trilaterate: True
    test 43 trilaterate: 42.67456065°N, 002.49539502°E
    test 44 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 45 sumOf: Nvector
    test 46 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 47 ecef.lat, .lon: 44.995674, 45.0
    test 48 ecef.height: -0.0
    test 49 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 50 .isEllipsoidal: True
    test 51 .isSpherical: False
    test 52 .latlon: (44.995674, 45.0)
    test 53 .philam: (0.785323, 0.785398)
    test 54 .latlonheight: (44.995674, 45.0, 0)
    test 55 .philamheight: (0.785323, 0.785398, 0)
    test 56 parse: (0.5, 0.5, 0.707)
    test 57 cmp: 0
    test 58 eq: True
    test 59 ge: True
    test 60 gt: False
    test 61 le: True
    test 62 lt: False
    test 63 ne: False
    test 64 *: (1.0, 1.0, 1.414)
    test 65 +: (1.0, 1.0, 1.414)
    test 66 /: (0.5, 0.5, 0.707)
    test 67 -: (0.5, 0.5, 0.707)
    test 68 @: (0.0, 0.0, 0.0)
    test 69 @: (0.0, 0.0, 0.0)
    test 70 rotate: (0.26268, 0.26268, 0.37143)
    test 71 crosserrors: True
    test 72 0: factor (0): float division by zero
    test 73 intersections2: (500.0, 0.0, 0.0)
    test 74 nearestOn: (0.0, 0.0, 0.0)
    test 75 nearestOn: True
    test 76 nearestOn: (100.0, 100.0, 100.0)
    test 77 nearestOn: True
    test 78 iscolinearWith: False
    test 79 iscolinearWith: True

    testVectorial(pygeodesy.sphericalNvector, 21.06.09)
    test 80 crossTrackDistanceTo: -305.67
    test 81 crossTrackDistanceTo: -307.55
    test 82 toLatLon: 44.995674°N, 045.0°E
    test 83 toNvector: (0.50004, 0.50004, 0.70705)
    test 84 isequalTo: False
    test 85 isequalTo: True
    test 86 length: 0.99992449715
    test 87 euclid: 0.99995577
    test 88 length: 1.00
    test 89 euclid: 1.0000
    test 90 meanOf: 44.995674°N, 045.0°E
    test 91 meanOf: LatLon
    test 92 sumOf: (52.70504, 0.61904, 0.70705)
    test 93 sumOf: Nv
    test 94 sumOf: sumOf
    test 95 length: 52.7134151513
    test 96 copy: True
    test 97 length: 52.2051356286
    test 98 length: 52.2051356286
    test 99 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 100 toLatLon: 44.995674°N, 045.0°E, -0.00m  FAILED, KNOWN, expected 44.995674°N, 045.0°E
    test 101 toNvector: (0.50004, 0.50004, 0.70705, -0.00)
    test 102 intersection: 02.499372°N, 002.5°E
    test 103 isenclosedBy: True
    test 104 isenclosedBy*: True
    test 105 isenclosedBy: True
    test 106 isenclosedBy*: True
    test 107 iswithin: False
    test 108 iswithin: True
    test 109 nearestOn: 51.0°N, 001.0°E
    test 110 nearestOn: 50.987°N, 000.298°W
    test 111 nearestOn: 51.0°N, 002.0°E
    test 112 nearestOn: 50.995°N, 002.655°E
    test 113 nearestOn: 51.0°N, 001.9°E
    test 114 nearestOn: True
    test 115 distanceTo: 42.712
    test 116 nearestOn: 51.0°N, 002.0°E
    test 117 nearestOn: True
    test 118 nearestOn: 00.0°N, 000.0°E
    test 119 nearestOn: True
    test 120 nearestOn: 00.0°N, 020.0°E
    test 121 nearestOn: True
    test 122 nearestOn: 02.0°N, 002.0°E
    test 123 nearestOn: 02.0°N, 002.0°E
    test 124 BasseC: 47.3038°N, 002.5721°W
    test 125 BasseH: 47.311067°N, 002.528617°W
    test 126 triangulate: 47.323667°N, 002.568501°W
    test 127 triangulate: True
    test 128 trilaterate: 37.419078°N, 121.960579°W
    test 129 trilaterate: True
    test 130 trilaterate: 08.068912°S, 034.888699°W
    test 131 trilaterate: True
    test 132 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 133 trilaterate: True
    test 134 trilaterate: 42.67456065°N, 002.49539502°E
    test 135 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-0.000081)

    testNvector(pygeodesy.sphericalNvector, 21.06.09)
    test 136 sumOf: Nvector
    test 137 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 138 ecef.lat, .lon: 44.995674, 45.0
    test 139 ecef.height: 0.0
    test 140 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 141 .isEllipsoidal: False
    test 142 .isSpherical: True
    test 143 .latlon: (44.995674, 45.0)
    test 144 .philam: (0.785323, 0.785398)
    test 145 .latlonheight: (44.995674, 45.0, 0)
    test 146 .philamheight: (0.785323, 0.785398, 0)
    test 147 parse: (0.5, 0.5, 0.707)
    test 148 cmp: 0
    test 149 eq: True
    test 150 ge: True
    test 151 gt: False
    test 152 le: True
    test 153 lt: False
    test 154 ne: False
    test 155 *: (1.0, 1.0, 1.414)
    test 156 +: (1.0, 1.0, 1.414)
    test 157 /: (0.5, 0.5, 0.707)
    test 158 -: (0.5, 0.5, 0.707)
    test 159 @: (0.0, 0.0, 0.0)
    test 160 @: (0.0, 0.0, 0.0)
    test 161 rotate: (0.26268, 0.26268, 0.37143)
    test 162 crosserrors: True
    test 163 0: factor (0): float division by zero
    test 164 intersections2: (500.0, 0.0, 0.0)
    test 165 nearestOn: (0.0, 0.0, 0.0)
    test 166 nearestOn: True
    test 167 nearestOn: (100.0, 100.0, 100.0)
    test 168 nearestOn: True
    test 169 iscolinearWith: False
    test 170 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 21.06.25)
    test 171 sumOf: Vector4Tuple
    test 172 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 173 ecef.lat, .lon: 44.995674, 45.0
    test 174 ecef.height: 0.0
    test 175 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 176 .isEllipsoidal: False
    test 177 .isSpherical: True
    test 178 .latlon: (44.995674, 45.0)
    test 179 .philam: (0.785323, 0.785398)
    test 180 .latlonheight: (44.995674, 45.0, 0)
    test 181 .philamheight: (0.785323, 0.785398, 0)
    test 182 parse: (0.5, 0.5, 0.707)
    test 183 cmp: 0
    test 184 eq: True
    test 185 ge: True
    test 186 gt: False
    test 187 le: True
    test 188 lt: False
    test 189 ne: False
    test 190 *: (1.0, 1.0, 1.414)
    test 191 +: (1.0, 1.0, 1.414)
    test 192 /: (0.5, 0.5, 0.707)
    test 193 -: (0.5, 0.5, 0.707)
    test 194 @: (0.0, 0.0, 0.0)
    test 195 @: (0.0, 0.0, 0.0)
    test 196 rotate: (0.26268, 0.26268, 0.37143)
    test 197 crosserrors: True
    test 198 0: factor (0): float division by zero
    test 199 intersections2: (500.0, 0.0, 0.0)
    test 200 nearestOn: (0.0, 0.0, 0.0)
    test 201 nearestOn: True
    test 202 nearestOn: (100.0, 100.0, 100.0)
    test 203 nearestOn: True
    test 204 iscolinearWith: False
    test 205 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 21.06.25)
    test 206 sumOf: Vector4Tuple
    test 207 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 208 ecef.lat, .lon: 44.995674, 45.0
    test 209 ecef.height: -0.0
    test 210 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 211 .isEllipsoidal: True
    test 212 .isSpherical: False
    test 213 .latlon: (44.995674, 45.0)
    test 214 .philam: (0.785323, 0.785398)
    test 215 .latlonheight: (44.995674, 45.0, 0)
    test 216 .philamheight: (0.785323, 0.785398, 0)
    test 217 parse: (0.5, 0.5, 0.707)
    test 218 cmp: 0
    test 219 eq: True
    test 220 ge: True
    test 221 gt: False
    test 222 le: True
    test 223 lt: False
    test 224 ne: False
    test 225 *: (1.0, 1.0, 1.414)
    test 226 +: (1.0, 1.0, 1.414)
    test 227 /: (0.5, 0.5, 0.707)
    test 228 -: (0.5, 0.5, 0.707)
    test 229 @: (0.0, 0.0, 0.0)
    test 230 @: (0.0, 0.0, 0.0)
    test 231 rotate: (0.26268, 0.26268, 0.37143)
    test 232 crosserrors: True
    test 233 0: factor (0): float division by zero
    test 234 intersections2: (500.0, 0.0, 0.0)
    test 235 nearestOn: (0.0, 0.0, 0.0)
    test 236 nearestOn: True
    test 237 nearestOn: (100.0, 100.0, 100.0)
    test 238 nearestOn: True
    test 239 iscolinearWith: False
    test 240 iscolinearWith: True

    testCartesian(pygeodesy.sphericalNvector, 21.06.09)
    test 241 sphericalNvector.Cartesian.trilaterate3d2: 2
    test 242 sphericalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 243 sphericalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 244 pygeodesy.vector3d.trilaterate3d2: 2
    test 245 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 246 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 247 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 248 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 249 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 250 Cartesian.trilaterate3d2: 2
    test 251 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 252 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 253 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 254 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 255 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.sphericalTrigonometry, 21.07.24)
    test 256 sphericalTrigonometry.Cartesian.trilaterate3d2: 2
    test 257 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 258 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 259 pygeodesy.vector3d.trilaterate3d2: 2
    test 260 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 261 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 262 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 263 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 264 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 265 Cartesian.trilaterate3d2: 2
    test 266 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 267 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 268 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 269 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 270 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalNvector, 21.04.24)
    test 271 ellipsoidalNvector.Cartesian.trilaterate3d2: 2
    test 272 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 273 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 274 pygeodesy.vector3d.trilaterate3d2: 2
    test 275 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 276 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 277 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 278 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 279 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 280 Cartesian.trilaterate3d2: 2
    test 281 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 282 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 283 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 284 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 285 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalVincenty, 21.06.27)
    test 286 ellipsoidalVincenty.Cartesian.trilaterate3d2: 2
    test 287 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 288 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 289 pygeodesy.vector3d.trilaterate3d2: 2
    test 290 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 291 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 292 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 293 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 294 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 295 Cartesian.trilaterate3d2: 2
    test 296 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 297 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 298 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 299 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 300 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalKarney, 21.06.27)
    test 301 ellipsoidalKarney.Cartesian.trilaterate3d2: 2
    test 302 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 303 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 304 pygeodesy.vector3d.trilaterate3d2: 2
    test 305 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 306 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 307 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 308 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 309 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 310 Cartesian.trilaterate3d2: 2
    test 311 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 312 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 313 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 314 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 315 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalExact, 21.06.27)
    test 316 ellipsoidalExact.Cartesian.trilaterate3d2: 2
    test 317 ellipsoidalExact.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 318 ellipsoidalExact.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 319 pygeodesy.vector3d.trilaterate3d2: 2
    test 320 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 321 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 322 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 323 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 324 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 325 Cartesian.trilaterate3d2: 2
    test 326 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 327 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 328 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 329 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 330 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalGeodSolve, 21.06.27)
    test 331 ellipsoidalGeodSolve.Cartesian.trilaterate3d2: 2
    test 332 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 333 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 334 pygeodesy.vector3d.trilaterate3d2: 2
    test 335 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 336 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 337 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 338 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 339 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 340 Cartesian.trilaterate3d2: 2
    test 341 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 342 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 343 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 344 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 345 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesianBase(pygeodesy.cartesianBase, 21.06.30)
    test 346 cartesianBase.CartesianBase.trilaterate3d2: 2
    test 347 cartesianBase.CartesianBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 348 cartesianBase.CartesianBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 349 pygeodesy.vector3d.trilaterate3d2: 2
    test 350 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 351 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 352 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 353 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 354 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 355 CartesianBase.trilaterate3d2: 2
    test 356 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 357 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 358 CartesianBase.trilaterate3d2: center (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 359 CartesianBase.trilaterate3d2: center (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 360 CartesianBase.trilaterate3d2: center (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testNvectorBase(pygeodesy.nvectorBase, 21.06.25)
    test 361 nvectorBase.NvectorBase.trilaterate3d2: 2
    test 362 nvectorBase.NvectorBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 363 nvectorBase.NvectorBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 364 pygeodesy.vector3d.trilaterate3d2: 2
    test 365 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 366 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 367 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 368 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 369 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 370 NvectorBase.trilaterate3d2: 2
    test 371 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 372 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 373 NvectorBase.trilaterate3d2: center (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 374 NvectorBase.trilaterate3d2: center (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 375 NvectorBase.trilaterate3d2: center (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testVector3d(pygeodesy.vector3d, 21.07.26)
    test 376 vector3d.Vector3d.trilaterate3d2: 2
    test 377 vector3d.Vector3d 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 378 vector3d.Vector3d 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 379 pygeodesy.vector3d.trilaterate3d2: 2
    test 380 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 381 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 382 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 383 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 384 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(0, 0, 0)), center2 (Vector3d(0, 9, 0)), center3 (Vector3d(0, -9, 0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 385 Vector3d.trilaterate3d2: 2
    test 386 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 387 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 388 Vector3d.trilaterate3d2: center (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 389 Vector3d.trilaterate3d2: center (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 390 Vector3d.trilaterate3d2: center (Vector3d(0, 0, 0)), center2 (Vector3d(0, 9, 0)), center3 (Vector3d(0, -9, 0)), radius (10), radius2 (10) or radius3 (10): colinear

    testTrilaterate2d2(pygeodesy.vector3d, 21.07.26)
    test 391 trilaterate2d2: (2.0, 3.0)
    test 392 trilaterate2d2: delta (6.39335377017e-06), radius1 (1.0) and distance (1.00000639335): exceeds eps (2.22045e-16)
    test 393 trilaterate2d2: (-500.0, 250.0)
    test 394 meeus2: 2.236, 3.0, 2.0, 0.0
    test 395 meeus2: (3.0, 2.0, 0)
    test 396 circum3: 2.2361
    test 397 circum3: (3.0, 2.0, 0)
    test 398 circum3: None

    testTrilaterate3d2(pygeodesy.vector3d, 21.07.26)
    test 399 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(-500, -200, 0)), center2 (Vector3d(100, -100, 0)), center3 (Vector3d(500, 100, 0)), radius1 (450.0), radius2 (694.6221994724903) or radius3 (1011.1874208078342): no intersection
    test 400 pygeodesy.vector3d.trilaterate3d2: 2
    test 401 vector3d.Vector3d 'trilaterate3d2': -500.0, 250.0, -0.00535  FAILED, KNOWN, expected -500.0, 250.0, 0.0
    test 402 vector3d.Vector3d 'trilaterate3d2': -500.0, 250.0, 0.00535  FAILED, KNOWN, expected -500.0, 250.0, 0.0
    test 403 meeus2: 1.50
    test 404 meeus2: None
    test 405 meeus2: 0.000000029, 0.5, -0.000000029  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 406 meeus2: -0.000000029, 0.5, 0.000000029  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 407 circum3: 1.50
    test 408 circum3: 0.0, 0.5, -0.0  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 409 circum3: None

    testintersection3d3(pygeodesy.vector3d, 21.07.26)
    test 410 (30, 17): (Vector3d(30.30584, 16.75258, 0.0), 0, 0)
    test 411 (-1,  3): (Vector3d(-1.0429, 2.92225, 0.0), -1, -2)
    test 412 (65, 32): (Vector3d(64.86667, 32.0, 0.0), 1, -2)
    test 413 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 414 (49, 25): (Vector3d(49.0, 25.0, 0.0), 0, 0)

    8 of 414 testVectorial.py tests (1.9%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 596.998 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testWebMercator.py

    testing testWebMercator.py 21.02.10 (module pygeodesy.webmercator 21.04.24)
    test 1 toWm1: -626172.13571216 6887893.4928338
    test 2 Wm1.y: 6887893.49283380
    test 3 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 4 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 5 Wm2: 448251.795 5411932.678
    test 6 Wm2: 448252 5411933
    test 7 Wm2: 448251.8 5411932.7
    test 8 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 9 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 10 Wm2.to2ll: 43.65321741, 4.02671439
    test 11 Wm2.toLatLon: 43.653217°N, 004.026714°E
    test 12 Wm2.toLatLon: 43°39′11.58″N, 004°01′36.17″E
    test 13 toWm1: 448251.795 5411932.678
    test 14 toWm2: 448252 5411933
    test 15 toWm3: [x:448252, y:5411933, radius:6378137]
    test 16 copy: 448251.795 5411932.678
    test 17 parse: 448251.795 5411932.678
    test 18 parse: 448251.795 5411932.678
    test 19 parse: [x:448251.795, y:5411932.678, radius:6378137.0]
    test 20 toWm4: 11562388 1506899
    test 21 toWm4: 11562388.154378 1506899.04498
    test 22 toWm4E: 11562388 1496994
    test 23 toWm4E: 11562388.154378 1496993.698095
    test 24 toWm5: -11169056 2800000
    test 25 toWm5: -11169055.576258 2800000.003136
    test 26 toWm5E: -11169056 2782367
    test 27 toWm5E: -11169055.576258 2782367.05923
    test 28 Wm6.toLatLon: 24.46358°N, 100.333333°W
    test 29 Wm6.toLatLon: 24°27′48.89″N, 100°20′00.0″W
    test 30 Wm6.toLatLonE: 24.299812°N, 100.333333°W
    test 31 Wm6.toLatLonE: 24°17′59.32″N, 100°20′00.0″W
    test 32 Wm7.toLatLon: 24.381787°N, 100.333333°W
    test 33 Wm7.toLatLon: 24°22′54.43″N, 100°20′00.0″W
    test 34 Wm7.toLatLonE: 24.218566°N, 100.333333°W
    test 35 Wm7.toLatLonE: 24°13′06.84″N, 100°20′00.0″W
    test 36 Wm8.toWm: -33878.893, 6693890.382, 6378137.0
    test 37 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 38 Wm8.toWm: -33878.893 6693890.382 6371008.771
    test 39 Wm8.toWm.x: -33878.893
    test 40 Wm8.toWm.y: 6693890.382
    test 41 Wm8.toWm.latlon: 51.408596, -0.304339
    test 42 Wm8.toWm.philam: 0.897249, -0.005312
    test 43 Wm8.toLatLon: 51.408596053784°N, 000.304339270785°W
    test 44 Wm8.toLatLon: 51°24′30.945794″N, 000°18′15.621375″W
    test 45 Wm9.toLatLon: TypeError
    test 46 Wm9.toLatLon: TypeError
    test 47 Wm9.toLatLon: TypeError
    test 48 Wm9.toLatLon: TypeError
    test 49 Wm9.toLatLon: TypeError
    test 50 toWm(LatLon(10.0000, 0)).y: 1118889.97
    test 51 toWm(LatLon(20.0000, 0)).y: 2273030.93
    test 52 toWm(LatLon(30.0000, 0)).y: 3503549.84
    test 53 toWm(LatLon(40.0000, 0)).y: 4865942.28
    test 54 toWm(LatLon(50.0000, 0)).y: 6446275.84
    test 55 toWm(LatLon(60.0000, 0)).y: 8399737.89
    test 56 toWm(LatLon(10.0003, 0)).y: 1118921.37
    test 57 toWm(LatLon(20.0003, 0)).y: 2273063.83
    test 58 toWm(LatLon(30.0003, 0)).y: 3503585.55
    test 59 toWm(LatLon(40.0003, 0)).y: 4865982.65
    test 60 toWm(LatLon(50.0003, 0)).y: 6446323.95
    test 61 toWm(LatLon(60.0003, 0)).y: 8399799.73
    test 62 toWm(LatLonE(10.0000, 0)).y: 1111475.10
    test 63 toWm(LatLonE(20.0000, 0)).y: 2258423.65
    test 64 toWm(LatLonE(30.0000, 0)).y: 3482189.09
    test 65 toWm(LatLonE(40.0000, 0)).y: 4838471.40
    test 66 toWm(LatLonE(50.0000, 0)).y: 6413524.59
    test 67 toWm(LatLonE(60.0000, 0)).y: 8362698.55
    test 68 toWm(LatLonE(10.0003, 0)).y: 1111506.30
    test 69 toWm(LatLonE(20.0003, 0)).y: 2258456.36
    test 70 toWm(LatLonE(30.0003, 0)).y: 3482224.61
    test 71 toWm(LatLonE(40.0003, 0)).y: 4838511.61
    test 72 toWm(LatLonE(50.0003, 0)).y: 6413572.57
    test 73 toWm(LatLonE(60.0003, 0)).y: 8362760.29

    all 73 testWebMercator.py tests passed (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 5.383 ms

running /System/Library/....Python -W always ~/PyGeodesy/test/testWgrs.py

    testing testWgrs.py 21.01.10 (module pygeodesy.wgrs 21.05.26)
    test 1 Georef: 'NKLN2444638946'
    test 2 Georef: Georef('NKLN2444638946')
    test 3 Georef: NKLN2444638946
    test 4 Georef.latlon: 57.64911, 10.40744
    test 5 Georef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 6 codec3: NKLN2444638946
    test 7 decode3: 57.64911, 10.40744, 6.0
    test 8 encode: NKLN2444638946
    test 9 Georef: 'NKLN2444638946H0'
    test 10 Georef: Georef('NKLN2444638946H0')
    test 11 Georef: NKLN2444638946H0
    test 12 Georef.latlon: 57.64911, 10.40744
    test 13 Georef.precision: 6
    test 14 Georef.radius: None
    test 15 Georef: 'GJPJ3424917166'
    test 16 Georef: Georef('GJPJ3424917166')
    test 17 Georef: GJPJ3424917166
    test 18 Georef.latlon: 38.286108, -76.42917
    test 19 Georef.toLatLon: LatLon(38°17′09.99″N, 076°25′45.01″W)
    test 20 codec3: GJPJ3424917166
    test 21 decode3: 38.286108, -76.429175, 6.0
    test 22 encode: GJPJ3424917166
    test 23 Georef: 'GJPJ3424917166H0'
    test 24 Georef: Georef('GJPJ3424917166H0')
    test 25 Georef: GJPJ3424917166H0
    test 26 Georef.latlon: 38.286108, -76.42917
    test 27 Georef.precision: 6
    test 28 Georef.radius: None
    test 29 Georef.3Tuple: 38.286108, -76.42917, 0.0
    test 30 codec3: MKPG1204
    test 31 decode3: 51.075, -1.7917, 3.0
    test 32 encode: MKPG1204
    test 33 codec3: WJKG1503
    test 34 decode3: 36.0583, 129.2583, 3.0
    test 35 encode: WJKG1503
    test 36 codec5: GJPJ4103R5
    test 37 decode5: 38.0583, -76.3083, 3.0, None, 9260.0
    test 38 encode: GJPJ4103R5
    test 39 codec5: GJPJ4103H17
    test 40 decode5: 38.0583, -76.3083, 3.0, 5181.6, None
    test 41 encode: GJPJ4103H17
    test 42 codec5: GJPJ4103R5H17
    test 43 decode5: 38.0583, -76.3083, 3.0, 5181.6, 9260.0
    test 44 encode: GJPJ4103R5H17
    test 45 precision: -1  FAILED, KNOWN, expected 0
    test 46 resolution: 15°
    test 47 precision: 0
    test 48 resolution: 15°
    test 49 precision: 1
    test 50 resolution: 1°
    test 51 precision: 2
    test 52 resolution: 0.1′
    test 53 precision: 3
    test 54 resolution: 0.01′
    test 55 precision: 4
    test 56 resolution: 0.001′
    test 57 precision: 5
    test 58 resolution: 0.0001′
    test 59 precision: 6
    test 60 resolution: 0.00001′
    test 61 precision: 7
    test 62 resolution: 0.000001′
    test 63 precision: 8
    test 64 resolution: 0.0000001′
    test 65 precision: 9
    test 66 resolution: 0.00000001′
    test 67 precision: 10
    test 68 resolution: 0.000000001′
    test 69 precision: 11
    test 70 resolution: 0.0000000001′
    test 71 precision: 12  FAILED, KNOWN, expected 11
    test 72 resolution: 0.0000000001′

    2 of 72 testWgrs.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W  always) 4.555 ms

test/run.py /System/Library/....Python -W always all 30424 tests OK (PyGeodesy 21.7.27 Python 2.7.16 64bit coverage 4.5.4 numpy 1.16.6 macOS 10.16 -W always) 3:00.622 (168.440 tps)
